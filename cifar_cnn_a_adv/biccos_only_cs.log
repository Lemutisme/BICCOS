Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  verify_onnxruntime_output: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  prepare_only: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: ablation_results/cifar_cnn_a_adv/biccos_only_cs.out
  root_path: ''
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  buffer_has_batchdim: false
  save_output: false
  output_file: out.pkl
  return_optimized_model: false
model:
  name: cnn_4layer_adv
  path: models/sdp/cifar_cnn_a_adv.model
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: []
  onnx_vnnlib_joint_optimization_flags: none
  check_optimized: false
  flatten_final_output: false
  optimize_graph: null
  with_jacobian: false
data:
  start: 0
  end: 10000
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR_SDP
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.00784313725
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 4096
  auto_enlarge_batch_size: true
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  optimize_disjuncts_separately: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
    relu_option: adaptive
    compare_crown_with_ibp: false
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    disable_optimization: []
    max_time: 1.0
  invprop:
    apply_output_constraints_to: []
    tighten_input_bounds: false
    best_of_oc_and_no_oc: false
    directly_optimize: []
    oc_lr: 0.1
    share_gammas: false
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    max_dim: 10000
    reset_threshold: 1.0
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    unstable_neuron_threshold: 0
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
    topk_filter: 1.0
    sliding_window: -1
    extra_constraint: false
    refine_neuron_timeout_increasement: 0
    timeout_neuron_percentage: 0.3
    remaining_timeout_threshold: 1
    remove_unstable_neurons: false
    lp_solver: mip
    output_cut: false
bab:
  initial_max_domains: 1
  backing_up_max_domain: null
  max_domains: .inf
  decision_thresh: 0
  timeout: 200
  timeout_scale: 1
  max_iterations: -1
  override_timeout: null
  get_upper_bound: false
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: false
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  tree_traversal: breadth_first
  cut:
    enabled: true
    cuts_path: /tmp/abcrown_cuts_32314
    implication: false
    bab_cut: true
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 0.99
    iteration: 200
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.05
    number_cuts: 500
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
    biccos:
      enabled: true
      auto_param: true
      constraint_strengthening: true
      recursively_strengthening: false
      merge_cut_enabled: false
      fast_inference_enabled: false
      drop_ratio: 0.5
      max_infer_iter: 40
      heuristic: neuron_influence_score
      save_cuts: false
      multi_tree_branching:
        enabled: false
        restore_best_tree: false
        keep_n_best_domains: 50
        target_batch_size: 200
        iterations: 5
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    nonlinear_split:
      method: shortcut
      branching_point_method: uniform
      num_branches: 2
      filter: false
      filter_beta: false
      filter_clamp: false
      filter_batch_size: 10000
      filter_iterations: 25
      relu_only: false
      loose_tanh_threshold: null
      dynamic_bbps: false
      dynamic_options: [uniform, three_left, three_right]
      branching_point_node: ''
      branching_point_db: []
    input_split:
      enable_clip_domains: false
      split_hint: null
      reorder_bab: false
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_sum: false
      sb_primary_spec: null
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_iters: 1000000000.0
      bf_batch_size: 100000
      bf_zero_crossing_score: false
      touch_zero_score: 0
      ibp_enhancement: false
      catch_assertion: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
      sb_coeff_thresh: 0.001
      sort_index: null
      sort_descending: true
      show_progress: false
      presplit_domains: null
      skip_getting_worst_domain: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: middle
  pgd_steps: 100
  pgd_restarts: 50
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_alpha_scale: false
  pgd_loss_mode: null
  pgd_restart_when_stuck: false
  enable_mip_attack: false
  adv_saver: default_adv_saver
  adv_verifier: default_adv_verifier
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    enabled: auto
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0
  print_verbose_decisions: false
  biccos_mip_sanity_check: false
  sanity_check: 0
  z_split_enabled: false

Experiments at Wed Oct 30 05:41:17 2024 on w23g0007.hpc.itc.rwth-aachen.de
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten(start_dim=1, end_dim=-1)
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
Parameters:
  0.weight: shape torch.Size([16, 3, 4, 4])
  0.bias: shape torch.Size([16])
  2.weight: shape torch.Size([32, 16, 4, 4])
  2.bias: shape torch.Size([32])
  5.weight: shape torch.Size([100, 2048])
  5.bias: shape torch.Size([100])
  7.weight: shape torch.Size([10, 100])
  7.bias: shape torch.Size([10])
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.12560368) tensor(-1.98888886) tensor(-0.01308715)
############################
Internal results will be saved to ablation_results/cifar_cnn_a_adv/biccos_only_cs.out.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.60389853, -4.03890705, -0.96637481, -1.08776557, -1.28065956,
         -1.57759106, -2.01748729, -1.63907158, -4.69097900, -3.85279989]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [218]; unstable size 218; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 98, 1, 218] with unstable size 97 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 218] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 218] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [97]; unstable size 97; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 97] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 97] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.15867972,  2.57397366, -0.32336396, -0.12450480,  0.40432665,
          0.56075501,  0.24401051,  3.10249233,  2.30172944]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.60389853, -4.03890705, -0.96637481, -1.08776557, -1.28065956,
         -1.57759106, -2.01748729, -1.63907158, -4.69097900, -3.85279989]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.60389853, -4.03890657, -0.96637493, -1.08776581, -1.28065979,
          -1.57759106, -2.01748776, -1.63907230, -4.69097900, -3.85279989],
         [-2.60389853, -4.03890657, -0.96637493, -1.08776581, -1.28065979,
          -1.57759106, -2.01748776, -1.63907230, -4.69097900, -3.85279989]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12139088,  0.19289398]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.97301579, -1.96507931, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.96507931],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.94126987,
            -1.96507931, -1.97301579],
           ...,
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.93236721,
            -1.93236721, -1.96457338],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.95652175,
            -1.95652175, -1.96457338],
           [-1.96457338, -1.95652175, -1.94847023,  ..., -1.96457338,
            -1.96457338, -1.95652175],
           ...,
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.66266882, -1.64767623],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.68515754,
            -1.68515754, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           ...,
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.96507931, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.96507931],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.94126987,
            -1.96507931, -1.97301579],
           ...,
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.93236721,
            -1.93236721, -1.96457338],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.95652175,
            -1.95652175, -1.96457338],
           [-1.96457338, -1.95652175, -1.94847023,  ..., -1.96457338,
            -1.96457338, -1.95652175],
           ...,
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.66266882, -1.64767623],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.68515754,
            -1.68515754, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           ...,
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 5.3509 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 1, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.91239977,  1.30044675, -7.26831532, -7.87342548, -7.74763012,
         -8.46835899, -6.64607763, -8.08242130, -6.15906239,  1.63948882]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [567]; unstable size 567; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 163, 1, 567] with unstable size 162 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 567] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 567] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [162]; unstable size 162; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 162] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 162] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.13653469, -0.81675231,  7.20471954,  7.60528660,  7.75195885,
          8.15055847,  6.22120619,  7.95112419,  6.37312317]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.91239977,  1.30044675, -7.26831532, -7.87342548, -7.74763012,
         -8.46835899, -6.64607763, -8.08242130, -6.15906239,  1.63948882]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:01<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.29230642,  1.39088631, -7.69417095, -8.36273766, -8.14110756,
          -8.96644974, -7.15948677, -8.63516712, -6.20971012,  1.18852425]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.20236206]]], device='cuda:0')
number of violation:  1
Attack finished in 1.0532 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 1.1304 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 2, vnnlib ID: 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.38900280,  -6.91815758, -13.39404202, -12.50848293, -12.34240627,
         -13.34833145, -12.47480679, -13.81170845, -10.09896183,  -8.65394974]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [799]; unstable size 799; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 220, 1, 799] with unstable size 219 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 799] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 799] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [219]; unstable size 219; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 219] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 219] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.81504011, 4.21952724, 3.42959118, 3.38334370, 4.03887367, 3.68367100,
         4.85273170, 1.66043282, 0.65433002]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0636 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 3, vnnlib ID: 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.38513088, -15.12822247,  -7.38964939,  -7.50558901,  -6.26222038,
          -6.85573816, -10.31254101,  -5.30293274, -15.13275623, -13.36650562]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [471]; unstable size 471; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 471] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 471] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 471] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 208] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.96806812,  7.51881886,  0.34542722,  0.43789986, -0.23603076,
          3.05391550, -1.87563038,  7.75412464,  5.88287973]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.38513088, -15.12822247,  -7.38964939,  -7.50558901,  -6.26222038,
          -6.85573816, -10.31254101,  -5.30293274, -15.13275623, -13.36650562]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.38513088, -15.12822247,  -7.38964939,  -7.50558901,  -6.26222038,
           -6.85573816, -10.31254101,  -5.30293274, -15.13275719, -13.36650467],
         [-12.38513088, -15.12822247,  -7.38964939,  -7.50558901,  -6.26222038,
           -6.85573816, -10.31254101,  -5.30293274, -15.13275719, -13.36650467]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.59351778, -0.95928764]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.28095245, -0.35396814, -0.21111101,  ..., -0.43333322,
            -0.76666665,  0.32857150],
           [-1.11587298, -0.44920623, -0.59206349,  ..., -0.41746020,
            -1.09999990, -1.02063489],
           [-1.30634916, -0.59206349, -0.86190474,  ..., -0.06825387,
            -0.81428570, -1.17936504],
           ...,
           [ 0.94761908,  1.24920666,  1.42380977,  ...,  1.45555580,
             1.15396857,  0.80476195],
           [ 0.77301592,  0.97936511,  1.23333359,  ...,  1.18571460,
             1.13809550,  0.86825401],
           [ 0.85238099,  0.24920642,  0.50317466,  ...,  0.86825401,
             0.86825401,  0.99523818]],

          [[ 0.28985518, -0.33816412, -0.19323659,  ..., -0.46698871,
            -0.78904986,  0.33816436],
           [-1.11111104, -0.41867942, -0.54750401,  ..., -0.48309177,
            -1.12721407, -1.03059578],
           [-1.28824472, -0.54750401, -0.80515295,  ..., -0.17713353,
            -0.86956519, -1.17552328],
           ...,
           [ 0.93397754,  1.06280196,  1.20772982,  ...,  1.33655429,
             1.14331758,  0.83735919],
           [ 0.78904998,  0.85346222,  1.04669893,  ...,  1.14331758,
             1.19162667,  0.98228669],
           [ 0.88566834,  0.17713377,  0.35426742,  ...,  0.83735919,
             0.90177143,  1.07890511]],

          [[ 0.40629703, -0.26836565, -0.22338814,  ..., -0.35832080,
            -0.55322337,  0.48125952],
           [-0.92803597, -0.37331331, -0.56821585,  ..., -0.41829082,
            -0.91304344, -0.80809593],
           [-1.10794616, -0.53823084, -0.85307342,  ..., -0.19340314,
            -0.74812591, -1.01799107],
           ...,
           [ 0.28635699,  0.34632701,  0.52623707,  ...,  0.51124454,
             0.31634200,  0.09145443],
           [ 0.36131951,  0.34632701,  0.55622208,  ...,  0.27136448,
             0.34632701,  0.24137947],
           [ 0.69115460, -0.01349309,  0.18140946,  ...,  0.37631202,
             0.48125952,  0.75112462]]],


         [[[ 0.28095245, -0.35396814, -0.21111101,  ..., -0.43333322,
            -0.76666665,  0.32857150],
           [-1.11587298, -0.44920623, -0.59206349,  ..., -0.41746020,
            -1.09999990, -1.02063489],
           [-1.30634916, -0.59206349, -0.86190474,  ..., -0.06825387,
            -0.81428570, -1.17936504],
           ...,
           [ 0.94761908,  1.24920666,  1.42380977,  ...,  1.45555580,
             1.15396857,  0.80476195],
           [ 0.77301592,  0.97936511,  1.23333359,  ...,  1.18571460,
             1.13809550,  0.86825401],
           [ 0.85238099,  0.24920642,  0.50317466,  ...,  0.86825401,
             0.86825401,  0.99523818]],

          [[ 0.28985518, -0.33816412, -0.19323659,  ..., -0.46698871,
            -0.78904986,  0.33816436],
           [-1.11111104, -0.41867942, -0.54750401,  ..., -0.48309177,
            -1.12721407, -1.03059578],
           [-1.28824472, -0.54750401, -0.80515295,  ..., -0.17713353,
            -0.86956519, -1.17552328],
           ...,
           [ 0.93397754,  1.06280196,  1.20772982,  ...,  1.33655429,
             1.14331758,  0.83735919],
           [ 0.78904998,  0.85346222,  1.04669893,  ...,  1.14331758,
             1.19162667,  0.98228669],
           [ 0.88566834,  0.17713377,  0.35426742,  ...,  0.83735919,
             0.90177143,  1.07890511]],

          [[ 0.40629703, -0.26836565, -0.22338814,  ..., -0.35832080,
            -0.55322337,  0.48125952],
           [-0.92803597, -0.37331331, -0.56821585,  ..., -0.41829082,
            -0.91304344, -0.80809593],
           [-1.10794616, -0.53823084, -0.85307342,  ..., -0.19340314,
            -0.74812591, -1.01799107],
           ...,
           [ 0.28635699,  0.34632701,  0.52623707,  ...,  0.51124454,
             0.31634200,  0.09145443],
           [ 0.36131951,  0.34632701,  0.55622208,  ...,  0.27136448,
             0.34632701,  0.24137947],
           [ 0.69115460, -0.01349309,  0.18140946,  ...,  0.37631202,
             0.48125952,  0.75112462]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0658 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 4, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.68809223, -12.13025570,  -6.63767338,  -9.10205269,  -6.98852253,
          -8.95999241,  -8.94991684,  -9.34213543, -12.00477028, -11.17362881]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [543]; unstable size 543; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 225, 1, 543] with unstable size 224 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 543] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 543] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [224]; unstable size 224; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 224] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 224] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.20494175,  3.45831966, -1.40828776,  1.23128533,  0.91527987,
          0.49897861,  1.02173948,  3.54240751,  2.59704590]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.68809223, -12.13025570,  -6.63767338,  -9.10205269,  -6.98852253,
          -8.95999241,  -8.94991684,  -9.34213543, -12.00477028, -11.17362881]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.68809223, -12.13025570,  -6.63767338,  -9.10205269,  -6.98852253,
           -8.95999241,  -8.94991684,  -9.34213543, -12.00477028, -11.17362881]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.35084915]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.45555562,  0.47142863,  0.50317466,  ...,  0.23333341,
             0.16984135, -0.06825387],
           [ 0.37619054,  0.55079371,  0.91587305,  ...,  0.39206356,
             0.59841275,  0.21746039],
           [ 0.47142863,  0.64603180,  0.70952386,  ...,  0.58253974,
             0.85238099,  0.82063496],
           ...,
           [ 0.32857150,  0.55079371,  0.18571436,  ..., -0.67142856,
            -1.22698402, -1.06825387],
           [ 0.47142863,  0.47142863,  0.21746039,  ..., -0.00476181,
            -1.14761901, -1.44920623],
           [ 0.45555562,  0.15396833, -0.11587292,  ...,  1.04285717,
             0.34444451, -0.54444444]],

          [[ 1.03059590,  1.09500813,  1.19162667,  ...,  1.12721443,
             0.96618366,  0.70853472],
           [ 1.03059590,  1.14331758,  1.28824508,  ...,  1.27214205,
             1.36876035,  0.98228669],
           [ 1.15942061,  1.22383285,  1.23993587,  ...,  1.38486338,
             1.54589403,  1.44927561],
           ...,
           [ 1.07890511,  1.28824508,  0.86956531,  ..., -0.70853460,
            -1.20772946, -0.96618354],
           [ 1.15942061,  1.22383285,  1.03059590,  ..., -0.19323659,
            -1.12721407, -1.33655393],
           [ 1.07890511,  0.93397754,  0.85346222,  ...,  0.99838978,
             0.28985518, -0.43478248]],

          [[ 0.10644694,  0.19640197,  0.42128953,  ..., -0.01349309,
             0.09145443, -0.31334329],
           [ 0.16641696,  0.45127454,  0.94602716,  ...,  0.19640197,
             0.75112462,  0.28635699],
           [ 0.16641696,  0.39130452,  0.48125952,  ...,  0.36131951,
             0.91604215,  1.03598225],
           ...,
           [ 0.06146942,  0.37631202,  0.07646193,  ..., -0.83808094,
            -1.27286363, -1.09295356],
           [ 0.19640197,  0.37631202, -0.11844061,  ..., -0.43328333,
            -1.27286363, -1.42278874],
           [ 0.25637197, -0.14842562, -0.73313338,  ...,  0.82608712,
            -0.02848560, -0.82308841]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0608 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 5, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.08061361, -7.35808754, -1.52466714, -0.79548538, -0.38909817,
         -1.03977191, -3.36049914, -3.42065954, -6.66970348, -6.69352865]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [658]; unstable size 658; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 201, 1, 658] with unstable size 200 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 658] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 658] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 200] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.36226141,  5.20612240,  0.11421621, -0.45663387, -0.35881871,
          1.67416513,  1.85006595,  4.62576962,  5.01755571]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.08061361, -7.35808754, -1.52466714, -0.79548538, -0.38909817,
         -1.03977191, -3.36049914, -3.42065954, -6.66970348, -6.69352865]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.72007203, -6.67509556, -1.02529848, -0.02632031, -0.06467843,
          -0.23389345, -2.63078475, -2.87741232, -6.08596230, -5.98822784],
         [-1.72007203, -6.67509556, -1.02529848, -0.02632031, -0.06467843,
          -0.23389345, -2.63078475, -2.87741232, -6.08596230, -5.98822784]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.03835812,  0.16921502]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0126 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0883 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 6, vnnlib ID: 6 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.40164280,  -8.37019825, -13.00969315, -14.79013634, -13.45650959,
         -15.46328926, -15.14051628, -13.42083931,  -9.22426891, -11.21731853]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [529]; unstable size 529; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 529] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 529] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 529] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 192] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.41059232,  2.25627065,  3.81135941,  2.82651448,  4.25359392,
          4.02583885,  2.31334543, -1.35637188,  0.51038718]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.40164280,  -8.37019825, -13.00969315, -14.79013634, -13.45650959,
         -15.46328926, -15.14051628, -13.42083931,  -9.22426891, -11.21731853]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.40164471,  -8.37019730, -13.00969315, -14.79013538, -13.45650864,
          -15.46328926, -15.14051723, -13.42084026,  -9.22426891, -11.21731758],
         [ -9.40164471,  -8.37019730, -13.00969315, -14.79013538, -13.45650864,
          -15.46328926, -15.14051723, -13.42084026,  -9.22426891, -11.21731758]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.03144741, -0.17737579]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]],


         [[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0759 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 7, vnnlib ID: 7 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.00835705, -8.96086788, -3.69912124, -5.03624153, -2.68869019,
         -5.63221502, -2.51778221, -6.42361641, -8.76600933, -9.71107197]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [503]; unstable size 503; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 254, 1, 503] with unstable size 253 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 503] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 503] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [253]; unstable size 253; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 253] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 253] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.85433102,  4.63593149,  0.09867120,  1.33992827, -1.07176208,
          1.69816649,  1.94883513,  4.31601477,  5.46722794]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.00835705, -8.96086788, -3.69912124, -5.03624153, -2.68869019,
         -5.63221502, -2.51778221, -6.42361641, -8.76600933, -9.71107197]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.24038744,  -9.28610897,  -3.84454465,  -5.20589828,  -2.66719246,
           -5.68954802,  -3.06507778,  -6.37724495,  -8.96725273, -10.02994823]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.39788532]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0743 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 8, vnnlib ID: 8 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.93469334, -20.12154388, -17.33457947, -19.86049843, -20.21372986,
         -21.25618935, -22.65778542, -22.05707359, -17.64817047, -20.80877304]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1012]; unstable size 1012; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 127, 1, 1012] with unstable size 126 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 1012] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1012] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [126]; unstable size 126; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 126] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 126] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.23773289, 2.69126463, 5.14333248, 5.34886694, 6.31123495, 7.75378323,
         7.14196968, 2.92753410, 5.99536991]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0722 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 9, vnnlib ID: 9 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.80179358, -12.46501255,  -6.57853985,  -6.68956470,  -7.61111355,
          -7.23589230,  -7.87289953,  -9.75897789,  -7.54242992, -11.49101162]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [483]; unstable size 483; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 224, 1, 483] with unstable size 223 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 483] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 483] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [223]; unstable size 223; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 223] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 223] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.44218969,  3.89411807, -1.74409556, -0.80226827, -0.57978773,
         -0.20545280,  1.59700775, -1.08158147,  2.85933161]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.80179358, -12.46501255,  -6.57853985,  -6.68956470,  -7.61111355,
          -7.23589230,  -7.87289953,  -9.75897789,  -7.54242992, -11.49101162]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.80179310, -12.46501160,  -6.57853985,  -6.68956327,  -7.61111259,
           -7.23589230,  -7.87289858,  -9.75897694,  -7.54242992, -11.49100971],
         [ -7.80179310, -12.46501160,  -6.57853985,  -6.68956327,  -7.61111259,
           -7.23589230,  -7.87289858,  -9.75897694,  -7.54242992, -11.49100971]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.56590080, -0.65735245, -0.54632902,  0.37522030,  0.63700628,
           0.30653763]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0866 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 10, vnnlib ID: 10 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.70068169, -10.68916798,  -4.80894661,  -4.48129988,  -7.59597015,
          -3.34438372,  -9.78639984,  -5.25471544,  -8.97214031,  -9.17322254]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [326]; unstable size 326; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 99, 1, 326] with unstable size 98 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 326] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 326] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [98]; unstable size 98; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 98] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 98] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.76745200,  4.58752918, -0.99277103, -1.30379081,  1.80976796,
         -2.48497844,  3.87898970,  2.81910610,  3.04527569]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.70068169, -10.68916798,  -4.80894661,  -4.48129988,  -7.59597015,
          -3.34438372,  -9.78639984,  -5.25471544,  -8.97214031,  -9.17322254]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.70068073, -10.68916893,  -4.80894661,  -4.48130035,  -7.59597015,
           -3.34438372,  -9.78640079,  -5.25471544,  -8.97214031,  -9.17322254],
         [ -8.70068073, -10.68916893,  -4.80894661,  -4.48130035,  -7.59597015,
           -3.34438372,  -9.78640079,  -5.25471544,  -8.97214031,  -9.17322254]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44576883, -0.77341509, -1.91033173]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0828 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 11, vnnlib ID: 11 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.63478470, -9.97276974, -2.42177224, -5.98180294, -3.01294947,
         -6.49992609, -5.35868835, -6.09445810, -8.49534416, -9.48241520]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [507]; unstable size 507; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 253, 1, 507] with unstable size 252 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 507] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 507] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [252]; unstable size 252; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 252] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 252] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.93055677,  5.50861406,  2.43715620, -0.28564215,  2.95803690,
          1.64144313,  2.49058843,  4.06993961,  5.13847446]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.63478470, -9.97276974, -2.42177224, -5.98180294, -3.01294947,
         -6.49992609, -5.35868835, -6.09445810, -8.49534416, -9.48241520]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.87it/s]100%|██████████| 1/1 [00:00<00:00,  8.85it/s]
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/cuts/infered_cuts.py:406: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(history[3]),
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.85260201, -9.94958401, -2.69204354, -5.95113659, -2.83771229,
          -6.45710039, -5.35251665, -5.97749758, -8.52292919, -9.41183758]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.14566875]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1157 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 26.60954475402832
alpha/beta optimization time: 4.155555248260498
initial alpha-crown bounds: tensor([[ 2.00032020,  5.62875462,  2.49428272, -0.20550483,  3.01036215,
          1.72182703,  2.55286336,  4.16995144,  5.23668766]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.20550483465194702
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 195.64982271194458
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 195.64978075027466
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 195.64964270591736
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 195.64960098266602
Verifying property 3 with 1 instances.
##### Instance 11 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.20550483]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.63478470, -9.97276974, -2.42177224, -5.98180294, -3.01294947,
        -6.49992609, -5.35868835, -6.09445810, -8.49534416, -9.48241520],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.20550483]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 507
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 252
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 782
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001685619354248047
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20550453662872314
10 lb beta sum: 0.0, worst -0.20550620555877686
Time: prepare 0.0003    bound 0.6095    transfer 0.0001    finalize 0.0005    func 0.6103    
Accumulated time: func 0.6103    prepare 0.0003    bound 0.6095    transfer 0.0001    finalize 0.0005    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] 
split level 1: [/input-12, 35] 
split level 2: [/input-12, 45] 
split level 3: [/input-12, 58] 
split level 4: [/input-12, 61] 
split level 5: [/input-12, 80] 
split level 6: [/input-12, 4] 
split level 7: [/input-12, 40] 
split level 8: [/input, 377] 
split level 9: [/input, 392] 
split level 10: [/input, 393] 
split level 11: [/input-8, 443] 
split level 12: [/input, 444] 
split level 13: [/input-12, 60] 
split level 14: [/input-8, 1749] 
split level 15: [/input-8, 1443] 
split level 16: [/input-8, 2042] 
split level 17: [/input-8, 1411] 
split level 18: [/input-8, 1323] 
split level 19: [/input-8, 1260] 
split level 20: [/input, 344] 
split level 21: [/input-8, 881] 
split level 22: [/input-8, 1964] 
split level 23: [/input, 343] 
split level 24: [/input-8, 1436] 
split level 25: [/input-8, 465] 
split level 26: [/input-8, 1388] 
split level 27: [/input-8, 818] 
split level 28: [/input-8, 2043] 
split level 29: [/input-8, 585] 
split level 30: [/input-8, 1251] 
split level 31: [/input-8, 2044] 
split level 32: [/input-8, 265] 
split level 33: [/input, 428] 
split level 34: [/input-8, 273] 
split level 35: [/input-8, 1389] 
split level 36: [/input, 378] 
split level 37: [/input-8, 497] 
split level 38: [/input-12, 99] 
split level 39: [/input-8, 292] 
split level 40: [/input-8, 423] 
split level 41: [/input-8, 115] 
split level 42: [/input-8, 1747] 
split level 43: [/input, 327] 
split level 44: [/input-8, 2032] 
split level 45: [/input-8, 848] 
split level 46: [/input-8, 610] 
split level 47: [/input-8, 849] 
split level 48: [/input, 425] 
split level 49: [/input, 380] 
split level 50: [/input-8, 1410] 
split level 51: [/input, 3161] 
split level 52: [/input, 3493] 
split level 53: [/input-8, 1493] 
split level 54: [/input-8, 1865] 
split level 55: [/input-8, 282] 
split level 56: [/input-8, 1428] 
split level 57: [/input, 3163] 
split level 58: [/input-8, 1873] 
split level 59: [/input-8, 288] 
split level 60: [/input-8, 2040] 
split level 61: [/input-8, 83] 
split level 62: [/input-8, 1741] 
split level 63: [/input-8, 469] 
split level 64: [/input, 87] 
split level 65: [/input, 2412] 
split level 66: [/input, 2166] 
split level 67: [/input, 3178] 
split level 68: [/input-8, 1386] 
split level 69: [/input, 1602] 
split level 70: [/input, 3400] 
split level 71: [/input, 1612] 
split level 72: [/input-8, 1739] 
split level 73: [/input, 329] 
split level 74: [/input, 3479] 
split level 75: [/input-8, 1437] 
split level 76: [/input, 3130] 
split level 77: [/input, 1318] 
split level 78: [/input, 3158] 
split level 79: [/input, 2164] 
split level 80: [/input, 2236] 
split level 81: [/input, 2180] 
split level 82: [/input-8, 407] 
split level 83: [/input, 3461] 
split level 84: [/input, 2181] 
split level 85: [/input, 3157] 
split level 86: [/input-8, 1442] 
split level 87: [/input-8, 883] 
split level 88: [/input-8, 278] 
split level 89: [/input, 3172] 
split level 90: [/input, 103] 
split level 91: [/input, 3927] 
split level 92: [/input, 1302] 
split level 93: [/input, 1460] 
split level 94: [/input-8, 518] 
split level 95: [/input-8, 1014] 
split level 96: [/input-8, 1772] 
split level 97: [/input, 119] 
split level 98: [/input, 1448] 
split level 99: [/input, 1579] 
split level 100: [/input, 139] 
split level 101: [/input-8, 1758] 
split level 102: [/input-8, 1119] 
split level 103: [/input, 2091] 
split level 104: [/input-8, 2041] 
split level 105: [/input, 364] 
split level 106: [/input, 3528] 
split level 107: [/input, 1370] 
split level 108: [/input, 373] 
split level 109: [/input, 1462] 
split level 110: [/input-8, 1731] 
split level 111: [/input, 3475] 
split level 112: [/input, 3148] 
split level 113: [/input-8, 1730] 
split level 114: [/input-8, 1132] 
split level 115: [/input-8, 398] 
split level 116: [/input, 2134] 
split level 117: [/input, 3114] 
split level 118: [/input, 3971] 
split level 119: [/input-8, 1979] 
split level 120: [/input-8, 521] 
split level 121: [/input-8, 1334] 
split level 122: [/input, 1561] 
split level 123: [/input, 1562] 
split level 124: [/input, 3507] 
split level 125: [/input, 3367] 
split level 126: [/input, 1578] 
split level 127: [/input, 3384] 
split level 128: [/input, 385] 
split level 129: [/input, 1336] 
split level 130: [/input, 132] 
split level 131: [/input, 3398] 
split level 132: [/input, 2397] 
split level 133: [/input, 1396] 
split level 134: [/input, 1586] 
split level 135: [/input, 2302] 
split level 136: [/input, 3972] 
split level 137: [/input, 3508] 
split level 138: [/input, 3383] 
split level 139: [/input, 2331] 
split level 140: [/input, 442] 
split level 141: [/input, 1386] 
split level 142: [/input-8, 1006] 
split level 143: [/input, 3145] 
split level 144: [/input, 1563] 
split level 145: [/input, 2385] 
split level 146: [/input-8, 1732] 
split level 147: [/input, 3351] 
split level 148: [/input, 547] 
split level 149: [/input, 2347] 
split level 150: [/input, 2136] 
split level 151: [/input, 3143] 
split level 152: [/input, 1335] 
split level 153: [/input, 3196] 
split level 154: [/input-8, 912] 
split level 155: [/input, 1485] 
split level 156: [/input, 2137] 
split level 157: [/input, 3205] 
split level 158: [/input, 695] 
split level 159: [/input, 325] 
split level 160: [/input, 3214] 
split level 161: [/input, 1354] 
split level 162: [/input, 1413] 
split level 163: [/input, 3397] 
split level 164: [/input, 2364] 
split level 165: [/input, 1596] 
split level 166: [/input, 1421] 
split level 167: [/input, 3142] 
split level 168: [/input, 2981] 
split level 169: [/input, 2163] 
split level 170: [/input, 2627] 
split level 171: [/input, 3940] 
split level 172: [/input-8, 485] 
split level 173: [/input, 71] 
split level 174: [/input, 2227] 
split level 175: [/input, 3529] 
split level 176: [/input, 2245] 
split level 177: [/input, 1342] 
split level 178: [/input, 1746] 
split level 179: [/input, 570] 
split level 180: [/input, 2286] 
split level 181: [/input, 633] 
split level 182: [/input, 569] 
split level 183: [/input, 1720] 
split level 184: [/input, 1403] 
split level 185: [/input, 3190] 
split level 186: [/input, 3221] 
split level 187: [/input, 3156] 
split level 188: [/input-8, 2047] 
split level 189: [/input, 553] 
split level 190: [/input, 1382] 
split level 191: [/input, 3490] 
split level 192: [/input, 2382] 
split level 193: [/input, 1326] 
split level 194: [/input, 370] 
split level 195: [/input, 3334] 
split level 196: [/input, 3222] 
split level 197: [/input, 3364] 
split level 198: [/input, 2299] 
split level 199: [/input, 3339] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20536339282989502
10 lb beta sum: 0.0, worst -0.20536208152770996
Time: prepare 0.0116    bound 0.7608    transfer 0.0039    finalize 0.0031    func 0.7821    
Accumulated time: func 1.3925    prepare 0.0222    bound 1.3703    transfer 0.0040    finalize 0.0036    
all_split False
======================Cut inference begins======================
max lb tensor(0.14420629) min lb tensor(-0.20535862)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.02740001678466797 
BICCOS Cumulative time: 0.02740001678466797
Preprocessing time: 0.025859355926513672 Inference time: 0.001131296157836914 Add cuts time: 8.344650268554688e-05 Cut analysis time: 0.00032591819763183594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19871 (1), -0.19860 (1), -0.19856 (1), -0.19851 (1), -0.19803 (1), -0.19794 (1), -0.19790 (1), -0.19784 (1), -0.19783 (1), -0.19733 (1), -0.19726 (1), -0.19718 (1), -0.19706 (1), -0.19678 (1), -0.19571 (1), -0.19520 (1), -0.19506 (1), -0.19443 (1), -0.19420 (1), -0.19400 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.6285    set_bounds 0.0084    solve 0.7822    add 0.2052    
Accumulated time: pickout 0.0004    decision 0.6285    set_bounds 0.0084    solve 0.7822    add 0.2052    
Current (lb-rhs): -0.19870686531066895
50 domains visited
Cumulative time: 2.3140199184417725

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 45] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 45] [/input-12, 41] 
split level 1: [/input-12, 45] [/input-12, 58] [/input-12, 58] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 58] [/input-12, 45] 
split level 2: [/input-12, 58] [/input-12, 61] [/input-12, 61] [/input-12, 58] [/input-12, 61] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 61] [/input-12, 61] 
split level 3: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 61] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18420112133026123
10 lb beta sum: 0.3620595335960388, worst -0.18056607246398926
Time: prepare 0.0076    bound 1.2656    transfer 0.0014    finalize 0.0026    func 1.2798    
Accumulated time: func 2.6723    prepare 0.0302    bound 2.6359    transfer 0.0054    finalize 0.0061    
all_split False
======================Cut inference begins======================
max lb tensor(0.19712353) min lb tensor(-0.18055964)
Number of Verified Splits: 62 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.01627516746520996 
BICCOS Cumulative time: 0.04367518424987793
Preprocessing time: 0.011826515197753906 Inference time: 0.002491474151611328 Add cuts time: 0.0013821125030517578 Cut analysis time: 0.0005750656127929688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07110 (2), -0.07012 (2), -0.07005 (2), -0.06965 (2), -0.06961 (2), -0.06952 (2), -0.06952 (2), -0.06937 (2), -0.06898 (2), -0.06890 (2), -0.06862 (2), -0.06835 (2), -0.06819 (2), -0.06799 (2), -0.06785 (2), -0.06765 (2), -0.06743 (2), -0.06649 (2), -0.06588 (2), -0.06527 (2), 
Length of domains: 50
Time: pickout 0.0086    decision 0.0237    set_bounds 0.0128    solve 1.2799    add 0.0859    
Accumulated time: pickout 0.0090    decision 0.6521    set_bounds 0.0212    solve 2.0621    add 0.2911    
Current (lb-rhs): -0.07110495865345001
100 domains visited
Cumulative time: 3.7415268421173096

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 35] [/input-12, 41] [/input-12, 41] [/input-12, 45] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 45] [/input-12, 41] 
split level 1: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 58] [/input-12, 45] [/input-12, 45] [/input-12, 35] [/input-12, 58] [/input-12, 35] 
split level 2: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 58] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 3: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 61] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07286334037780762
10 lb beta sum: 0.7891705632209778, worst -0.011590391397476196
Time: prepare 0.0076    bound 0.1234    transfer 0.0008    finalize 0.0024    func 0.1379    
Accumulated time: func 2.8101    prepare 0.0381    bound 2.7593    transfer 0.0062    finalize 0.0086    
all_split False
======================Cut inference begins======================
max lb tensor(0.60014021) min lb tensor(0.00029349)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.03781008720397949 
BICCOS Cumulative time: 0.08148527145385742
Preprocessing time: 0.011779069900512695 Inference time: 0.017241477966308594 Add cuts time: 0.008363962173461914 Cut analysis time: 0.00042557716369628906
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0013    decision 0.0202    set_bounds 0.0163    solve 0.1380    add 0.0207    
Accumulated time: pickout 0.0104    decision 0.6723    set_bounds 0.0375    solve 2.2001    add 0.3117    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] 
split level 1: [/input-12, 35] 
split level 2: [/input-12, 45] 
split level 3: [/input-12, 58] 
split level 4: [/input-12, 61] 
split level 5: [/input-12, 4] 
split level 6: [/input-12, 40] 
split level 7: [/input, 393] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03296869993209839
10 lb beta sum: 0.016956128180027008, worst -0.026556193828582764
Time: prepare 0.0053    bound 0.1261    transfer 0.0006    finalize 0.0015    func 0.1353    
Accumulated time: func 2.9455    prepare 0.0439    bound 2.8854    transfer 0.0068    finalize 0.0101    
all_split False
======================Cut inference begins======================
max lb tensor(0.49663049) min lb tensor(-0.02646357)
Number of Verified Splits: 254 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20550036430358887
10 lb beta sum: 0.6332748532295227, worst -0.03143125772476196
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.2800755500793457 
BICCOS Cumulative time: 0.3615608215332031
Preprocessing time: 0.007358551025390625 Inference time: 0.2670280933380127 Add cuts time: 0.005284786224365234 Cut analysis time: 0.00040411949157714844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02646 (8), -0.02273 (8), 
Length of domains: 2
Time: pickout 0.0005    decision 0.0231    set_bounds 0.0220    solve 0.1354    add 0.0008    
Accumulated time: pickout 0.0108    decision 0.6954    set_bounds 0.0595    solve 2.3355    add 0.3125    
Current (lb-rhs): -0.026463568210601807
102 domains visited
Cumulative time: 4.445113658905029

BaB round 2
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 80] [/input-12, 80] 
split level 1: [/input, 392] [/input, 377] 
split level 2: [/input-8, 1411] [/input-8, 1411] 
split level 3: [/input-8, 1251] [/input-8, 1251] 
split level 4: [/input-8, 2043] [/input-8, 2043] 
split level 5: [/input, 428] [/input, 378] 
split level 6: [/input, 378] [/input, 428] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7119797468185425, worst -0.010704636573791504
10 lb beta sum: 0.7119797468185425, worst -0.010401248931884766
Time: prepare 0.0128    bound 0.1214    transfer 0.0006    finalize 0.0014    func 0.1381    
Accumulated time: func 3.0835    prepare 0.0571    bound 3.0068    transfer 0.0074    finalize 0.0115    
all_split False
======================Cut inference begins======================
max lb tensor(0.30310339) min lb tensor(-0.01031154)
Number of Verified Splits: 200 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.7119796872138977, worst -0.19973206520080566
10 lb beta sum: 0.969078779220581, worst -0.031178772449493408
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 10
#cuts 7-9: 1
#cuts 10-12: 15
#cuts >= 20: 0
BICCOS time: 0.4725649356842041 
BICCOS Cumulative time: 0.8341257572174072
Preprocessing time: 0.008262872695922852 Inference time: 0.45500874519348145 Add cuts time: 0.007645130157470703 Cut analysis time: 0.0016481876373291016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01031 (15), -0.01014 (15), -0.00987 (15), -0.00970 (15), -0.00914 (15), -0.00897 (15), -0.00883 (15), -0.00871 (15), -0.00865 (15), -0.00853 (15), -0.00839 (15), -0.00821 (15), -0.00766 (15), -0.00748 (15), -0.00722 (15), -0.00705 (15), -0.00576 (15), -0.00569 (15), -0.00559 (15), -0.00558 (15), 
Length of domains: 56
Time: pickout 0.0009    decision 0.0232    set_bounds 0.0330    solve 0.1382    add 0.0012    
Accumulated time: pickout 0.0117    decision 0.7186    set_bounds 0.0925    solve 2.4737    add 0.3137    
Current (lb-rhs): -0.010311543941497803
158 domains visited
Cumulative time: 5.117168426513672

BaB round 3
batch: 56
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 392] [/input, 377] [/input, 392] [/input, 392] [/input, 377] [/input, 392] [/input, 377] [/input, 392] [/input, 377] [/input, 392] 
split level 1: [/input-8, 818] [/input-8, 1389] [/input-8, 818] [/input-8, 818] [/input-8, 1389] [/input-8, 818] [/input-8, 1389] [/input-8, 818] [/input-8, 1389] [/input-8, 818] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01049196720123291
10 lb beta sum: 0.18497593700885773, worst -0.007421314716339111
Time: prepare 0.0061    bound 1.4197    transfer 0.0005    finalize 0.0014    func 1.4292    
Accumulated time: func 4.5127    prepare 0.0635    bound 4.4265    transfer 0.0080    finalize 0.0128    
all_split False
======================Cut inference begins======================
max lb tensor(0.00950217) min lb tensor(-0.00735307)
Number of Verified Splits: 187 of 224
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 0.029616594314575195 
BICCOS Cumulative time: 0.8637423515319824
Preprocessing time: 0.00729060173034668 Inference time: 0.019585609436035156 Add cuts time: 0.001911163330078125 Cut analysis time: 0.0008292198181152344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00735 (17), -0.00718 (17), -0.00696 (17), -0.00679 (17), -0.00619 (17), -0.00601 (17), -0.00598 (17), -0.00580 (17), -0.00580 (17), -0.00562 (17), -0.00559 (17), -0.00541 (17), -0.00481 (17), -0.00463 (17), -0.00442 (17), -0.00424 (17), -0.00278 (17), -0.00260 (17), -0.00239 (17), -0.00221 (17), 
Length of domains: 37
Time: pickout 0.0018    decision 0.0185    set_bounds 0.0202    solve 1.4293    add 0.0011    
Accumulated time: pickout 0.0134    decision 0.7371    set_bounds 0.1127    solve 3.9030    add 0.3148    
Current (lb-rhs): -0.007353067398071289
195 domains visited
Cumulative time: 6.619498014450073

BaB round 4
batch: 37
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] 
split level 1: [/input-8, 292] [/input-8, 610] [/input-8, 292] [/input-8, 610] [/input-8, 292] [/input-8, 610] [/input-8, 292] [/input-8, 610] [/input-8, 610] [/input-8, 292] 
split level 2: [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 292] [/input-8, 292] [/input-8, 610] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0018312931060791016

all verified at 1th iter
Time: prepare 0.0074    bound 0.0225    transfer 0.0009    finalize 0.0016    func 0.0344    
Accumulated time: func 4.5471    prepare 0.0711    bound 4.4489    transfer 0.0088    finalize 0.0145    
all_split False
======================Cut inference begins======================
max lb tensor(0.05365843) min lb tensor(4.39882278e-05)
Number of Verified Splits: 296 of 296
No cut inferred: All or none verified.
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 0.009072303771972656 
BICCOS Cumulative time: 0.8728146553039551
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0016    decision 0.0166    set_bounds 0.0169    solve 0.0345    add 0.0003    
Accumulated time: pickout 0.0150    decision 0.7538    set_bounds 0.1297    solve 3.9375    add 0.3152    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
195 domains visited
Cumulative time: 6.700068235397339


Properties batch 4, size 1
Remaining timeout: 188.71105670928955
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 188.71096420288086
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 188.71093559265137
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 188.71089792251587
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 188.71087431907654
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 11.2892 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 12, vnnlib ID: 12 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.60971117, -6.54356766, -3.77449369, -4.58758783, -5.85971212,
         -3.70617151, -9.49713802, -3.95379829, -6.54922104, -5.37819719]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [436]; unstable size 436; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 114, 1, 436] with unstable size 113 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 436] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 436] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [113]; unstable size 113; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 113] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 113] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 6.80846810e-01,  1.01449513e+00, -8.60394835e-01,  3.58924270e-03,
          1.15603209e+00, -9.08453465e-01,  4.73845673e+00,  1.30274725e+00,
          2.83696413e-01]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.60971117, -6.54356766, -3.77449369, -4.58758783, -5.85971212,
         -3.70617151, -9.49713802, -3.95379829, -6.54922104, -5.37819719]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.60971117, -6.54356766, -3.77449417, -4.58758783, -5.85971165,
          -3.70617199, -9.49713802, -3.95379782, -6.54922009, -5.37819719],
         [-5.60971117, -6.54356766, -3.77449417, -4.58758783, -5.85971165,
          -3.70617199, -9.49713802, -3.95379782, -6.54922009, -5.37819719]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.17930365, -0.24762583]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.56666672,  0.66190481,  0.64603180,  ...,  0.24920642,
             0.26507944,  0.21746039],
           [ 0.43968260,  0.53492069,  0.51904768,  ...,  0.29682547,
             0.29682547,  0.24920642],
           [ 0.34444451,  0.39206356,  0.39206356,  ...,  0.32857150,
             0.34444451,  0.29682547],
           ...,
           [-1.83015871, -1.73492062, -1.73492062,  ..., -0.51269841,
            -0.52857143, -0.60793650],
           [-1.87777781, -1.81428576, -1.81428576,  ..., -0.52857143,
            -0.51269841, -0.52857143],
           [-1.90952384, -1.89365077, -1.87777781,  ..., -0.56031746,
            -0.59206349, -0.54444444]],

          [[ 1.15942061,  1.20772982,  1.19162667,  ...,  0.95008057,
             0.96618366,  0.91787446],
           [ 1.09500813,  1.12721443,  1.09500813,  ...,  0.98228669,
             0.99838978,  0.93397754],
           [ 0.99838978,  1.03059590,  1.01449287,  ...,  0.98228669,
             0.99838978,  0.95008057],
           ...,
           [-1.72302747, -1.57809973, -1.61030602,  ..., -0.06441211,
            -0.01610294, -0.09661824],
           [-1.80354273, -1.72302747, -1.73913050,  ..., -0.03220600,
            -0.01610294, -0.04830906],
           [-1.83574879, -1.81964576, -1.80354273,  ..., -0.06441211,
            -0.08051517, -0.04830906]],

          [[ 1.62069011,  1.62069011,  1.60569763,  ...,  1.50075006,
             1.51574254,  1.47076499],
           [ 1.59070504,  1.59070504,  1.56072009,  ...,  1.53073502,
             1.54572761,  1.48575759],
           [ 1.51574254,  1.51574254,  1.50075006,  ...,  1.50075006,
             1.51574254,  1.47076499],
           ...,
           [-1.49775124, -1.37781119, -1.39280367,  ..., -0.55322337,
            -0.61319339, -0.70314842],
           [-1.55772126, -1.49775124, -1.49775124,  ..., -0.56821585,
            -0.61319339, -0.58320838],
           [-1.58770621, -1.57271373, -1.55772126,  ..., -0.65817088,
            -0.71814090, -0.61319339]]],


         [[[ 0.56666672,  0.66190481,  0.64603180,  ...,  0.24920642,
             0.26507944,  0.21746039],
           [ 0.43968260,  0.53492069,  0.51904768,  ...,  0.29682547,
             0.29682547,  0.24920642],
           [ 0.34444451,  0.39206356,  0.39206356,  ...,  0.32857150,
             0.34444451,  0.29682547],
           ...,
           [-1.83015871, -1.73492062, -1.73492062,  ..., -0.51269841,
            -0.52857143, -0.60793650],
           [-1.87777781, -1.81428576, -1.81428576,  ..., -0.52857143,
            -0.51269841, -0.52857143],
           [-1.90952384, -1.89365077, -1.87777781,  ..., -0.56031746,
            -0.59206349, -0.54444444]],

          [[ 1.15942061,  1.20772982,  1.19162667,  ...,  0.95008057,
             0.96618366,  0.91787446],
           [ 1.09500813,  1.12721443,  1.09500813,  ...,  0.98228669,
             0.99838978,  0.93397754],
           [ 0.99838978,  1.03059590,  1.01449287,  ...,  0.98228669,
             0.99838978,  0.95008057],
           ...,
           [-1.72302747, -1.57809973, -1.61030602,  ..., -0.06441211,
            -0.01610294, -0.09661824],
           [-1.80354273, -1.72302747, -1.73913050,  ..., -0.03220600,
            -0.01610294, -0.04830906],
           [-1.83574879, -1.81964576, -1.80354273,  ..., -0.06441211,
            -0.08051517, -0.04830906]],

          [[ 1.62069011,  1.62069011,  1.60569763,  ...,  1.50075006,
             1.51574254,  1.47076499],
           [ 1.59070504,  1.59070504,  1.56072009,  ...,  1.53073502,
             1.54572761,  1.48575759],
           [ 1.51574254,  1.51574254,  1.50075006,  ...,  1.50075006,
             1.51574254,  1.47076499],
           ...,
           [-1.49775124, -1.37781119, -1.39280367,  ..., -0.55322337,
            -0.61319339, -0.70314842],
           [-1.55772126, -1.49775124, -1.49775124,  ..., -0.56821585,
            -0.61319339, -0.58320838],
           [-1.58770621, -1.57271373, -1.55772126,  ..., -0.65817088,
            -0.71814090, -0.61319339]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0792 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 13, vnnlib ID: 13 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.31652355, -10.39834499, -14.53281593, -16.07817841, -15.67444897,
         -18.01647186, -16.02903366, -17.28762436, -10.97990608, -12.63942242]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [677]; unstable size 677; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 677] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 677] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 677] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 164] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.35580873,  2.29579544,  4.09076500,  3.52531242,  5.89760590,
          4.21795750,  5.18644333, -0.70376444,  1.22269106]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.31652355, -10.39834499, -14.53281593, -16.07817841, -15.67444897,
         -18.01647186, -16.02903366, -17.28762436, -10.97990608, -12.63942242]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.31652260, -10.39834595, -14.53281403, -16.07817841, -15.67444897,
          -18.01647186, -16.02903175, -17.28762627, -10.97990513, -12.63942051],
         [-10.31652260, -10.39834595, -14.53281403, -16.07817841, -15.67444897,
          -18.01647186, -16.02903175, -17.28762627, -10.97990513, -12.63942051]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.08182335,  0.58155918]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[0.45555562, 0.40793657, 0.42380959,  ..., 0.75714290,
            0.74126989, 0.70952386],
           [0.47142863, 0.42380959, 0.43968260,  ..., 0.72539687,
            0.69365084, 0.66190481],
           [0.53492069, 0.50317466, 0.55079371,  ..., 0.70952386,
            0.69365084, 0.66190481],
           ...,
           [0.63015878, 0.64603180, 0.66190481,  ..., 0.64603180,
            0.67777783, 0.66190481],
           [0.64603180, 0.61428577, 0.59841275,  ..., 0.63015878,
            0.64603180, 0.66190481],
           [0.72539687, 0.66190481, 0.63015878,  ..., 0.63015878,
            0.59841275, 0.64603180]],

          [[0.48309189, 0.43478271, 0.45088577,  ..., 0.75684386,
            0.72463775, 0.69243163],
           [0.49919492, 0.45088577, 0.46698883,  ..., 0.70853472,
            0.67632860, 0.64412248],
           [0.56360716, 0.53140104, 0.57971025,  ..., 0.69243163,
            0.67632860, 0.64412248],
           ...,
           [0.61191636, 0.62801939, 0.64412248,  ..., 0.62801939,
            0.66022551, 0.64412248],
           [0.62801939, 0.59581327, 0.57971025,  ..., 0.61191636,
            0.62801939, 0.64412248],
           [0.70853472, 0.64412248, 0.61191636,  ..., 0.61191636,
            0.57971025, 0.62801939]],

          [[0.66116959, 0.61619210, 0.63118458,  ..., 0.76611710,
            0.81109464, 0.79610211],
           [0.67616212, 0.63118458, 0.64617711,  ..., 0.76611710,
            0.78110963, 0.75112462],
           [0.73613209, 0.70614707, 0.75112462,  ..., 0.79610211,
            0.78110963, 0.75112462],
           ...,
           [0.66116959, 0.67616212, 0.72113961,  ..., 0.73613209,
            0.76611710, 0.75112462],
           [0.67616212, 0.64617711, 0.66116959,  ..., 0.72113961,
            0.73613209, 0.75112462],
           [0.75112462, 0.69115460, 0.69115460,  ..., 0.72113961,
            0.69115460, 0.73613209]]],


         [[[0.45555562, 0.40793657, 0.42380959,  ..., 0.75714290,
            0.74126989, 0.70952386],
           [0.47142863, 0.42380959, 0.43968260,  ..., 0.72539687,
            0.69365084, 0.66190481],
           [0.53492069, 0.50317466, 0.55079371,  ..., 0.70952386,
            0.69365084, 0.66190481],
           ...,
           [0.63015878, 0.64603180, 0.66190481,  ..., 0.64603180,
            0.67777783, 0.66190481],
           [0.64603180, 0.61428577, 0.59841275,  ..., 0.63015878,
            0.64603180, 0.66190481],
           [0.72539687, 0.66190481, 0.63015878,  ..., 0.63015878,
            0.59841275, 0.64603180]],

          [[0.48309189, 0.43478271, 0.45088577,  ..., 0.75684386,
            0.72463775, 0.69243163],
           [0.49919492, 0.45088577, 0.46698883,  ..., 0.70853472,
            0.67632860, 0.64412248],
           [0.56360716, 0.53140104, 0.57971025,  ..., 0.69243163,
            0.67632860, 0.64412248],
           ...,
           [0.61191636, 0.62801939, 0.64412248,  ..., 0.62801939,
            0.66022551, 0.64412248],
           [0.62801939, 0.59581327, 0.57971025,  ..., 0.61191636,
            0.62801939, 0.64412248],
           [0.70853472, 0.64412248, 0.61191636,  ..., 0.61191636,
            0.57971025, 0.62801939]],

          [[0.66116959, 0.61619210, 0.63118458,  ..., 0.76611710,
            0.81109464, 0.79610211],
           [0.67616212, 0.63118458, 0.64617711,  ..., 0.76611710,
            0.78110963, 0.75112462],
           [0.73613209, 0.70614707, 0.75112462,  ..., 0.79610211,
            0.78110963, 0.75112462],
           ...,
           [0.66116959, 0.67616212, 0.72113961,  ..., 0.73613209,
            0.76611710, 0.75112462],
           [0.67616212, 0.64617711, 0.66116959,  ..., 0.72113961,
            0.73613209, 0.75112462],
           [0.75112462, 0.69115460, 0.69115460,  ..., 0.72113961,
            0.69115460, 0.73613209]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0788 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 14, vnnlib ID: 14 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.58788013, -3.57877111, -7.49758530, -6.42473507, -6.46546555,
         -7.68810511, -6.21870279, -6.45115232, -5.74132729, -1.41073096]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [534]; unstable size 534; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 534] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 534] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 534] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 185] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.82803464, 1.00371802, 4.58163691, 3.52479601, 3.45554590, 4.66323090,
         3.15355444, 3.39953899, 2.80839324]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0675 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 15, vnnlib ID: 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.55321646, -5.81442928, -1.99641812,  0.06207272, -0.82771432,
          0.04142630, -2.41349435, -1.42710316, -5.66043377, -4.60286999]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [492]; unstable size 492; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 188, 1, 492] with unstable size 187 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 492] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 492] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [187]; unstable size 187; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 187] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 187] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.35873747,  4.47410488,  0.94619060,  0.06511056, -0.33263910,
          1.83395362,  0.21094567,  4.77025223,  3.27124619]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.55321646, -5.81442928, -1.99641812,  0.06207272, -0.82771432,
          0.04142630, -2.41349435, -1.42710316, -5.66043377, -4.60286999]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.96010399, -6.20732403, -2.32285213, -0.28913876, -1.16081107,
          -0.13703477, -2.92448115, -1.63956416, -6.15403843, -4.97522259]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.15210399]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0066 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0781 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 16, vnnlib ID: 16 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.37839031, -13.42577553,  -6.48252678,  -7.11965179,  -6.67908382,
          -7.55561876,  -7.39423037,  -8.94825554, -12.10931110, -13.00597000]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [788]; unstable size 788; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 362, 1, 788] with unstable size 361 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 788] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 788] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [361]; unstable size 361; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 361] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 361] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.24375105,  3.81155157, -1.93120444, -1.85189080, -0.03242300,
         -1.13493085,  0.07367361,  2.53733778,  3.71830487]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.37839031, -13.42577553,  -6.48252678,  -7.11965179,  -6.67908382,
          -7.55561876,  -7.39423037,  -8.94825554, -12.10931110, -13.00597000]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.37839031, -13.42577457,  -6.48252583,  -7.11965132,  -6.67908287,
           -7.55561876,  -7.39422894,  -8.94825554, -12.10931206, -13.00597095],
         [-10.37839031, -13.42577457,  -6.48252583,  -7.11965132,  -6.67908287,
           -7.55561876,  -7.39422894,  -8.94825554, -12.10931206, -13.00597095]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.63712549, -0.44056845,  0.43596745,  0.27457762]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0684 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 17, vnnlib ID: 17 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.48207045,  -2.39753056,  -9.58371258, -10.52106094,  -9.25177765,
         -11.82708836, -10.46574306, -11.05204582,  -6.78091049,  -5.65733051]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [502]; unstable size 502; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 254, 1, 502] with unstable size 253 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 502] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 502] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [253]; unstable size 253; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 253] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 253] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.89075327, 4.35961056, 5.77320862, 4.46269035, 6.95126247, 5.95177650,
         6.24257994, 2.54485893, 2.28885174]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0797 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 18, vnnlib ID: 18 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.97675323, -17.08073425,  -8.92278004, -11.53713417,  -9.34353065,
         -11.19538307,  -8.12182331, -11.58376312, -17.60232544, -15.83768177]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [512]; unstable size 512; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 512] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 512] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 512] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 259] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.63812447,  6.80160284, -0.75694084,  2.17035437, -0.29967833,
          1.59824872,  1.65513229,  7.41604900,  5.91091537]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.97675323, -17.08073425,  -8.92278004, -11.53713417,  -9.34353065,
         -11.19538307,  -8.12182331, -11.58376312, -17.60232544, -15.83768177]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.56005764, -18.10161591,  -9.57238865, -12.55412483, -10.26584530,
          -12.21403694,  -9.57373428, -12.60732460, -18.38806343, -16.88108253],
         [-14.56005764, -18.10161591,  -9.57238865, -12.55412483, -10.26584530,
          -12.21403694,  -9.57373428, -12.60732460, -18.38806343, -16.88108253]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00134563,  0.69211102]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0069 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0779 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 19, vnnlib ID: 19 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.67748737, -15.99068165,  -8.99268341,  -7.79347992,  -8.35536575,
          -8.22471714,  -9.16943359, -11.52655983, -13.26644325, -15.81279469]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [547]; unstable size 547; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 547] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 547] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 547] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 259] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.43207645,  6.44367361,  0.19957757, -0.46666527,  0.09526157,
          0.46659327,  2.60346079,  3.93457699,  6.28853273]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.67748737, -15.99068165,  -8.99268341,  -7.79347992,  -8.35536575,
          -8.22471714,  -9.16943359, -11.52655983, -13.26644325, -15.81279469]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.68204021, -16.05737877,  -8.96092319,  -8.17651176,  -8.15779305,
           -8.62596226,  -9.30371189, -11.61334324, -13.34238148, -16.04029083]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01871872]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0062 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0771 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 20, vnnlib ID: 20 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.99751091, -10.60476208,  -5.80764198,  -6.15668106,  -6.26862431,
          -6.07673597,  -4.08238983,  -8.79667854,  -9.22789669, -10.72688580]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [601]; unstable size 601; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 287, 1, 601] with unstable size 286 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 601] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 601] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [286]; unstable size 286; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 286] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 286] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.22418594, 4.25854826, 0.62012935, 0.93473482, 0.88097095, 0.60569537,
         2.78608942, 3.20536184, 4.78958416]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0697 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 21, vnnlib ID: 21 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.39633656, -10.81733418,  -8.14680481,  -7.67903614,  -8.47020626,
          -6.77577496, -10.40852451,  -8.02430439, -10.83304310,  -9.56988335]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [512]; unstable size 512; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 512] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 512] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 512] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 171] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.18678713, 2.55919075, 0.31564903, 0.61779261, 0.64823651, 2.52021694,
         0.37382305, 2.55972433, 1.61684608]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0787 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 22, vnnlib ID: 22 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.61524105, -12.71203899, -11.56439686, -11.98183823, -11.60697556,
         -12.97468090, -12.19276619, -14.18572140,  -5.67168808, -12.38231468]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [599]; unstable size 599; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 173, 1, 599] with unstable size 172 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 599] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 599] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [172]; unstable size 172; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 172] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 172] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.42892742, 5.35214663, 4.30807972, 4.89422417, 4.33142805, 5.69092703,
         5.16717911, 6.89458704, 4.88999987]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0682 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 23, vnnlib ID: 23 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.84393740, -7.84841537, -4.07208776, -2.13655066, -4.59707069,
         -1.22025633, -5.05424547, -3.93261433, -4.29843807, -6.48314619]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [499]; unstable size 499; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 499] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 499] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 499] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 184] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.94525361, 4.37971783, 1.50863910, 0.51084441, 2.10668612, 2.74752998,
         1.74771571, 1.16706765, 3.61705375]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0722 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 24, vnnlib ID: 24 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.95971680,  -7.97020435, -11.66736698, -13.97354507, -12.17215443,
         -15.07821083, -12.78244114, -14.01900578, -10.50253868, -10.70786572]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [778]; unstable size 778; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 305, 1, 778] with unstable size 304 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 778] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 778] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [304]; unstable size 304; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 304] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 304] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.83722591,  1.20715809,  3.54842567,  1.72621822,  4.45857143,
          2.37408066,  3.37173033,  0.75684643,  1.53906178]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.95971680,  -7.97020435, -11.66736698, -13.97354507, -12.17215443,
         -15.07821083, -12.78244114, -14.01900578, -10.50253868, -10.70786572]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.45it/s]100%|██████████| 1/1 [00:00<00:00,  8.44it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.18222904,  -8.04493713, -10.81180954, -13.20889759, -11.28295040,
          -14.31022644, -12.04443455, -13.26400185,  -9.93011951, -10.47806263]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.13729191]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1213 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.56053924560547
alpha/beta optimization time: 1.3202605247497559
initial alpha-crown bounds: tensor([[-0.67048359,  1.36126137,  3.71649933,  1.91702366,  4.64379454,
          2.51711655,  3.56975985,  0.87808657,  1.62748027]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.6704835891723633
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.47705817222595
Verifying property 0 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.67048359]], device='cuda:0') need to verify.
Model prediction is: tensor([ -8.95971680,  -7.97020435, -11.66736698, -13.97354507, -12.17215443,
        -15.07821083, -12.78244114, -14.01900578, -10.50253868, -10.70786572],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.67048359]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 778
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 300
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 1101
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001220703125
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6704788208007812
10 lb beta sum: 0.0, worst -0.6704912185668945
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0568    transfer 0.0001    finalize 0.0002    func 0.0573    
Accumulated time: func 0.0573    prepare 0.0002    bound 0.0568    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 51] 
split level 2: [/input-12, 60] 
split level 3: [/input-12, 13] 
split level 4: [/input-12, 1] 
split level 5: [/input-12, 4] 
split level 6: [/input-12, 36] 
split level 7: [/input-12, 92] 
split level 8: [/input-12, 45] 
split level 9: [/input-12, 33] 
split level 10: [/input-12, 93] 
split level 11: [/input-12, 37] 
split level 12: [/input-8, 1511] 
split level 13: [/input-8, 683] 
split level 14: [/input-8, 670] 
split level 15: [/input-8, 1880] 
split level 16: [/input-12, 90] 
split level 17: [/input-8, 1045] 
split level 18: [/input-8, 1503] 
split level 19: [/input-8, 1446] 
split level 20: [/input-8, 1875] 
split level 21: [/input-8, 677] 
split level 22: [/input-8, 603] 
split level 23: [/input-8, 1883] 
split level 24: [/input-8, 1964] 
split level 25: [/input-8, 1509] 
split level 26: [/input-8, 986] 
split level 27: [/input-8, 158] 
split level 28: [/input-8, 1018] 
split level 29: [/input-12, 80] 
split level 30: [/input-8, 1626] 
split level 31: [/input-8, 987] 
split level 32: [/input-8, 811] 
split level 33: [/input-8, 988] 
split level 34: [/input-8, 1750] 
split level 35: [/input-8, 989] 
split level 36: [/input-8, 1315] 
split level 37: [/input-8, 1069] 
split level 38: [/input-8, 1425] 
split level 39: [/input-8, 1738] 
split level 40: [/input-8, 1055] 
split level 41: [/input-8, 981] 
split level 42: [/input, 363] 
split level 43: [/input-8, 1020] 
split level 44: [/input-8, 1737] 
split level 45: [/input-8, 1017] 
split level 46: [/input-8, 1447] 
split level 47: [/input, 3468] 
split level 48: [/input-8, 1019] 
split level 49: [/input, 396] 
split level 50: [/input-8, 102] 
split level 51: [/input-8, 1375] 
split level 52: [/input-8, 82] 
split level 53: [/input-8, 1251] 
split level 54: [/input, 2518] 
split level 55: [/input, 1767] 
split level 56: [/input-8, 633] 
split level 57: [/input, 1733] 
split level 58: [/input, 2531] 
split level 59: [/input, 2440] 
split level 60: [/input-8, 1745] 
split level 61: [/input, 332] 
split level 62: [/input-8, 1494] 
split level 63: [/input, 3271] 
split level 64: [/input-8, 944] 
split level 65: [/input, 1418] 
split level 66: [/input, 3483] 
split level 67: [/input, 3306] 
split level 68: [/input-8, 1985] 
split level 69: [/input-8, 1052] 
split level 70: [/input-8, 1062] 
split level 71: [/input, 1766] 
split level 72: [/input, 2504] 
split level 73: [/input-8, 1421] 
split level 74: [/input, 1420] 
split level 75: [/input-8, 81] 
split level 76: [/input, 3304] 
split level 77: [/input, 1750] 
split level 78: [/input-8, 1132] 
split level 79: [/input, 2519] 
split level 80: [/input, 395] 
split level 81: [/input, 390] 
split level 82: [/input-8, 952] 
split level 83: [/input, 854] 
split level 84: [/input-8, 1279] 
split level 85: [/input, 2538] 
split level 86: [/input-8, 1454] 
split level 87: [/input, 3256] 
split level 88: [/input, 2517] 
split level 89: [/input-8, 1419] 
split level 90: [/input-8, 937] 
split level 91: [/input, 1749] 
split level 92: [/input, 1436] 
split level 93: [/input, 3704] 
split level 94: [/input-8, 969] 
split level 95: [/input-8, 1021] 
split level 96: [/input, 2185] 
split level 97: [/input-8, 1331] 
split level 98: [/input, 2530] 
split level 99: [/input-8, 1867] 
split level 100: [/input-8, 1322] 
split level 101: [/input, 1809] 
split level 102: [/input, 3302] 
split level 103: [/input, 3688] 
split level 104: [/input, 2539] 
split level 105: [/input-8, 950] 
split level 106: [/input, 2182] 
split level 107: [/input-8, 1986] 
split level 108: [/input, 1754] 
split level 109: [/input, 3669] 
split level 110: [/input, 2198] 
split level 111: [/input, 1753] 
split level 112: [/input, 3222] 
split level 113: [/input, 162] 
split level 114: [/input-8, 454] 
split level 115: [/input-8, 1477] 
split level 116: [/input, 3305] 
split level 117: [/input, 3577] 
split level 118: [/input-8, 1739] 
split level 119: [/input, 1768] 
split level 120: [/input, 4003] 
split level 121: [/input, 3026] 
split level 122: [/input, 3283] 
split level 123: [/input, 2454] 
split level 124: [/input-8, 1987] 
split level 125: [/input, 1405] 
split level 126: [/input, 2536] 
split level 127: [/input-8, 1984] 
split level 128: [/input, 1778] 
split level 129: [/input-8, 1131] 
split level 130: [/input, 2400] 
split level 131: [/input, 3308] 
split level 132: [/input-8, 1559] 
split level 133: [/input, 1779] 
split level 134: [/input, 1670] 
split level 135: [/input, 2515] 
split level 136: [/input, 3226] 
split level 137: [/input-8, 455] 
split level 138: [/input, 2166] 
split level 139: [/input, 3281] 
split level 140: [/input, 3765] 
split level 141: [/input, 3284] 
split level 142: [/input-8, 1988] 
split level 143: [/input, 3275] 
split level 144: [/input, 1780] 
split level 145: [/input, 1746] 
split level 146: [/input, 1827] 
split level 147: [/input-8, 945] 
split level 148: [/input, 1769] 
split level 149: [/input, 1841] 
split level 150: [/input, 1771] 
split level 151: [/input, 1842] 
split level 152: [/input, 1745] 
split level 153: [/input, 3689] 
split level 154: [/input, 1748] 
split level 155: [/input, 1747] 
split level 156: [/input, 3784] 
split level 157: [/input-8, 1935] 
split level 158: [/input, 3708] 
split level 159: [/input-8, 1361] 
split level 160: [/input, 3707] 
split level 161: [/input, 3723] 
split level 162: [/input, 3274] 
split level 163: [/input, 1858] 
split level 164: [/input, 654] 
split level 165: [/input, 376] 
split level 166: [/input, 1770] 
split level 167: [/input-8, 970] 
split level 168: [/input, 242] 
split level 169: [/input, 3042] 
split level 170: [/input, 3257] 
split level 171: [/input, 3685] 
split level 172: [/input, 2206] 
split level 173: [/input-8, 1934] 
split level 174: [/input, 3796] 
split level 175: [/input-8, 905] 
split level 176: [/input, 1099] 
split level 177: [/input, 3028] 
split level 178: [/input-8, 1241] 
split level 179: [/input, 3455] 
split level 180: [/input, 1810] 
split level 181: [/input, 3280] 
split level 182: [/input, 1857] 
split level 183: [/input, 2673] 
split level 184: [/input, 2124] 
split level 185: [/input, 1811] 
split level 186: [/input, 3794] 
split level 187: [/input-8, 1271] 
split level 188: [/input-8, 1332] 
split level 189: [/input, 4032] 
split level 190: [/input, 282] 
split level 191: [/input, 2550] 
split level 192: [/input, 3795] 
split level 193: [/input, 1083] 
split level 194: [/input, 1781] 
split level 195: [/input, 2497] 
split level 196: [/input, 1773] 
split level 197: [/input, 3190] 
split level 198: [/input, 399] 
split level 199: [/input, 3044] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6703729629516602
10 lb beta sum: 0.0, worst -0.6703119277954102
Time: prepare 0.0119    bound 0.1043    transfer 0.0047    finalize 0.0041    func 0.1277    
Accumulated time: func 0.1850    prepare 0.0228    bound 0.1611    transfer 0.0048    finalize 0.0043    
all_split False
======================Cut inference begins======================
max lb tensor(0.11171341) min lb tensor(-0.67030144)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.011000633239746094 
BICCOS Cumulative time: 0.011000633239746094
Preprocessing time: 0.010361194610595703 Inference time: 0.00016355514526367188 Add cuts time: 0.0001552104949951172 Cut analysis time: 0.00032067298889160156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.65138 (1), -0.65053 (1), -0.65006 (1), -0.64936 (1), -0.64912 (1), -0.64888 (1), -0.64859 (1), -0.64808 (1), -0.64770 (1), -0.64756 (1), -0.64748 (1), -0.64668 (1), -0.64646 (1), -0.64573 (1), -0.64559 (1), -0.64383 (1), -0.64296 (1), -0.64216 (1), -0.64027 (1), -0.63982 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5478    set_bounds 0.0099    solve 0.1278    add 0.2045    
Accumulated time: pickout 0.0004    decision 0.5478    set_bounds 0.0099    solve 0.1278    add 0.2045    
Current (lb-rhs): -0.6513786315917969
50 domains visited
Cumulative time: 0.9744718074798584

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 60] [/input-12, 10] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 1] [/input-12, 60] 
split level 2: [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 92] [/input-12, 36] [/input-12, 36] [/input-12, 1] 
split level 3: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6119985580444336
10 lb beta sum: 0.45639899373054504, worst -0.6018962860107422
Time: prepare 0.0070    bound 0.1189    transfer 0.0008    finalize 0.0021    func 0.1314    
Accumulated time: func 0.3164    prepare 0.0301    bound 0.2800    transfer 0.0056    finalize 0.0064    
all_split False
======================Cut inference begins======================
max lb tensor(0.58942503) min lb tensor(-0.60187531)
Number of Verified Splits: 15 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.012712955474853516 
BICCOS Cumulative time: 0.02371358871459961
Preprocessing time: 0.011483192443847656 Inference time: 0.0006532669067382812 Add cuts time: 0.0002970695495605469 Cut analysis time: 0.00027942657470703125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.35763 (2), -0.35666 (2), -0.35612 (2), -0.35602 (2), -0.35299 (2), -0.34874 (2), -0.34847 (2), -0.34840 (2), -0.34404 (2), -0.34063 (2), -0.33977 (2), -0.33913 (2), -0.33787 (2), -0.33388 (2), -0.33298 (2), -0.33294 (2), -0.32866 (2), -0.32159 (2), -0.30974 (2), -0.30421 (2), 
Length of domains: 50
Time: pickout 0.0079    decision 0.0201    set_bounds 0.0128    solve 0.1315    add 0.2102    
Accumulated time: pickout 0.0083    decision 0.5679    set_bounds 0.0227    solve 0.2593    add 0.4148    
Current (lb-rhs): -0.3576263189315796
100 domains visited
Cumulative time: 1.376802921295166

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 60] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
split level 2: [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 1] [/input-12, 36] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 36] 
split level 3: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3670234680175781
10 lb beta sum: 0.661666989326477, worst -0.33888280391693115
Time: prepare 0.0065    bound 0.1199    transfer 0.0008    finalize 0.0025    func 0.1331    
Accumulated time: func 0.4495    prepare 0.0368    bound 0.3999    transfer 0.0064    finalize 0.0089    
all_split False
======================Cut inference begins======================
max lb tensor(0.51649964) min lb tensor(-0.33489197)
Number of Verified Splits: 146 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.02074456214904785 
BICCOS Cumulative time: 0.04445815086364746
Preprocessing time: 0.01124715805053711 Inference time: 0.006956577301025391 Add cuts time: 0.0022313594818115234 Cut analysis time: 0.0003094673156738281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19698 (3), -0.19667 (3), -0.19636 (3), -0.19632 (3), -0.19626 (3), -0.19428 (3), -0.19424 (3), -0.19409 (3), -0.19377 (3), -0.19357 (3), -0.19039 (3), -0.18988 (3), -0.18653 (3), -0.18538 (3), -0.18482 (3), -0.18469 (3), -0.18269 (3), -0.18245 (3), -0.18158 (3), -0.18075 (3), 
Length of domains: 50
Time: pickout 0.0080    decision 0.0200    set_bounds 0.0156    solve 0.1331    add 0.2238    
Accumulated time: pickout 0.0163    decision 0.5879    set_bounds 0.0383    solve 0.3924    add 0.6386    
Current (lb-rhs): -0.19697913527488708
150 domains visited
Cumulative time: 1.805187702178955

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 36] [/input-12, 1] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 92] [/input-12, 36] [/input-12, 1] [/input-12, 13] [/input-12, 13] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 3: [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22626209259033203
10 lb beta sum: 1.035119891166687, worst -0.1753796637058258
Time: prepare 0.0069    bound 0.1200    transfer 0.0016    finalize 0.0021    func 0.1332    
Accumulated time: func 0.5827    prepare 0.0439    bound 0.5199    transfer 0.0079    finalize 0.0109    
all_split False
======================Cut inference begins======================
max lb tensor(0.38972273) min lb tensor(-0.16946052)
Number of Verified Splits: 82 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 6
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.017395734786987305 
BICCOS Cumulative time: 0.061853885650634766
Preprocessing time: 0.011464118957519531 Inference time: 0.003791332244873047 Add cuts time: 0.0017194747924804688 Cut analysis time: 0.0004208087921142578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04861 (4), -0.04826 (4), -0.04777 (4), -0.04772 (4), -0.04711 (4), -0.04558 (4), -0.04216 (4), -0.04196 (4), -0.04039 (4), -0.03967 (4), -0.03785 (4), -0.03711 (4), -0.03556 (4), -0.03505 (4), -0.03454 (4), -0.03321 (4), -0.03257 (4), -0.03073 (4), -0.03049 (4), -0.03002 (4), 
Length of domains: 50
Time: pickout 0.0078    decision 0.0198    set_bounds 0.0162    solve 0.1333    add 0.3891    
Accumulated time: pickout 0.0240    decision 0.6077    set_bounds 0.0545    solve 0.5257    add 1.0277    
Current (lb-rhs): -0.048606276512145996
200 domains visited
Cumulative time: 2.3958122730255127

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 36] 
split level 3: [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11338424682617188
10 lb beta sum: 0.9302151203155518, worst -0.045246630907058716
Time: prepare 0.0071    bound 0.1372    transfer 0.0020    finalize 0.0021    func 0.1511    
Accumulated time: func 0.7338    prepare 0.0513    bound 0.6572    transfer 0.0099    finalize 0.0130    
all_split False
======================Cut inference begins======================
max lb tensor(0.27553487) min lb tensor(-0.03833711)
Number of Verified Splits: 322 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 6
#cuts 4-6: 16
#cuts >= 20: 0
BICCOS time: 0.036438941955566406 
BICCOS Cumulative time: 0.09829282760620117
Preprocessing time: 0.011520862579345703 Inference time: 0.01636052131652832 Add cuts time: 0.007772207260131836 Cut analysis time: 0.0007853507995605469
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0078    decision 0.0196    set_bounds 0.0165    solve 0.1512    add 0.0283    
Accumulated time: pickout 0.0318    decision 0.6273    set_bounds 0.0710    solve 0.6770    add 1.0560    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 60] 
split level 2: [/input-12, 13] 
split level 3: [/input-12, 1] 
split level 4: [/input-12, 36] 
split level 5: [/input-12, 92] 
split level 6: [/input-12, 93] 
split level 7: [/input-12, 37] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23006820678710938
10 lb beta sum: 0.2817303240299225, worst -0.1990775167942047
Time: prepare 0.0038    bound 0.1324    transfer 0.0006    finalize 0.0013    func 0.1399    
Accumulated time: func 0.8737    prepare 0.0556    bound 0.7896    transfer 0.0106    finalize 0.0143    
all_split False
======================Cut inference begins======================
max lb tensor(0.42803383) min lb tensor(-0.19840911)
Number of Verified Splits: 210 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4614133834838867
10 lb beta sum: 1.218777060508728, worst -0.4126385450363159
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 6
#cuts 4-6: 17
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.2555685043334961 
BICCOS Cumulative time: 0.35386133193969727
Preprocessing time: 0.006647348403930664 Inference time: 0.24539971351623535 Add cuts time: 0.002666473388671875 Cut analysis time: 0.0008549690246582031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19841 (8), -0.19659 (8), -0.18797 (8), -0.18787 (8), -0.18677 (8), -0.18632 (8), -0.18551 (8), -0.18412 (8), -0.16612 (8), -0.16484 (8), -0.16286 (8), -0.16225 (8), -0.15950 (8), -0.15869 (8), -0.15827 (8), -0.15720 (8), -0.15670 (8), -0.15367 (8), -0.14753 (8), -0.14722 (8), 
Length of domains: 46
Time: pickout 0.0004    decision 0.0224    set_bounds 0.0177    solve 0.1400    add 0.0614    
Accumulated time: pickout 0.0322    decision 0.6497    set_bounds 0.0887    solve 0.8170    add 1.1174    
Current (lb-rhs): -0.19840911030769348
246 domains visited
Cumulative time: 3.1690587997436523

BaB round 2
batch: 46
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] 
split level 1: [/input-8, 677] [/input-12, 4] [/input-8, 677] [/input-12, 4] [/input-12, 4] [/input-8, 1045] [/input-8, 677] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 2: [/input-8, 603] [/input-8, 1045] [/input-8, 603] [/input-8, 1045] [/input-8, 1045] [/input-8, 603] [/input-8, 603] [/input-8, 1045] [/input-8, 677] [/input-8, 1045] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19971179962158203
10 lb beta sum: 0.2565445303916931, worst -0.1857309341430664
Time: prepare 0.0075    bound 0.1442    transfer 0.0012    finalize 0.0024    func 0.1578    
Accumulated time: func 1.0315    prepare 0.0633    bound 0.9337    transfer 0.0118    finalize 0.0167    
all_split False
======================Cut inference begins======================
max lb tensor(0.35080165) min lb tensor(-0.18518734)
Number of Verified Splits: 258 of 368
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6401710510253906
10 lb beta sum: 0.7349584698677063, worst -0.5451985001564026
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 6
#cuts 4-6: 17
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.3213322162628174 
BICCOS Cumulative time: 0.6751935482025146
Preprocessing time: 0.010890007019042969 Inference time: 0.3013184070587158 Add cuts time: 0.008091211318969727 Cut analysis time: 0.0010325908660888672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18519 (11), -0.18325 (11), -0.17936 (11), -0.17724 (11), -0.17573 (11), -0.17573 (11), -0.17448 (11), -0.17425 (11), -0.17301 (11), -0.17157 (11), -0.16987 (11), -0.16974 (11), -0.16829 (11), -0.16824 (11), -0.16715 (11), -0.16515 (11), -0.15183 (11), -0.15063 (11), -0.14757 (11), -0.14712 (11), 
Length of domains: 110
Time: pickout 0.0062    decision 0.0175    set_bounds 0.0276    solve 0.1590    add 0.0760    
Accumulated time: pickout 0.0384    decision 0.6672    set_bounds 0.1164    solve 0.9759    add 1.1934    
Current (lb-rhs): -0.18518733978271484
356 domains visited
Cumulative time: 3.786515235900879

BaB round 3
batch: 110
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18954849243164062
10 lb beta sum: 0.32763323187828064, worst -0.18469619750976562
Time: prepare 0.0046    bound 0.1400    transfer 0.0006    finalize 0.0013    func 0.1487    
Accumulated time: func 1.1802    prepare 0.0682    bound 1.0737    transfer 0.0123    finalize 0.0180    
all_split False
======================Cut inference begins======================
max lb tensor(0.67946482) min lb tensor(-0.18442059)
Number of Verified Splits: 110 of 220
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 8
#cuts 4-6: 15
#cuts >= 20: 0
BICCOS time: 0.01990365982055664 
BICCOS Cumulative time: 0.6950972080230713
Preprocessing time: 0.006819248199462891 Inference time: 0.010518789291381836 Add cuts time: 0.0017902851104736328 Cut analysis time: 0.0007753372192382812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18442 (12), -0.18263 (12), -0.17856 (12), -0.17655 (12), -0.17551 (12), -0.17543 (12), -0.17418 (12), -0.17401 (12), -0.17246 (12), -0.17094 (12), -0.16948 (12), -0.16946 (12), -0.16796 (12), -0.16784 (12), -0.16638 (12), -0.16433 (12), -0.15120 (12), -0.14991 (12), -0.14566 (12), -0.14548 (12), 
Length of domains: 110
Time: pickout 0.0130    decision 0.0215    set_bounds 0.0097    solve 0.1488    add 0.0412    
Accumulated time: pickout 0.0514    decision 0.6888    set_bounds 0.1261    solve 1.1247    add 1.2346    
Current (lb-rhs): -0.18442058563232422
466 domains visited
Cumulative time: 4.041796445846558

BaB round 4
batch: 110
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18431568145751953
10 lb beta sum: 0.2283877581357956, worst -0.1796579360961914
Time: prepare 0.0047    bound 0.1358    transfer 0.0005    finalize 0.0013    func 0.1438    
Accumulated time: func 1.3240    prepare 0.0731    bound 1.2095    transfer 0.0129    finalize 0.0194    
all_split False
======================Cut inference begins======================
max lb tensor(0.52143192) min lb tensor(-0.17947483)
Number of Verified Splits: 87 of 220
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 8
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.017442703247070312 
BICCOS Cumulative time: 0.7125399112701416
Preprocessing time: 0.006730079650878906 Inference time: 0.008349180221557617 Add cuts time: 0.0019099712371826172 Cut analysis time: 0.0004534721374511719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17947 (13), -0.17800 (13), -0.17356 (13), -0.17189 (13), -0.17051 (13), -0.17007 (13), -0.16992 (13), -0.16727 (13), -0.16714 (13), -0.16486 (13), -0.16425 (13), -0.16396 (13), -0.16377 (13), -0.16104 (13), -0.16080 (13), -0.15987 (13), -0.15970 (13), -0.15869 (13), -0.15834 (13), -0.15363 (13), 
Length of domains: 133
Time: pickout 0.0026    decision 0.0167    set_bounds 0.0096    solve 0.1439    add 0.0012    
Accumulated time: pickout 0.0540    decision 0.7054    set_bounds 0.1357    solve 1.2687    add 1.2358    
Current (lb-rhs): -0.1794748306274414
599 domains visited
Cumulative time: 4.234128952026367

BaB round 5
batch: 133
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input-12, 90] [/input-8, 1880] [/input-12, 33] [/input-8, 1880] [/input-12, 33] [/input-12, 90] [/input-8, 1880] [/input-8, 1880] [/input-12, 90] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17673969268798828
10 lb beta sum: 0.21773463487625122, worst -0.1721973419189453
Time: prepare 0.0055    bound 0.1402    transfer 0.0008    finalize 0.0021    func 0.1504    
Accumulated time: func 1.4744    prepare 0.0789    bound 1.3497    transfer 0.0137    finalize 0.0214    
all_split False
======================Cut inference begins======================
max lb tensor(0.68543530) min lb tensor(-0.17205620)
Number of Verified Splits: 107 of 266
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 11
#cuts >= 20: 0
BICCOS time: 0.0206758975982666 
BICCOS Cumulative time: 0.7332158088684082
Preprocessing time: 0.007899284362792969 Inference time: 0.010559558868408203 Add cuts time: 0.0018181800842285156 Cut analysis time: 0.00039887428283691406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17206 (14), -0.17088 (14), -0.16721 (14), -0.16614 (14), -0.16610 (14), -0.16471 (14), -0.16449 (14), -0.16320 (14), -0.16313 (14), -0.16235 (14), -0.16066 (14), -0.15978 (14), -0.15956 (14), -0.15825 (14), -0.15706 (14), -0.15667 (14), -0.15620 (14), -0.15237 (14), -0.15071 (14), -0.14775 (14), 
Length of domains: 159
Time: pickout 0.0023    decision 0.0196    set_bounds 0.0118    solve 0.1505    add 0.0011    
Accumulated time: pickout 0.0562    decision 0.7250    set_bounds 0.1475    solve 1.4191    add 1.2370    
Current (lb-rhs): -0.1720561981201172
758 domains visited
Cumulative time: 4.440885305404663

BaB round 6
batch: 159
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 670] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-8, 670] [/input-12, 33] [/input-12, 33] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1710948944091797
10 lb beta sum: 0.47411805391311646, worst -0.1621522158384323
Time: prepare 0.0072    bound 0.1456    transfer 0.0017    finalize 0.0023    func 0.1590    
Accumulated time: func 1.6334    prepare 0.0864    bound 1.4953    transfer 0.0154    finalize 0.0237    
all_split False
======================Cut inference begins======================
max lb tensor(0.59388244) min lb tensor(-0.16205794)
Number of Verified Splits: 128 of 318
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 11
#cuts >= 20: 0
BICCOS time: 0.025948524475097656 
BICCOS Cumulative time: 0.7591643333435059
Preprocessing time: 0.009741544723510742 Inference time: 0.014487266540527344 Add cuts time: 0.0013148784637451172 Cut analysis time: 0.0004048347473144531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16206 (15), -0.16181 (15), -0.16096 (15), -0.15886 (15), -0.15823 (15), -0.15578 (15), -0.15536 (15), -0.15459 (15), -0.15454 (15), -0.15274 (15), -0.15215 (15), -0.15189 (15), -0.15081 (15), -0.14797 (15), -0.14654 (15), -0.14537 (15), -0.14383 (15), -0.14335 (15), -0.14238 (15), -0.14027 (15), 
Length of domains: 190
Time: pickout 0.0082    decision 0.0284    set_bounds 0.0155    solve 0.1591    add 0.0017    
Accumulated time: pickout 0.0644    decision 0.7533    set_bounds 0.1630    solve 1.5783    add 1.2386    
Current (lb-rhs): -0.16205793619155884
948 domains visited
Cumulative time: 4.68111515045166

BaB round 7
batch: 190
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-8, 670] [/input-12, 33] [/input-12, 33] [/input-8, 670] [/input-8, 1880] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5057427287101746, worst -0.16205984354019165
10 lb beta sum: 0.6565828323364258, worst -0.16202837228775024
Time: prepare 0.0168    bound 0.1495    transfer 0.0020    finalize 0.0026    func 0.1735    
Accumulated time: func 1.8070    prepare 0.1035    bound 1.6448    transfer 0.0174    finalize 0.0263    
all_split False
======================Cut inference begins======================
max lb tensor(0.43412811) min lb tensor(-0.16201311)
Number of Verified Splits: 252 of 380
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 0.04421496391296387 
BICCOS Cumulative time: 0.8033792972564697
Preprocessing time: 0.012058734893798828 Inference time: 0.029433250427246094 Add cuts time: 0.0021822452545166016 Cut analysis time: 0.0005407333374023438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16201 (16), -0.16094 (16), -0.15571 (16), -0.15504 (16), -0.15487 (16), -0.15451 (16), -0.15450 (16), -0.15446 (16), -0.15070 (16), -0.14989 (16), -0.14873 (16), -0.14857 (16), -0.14832 (16), -0.14790 (16), -0.14648 (16), -0.14373 (16), -0.14339 (16), -0.14234 (16), -0.14141 (16), -0.14019 (16), 
Length of domains: 128
Time: pickout 0.0034    decision 0.0236    set_bounds 0.0173    solve 0.1737    add 0.1063    
Accumulated time: pickout 0.0679    decision 0.7770    set_bounds 0.1804    solve 1.7520    add 1.3449    
Current (lb-rhs): -0.16201311349868774
1076 domains visited
Cumulative time: 5.059368371963501

BaB round 8
batch: 128
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 603] [/input-8, 811] [/input-8, 811] [/input-8, 987] [/input-8, 811] [/input-8, 603] [/input-8, 603] [/input-8, 811] [/input-8, 811] [/input-8, 811] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1574077606201172
10 lb beta sum: 0.9104194045066833, worst -0.15276901423931122
Time: prepare 0.0056    bound 0.1408    transfer 0.0006    finalize 0.0018    func 0.1505    
Accumulated time: func 1.9575    prepare 0.1093    bound 1.7857    transfer 0.0180    finalize 0.0281    
all_split False
======================Cut inference begins======================
max lb tensor(0.56201249) min lb tensor(-0.15275580)
Number of Verified Splits: 176 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.03177309036254883 
BICCOS Cumulative time: 0.8351523876190186
Preprocessing time: 0.008295297622680664 Inference time: 0.0212094783782959 Add cuts time: 0.0017361640930175781 Cut analysis time: 0.0005321502685546875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15276 (17), -0.14694 (17), -0.14624 (17), -0.14572 (17), -0.14172 (17), -0.14041 (17), -0.13905 (17), -0.13485 (17), -0.13413 (17), -0.12927 (17), -0.12833 (17), -0.12758 (17), -0.12688 (17), -0.12552 (17), -0.12272 (17), -0.12266 (17), -0.12181 (17), -0.12039 (17), -0.11958 (17), -0.11921 (17), 
Length of domains: 80
Time: pickout 0.0158    decision 0.0216    set_bounds 0.0124    solve 0.1506    add 0.0472    
Accumulated time: pickout 0.0836    decision 0.7986    set_bounds 0.1928    solve 1.9026    add 1.3921    
Current (lb-rhs): -0.15275579690933228
1156 domains visited
Cumulative time: 5.347316741943359

BaB round 9
batch: 80
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 158] [/input-8, 158] [/input-8, 158] [/input-8, 603] [/input-8, 603] [/input-8, 158] [/input-8, 158] [/input-8, 158] [/input-8, 158] [/input-8, 603] 
split level 1: [/input-12, 80] [/input-8, 987] [/input-12, 80] [/input-8, 987] [/input-8, 987] [/input-12, 80] [/input-8, 987] [/input-12, 80] [/input-12, 80] [/input-8, 987] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14905357360839844
10 lb beta sum: 1.1039706468582153, worst -0.14190083742141724
Time: prepare 0.0069    bound 0.1492    transfer 0.0007    finalize 0.0026    func 0.1617    
Accumulated time: func 2.1193    prepare 0.1164    bound 1.9349    transfer 0.0188    finalize 0.0307    
all_split False
======================Cut inference begins======================
max lb tensor(0.60293365) min lb tensor(-0.14189214)
Number of Verified Splits: 179 of 320
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.03704380989074707 
BICCOS Cumulative time: 0.8721961975097656
Preprocessing time: 0.01003718376159668 Inference time: 0.023870468139648438 Add cuts time: 0.0025899410247802734 Cut analysis time: 0.0005462169647216797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14189 (19), -0.13647 (19), -0.13641 (19), -0.13540 (19), -0.12981 (19), -0.12964 (19), -0.12548 (19), -0.12338 (19), -0.12029 (19), -0.12028 (19), -0.12009 (19), -0.11850 (19), -0.11790 (19), -0.11683 (19), -0.11521 (19), -0.11369 (19), -0.11325 (19), -0.11290 (19), -0.11229 (19), -0.11134 (19), 
Length of domains: 141
Time: pickout 0.0141    decision 0.0198    set_bounds 0.0215    solve 0.1618    add 0.0758    
Accumulated time: pickout 0.0977    decision 0.8184    set_bounds 0.2143    solve 2.0644    add 1.4679    
Current (lb-rhs): -0.14189213514328003
1297 domains visited
Cumulative time: 5.6858954429626465

BaB round 10
batch: 141
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 603] [/input-8, 603] [/input-8, 603] [/input-8, 811] [/input-8, 811] [/input-12, 80] [/input-8, 158] [/input-8, 603] [/input-12, 80] [/input-8, 158] 
cut re-enabled after branching node selection
0 lb beta sum: 1.189740777015686, worst -0.14189118146896362
10 lb beta sum: 1.189740777015686, worst -0.14189690351486206
Time: prepare 0.0128    bound 0.1459    transfer 0.0007    finalize 0.0018    func 0.1630    
Accumulated time: func 2.2823    prepare 0.1295    bound 2.0808    transfer 0.0194    finalize 0.0325    
all_split False
======================Cut inference begins======================
max lb tensor(0.18132067) min lb tensor(-0.14188260)
Number of Verified Splits: 101 of 282
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 21
#cuts >= 20: 0
BICCOS time: 0.02406620979309082 
BICCOS Cumulative time: 0.8962624073028564
Preprocessing time: 0.008645772933959961 Inference time: 0.01295328140258789 Add cuts time: 0.0019693374633789062 Cut analysis time: 0.0004978179931640625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14188 (20), -0.13644 (20), -0.13640 (20), -0.13536 (20), -0.12980 (20), -0.12959 (20), -0.12546 (20), -0.12337 (20), -0.12007 (20), -0.12006 (20), -0.11995 (20), -0.11846 (20), -0.11790 (20), -0.11683 (20), -0.11520 (20), -0.11328 (20), -0.11316 (20), -0.11280 (20), -0.11227 (20), -0.11129 (20), 
Length of domains: 181
Time: pickout 0.0150    decision 0.0216    set_bounds 0.0131    solve 0.1631    add 0.0627    
Accumulated time: pickout 0.1128    decision 0.8400    set_bounds 0.2273    solve 2.2275    add 1.5306    
Current (lb-rhs): -0.14188259840011597
1478 domains visited
Cumulative time: 5.987110137939453

BaB round 11
batch: 181
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 677] [/input-8, 677] [/input-8, 677] [/input-8, 677] [/input-8, 677] [/input-8, 677] [/input-8, 987] [/input-8, 677] [/input-8, 987] [/input-12, 80] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14188289642333984
10 lb beta sum: 1.047741174697876, worst -0.1357993334531784
Time: prepare 0.0078    bound 0.1547    transfer 0.0010    finalize 0.0022    func 0.1683    
Accumulated time: func 2.4506    prepare 0.1376    bound 2.2354    transfer 0.0204    finalize 0.0347    
all_split False
======================Cut inference begins======================
max lb tensor(0.51348394) min lb tensor(-0.13578638)
Number of Verified Splits: 230 of 362
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 23
#cuts >= 20: 0
BICCOS time: 0.04610776901245117 
BICCOS Cumulative time: 0.9423701763153076
Preprocessing time: 0.01114964485168457 Inference time: 0.03195524215698242 Add cuts time: 0.002450704574584961 Cut analysis time: 0.0005521774291992188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13579 (21), -0.13006 (21), -0.12924 (21), -0.12347 (21), -0.12204 (21), -0.11727 (21), -0.11576 (21), -0.11375 (21), -0.11157 (21), -0.11073 (21), -0.10911 (21), -0.10860 (21), -0.10725 (21), -0.10498 (21), -0.10386 (21), -0.10358 (21), -0.10228 (21), -0.10203 (21), -0.10164 (21), -0.10054 (21), 
Length of domains: 132
Time: pickout 0.0036    decision 0.0228    set_bounds 0.0165    solve 0.1684    add 0.0013    
Accumulated time: pickout 0.1164    decision 0.8628    set_bounds 0.2439    solve 2.3959    add 1.5320    
Current (lb-rhs): -0.13578638434410095
1610 domains visited
Cumulative time: 6.248608589172363

BaB round 12
batch: 132
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1069] [/input-8, 1069] [/input-8, 1069] [/input-8, 1069] [/input-8, 1069] [/input-8, 1069] [/input-8, 1069] [/input-8, 1069] [/input-8, 1069] [/input-8, 1069] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1389608383178711
10 lb beta sum: 1.180371880531311, worst -0.12208834290504456
Time: prepare 0.0055    bound 0.1466    transfer 0.0007    finalize 0.0020    func 0.1566    
Accumulated time: func 2.6071    prepare 0.1433    bound 2.3820    transfer 0.0211    finalize 0.0367    
all_split False
======================Cut inference begins======================
max lb tensor(0.29356730) min lb tensor(-0.12204269)
Number of Verified Splits: 40 of 264
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 23
#cuts >= 20: 0
BICCOS time: 0.01624011993408203 
BICCOS Cumulative time: 0.9586102962493896
Preprocessing time: 0.008498191833496094 Inference time: 0.005772590637207031 Add cuts time: 0.0014650821685791016 Cut analysis time: 0.0005042552947998047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12204 (22), -0.12177 (22), -0.11710 (22), -0.11551 (22), -0.11514 (22), -0.11029 (22), -0.10867 (22), -0.10533 (22), -0.10356 (22), -0.10328 (22), -0.10236 (22), -0.09935 (22), -0.09888 (22), -0.09859 (22), -0.09700 (22), -0.09669 (22), -0.09521 (22), -0.09320 (22), -0.09285 (22), -0.09217 (22), 
Length of domains: 224
Time: pickout 0.0030    decision 0.0200    set_bounds 0.0121    solve 0.1567    add 0.0770    
Accumulated time: pickout 0.1194    decision 0.8828    set_bounds 0.2559    solve 2.5526    add 1.6090    
Current (lb-rhs): -0.1220426857471466
1834 domains visited
Cumulative time: 6.54118537902832

BaB round 13
batch: 224
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1315] [/input-8, 1315] [/input-8, 1315] [/input-8, 1315] [/input-8, 1315] [/input-8, 1315] [/input-8, 1315] [/input-8, 1315] [/input-12, 80] [/input-8, 1315] 
cut re-enabled after branching node selection
0 lb beta sum: 1.3432096242904663, worst -0.12204363942146301
10 lb beta sum: 1.3432096242904663, worst -0.12201407551765442
Time: prepare 0.0196    bound 0.1497    transfer 0.0011    finalize 0.0023    func 0.1758    
Accumulated time: func 2.7829    prepare 0.1631    bound 2.5317    transfer 0.0223    finalize 0.0390    
all_split False
======================Cut inference begins======================
max lb tensor(0.21070552) min lb tensor(-0.12199405)
Number of Verified Splits: 200 of 448
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 24
#cuts >= 20: 0
BICCOS time: 0.045981645584106445 
BICCOS Cumulative time: 1.004591941833496
Preprocessing time: 0.013273477554321289 Inference time: 0.030159950256347656 Add cuts time: 0.001973867416381836 Cut analysis time: 0.0005743503570556641
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12199 (23), -0.12176 (23), -0.11694 (23), -0.11539 (23), -0.11514 (23), -0.11010 (23), -0.10863 (23), -0.10526 (23), -0.10350 (23), -0.10327 (23), -0.10231 (23), -0.09927 (23), -0.09880 (23), -0.09843 (23), -0.09691 (23), -0.09665 (23), -0.09513 (23), -0.09320 (23), -0.09275 (23), -0.09158 (23), 
Length of domains: 248
Time: pickout 0.0176    decision 0.0249    set_bounds 0.0207    solve 0.1759    add 0.1094    
Accumulated time: pickout 0.1370    decision 0.9077    set_bounds 0.2767    solve 2.7285    add 1.7184    
Current (lb-rhs): -0.12199404835700989
2082 domains visited
Cumulative time: 6.945324659347534

BaB round 14
batch: 248
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1055] [/input-8, 1055] [/input-8, 1055] [/input-8, 1055] [/input-8, 1055] [/input-8, 1055] [/input-8, 1055] [/input-8, 1055] [/input-8, 1055] [/input-8, 1055] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12506580352783203
10 lb beta sum: 1.0538054704666138, worst -0.12198448181152344
Time: prepare 0.0100    bound 0.1469    transfer 0.0010    finalize 0.0024    func 0.1644    
Accumulated time: func 2.9473    prepare 0.1734    bound 2.6785    transfer 0.0232    finalize 0.0414    
all_split False
======================Cut inference begins======================
max lb tensor(0.01686454) min lb tensor(-0.12197113)
Number of Verified Splits: 41 of 496
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 24
#cuts >= 20: 0
BICCOS time: 0.02306389808654785 
BICCOS Cumulative time: 1.027655839920044
Preprocessing time: 0.01431584358215332 Inference time: 0.0064809322357177734 Add cuts time: 0.0017647743225097656 Cut analysis time: 0.0005023479461669922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12197 (24), -0.11751 (24), -0.11679 (24), -0.11532 (24), -0.11269 (24), -0.11087 (24), -0.11023 (24), -0.10929 (24), -0.10859 (24), -0.10579 (24), -0.10447 (24), -0.10347 (24), -0.10282 (24), -0.10226 (24), -0.10151 (24), -0.10095 (24), -0.09901 (24), -0.09834 (24), -0.09780 (24), -0.09678 (24), 
Length of domains: 455
Time: pickout 0.0519    decision 0.0275    set_bounds 0.0222    solve 0.1645    add 0.0843    
Accumulated time: pickout 0.1889    decision 0.9352    set_bounds 0.2988    solve 2.8930    add 1.8026    
Current (lb-rhs): -0.12197113037109375
2537 domains visited
Cumulative time: 7.326451539993286

BaB round 15
batch: 455
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 988] [/input-8, 1019] [/input-8, 1019] [/input-8, 1019] [/input-8, 1019] [/input-8, 1019] [/input-8, 1019] [/input-8, 82] [/input-8, 82] [/input-8, 988] 
cut re-enabled after branching node selection
0 lb beta sum: 1.2205846309661865, worst -0.1190032958984375
10 lb beta sum: 1.2205846309661865, worst -0.11901473999023438
Time: prepare 0.0407    bound 0.1535    transfer 0.0043    finalize 0.0053    func 0.2099    
Accumulated time: func 3.1572    prepare 0.2142    bound 2.8321    transfer 0.0275    finalize 0.0467    
all_split False
======================Cut inference begins======================
max lb tensor(0.22153640) min lb tensor(-0.11900234)
Number of Verified Splits: 16 of 910
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 24
#cuts >= 20: 0
BICCOS time: 0.03226661682128906 
BICCOS Cumulative time: 1.059922456741333
Preprocessing time: 0.02829742431640625 Inference time: 0.002694845199584961 Add cuts time: 0.0006430149078369141 Cut analysis time: 0.0006313323974609375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11900 (25), -0.11381 (25), -0.11376 (25), -0.11229 (25), -0.11185 (25), -0.10987 (25), -0.10898 (25), -0.10715 (25), -0.10696 (25), -0.10663 (25), -0.10550 (25), -0.10546 (25), -0.10539 (25), -0.10504 (25), -0.10323 (25), -0.10209 (25), -0.10159 (25), -0.10067 (25), -0.10049 (25), -0.10010 (25), 
Length of domains: 894
Time: pickout 0.0198    decision 0.0367    set_bounds 0.3021    solve 0.2101    add 0.1214    
Accumulated time: pickout 0.2087    decision 0.9719    set_bounds 0.6009    solve 3.1032    add 1.9240    
Current (lb-rhs): -0.1190023422241211
3431 domains visited
Cumulative time: 8.056535720825195

BaB round 16
batch: 894
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 810] [/input-8, 810] [/input-8, 810] [/input-8, 810] [/input-8, 810] [/input-8, 810] [/input-8, 1019] [/input-8, 1019] [/input-8, 810] [/input-8, 810] 
cut re-enabled after branching node selection
0 lb beta sum: 1.215994119644165, worst -0.11900138854980469
10 lb beta sum: 1.215994119644165, worst -0.11901187896728516
Time: prepare 0.0798    bound 0.1692    transfer 0.0079    finalize 0.0100    func 0.2787    
Accumulated time: func 3.4359    prepare 0.2943    bound 3.0013    transfer 0.0354    finalize 0.0568    
all_split False
======================Cut inference begins======================
max lb tensor(0.22685885) min lb tensor(-0.11900139)
Number of Verified Splits: 366 of 1788
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 25
#cuts >= 20: 0
BICCOS time: 0.12056136131286621 
BICCOS Cumulative time: 1.1804838180541992
Preprocessing time: 0.05576491355895996 Inference time: 0.0604701042175293 Add cuts time: 0.0037605762481689453 Cut analysis time: 0.0005657672882080078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11900 (26), -0.11379 (26), -0.11376 (26), -0.11226 (26), -0.11183 (26), -0.10969 (26), -0.10895 (26), -0.10713 (26), -0.10696 (26), -0.10660 (26), -0.10545 (26), -0.10544 (26), -0.10537 (26), -0.10485 (26), -0.10304 (26), -0.10208 (26), -0.10132 (26), -0.10060 (26), -0.10049 (26), -0.10010 (26), 
Length of domains: 1422
Time: pickout 0.0847    decision 0.0615    set_bounds 0.0762    solve 0.2791    add 0.1065    
Accumulated time: pickout 0.2934    decision 1.0334    set_bounds 0.6771    solve 3.3823    add 2.0305    
Current (lb-rhs): -0.11900138854980469
4853 domains visited
Cumulative time: 8.797125816345215

BaB round 17
batch: 1422
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 82] [/input-8, 82] [/input-8, 82] [/input-8, 82] [/input-8, 82] [/input-8, 82] [/input-8, 981] [/input, 332] [/input-8, 82] [/input-8, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11898326873779297
10 lb beta sum: 1.080831527709961, worst -0.1189889907836914
Time: prepare 0.0680    bound 0.2233    transfer 0.0154    finalize 0.0141    func 0.3403    
Accumulated time: func 3.7762    prepare 0.3625    bound 3.2246    transfer 0.0507    finalize 0.0708    
all_split False
======================Cut inference begins======================
max lb tensor(0.28740302) min lb tensor(-0.11898136)
Number of Verified Splits: 575 of 2844
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 25
#cuts >= 20: 0
BICCOS time: 0.3594996929168701 
BICCOS Cumulative time: 1.5399835109710693
Preprocessing time: 0.0919485092163086 Inference time: 0.256270170211792 Add cuts time: 0.010607242584228516 Cut analysis time: 0.0006737709045410156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11898 (27), -0.11374 (27), -0.11223 (27), -0.11181 (27), -0.11108 (27), -0.10694 (27), -0.10689 (27), -0.10658 (27), -0.10586 (27), -0.10543 (27), -0.10535 (27), -0.10443 (27), -0.10358 (27), -0.10270 (27), -0.10168 (27), -0.10047 (27), -0.10040 (27), -0.10023 (27), -0.10008 (27), -0.09939 (27), 
Length of domains: 2269
Time: pickout 0.0383    decision 0.0947    set_bounds 0.1249    solve 0.3408    add 0.1238    
Accumulated time: pickout 0.3317    decision 1.1280    set_bounds 0.8020    solve 3.7231    add 2.1543    
Current (lb-rhs): -0.11898136138916016
7122 domains visited
Cumulative time: 9.893433332443237

BaB round 18
batch: 2269
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1494] [/input-8, 1494] [/input-8, 1494] [/input-8, 1494] [/input-8, 1494] [/input-8, 1494] [/input-8, 810] [/input-8, 810] [/input-8, 1494] [/input-8, 1494] 
cut re-enabled after branching node selection
0 lb beta sum: 1.1809914112091064, worst -0.11596012115478516
10 lb beta sum: 1.2100999355316162, worst -0.11595535278320312
Time: prepare 0.2165    bound 0.3172    transfer 0.0184    finalize 0.0261    func 0.6083    
Accumulated time: func 4.3845    prepare 0.5793    bound 3.5418    transfer 0.0691    finalize 0.0969    
all_split False
======================Cut inference begins======================
max lb tensor(0.01551604) min lb tensor(-0.11594486)
Number of Verified Splits: 403 of 4538
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 25
#cuts >= 20: 0
BICCOS time: 0.2263495922088623 
BICCOS Cumulative time: 1.7663331031799316
Preprocessing time: 0.1408381462097168 Inference time: 0.07589006423950195 Add cuts time: 0.008953094482421875 Cut analysis time: 0.0006682872772216797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11594 (28), -0.11071 (28), -0.11066 (28), -0.10920 (28), -0.10879 (28), -0.10544 (28), -0.10542 (28), -0.10489 (28), -0.10391 (28), -0.10391 (28), -0.10356 (28), -0.10352 (28), -0.10238 (28), -0.10232 (28), -0.10121 (28), -0.10067 (28), -0.10021 (28), -0.09965 (28), -0.09893 (28), -0.09862 (28), 
Length of domains: 4135
Time: pickout 0.0505    decision 0.1320    set_bounds 0.1918    solve 0.6092    add 0.1885    
Accumulated time: pickout 0.3822    decision 1.2601    set_bounds 0.9938    solve 4.3322    add 2.3428    
Current (lb-rhs): -0.11594486236572266
11257 domains visited
Cumulative time: 11.306199312210083

BaB round 19
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1883] [/input, 332] [/input-8, 1883] [/input-8, 1883] [/input, 332] [/input-8, 1494] [/input-8, 1494] [/input-8, 1883] [/input, 332] [/input-8, 1883] 
cut re-enabled after branching node selection
0 lb beta sum: 1.1867820024490356, worst -0.11355781555175781
10 lb beta sum: 1.1948237419128418, worst -0.11342334747314453
Time: prepare 0.3974    bound 0.5073    transfer 0.0398    finalize 0.2208    func 1.2193    
Accumulated time: func 5.6039    prepare 0.9770    bound 4.0490    transfer 0.1090    finalize 0.3177    
all_split False
======================Cut inference begins======================
max lb tensor(0.23852420) min lb tensor(-0.11339474)
Number of Verified Splits: 1284 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 25
#cuts >= 20: 0
BICCOS time: 0.5557723045349121 
BICCOS Cumulative time: 2.3221054077148438
Preprocessing time: 0.26541733741760254 Inference time: 0.25692248344421387 Add cuts time: 0.032717227935791016 Cut analysis time: 0.0007152557373046875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11339 (29), -0.10809 (29), -0.10781 (29), -0.10667 (29), -0.10666 (29), -0.10515 (29), -0.10430 (29), -0.10389 (29), -0.10360 (29), -0.10325 (29), -0.10250 (29), -0.10199 (29), -0.10136 (29), -0.10135 (29), -0.10103 (29), -0.10089 (29), -0.10003 (29), -0.09994 (29), -0.09992 (29), -0.09980 (29), 
Length of domains: 6947
Time: pickout 0.0834    decision 0.4101    set_bounds 0.3378    solve 1.2210    add 0.1949    
Accumulated time: pickout 0.4656    decision 1.6701    set_bounds 1.3316    solve 5.5532    add 2.5377    
Current (lb-rhs): -0.11339473724365234
18165 domains visited
current_vram/total_varm: 9.9GB/99.9GB, batch_size increase to 8192
Cumulative time: 14.139431238174438

BaB round 20
batch: 6947
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1494] [/input, 332] [/input-8, 82] [/input-8, 82] [/input, 332] [/input-8, 82] [/input-8, 1454] [/input-8, 633] [/input-8, 1454] [/input-8, 986] 
cut re-enabled after branching node selection
0 lb beta sum: 1.167550802230835, worst -0.11300086975097656
10 lb beta sum: 1.1681758165359497, worst -0.11299324035644531
Time: prepare 0.6886    bound 0.8168    transfer 0.0689    finalize 0.3252    func 1.9885    
Accumulated time: func 7.5924    prepare 1.6659    bound 4.8658    transfer 0.1779    finalize 0.6429    
all_split False
======================Cut inference begins======================
max lb tensor(0.24443126) min lb tensor(-0.11298275)
Number of Verified Splits: 3236 of 13894
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 25
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 1.3919570446014404 
BICCOS Cumulative time: 3.714062452316284
Preprocessing time: 0.44527292251586914 Inference time: 0.6521036624908447 Add cuts time: 0.2936215400695801 Cut analysis time: 0.0009589195251464844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11298 (30), -0.10766 (30), -0.10739 (30), -0.10616 (30), -0.10359 (30), -0.10307 (30), -0.10300 (30), -0.10263 (30), -0.10262 (30), -0.10259 (30), -0.10207 (30), -0.10177 (30), -0.10085 (30), -0.09834 (30), -0.09827 (30), -0.09825 (30), -0.09775 (30), -0.09768 (30), -0.09741 (30), -0.09734 (30), 
Length of domains: 10658
Time: pickout 0.2180    decision 0.5760    set_bounds 0.6114    solve 1.9911    add 0.2707    
Accumulated time: pickout 0.6836    decision 2.2462    set_bounds 1.9430    solve 7.5444    add 2.8085    
Current (lb-rhs): -0.11298274993896484
28823 domains visited
Cumulative time: 19.256099700927734

BaB round 21
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 332] [/input-8, 1494] [/input-8, 1454] [/input, 332] [/input-8, 1454] [/input-8, 1454] [/input-8, 1251] [/input-8, 1454] [/input-8, 1454] [/input-8, 1454] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10944080352783203
10 lb beta sum: 0.851202130317688, worst -0.1094045639038086
Time: prepare 0.4458    bound 1.3029    transfer 0.0775    finalize 0.1039    func 2.0389    
Accumulated time: func 9.6313    prepare 2.1122    bound 6.1687    transfer 0.2554    finalize 0.7468    
all_split False
======================Cut inference begins======================
max lb tensor(0.41047239) min lb tensor(-0.10939598)
Number of Verified Splits: 7580 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 26
#cuts >= 20: 0
BICCOS time: 2.372610330581665 
BICCOS Cumulative time: 6.086672782897949
Preprocessing time: 0.49839115142822266 Inference time: 1.7402689456939697 Add cuts time: 0.13321256637573242 Cut analysis time: 0.0007376670837402344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10940 (31), -0.10408 (31), -0.10380 (31), -0.10257 (31), -0.10022 (31), -0.10004 (31), -0.09999 (31), -0.09952 (31), -0.09946 (31), -0.09940 (31), -0.09896 (31), -0.09867 (31), -0.09847 (31), -0.09725 (31), -0.09623 (30), -0.09581 (30), -0.09543 (31), -0.09482 (31), -0.09474 (31), -0.09472 (31), 
Length of domains: 11270
Time: pickout 0.1584    decision 0.4565    set_bounds 1.0169    solve 2.0424    add 0.2018    
Accumulated time: pickout 0.8420    decision 2.7027    set_bounds 2.9599    solve 9.5868    add 3.0102    
Current (lb-rhs): -0.10939598083496094
37627 domains visited
current_vram/total_varm: 21.7GB/99.9GB, batch_size increase to 16384
Cumulative time: 25.601951837539673

BaB round 22
batch: 11270
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 981] [/input-8, 1883] [/input-8, 986] [/input-8, 633] [/input-8, 988] [/input-8, 988] [/input-8, 1883] [/input-8, 1494] [/input-8, 633] [/input-8, 986] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1065216064453125
10 lb beta sum: 0.7934275269508362, worst -0.1065053939819336
Time: prepare 0.5981    bound 1.2708    transfer 0.1104    finalize 0.4399    func 2.5698    
Accumulated time: func 12.2010    prepare 2.7107    bound 7.4395    transfer 0.3658    finalize 1.1867    
all_split False
======================Cut inference begins======================
max lb tensor(0.48345929) min lb tensor(-0.10648918)
Number of Verified Splits: 10827 of 22540
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 27
#cuts >= 20: 0
BICCOS time: 3.2574126720428467 
BICCOS Cumulative time: 9.344085454940796
Preprocessing time: 0.7000963687896729 Inference time: 2.38724684715271 Add cuts time: 0.16927433013916016 Cut analysis time: 0.0007951259613037109
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10649 (32), -0.10116 (32), -0.10092 (32), -0.10022 (32), -0.09967 (32), -0.09946 (32), -0.09831 (32), -0.09783 (32), -0.09775 (32), -0.09708 (32), -0.09644 (32), -0.09605 (32), -0.09559 (32), -0.09554 (32), -0.09482 (32), -0.09436 (32), -0.09404 (32), -0.09370 (32), -0.09325 (31), -0.09299 (32), 
Length of domains: 11713
Time: pickout 0.3364    decision 0.6349    set_bounds 1.2912    solve 2.5749    add 0.1715    
Accumulated time: pickout 1.1783    decision 3.3376    set_bounds 4.2512    solve 12.1616    add 3.1817    
Current (lb-rhs): -0.10648918151855469
49340 domains visited
Cumulative time: 34.007773637771606

BaB round 23
batch: 11713
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 986] [/input-8, 1883] [/input-8, 988] [/input-8, 988] [/input-8, 810] [/input-8, 810] [/input-8, 810] [/input-8, 810] [/input-8, 988] [/input-8, 988] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1047658920288086
10 lb beta sum: 0.8327949047088623, worst -0.10239887237548828
Time: prepare 0.6238    bound 1.3173    transfer 0.1166    finalize 0.4419    func 2.6568    
Accumulated time: func 14.8578    prepare 3.3348    bound 8.7568    transfer 0.4824    finalize 1.6287    
all_split False
======================Cut inference begins======================
max lb tensor(0.46916938) min lb tensor(-0.10238934)
Number of Verified Splits: 9450 of 23426
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 27
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 3.3624608516693115 
BICCOS Cumulative time: 12.706546306610107
Preprocessing time: 0.7787299156188965 Inference time: 2.4248335361480713 Add cuts time: 0.15787291526794434 Cut analysis time: 0.001024484634399414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10239 (33), -0.09718 (33), -0.09706 (33), -0.09697 (33), -0.09642 (33), -0.09547 (33), -0.09383 (33), -0.09299 (33), -0.09288 (33), -0.09244 (33), -0.09224 (33), -0.09203 (33), -0.09199 (33), -0.09164 (33), -0.09142 (33), -0.09129 (33), -0.09127 (33), -0.09066 (33), -0.09013 (33), -0.09009 (33), 
Length of domains: 13976
Time: pickout 0.2344    decision 0.6528    set_bounds 1.3644    solve 2.6620    add 0.2201    
Accumulated time: pickout 1.4127    decision 3.9903    set_bounds 5.6156    solve 14.8236    add 3.4018    
Current (lb-rhs): -0.10238933563232422
63316 domains visited
Cumulative time: 42.62888741493225

BaB round 24
batch: 13976
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 633] [/input-8, 1251] [/input, 395] [/input, 395] [/input-8, 633] [/input, 395] [/input, 395] [/input-8, 1019] [/input-8, 1019] [/input-8, 1494] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10176849365234375
10 lb beta sum: 0.7948043346405029, worst -0.09929752349853516
Time: prepare 0.7524    bound 2.1669    transfer 0.1424    finalize 0.1979    func 3.4458    
Accumulated time: func 18.3037    prepare 4.0877    bound 10.9237    transfer 0.6248    finalize 1.8266    
all_split False
======================Cut inference begins======================
max lb tensor(0.38384429) min lb tensor(-0.09926414)
Number of Verified Splits: 6701 of 27952
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 28
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 3.071324348449707 
BICCOS Cumulative time: 15.777870655059814
Preprocessing time: 1.3440980911254883 Inference time: 1.5770916938781738 Add cuts time: 0.14910483360290527 Cut analysis time: 0.0010297298431396484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09926 (34), -0.09446 (34), -0.09400 (34), -0.09386 (34), -0.09343 (34), -0.09267 (34), -0.09234 (34), -0.09140 (34), -0.09068 (34), -0.09065 (34), -0.08987 (34), -0.08935 (34), -0.08912 (34), -0.08905 (34), -0.08897 (34), -0.08889 (34), -0.08887 (34), -0.08857 (34), -0.08825 (34), -0.08822 (34), 
Length of domains: 21251
Time: pickout 0.4011    decision 1.0898    set_bounds 1.6556    solve 3.4544    add 0.3952    
Accumulated time: pickout 1.8138    decision 5.0802    set_bounds 7.2711    solve 18.2781    add 3.7969    
Current (lb-rhs): -0.09926414489746094
84567 domains visited
Cumulative time: 52.87712740898132

BaB round 25
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 633] [/input, 2166] [/input, 2166] [/input-8, 988] [/input-8, 1494] [/input-8, 1494] [/input-8, 1019] [/input-8, 1019] [/input-8, 1454] [/input-8, 988] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09935951232910156
10 lb beta sum: 0.7594466209411621, worst -0.09694957733154297
Time: prepare 1.0695    bound 2.5380    transfer 0.1651    finalize 0.2751    func 4.8551    
Accumulated time: func 23.1588    prepare 5.1576    bound 13.4617    transfer 0.7899    finalize 2.1017    
all_split False
======================Cut inference begins======================
max lb tensor(0.34479880) min lb tensor(-0.09694481)
Number of Verified Splits: 7953 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 30
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 3.627241849899292 
BICCOS Cumulative time: 19.405112504959106
Preprocessing time: 1.1142704486846924 Inference time: 2.3602068424224854 Add cuts time: 0.15172171592712402 Cut analysis time: 0.0010428428649902344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09694 (35), -0.09342 (35), -0.09266 (35), -0.09168 (35), -0.09147 (35), -0.09140 (34), -0.09065 (34), -0.09002 (35), -0.08928 (35), -0.08902 (35), -0.08897 (34), -0.08864 (35), -0.08822 (34), -0.08768 (35), -0.08740 (35), -0.08704 (34), -0.08690 (35), -0.08674 (35), -0.08661 (35), -0.08628 (34), 
Length of domains: 29682
Time: pickout 0.3893    decision 2.1537    set_bounds 2.1160    solve 4.8661    add 0.2488    
Accumulated time: pickout 2.2031    decision 7.2339    set_bounds 9.3871    solve 23.1441    add 4.0457    
Current (lb-rhs): -0.09694480895996094
109382 domains visited
Cumulative time: 66.51210284233093

BaB round 26
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1019] [/input-8, 82] [/input-8, 1019] [/input-8, 1251] [/input, 396] [/input-8, 1251] [/input-8, 1019] [/input-8, 1251] [/input-8, 1019] [/input-8, 1019] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6205346584320068, worst -0.2833310067653656
10 lb beta sum: 0.916311502456665, worst -0.09529399871826172
Time: prepare 1.4563    bound 2.5353    transfer 0.1627    finalize 0.2338    func 4.6021    
Accumulated time: func 27.7609    prepare 6.6145    bound 15.9970    transfer 0.9526    finalize 2.3355    
all_split False
======================Cut inference begins======================
max lb tensor(0.48078334) min lb tensor(-0.09528542)
Number of Verified Splits: 9895 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 31
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 3.3311588764190674 
BICCOS Cumulative time: 22.736271381378174
Preprocessing time: 1.0026652812957764 Inference time: 2.1396186351776123 Add cuts time: 0.18787264823913574 Cut analysis time: 0.0010023117065429688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09529 (36), -0.09168 (36), -0.09133 (35), -0.09092 (36), -0.09057 (35), -0.09002 (36), -0.08982 (36), -0.08902 (35), -0.08864 (35), -0.08835 (36), -0.08701 (36), -0.08595 (36), -0.08574 (35), -0.08573 (36), -0.08561 (35), -0.08560 (35), -0.08560 (35), -0.08557 (36), -0.08517 (36), -0.08510 (35), 
Length of domains: 36171
Time: pickout 0.4743    decision 1.7202    set_bounds 2.3402    solve 5.1674    add 0.7316    
Accumulated time: pickout 2.6774    decision 8.9541    set_bounds 11.7274    solve 28.3115    add 4.7773    
Current (lb-rhs): -0.09528541564941406
132255 domains visited
Cumulative time: 80.45171523094177

BaB round 27
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 633] [/input, 633] [/input, 633] [/input, 633] [/input, 633] [/input, 633] [/input, 396] [/input, 396] [/input, 396] [/input, 396] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08966922760009766
10 lb beta sum: 0.8641189932823181, worst -0.08957862854003906
Time: prepare 0.9111    bound 1.8168    transfer 0.1598    finalize 0.2391    func 3.3512    
Accumulated time: func 31.1121    prepare 7.5260    bound 17.8137    transfer 1.1124    finalize 2.5745    
all_split False
======================Cut inference begins======================
max lb tensor(0.47483522) min lb tensor(-0.08955097)
Number of Verified Splits: 15664 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 30
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 5.378628730773926 
BICCOS Cumulative time: 28.1149001121521
Preprocessing time: 1.7396743297576904 Inference time: 3.373889207839966 Add cuts time: 0.2637290954589844 Cut analysis time: 0.0013360977172851562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09529 (36), -0.09168 (36), -0.09092 (36), -0.09002 (36), -0.08982 (36), -0.08955 (36), -0.08879 (36), -0.08835 (36), -0.08701 (36), -0.08595 (36), -0.08573 (36), -0.08561 (35), -0.08557 (36), -0.08517 (36), -0.08508 (36), -0.08493 (36), -0.08489 (36), -0.08485 (35), -0.08454 (36), -0.08425 (36), 
Length of domains: 36891
Time: pickout 0.3522    decision 2.1865    set_bounds 2.1969    solve 3.3616    add 0.1710    
Accumulated time: pickout 3.0296    decision 11.1406    set_bounds 13.9243    solve 31.6732    add 4.9483    
Current (lb-rhs): -0.09528541564941406
149359 domains visited
Cumulative time: 94.29615497589111

BaB round 28
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1069] [/input-8, 1069] [/input-8, 1251] [/input, 396] [/input-8, 1020] [/input-8, 1020] [/input-8, 633] [/input-8, 633] [/input-8, 1251] [/input-8, 1251] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08766841888427734
10 lb beta sum: 0.862493634223938, worst -0.08459751307964325
Time: prepare 0.9076    bound 2.5374    transfer 0.1588    finalize 0.8221    func 4.6465    
Accumulated time: func 35.7586    prepare 8.4340    bound 20.3511    transfer 1.2712    finalize 3.3967    
all_split False
======================Cut inference begins======================
max lb tensor(0.47517085) min lb tensor(-0.08458477)
Number of Verified Splits: 14592 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 30
#cuts 4-6: 12
#cuts >= 20: 0
BICCOS time: 5.476733922958374 
BICCOS Cumulative time: 33.591634035110474
Preprocessing time: 1.137150764465332 Inference time: 4.071438789367676 Add cuts time: 0.2668721675872803 Cut analysis time: 0.0012722015380859375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09529 (36), -0.09168 (36), -0.09092 (36), -0.09002 (36), -0.08982 (36), -0.08955 (36), -0.08879 (36), -0.08835 (36), -0.08595 (36), -0.08573 (36), -0.08517 (36), -0.08508 (36), -0.08493 (36), -0.08458 (36), -0.08454 (36), -0.08407 (36), -0.08384 (36), -0.08383 (36), -0.08381 (36), -0.08369 (36), 
Length of domains: 38683
Time: pickout 0.3866    decision 2.0190    set_bounds 1.5234    solve 4.6549    add 0.2794    
Accumulated time: pickout 3.4162    decision 13.1596    set_bounds 15.4477    solve 36.3281    add 5.2277    
Current (lb-rhs): -0.09528541564941406
167535 domains visited
Cumulative time: 108.83923292160034

BaB round 29
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 981] [/input-8, 981] [/input-8, 633] [/input-8, 1069] [/input, 2166] [/input-8, 1069] [/input, 2166] [/input-8, 633] [/input-8, 981] [/input-8, 102] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09318351745605469
10 lb beta sum: 0.8255447149276733, worst -0.09102824330329895
Time: prepare 0.9148    bound 2.5452    transfer 0.1589    finalize 0.2285    func 4.0652    
Accumulated time: func 39.8238    prepare 9.3493    bound 22.8963    transfer 1.4302    finalize 3.6252    
all_split False
======================Cut inference begins======================
max lb tensor(0.41354170) min lb tensor(-0.08873849)
Number of Verified Splits: 10873 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 44.
#cuts 1-3: 30
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 4.778661251068115 
BICCOS Cumulative time: 38.37029528617859
Preprocessing time: 1.8473541736602783 Inference time: 2.708631753921509 Add cuts time: 0.22122693061828613 Cut analysis time: 0.0014483928680419922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08955 (36), -0.08879 (36), -0.08874 (37), -0.08798 (37), -0.08768 (37), -0.08713 (37), -0.08458 (36), -0.08383 (36), -0.08381 (36), -0.08304 (36), -0.08288 (37), -0.08265 (36), -0.08260 (37), -0.08242 (37), -0.08226 (37), -0.08211 (37), -0.08205 (37), -0.08204 (37), -0.08193 (37), -0.08189 (36), 
Length of domains: 44194
Time: pickout 0.3689    decision 1.6521    set_bounds 2.1319    solve 4.0733    add 0.2285    
Accumulated time: pickout 3.7851    decision 14.8117    set_bounds 17.5796    solve 40.4014    add 5.4562    
Current (lb-rhs): -0.08955097198486328
189430 domains visited
Cumulative time: 122.22358179092407

BaB round 30
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1069] [/input-8, 1069] [/input-8, 1069] [/input-8, 1069] [/input-8, 1069] [/input-8, 1503] [/input, 332] [/input-8, 1251] [/input-8, 981] [/input-8, 981] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08753776550292969
10 lb beta sum: 0.7669235467910767, worst -0.08661356568336487
Time: prepare 0.9337    bound 2.5467    transfer 0.1607    finalize 0.9448    func 4.8053    
Accumulated time: func 44.6291    prepare 10.2834    bound 25.4430    transfer 1.5909    finalize 4.5700    
all_split False
======================Cut inference begins======================
max lb tensor(0.41675085) min lb tensor(-0.08658890)
Number of Verified Splits: 10299 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 30
#cuts 4-6: 16
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 4.599932670593262 
BICCOS Cumulative time: 42.97022795677185
Preprocessing time: 1.1288881301879883 Inference time: 3.248309850692749 Add cuts time: 0.2212815284729004 Cut analysis time: 0.0014531612396240234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08874 (37), -0.08798 (37), -0.08768 (37), -0.08713 (37), -0.08659 (37), -0.08584 (37), -0.08288 (37), -0.08278 (37), -0.08258 (38), -0.08242 (37), -0.08211 (37), -0.08205 (37), -0.08204 (37), -0.08201 (37), -0.08193 (37), -0.08187 (37), -0.08149 (37), -0.08138 (37), -0.08129 (37), -0.08091 (37), 
Length of domains: 50279
Time: pickout 0.3625    decision 2.1009    set_bounds 1.5737    solve 4.8131    add 0.1703    
Accumulated time: pickout 4.1476    decision 16.9125    set_bounds 19.1533    solve 45.2145    add 5.6265    
Current (lb-rhs): -0.08873848617076874
211899 domains visited
Cumulative time: 135.98258709907532

BaB round 31
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 981] [/input-8, 981] [/input-8, 981] [/input-8, 981] [/input-8, 981] [/input-8, 1332] [/input-8, 981] [/input-8, 981] [/input-8, 981] [/input-8, 981] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09035110473632812
10 lb beta sum: 0.7562508583068848, worst -0.08768463134765625
Time: prepare 0.9296    bound 2.5517    transfer 0.1605    finalize 0.9849    func 4.8417    
Accumulated time: func 49.4708    prepare 11.2135    bound 27.9946    transfer 1.7514    finalize 5.5549    
all_split False
======================Cut inference begins======================
max lb tensor(0.41630542) min lb tensor(-0.08768272)
Number of Verified Splits: 9488 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 54.
#cuts 1-3: 30
#cuts 4-6: 23
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 4.238977909088135 
BICCOS Cumulative time: 47.209205865859985
Preprocessing time: 1.0566105842590332 Inference time: 2.9690427780151367 Add cuts time: 0.21156668663024902 Cut analysis time: 0.0017578601837158203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08768 (38), -0.08713 (37), -0.08659 (37), -0.08584 (37), -0.08525 (38), -0.08449 (38), -0.08447 (38), -0.08372 (38), -0.08278 (37), -0.08258 (38), -0.08242 (38), -0.08205 (37), -0.08204 (37), -0.08201 (37), -0.08193 (38), -0.08187 (37), -0.08149 (37), -0.08138 (37), -0.08129 (37), -0.08083 (37), 
Length of domains: 57175
Time: pickout 0.3609    decision 1.6514    set_bounds 1.5548    solve 4.8503    add 0.3003    
Accumulated time: pickout 4.5085    decision 18.5640    set_bounds 20.7081    solve 50.0649    add 5.9269    
Current (lb-rhs): -0.08768272399902344
235179 domains visited
Cumulative time: 149.1178493499756

BaB round 32
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 81] [/input, 1754] [/input-8, 986] [/input, 1767] [/input, 1754] [/input, 1754] [/input, 1767] [/input, 1767] [/input, 1767] [/input, 1767] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08979511260986328
10 lb beta sum: 0.7293758392333984, worst -0.08712577819824219
Time: prepare 0.9412    bound 2.5687    transfer 0.1595    finalize 0.2405    func 4.1253    
Accumulated time: func 53.5961    prepare 12.1550    bound 30.5633    transfer 1.9109    finalize 5.7953    
all_split False
======================Cut inference begins======================
max lb tensor(0.41560927) min lb tensor(-0.08711815)
Number of Verified Splits: 10275 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 32
#cuts 4-6: 23
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 4.4943578243255615 
BICCOS Cumulative time: 51.70356369018555
Preprocessing time: 1.0434763431549072 Inference time: 3.2239737510681152 Add cuts time: 0.22507572174072266 Cut analysis time: 0.0018320083618164062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08768 (38), -0.08712 (38), -0.08525 (38), -0.08449 (38), -0.08447 (38), -0.08372 (38), -0.08309 (38), -0.08278 (37), -0.08258 (38), -0.08242 (38), -0.08234 (38), -0.08232 (38), -0.08202 (38), -0.08201 (37), -0.08193 (38), -0.08185 (38), -0.08156 (38), -0.08149 (38), -0.08137 (38), -0.08083 (37), 
Length of domains: 63284
Time: pickout 0.3740    decision 1.6721    set_bounds 2.4045    solve 4.1360    add 0.2597    
Accumulated time: pickout 4.8826    decision 20.2361    set_bounds 23.1125    solve 54.2008    add 6.1866    
Current (lb-rhs): -0.08768272399902344
257672 domains visited
Cumulative time: 162.6319522857666

BaB round 33
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1737] [/input-8, 981] [/input-8, 1737] [/input-8, 1737] [/input-8, 1737] [/input-8, 1737] [/input-8, 1020] [/input, 1754] [/input-8, 1020] [/input-8, 1020] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08258438110351562
10 lb beta sum: 0.7009484767913818, worst -0.0917406976222992
Time: prepare 0.9649    bound 2.5704    transfer 0.1622    finalize 1.1549    func 5.0684    
Accumulated time: func 58.6646    prepare 13.1204    bound 33.1337    transfer 2.0731    finalize 6.9502    
all_split False
======================Cut inference begins======================
max lb tensor(0.41689247) min lb tensor(-0.08258438)
Number of Verified Splits: 9965 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 63.
#cuts 1-3: 32
#cuts 4-6: 28
#cuts 7-9: 2
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 4.591901540756226 
BICCOS Cumulative time: 56.29546523094177
Preprocessing time: 1.056159257888794 Inference time: 3.3070123195648193 Add cuts time: 0.2264699935913086 Cut analysis time: 0.002259969711303711
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08768 (38), -0.08712 (38), -0.08525 (38), -0.08449 (38), -0.08447 (38), -0.08372 (38), -0.08309 (38), -0.08258 (39), -0.08242 (38), -0.08234 (38), -0.08232 (38), -0.08202 (38), -0.08193 (38), -0.08185 (38), -0.08156 (38), -0.08149 (38), -0.08137 (38), -0.08077 (38), -0.08074 (38), -0.08074 (38), 
Length of domains: 69703
Time: pickout 0.3746    decision 1.6506    set_bounds 1.6486    solve 5.0775    add 9.7364    
Accumulated time: pickout 5.2572    decision 21.8867    set_bounds 24.7611    solve 59.2783    add 15.9231    
Current (lb-rhs): -0.08768272399902344
280475 domains visited
Cumulative time: 185.88391375541687

BaB round 34
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 396] [/input, 396] [/input, 396] [/input, 396] [/input, 396] [/input, 396] [/input, 396] [/input, 396] [/input, 396] [/input, 396] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08391666412353516
10 lb beta sum: 0.7008026838302612, worst -0.08467864990234375
Time: prepare 0.9517    bound 2.5827    transfer 0.2093    finalize 1.2943    func 5.2496    
Accumulated time: func 63.9142    prepare 14.0726    bound 35.7164    transfer 2.2824    finalize 8.2445    
all_split False
======================Cut inference begins======================
max lb tensor(0.41596308) min lb tensor(-0.08292586)
Number of Verified Splits: 8724 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 57.
#cuts 1-3: 31
#cuts 4-6: 24
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 3.231928825378418 
BICCOS Cumulative time: 59.52739405632019
Preprocessing time: 1.0026075839996338 Inference time: 2.0264570713043213 Add cuts time: 0.20067071914672852 Cut analysis time: 0.002193450927734375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08768 (38), -0.08712 (38), -0.08525 (38), -0.08449 (38), -0.08309 (38), -0.08293 (39), -0.08258 (39), -0.08242 (38), -0.08234 (38), -0.08232 (38), -0.08218 (39), -0.08202 (38), -0.08193 (38), -0.08185 (38), -0.08156 (38), -0.08149 (38), -0.08137 (38), -0.08077 (38), -0.08074 (38), -0.08074 (38), 
Length of domains: 77363
Time: pickout 0.3937    decision 1.6561    set_bounds 1.5916    solve 5.2582    add 0.3197    
Accumulated time: pickout 5.6509    decision 23.5428    set_bounds 26.3527    solve 64.5366    add 16.2427    
Current (lb-rhs): -0.08768272399902344
304519 domains visited
Time out!!!!!!!!
Result: unknown in 201.0826 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 25, vnnlib ID: 25 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.14924717, -7.20264626, -3.62566066, -3.26617622, -3.26720905,
         -3.86512804, -2.64753652, -4.15916395, -7.16723728, -5.27643299]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [704]; unstable size 704; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 299, 1, 704] with unstable size 298 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 704] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 704] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [298]; unstable size 298; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 298] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 298] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.08241999, -2.05952215, -2.42161846, -2.46702027, -2.20508432,
         -3.01654959, -2.22386360,  1.33762681, -0.76212645]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.14924717, -7.20264626, -3.62566066, -3.26617622, -3.26720905,
         -3.86512804, -2.64753652, -4.15916395, -7.16723728, -5.27643299]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.14924717, -7.20264530, -3.62566042, -3.26617575, -3.26720858,
          -3.86512756, -2.64753628, -4.15916443, -7.16723728, -5.27643251],
         [-4.14924717, -7.20264530, -3.62566042, -3.26617575, -3.26720858,
          -3.86512756, -2.64753628, -4.15916443, -7.16723728, -5.27643251]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.52358675, -0.88307142, -0.88203859, -0.28411961, -1.50171089,
           0.00991726,  1.12718534]]], device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         ...,


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0958 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 26, vnnlib ID: 26 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.82686090, -6.41171074, -7.68403912, -6.35791826, -7.00407124,
         -6.85788012, -7.81835127, -6.72433424, -6.81869602, -4.52237940]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [573]; unstable size 573; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 573] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 573] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 573] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 164] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.93261307, 0.64227426, 1.35773563, 0.14541268, 0.77890646, 0.42941689,
         1.61863828, 0.36068982, 0.89056158]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0723 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 27, vnnlib ID: 27 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.06539822, -17.73662376, -13.52726841, -13.91146278, -10.88764858,
         -13.52410698, -16.07256508,  -5.87544203, -16.85854721, -15.41843987]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [650]; unstable size 650; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 650] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 650] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 650] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 191] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.35606575, 9.58715820, 6.00918674, 6.42040968, 3.78135061, 6.19913769,
         8.01423836, 8.93800163, 7.41418505]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0790 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 28, vnnlib ID: 28 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.62422132, -12.83205509, -10.86794376, -11.14358330, -11.48577309,
         -12.18943787, -11.86716270, -14.63631248, -10.53621006, -12.42279720]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [928]; unstable size 928; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 124, 1, 928] with unstable size 123 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 928] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 928] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [123]; unstable size 123; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 123] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 123] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.12223864, 2.45312452, 2.49229217, 2.85657835, 3.25084162, 3.41792607,
         5.43004131, 2.01518440, 3.76126552]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0653 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 29, vnnlib ID: 29 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.71822071, -11.80851841,  -6.85466003,  -5.36537838,  -5.07366467,
          -5.51355600,  -5.88568926,  -6.49064875, -10.61816978, -10.64415073]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [574]; unstable size 574; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 216, 1, 574] with unstable size 215 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 574] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 574] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [215]; unstable size 215; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 215] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 215] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.72788787,  3.64086819, -0.86040449, -2.15425587, -2.38526535,
         -1.95328140, -1.94343710,  2.43316650,  2.66482735]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.71822071, -11.80851841,  -6.85466003,  -5.36537838,  -5.07366467,
          -5.51355600,  -5.88568926,  -6.49064875, -10.61816978, -10.64415073]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.71822071, -11.80851841,  -6.85466003,  -5.36537838,  -5.07366467,
           -5.51355553,  -5.88568926,  -6.49064827, -10.61816883, -10.64415073],
         [-10.71822071, -11.80851841,  -6.85466003,  -5.36537838,  -5.07366467,
           -5.51355553,  -5.88568926,  -6.49064827, -10.61816883, -10.64415073]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.36401176, -1.12526989, -1.41698360, -0.97709274, -0.60495901]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0670 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 30, vnnlib ID: 30 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.18480682, -14.47258854, -11.18161869, -14.32627869, -12.30105877,
         -15.18956566, -14.34846020, -16.43445969, -12.35407734, -15.00505161]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [778]; unstable size 778; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 155, 1, 778] with unstable size 154 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 778] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 778] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [154]; unstable size 154; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 154] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 154] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.25004578, 2.19217992, 5.06827402, 3.28106451, 5.71236038, 5.22400045,
         7.04772663, 3.23776245, 5.66314220]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0672 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 31, vnnlib ID: 31 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.54959202, -14.93725681,  -9.59988976, -11.64203358,  -7.25195312,
         -11.52101326, -11.52331543,  -9.14212132, -13.16885757, -13.51460266]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [559]; unstable size 559; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 280, 1, 559] with unstable size 279 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 559] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 559] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [279]; unstable size 279; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 279] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 279] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.93221843, 5.50633097, 1.10160077, 3.24868989, 3.06275225, 2.55501699,
         0.80379295, 3.91150236, 4.20123291]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0894 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 32, vnnlib ID: 32 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.27112675, -12.63512135,  -8.63367748,  -9.42183304,  -7.46700573,
          -9.92411232,  -9.37480068,  -7.93249464, -10.13228416, -10.65295982]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [673]; unstable size 673; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 673] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 673] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 673] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 249] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.22755647,  2.35429502, -1.18080235, -0.14742780, -1.67962360,
          0.47270054, -0.58272362, -0.47875690,  1.04633427]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.27112675, -12.63512135,  -8.63367748,  -9.42183304,  -7.46700573,
          -9.92411232,  -9.37480068,  -7.93249464, -10.13228416, -10.65295982]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.27112770, -12.63512135,  -8.63367748,  -9.42183399,  -7.46700478,
           -9.92411232,  -9.37480068,  -7.93249464, -10.13228512, -10.65296173],
         [-10.27112770, -12.63512135,  -8.63367748,  -9.42183399,  -7.46700478,
           -9.92411232,  -9.37480068,  -7.93249464, -10.13228512, -10.65296173]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.70118284,  1.48933935, -0.46548986,  1.44230604,  2.19979048]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0854 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 33, vnnlib ID: 33 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.97903728, -15.47458935, -14.82082081, -16.93464851, -16.98804283,
         -18.22283363, -17.40720367, -19.39607430, -13.83522511, -16.04048157]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [961]; unstable size 961; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 147, 1, 961] with unstable size 146 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 961] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 961] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [146]; unstable size 146; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 146] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 146] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.36850739, 2.85024309, 4.83520412, 4.84200573, 5.83572006, 5.30677128,
         7.12614632, 1.81439686, 4.14064789]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0618 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 34, vnnlib ID: 34 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.24514103, -9.31445694, -4.68999958, -4.27805805, -4.32876205,
         -4.84132576, -4.94563007, -5.30884266, -9.89639282, -8.35261440]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [576]; unstable size 576; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 271, 1, 576] with unstable size 270 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 576] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 576] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [270]; unstable size 270; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 270] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 270] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.30363154,  2.67125416, -0.65277290, -0.97995400,  0.21614313,
         -0.59253997,  0.02449515,  3.50285625,  2.09800720]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.24514103, -9.31445694, -4.68999958, -4.27805805, -4.32876205,
         -4.84132576, -4.94563007, -5.30884266, -9.89639282, -8.35261440]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.15455532, -10.60125256,  -5.41358471,  -5.43196726,  -5.26921654,
           -5.97929192,  -6.01046705,  -6.31621122, -10.86349106,  -9.62036419],
         [ -9.15455532, -10.60125256,  -5.41358471,  -5.43196726,  -5.26921654,
           -5.97929192,  -6.01046705,  -6.31621122, -10.86349106,  -9.62036419]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01838255, -0.16275072,  0.57849979]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0132 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0943 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 35, vnnlib ID: 35 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.70502281, -7.45960903, -2.49920797, -1.05304623, -3.13333511,
         -1.90231669, -1.12411547, -2.32658529, -5.78024006, -5.08773088]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 256, 1, 540] with unstable size 255 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 540] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [255]; unstable size 255; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 255] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 255] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.87189937,  3.69729829,  0.41519833,  1.04059923,  0.46059477,
         -1.19380593,  0.21724120,  2.69666719,  1.93056870]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.70502281, -7.45960903, -2.49920797, -1.05304623, -3.13333511,
         -1.90231669, -1.12411547, -2.32658529, -5.78024006, -5.08773088]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.05819893, -7.58267593, -2.72234511, -1.43960345, -3.43121195,
          -2.28614616, -0.89729089, -2.77882195, -6.09740543, -5.29890108]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.54231256]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0827 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 36, vnnlib ID: 36 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.26436710, -5.76788616, -1.08416247,  0.26655820, -2.02816391,
         -0.65419853, -1.94119561, -0.85351741, -4.12531948, -3.61707258]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [746]; unstable size 746; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 148, 1, 746] with unstable size 147 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 746] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 746] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [147]; unstable size 147; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 147] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 147] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.37818599,  3.92298698, -0.56011486, -1.79689825,  0.44506049,
         -0.89399886,  0.06454659,  2.27980328,  1.70670176]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.26436710, -5.76788616, -1.08416247,  0.26655820, -2.02816391,
         -0.65419853, -1.94119561, -0.85351741, -4.12531948, -3.61707258]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.26436663, -5.76788521, -1.08416212,  0.26655802, -2.02816391,
          -0.65419877, -1.94119525, -0.85351765, -4.12531900, -3.61707306],
         [-2.26436663, -5.76788521, -1.08416212,  0.26655802, -2.02816391,
          -0.65419877, -1.94119525, -0.85351765, -4.12531900, -3.61707306]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.23064446, -1.12007570, -0.19931889]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0561 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 37, vnnlib ID: 37 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.01291561, -12.13928890, -12.98730183, -15.90724564, -13.82077122,
         -17.84158707, -17.88521957, -16.36121368, -11.50735950, -12.93546104]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [566]; unstable size 566; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 566] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 566] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 566] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 180] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.04726744, 2.13469362, 4.88873720, 2.78446722, 6.62359476, 6.58985138,
         4.87536144, 0.22735882, 1.88157797]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0708 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 38, vnnlib ID: 38 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.67120075, -8.34336758, -2.96194768, -3.20485783, -2.59110832,
         -3.43676805, -1.38701296, -4.13833094, -8.45190620, -6.74960279]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [421]; unstable size 421; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 421] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 421] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 421] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 249] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.48716259,  5.17507696,  0.09683561,  0.57209575, -0.21805739,
          0.58378100,  1.18988431,  5.01148224,  3.44507051]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.67120075, -8.34336758, -2.96194768, -3.20485783, -2.59110832,
         -3.43676805, -1.38701296, -4.13833094, -8.45190620, -6.74960279]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.82it/s]100%|██████████| 1/1 [00:00<00:00,  8.81it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.36143351, -8.27827263, -2.67933655, -3.03170109, -2.11203384,
          -3.19349098, -1.59651995, -3.84145784, -8.13518906, -6.71451759]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.51551390]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1162 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 20.92751693725586
alpha/beta optimization time: 1.2396221160888672
initial alpha-crown bounds: tensor([[ 4.54304743,  5.26645184,  0.14525294,  0.62454021, -0.16246271,
          0.64612192,  1.25836790,  5.08361530,  3.52258205]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.16246271133422852
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5746133327484
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.57457542419434
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.57454705238342
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.57452511787415
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.57450675964355
Verifying property 4 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.16246271]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.67120075, -8.34336758, -2.96194768, -3.20485783, -2.59110832,
        -3.43676805, -1.38701296, -4.13833094, -8.45190620, -6.74960279],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.16246271]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 421
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 246
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 688
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00015282630920410156
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1624603271484375
10 lb beta sum: 0.0, worst -0.16246390342712402
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0535    transfer 0.0001    finalize 0.0001    func 0.0539    
Accumulated time: func 0.0539    prepare 0.0002    bound 0.0535    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 51] 
split level 1: [/input-12, 41] 
split level 2: [/input-12, 60] 
split level 3: [/input-12, 35] 
split level 4: [/input-12, 92] 
split level 5: [/input-12, 29] 
split level 6: [/input-12, 11] 
split level 7: [/input-12, 6] 
split level 8: [/input-12, 38] 
split level 9: [/input-12, 37] 
split level 10: [/input-12, 17] 
split level 11: [/input-12, 33] 
split level 12: [/input-12, 46] 
split level 13: [/input-12, 26] 
split level 14: [/input-12, 54] 
split level 15: [/input-8, 299] 
split level 16: [/input-8, 1874] 
split level 17: [/input-8, 859] 
split level 18: [/input-8, 485] 
split level 19: [/input-8, 300] 
split level 20: [/input-8, 188] 
split level 21: [/input-8, 971] 
split level 22: [/input-8, 1114] 
split level 23: [/input-8, 921] 
split level 24: [/input-8, 809] 
split level 25: [/input-8, 89] 
split level 26: [/input-8, 429] 
split level 27: [/input-8, 1429] 
split level 28: [/input-8, 97] 
split level 29: [/input-8, 828] 
split level 30: [/input-8, 85] 
split level 31: [/input-8, 82] 
split level 32: [/input-8, 571] 
split level 33: [/input-8, 659] 
split level 34: [/input-8, 1426] 
split level 35: [/input-8, 187] 
split level 36: [/input-8, 481] 
split level 37: [/input-8, 994] 
split level 38: [/input-8, 964] 
split level 39: [/input-8, 1427] 
split level 40: [/input-8, 107] 
split level 41: [/input-8, 1978] 
split level 42: [/input-8, 938] 
split level 43: [/input-8, 1819] 
split level 44: [/input-8, 1150] 
split level 45: [/input-8, 1395] 
split level 46: [/input-8, 1130] 
split level 47: [/input-8, 1007] 
split level 48: [/input-8, 1865] 
split level 49: [/input-8, 282] 
split level 50: [/input-8, 1521] 
split level 51: [/input-8, 435] 
split level 52: [/input-8, 668] 
split level 53: [/input-8, 1010] 
split level 54: [/input-8, 1324] 
split level 55: [/input-8, 1388] 
split level 56: [/input-8, 1857] 
split level 57: [/input-8, 970] 
split level 58: [/input-8, 800] 
split level 59: [/input-8, 2024] 
split level 60: [/input-8, 1411] 
split level 61: [/input, 2280] 
split level 62: [/input-8, 842] 
split level 63: [/input-8, 1250] 
split level 64: [/input-8, 1866] 
split level 65: [/input-8, 1980] 
split level 66: [/input-8, 934] 
split level 67: [/input-8, 1947] 
split level 68: [/input-8, 1380] 
split level 69: [/input-8, 937] 
split level 70: [/input-8, 1030] 
split level 71: [/input-8, 2025] 
split level 72: [/input-8, 926] 
split level 73: [/input-8, 841] 
split level 74: [/input-8, 65] 
split level 75: [/input-8, 1837] 
split level 76: [/input, 484] 
split level 77: [/input-8, 494] 
split level 78: [/input-8, 688] 
split level 79: [/input-8, 963] 
split level 80: [/input-8, 544] 
split level 81: [/input-8, 522] 
split level 82: [/input-8, 505] 
split level 83: [/input-8, 1931] 
split level 84: [/input-8, 1417] 
split level 85: [/input, 1587] 
split level 86: [/input-8, 414] 
split level 87: [/input-8, 1983] 
split level 88: [/input-8, 310] 
split level 89: [/input-8, 493] 
split level 90: [/input-8, 99] 
split level 91: [/input-8, 1834] 
split level 92: [/input, 1638] 
split level 93: [/input-8, 1575] 
split level 94: [/input-8, 496] 
split level 95: [/input-8, 2004] 
split level 96: [/input-8, 1018] 
split level 97: [/input-8, 407] 
split level 98: [/input-8, 984] 
split level 99: [/input-8, 419] 
split level 100: [/input, 483] 
split level 101: [/input-8, 1582] 
split level 102: [/input-8, 2003] 
split level 103: [/input-8, 2021] 
split level 104: [/input-8, 1469] 
split level 105: [/input-8, 1434] 
split level 106: [/input-8, 119] 
split level 107: [/input-8, 514] 
split level 108: [/input, 1719] 
split level 109: [/input-8, 1996] 
split level 110: [/input, 2136] 
split level 111: [/input-8, 816] 
split level 112: [/input, 1718] 
split level 113: [/input-8, 1486] 
split level 114: [/input-8, 2045] 
split level 115: [/input-8, 1443] 
split level 116: [/input-8, 1795] 
split level 117: [/input-8, 1240] 
split level 118: [/input-8, 1533] 
split level 119: [/input-8, 503] 
split level 120: [/input, 1653] 
split level 121: [/input, 1575] 
split level 122: [/input-8, 479] 
split level 123: [/input, 3545] 
split level 124: [/input, 174] 
split level 125: [/input, 1702] 
split level 126: [/input-8, 508] 
split level 127: [/input-8, 638] 
split level 128: [/input-8, 2029] 
split level 129: [/input-8, 1363] 
split level 130: [/input, 2296] 
split level 131: [/input-8, 1242] 
split level 132: [/input-8, 914] 
split level 133: [/input-8, 1302] 
split level 134: [/input, 1669] 
split level 135: [/input, 2602] 
split level 136: [/input-8, 1354] 
split level 137: [/input-8, 1012] 
split level 138: [/input, 2374] 
split level 139: [/input, 431] 
split level 140: [/input, 2121] 
split level 141: [/input-8, 504] 
split level 142: [/input, 739] 
split level 143: [/input-8, 689] 
split level 144: [/input, 709] 
split level 145: [/input, 1610] 
split level 146: [/input, 1130] 
split level 147: [/input, 1743] 
split level 148: [/input, 1570] 
split level 149: [/input, 1468] 
split level 150: [/input, 1705] 
split level 151: [/input-8, 2023] 
split level 152: [/input, 3539] 
split level 153: [/input, 2008] 
split level 154: [/input, 1948] 
split level 155: [/input, 3517] 
split level 156: [/input, 2261] 
split level 157: [/input, 1756] 
split level 158: [/input, 1589] 
split level 159: [/input-8, 1529] 
split level 160: [/input-8, 1381] 
split level 161: [/input-8, 467] 
split level 162: [/input-8, 1823] 
split level 163: [/input, 3357] 
split level 164: [/input, 1469] 
split level 165: [/input, 1164] 
split level 166: [/input, 2322] 
split level 167: [/input-8, 577] 
split level 168: [/input, 3513] 
split level 169: [/input, 3533] 
split level 170: [/input-8, 76] 
split level 171: [/input, 1888] 
split level 172: [/input, 1302] 
split level 173: [/input, 1499] 
split level 174: [/input, 1105] 
split level 175: [/input-8, 951] 
split level 176: [/input, 1956] 
split level 177: [/input-8, 1398] 
split level 178: [/input-8, 1995] 
split level 179: [/input-8, 406] 
split level 180: [/input, 3561] 
split level 181: [/input, 1685] 
split level 182: [/input, 1937] 
split level 183: [/input, 1159] 
split level 184: [/input, 3069] 
split level 185: [/input, 1826] 
split level 186: [/input, 2341] 
split level 187: [/input-8, 1955] 
split level 188: [/input, 3350] 
split level 189: [/input, 3349] 
split level 190: [/input-8, 1442] 
split level 191: [/input-8, 1402] 
split level 192: [/input, 3869] 
split level 193: [/input, 1933] 
split level 194: [/input, 1196] 
split level 195: [/input, 376] 
split level 196: [/input, 2219] 
split level 197: [/input, 162] 
split level 198: [/input-8, 1047] 
split level 199: [/input, 2259] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1623849868774414
10 lb beta sum: 0.0, worst -0.1623833179473877
Time: prepare 0.0118    bound 0.1009    transfer 0.0019    finalize 0.0029    func 0.1202    
Accumulated time: func 0.1742    prepare 0.0224    bound 0.1544    transfer 0.0020    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.25878239) min lb tensor(-0.16238022)
Number of Verified Splits: 8 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.011202335357666016 
BICCOS Cumulative time: 0.011202335357666016
Preprocessing time: 0.010083913803100586 Inference time: 0.0003476142883300781 Add cuts time: 0.00012302398681640625 Cut analysis time: 0.0006477832794189453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14719 (1), -0.14710 (1), -0.14692 (1), -0.14686 (1), -0.14672 (1), -0.14623 (1), -0.14620 (1), -0.14517 (1), -0.14508 (1), -0.14418 (1), -0.14325 (1), -0.14313 (1), -0.14312 (1), -0.14254 (1), -0.14196 (1), -0.14144 (1), -0.14034 (1), -0.13998 (1), -0.13795 (1), -0.13717 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5175    set_bounds 0.0105    solve 0.1203    add 0.2056    
Accumulated time: pickout 0.0004    decision 0.5175    set_bounds 0.0105    solve 0.1203    add 0.2056    
Current (lb-rhs): -0.14719343185424805
50 domains visited
Cumulative time: 0.9444365501403809

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 35] [/input-12, 35] [/input-12, 92] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 29] [/input-12, 92] [/input-12, 92] [/input-12, 29] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 29] 
split level 2: [/input-12, 11] [/input-12, 29] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 11] 
split level 3: [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 17] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1085362434387207
10 lb beta sum: 1.057102084159851, worst -0.04209482669830322
Time: prepare 0.0071    bound 0.1187    transfer 0.0018    finalize 0.0021    func 0.1324    
Accumulated time: func 0.3066    prepare 0.0297    bound 0.2730    transfer 0.0038    finalize 0.0052    
all_split False
======================Cut inference begins======================
max lb tensor(0.17490852) min lb tensor(-0.04197073)
Number of Verified Splits: 359 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.032862186431884766 
BICCOS Cumulative time: 0.04406452178955078
Preprocessing time: 0.011728763580322266 Inference time: 0.013257503509521484 Add cuts time: 0.007665395736694336 Cut analysis time: 0.0002105236053466797
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0114    decision 0.0202    set_bounds 0.0129    solve 0.1325    add 0.0150    
Accumulated time: pickout 0.0118    decision 0.5377    set_bounds 0.0233    solve 0.2529    add 0.2206    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 41] 
split level 1: [/input-12, 60] 
split level 2: [/input-12, 35] 
split level 3: [/input-12, 92] 
split level 4: [/input-12, 29] 
split level 5: [/input-12, 11] 
split level 6: [/input-12, 17] 
split level 7: [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.1978473663330078

all verified at 0th iter
Time: prepare 0.0037    bound 0.0043    transfer 0.0007    finalize 0.0013    func 0.0117    
Accumulated time: func 0.3184    prepare 0.0338    bound 0.2774    transfer 0.0045    finalize 0.0065    
all_split False
======================Cut inference begins======================
max lb tensor(0.81453156) min lb tensor(0.19784737)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.006370067596435547 
BICCOS Cumulative time: 0.05043458938598633
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0005    decision 0.0227    set_bounds 0.0169    solve 0.0119    add 0.0003    
Accumulated time: pickout 0.0123    decision 0.5603    set_bounds 0.0402    solve 0.2647    add 0.2208    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
Cumulative time: 1.2390012741088867


Properties batch 5, size 1
Remaining timeout: 197.09162020683289
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.09118628501892
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.09115195274353
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.09084916114807
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.9092 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 39, vnnlib ID: 39 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.08262920, -10.85117626,  -6.26876736,  -6.31408882,  -5.73352718,
          -6.74807501,  -3.77881598,  -7.22824049, -11.69428158, -10.35355473]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [375]; unstable size 375; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 375] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 375] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 375] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 208] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.36300135, 4.89374352, 1.18320334, 1.43400919, 0.60667610, 1.79556417,
         1.70379806, 5.56933069, 4.72802067]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0750 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 40, vnnlib ID: 40 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.55409622,  -9.96810532,  -6.92626286,  -8.56464005,  -8.43423653,
          -9.26128197, -10.86567974,  -8.56524467,  -8.85235691, -11.04646587]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [508]; unstable size 508; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 169, 1, 508] with unstable size 168 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 508] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 508] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [168]; unstable size 168; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 168] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 168] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.94185472, 0.70694840, 2.04573989, 1.92763674, 2.63131237, 4.18971491,
         1.79439890, 2.23234749, 4.28507805]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0678 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 41, vnnlib ID: 41 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.03971958, -11.64941406, -10.00275898,  -8.47386932,  -9.92812920,
          -8.93652153, -10.23073101, -10.63002968,  -4.10415173,  -9.58254910]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [504]; unstable size 504; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 504] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 504] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 504] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 206] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.82665873, 6.09783554, 4.47349691, 3.14197636, 4.34114504, 3.46894169,
         4.61985588, 4.88829136, 4.12811470]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0742 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 42, vnnlib ID: 42 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.23514986, -9.22857761, -3.75808716, -3.27435327, -4.29405165,
         -3.58545446, -2.41056466, -6.29414511, -6.66572762, -8.34386063]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [590]; unstable size 590; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 245, 1, 590] with unstable size 244 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 590] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 590] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [244]; unstable size 244; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 244] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 244] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.87620616,  4.30693913, -0.06645775, -0.26148754,  0.30728054,
         -0.24854940,  2.13002634,  1.88156319,  3.71216297]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.23514986, -9.22857761, -3.75808716, -3.27435327, -4.29405165,
         -3.58545446, -2.41056466, -6.29414511, -6.66572762, -8.34386063]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.48it/s]100%|██████████| 1/1 [00:00<00:00,  7.48it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.03449631, -9.09223366, -3.54179525, -2.84015751, -4.05080748,
          -3.00110483, -2.64081597, -5.93490744, -6.32542515, -8.11971188],
         [-6.03449631, -9.09223366, -3.54179525, -2.84015751, -4.05080748,
          -3.00110483, -2.64081597, -5.93490744, -6.32542515, -8.11971188]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.90097928, 0.19934154, 0.36028886]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1374 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.594413757324219
alpha/beta optimization time: 1.4105994701385498
initial alpha-crown bounds: tensor([[ 1.98166251,  4.46373272,  0.01902986, -0.21572971,  0.40181947,
         -0.18405604,  2.22683048,  2.03213978,  3.86898470]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.2157297134399414
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.36149835586548
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.36145853996277
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.36143112182617
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.36140656471252
Verifying property 3 with 1 instances.
##### Instance 42 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.21572971]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.23514986, -9.22857761, -3.75808716, -3.27435327, -4.29405165,
        -3.58545446, -2.41056466, -6.29414511, -6.66572762, -8.34386063],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.21572971]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 590
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 242
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 853
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010633468627929688
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21572792530059814
10 lb beta sum: 0.0, worst -0.21573156118392944
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0534    transfer 0.0001    finalize 0.0001    func 0.0538    
Accumulated time: func 0.0538    prepare 0.0002    bound 0.0534    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] 
split level 1: [/input-12, 1] 
split level 2: [/input-12, 11] 
split level 3: [/input-12, 51] 
split level 4: [/input-12, 41] 
split level 5: [/input-12, 10] 
split level 6: [/input-8, 109] 
split level 7: [/input-12, 13] 
split level 8: [/input-12, 45] 
split level 9: [/input-12, 82] 
split level 10: [/input-8, 540] 
split level 11: [/input-8, 850] 
split level 12: [/input-8, 1308] 
split level 13: [/input-8, 971] 
split level 14: [/input-8, 525] 
split level 15: [/input-8, 307] 
split level 16: [/input-8, 92] 
split level 17: [/input-8, 117] 
split level 18: [/input-8, 981] 
split level 19: [/input-8, 1909] 
split level 20: [/input-8, 483] 
split level 21: [/input-8, 1298] 
split level 22: [/input-8, 869] 
split level 23: [/input-8, 485] 
split level 24: [/input-12, 42] 
split level 25: [/input-8, 1389] 
split level 26: [/input-8, 1453] 
split level 27: [/input-8, 989] 
split level 28: [/input-8, 1461] 
split level 29: [/input-8, 94] 
split level 30: [/input, 3432] 
split level 31: [/input-8, 977] 
split level 32: [/input-8, 309] 
split level 33: [/input-8, 654] 
split level 34: [/input-8, 484] 
split level 35: [/input-8, 979] 
split level 36: [/input, 325] 
split level 37: [/input-8, 1940] 
split level 38: [/input-8, 486] 
split level 39: [/input-8, 530] 
split level 40: [/input-8, 1421] 
split level 41: [/input-8, 1523] 
split level 42: [/input-8, 1345] 
split level 43: [/input-8, 475] 
split level 44: [/input-8, 878] 
split level 45: [/input-8, 1828] 
split level 46: [/input-8, 985] 
split level 47: [/input-8, 1939] 
split level 48: [/input-8, 620] 
split level 49: [/input-8, 1247] 
split level 50: [/input-8, 1468] 
split level 51: [/input-8, 1142] 
split level 52: [/input-8, 828] 
split level 53: [/input-8, 1527] 
split level 54: [/input-8, 103] 
split level 55: [/input-8, 507] 
split level 56: [/input, 1366] 
split level 57: [/input-8, 541] 
split level 58: [/input-8, 124] 
split level 59: [/input-8, 86] 
split level 60: [/input-8, 91] 
split level 61: [/input, 3399] 
split level 62: [/input-8, 1254] 
split level 63: [/input-8, 998] 
split level 64: [/input-8, 506] 
split level 65: [/input-8, 113] 
split level 66: [/input-8, 1771] 
split level 67: [/input-8, 1390] 
split level 68: [/input, 391] 
split level 69: [/input-8, 1433] 
split level 70: [/input-8, 1903] 
split level 71: [/input-8, 1324] 
split level 72: [/input-8, 524] 
split level 73: [/input-8, 1255] 
split level 74: [/input-8, 997] 
split level 75: [/input-8, 310] 
split level 76: [/input-8, 1457] 
split level 77: [/input-8, 1348] 
split level 78: [/input-8, 428] 
split level 79: [/input-8, 522] 
split level 80: [/input-8, 1381] 
split level 81: [/input-8, 1904] 
split level 82: [/input-8, 1446] 
split level 83: [/input-8, 75] 
split level 84: [/input-8, 1467] 
split level 85: [/input-8, 1437] 
split level 86: [/input, 3417] 
split level 87: [/input, 316] 
split level 88: [/input, 2135] 
split level 89: [/input-8, 1246] 
split level 90: [/input-8, 1835] 
split level 91: [/input-8, 1076] 
split level 92: [/input-8, 1837] 
split level 93: [/input-8, 867] 
split level 94: [/input, 386] 
split level 95: [/input-8, 1754] 
split level 96: [/input-8, 624] 
split level 97: [/input-8, 1762] 
split level 98: [/input, 369] 
split level 99: [/input-8, 1844] 
split level 100: [/input-8, 923] 
split level 101: [/input-8, 487] 
split level 102: [/input, 406] 
split level 103: [/input-8, 1071] 
split level 104: [/input, 1382] 
split level 105: [/input-8, 1838] 
split level 106: [/input-8, 1347] 
split level 107: [/input, 355] 
split level 108: [/input-8, 827] 
split level 109: [/input-8, 1237] 
split level 110: [/input, 3960] 
split level 111: [/input-8, 573] 
split level 112: [/input-8, 602] 
split level 113: [/input-8, 501] 
split level 114: [/input-8, 505] 
split level 115: [/input, 309] 
split level 116: [/input-8, 125] 
split level 117: [/input, 1603] 
split level 118: [/input-8, 1009] 
split level 119: [/input-8, 415] 
split level 120: [/input-8, 83] 
split level 121: [/input, 1352] 
split level 122: [/input, 220] 
split level 123: [/input, 4045] 
split level 124: [/input-8, 1936] 
split level 125: [/input-8, 1736] 
split level 126: [/input, 404] 
split level 127: [/input-8, 862] 
split level 128: [/input-8, 922] 
split level 129: [/input, 2802] 
split level 130: [/input-8, 1440] 
split level 131: [/input-8, 887] 
split level 132: [/input-8, 1816] 
split level 133: [/input, 2098] 
split level 134: [/input, 1350] 
split level 135: [/input, 4013] 
split level 136: [/input, 1396] 
split level 137: [/input-8, 1235] 
split level 138: [/input, 1401] 
split level 139: [/input, 3510] 
split level 140: [/input-8, 840] 
split level 141: [/input-8, 958] 
split level 142: [/input, 3493] 
split level 143: [/input, 1333] 
split level 144: [/input, 174] 
split level 145: [/input-8, 1023] 
split level 146: [/input-8, 1406] 
split level 147: [/input-8, 435] 
split level 148: [/input, 3127] 
split level 149: [/input-8, 1551] 
split level 150: [/input-8, 2036] 
split level 151: [/input, 32] 
split level 152: [/input, 1416] 
split level 153: [/input-8, 1983] 
split level 154: [/input, 1960] 
split level 155: [/input, 3913] 
split level 156: [/input-8, 477] 
split level 157: [/input-8, 1744] 
split level 158: [/input, 1949] 
split level 159: [/input-8, 1323] 
split level 160: [/input, 2704] 
split level 161: [/input-8, 1770] 
split level 162: [/input-8, 74] 
split level 163: [/input, 2091] 
split level 164: [/input-8, 1787] 
split level 165: [/input-8, 563] 
split level 166: [/input-8, 786] 
split level 167: [/input, 1093] 
split level 168: [/input, 1347] 
split level 169: [/input, 2857] 
split level 170: [/input-8, 1442] 
split level 171: [/input, 300] 
split level 172: [/input, 4090] 
split level 173: [/input, 3329] 
split level 174: [/input, 1963] 
split level 175: [/input, 3908] 
split level 176: [/input-8, 1126] 
split level 177: [/input, 3371] 
split level 178: [/input, 4043] 
split level 179: [/input, 1964] 
split level 180: [/input, 1708] 
split level 181: [/input-8, 1477] 
split level 182: [/input, 3356] 
split level 183: [/input-8, 1919] 
split level 184: [/input, 3022] 
split level 185: [/input, 1725] 
split level 186: [/input-8, 1427] 
split level 187: [/input, 3694] 
split level 188: [/input, 506] 
split level 189: [/input, 3330] 
split level 190: [/input, 1371] 
split level 191: [/input, 3607] 
split level 192: [/input, 2962] 
split level 193: [/input, 3968] 
split level 194: [/input, 2916] 
split level 195: [/input-8, 876] 
split level 196: [/input, 3677] 
split level 197: [/input, 4052] 
split level 198: [/input, 4030] 
split level 199: [/input, 2841] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2156529426574707
10 lb beta sum: 0.0, worst -0.21565276384353638
Time: prepare 0.0116    bound 0.0993    transfer 0.0017    finalize 0.0031    func 0.1184    
Accumulated time: func 0.1722    prepare 0.0219    bound 0.1526    transfer 0.0018    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.23370624) min lb tensor(-0.21564686)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010548591613769531 
BICCOS Cumulative time: 0.010548591613769531
Preprocessing time: 0.01009058952331543 Inference time: 0.00015664100646972656 Add cuts time: 5.888938903808594e-05 Cut analysis time: 0.00024247169494628906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20197 (1), -0.20187 (1), -0.20132 (1), -0.20050 (1), -0.20030 (1), -0.20022 (1), -0.20021 (1), -0.19973 (1), -0.19950 (1), -0.19921 (1), -0.19912 (1), -0.19872 (1), -0.19870 (1), -0.19763 (1), -0.19665 (1), -0.19640 (1), -0.19613 (1), -0.19596 (1), -0.19552 (1), -0.19498 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5188    set_bounds 0.0094    solve 0.1184    add 0.2135    
Accumulated time: pickout 0.0004    decision 0.5188    set_bounds 0.0094    solve 0.1184    add 0.2135    
Current (lb-rhs): -0.20197224617004395
50 domains visited
Cumulative time: 0.9547791481018066

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 11] [/input-12, 11] [/input-12, 33] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 11] [/input-12, 41] [/input-12, 41] [/input-12, 51] [/input-12, 11] [/input-12, 51] [/input-12, 51] [/input-12, 41] [/input-12, 51] [/input-12, 51] 
split level 2: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 51] [/input-12, 41] [/input-12, 41] 
split level 3: [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19380038976669312
10 lb beta sum: 0.5672595500946045, worst -0.18613708019256592
Time: prepare 0.0101    bound 0.1213    transfer 0.0007    finalize 0.0026    func 0.1374    
Accumulated time: func 0.3096    prepare 0.0322    bound 0.2739    transfer 0.0025    finalize 0.0059    
all_split False
======================Cut inference begins======================
max lb tensor(0.22112447) min lb tensor(-0.18612146)
Number of Verified Splits: 75 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.017096996307373047 
BICCOS Cumulative time: 0.027645587921142578
Preprocessing time: 0.011871814727783203 Inference time: 0.0027000904083251953 Add cuts time: 0.002011537551879883 Cut analysis time: 0.0005135536193847656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04529 (2), -0.04510 (2), -0.04461 (2), -0.04389 (2), -0.04372 (2), -0.04219 (2), -0.04216 (2), -0.04171 (2), -0.04116 (2), -0.04091 (2), -0.04036 (2), -0.03993 (2), -0.03971 (2), -0.03957 (2), -0.03933 (2), -0.03910 (2), -0.03808 (2), -0.03698 (2), -0.03680 (2), -0.03637 (2), 
Length of domains: 50
Time: pickout 0.0084    decision 0.0233    set_bounds 0.0126    solve 0.1375    add 0.2182    
Accumulated time: pickout 0.0087    decision 0.5421    set_bounds 0.0219    solve 0.2559    add 0.4316    
Current (lb-rhs): -0.045287251472473145
100 domains visited
Cumulative time: 1.3788161277770996

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 41] [/input-12, 51] [/input-12, 41] 
split level 2: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 51] [/input-12, 41] [/input-12, 13] 
split level 3: [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 45] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05325806140899658
10 lb beta sum: 1.2031506299972534, worst -0.08399352431297302
Time: prepare 0.0076    bound 0.1485    transfer 0.0008    finalize 0.0024    func 0.1627    
Accumulated time: func 0.4723    prepare 0.0401    bound 0.4224    transfer 0.0033    finalize 0.0083    
all_split False
======================Cut inference begins======================
max lb tensor(0.50066739) min lb tensor(-0.02560955)
Number of Verified Splits: 383 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.03800797462463379 
BICCOS Cumulative time: 0.06565356254577637
Preprocessing time: 0.012195825576782227 Inference time: 0.015476226806640625 Add cuts time: 0.009855508804321289 Cut analysis time: 0.00048041343688964844
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0079    decision 0.0200    set_bounds 0.0158    solve 0.1628    add 0.0199    
Accumulated time: pickout 0.0167    decision 0.5620    set_bounds 0.0378    solve 0.4187    add 0.4515    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] 
split level 1: [/input-12, 1] 
split level 2: [/input-12, 11] 
split level 3: [/input-12, 51] 
split level 4: [/input-12, 41] 
split level 5: [/input-12, 13] 
split level 6: [/input-12, 45] 
split level 7: [/input-12, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09113085269927979
10 lb beta sum: 0.11359208822250366, worst -0.09462183713912964
Time: prepare 0.0037    bound 0.1297    transfer 0.0006    finalize 0.0018    func 0.1375    
Accumulated time: func 0.6097    prepare 0.0445    bound 0.5521    transfer 0.0039    finalize 0.0101    
all_split False
======================Cut inference begins======================
max lb tensor(0.42673856) min lb tensor(-0.08743328)
Number of Verified Splits: 248 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17006433010101318
10 lb beta sum: 0.8501346707344055, worst -0.13043749332427979
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 14
#cuts 4-6: 1
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.2731595039367676 
BICCOS Cumulative time: 0.33881306648254395
Preprocessing time: 0.006573200225830078 Inference time: 0.2613945007324219 Add cuts time: 0.0046312808990478516 Cut analysis time: 0.0005605220794677734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08743 (8), -0.08520 (8), -0.04541 (8), -0.04432 (8), -0.02999 (8), -0.02773 (8), -0.02299 (8), -0.01790 (8), 
Length of domains: 8
Time: pickout 0.0005    decision 0.0227    set_bounds 0.0170    solve 0.1375    add 0.0397    
Accumulated time: pickout 0.0171    decision 0.5847    set_bounds 0.0548    solve 0.5562    add 0.4912    
Current (lb-rhs): -0.08743327856063843
108 domains visited
Cumulative time: 2.153852939605713

BaB round 2
batch: 8
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 850] [/input-8, 850] [/input-8, 850] 
split level 1: [/input-8, 92] [/input-8, 92] [/input-8, 117] [/input-8, 1909] [/input-8, 117] [/input-8, 1308] [/input-8, 92] [/input-8, 92] 
split level 2: [/input-8, 483] [/input-8, 483] [/input-8, 92] [/input-8, 483] [/input-8, 1909] [/input-8, 1909] [/input-8, 484] [/input-8, 484] 
split level 3: [/input-8, 94] [/input-8, 94] [/input-8, 1909] [/input-8, 94] [/input-8, 92] [/input-8, 483] [/input-8, 654] [/input-8, 654] 
split level 4: [/input-8, 1468] [/input-8, 1468] [/input-8, 483] [/input-8, 484] [/input-8, 620] [/input-8, 94] [/input-8, 620] [/input-8, 620] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06404131650924683
10 lb beta sum: 0.1726442128419876, worst -0.06042003631591797
Time: prepare 0.0049    bound 0.1308    transfer 0.0005    finalize 0.0014    func 0.1394    
Accumulated time: func 0.7491    prepare 0.0498    bound 0.6830    transfer 0.0044    finalize 0.0114    
all_split False
======================Cut inference begins======================
max lb tensor(0.04152566) min lb tensor(-0.06031469)
Number of Verified Splits: 173 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1290658712387085
10 lb beta sum: 1.0041732788085938, worst -0.08726632595062256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 73.
#cuts 1-3: 14
#cuts 4-6: 1
#cuts 7-9: 56
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.2779734134674072 
BICCOS Cumulative time: 0.6167864799499512
Preprocessing time: 0.007757425308227539 Inference time: 0.2543022632598877 Add cuts time: 0.012073040008544922 Cut analysis time: 0.0038406848907470703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06031 (13), -0.05717 (13), -0.05716 (13), -0.05603 (13), -0.05575 (13), -0.05475 (13), -0.05402 (13), -0.05390 (13), -0.05287 (13), -0.05284 (13), -0.05223 (13), -0.05190 (13), -0.05124 (13), -0.05108 (13), -0.05045 (13), -0.04996 (13), -0.04968 (13), -0.04846 (13), -0.04846 (13), -0.04785 (13), 
Length of domains: 83
Time: pickout 0.0013    decision 0.0187    set_bounds 0.0140    solve 0.1395    add 0.0768    
Accumulated time: pickout 0.0185    decision 0.6034    set_bounds 0.0688    solve 0.6957    add 0.5680    
Current (lb-rhs): -0.060314685106277466
191 domains visited
Cumulative time: 2.6904611587524414

BaB round 3
batch: 83
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 850] [/input-8, 92] [/input-8, 850] [/input-8, 92] [/input-8, 1453] [/input-8, 1453] [/input-8, 850] [/input-8, 92] [/input-8, 850] [/input-8, 92] 
split level 1: [/input-8, 92] [/input-8, 654] [/input-8, 92] [/input-8, 654] [/input-8, 654] [/input-8, 654] [/input-8, 92] [/input-8, 484] [/input-8, 92] [/input-8, 484] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05326807498931885
10 lb beta sum: 0.32211071252822876, worst -0.04979094862937927
Time: prepare 0.0066    bound 0.1391    transfer 0.0047    finalize 0.0017    func 0.1543    
Accumulated time: func 0.9035    prepare 0.0566    bound 0.8220    transfer 0.0092    finalize 0.0131    
all_split False
======================Cut inference begins======================
max lb tensor(0.01254797) min lb tensor(-0.04967839)
Number of Verified Splits: 100 of 332
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 61.
#cuts 1-3: 14
#cuts 4-6: 2
#cuts 7-9: 43
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.030645132064819336 
BICCOS Cumulative time: 0.6474316120147705
Preprocessing time: 0.010279417037963867 Inference time: 0.010538816452026367 Add cuts time: 0.00667119026184082 Cut analysis time: 0.0031557083129882812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04968 (15), -0.04888 (15), -0.04740 (15), -0.04628 (15), -0.04609 (15), -0.04547 (15), -0.04525 (15), -0.04510 (15), -0.04435 (15), -0.04410 (15), -0.04403 (15), -0.04269 (15), -0.04245 (15), -0.04240 (15), -0.04220 (15), -0.04175 (15), -0.04153 (15), -0.04152 (15), -0.04094 (15), -0.04036 (15), 
Length of domains: 232
Time: pickout 0.0143    decision 0.0186    set_bounds 0.0158    solve 0.1544    add 0.0763    
Accumulated time: pickout 0.0328    decision 0.6220    set_bounds 0.0846    solve 0.8502    add 0.6443    
Current (lb-rhs): -0.04967838525772095
423 domains visited
Cumulative time: 3.009093761444092

BaB round 4
batch: 232
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 654] [/input-8, 979] [/input-8, 979] [/input-8, 654] [/input-8, 979] [/input-8, 654] [/input-8, 979] [/input-8, 979] [/input-8, 654] [/input-8, 979] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04767346382141113
10 lb beta sum: 0.37254151701927185, worst -0.044215887784957886
Time: prepare 0.0108    bound 0.1681    transfer 0.0030    finalize 0.0028    func 0.1879    
Accumulated time: func 1.0914    prepare 0.0676    bound 0.9901    transfer 0.0122    finalize 0.0159    
all_split False
======================Cut inference begins======================
max lb tensor(0.01083139) min lb tensor(-0.04410315)
Number of Verified Splits: 62 of 464
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 66.
#cuts 1-3: 14
#cuts 4-6: 8
#cuts 7-9: 42
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.0341646671295166 
BICCOS Cumulative time: 0.6815962791442871
Preprocessing time: 0.015012979507446289 Inference time: 0.007849454879760742 Add cuts time: 0.007616758346557617 Cut analysis time: 0.003685474395751953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04410 (16), -0.04356 (16), -0.04205 (16), -0.04141 (16), -0.04094 (16), -0.04054 (16), -0.04049 (16), -0.03991 (16), -0.03954 (16), -0.03949 (16), -0.03945 (16), -0.03932 (16), -0.03897 (16), -0.03858 (16), -0.03838 (16), -0.03833 (16), -0.03779 (16), -0.03730 (16), -0.03722 (16), -0.03715 (16), 
Length of domains: 402
Time: pickout 0.0135    decision 0.0311    set_bounds 0.2536    solve 0.1881    add 0.0887    
Accumulated time: pickout 0.0463    decision 0.6531    set_bounds 0.3383    solve 1.0383    add 0.7330    
Current (lb-rhs): -0.044103145599365234
825 domains visited
Cumulative time: 3.627821683883667

BaB round 5
batch: 402
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 979] [/input-8, 484] [/input-8, 484] [/input-8, 979] [/input-8, 654] [/input-8, 484] [/input-8, 484] [/input-8, 475] [/input-8, 654] [/input-8, 979] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04164940118789673
10 lb beta sum: 0.3774372637271881, worst -0.03822776675224304
Time: prepare 0.0168    bound 0.1493    transfer 0.0015    finalize 0.0037    func 0.1768    
Accumulated time: func 1.2682    prepare 0.0849    bound 1.1395    transfer 0.0137    finalize 0.0196    
all_split False
======================Cut inference begins======================
max lb tensor(0.01037341) min lb tensor(-0.03821510)
Number of Verified Splits: 111 of 804
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 69.
#cuts 1-3: 15
#cuts 4-6: 9
#cuts 7-9: 43
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.0516660213470459 
BICCOS Cumulative time: 0.733262300491333
Preprocessing time: 0.024529695510864258 Inference time: 0.015514373779296875 Add cuts time: 0.008183956146240234 Cut analysis time: 0.0034379959106445312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03822 (17), -0.03766 (17), -0.03729 (17), -0.03691 (17), -0.03582 (17), -0.03560 (17), -0.03539 (17), -0.03525 (17), -0.03500 (17), -0.03456 (17), -0.03455 (17), -0.03413 (17), -0.03403 (17), -0.03365 (17), -0.03362 (17), -0.03354 (17), -0.03348 (17), -0.03312 (17), -0.03309 (17), -0.03295 (17), 
Length of domains: 693
Time: pickout 0.0204    decision 0.0391    set_bounds 0.0391    solve 0.1771    add 0.1200    
Accumulated time: pickout 0.0667    decision 0.6923    set_bounds 0.3773    solve 1.2154    add 0.8529    
Current (lb-rhs): -0.03821510076522827
1518 domains visited
Cumulative time: 4.083695888519287

BaB round 6
batch: 693
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 475] [/input-8, 475] [/input-8, 475] [/input-8, 475] [/input-8, 979] [/input-8, 475] [/input-8, 475] [/input-8, 475] [/input-8, 475] [/input-8, 475] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.035872817039489746
10 lb beta sum: 0.35386455059051514, worst -0.03249388933181763
Time: prepare 0.0289    bound 0.2019    transfer 0.0069    finalize 0.0093    func 0.2564    
Accumulated time: func 1.5246    prepare 0.1141    bound 1.3414    transfer 0.0206    finalize 0.0290    
all_split False
======================Cut inference begins======================
max lb tensor(0.01119918) min lb tensor(-0.03244162)
Number of Verified Splits: 392 of 1386
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 64.
#cuts 1-3: 18
#cuts 4-6: 6
#cuts 7-9: 38
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.11720705032348633 
BICCOS Cumulative time: 0.8504693508148193
Preprocessing time: 0.04573202133178711 Inference time: 0.05626416206359863 Add cuts time: 0.011761665344238281 Cut analysis time: 0.0034492015838623047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03244 (18), -0.03200 (18), -0.03169 (18), -0.03164 (18), -0.03124 (18), -0.03124 (18), -0.03052 (18), -0.03011 (18), -0.02957 (18), -0.02954 (18), -0.02939 (18), -0.02931 (18), -0.02929 (18), -0.02922 (18), -0.02897 (18), -0.02892 (18), -0.02890 (18), -0.02877 (18), -0.02855 (18), -0.02848 (18), 
Length of domains: 994
Time: pickout 0.0842    decision 0.0589    set_bounds 0.0661    solve 0.2570    add 0.0651    
Accumulated time: pickout 0.1509    decision 0.7511    set_bounds 0.4434    solve 1.4725    add 0.9181    
Current (lb-rhs): -0.03244161605834961
2512 domains visited
Cumulative time: 4.739559888839722

BaB round 7
batch: 994
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1468] [/input-8, 878] [/input-8, 878] [/input-8, 1468] [/input-8, 878] [/input-8, 878] [/input-8, 878] [/input-8, 878] [/input-8, 1468] [/input-8, 1468] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03239083290100098
10 lb beta sum: 0.3788052797317505, worst -0.029034584760665894
Time: prepare 0.0431    bound 0.1794    transfer 0.0036    finalize 0.0100    func 0.2495    
Accumulated time: func 1.7741    prepare 0.1575    bound 1.5208    transfer 0.0242    finalize 0.0389    
all_split False
======================Cut inference begins======================
max lb tensor(0.01217419) min lb tensor(-0.02896309)
Number of Verified Splits: 543 of 1988
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 65.
#cuts 1-3: 16
#cuts 4-6: 14
#cuts 7-9: 33
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.17052292823791504 
BICCOS Cumulative time: 1.0209922790527344
Preprocessing time: 0.07027626037597656 Inference time: 0.08095192909240723 Add cuts time: 0.015654563903808594 Cut analysis time: 0.0036401748657226562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02896 (19), -0.02837 (19), -0.02820 (19), -0.02812 (19), -0.02771 (19), -0.02762 (19), -0.02698 (19), -0.02673 (19), -0.02658 (19), -0.02634 (19), -0.02607 (19), -0.02597 (19), -0.02590 (19), -0.02587 (19), -0.02584 (19), -0.02580 (19), -0.02559 (19), -0.02559 (19), -0.02554 (19), -0.02546 (19), 
Length of domains: 1445
Time: pickout 0.0197    decision 0.0714    set_bounds 0.0967    solve 0.2500    add 0.0967    
Accumulated time: pickout 0.1706    decision 0.8226    set_bounds 0.5402    solve 1.7225    add 1.0147    
Current (lb-rhs): -0.028963088989257812
3957 domains visited
Cumulative time: 5.458363056182861

BaB round 8
batch: 1445
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 117] [/input-8, 117] [/input-8, 117] [/input-8, 117] [/input-8, 117] [/input-8, 117] [/input-8, 117] [/input-8, 117] [/input-8, 117] [/input-8, 878] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03036397695541382
10 lb beta sum: 0.3522580862045288, worst -0.03824561834335327
Time: prepare 0.0641    bound 0.2347    transfer 0.0172    finalize 0.0160    func 0.3523    
Accumulated time: func 2.1264    prepare 0.2219    bound 1.7555    transfer 0.0414    finalize 0.0550    
all_split False
======================Cut inference begins======================
max lb tensor(0.31986594) min lb tensor(-0.02688938)
Number of Verified Splits: 1612 of 2890
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 50.
#cuts 1-3: 22
#cuts 4-6: 5
#cuts 7-9: 21
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.35698795318603516 
BICCOS Cumulative time: 1.3779802322387695
Preprocessing time: 0.09430432319641113 Inference time: 0.23739361763000488 Add cuts time: 0.02252483367919922 Cut analysis time: 0.002765178680419922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02689 (20), -0.02629 (20), -0.02613 (20), -0.02610 (20), -0.02564 (20), -0.02554 (20), -0.02491 (20), -0.02473 (20), -0.02450 (20), -0.02433 (20), -0.02397 (20), -0.02396 (20), -0.02393 (20), -0.02384 (20), -0.02376 (20), -0.02370 (20), -0.02357 (20), -0.02356 (20), -0.02347 (20), -0.02326 (20), 
Length of domains: 1278
Time: pickout 0.0405    decision 0.3226    set_bounds 0.1386    solve 0.3533    add 0.1240    
Accumulated time: pickout 0.2111    decision 1.1451    set_bounds 0.6788    solve 2.0758    add 1.1387    
Current (lb-rhs): -0.026889383792877197
5235 domains visited
Cumulative time: 6.819664001464844

BaB round 9
batch: 1278
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 620] [/input-8, 878] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026481032371520996
10 lb beta sum: 0.38917505741119385, worst -0.03804820775985718
Time: prepare 0.0578    bound 0.2184    transfer 0.0122    finalize 0.0161    func 0.3227    
Accumulated time: func 2.4491    prepare 0.2801    bound 1.9739    transfer 0.0536    finalize 0.0711    
all_split False
======================Cut inference begins======================
max lb tensor(0.47891983) min lb tensor(-0.02312726)
Number of Verified Splits: 1452 of 2556
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 19
#cuts 4-6: 3
#cuts 7-9: 11
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.31545519828796387 
BICCOS Cumulative time: 1.6934354305267334
Preprocessing time: 0.08309459686279297 Inference time: 0.21353769302368164 Add cuts time: 0.01725912094116211 Cut analysis time: 0.0015637874603271484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02313 (21), -0.02259 (21), -0.02245 (21), -0.02233 (21), -0.02203 (21), -0.02171 (21), -0.02146 (21), -0.02098 (21), -0.02092 (21), -0.02051 (21), -0.02043 (21), -0.02020 (21), -0.02018 (21), -0.02009 (21), -0.02005 (21), -0.01998 (21), -0.01996 (21), -0.01975 (21), -0.01957 (21), -0.01945 (21), 
Length of domains: 1104
Time: pickout 0.0883    decision 0.0862    set_bounds 0.3564    solve 0.3234    add 0.0860    
Accumulated time: pickout 0.2993    decision 1.2314    set_bounds 1.0352    solve 2.3992    add 1.2247    
Current (lb-rhs): -0.023127257823944092
6339 domains visited
Cumulative time: 8.097705602645874

BaB round 10
batch: 1104
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 878] [/input-8, 878] [/input-8, 620] [/input-8, 485] [/input-8, 878] [/input-8, 620] [/input-8, 485] [/input-8, 485] [/input-8, 878] [/input-8, 878] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023760855197906494
10 lb beta sum: 0.4374445974826813, worst -0.020450353622436523
Time: prepare 0.0459    bound 0.1913    transfer 0.0080    finalize 0.0118    func 0.2728    
Accumulated time: func 2.7219    prepare 0.3262    bound 2.1652    transfer 0.0616    finalize 0.0829    
all_split False
======================Cut inference begins======================
max lb tensor(0.46790585) min lb tensor(-0.02042848)
Number of Verified Splits: 1203 of 2208
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.2625880241394043 
BICCOS Cumulative time: 1.9560234546661377
Preprocessing time: 0.0713496208190918 Inference time: 0.17987942695617676 Add cuts time: 0.011078357696533203 Cut analysis time: 0.00028061866760253906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02043 (22), -0.01994 (22), -0.01964 (22), -0.01957 (22), -0.01917 (22), -0.01883 (22), -0.01880 (22), -0.01768 (22), -0.01751 (22), -0.01751 (22), -0.01738 (22), -0.01730 (22), -0.01725 (22), -0.01698 (22), -0.01688 (22), -0.01680 (22), -0.01674 (22), -0.01672 (22), -0.01659 (22), -0.01652 (22), 
Length of domains: 1005
Time: pickout 0.0170    decision 0.0745    set_bounds 0.1001    solve 0.2733    add 0.1147    
Accumulated time: pickout 0.3164    decision 1.3059    set_bounds 1.1353    solve 2.6725    add 1.3394    
Current (lb-rhs): -0.020428478717803955
7344 domains visited
Cumulative time: 8.962274074554443

BaB round 11
batch: 1005
splitting decisions: 
split level 0: [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018536090850830078

all verified at 1th iter
Time: prepare 0.0444    bound 0.0230    transfer 0.0035    finalize 0.0122    func 0.0970    
Accumulated time: func 2.8188    prepare 0.3709    bound 2.1881    transfer 0.0652    finalize 0.0951    
all_split False
======================Cut inference begins======================
max lb tensor(0.05385886) min lb tensor(3.33786011e-06)
Number of Verified Splits: 2010 of 2010
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.06592440605163574 
BICCOS Cumulative time: 2.0219478607177734
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0764    decision 0.0702    set_bounds 0.3639    solve 0.0978    add 0.0005    
Accumulated time: pickout 0.3927    decision 1.3761    set_bounds 1.4992    solve 2.7703    add 1.3399    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
7344 domains visited
Cumulative time: 9.650140047073364


Properties batch 4, size 1
Remaining timeout: 188.44371819496155
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 188.44361352920532
Verifying property 5 with 1 instances.
##### Instance 42 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.18405604]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.23514986, -9.22857761, -3.75808716, -3.27435327, -4.29405165,
        -3.58545446, -2.41056466, -6.29414511, -6.66572762, -8.34386063],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.18405604]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 590
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 242
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 853
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00012755393981933594
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1840551495552063
10 lb beta sum: 0.0, worst -0.18407106399536133
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0560    transfer 0.0001    finalize 0.0002    func 0.0565    
Accumulated time: func 0.0565    prepare 0.0002    bound 0.0560    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] 
split level 1: [/input-12, 41] 
split level 2: [/input-12, 51] 
split level 3: [/input-12, 11] 
split level 4: [/input-12, 13] 
split level 5: [/input-8, 109] 
split level 6: [/input-12, 45] 
split level 7: [/input-8, 476] 
split level 8: [/input-12, 1] 
split level 9: [/input-8, 1940] 
split level 10: [/input-8, 483] 
split level 11: [/input-8, 92] 
split level 12: [/input-8, 850] 
split level 13: [/input-8, 540] 
split level 14: [/input-8, 1308] 
split level 15: [/input-8, 1939] 
split level 16: [/input-8, 525] 
split level 17: [/input-8, 1909] 
split level 18: [/input-8, 475] 
split level 19: [/input-8, 869] 
split level 20: [/input-8, 1461] 
split level 21: [/input-8, 1453] 
split level 22: [/input, 325] 
split level 23: [/input-8, 1389] 
split level 24: [/input-8, 91] 
split level 25: [/input, 3432] 
split level 26: [/input-8, 484] 
split level 27: [/input-8, 971] 
split level 28: [/input-8, 307] 
split level 29: [/input-8, 981] 
split level 30: [/input-8, 485] 
split level 31: [/input-8, 1828] 
split level 32: [/input-8, 1298] 
split level 33: [/input-8, 117] 
split level 34: [/input-8, 1345] 
split level 35: [/input-8, 989] 
split level 36: [/input-8, 530] 
split level 37: [/input-8, 309] 
split level 38: [/input, 3399] 
split level 39: [/input-8, 1468] 
split level 40: [/input-8, 428] 
split level 41: [/input-8, 878] 
split level 42: [/input-8, 427] 
split level 43: [/input-8, 94] 
split level 44: [/input-8, 977] 
split level 45: [/input, 1366] 
split level 46: [/input-8, 826] 
split level 47: [/input-8, 1142] 
split level 48: [/input-8, 923] 
split level 49: [/input-8, 1527] 
split level 50: [/input-8, 486] 
split level 51: [/input-8, 654] 
split level 52: [/input-8, 1390] 
split level 53: [/input, 2135] 
split level 54: [/input-8, 985] 
split level 55: [/input-8, 867] 
split level 56: [/input-8, 1523] 
split level 57: [/input-8, 979] 
split level 58: [/input-8, 103] 
split level 59: [/input-8, 828] 
split level 60: [/input-8, 507] 
split level 61: [/input-8, 624] 
split level 62: [/input-8, 310] 
split level 63: [/input, 3417] 
split level 64: [/input-8, 1237] 
split level 65: [/input-8, 1467] 
split level 66: [/input, 391] 
split level 67: [/input-8, 620] 
split level 68: [/input-8, 1903] 
split level 69: [/input, 2117] 
split level 70: [/input-8, 1247] 
split level 71: [/input-8, 1446] 
split level 72: [/input-8, 522] 
split level 73: [/input-8, 1381] 
split level 74: [/input-8, 1771] 
split level 75: [/input-8, 1324] 
split level 76: [/input-8, 1835] 
split level 77: [/input-8, 1254] 
split level 78: [/input-8, 997] 
split level 79: [/input-8, 1457] 
split level 80: [/input-8, 998] 
split level 81: [/input-8, 124] 
split level 82: [/input-8, 75] 
split level 83: [/input-8, 1348] 
split level 84: [/input-8, 1421] 
split level 85: [/input, 369] 
split level 86: [/input-8, 1433] 
split level 87: [/input-8, 506] 
split level 88: [/input, 355] 
split level 89: [/input-8, 86] 
split level 90: [/input-8, 1246] 
split level 91: [/input, 1382] 
split level 92: [/input-8, 1837] 
split level 93: [/input-8, 1071] 
split level 94: [/input-8, 1255] 
split level 95: [/input-8, 922] 
split level 96: [/input, 1334] 
split level 97: [/input-8, 113] 
split level 98: [/input-8, 487] 
split level 99: [/input-8, 827] 
split level 100: [/input-8, 1347] 
split level 101: [/input, 1352] 
split level 102: [/input-8, 541] 
split level 103: [/input-8, 1844] 
split level 104: [/input, 1350] 
split level 105: [/input-8, 435] 
split level 106: [/input-8, 2035] 
split level 107: [/input, 406] 
split level 108: [/input-8, 524] 
split level 109: [/input-8, 2036] 
split level 110: [/input, 3510] 
split level 111: [/input, 3960] 
split level 112: [/input-8, 862] 
split level 113: [/input-8, 1437] 
split level 114: [/input, 1333] 
split level 115: [/input-8, 1904] 
split level 116: [/input, 316] 
split level 117: [/input-8, 1323] 
split level 118: [/input-8, 1838] 
split level 119: [/input-8, 887] 
split level 120: [/input, 3127] 
split level 121: [/input, 32] 
split level 122: [/input, 309] 
split level 123: [/input-8, 1816] 
split level 124: [/input, 2802] 
split level 125: [/input-8, 1009] 
split level 126: [/input-8, 505] 
split level 127: [/input-8, 1076] 
split level 128: [/input-8, 415] 
split level 129: [/input-8, 477] 
split level 130: [/input-8, 1440] 
split level 131: [/input-8, 602] 
split level 132: [/input, 1751] 
split level 133: [/input-8, 1736] 
split level 134: [/input, 4045] 
split level 135: [/input, 1960] 
split level 136: [/input, 2376] 
split level 137: [/input, 1093] 
split level 138: [/input-8, 83] 
split level 139: [/input, 2098] 
split level 140: [/input, 1396] 
split level 141: [/input-8, 1936] 
split level 142: [/input-8, 125] 
split level 143: [/input-8, 74] 
split level 144: [/input, 2840] 
split level 145: [/input-8, 1551] 
split level 146: [/input, 3329] 
split level 147: [/input, 1401] 
split level 148: [/input, 439] 
split level 149: [/input-8, 1406] 
split level 150: [/input, 1603] 
split level 151: [/input, 3493] 
split level 152: [/input, 3913] 
split level 153: [/input-8, 1442] 
split level 154: [/input, 1708] 
split level 155: [/input, 404] 
split level 156: [/input-8, 1983] 
split level 157: [/input-8, 1023] 
split level 158: [/input, 2103] 
split level 159: [/input, 3368] 
split level 160: [/input-8, 2044] 
split level 161: [/input-8, 573] 
split level 162: [/input, 2342] 
split level 163: [/input, 2857] 
split level 164: [/input, 3474] 
split level 165: [/input, 3330] 
split level 166: [/input, 1949] 
split level 167: [/input, 2091] 
split level 168: [/input, 1963] 
split level 169: [/input, 1725] 
split level 170: [/input, 3607] 
split level 171: [/input, 4090] 
split level 172: [/input, 1961] 
split level 173: [/input-8, 1754] 
split level 174: [/input-8, 840] 
split level 175: [/input, 1371] 
split level 176: [/input, 3371] 
split level 177: [/input, 506] 
split level 178: [/input, 1347] 
split level 179: [/input, 1416] 
split level 180: [/input, 3356] 
split level 181: [/input, 4013] 
split level 182: [/input, 174] 
split level 183: [/input-8, 876] 
split level 184: [/input-8, 2038] 
split level 185: [/input, 3345] 
split level 186: [/input, 595] 
split level 187: [/input-8, 1235] 
split level 188: [/input, 1964] 
split level 189: [/input, 3908] 
split level 190: [/input-8, 958] 
split level 191: [/input, 3022] 
split level 192: [/input, 2962] 
split level 193: [/input, 3927] 
split level 194: [/input, 3642] 
split level 195: [/input, 3677] 
split level 196: [/input-8, 1427] 
split level 197: [/input, 2360] 
split level 198: [/input, 2024] 
split level 199: [/input, 2841] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18401235342025757
10 lb beta sum: 0.0, worst -0.18400686979293823
Time: prepare 0.0119    bound 0.1030    transfer 0.0012    finalize 0.0032    func 0.1220    
Accumulated time: func 0.1785    prepare 0.0226    bound 0.1589    transfer 0.0014    finalize 0.0034    
all_split False
======================Cut inference begins======================
max lb tensor(0.32173485) min lb tensor(-0.18399507)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.011035680770874023 
BICCOS Cumulative time: 0.011035680770874023
Preprocessing time: 0.010530233383178711 Inference time: 0.0001671314239501953 Add cuts time: 7.653236389160156e-05 Cut analysis time: 0.0002617835998535156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16753 (1), -0.16741 (1), -0.16696 (1), -0.16671 (1), -0.16660 (1), -0.16613 (1), -0.16595 (1), -0.16589 (1), -0.16554 (1), -0.16499 (1), -0.16489 (1), -0.16403 (1), -0.16268 (1), -0.16204 (1), -0.16174 (1), -0.16149 (1), -0.16056 (1), -0.16009 (1), -0.15985 (1), -0.15935 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5250    set_bounds 0.0096    solve 0.1221    add 0.2131    
Accumulated time: pickout 0.0004    decision 0.5250    set_bounds 0.0096    solve 0.1221    add 0.2131    
Current (lb-rhs): -0.1675337553024292
50 domains visited
Cumulative time: 0.9643728733062744

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 51] [/input-12, 11] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 11] 
split level 3: [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 11] [/input-12, 13] [/input-12, 13] [/input-12, 51] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15656179189682007
10 lb beta sum: 0.5283018946647644, worst -0.14284735918045044
Time: prepare 0.0078    bound 0.1238    transfer 0.0008    finalize 0.0028    func 0.1380    
Accumulated time: func 0.3164    prepare 0.0306    bound 0.2827    transfer 0.0022    finalize 0.0062    
all_split False
======================Cut inference begins======================
max lb tensor(0.44184697) min lb tensor(-0.14284073)
Number of Verified Splits: 154 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.021409034729003906 
BICCOS Cumulative time: 0.03244471549987793
Preprocessing time: 0.012322425842285156 Inference time: 0.006412029266357422 Add cuts time: 0.002275705337524414 Cut analysis time: 0.00039887428283691406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05340 (2), -0.05326 (2), -0.05314 (2), -0.05306 (2), -0.05295 (2), -0.05276 (2), -0.05259 (2), -0.05228 (2), -0.05155 (2), -0.05150 (2), -0.05148 (2), -0.05140 (2), -0.05122 (2), -0.05063 (2), -0.05019 (2), -0.05009 (2), -0.05005 (2), -0.04971 (2), -0.04888 (2), -0.04886 (2), 
Length of domains: 50
Time: pickout 0.0120    decision 0.0204    set_bounds 0.0133    solve 0.1381    add 0.2275    
Accumulated time: pickout 0.0124    decision 0.5455    set_bounds 0.0229    solve 0.2602    add 0.4406    
Current (lb-rhs): -0.05339890718460083
100 domains visited
Cumulative time: 1.404463291168213

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 51] [/input-12, 11] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 11] [/input-12, 51] [/input-12, 51] 
split level 3: [/input-12, 11] [/input-12, 51] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 51] [/input-12, 11] [/input-12, 11] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08483284711837769
10 lb beta sum: 0.9790363907814026, worst -0.03001958131790161
Time: prepare 0.0077    bound 0.1391    transfer 0.0013    finalize 0.0028    func 0.1535    
Accumulated time: func 0.4700    prepare 0.0386    bound 0.4218    transfer 0.0035    finalize 0.0090    
all_split False
======================Cut inference begins======================
max lb tensor(0.45079899) min lb tensor(-0.02982444)
Number of Verified Splits: 363 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 34
#cuts >= 20: 0
BICCOS time: 0.037976741790771484 
BICCOS Cumulative time: 0.07042145729064941
Preprocessing time: 0.012039661407470703 Inference time: 0.014397144317626953 Add cuts time: 0.010771036148071289 Cut analysis time: 0.0007688999176025391
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02777 (3), -0.02776 (3), -0.02776 (3), -0.02775 (3), -0.02775 (3), -0.02775 (3), -0.01186 (3), -0.01185 (3), -0.00451 (3), -0.00451 (3), -0.00450 (3), -0.00449 (3), -0.00446 (3), -0.00445 (3), -0.00444 (3), -0.00442 (3), 
Length of domains: 16
Time: pickout 0.0082    decision 0.0200    set_bounds 0.0170    solve 0.1537    add 0.2113    
Accumulated time: pickout 0.0206    decision 0.5654    set_bounds 0.0399    solve 0.4138    add 0.6519    
Current (lb-rhs): -0.02776515483856201
116 domains visited
Cumulative time: 1.8598003387451172

Shallow-BaB round 4
batch: 16
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 41] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 41] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 41] [/input-12, 11] [/input-12, 41] [/input-12, 11] [/input-12, 41] [/input-12, 11] [/input-12, 41] [/input-12, 11] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 11] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 11] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 11] [/input-12, 11] 
split level 3: [/input-8, 850] [/input-8, 1940] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 1940] [/input-8, 850] [/input-8, 1940] [/input-8, 1940] [/input-8, 1940] 
split level 4: [/input-8, 1940] [/input-8, 92] [/input-8, 1940] [/input-8, 1940] [/input-8, 1940] [/input-8, 92] [/input-8, 1940] [/input-8, 850] [/input-8, 483] [/input-8, 483] 
split level 5: [/input-8, 483] [/input-8, 850] [/input-8, 483] [/input-8, 483] [/input-8, 483] [/input-8, 850] [/input-8, 483] [/input-8, 483] [/input-8, 850] [/input-8, 850] 
split level 6: [/input-8, 92] [/input-8, 483] [/input-8, 92] [/input-8, 92] [/input-8, 92] [/input-8, 483] [/input-8, 92] [/input-8, 92] [/input-8, 92] [/input-8, 92] 
split level 7: [/input-8, 475] [/input-8, 475] [/input-8, 475] [/input-8, 1939] [/input-8, 475] [/input-8, 475] [/input-8, 475] [/input-8, 1939] [/input-8, 1939] [/input-8, 1939] 
split level 8: [/input-8, 1939] [/input-8, 1939] [/input-8, 1939] [/input-8, 475] [/input-8, 1939] [/input-8, 1939] [/input-8, 1939] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] 
split level 9: [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 475] [/input-8, 475] [/input-8, 475] 
split level 10: [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] 
split level 11: [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0759093165397644
10 lb beta sum: 3.49282169342041, worst -1.33514404296875e-05
Time: prepare 0.0073    bound 0.1614    transfer 0.0020    finalize 0.0028    func 0.1760    
Accumulated time: func 0.6460    prepare 0.0468    bound 0.5832    transfer 0.0054    finalize 0.0118    
all_split False
======================Cut inference begins======================
max lb tensor(0.47771442) min lb tensor(2.02655792e-06)
Number of Verified Splits: 384 of 384
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 38
#cuts >= 20: 0
BICCOS time: 0.04331088066101074 
BICCOS Cumulative time: 0.11373233795166016
Preprocessing time: 0.011836528778076172 Inference time: 0.017711639404296875 Add cuts time: 0.010560750961303711 Cut analysis time: 0.0032019615173339844
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0014    decision 0.0482    set_bounds 0.0142    solve 0.1762    add 0.0282    
Accumulated time: pickout 0.0220    decision 0.6137    set_bounds 0.0542    solve 0.5900    add 0.6801    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
116 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] 
split level 1: [/input-12, 41] 
split level 2: [/input-12, 51] 
split level 3: [/input-12, 11] 
split level 4: [/input-12, 13] 
split level 5: [/input-12, 45] 
split level 6: [/input-8, 483] 
split level 7: [/input-8, 475] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.004507124423980713

all verified at 0th iter
Time: prepare 0.0053    bound 0.0057    transfer 0.0014    finalize 0.0016    func 0.0157    
Accumulated time: func 0.6617    prepare 0.0529    bound 0.5889    transfer 0.0069    finalize 0.0134    
all_split False
======================Cut inference begins======================
max lb tensor(0.68409872) min lb tensor(0.00450712)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 38.
#cuts 1-3: 38
#cuts >= 20: 0
BICCOS time: 0.0073049068450927734 
BICCOS Cumulative time: 0.12103724479675293
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0005    decision 0.0243    set_bounds 0.0218    solve 0.0158    add 0.0003    
Accumulated time: pickout 0.0225    decision 0.6380    set_bounds 0.0759    solve 0.6058    add 0.6804    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
116 domains visited
Cumulative time: 2.255038261413574


Properties batch 6, size 1
Remaining timeout: 185.9664294719696
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 185.9663441181183
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 185.9661238193512
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 14.0340 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 43, vnnlib ID: 43 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.89999580, -8.55049229, -2.24591589, -3.50618315, -2.26213169,
         -3.34141207, -2.12596679, -3.44707155, -7.70838165, -6.43066359]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [559]; unstable size 559; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 276, 1, 559] with unstable size 275 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 559] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 559] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [275]; unstable size 275; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 275] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 275] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.40751815,  2.20469332, -2.32451987, -0.32005531, -2.33795714,
         -2.70371604, -1.07307470,  1.97626185,  0.69333458]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.89999580, -8.55049229, -2.24591589, -3.50618315, -2.26213169,
         -3.34141207, -2.12596679, -3.44707155, -7.70838165, -6.43066359]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.89999676, -8.55049229, -2.24591589, -3.50618315, -2.26213217,
          -3.34141254, -2.12596703, -3.44707155, -7.70838165, -6.43066359],
         [-5.89999676, -8.55049229, -2.24591589, -3.50618315, -2.26213217,
          -3.34141254, -2.12596703, -3.44707155, -7.70838165, -6.43066359]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.09549665,  0.16477060, -1.07928038, -1.21544552,  0.10565901]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1019 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 44, vnnlib ID: 44 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.03364277, -19.56793976, -11.80023479, -14.44734001, -11.96190071,
         -15.16267776, -13.56670475, -14.41914845, -17.25975418, -18.72661972]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [579]; unstable size 579; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 366, 1, 579] with unstable size 365 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 579] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 579] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [365]; unstable size 365; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 365] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 365] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.44665480,  4.78386021,  1.24888515, -0.92591453,  1.73357153,
          0.40172052,  0.80255318,  3.31306219,  4.20044708]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.03364277, -19.56793976, -11.80023479, -14.44734001, -11.96190071,
         -15.16267776, -13.56670475, -14.41914845, -17.25975418, -18.72661972]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.04666615, -19.50651550, -11.78564644, -14.38106823, -11.57203579,
          -15.05305195, -13.48137379, -14.08794785, -17.24640465, -18.64059067]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.21361065]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0072 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0761 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 45, vnnlib ID: 45 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.78477669, -6.78171825, -6.26888752, -6.35238361, -6.19891071,
         -6.76594496, -7.28494310, -7.20223379, -6.12016869, -6.41277218]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [523]; unstable size 523; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 523] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 523] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 523] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 203] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.61079025, -2.42233181, -2.06717396, -2.44244099, -1.87546444,
         -1.27228260, -1.18069935, -2.12183666, -1.19985151]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.78477669, -6.78171825, -6.26888752, -6.35238361, -6.19891071,
         -6.76594496, -7.28494310, -7.20223379, -6.12016869, -6.41277218]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.78477764, -6.78171730, -6.26888752, -6.35238314, -6.19891167,
          -6.76594448, -7.28494167, -7.20223379, -6.12016869, -6.41277170],
         [-6.78477764, -6.78171730, -6.26888752, -6.35238314, -6.19891167,
          -6.76594448, -7.28494167, -7.20223379, -6.12016869, -6.41277170]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.00306034, -0.51282978, -0.42933416, -0.58280563, -0.01577282,
           0.50322437,  0.42051649, -0.66154861, -0.36894560]]],
       device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         ...,


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0927 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 46, vnnlib ID: 46 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.35317993, -10.05822277,  -5.70741463,  -5.30954361,  -5.77602005,
          -5.75247955,  -5.90963793,  -7.28197336,  -9.95428562,  -8.67804050]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [767]; unstable size 767; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 280, 1, 767] with unstable size 279 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 767] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 767] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [279]; unstable size 279; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 279] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 279] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.12624156,  2.47288227, -1.31481647, -0.78547329, -1.26456094,
         -0.82690167,  0.44953924,  2.35486078,  1.43794250]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.35317993, -10.05822277,  -5.70741463,  -5.30954361,  -5.77602005,
          -5.75247955,  -5.90963793,  -7.28197336,  -9.95428562,  -8.67804050]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.35317993, -10.05822277,  -5.70741367,  -5.30954361,  -5.77602053,
           -5.75248098,  -5.90963840,  -7.28197336,  -9.95428562,  -8.67804050],
         [ -7.35317993, -10.05822277,  -5.70741367,  -5.30954361,  -5.77602053,
           -5.75248098,  -5.90963840,  -7.28197336,  -9.95428562,  -8.67804050]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04506731, -0.44293737,  0.02353954,  0.15715742]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]]]],
       device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0847 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 47, vnnlib ID: 47 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.96445751, -13.95264721, -11.88872242, -12.43732738, -11.28103065,
         -13.65725136, -13.27398205, -14.68500137,  -4.78945637, -13.98094654]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [407]; unstable size 407; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 136, 1, 407] with unstable size 135 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 407] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 407] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [135]; unstable size 135; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 135] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 135] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.02164268, 7.83872032, 5.93336391, 6.63180161, 5.40730762, 7.70184517,
         7.39634609, 8.62479019, 8.04601192]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0680 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 48, vnnlib ID: 48 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.38742971, -8.09583473, -4.17398930, -2.21849561, -4.56612682,
         -1.60451329, -3.84133196, -3.18707657, -8.22775269, -6.31927729]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [525]; unstable size 525; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 227, 1, 525] with unstable size 226 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 525] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 525] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [226]; unstable size 226; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 226] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 226] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.95492125, 4.49830723, 1.13714671, 0.18978083, 1.74934673, 0.88679516,
         0.59362930, 4.57968760, 2.70802259]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0717 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 49, vnnlib ID: 49 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.61658096,  -4.85169363, -11.21480465, -12.01975822, -10.98789406,
         -12.65254879, -10.85314465, -10.63402939,  -8.40850830,  -8.61452770]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [603]; unstable size 603; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 215, 1, 603] with unstable size 214 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 603] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 603] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [214]; unstable size 214; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 214] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 214] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.89015675, 3.85943222, 4.84163618, 3.92532873, 5.16841793, 3.74945831,
         3.27850199, 1.93241024, 2.38752627]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0678 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 50, vnnlib ID: 50 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.94205475, -17.04773521, -14.67247200, -15.90819740, -14.60353470,
         -15.82103157, -16.25810432, -18.06786919, -16.98810387, -17.41020012]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [822]; unstable size 822; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 822] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 822] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 822] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 272] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.36523795, -0.94602203, -2.17604685, -0.24087620, -2.33651733,
         -0.49621773,  0.76373565, -0.90574336, -0.11941862]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-14.94205475, -17.04773521, -14.67247200, -15.90819740, -14.60353470,
         -15.82103157, -16.25810432, -18.06786919, -16.98810387, -17.41020012]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.94205666, -17.04773521, -14.67247486, -15.90820122, -14.60353661,
          -15.82103348, -16.25810814, -18.06787491, -16.98810387, -17.41019821],
         [-14.94205666, -17.04773521, -14.67247486, -15.90820122, -14.60353661,
          -15.82103348, -16.25810814, -18.06787491, -16.98810387, -17.41019821]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.87897682,  1.22670174, -1.14855862,  0.08716774, -1.21749687,
           0.43707466,  1.16707039,  1.58916473]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         ...,


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0939 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 51, vnnlib ID: 51 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.99211121, -14.04107761,  -7.31353474,  -9.89678955,  -8.41009998,
         -10.75332451, -10.63476658, -14.15501976,  -8.49472427, -14.58970451]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [584]; unstable size 584; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 141, 1, 584] with unstable size 140 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 584] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 584] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [140]; unstable size 140; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 140] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 140] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.93474436, 0.60455751, 3.06741571, 1.66697335, 3.81926012, 3.66227555,
         7.25833178, 1.59742761, 7.46314812]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0732 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 52, vnnlib ID: 52 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.61421394, -9.33402538, -5.16767883, -2.64045858, -3.99503326,
         -2.02855682, -4.62166262, -4.60086203, -9.98200893, -8.04814816]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [560]; unstable size 560; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 560] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 560] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 560] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 249] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.83084607, 5.06325245, 1.78347659, 0.29397500, 0.66198206, 1.20087123,
         1.58306253, 5.80479670, 4.18816042]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0608 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 53, vnnlib ID: 53 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.78492880, -7.88765907, -5.16387463, -4.98481178, -5.33830261,
         -5.60749578, -4.95262003, -5.78874540, -8.26618099, -6.25775003]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [600]; unstable size 600; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 170, 1, 600] with unstable size 169 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 600] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 600] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [169]; unstable size 169; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 169] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 169] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.27218640,  1.68873811, -0.96977484, -0.89153802, -0.69919300,
         -0.37939477, -0.73812282,  2.16678548,  0.28935480]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.78492880, -7.88765907, -5.16387463, -4.98481178, -5.33830261,
         -5.60749578, -4.95262003, -5.78874540, -8.26618099, -6.25775003]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.78492785, -7.88765907, -5.16387367, -4.98481131, -5.33830214,
          -5.60749578, -4.95261955, -5.78874445, -8.26618099, -6.25774956],
         [-4.78492785, -7.88765907, -5.16387367, -4.98481131, -5.33830214,
          -5.60749578, -4.95261955, -5.78874445, -8.26618099, -6.25774956]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16769171,  0.21125412,  0.03219175,  0.38568258,  0.65487623,
           0.83612490]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0859 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 54, vnnlib ID: 54 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.60030365, -9.18505859, -6.79131508, -6.88497829, -7.22082901,
         -7.05521584, -7.65325308, -6.61295652, -4.71676254, -8.33832359]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [638]; unstable size 638; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 201, 1, 638] with unstable size 200 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 638] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 638] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 200] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.26122451,  2.70693874, -0.04236650,  0.30218816,  0.55264974,
          0.28326607,  0.97746253, -0.14264715,  2.10263610]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.60030365, -9.18505859, -6.79131508, -6.88497829, -7.22082901,
         -7.05521584, -7.65325308, -6.61295652, -4.71676254, -8.33832359]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.53it/s]100%|██████████| 1/1 [00:00<00:00,  7.52it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.18685913, -9.02146721, -6.04399967, -6.18254805, -6.46242762,
          -6.28525734, -6.96298456, -5.72760868, -4.99939823, -8.02779961],
         [-8.18685913, -9.02146721, -6.04399967, -6.18254805, -6.46242762,
          -6.28525734, -6.96298456, -5.72760868, -4.99939823, -8.02779961]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[1.04460144, 0.72821045]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1364 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 9.88985538482666
alpha/beta optimization time: 1.39878249168396
initial alpha-crown bounds: tensor([[ 2.37169147,  2.83057618,  0.08211279,  0.37143373,  0.65308642,
          0.37245917,  1.04918623, -0.03270340,  2.19201279]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.032703399658203125
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.3883922100067
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.38834714889526
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.38830590248108
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.388277053833
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.3882555961609
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.38823413848877
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.3882133960724
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.38818788528442
Verifying property 7 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03270340]], device='cuda:0') need to verify.
Model prediction is: tensor([-8.60030365, -9.18505859, -6.79131508, -6.88497829, -7.22082901,
        -7.05521584, -7.65325308, -6.61295652, -4.71676254, -8.33832359],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03270340]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 638
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 196
Node /15 input 0: size torch.Size([100]) unstable 20
-----------------
# of unstable neurons: 854
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010347366333007812
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03270316123962402
10 lb beta sum: 0.0, worst -0.03272902965545654
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0585    transfer 0.0001    finalize 0.0002    func 0.0590    
Accumulated time: func 0.0590    prepare 0.0002    bound 0.0585    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] 
split level 1: [/input-12, 18] 
split level 2: [/input-12, 36] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 51] 
split level 5: [/input-12, 26] 
split level 6: [/input-8, 1891] 
split level 7: [/input-8, 860] 
split level 8: [/input-8, 1910] 
split level 9: [/input-8, 548] 
split level 10: [/input-8, 1884] 
split level 11: [/input-8, 1902] 
split level 12: [/input-8, 1892] 
split level 13: [/input-8, 875] 
split level 14: [/input-8, 876] 
split level 15: [/input-12, 1] 
split level 16: [/input, 2525] 
split level 17: [/input-8, 667] 
split level 18: [/input-8, 666] 
split level 19: [/input-8, 1879] 
split level 20: [/input, 2426] 
split level 21: [/input, 2422] 
split level 22: [/input, 2409] 
split level 23: [/input, 2442] 
split level 24: [/input-8, 1874] 
split level 25: [/input, 3511] 
split level 26: [/input, 2765] 
split level 27: [/input, 2526] 
split level 28: [/input-8, 649] 
split level 29: [/input-8, 1918] 
split level 30: [/input-8, 859] 
split level 31: [/input-8, 1861] 
split level 32: [/input, 1479] 
split level 33: [/input-8, 1057] 
split level 34: [/input, 2407] 
split level 35: [/input-8, 506] 
split level 36: [/input, 2518] 
split level 37: [/input-8, 1469] 
split level 38: [/input-8, 1890] 
split level 39: [/input-8, 556] 
split level 40: [/input, 2503] 
split level 41: [/input, 2519] 
split level 42: [/input-8, 1350] 
split level 43: [/input, 1480] 
split level 44: [/input-8, 690] 
split level 45: [/input, 2541] 
split level 46: [/input-8, 1648] 
split level 47: [/input, 2540] 
split level 48: [/input, 1478] 
split level 49: [/input-8, 1307] 
split level 50: [/input, 2472] 
split level 51: [/input, 2377] 
split level 52: [/input, 3302] 
split level 53: [/input, 2517] 
split level 54: [/input-8, 410] 
split level 55: [/input, 2536] 
split level 56: [/input, 2331] 
split level 57: [/input-8, 812] 
split level 58: [/input-8, 949] 
split level 59: [/input-8, 1656] 
split level 60: [/input, 2247] 
split level 61: [/input-8, 1065] 
split level 62: [/input, 1742] 
split level 63: [/input, 2521] 
split level 64: [/input-8, 1970] 
split level 65: [/input-8, 421] 
split level 66: [/input, 2348] 
split level 67: [/input, 3156] 
split level 68: [/input, 3300] 
split level 69: [/input-8, 964] 
split level 70: [/input, 2493] 
split level 71: [/input, 2263] 
split level 72: [/input-8, 147] 
split level 73: [/input, 3578] 
split level 74: [/input, 2343] 
split level 75: [/input, 2332] 
split level 76: [/input-8, 849] 
split level 77: [/input, 2902] 
split level 78: [/input-8, 388] 
split level 79: [/input, 102] 
split level 80: [/input, 2349] 
split level 81: [/input, 2952] 
split level 82: [/input-8, 1081] 
split level 83: [/input, 2510] 
split level 84: [/input, 3304] 
split level 85: [/input-8, 420] 
split level 86: [/input-8, 1862] 
split level 87: [/input, 2354] 
split level 88: [/input, 2370] 
split level 89: [/input, 2460] 
split level 90: [/input-8, 564] 
split level 91: [/input, 1758] 
split level 92: [/input, 2361] 
split level 93: [/input, 2365] 
split level 94: [/input, 2489] 
split level 95: [/input, 2380] 
split level 96: [/input, 3384] 
split level 97: [/input-8, 1984] 
split level 98: [/input-8, 1390] 
split level 99: [/input, 1710] 
split level 100: [/input, 3386] 
split level 101: [/input-12, 33] 
split level 102: [/input, 2389] 
split level 103: [/input, 3224] 
split level 104: [/input, 2477] 
split level 105: [/input-8, 944] 
split level 106: [/input-8, 1353] 
split level 107: [/input, 3576] 
split level 108: [/input, 3283] 
split level 109: [/input, 2443] 
split level 110: [/input, 3286] 
split level 111: [/input, 2363] 
split level 112: [/input-8, 463] 
split level 113: [/input, 1726] 
split level 114: [/input, 3126] 
split level 115: [/input-8, 1926] 
split level 116: [/input, 3139] 
split level 117: [/input, 4062] 
split level 118: [/input, 2444] 
split level 119: [/input, 3124] 
split level 120: [/input, 1355] 
split level 121: [/input, 3122] 
split level 122: [/input, 2398] 
split level 123: [/input, 1356] 
split level 124: [/input, 2397] 
split level 125: [/input, 1514] 
split level 126: [/input, 3208] 
split level 127: [/input, 3268] 
split level 128: [/input, 1596] 
split level 129: [/input, 3128] 
split level 130: [/input, 2436] 
split level 131: [/input, 3113] 
split level 132: [/input-8, 1932] 
split level 133: [/input, 1345] 
split level 134: [/input, 2985] 
split level 135: [/input, 614] 
split level 136: [/input, 1669] 
split level 137: [/input, 3150] 
split level 138: [/input, 2538] 
split level 139: [/input, 1678] 
split level 140: [/input, 3356] 
split level 141: [/input, 1646] 
split level 142: [/input, 2922] 
split level 143: [/input, 2473] 
split level 144: [/input, 3171] 
split level 145: [/input-8, 1925] 
split level 146: [/input-8, 1860] 
split level 147: [/input, 1358] 
split level 148: [/input, 3272] 
split level 149: [/input, 1347] 
split level 150: [/input, 356] 
split level 151: [/input, 3299] 
split level 152: [/input-8, 1624] 
split level 153: [/input, 3137] 
split level 154: [/input, 2327] 
split level 155: [/input, 2552] 
split level 156: [/input, 3130] 
split level 157: [/input, 3106] 
split level 158: [/input, 2965] 
split level 159: [/input-8, 1251] 
split level 160: [/input, 3404] 
split level 161: [/input, 2347] 
split level 162: [/input, 3669] 
split level 163: [/input, 2554] 
split level 164: [/input, 3204] 
split level 165: [/input, 2921] 
split level 166: [/input, 3267] 
split level 167: [/input, 3374] 
split level 168: [/input, 3390] 
split level 169: [/input, 3403] 
split level 170: [/input, 3217] 
split level 171: [/input, 324] 
split level 172: [/input, 3364] 
split level 173: [/input, 3289] 
split level 174: [/input-8, 1314] 
split level 175: [/input, 1323] 
split level 176: [/input, 3117] 
split level 177: [/input-8, 1796] 
split level 178: [/input, 2340] 
split level 179: [/input, 1305] 
split level 180: [/input, 3186] 
split level 181: [/input, 3574] 
split level 182: [/input, 3575] 
split level 183: [/input, 2259] 
split level 184: [/input, 3170] 
split level 185: [/input, 2553] 
split level 186: [/input, 3133] 
split level 187: [/input, 1557] 
split level 188: [/input, 3293] 
split level 189: [/input, 3815] 
split level 190: [/input, 3529] 
split level 191: [/input, 3938] 
split level 192: [/input-8, 389] 
split level 193: [/input, 369] 
split level 194: [/input, 2089] 
split level 195: [/input, 3281] 
split level 196: [/input, 3817] 
split level 197: [/input-8, 1856] 
split level 198: [/input, 1367] 
split level 199: [/input, 2931] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03268897533416748
10 lb beta sum: 0.0, worst -0.032679200172424316
Time: prepare 0.0114    bound 0.1089    transfer 0.0027    finalize 0.0031    func 0.1288    
Accumulated time: func 0.1879    prepare 0.0215    bound 0.1675    transfer 0.0028    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.17215943) min lb tensor(-0.03266215)
Number of Verified Splits: 26 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.012039422988891602 
BICCOS Cumulative time: 0.012039422988891602
Preprocessing time: 0.010209798812866211 Inference time: 0.0010056495666503906 Add cuts time: 0.00030350685119628906 Cut analysis time: 0.0005204677581787109
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5336    set_bounds 0.0091    solve 0.1289    add 0.0100    
Accumulated time: pickout 0.0004    decision 0.5336    set_bounds 0.0091    solve 0.1289    add 0.0100    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 31] 
split level 1: [/input-12, 18] 
split level 2: [/input-12, 36] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 51] 
split level 5: [/input-12, 26] 
split level 6: [/input-8, 1892] 
split level 7: [/input-8, 875] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.2769591808319092

all verified at 0th iter
Time: prepare 0.0051    bound 0.0044    transfer 0.0010    finalize 0.0019    func 0.0140    
Accumulated time: func 0.2019    prepare 0.0270    bound 0.1719    transfer 0.0038    finalize 0.0052    
all_split False
======================Cut inference begins======================
max lb tensor(0.86902267) min lb tensor(0.27695918)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.0069692134857177734 
BICCOS Cumulative time: 0.019008636474609375
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.0227    set_bounds 0.0205    solve 0.0141    add 0.0003    
Accumulated time: pickout 0.0008    decision 0.5563    set_bounds 0.0297    solve 0.1430    add 0.0102    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.8415007591247559


Properties batch 8, size 1
Remaining timeout: 197.31133794784546
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.6891 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 55, vnnlib ID: 55 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.89316845, -11.06601906,  -5.14806175,  -6.90553761,  -5.56315517,
          -7.37682629,  -4.56512213,  -8.62777042, -10.82919407, -11.60672951]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [553]; unstable size 553; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 289, 1, 553] with unstable size 288 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 553] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 553] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [288]; unstable size 288; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 288] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 288] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.69566965,  4.02234983, -0.46736044,  1.18290901, -0.48098516,
          1.44691133,  2.02048302,  4.17298079,  4.86422634]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.89316845, -11.06601906,  -5.14806175,  -6.90553761,  -5.56315517,
          -7.37682629,  -4.56512213,  -8.62777042, -10.82919407, -11.60672951]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.13it/s]100%|██████████| 1/1 [00:00<00:00,  8.12it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.66092777, -10.91280365,  -4.69080067,  -6.58803511,  -5.26302862,
           -6.99822426,  -4.68125200,  -8.21521473, -10.48723888, -11.44526005],
         [ -8.66092777, -10.91280365,  -4.69080067,  -6.58803511,  -5.26302862,
           -6.99822426,  -4.68125200,  -8.21521473, -10.48723888, -11.44526005]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.00954866, 0.58177662]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1266 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 20.3638916015625
alpha/beta optimization time: 1.3831281661987305
initial alpha-crown bounds: tensor([[ 2.79173803,  4.12782192, -0.40548462,  1.27908897, -0.38319337,
          1.54761815,  2.13196993,  4.29718542,  4.97714710]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.4054846167564392
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.41330194473267
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.4132537841797
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.4132239818573
Verifying property 2 with 1 instances.
##### Instance 55 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.40548462]], device='cuda:0') need to verify.
Model prediction is: tensor([ -8.89316845, -11.06601906,  -5.14806175,  -6.90553761,  -5.56315517,
         -7.37682629,  -4.56512213,  -8.62777042, -10.82919407, -11.60672951],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.40548462]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 553
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 283
Node /15 input 0: size torch.Size([100]) unstable 20
-----------------
# of unstable neurons: 856
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010967254638671875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4054844379425049
10 lb beta sum: 0.0, worst -0.40548717975616455
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0583    transfer 0.0001    finalize 0.0001    func 0.0588    
Accumulated time: func 0.0588    prepare 0.0002    bound 0.0583    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] 
split level 1: [/input-12, 11] 
split level 2: [/input-12, 58] 
split level 3: [/input-12, 65] 
split level 4: [/input-12, 35] 
split level 5: [/input-8, 1894] 
split level 6: [/input-8, 626] 
split level 7: [/input-8, 1337] 
split level 8: [/input-8, 565] 
split level 9: [/input-8, 1370] 
split level 10: [/input-8, 1902] 
split level 11: [/input-8, 1563] 
split level 12: [/input-8, 1828] 
split level 13: [/input-8, 1371] 
split level 14: [/input-8, 1019] 
split level 15: [/input-8, 147] 
split level 16: [/input-8, 1386] 
split level 17: [/input-8, 1018] 
split level 18: [/input-8, 1436] 
split level 19: [/input-8, 1562] 
split level 20: [/input-8, 1564] 
split level 21: [/input-8, 1020] 
split level 22: [/input-8, 942] 
split level 23: [/input-8, 841] 
split level 24: [/input-8, 77] 
split level 25: [/input-8, 1292] 
split level 26: [/input-8, 933] 
split level 27: [/input-8, 650] 
split level 28: [/input-8, 1339] 
split level 29: [/input-8, 1903] 
split level 30: [/input-8, 485] 
split level 31: [/input-8, 1420] 
split level 32: [/input-8, 1428] 
split level 33: [/input-8, 1042] 
split level 34: [/input-8, 180] 
split level 35: [/input-8, 1340] 
split level 36: [/input-8, 84] 
split level 37: [/input-8, 1402] 
split level 38: [/input-8, 890] 
split level 39: [/input-8, 2004] 
split level 40: [/input-8, 1444] 
split level 41: [/input-8, 1821] 
split level 42: [/input-8, 2013] 
split level 43: [/input-8, 1131] 
split level 44: [/input-8, 105] 
split level 45: [/input-8, 162] 
split level 46: [/input-8, 1001] 
split level 47: [/input-8, 893] 
split level 48: [/input-8, 1291] 
split level 49: [/input-8, 795] 
split level 50: [/input-8, 1588] 
split level 51: [/input-8, 1404] 
split level 52: [/input-8, 981] 
split level 53: [/input-8, 989] 
split level 54: [/input-8, 924] 
split level 55: [/input-8, 1421] 
split level 56: [/input-8, 1886] 
split level 57: [/input-8, 1589] 
split level 58: [/input-8, 1149] 
split level 59: [/input-8, 937] 
split level 60: [/input-8, 1868] 
split level 61: [/input-8, 1422] 
split level 62: [/input-8, 1002] 
split level 63: [/input-8, 923] 
split level 64: [/input-8, 984] 
split level 65: [/input, 1675] 
split level 66: [/input-8, 76] 
split level 67: [/input-8, 573] 
split level 68: [/input-8, 2037] 
split level 69: [/input, 2732] 
split level 70: [/input-8, 878] 
split level 71: [/input-8, 1876] 
split level 72: [/input-8, 1022] 
split level 73: [/input, 1724] 
split level 74: [/input, 1942] 
split level 75: [/input, 1926] 
split level 76: [/input-8, 486] 
split level 77: [/input-8, 976] 
split level 78: [/input-8, 1811] 
split level 79: [/input-8, 803] 
split level 80: [/input-8, 1325] 
split level 81: [/input-8, 290] 
split level 82: [/input-8, 1590] 
split level 83: [/input-8, 1449] 
split level 84: [/input-8, 1582] 
split level 85: [/input-8, 1916] 
split level 86: [/input-8, 67] 
split level 87: [/input-8, 1012] 
split level 88: [/input-8, 1141] 
split level 89: [/input, 3416] 
split level 90: [/input-8, 1092] 
split level 91: [/input-8, 972] 
split level 92: [/input-8, 2038] 
split level 93: [/input-8, 432] 
split level 94: [/input, 2492] 
split level 95: [/input-8, 1419] 
split level 96: [/input-8, 1755] 
split level 97: [/input-8, 1014] 
split level 98: [/input-8, 1458] 
split level 99: [/input-8, 2030] 
split level 100: [/input, 1740] 
split level 101: [/input-8, 953] 
split level 102: [/input-8, 1960] 
split level 103: [/input-8, 1788] 
split level 104: [/input, 1400] 
split level 105: [/input, 1773] 
split level 106: [/input-8, 1764] 
split level 107: [/input, 359] 
split level 108: [/input-8, 113] 
split level 109: [/input-8, 945] 
split level 110: [/input, 2170] 
split level 111: [/input-8, 2045] 
split level 112: [/input, 2733] 
split level 113: [/input-8, 877] 
split level 114: [/input-8, 559] 
split level 115: [/input-8, 1982] 
split level 116: [/input-8, 1869] 
split level 117: [/input, 209] 
split level 118: [/input-8, 2008] 
split level 119: [/input-8, 167] 
split level 120: [/input-8, 1784] 
split level 121: [/input, 2153] 
split level 122: [/input, 1948] 
split level 123: [/input, 1946] 
split level 124: [/input, 3558] 
split level 125: [/input-8, 910] 
split level 126: [/input-8, 2044] 
split level 127: [/input-8, 2022] 
split level 128: [/input, 1622] 
split level 129: [/input-8, 1996] 
split level 130: [/input-8, 1906] 
split level 131: [/input, 1725] 
split level 132: [/input-8, 2012] 
split level 133: [/input, 2745] 
split level 134: [/input, 1606] 
split level 135: [/input, 3380] 
split level 136: [/input, 4044] 
split level 137: [/input, 470] 
split level 138: [/input, 2616] 
split level 139: [/input, 2995] 
split level 140: [/input, 1238] 
split level 141: [/input, 4045] 
split level 142: [/input-8, 1838] 
split level 143: [/input, 3779] 
split level 144: [/input-8, 1786] 
split level 145: [/input-8, 118] 
split level 146: [/input, 4048] 
split level 147: [/input, 2788] 
split level 148: [/input-8, 1035] 
split level 149: [/input-8, 393] 
split level 150: [/input-8, 1595] 
split level 151: [/input, 3016] 
split level 152: [/input-8, 1998] 
split level 153: [/input-8, 1547] 
split level 154: [/input, 3763] 
split level 155: [/input, 2286] 
split level 156: [/input-8, 1992] 
split level 157: [/input, 1577] 
split level 158: [/input-8, 1418] 
split level 159: [/input, 2989] 
split level 160: [/input-8, 1552] 
split level 161: [/input, 2151] 
split level 162: [/input, 485] 
split level 163: [/input, 1830] 
split level 164: [/input-8, 1093] 
split level 165: [/input-8, 1560] 
split level 166: [/input, 2302] 
split level 167: [/input-8, 477] 
split level 168: [/input, 3780] 
split level 169: [/input-8, 1753] 
split level 170: [/input, 1530] 
split level 171: [/input, 3608] 
split level 172: [/input, 4043] 
split level 173: [/input, 3764] 
split level 174: [/input, 1578] 
split level 175: [/input, 1589] 
split level 176: [/input, 2908] 
split level 177: [/input, 1925] 
split level 178: [/input, 465] 
split level 179: [/input-8, 1776] 
split level 180: [/input, 3677] 
split level 181: [/input, 2842] 
split level 182: [/input-8, 1877] 
split level 183: [/input, 1833] 
split level 184: [/input, 1816] 
split level 185: [/input, 498] 
split level 186: [/input, 2925] 
split level 187: [/input, 3600] 
split level 188: [/input, 2825] 
split level 189: [/input, 4034] 
split level 190: [/input, 3610] 
split level 191: [/input, 1719] 
split level 192: [/input, 2834] 
split level 193: [/input, 1648] 
split level 194: [/input, 1570] 
split level 195: [/input, 1829] 
split level 196: [/input, 1815] 
split level 197: [/input, 3601] 
split level 198: [/input, 3693] 
split level 199: [/input, 4016] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.40542417764663696
10 lb beta sum: 0.0, worst -0.40542519092559814
Time: prepare 0.0114    bound 0.1083    transfer 0.0034    finalize 0.0040    func 0.1299    
Accumulated time: func 0.1887    prepare 0.0216    bound 0.1666    transfer 0.0035    finalize 0.0041    
all_split False
======================Cut inference begins======================
max lb tensor(-0.13681197) min lb tensor(-0.40541774)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.010326147079467773 
BICCOS Cumulative time: 0.010326147079467773
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.39308 (1), -0.39294 (1), -0.39272 (1), -0.39245 (1), -0.39200 (1), -0.39192 (1), -0.39170 (1), -0.39119 (1), -0.39084 (1), -0.39037 (1), -0.38998 (1), -0.38977 (1), -0.38922 (1), -0.38900 (1), -0.38843 (1), -0.38783 (1), -0.38305 (1), -0.38249 (1), -0.38196 (1), -0.38162 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5381    set_bounds 0.0093    solve 0.1300    add 0.1990    
Accumulated time: pickout 0.0004    decision 0.5381    set_bounds 0.0093    solve 0.1300    add 0.1990    
Current (lb-rhs): -0.3930777907371521
50 domains visited
Cumulative time: 0.9698247909545898

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 11] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
split level 1: [/input-12, 11] [/input-12, 35] [/input-12, 11] [/input-12, 58] [/input-12, 58] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 2: [/input-12, 35] [/input-8, 1563] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 3: [/input-8, 812] [/input-8, 1902] [/input-8, 1563] [/input-8, 1902] [/input-8, 1902] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.38475143909454346
10 lb beta sum: 0.0, worst -0.3845027685165405
Time: prepare 0.0127    bound 0.1076    transfer 0.0014    finalize 0.0024    func 0.1267    
Accumulated time: func 0.3154    prepare 0.0346    bound 0.2742    transfer 0.0049    finalize 0.0066    
all_split False
======================Cut inference begins======================
max lb tensor(0.08059531) min lb tensor(-0.38437605)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.012794971466064453 
BICCOS Cumulative time: 0.023121118545532227
Preprocessing time: 0.011777400970458984 Inference time: 0.000141143798828125 Add cuts time: 8.726119995117188e-05 Cut analysis time: 0.0007891654968261719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10451 (2), -0.10401 (2), -0.10218 (2), -0.10157 (2), -0.10156 (2), -0.10108 (2), -0.10046 (2), -0.09948 (2), -0.09885 (2), -0.09738 (2), -0.09704 (2), -0.09685 (2), -0.09643 (2), -0.09639 (2), -0.09634 (2), -0.09587 (2), -0.09500 (2), -0.09342 (2), -0.09308 (2), -0.09307 (2), 
Length of domains: 50
Time: pickout 0.0078    decision 0.0215    set_bounds 0.0116    solve 0.1268    add 0.2013    
Accumulated time: pickout 0.0082    decision 0.5597    set_bounds 0.0209    solve 0.2568    add 0.4003    
Current (lb-rhs): -0.10451078414916992
100 domains visited
Cumulative time: 1.359543800354004

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 11] [/input-12, 58] [/input-12, 58] [/input-12, 11] [/input-12, 60] [/input-12, 58] [/input-12, 60] 
split level 1: [/input-12, 35] [/input-12, 35] [/input-12, 11] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 11] 
split level 2: [/input-8, 650] [/input-8, 650] [/input-12, 35] [/input-8, 1563] [/input-8, 1563] [/input-8, 1563] [/input-8, 1563] [/input-8, 1902] [/input-8, 1902] [/input-12, 35] 
split level 3: [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 812] [/input-8, 1563] [/input-8, 812] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09654545783996582
10 lb beta sum: 0.1514928936958313, worst -0.10402882099151611
Time: prepare 0.0077    bound 0.1320    transfer 0.0013    finalize 0.0023    func 0.1461    
Accumulated time: func 0.4615    prepare 0.0425    bound 0.4062    transfer 0.0062    finalize 0.0089    
all_split False
======================Cut inference begins======================
max lb tensor(0.41008949) min lb tensor(-0.08283019)
Number of Verified Splits: 154 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 35
#cuts >= 20: 0
BICCOS time: 0.02236008644104004 
BICCOS Cumulative time: 0.045481204986572266
Preprocessing time: 0.011646509170532227 Inference time: 0.006432771682739258 Add cuts time: 0.0033431053161621094 Cut analysis time: 0.0009377002716064453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05495 (3), -0.05455 (3), -0.05433 (3), -0.05271 (3), -0.05203 (3), -0.05152 (3), -0.05077 (3), -0.05005 (3), -0.04726 (3), -0.04697 (3), -0.04665 (3), -0.04593 (3), -0.04226 (3), -0.04213 (3), -0.04127 (3), -0.03596 (3), -0.03197 (3), -0.02993 (3), -0.02793 (3), -0.02765 (3), 
Length of domains: 50
Time: pickout 0.0085    decision 0.0219    set_bounds 0.0160    solve 0.1462    add 0.2527    
Accumulated time: pickout 0.0167    decision 0.5816    set_bounds 0.0369    solve 0.4030    add 0.6530    
Current (lb-rhs): -0.05494856834411621
150 domains visited
Cumulative time: 1.8341739177703857

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 58] [/input-12, 58] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
split level 1: [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-8, 1902] [/input-8, 1902] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 2: [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1563] [/input-8, 1563] [/input-8, 650] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] 
split level 3: [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05274796485900879
10 lb beta sum: 0.6744561791419983, worst -0.08352035284042358
Time: prepare 0.0081    bound 0.1429    transfer 0.0009    finalize 0.0025    func 0.1571    
Accumulated time: func 0.6186    prepare 0.0509    bound 0.5491    transfer 0.0071    finalize 0.0114    
all_split False
======================Cut inference begins======================
max lb tensor(0.35750282) min lb tensor(-0.03637123)
Number of Verified Splits: 276 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.03329277038574219 
BICCOS Cumulative time: 0.07877397537231445
Preprocessing time: 0.01226496696472168 Inference time: 0.012619495391845703 Add cuts time: 0.00810861587524414 Cut analysis time: 0.00029969215393066406
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0078    decision 0.0210    set_bounds 0.0172    solve 0.1573    add 0.0233    
Accumulated time: pickout 0.0245    decision 0.6025    set_bounds 0.0541    solve 0.5603    add 0.6763    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] 
split level 1: [/input-12, 11] 
split level 2: [/input-12, 58] 
split level 3: [/input-12, 65] 
split level 4: [/input-12, 35] 
split level 5: [/input-8, 1902] 
split level 6: [/input-8, 1563] 
split level 7: [/input-8, 1903] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23691588640213013
10 lb beta sum: 0.1942247450351715, worst -0.23610252141952515
Time: prepare 0.0052    bound 0.1249    transfer 0.0006    finalize 0.0019    func 0.1345    
Accumulated time: func 0.7532    prepare 0.0567    bound 0.6741    transfer 0.0078    finalize 0.0133    
all_split False
======================Cut inference begins======================
max lb tensor(1.03583205) min lb tensor(-0.23586595)
Number of Verified Splits: 192 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3259282112121582
10 lb beta sum: 0.3469464182853699, worst -0.11384239792823792
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.2611508369445801 
BICCOS Cumulative time: 0.33992481231689453
Preprocessing time: 0.007636308670043945 Inference time: 0.2478499412536621 Add cuts time: 0.005359172821044922 Cut analysis time: 0.00030541419982910156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23587 (8), -0.23479 (8), -0.23203 (8), -0.23121 (8), -0.23087 (8), -0.23056 (8), -0.22738 (8), -0.22664 (8), -0.22378 (8), -0.22358 (8), -0.22342 (8), -0.22226 (8), -0.22190 (8), -0.22103 (8), -0.22011 (8), -0.21997 (8), -0.21966 (8), -0.21909 (8), -0.21842 (8), -0.21798 (8), 
Length of domains: 64
Time: pickout 0.0005    decision 0.0250    set_bounds 0.0229    solve 0.1347    add 0.0726    
Accumulated time: pickout 0.0250    decision 0.6275    set_bounds 0.0770    solve 0.6950    add 0.7490    
Current (lb-rhs): -0.23586595058441162
214 domains visited
Cumulative time: 2.6294031143188477

BaB round 2
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1371] [/input-8, 1371] [/input-8, 1370] [/input-8, 1371] [/input-8, 147] [/input-8, 1371] [/input-8, 1370] [/input-8, 1371] [/input-8, 1371] [/input-8, 1371] 
split level 1: [/input-8, 924] [/input-8, 924] [/input-8, 1371] [/input-8, 1020] [/input-8, 924] [/input-8, 924] [/input-8, 1371] [/input-8, 1020] [/input-8, 924] [/input-8, 924] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2255171537399292
10 lb beta sum: 0.0, worst -0.22522473335266113
Time: prepare 0.0121    bound 0.1372    transfer 0.0009    finalize 0.0015    func 0.1536    
Accumulated time: func 0.9068    prepare 0.0691    bound 0.8113    transfer 0.0087    finalize 0.0148    
all_split False
======================Cut inference begins======================
max lb tensor(0.02687514) min lb tensor(-0.22515559)
Number of Verified Splits: 66 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3435315489768982
10 lb beta sum: 0.22421325743198395, worst -0.15422701835632324
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 2
#cuts 7-9: 6
#cuts >= 20: 0
BICCOS time: 0.18500471115112305 
BICCOS Cumulative time: 0.5249295234680176
Preprocessing time: 0.00814962387084961 Inference time: 0.17593884468078613 Add cuts time: 0.0002601146697998047 Cut analysis time: 0.0006561279296875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22516 (10), -0.22401 (10), -0.22134 (10), -0.22053 (10), -0.22006 (10), -0.21973 (10), -0.21825 (10), -0.21756 (10), -0.21671 (10), -0.21578 (10), -0.21442 (10), -0.21433 (10), -0.21362 (10), -0.21361 (10), -0.21353 (10), -0.21331 (10), -0.21328 (10), -0.21297 (10), -0.21266 (10), -0.21162 (10), 
Length of domains: 190
Time: pickout 0.0137    decision 0.0160    set_bounds 0.1666    solve 0.1537    add 0.0769    
Accumulated time: pickout 0.0387    decision 0.6435    set_bounds 0.2436    solve 0.8487    add 0.8258    
Current (lb-rhs): -0.22515559196472168
404 domains visited
Cumulative time: 3.244328498840332

BaB round 3
batch: 190
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1436] [/input-8, 1370] [/input-8, 650] [/input-8, 1370] [/input-8, 1436] [/input-8, 1370] [/input-8, 650] [/input-8, 1370] [/input-8, 1436] [/input-8, 1370] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22119343280792236
10 lb beta sum: 0.0, worst -0.22111660242080688
Time: prepare 0.0077    bound 0.1536    transfer 0.0039    finalize 0.0021    func 0.1706    
Accumulated time: func 1.0773    prepare 0.0770    bound 0.9649    transfer 0.0126    finalize 0.0169    
all_split False
======================Cut inference begins======================
max lb tensor(0.02268946) min lb tensor(-0.22107208)
Number of Verified Splits: 86 of 380
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.020518779754638672 
BICCOS Cumulative time: 0.5454483032226562
Preprocessing time: 0.011208772659301758 Inference time: 0.00757145881652832 Add cuts time: 0.0008730888366699219 Cut analysis time: 0.0008654594421386719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22107 (11), -0.22022 (11), -0.21732 (11), -0.21643 (11), -0.21631 (11), -0.21591 (11), -0.21420 (11), -0.21378 (11), -0.21267 (11), -0.21201 (11), -0.21050 (11), -0.21042 (11), -0.20998 (11), -0.20985 (11), -0.20952 (11), -0.20947 (11), -0.20875 (11), -0.20874 (11), -0.20871 (11), -0.20759 (11), 
Length of domains: 294
Time: pickout 0.0032    decision 0.0200    set_bounds 0.0167    solve 0.1707    add 0.0623    
Accumulated time: pickout 0.0418    decision 0.6635    set_bounds 0.2603    solve 1.0194    add 0.8882    
Current (lb-rhs): -0.22107207775115967
698 domains visited
Cumulative time: 3.5457072257995605

BaB round 4
batch: 294
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 933] [/input-8, 933] [/input-8, 1436] [/input-8, 933] [/input-8, 933] [/input-8, 1436] [/input-8, 1436] [/input-8, 933] [/input-8, 1020] [/input-8, 1436] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21718108654022217
10 lb beta sum: 0.007382259704172611, worst -0.21714335680007935
Time: prepare 0.0118    bound 0.1382    transfer 0.0040    finalize 0.0032    func 0.1611    
Accumulated time: func 1.2384    prepare 0.0889    bound 1.1031    transfer 0.0167    finalize 0.0201    
all_split False
======================Cut inference begins======================
max lb tensor(0.03272164) min lb tensor(-0.21711218)
Number of Verified Splits: 63 of 588
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.024043798446655273 
BICCOS Cumulative time: 0.5694921016693115
Preprocessing time: 0.01738429069519043 Inference time: 0.005948543548583984 Add cuts time: 0.00046443939208984375 Cut analysis time: 0.0002465248107910156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21711 (12), -0.21319 (12), -0.21290 (12), -0.21246 (12), -0.21160 (12), -0.21018 (12), -0.20920 (12), -0.20884 (12), -0.20824 (12), -0.20772 (12), -0.20726 (12), -0.20674 (12), -0.20598 (12), -0.20586 (12), -0.20570 (12), -0.20553 (12), -0.20515 (12), -0.20485 (12), -0.20465 (12), -0.20363 (12), 
Length of domains: 525
Time: pickout 0.0165    decision 0.0286    set_bounds 0.0273    solve 0.1613    add 0.1067    
Accumulated time: pickout 0.0583    decision 0.6921    set_bounds 0.2876    solve 1.1807    add 0.9949    
Current (lb-rhs): -0.21711218357086182
1223 domains visited
Cumulative time: 3.919074773788452

BaB round 5
batch: 525
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 650] [/input-8, 1436] [/input-8, 933] [/input-8, 1436] [/input-8, 650] [/input-8, 933] [/input-8, 933] [/input-8, 1436] [/input-8, 650] [/input-8, 933] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00586156640201807, worst -0.21017062664031982
10 lb beta sum: 0.00586156640201807, worst -0.21014785766601562
Time: prepare 0.0488    bound 0.1445    transfer 0.0070    finalize 0.0061    func 0.2135    
Accumulated time: func 1.4519    prepare 0.1380    bound 1.2476    transfer 0.0237    finalize 0.0262    
all_split False
======================Cut inference begins======================
max lb tensor(0.03010772) min lb tensor(-0.21013200)
Number of Verified Splits: 26 of 1050
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.03601336479187012 
BICCOS Cumulative time: 0.6055054664611816
Preprocessing time: 0.03293323516845703 Inference time: 0.002535104751586914 Add cuts time: 0.00019311904907226562 Cut analysis time: 0.00035190582275390625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21013 (13), -0.20932 (13), -0.20844 (13), -0.20752 (13), -0.20587 (13), -0.20546 (13), -0.20495 (13), -0.20486 (13), -0.20423 (13), -0.20379 (13), -0.20318 (13), -0.20317 (13), -0.20315 (13), -0.20287 (13), -0.20150 (13), -0.20120 (13), -0.20107 (13), -0.20050 (13), -0.19959 (13), -0.19893 (13), 
Length of domains: 1024
Time: pickout 0.0659    decision 0.0440    set_bounds 0.0466    solve 0.2139    add 0.1216    
Accumulated time: pickout 0.1242    decision 0.7361    set_bounds 0.3341    solve 1.3946    add 1.1165    
Current (lb-rhs): -0.21013200283050537
2247 domains visited
Cumulative time: 4.458256959915161

BaB round 6
batch: 1024
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1020] [/input-8, 1018] [/input-8, 1020] [/input-8, 1018] [/input-8, 1020] [/input-8, 1018] [/input-8, 1020] [/input-8, 1018] [/input-8, 933] [/input-8, 1018] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20813590288162231
10 lb beta sum: 0.0, worst -0.20811808109283447
Time: prepare 0.0902    bound 0.1576    transfer 0.0043    finalize 0.0101    func 0.2758    
Accumulated time: func 1.7277    prepare 0.2286    bound 1.4052    transfer 0.0280    finalize 0.0364    
all_split False
======================Cut inference begins======================
max lb tensor(-0.11933082) min lb tensor(-0.20810008)
Number of Verified Splits: 0 of 2048
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.06427764892578125 
BICCOS Cumulative time: 0.6697831153869629
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20810 (14), -0.20716 (14), -0.20642 (14), -0.20537 (14), -0.20384 (14), -0.20342 (14), -0.20278 (14), -0.20270 (14), -0.20219 (14), -0.20176 (14), -0.20101 (14), -0.20099 (14), -0.20095 (14), -0.20050 (14), -0.19930 (14), -0.19916 (14), -0.19870 (14), -0.19833 (14), -0.19754 (14), -0.19678 (14), 
Length of domains: 2048
Time: pickout 0.0203    decision 0.0749    set_bounds 0.0922    solve 0.2762    add 0.1203    
Accumulated time: pickout 0.1446    decision 0.8109    set_bounds 0.4263    solve 1.6708    add 1.2368    
Current (lb-rhs): -0.2081000804901123
4295 domains visited
Cumulative time: 5.116522312164307

BaB round 7
batch: 2048
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1292] [/input-8, 1340] [/input-8, 1131] [/input-8, 650] [/input-8, 1292] [/input-8, 1340] [/input-8, 1131] [/input-8, 650] [/input-8, 1292] [/input-8, 1340] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20146942138671875
10 lb beta sum: 0.0, worst -0.20146781206130981
Time: prepare 0.1900    bound 0.2406    transfer 0.0160    finalize 0.0193    func 0.4937    
Accumulated time: func 2.2214    prepare 0.4189    bound 1.6458    transfer 0.0439    finalize 0.0557    
all_split False
======================Cut inference begins======================
max lb tensor(-0.10671622) min lb tensor(-0.20145929)
Number of Verified Splits: 0 of 4096
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.13059282302856445 
BICCOS Cumulative time: 0.8003759384155273
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20146 (15), -0.20054 (15), -0.19979 (15), -0.19952 (15), -0.19875 (15), -0.19855 (15), -0.19783 (15), -0.19719 (15), -0.19678 (15), -0.19676 (15), -0.19615 (15), -0.19606 (15), -0.19554 (15), -0.19523 (15), -0.19513 (15), -0.19484 (15), -0.19439 (15), -0.19438 (15), -0.19422 (15), -0.19416 (15), 
Length of domains: 4096
Time: pickout 0.0225    decision 0.3372    set_bounds 0.1831    solve 0.4945    add 0.1387    
Accumulated time: pickout 0.1671    decision 1.1481    set_bounds 0.6094    solve 2.1654    add 1.3755    
Current (lb-rhs): -0.20145928859710693
8391 domains visited
Cumulative time: 6.434095621109009

BaB round 8
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 84] [/input-8, 650] [/input-8, 1340] [/input-8, 1340] [/input-8, 84] [/input-8, 650] [/input-8, 1340] [/input-8, 1340] [/input-8, 84] [/input-8, 650] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1963922381401062
10 lb beta sum: 0.0, worst -0.19635707139968872
Time: prepare 0.3584    bound 0.4059    transfer 0.0398    finalize 0.0424    func 1.0846    
Accumulated time: func 3.3060    prepare 0.7777    bound 2.0517    transfer 0.0837    finalize 0.0980    
all_split False
======================Cut inference begins======================
max lb tensor(-0.07743478) min lb tensor(-0.19635296)
Number of Verified Splits: 0 of 8192
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.2580265998840332 
BICCOS Cumulative time: 1.0584025382995605
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19635 (16), -0.19501 (16), -0.19470 (16), -0.19440 (16), -0.19424 (16), -0.19322 (16), -0.19305 (16), -0.19302 (16), -0.19274 (16), -0.19252 (16), -0.19231 (16), -0.19206 (16), -0.19167 (16), -0.19126 (16), -0.19123 (16), -0.19106 (16), -0.19062 (16), -0.19059 (16), -0.19058 (16), -0.19048 (16), 
Length of domains: 8192
Time: pickout 0.0439    decision 0.4200    set_bounds 0.3902    solve 1.0865    add 0.0309    
Accumulated time: pickout 0.2110    decision 1.5681    set_bounds 0.9996    solve 3.2519    add 1.4064    
Current (lb-rhs): -0.19635295867919922
16583 domains visited
current_vram/total_varm: 9.5GB/99.9GB, batch_size increase to 8192
Cumulative time: 8.67513132095337

BaB round 9
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1291] [/input-8, 795] [/input-8, 1018] [/input-8, 795] [/input-8, 1291] [/input-8, 795] [/input-8, 1018] [/input-8, 795] [/input-8, 1291] [/input-8, 795] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19115567207336426
10 lb beta sum: 0.0, worst -0.1911497712135315
Time: prepare 0.7293    bound 0.7464    transfer 0.0793    finalize 0.0766    func 1.7395    
Accumulated time: func 5.0455    prepare 1.5074    bound 2.7981    transfer 0.1630    finalize 0.1747    
all_split False
======================Cut inference begins======================
max lb tensor(-0.05709171) min lb tensor(-0.19113582)
Number of Verified Splits: 0 of 16384
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.5161628723144531 
BICCOS Cumulative time: 1.5745654106140137
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19114 (17), -0.18984 (17), -0.18959 (17), -0.18948 (17), -0.18918 (17), -0.18895 (17), -0.18818 (17), -0.18789 (17), -0.18783 (17), -0.18760 (17), -0.18755 (17), -0.18752 (17), -0.18744 (17), -0.18743 (17), -0.18721 (17), -0.18700 (17), -0.18696 (17), -0.18645 (17), -0.18621 (17), -0.18585 (17), 
Length of domains: 16384
Time: pickout 0.0905    decision 0.6622    set_bounds 1.0373    solve 1.7422    add 0.1493    
Accumulated time: pickout 0.3015    decision 2.2304    set_bounds 2.0369    solve 4.9941    add 1.5557    
Current (lb-rhs): -0.19113582372665405
32967 domains visited
current_vram/total_varm: 18.9GB/99.9GB, batch_size increase to 16384
Cumulative time: 12.890718460083008

BaB round 10
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1018] [/input-8, 1131] [/input-8, 1292] [/input-8, 1131] [/input-8, 1018] [/input-8, 1131] [/input-8, 1292] [/input-8, 1131] [/input-8, 1018] [/input-8, 1131] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18859243392944336
10 lb beta sum: 0.0, worst -0.1885664463043213
Time: prepare 1.4339    bound 1.4102    transfer 0.2196    finalize 0.4473    func 3.7258    
Accumulated time: func 8.7713    prepare 2.9417    bound 4.2083    transfer 0.3826    finalize 0.6219    
all_split False
======================Cut inference begins======================
max lb tensor(-0.04068542) min lb tensor(-0.18855762)
Number of Verified Splits: 0 of 32768
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 1.035222053527832 
BICCOS Cumulative time: 2.6097874641418457
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18856 (18), -0.18715 (18), -0.18699 (18), -0.18690 (18), -0.18634 (18), -0.18606 (18), -0.18549 (18), -0.18523 (18), -0.18484 (18), -0.18472 (18), -0.18470 (18), -0.18467 (18), -0.18458 (18), -0.18447 (18), -0.18440 (18), -0.18438 (18), -0.18388 (18), -0.18385 (18), -0.18309 (18), -0.18300 (18), 
Length of domains: 32768
Time: pickout 0.1735    decision 1.8525    set_bounds 1.9279    solve 3.7311    add 0.2644    
Accumulated time: pickout 0.4750    decision 4.0828    set_bounds 3.9648    solve 8.7252    add 1.8201    
Current (lb-rhs): -0.18855762481689453
65735 domains visited
current_vram/total_varm: 32.1GB/99.9GB, batch_size increase to 32768
Cumulative time: 21.921066284179688

BaB round 11
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1340] [/input-8, 1291] [/input-8, 989] [/input-8, 1886] [/input-8, 1340] [/input-8, 1291] [/input-8, 989] [/input-8, 1886] [/input-8, 1340] [/input-8, 1291] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18552261590957642
10 lb beta sum: 0.0, worst -0.18550539016723633
Time: prepare 2.8901    bound 7.9468    transfer 0.6148    finalize 0.8645    func 12.7494    
Accumulated time: func 21.5206    prepare 5.8323    bound 12.1551    transfer 0.9975    finalize 1.4864    
all_split False
======================Cut inference begins======================
max lb tensor(-0.03261805) min lb tensor(-0.18549359)
Number of Verified Splits: 0 of 65536
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 2.153202533721924 
BICCOS Cumulative time: 4.7629899978637695
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18549 (19), -0.18407 (19), -0.18382 (19), -0.18382 (19), -0.18328 (19), -0.18263 (19), -0.18242 (19), -0.18242 (19), -0.18206 (19), -0.18187 (19), -0.18159 (19), -0.18157 (19), -0.18150 (19), -0.18149 (19), -0.18135 (19), -0.18130 (19), -0.18099 (19), -0.18097 (19), -0.18094 (19), -0.18081 (19), 
Length of domains: 65536
Time: pickout 0.3528    decision 3.5837    set_bounds 3.8115    solve 12.7591    add 0.5388    
Accumulated time: pickout 0.8278    decision 7.6665    set_bounds 7.7763    solve 21.4843    add 2.3589    
Current (lb-rhs): -0.1854935884475708
131271 domains visited
Cumulative time: 45.34832692146301

BaB round 12
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 893] [/input-8, 1292] [/input-8, 893] [/input-8, 893] [/input-8, 893] [/input-8, 1292] [/input-8, 893] [/input-8, 893] [/input-8, 893] [/input-8, 1292] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18209832906723022
10 lb beta sum: 0.0, worst -0.18208050727844238
Time: prepare 3.1176    bound 7.9915    transfer 0.6073    finalize 0.5131    func 13.6877    
Accumulated time: func 35.2083    prepare 8.9505    bound 20.1466    transfer 1.6048    finalize 1.9995    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02145314) min lb tensor(-0.18206567)
Number of Verified Splits: 0 of 65536
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 2.5879664421081543 
BICCOS Cumulative time: 7.350956439971924
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18263 (19), -0.18242 (19), -0.18207 (20), -0.18187 (19), -0.18135 (19), -0.18099 (19), -0.18097 (19), -0.18094 (19), -0.18077 (19), -0.18076 (20), -0.18041 (19), -0.18039 (20), -0.18021 (19), -0.18011 (19), -0.17984 (20), -0.17969 (19), -0.17967 (19), -0.17954 (19), -0.17948 (19), -0.17936 (19), 
Length of domains: 98304
Time: pickout 0.5654    decision 4.4524    set_bounds 5.4528    solve 13.7023    add 27.3117    
Accumulated time: pickout 1.3932    decision 12.1189    set_bounds 13.2291    solve 35.1866    add 29.6706    
Current (lb-rhs): -0.18263459205627441
196807 domains visited
Cumulative time: 99.66078495979309

BaB round 13
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 893] [/input-8, 1292] [/input-8, 795] [/input-8, 893] [/input-8, 893] [/input-8, 1292] [/input-8, 795] [/input-8, 893] [/input-8, 893] [/input-8, 1292] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.179476797580719
10 lb beta sum: 0.0, worst -0.1794724464416504
Time: prepare 3.1329    bound 7.9859    transfer 0.6686    finalize 0.4866    func 12.7044    
Accumulated time: func 47.9127    prepare 12.0850    bound 28.1325    transfer 2.2734    finalize 2.4861    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01977849) min lb tensor(-0.17946768)
Number of Verified Splits: 0 of 65536
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 2.255605936050415 
BICCOS Cumulative time: 9.606562376022339
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18207 (20), -0.18076 (20), -0.18039 (20), -0.17984 (20), -0.17947 (20), -0.17911 (20), -0.17898 (20), -0.17858 (20), -0.17835 (20), -0.17826 (20), -0.17808 (20), -0.17806 (20), -0.17787 (20), -0.17775 (20), -0.17769 (20), -0.17738 (20), -0.17736 (20), -0.17733 (20), -0.17677 (20), -0.17677 (20), 
Length of domains: 131072
Time: pickout 0.4975    decision 3.9382    set_bounds 4.2092    solve 13.7688    add 0.7056    
Accumulated time: pickout 1.8908    decision 16.0571    set_bounds 17.4383    solve 48.9555    add 30.3762    
Current (lb-rhs): -0.1820656657218933
262343 domains visited
Cumulative time: 125.19521951675415

BaB round 14
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1131] [/input-8, 84] [/input-8, 84] [/input-8, 924] [/input-8, 1131] [/input-8, 84] [/input-8, 84] [/input-8, 924] [/input-8, 1131] [/input-8, 84] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17472350597381592
10 lb beta sum: 0.0, worst -0.17471003532409668
Time: prepare 3.1093    bound 8.0786    transfer 0.6967    finalize 1.7441    func 14.0539    
Accumulated time: func 61.9666    prepare 15.1950    bound 36.2110    transfer 2.9701    finalize 4.2302    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01420426) min lb tensor(-0.17464811)
Number of Verified Splits: 0 of 65536
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 2.2735698223114014 
BICCOS Cumulative time: 11.88013219833374
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18207 (20), -0.18076 (20), -0.18039 (20), -0.17984 (20), -0.17947 (20), -0.17911 (20), -0.17898 (20), -0.17858 (20), -0.17826 (20), -0.17808 (20), -0.17806 (20), -0.17787 (20), -0.17775 (20), -0.17769 (20), -0.17738 (20), -0.17736 (20), -0.17733 (20), -0.17677 (20), -0.17677 (20), -0.17664 (20), 
Length of domains: 163840
Time: pickout 0.4723    decision 3.3952    set_bounds 4.6434    solve 14.0685    add 0.7722    
Accumulated time: pickout 2.3631    decision 19.4524    set_bounds 22.0818    solve 63.0239    add 31.1483    
Current (lb-rhs): -0.1820656657218933
327879 domains visited
Cumulative time: 151.06444907188416

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 485] [/input-8, 84] [/input-8, 84] [/input-8, 924] [/input-8, 1131] [/input-8, 84] [/input-8, 84] [/input-8, 924] [/input-8, 485] [/input-8, 84] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17889994382858276
10 lb beta sum: 0.0, worst -0.1788979172706604
Time: prepare 3.0025    bound 7.9825    transfer 0.7421    finalize 0.4825    func 12.6405    
Accumulated time: func 74.6072    prepare 18.1982    bound 44.1936    transfer 3.7122    finalize 4.7127    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02476835) min lb tensor(-0.17888725)
Number of Verified Splits: 0 of 65536
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 2.13208270072937 
BICCOS Cumulative time: 14.01221489906311
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17947 (20), -0.17898 (20), -0.17889 (21), -0.17808 (20), -0.17775 (20), -0.17769 (20), -0.17748 (21), -0.17736 (20), -0.17733 (20), -0.17718 (21), -0.17678 (21), -0.17677 (20), -0.17664 (20), -0.17640 (20), -0.17639 (20), -0.17630 (20), -0.17603 (20), -0.17579 (21), -0.17573 (20), -0.17572 (20), 
Length of domains: 196608
Time: pickout 0.4868    decision 4.3654    set_bounds 4.8171    solve 12.6505    add 0.6996    
Accumulated time: pickout 2.8500    decision 23.8178    set_bounds 26.8988    solve 75.6745    add 31.8479    
Current (lb-rhs): -0.17946767807006836
393415 domains visited
Cumulative time: 176.38007402420044

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1131] [/input-8, 84] [/input-8, 84] [/input-8, 924] [/input-8, 1131] [/input-8, 84] [/input-8, 84] [/input-8, 924] [/input-8, 1131] [/input-8, 84] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1727779507637024
10 lb beta sum: 0.0, worst -0.17276209592819214
Time: prepare 2.9859    bound 7.9839    transfer 0.7722    finalize 0.4710    func 14.2928    
Accumulated time: func 88.9000    prepare 21.1847    bound 52.1774    transfer 4.4844    finalize 5.1837    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01272893) min lb tensor(-0.17270166)
Number of Verified Splits: 0 of 65536
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 2.1278181076049805 
BICCOS Cumulative time: 16.14003300666809
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17947 (20), -0.17898 (20), -0.17889 (21), -0.17808 (20), -0.17775 (20), -0.17769 (20), -0.17748 (21), -0.17736 (20), -0.17733 (20), -0.17718 (21), -0.17678 (21), -0.17677 (20), -0.17664 (20), -0.17639 (20), -0.17630 (20), -0.17603 (20), -0.17579 (21), -0.17573 (20), -0.17572 (20), -0.17556 (20), 
Length of domains: 229376
Time: pickout 0.4767    decision 4.6099    set_bounds 3.2856    solve 14.3052    add 0.6953    
Accumulated time: pickout 3.3266    decision 28.4277    set_bounds 30.1844    solve 89.9797    add 32.5432    
Current (lb-rhs): -0.17946767807006836
458951 domains visited
Time out!!!!!!!!
Result: unknown in 205.7681 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 56, vnnlib ID: 56 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.88202381, -15.77611637, -13.39399529, -17.09332085, -13.82697010,
         -18.11546516, -17.38292885, -15.74606514,  -9.08050442, -14.54284763]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [579]; unstable size 579; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 579] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 579] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 579] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 191] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.80924940,  2.66314483,  6.04739952,  2.98685789,  6.92152977,
          6.10498905,  4.46677589, -1.73226357,  3.55088186]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.88202381, -15.77611637, -13.39399529, -17.09332085, -13.82697010,
         -18.11546516, -17.38292885, -15.74606514,  -9.08050442, -14.54284763]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.88202381, -15.77611637, -13.39399529, -17.09332085, -13.82697010,
          -18.11546516, -17.38292885, -15.74606514,  -9.08050442, -14.54284763]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.80151939]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.24920666e+00,  1.67777801e+00,  1.32857168e+00,  ...,
             2.80952454e-01,  1.06349289e-01, -5.23808524e-02],
           [ 9.79365110e-01,  1.39206374e+00,  1.24920666e+00,  ...,
            -1.95237994e-01, -1.79364979e-01, -1.31745934e-01],
           [ 1.28095269e+00,  1.39206374e+00,  9.15873051e-01,  ...,
            -2.06348225e-02,  1.11112073e-02,  2.17460394e-01],
           ...,
           [-4.96825397e-01, -4.80952382e-01, -4.33333218e-01,  ...,
            -4.80952382e-01, -4.96825397e-01, -4.96825397e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.80952382e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.96825397e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01]],

          [[ 1.91626441e+00,  2.06119204e+00,  1.70692456e+00,  ...,
             1.27214205e+00,  1.15942061e+00,  1.06280196e+00],
           [ 1.72302771e+00,  1.88405824e+00,  1.83574903e+00,  ...,
             1.07890511e+00,  1.06280196e+00,  1.04669893e+00],
           [ 1.94847047e+00,  1.91626441e+00,  1.69082153e+00,  ...,
             1.19162667e+00,  1.20772982e+00,  1.30434811e+00],
           ...,
           [-3.22059989e-02, -4.83090580e-02, -3.22059989e-02,  ...,
            -6.44121096e-02, -8.05151686e-02, -8.05151686e-02],
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -3.22059989e-02],
           [-6.44121096e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -1.61029361e-02]],

          [[ 2.10045004e+00,  2.08545780e+00,  1.81559265e+00,  ...,
             1.84557760e+00,  1.80060017e+00,  1.74063015e+00],
           [ 1.96551764e+00,  1.92054021e+00,  1.96551764e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.81559265e+00],
           [ 2.08545780e+00,  1.96551764e+00,  1.96551764e+00,  ...,
             1.95052516e+00,  1.95052516e+00,  1.96551764e+00],
           ...,
           [ 2.11394474e-01,  1.21439442e-01,  1.81409463e-01,  ...,
             2.11394474e-01,  2.11394474e-01,  2.11394474e-01],
           [ 2.26386964e-01,  1.51424453e-01,  1.81409463e-01,  ...,
             2.26386964e-01,  2.26386964e-01,  2.41379470e-01],
           [ 1.81409463e-01,  1.66416958e-01,  1.96401969e-01,  ...,
             1.96401969e-01,  2.11394474e-01,  2.26386964e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0450 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 57, vnnlib ID: 57 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.99673080, -8.42243385, -3.26751232, -2.50442123, -3.13881588,
         -2.46149969, -4.81901884, -3.50631714, -8.64563560, -7.38313150]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [561]; unstable size 561; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 561] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 561] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 561] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 249] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.82033324,  4.02014875, -0.46752238, -0.34412259, -0.36842322,
          1.16381502, -0.08054897,  4.18153334,  2.90686536]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.99673080, -8.42243385, -3.26751232, -2.50442123, -3.13881588,
         -2.46149969, -4.81901884, -3.50631714, -8.64563560, -7.38313150]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.66181135, -8.20787239, -3.11358619, -2.42211366, -2.97288847,
          -2.58318949, -4.48878956, -3.49081755, -8.25464249, -7.20841789],
         [-6.66181135, -8.20787239, -3.11358619, -2.42211366, -2.97288847,
          -2.58318949, -4.48878956, -3.49081755, -8.25464249, -7.20841789]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.53039670, -0.16107583,  0.38969898,  0.90762806]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0161 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0832 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 58, vnnlib ID: 58 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.83774090, -5.62437820, -5.73738670, -5.16293812, -7.36110210,
         -6.22037792, -5.42629576, -7.85859919, -5.66585159, -6.29455137]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [486]; unstable size 486; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 486] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 486] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 486] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 197] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.56799006, -1.02534294, -0.31647980,  1.51819468,  0.67600739,
         -0.32146615,  2.05102539, -1.13650227, -0.20026422]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.83774090, -5.62437820, -5.73738670, -5.16293812, -7.36110210,
         -6.22037792, -5.42629576, -7.85859919, -5.66585159, -6.29455137]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.00282240, -5.31585503, -6.18742752, -5.74986649, -7.84297562,
          -6.85040140, -5.90831709, -8.36210918, -5.61094189, -6.28945971],
         [-6.00282240, -5.31585503, -6.18742752, -5.74986649, -7.84297562,
          -6.85040140, -5.90831709, -8.36210918, -5.61094189, -6.28945971]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.25295591, -0.43401146,  0.43756104,  0.15845060, -0.13892460,
           0.53959322]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0124 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0788 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 59, vnnlib ID: 59 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.93982983, -9.67457962, -3.81645751, -4.62450838, -3.47099352,
         -5.53091383, -3.97788739, -6.31543112, -7.47973061, -9.39750957]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [610]; unstable size 610; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 203, 1, 610] with unstable size 202 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 610] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 610] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [202]; unstable size 202; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 202] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 202] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.79685700,  4.36240816, -0.97976089, -0.08943787, -1.19198728,
          0.69136399,  1.47140527,  2.15872192,  4.19818211]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.93982983, -9.67457962, -3.81645751, -4.62450838, -3.47099352,
         -5.53091383, -3.97788739, -6.31543112, -7.47973061, -9.39750957]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.93982983, -9.67457867, -3.81645751, -4.62450838, -3.47099352,
          -5.53091431, -3.97788668, -6.31543159, -7.47973061, -9.39750862],
         [-6.93982983, -9.67457867, -3.81645751, -4.62450838, -3.47099352,
          -5.53091431, -3.97788668, -6.31543159, -7.47973061, -9.39750862]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16142917,  0.64662170, -0.50689316]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.44920623, -1.36984122, -1.52857137,  ..., -1.43333328,
            -1.35396814, -1.33809519],
           [-1.41746020, -1.40158725, -1.51269829,  ..., -1.38571417,
            -1.44920623, -1.33809519],
           [-1.57619035, -1.46507931, -1.48095226,  ..., -1.46507931,
            -1.51269829, -1.30634916],
           ...,
           [-1.78253973, -1.83015871, -1.84603179,  ..., -1.41746020,
            -1.33809519, -1.35396814],
           [-1.83015871, -1.86190474, -1.86190474,  ..., -1.65555561,
            -1.43333328, -1.46507931],
           [-1.87777781, -1.84603179, -1.83015871,  ..., -1.73492062,
            -1.43333328, -1.48095226]],

          [[-1.49758446, -1.41706920, -1.54589367,  ..., -1.49758446,
            -1.38486302, -1.32045078],
           [-1.43317223, -1.41706920, -1.49758446,  ..., -1.46537840,
            -1.49758446, -1.30434775],
           [-1.59420288, -1.48148143, -1.48148143,  ..., -1.54589367,
            -1.54589367, -1.23993552],
           ...,
           [-1.75523353, -1.81964576, -1.81964576,  ..., -1.41706920,
            -1.38486302, -1.36875999],
           [-1.78743970, -1.81964576, -1.83574879,  ..., -1.62640905,
            -1.46537840, -1.46537840],
           [-1.80354273, -1.78743970, -1.80354273,  ..., -1.69082129,
            -1.48148143, -1.46537840]],

          [[-1.31784117, -1.42278874, -1.40779614,  ..., -1.36281872,
            -1.21289361, -1.07796109],
           [-1.21289361, -1.33283365, -1.37781119,  ..., -1.39280367,
            -1.27286363, -1.06296861],
           [-1.36281872, -1.34782624, -1.39280367,  ..., -1.45277369,
            -1.31784117, -1.04797614],
           ...,
           [-1.42278874, -1.48275876, -1.46776617,  ..., -1.18290865,
            -1.30284870, -1.31784117],
           [-1.40779614, -1.43778121, -1.45277369,  ..., -1.27286363,
            -1.33283365, -1.36281872],
           [-1.42278874, -1.39280367, -1.45277369,  ..., -1.30284870,
            -1.30284870, -1.37781119]]],


         [[[-1.44920623, -1.36984122, -1.52857137,  ..., -1.43333328,
            -1.35396814, -1.33809519],
           [-1.41746020, -1.40158725, -1.51269829,  ..., -1.38571417,
            -1.44920623, -1.33809519],
           [-1.57619035, -1.46507931, -1.48095226,  ..., -1.46507931,
            -1.51269829, -1.30634916],
           ...,
           [-1.78253973, -1.83015871, -1.84603179,  ..., -1.41746020,
            -1.33809519, -1.35396814],
           [-1.83015871, -1.86190474, -1.86190474,  ..., -1.65555561,
            -1.43333328, -1.46507931],
           [-1.87777781, -1.84603179, -1.83015871,  ..., -1.73492062,
            -1.43333328, -1.48095226]],

          [[-1.49758446, -1.41706920, -1.54589367,  ..., -1.49758446,
            -1.38486302, -1.32045078],
           [-1.43317223, -1.41706920, -1.49758446,  ..., -1.46537840,
            -1.49758446, -1.30434775],
           [-1.59420288, -1.48148143, -1.48148143,  ..., -1.54589367,
            -1.54589367, -1.23993552],
           ...,
           [-1.75523353, -1.81964576, -1.81964576,  ..., -1.41706920,
            -1.38486302, -1.36875999],
           [-1.78743970, -1.81964576, -1.83574879,  ..., -1.62640905,
            -1.46537840, -1.46537840],
           [-1.80354273, -1.78743970, -1.80354273,  ..., -1.69082129,
            -1.48148143, -1.46537840]],

          [[-1.31784117, -1.42278874, -1.40779614,  ..., -1.36281872,
            -1.21289361, -1.07796109],
           [-1.21289361, -1.33283365, -1.37781119,  ..., -1.39280367,
            -1.27286363, -1.06296861],
           [-1.36281872, -1.34782624, -1.39280367,  ..., -1.45277369,
            -1.31784117, -1.04797614],
           ...,
           [-1.42278874, -1.48275876, -1.46776617,  ..., -1.18290865,
            -1.30284870, -1.31784117],
           [-1.40779614, -1.43778121, -1.45277369,  ..., -1.27286363,
            -1.33283365, -1.36281872],
           [-1.42278874, -1.39280367, -1.45277369,  ..., -1.30284870,
            -1.30284870, -1.37781119]]],


         [[[-1.44920623, -1.36984122, -1.52857137,  ..., -1.43333328,
            -1.35396814, -1.33809519],
           [-1.41746020, -1.40158725, -1.51269829,  ..., -1.38571417,
            -1.44920623, -1.33809519],
           [-1.57619035, -1.46507931, -1.48095226,  ..., -1.46507931,
            -1.51269829, -1.30634916],
           ...,
           [-1.78253973, -1.83015871, -1.84603179,  ..., -1.41746020,
            -1.33809519, -1.35396814],
           [-1.83015871, -1.86190474, -1.86190474,  ..., -1.65555561,
            -1.43333328, -1.46507931],
           [-1.87777781, -1.84603179, -1.83015871,  ..., -1.73492062,
            -1.43333328, -1.48095226]],

          [[-1.49758446, -1.41706920, -1.54589367,  ..., -1.49758446,
            -1.38486302, -1.32045078],
           [-1.43317223, -1.41706920, -1.49758446,  ..., -1.46537840,
            -1.49758446, -1.30434775],
           [-1.59420288, -1.48148143, -1.48148143,  ..., -1.54589367,
            -1.54589367, -1.23993552],
           ...,
           [-1.75523353, -1.81964576, -1.81964576,  ..., -1.41706920,
            -1.38486302, -1.36875999],
           [-1.78743970, -1.81964576, -1.83574879,  ..., -1.62640905,
            -1.46537840, -1.46537840],
           [-1.80354273, -1.78743970, -1.80354273,  ..., -1.69082129,
            -1.48148143, -1.46537840]],

          [[-1.31784117, -1.42278874, -1.40779614,  ..., -1.36281872,
            -1.21289361, -1.07796109],
           [-1.21289361, -1.33283365, -1.37781119,  ..., -1.39280367,
            -1.27286363, -1.06296861],
           [-1.36281872, -1.34782624, -1.39280367,  ..., -1.45277369,
            -1.31784117, -1.04797614],
           ...,
           [-1.42278874, -1.48275876, -1.46776617,  ..., -1.18290865,
            -1.30284870, -1.31784117],
           [-1.40779614, -1.43778121, -1.45277369,  ..., -1.27286363,
            -1.33283365, -1.36281872],
           [-1.42278874, -1.39280367, -1.45277369,  ..., -1.30284870,
            -1.30284870, -1.37781119]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0786 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 60, vnnlib ID: 60 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.75205898, -10.95473385, -15.05265713, -14.31469154, -16.47543526,
         -15.42162323, -16.59076691, -16.32046509, -12.06099701, -12.79094601]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [842]; unstable size 842; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 125, 1, 842] with unstable size 124 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 842] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 842] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [124]; unstable size 124; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 124] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 124] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.70171285,  2.55571365,  1.94688368,  4.01660776,  2.85764027,
          4.14926815,  3.74387574, -0.07238340,  1.06150901]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.75205898, -10.95473385, -15.05265713, -14.31469154, -16.47543526,
         -15.42162323, -16.59076691, -16.32046509, -12.06099701, -12.79094601]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.96it/s]100%|██████████| 1/1 [00:00<00:00,  8.95it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.24346066, -10.83120537, -14.41449451, -13.75822830, -15.91536617,
          -14.81918240, -15.97666645, -15.75282669, -11.26206684, -12.42083168]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.43086147]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1143 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 22.353851318359375
alpha/beta optimization time: 1.239654779434204
initial alpha-crown bounds: tensor([[ 1.73520613,  2.60585308,  1.99403763,  4.06510305,  2.91426325,
          4.19390965,  3.79336452, -0.03199434,  1.08410907]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.03199434280395508
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.56873774528503
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.5686960220337
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.5686719417572
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.56864309310913
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.56862378120422
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.56860494613647
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.56858658790588
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.56856656074524
Verifying property 7 with 1 instances.
##### Instance 60 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03199434]], device='cuda:0') need to verify.
Model prediction is: tensor([-13.75205898, -10.95473385, -15.05265713, -14.31469154, -16.47543526,
        -15.42162323, -16.59076691, -16.32046509, -12.06099701, -12.79094601],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03199434]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 842
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 121
Node /15 input 0: size torch.Size([100]) unstable 11
-----------------
# of unstable neurons: 974
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00012612342834472656
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03199625015258789
10 lb beta sum: 0.0, worst -0.031998634338378906
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0529    transfer 0.0001    finalize 0.0001    func 0.0534    
Accumulated time: func 0.0534    prepare 0.0002    bound 0.0529    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] 
split level 1: [/input-12, 35] 
split level 2: [/input-12, 11] 
split level 3: [/input-12, 54] 
split level 4: [/input-12, 51] 
split level 5: [/input-12, 37] 
split level 6: [/input-8, 564] 
split level 7: [/input-8, 1445] 
split level 8: [/input-8, 1890] 
split level 9: [/input-8, 170] 
split level 10: [/input-12, 4] 
split level 11: [/input-8, 817] 
split level 12: [/input-8, 865] 
split level 13: [/input-8, 686] 
split level 14: [/input-8, 1404] 
split level 15: [/input-8, 162] 
split level 16: [/input, 2728] 
split level 17: [/input-8, 1427] 
split level 18: [/input-8, 678] 
split level 19: [/input-8, 1072] 
split level 20: [/input, 1684] 
split level 21: [/input, 2299] 
split level 22: [/input, 1668] 
split level 23: [/input-8, 1337] 
split level 24: [/input, 1788] 
split level 25: [/input-8, 1637] 
split level 26: [/input, 3769] 
split level 27: [/input, 3786] 
split level 28: [/input-8, 1914] 
split level 29: [/input-8, 1499] 
split level 30: [/input, 3737] 
split level 31: [/input, 1532] 
split level 32: [/input, 3401] 
split level 33: [/input-8, 1889] 
split level 34: [/input-8, 1085] 
split level 35: [/input-8, 996] 
split level 36: [/input-8, 1751] 
split level 37: [/input-8, 825] 
split level 38: [/input, 2293] 
split level 39: [/input-8, 1500] 
split level 40: [/input-8, 1297] 
split level 41: [/input, 1670] 
split level 42: [/input, 3764] 
split level 43: [/input-8, 1759] 
split level 44: [/input, 1531] 
split level 45: [/input-8, 849] 
split level 46: [/input, 3011] 
split level 47: [/input-8, 1834] 
split level 48: [/input, 4010] 
split level 49: [/input, 1530] 
split level 50: [/input-8, 1252] 
split level 51: [/input-8, 1743] 
split level 52: [/input, 3765] 
split level 53: [/input-8, 915] 
split level 54: [/input, 3143] 
split level 55: [/input-8, 1470] 
split level 56: [/input, 3749] 
split level 57: [/input-8, 986] 
split level 58: [/input-8, 916] 
split level 59: [/input, 3384] 
split level 60: [/input, 3994] 
split level 61: [/input, 1634] 
split level 62: [/input, 3559] 
split level 63: [/input-8, 1379] 
split level 64: [/input-8, 697] 
split level 65: [/input-8, 1105] 
split level 66: [/input-8, 1588] 
split level 67: [/input, 1666] 
split level 68: [/input-8, 1447] 
split level 69: [/input, 2359] 
split level 70: [/input, 3385] 
split level 71: [/input, 3735] 
split level 72: [/input, 2184] 
split level 73: [/input, 1789] 
split level 74: [/input-8, 436] 
split level 75: [/input, 3782] 
split level 76: [/input, 3738] 
split level 77: [/input, 3781] 
split level 78: [/input, 2362] 
split level 79: [/input, 3703] 
split level 80: [/input, 1595] 
split level 81: [/input, 2995] 
split level 82: [/input, 2301] 
split level 83: [/input-8, 1868] 
split level 84: [/input, 3324] 
split level 85: [/input, 2662] 
split level 86: [/input, 2028] 
split level 87: [/input, 1671] 
split level 88: [/input, 1512] 
split level 89: [/input, 1594] 
split level 90: [/input, 2556] 
split level 91: [/input, 1604] 
split level 92: [/input, 3453] 
split level 93: [/input-8, 641] 
split level 94: [/input, 3128] 
split level 95: [/input, 2121] 
split level 96: [/input-8, 1361] 
split level 97: [/input, 2969] 
split level 98: [/input, 3420] 
split level 99: [/input, 3705] 
split level 100: [/input, 2344] 
split level 101: [/input, 1353] 
split level 102: [/input, 2027] 
split level 103: [/input, 1529] 
split level 104: [/input, 3787] 
split level 105: [/input, 3747] 
split level 106: [/input, 3129] 
split level 107: [/input, 2357] 
split level 108: [/input, 1418] 
split level 109: [/input, 3387] 
split level 110: [/input, 348] 
split level 111: [/input, 2374] 
split level 112: [/input, 3688] 
split level 113: [/input, 3368] 
split level 114: [/input, 1528] 
split level 115: [/input, 2345] 
split level 116: [/input, 2358] 
split level 117: [/input, 3704] 
split level 118: [/input, 1759] 
split level 119: [/input-8, 593] 
split level 120: [/input, 2693] 
split level 121: [/input, 2332] 
split level 122: [/input, 2659] 
split level 123: [/input, 3687] 
split level 124: [/input, 2887] 
split level 125: [/input, 2363] 
split level 126: [/input-8, 866] 
split level 127: [/input, 3868] 
split level 128: [/input, 1417] 
split level 129: [/input, 3380] 
split level 130: [/input, 3861] 
split level 131: [/input-8, 2013] 
split level 132: [/input, 2330] 
split level 133: [/input, 3381] 
split level 134: [/input, 2325] 
split level 135: [/input, 3789] 
split level 136: [/input, 2346] 
split level 137: [/input, 3863] 
split level 138: [/input, 1524] 
split level 139: [/input, 1348] 
split level 140: [/input, 2328] 
split level 141: [/input, 76] 
split level 142: [/input, 2342] 
split level 143: [/input, 3367] 
split level 144: [/input, 3352] 
split level 145: [/input, 3862] 
split level 146: [/input, 2356] 
split level 147: [/input, 3866] 
split level 148: [/input, 2331] 
split level 149: [/input, 3948] 
split level 150: [/input, 3139] 
split level 151: [/input, 2364] 
split level 152: [/input, 1778] 
split level 153: [/input, 2341] 
split level 154: [/input, 3867] 
split level 155: [/input, 3395] 
split level 156: [/input, 2026] 
split level 157: [/input, 3110] 
split level 158: [/input, 110] 
split level 159: [/input, 2347] 
split level 160: [/input, 2329] 
split level 161: [/input, 126] 
split level 162: [/input, 3021] 
split level 163: [/input, 3379] 
split level 164: [/input, 3113] 
split level 165: [/input, 3864] 
split level 166: [/input, 1596] 
split level 167: [/input, 3394] 
split level 168: [/input, 2343] 
split level 169: [/input, 3865] 
split level 170: [/input, 3351] 
split level 171: [/input, 1777] 
split level 172: [/input, 3706] 
split level 173: [/input, 2323] 
split level 174: [/input, 2326] 
split level 175: [/input, 2386] 
split level 176: [/input, 2398] 
split level 177: [/input, 83] 
split level 178: [/input, 3755] 
split level 179: [/input-8, 2029] 
split level 180: [/input, 3330] 
split level 181: [/input, 2021] 
split level 182: [/input, 3020] 
split level 183: [/input, 3336] 
split level 184: [/input, 2385] 
split level 185: [/input-8, 1792] 
split level 186: [/input, 3702] 
split level 187: [/input-8, 79] 
split level 188: [/input, 17] 
split level 189: [/input, 3365] 
split level 190: [/input, 2348] 
split level 191: [/input, 77] 
split level 192: [/input, 3334] 
split level 193: [/input, 94] 
split level 194: [/input, 3719] 
split level 195: [/input, 3340] 
split level 196: [/input, 3333] 
split level 197: [/input, 3335] 
split level 198: [/input, 1288] 
split level 199: [/input, 1289] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03195333480834961
10 lb beta sum: 0.0, worst -0.031955718994140625
Time: prepare 0.0114    bound 0.0981    transfer 0.0014    finalize 0.0029    func 0.1165    
Accumulated time: func 0.1699    prepare 0.0215    bound 0.1510    transfer 0.0015    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.23546314) min lb tensor(-0.03194857)
Number of Verified Splits: 12 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010849714279174805 
BICCOS Cumulative time: 0.010849714279174805
Preprocessing time: 0.010032892227172852 Inference time: 0.0004868507385253906 Add cuts time: 0.00015926361083984375 Cut analysis time: 0.00017070770263671875
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5105    set_bounds 0.0092    solve 0.1166    add 0.0098    
Accumulated time: pickout 0.0004    decision 0.5105    set_bounds 0.0092    solve 0.1166    add 0.0098    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 82] 
split level 1: [/input-12, 35] 
split level 2: [/input-12, 11] 
split level 3: [/input-12, 54] 
split level 4: [/input-12, 51] 
split level 5: [/input-12, 37] 
split level 6: [/input-8, 817] 
split level 7: [/input-8, 865] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.2561502456665039

all verified at 0th iter
Time: prepare 0.0050    bound 0.0043    transfer 0.0011    finalize 0.0013    func 0.0133    
Accumulated time: func 0.1833    prepare 0.0269    bound 0.1553    transfer 0.0026    finalize 0.0044    
all_split False
======================Cut inference begins======================
max lb tensor(0.50520372) min lb tensor(0.25615025)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.006992816925048828 
BICCOS Cumulative time: 0.017842531204223633
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.0217    set_bounds 0.0203    solve 0.0134    add 0.0003    
Accumulated time: pickout 0.0008    decision 0.5321    set_bounds 0.0296    solve 0.1299    add 0.0101    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.7982230186462402


Properties batch 8, size 1
Remaining timeout: 197.53568649291992
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.4644 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 61, vnnlib ID: 61 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.10208607, -11.41786957, -13.13540363, -14.61515522, -12.72880554,
         -15.42352676, -14.81626129, -14.02141857, -10.58820438, -11.90863419]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [689]; unstable size 689; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 287, 1, 689] with unstable size 286 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 689] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 689] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [286]; unstable size 286; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 286] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 286] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.29984188, -0.42211008,  0.77767426, -0.92977929,  1.27496147,
          0.91095698, -0.04363668, -2.54635906, -1.79969788]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.10208607, -11.41786957, -13.13540363, -14.61515522, -12.72880554,
         -15.42352676, -14.81626129, -14.02141857, -10.58820438, -11.90863419]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.10208607, -11.41786957, -13.13540268, -14.61515522, -12.72880459,
          -15.42352581, -14.81626034, -14.02141666, -10.58820248, -11.90863228],
         [-12.10208607, -11.41786957, -13.13540268, -14.61515522, -12.72880459,
          -15.42352581, -14.81626034, -14.02141666, -10.58820248, -11.90863228]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.68421650,  1.03331661,  0.62671852,  1.91933060, -1.51388359,
          -0.19345379]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0854 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 62, vnnlib ID: 62 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.22134018, -15.56860352, -14.70451355, -17.13485336, -15.30204296,
         -19.28796387, -19.05625916, -17.42904091,  -7.39751339, -15.77822590]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [638]; unstable size 638; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 143, 1, 638] with unstable size 142 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 638] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 638] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [142]; unstable size 142; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 142] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 142] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.70733380,  6.82938194,  6.02555180,  8.45529175,  6.40188885,
         10.40295410, 10.22137833,  8.17284584,  6.93548489]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0690 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 63, vnnlib ID: 63 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.89003658, -14.52937984,  -8.65657139, -11.09509850,  -9.84154129,
         -10.49578381, -11.10558414, -12.61307526, -14.24301243, -14.45481777]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [532]; unstable size 532; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 158, 1, 532] with unstable size 157 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 532] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 532] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [157]; unstable size 157; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 157] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 157] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.66265559,  2.43688107, -3.43360949, -0.71080703, -2.08376074,
         -1.43809295,  0.69530249,  2.01353717,  2.55464029]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.89003658, -14.52937984,  -8.65657139, -11.09509850,  -9.84154129,
         -10.49578381, -11.10558414, -12.61307526, -14.24301243, -14.45481777]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.89003754, -14.52938080,  -8.65657139, -11.09509850,  -9.84154224,
          -10.49578571, -11.10558605, -12.61307430, -14.24301243, -14.45481777],
         [-12.89003754, -14.52938080,  -8.65657139, -11.09509850,  -9.84154224,
          -10.49578571, -11.10558605, -12.61307430, -14.24301243, -14.45481777]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-2.44901466, -0.01048756, -1.26404381, -0.60980034]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]]]],
       device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0779 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 64, vnnlib ID: 64 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.45442581, -10.84073353,  -2.11443281,  -5.11572742,  -2.45199776,
          -5.34400368,  -5.73184919,  -6.24624300,  -8.44986820, -10.21909809]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 540] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 540] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 216] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.34607959,  7.68123960,  1.94801581, -0.41767764,  2.08386612,
          2.53074312,  2.96769238,  4.98291540,  6.93700123]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.45442581, -10.84073353,  -2.11443281,  -5.11572742,  -2.45199776,
          -5.34400368,  -5.73184919,  -6.24624300,  -8.44986820, -10.21909809]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.50799370, -10.83770275,  -2.31181240,  -5.03916931,  -2.23600197,
           -5.28817987,  -5.62893534,  -6.05531979,  -8.43694019, -10.15128231]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.07581043]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0061 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0755 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 65, vnnlib ID: 65 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.03724480, -11.18434811,  -9.06159973,  -6.82672215,  -8.31060886,
          -7.42542219,  -7.49326038,  -8.39577389,  -8.11735439,  -9.31811810]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 166, 1, 540] with unstable size 165 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 540] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [165]; unstable size 165; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 165] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 165] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.06153595,  2.03039980,  0.34189314, -1.49903512, -0.37442589,
         -0.95892525, -0.33255005, -0.89728761,  0.12400341]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.03724480, -11.18434811,  -9.06159973,  -6.82672215,  -8.31060886,
          -7.42542219,  -7.49326038,  -8.39577389,  -8.11735439,  -9.31811810]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.03724575, -11.18434811,  -9.06159973,  -6.82672262,  -8.31061077,
           -7.42542219,  -7.49326038,  -8.39577389,  -8.11735439,  -9.31811714],
         [ -9.03724575, -11.18434811,  -9.06159973,  -6.82672262,  -8.31061077,
           -7.42542219,  -7.49326038,  -8.39577389,  -8.11735439,  -9.31811714]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.66653776,  0.81735039, -0.06783819,  0.90251350,  0.62409401]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0778 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 66, vnnlib ID: 66 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.38867235, -7.83663368, -1.97538805, -3.76285219, -1.67582381,
         -3.71006250, -2.32488132, -4.60400915, -6.09743786, -7.12869167]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [547]; unstable size 547; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 271, 1, 547] with unstable size 270 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 547] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 547] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [270]; unstable size 270; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 270] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 270] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.79902196,  3.61575794, -1.01848149,  0.80863714,  0.56699300,
         -0.88418770,  1.54361415,  1.63250852,  3.27348614]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.38867235, -7.83663368, -1.97538805, -3.76285219, -1.67582381,
         -3.71006250, -2.32488132, -4.60400915, -6.09743786, -7.12869167]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.28951979, -7.94430733, -1.78465533, -3.82200527, -2.04371023,
          -3.80613995, -2.29286313, -4.79971743, -6.22282410, -7.35304642],
         [-4.28951979, -7.94430733, -1.78465533, -3.82200527, -2.04371023,
          -3.80613995, -2.29286313, -4.79971743, -6.22282410, -7.35304642]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.25905490,  0.24915290]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0063 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0812 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 67, vnnlib ID: 67 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.84932995, -17.33446884,  -8.64849091, -12.04424667,  -9.06044197,
         -11.72052956, -11.48574638, -12.39857960, -14.52266598, -15.66392040]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [629]; unstable size 629; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 205, 1, 629] with unstable size 204 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 629] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 629] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [204]; unstable size 204; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 204] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 204] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.34933949,  7.33656406,  2.46383572, -0.40431595,  2.07216501,
          1.93970621,  2.30366516,  4.55638123,  5.68612194]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.84932995, -17.33446884,  -8.64849091, -12.04424667,  -9.06044197,
         -11.72052956, -11.48574638, -12.39857960, -14.52266598, -15.66392040]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.19249630, -17.56005859,  -9.06513023, -12.28880787,  -9.06449413,
          -11.96904278, -11.70427704, -12.37436962, -14.73856831, -15.87618923]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00063610]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0089 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0801 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 68, vnnlib ID: 68 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.69871712, -20.69267273, -15.76616573, -14.43220711, -12.67657566,
         -14.10208035, -15.81092930,  -9.57836342, -21.12655640, -18.97427750]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [565]; unstable size 565; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 220, 1, 565] with unstable size 219 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 565] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 565] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [219]; unstable size 219; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 219] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 219] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.13234711, 8.93222618, 4.50618696, 3.55561543, 1.94738889, 3.30281496,
         4.49555874, 9.35066986, 7.40655804]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0662 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 69, vnnlib ID: 69 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.06598377, -12.28655052, -10.90278053, -11.53813744,  -9.47263813,
         -13.18623543, -12.00863743, -11.38340187,  -8.27437782, -11.53199673]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [870]; unstable size 870; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 870] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 870] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 870] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 184] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.42442596,  2.45793009,  1.12414598,  1.64930129, -0.25776523,
          3.05331516,  2.07846880,  1.21149361,  1.63006830]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.06598377, -12.28655052, -10.90278053, -11.53813744,  -9.47263813,
         -13.18623543, -12.00863743, -11.38340187,  -8.27437782, -11.53199673]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.06598473, -12.28655148, -10.90278149, -11.53813839,  -9.47263718,
          -13.18623447, -12.00863838, -11.38340282,  -8.27437973, -11.53199673],
         [ -8.06598473, -12.28655148, -10.90278149, -11.53813839,  -9.47263718,
          -13.18623447, -12.00863838, -11.38340282,  -8.27437973, -11.53199673]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.20839500,  1.19825745]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           [ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           [ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           ...,
           [-0.29047608, -0.46507925, -0.11587292,  ...,  0.13809532,
             0.02698422, -0.13174593],
           [ 0.97936511,  0.94761908,  0.99523818,  ...,  0.67777783,
             0.63015878,  0.67777783],
           [ 1.31269872,  1.29682565,  1.26507962,  ..., -0.09999990,
             0.01111121,  0.02698422]],

          [[ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           [ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           [ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           ...,
           [-0.27375188, -0.46698871, -0.12882435,  ..., -0.27375188,
            -0.32206106, -0.53140092],
           [ 0.95008057,  0.88566834,  0.91787446,  ...,  0.12882459,
             0.12882459,  0.11272153],
           [ 1.20772982,  1.17552364,  1.14331758,  ..., -0.40257636,
            -0.25764883, -0.30595800]],

          [[ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           [ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           [ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           ...,
           [-0.26836565, -0.44827583, -0.11844061,  ..., -0.64317840,
            -0.68815589, -0.85307342],
           [ 0.82608712,  0.79610211,  0.82608712,  ..., -0.46326834,
            -0.44827583, -0.44827583],
           [ 1.09595215,  1.06596720,  1.03598225,  ..., -0.73313338,
            -0.61319339, -0.65817088]]],


         [[[ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           [ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           [ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           ...,
           [-0.29047608, -0.46507925, -0.11587292,  ...,  0.13809532,
             0.02698422, -0.13174593],
           [ 0.97936511,  0.94761908,  0.99523818,  ...,  0.67777783,
             0.63015878,  0.67777783],
           [ 1.31269872,  1.29682565,  1.26507962,  ..., -0.09999990,
             0.01111121,  0.02698422]],

          [[ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           [ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           [ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           ...,
           [-0.27375188, -0.46698871, -0.12882435,  ..., -0.27375188,
            -0.32206106, -0.53140092],
           [ 0.95008057,  0.88566834,  0.91787446,  ...,  0.12882459,
             0.12882459,  0.11272153],
           [ 1.20772982,  1.17552364,  1.14331758,  ..., -0.40257636,
            -0.25764883, -0.30595800]],

          [[ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           [ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           [ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           ...,
           [-0.26836565, -0.44827583, -0.11844061,  ..., -0.64317840,
            -0.68815589, -0.85307342],
           [ 0.82608712,  0.79610211,  0.82608712,  ..., -0.46326834,
            -0.44827583, -0.44827583],
           [ 1.09595215,  1.06596720,  1.03598225,  ..., -0.73313338,
            -0.61319339, -0.65817088]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0748 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 70, vnnlib ID: 70 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.38531876,  -9.15226841,  -4.51170063,  -6.71956348,  -3.59781837,
          -7.57347631,  -2.96594071,  -8.17208290,  -9.44402599, -10.74759960]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [479]; unstable size 479; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 479] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 479] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 479] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 180] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.27840662,  4.92119646,  0.44459987,  2.50914335, -0.39846063,
          3.07961273,  3.62197137,  4.85315371,  6.55421734]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.38531876,  -9.15226841,  -4.51170063,  -6.71956348,  -3.59781837,
          -7.57347631,  -2.96594071,  -8.17208290,  -9.44402599, -10.74759960]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.02it/s]100%|██████████| 1/1 [00:00<00:00,  9.01it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.24103546,  -9.04660034,  -4.27138662,  -6.51826477,  -3.25499344,
           -7.24183655,  -3.20547986,  -7.74103117,  -9.34854984, -10.61530590]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04951358]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1136 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 29.355342864990234
alpha/beta optimization time: 1.2309646606445312
initial alpha-crown bounds: tensor([[ 3.32722855,  4.96577787,  0.48747277,  2.55622792, -0.35164094,
          3.13634515,  3.69880295,  4.92325497,  6.61187315]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.3516409397125244
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.58941745758057
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.58938074111938
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.58935499191284
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.58933281898499
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.5893144607544
Verifying property 4 with 1 instances.
##### Instance 70 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.35164094]], device='cuda:0') need to verify.
Model prediction is: tensor([ -7.38531876,  -9.15226841,  -4.51170063,  -6.71956348,  -3.59781837,
         -7.57347631,  -2.96594071,  -8.17208290,  -9.44402599, -10.74759960],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.35164094]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 479
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 180
Node /15 input 0: size torch.Size([100]) unstable 14
-----------------
# of unstable neurons: 673
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00013184547424316406
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3516402244567871
10 lb beta sum: 0.0, worst -0.35164451599121094
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0531    transfer 0.0001    finalize 0.0001    func 0.0536    
Accumulated time: func 0.0536    prepare 0.0002    bound 0.0531    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 51] 
split level 2: [/input-12, 11] 
split level 3: [/input-12, 45] 
split level 4: [/input-12, 46] 
split level 5: [/input-12, 26] 
split level 6: [/input-12, 37] 
split level 7: [/input-12, 33] 
split level 8: [/input-8, 101] 
split level 9: [/input-8, 475] 
split level 10: [/input-8, 931] 
split level 11: [/input-8, 100] 
split level 12: [/input-8, 106] 
split level 13: [/input-8, 614] 
split level 14: [/input-8, 867] 
split level 15: [/input-8, 859] 
split level 16: [/input-8, 1902] 
split level 17: [/input-8, 613] 
split level 18: [/input-8, 604] 
split level 19: [/input-8, 490] 
split level 20: [/input-8, 792] 
split level 21: [/input-8, 980] 
split level 22: [/input-8, 820] 
split level 23: [/input-8, 1819] 
split level 24: [/input-8, 435] 
split level 25: [/input-8, 876] 
split level 26: [/input-8, 102] 
split level 27: [/input-8, 821] 
split level 28: [/input-8, 987] 
split level 29: [/input-8, 426] 
split level 30: [/input-8, 290] 
split level 31: [/input-8, 114] 
split level 32: [/input-8, 1001] 
split level 33: [/input-8, 1282] 
split level 34: [/input-8, 1827] 
split level 35: [/input-8, 878] 
split level 36: [/input-8, 1449] 
split level 37: [/input-8, 1828] 
split level 38: [/input-8, 596] 
split level 39: [/input-8, 979] 
split level 40: [/input-8, 439] 
split level 41: [/input-8, 801] 
split level 42: [/input-8, 1291] 
split level 43: [/input-8, 308] 
split level 44: [/input-8, 486] 
split level 45: [/input-8, 1389] 
split level 46: [/input, 157] 
split level 47: [/input-8, 1444] 
split level 48: [/input-8, 1289] 
split level 49: [/input-8, 1299] 
split level 50: [/input-8, 1467] 
split level 51: [/input-8, 851] 
split level 52: [/input-8, 1908] 
split level 53: [/input-8, 988] 
split level 54: [/input-8, 1378] 
split level 55: [/input-8, 938] 
split level 56: [/input-8, 1818] 
split level 57: [/input-8, 1910] 
split level 58: [/input, 354] 
split level 59: [/input-8, 1007] 
split level 60: [/input-8, 1461] 
split level 61: [/input-8, 1301] 
split level 62: [/input, 3940] 
split level 63: [/input-8, 473] 
split level 64: [/input-8, 1756] 
split level 65: [/input-8, 82] 
split level 66: [/input-8, 497] 
split level 67: [/input-8, 1014] 
split level 68: [/input-8, 1300] 
split level 69: [/input-8, 419] 
split level 70: [/input-8, 1425] 
split level 71: [/input, 3543] 
split level 72: [/input, 119] 
split level 73: [/input-8, 418] 
split level 74: [/input, 3477] 
split level 75: [/input, 3945] 
split level 76: [/input, 1753] 
split level 77: [/input, 3413] 
split level 78: [/input, 3938] 
split level 79: [/input, 1431] 
split level 80: [/input, 1368] 
split level 81: [/input-8, 998] 
split level 82: [/input, 2151] 
split level 83: [/input, 679] 
split level 84: [/input-8, 407] 
split level 85: [/input, 1195] 
split level 86: [/input-8, 1820] 
split level 87: [/input-8, 425] 
split level 88: [/input, 173] 
split level 89: [/input-8, 1302] 
split level 90: [/input-8, 1450] 
split level 91: [/input, 2281] 
split level 92: [/input-8, 526] 
split level 93: [/input, 2135] 
split level 94: [/input-8, 2022] 
split level 95: [/input-8, 962] 
split level 96: [/input-8, 995] 
split level 97: [/input-8, 2039] 
split level 98: [/input, 3561] 
split level 99: [/input, 3957] 
split level 100: [/input, 408] 
split level 101: [/input-8, 120] 
split level 102: [/input-8, 1893] 
split level 103: [/input, 99] 
split level 104: [/input, 3975] 
split level 105: [/input, 3527] 
split level 106: [/input-8, 993] 
split level 107: [/input-8, 1258] 
split level 108: [/input, 98] 
split level 109: [/input, 2394] 
split level 110: [/input-8, 104] 
split level 111: [/input-8, 504] 
split level 112: [/input, 1432] 
split level 113: [/input, 3787] 
split level 114: [/input-8, 466] 
split level 115: [/input-8, 1398] 
split level 116: [/input, 137] 
split level 117: [/input, 1510] 
split level 118: [/input-8, 399] 
split level 119: [/input-8, 1437] 
split level 120: [/input-8, 592] 
split level 121: [/input, 3925] 
split level 122: [/input, 1526] 
split level 123: [/input, 2393] 
split level 124: [/input-8, 1293] 
split level 125: [/input, 2391] 
split level 126: [/input, 1847] 
split level 127: [/input, 3786] 
split level 128: [/input-8, 1925] 
split level 129: [/input-8, 521] 
split level 130: [/input-8, 2015] 
split level 131: [/input, 1848] 
split level 132: [/input, 2183] 
split level 133: [/input-8, 1441] 
split level 134: [/input, 1382] 
split level 135: [/input-8, 1433] 
split level 136: [/input, 2010] 
split level 137: [/input, 2009] 
split level 138: [/input, 2167] 
split level 139: [/input-8, 1277] 
split level 140: [/input-8, 510] 
split level 141: [/input-8, 507] 
split level 142: [/input, 3021] 
split level 143: [/input, 4011] 
split level 144: [/input, 1865] 
split level 145: [/input, 3513] 
split level 146: [/input-8, 1137] 
split level 147: [/input, 1726] 
split level 148: [/input-8, 305] 
split level 149: [/input, 1864] 
split level 150: [/input, 3475] 
split level 151: [/input, 2013] 
split level 152: [/input, 1850] 
split level 153: [/input, 2363] 
split level 154: [/input-8, 1799] 
split level 155: [/input, 1907] 
split level 156: [/input, 2997] 
split level 157: [/input, 1802] 
split level 158: [/input, 1863] 
split level 159: [/input, 1121] 
split level 160: [/input-8, 532] 
split level 161: [/input, 2028] 
split level 162: [/input, 1478] 
split level 163: [/input-8, 513] 
split level 164: [/input, 1995] 
split level 165: [/input, 3953] 
split level 166: [/input-8, 1027] 
split level 167: [/input, 2266] 
split level 168: [/input, 3921] 
split level 169: [/input, 1845] 
split level 170: [/input, 1934] 
split level 171: [/input, 1917] 
split level 172: [/input, 3132] 
split level 173: [/input, 3006] 
split level 174: [/input, 1604] 
split level 175: [/input, 1829] 
split level 176: [/input, 1882] 
split level 177: [/input-8, 1405] 
split level 178: [/input, 1957] 
split level 179: [/input, 1884] 
split level 180: [/input, 111] 
split level 181: [/input, 1827] 
split level 182: [/input-8, 1307] 
split level 183: [/input, 3159] 
split level 184: [/input, 378] 
split level 185: [/input, 1552] 
split level 186: [/input, 1862] 
split level 187: [/input, 1994] 
split level 188: [/input, 1977] 
split level 189: [/input, 1587] 
split level 190: [/input, 1866] 
split level 191: [/input, 3709] 
split level 192: [/input, 1900] 
split level 193: [/input-8, 698] 
split level 194: [/input-8, 127] 
split level 195: [/input, 1857] 
split level 196: [/input-8, 65] 
split level 197: [/input, 2051] 
split level 198: [/input, 1852] 
split level 199: [/input, 2179] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3516082763671875
10 lb beta sum: 0.0, worst -0.35161256790161133
Time: prepare 0.0114    bound 0.0981    transfer 0.0013    finalize 0.0027    func 0.1162    
Accumulated time: func 0.1698    prepare 0.0215    bound 0.1513    transfer 0.0014    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.19675720) min lb tensor(-0.35160828)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010635614395141602 
BICCOS Cumulative time: 0.010635614395141602
Preprocessing time: 0.009959697723388672 Inference time: 7.486343383789062e-05 Add cuts time: 4.601478576660156e-05 Cut analysis time: 0.0005550384521484375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.33823 (1), -0.33715 (1), -0.33635 (1), -0.33631 (1), -0.33497 (1), -0.33488 (1), -0.33475 (1), -0.33452 (1), -0.33412 (1), -0.33337 (1), -0.33330 (1), -0.33300 (1), -0.33253 (1), -0.33237 (1), -0.33209 (1), -0.33160 (1), -0.33035 (1), -0.32821 (1), -0.32744 (1), -0.32738 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5150    set_bounds 0.0092    solve 0.1163    add 0.1428    
Accumulated time: pickout 0.0004    decision 0.5150    set_bounds 0.0092    solve 0.1163    add 0.1428    
Current (lb-rhs): -0.3382301330566406
50 domains visited
Cumulative time: 0.8650507926940918

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] 
split level 1: [/input-12, 45] [/input-12, 45] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 2: [/input-12, 46] [/input-12, 46] [/input-12, 45] [/input-12, 46] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 3: [/input-12, 37] [/input-12, 37] [/input-12, 46] [/input-12, 37] [/input-12, 37] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3120913505554199
10 lb beta sum: 0.19730766117572784, worst -0.311032772064209
Time: prepare 0.0074    bound 0.1176    transfer 0.0008    finalize 0.0026    func 0.1310    
Accumulated time: func 0.3007    prepare 0.0291    bound 0.2688    transfer 0.0022    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.04132032) min lb tensor(-0.31071305)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.012020587921142578 
BICCOS Cumulative time: 0.02265620231628418
Preprocessing time: 0.011573076248168945 Inference time: 0.0001423358917236328 Add cuts time: 6.818771362304688e-05 Cut analysis time: 0.00023698806762695312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10087 (2), -0.10067 (2), -0.09642 (2), -0.09587 (2), -0.09548 (2), -0.09443 (2), -0.09401 (2), -0.09333 (2), -0.09282 (2), -0.09238 (2), -0.09181 (2), -0.09103 (2), -0.09060 (2), -0.08926 (2), -0.08910 (2), -0.08712 (2), -0.08649 (2), -0.08588 (2), -0.08549 (2), -0.08474 (2), 
Length of domains: 50
Time: pickout 0.0082    decision 0.0218    set_bounds 0.0122    solve 0.1310    add 0.2060    
Accumulated time: pickout 0.0085    decision 0.5367    set_bounds 0.0214    solve 0.2473    add 0.3488    
Current (lb-rhs): -0.10086679458618164
100 domains visited
Cumulative time: 1.263890027999878

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 45] [/input-12, 46] [/input-12, 46] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 2: [/input-12, 46] [/input-12, 26] [/input-12, 26] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 26] 
split level 3: [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07437515258789062
10 lb beta sum: 0.34651729464530945, worst -0.10823690891265869
Time: prepare 0.0074    bound 0.1193    transfer 0.0008    finalize 0.0022    func 0.1323    
Accumulated time: func 0.4330    prepare 0.0368    bound 0.3881    transfer 0.0030    finalize 0.0076    
all_split False
======================Cut inference begins======================
max lb tensor(0.12435746) min lb tensor(-0.06651640)
Number of Verified Splits: 163 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 14
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.022787094116210938 
BICCOS Cumulative time: 0.04544329643249512
Preprocessing time: 0.011495351791381836 Inference time: 0.006907939910888672 Add cuts time: 0.0038144588470458984 Cut analysis time: 0.0005693435668945312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01719 (3), -0.01693 (3), -0.01683 (3), -0.01672 (3), -0.01668 (3), -0.01633 (3), -0.01573 (3), -0.01453 (3), -0.01393 (3), -0.01387 (3), -0.01358 (3), -0.01354 (3), -0.01351 (3), -0.01336 (3), -0.01320 (3), -0.01291 (3), -0.01257 (3), -0.01256 (3), -0.01248 (3), -0.01243 (3), 
Length of domains: 50
Time: pickout 0.0077    decision 0.0199    set_bounds 0.0156    solve 0.1323    add 0.2140    
Accumulated time: pickout 0.0162    decision 0.5567    set_bounds 0.0370    solve 0.3797    add 0.5628    
Current (lb-rhs): -0.01719355583190918
150 domains visited
Cumulative time: 1.6836893558502197

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 51] [/input-12, 51] [/input-12, 11] [/input-12, 51] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 46] [/input-12, 45] [/input-12, 45] 
split level 2: [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 46] [/input-12, 26] [/input-12, 26] [/input-12, 46] 
split level 3: [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 26] [/input-12, 37] [/input-12, 37] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027193427085876465
10 lb beta sum: 1.7352899312973022, worst -0.08835959434509277
Time: prepare 0.0070    bound 0.1353    transfer 0.0012    finalize 0.0021    func 0.1482    
Accumulated time: func 0.5813    prepare 0.0441    bound 0.5234    transfer 0.0041    finalize 0.0097    
all_split False
======================Cut inference begins======================
max lb tensor(0.35901725) min lb tensor(-0.00745595)
Number of Verified Splits: 394 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.039565086364746094 
BICCOS Cumulative time: 0.08500838279724121
Preprocessing time: 0.011360883712768555 Inference time: 0.017805099487304688 Add cuts time: 0.010082244873046875 Cut analysis time: 0.00031685829162597656
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0077    decision 0.0205    set_bounds 0.0161    solve 0.1483    add 0.0223    
Accumulated time: pickout 0.0239    decision 0.5771    set_bounds 0.0531    solve 0.5280    add 0.5851    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 51] 
split level 1: [/input-12, 11] 
split level 2: [/input-12, 45] 
split level 3: [/input-12, 46] 
split level 4: [/input-12, 26] 
split level 5: [/input-12, 37] 
split level 6: [/input-12, 33] 
split level 7: [/input-8, 101] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14693212509155273
10 lb beta sum: 0.11678919941186905, worst -0.14604997634887695
Time: prepare 0.0051    bound 0.1302    transfer 0.0008    finalize 0.0014    func 0.1391    
Accumulated time: func 0.7204    prepare 0.0497    bound 0.6536    transfer 0.0049    finalize 0.0111    
all_split False
======================Cut inference begins======================
max lb tensor(0.32858133) min lb tensor(-0.14580727)
Number of Verified Splits: 192 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2552051544189453
10 lb beta sum: 0.38467153906822205, worst -0.20778989791870117
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 4
#cuts 4-6: 11
#cuts 7-9: 11
#cuts >= 20: 0
BICCOS time: 0.3925971984863281 
BICCOS Cumulative time: 0.47760558128356934
Preprocessing time: 0.0070950984954833984 Inference time: 0.3804159164428711 Add cuts time: 0.003754138946533203 Cut analysis time: 0.0013320446014404297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14581 (8), -0.14215 (8), -0.13908 (8), -0.13538 (8), -0.12717 (8), -0.12313 (8), -0.11967 (8), -0.11843 (8), -0.11601 (8), -0.11428 (8), -0.11367 (8), -0.10842 (8), -0.10629 (8), -0.10498 (8), -0.10310 (8), -0.10079 (8), -0.10073 (8), -0.09916 (8), -0.09888 (8), -0.09487 (8), 
Length of domains: 64
Time: pickout 0.0004    decision 0.0235    set_bounds 0.0204    solve 0.1392    add 0.0625    
Accumulated time: pickout 0.0243    decision 0.6006    set_bounds 0.0735    solve 0.6672    add 0.6476    
Current (lb-rhs): -0.14580726623535156
214 domains visited
Cumulative time: 2.591435194015503

BaB round 2
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 100] [/input-8, 100] [/input-8, 100] [/input-8, 100] [/input-8, 100] [/input-8, 100] [/input-8, 100] [/input-8, 100] [/input-8, 100] [/input-8, 100] 
split level 1: [/input-8, 614] [/input-8, 613] [/input-8, 859] [/input-8, 613] [/input-8, 614] [/input-8, 613] [/input-8, 859] [/input-8, 613] [/input-8, 614] [/input-8, 604] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13309788703918457
10 lb beta sum: 0.18343448638916016, worst -0.13238263130187988
Time: prepare 0.0051    bound 0.1332    transfer 0.0006    finalize 0.0012    func 0.1419    
Accumulated time: func 0.8623    prepare 0.0549    bound 0.7868    transfer 0.0055    finalize 0.0123    
all_split False
======================Cut inference begins======================
max lb tensor(0.02070570) min lb tensor(-0.13218737)
Number of Verified Splits: 28 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15279531478881836
10 lb beta sum: 0.4635809063911438, worst -0.09112448990345001
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 4
#cuts 4-6: 11
#cuts 7-9: 14
#cuts >= 20: 0
BICCOS time: 0.16566920280456543 
BICCOS Cumulative time: 0.6432747840881348
Preprocessing time: 0.008008241653442383 Inference time: 0.15450191497802734 Add cuts time: 0.0015692710876464844 Cut analysis time: 0.0015897750854492188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13219 (10), -0.12833 (10), -0.12322 (10), -0.12151 (10), -0.12112 (10), -0.11937 (10), -0.11803 (10), -0.11751 (10), -0.11538 (10), -0.11451 (10), -0.11444 (10), -0.11355 (10), -0.11151 (10), -0.11113 (10), -0.11030 (10), -0.11029 (10), -0.10837 (10), -0.10650 (10), -0.10539 (10), -0.10515 (10), 
Length of domains: 228
Time: pickout 0.0073    decision 0.0144    set_bounds 0.0120    solve 0.1420    add 0.0816    
Accumulated time: pickout 0.0316    decision 0.6150    set_bounds 0.0855    solve 0.8092    add 0.7292    
Current (lb-rhs): -0.1321873664855957
442 domains visited
Cumulative time: 3.0188658237457275

BaB round 3
batch: 228
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 106] [/input-8, 106] [/input-8, 106] [/input-8, 102] [/input-8, 604] [/input-8, 614] [/input-8, 859] [/input-8, 604] [/input-8, 613] [/input-8, 614] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12413167953491211
10 lb beta sum: 0.1869230419397354, worst -0.12346625328063965
Time: prepare 0.0090    bound 0.1389    transfer 0.0010    finalize 0.0025    func 0.1543    
Accumulated time: func 1.0165    prepare 0.0641    bound 0.9257    transfer 0.0064    finalize 0.0148    
all_split False
======================Cut inference begins======================
max lb tensor(0.01946068) min lb tensor(-0.12332511)
Number of Verified Splits: 42 of 456
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts 7-9: 15
#cuts >= 20: 0
BICCOS time: 0.021944761276245117 
BICCOS Cumulative time: 0.6652195453643799
Preprocessing time: 0.012908458709716797 Inference time: 0.004041910171508789 Add cuts time: 0.003213167190551758 Cut analysis time: 0.0017812252044677734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12333 (11), -0.12246 (11), -0.11993 (11), -0.11826 (11), -0.11678 (11), -0.11314 (11), -0.11289 (11), -0.11187 (11), -0.11111 (11), -0.11067 (11), -0.10882 (11), -0.10875 (11), -0.10858 (11), -0.10822 (11), -0.10795 (11), -0.10749 (11), -0.10743 (11), -0.10606 (11), -0.10555 (11), -0.10522 (11), 
Length of domains: 414
Time: pickout 0.0162    decision 0.0230    set_bounds 0.0193    solve 0.1544    add 0.0663    
Accumulated time: pickout 0.0478    decision 0.6380    set_bounds 0.1048    solve 0.9636    add 0.7955    
Current (lb-rhs): -0.12332510948181152
856 domains visited
Cumulative time: 3.327627182006836

BaB round 4
batch: 414
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 102] [/input-8, 614] [/input-8, 613] [/input-8, 614] [/input-8, 102] [/input-8, 820] [/input-8, 102] [/input-8, 614] [/input-8, 106] [/input-8, 859] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1179499626159668
10 lb beta sum: 0.18500275909900665, worst -0.11745023727416992
Time: prepare 0.0160    bound 0.1428    transfer 0.0013    finalize 0.0033    func 0.1689    
Accumulated time: func 1.1854    prepare 0.0803    bound 1.0685    transfer 0.0078    finalize 0.0181    
all_split False
======================Cut inference begins======================
max lb tensor(0.02905114) min lb tensor(-0.11736512)
Number of Verified Splits: 105 of 828
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 49.
#cuts 1-3: 4
#cuts 4-6: 29
#cuts 7-9: 16
#cuts >= 20: 0
BICCOS time: 0.04264664649963379 
BICCOS Cumulative time: 0.7078661918640137
Preprocessing time: 0.0235748291015625 Inference time: 0.01115870475769043 Add cuts time: 0.005662679672241211 Cut analysis time: 0.0022504329681396484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11737 (12), -0.11667 (12), -0.11366 (12), -0.11358 (12), -0.11208 (12), -0.11200 (12), -0.11041 (12), -0.10815 (12), -0.10794 (12), -0.10749 (12), -0.10724 (12), -0.10595 (12), -0.10500 (12), -0.10401 (12), -0.10384 (12), -0.10355 (12), -0.10258 (12), -0.10244 (12), -0.10238 (12), -0.10188 (12), 
Length of domains: 723
Time: pickout 0.0180    decision 0.0343    set_bounds 0.0353    solve 0.1691    add 0.1223    
Accumulated time: pickout 0.0658    decision 0.6723    set_bounds 0.1401    solve 1.1327    add 0.9178    
Current (lb-rhs): -0.11736512184143066
1579 domains visited
Cumulative time: 3.7674155235290527

BaB round 5
batch: 723
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 613] [/input-8, 102] [/input-8, 859] [/input-8, 859] [/input-8, 613] [/input-8, 614] [/input-8, 613] [/input-8, 820] [/input-8, 102] [/input-8, 859] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11260604858398438
10 lb beta sum: 0.1899711638689041, worst -0.11205053329467773
Time: prepare 0.0303    bound 0.1702    transfer 0.0107    finalize 0.0083    func 0.2307    
Accumulated time: func 1.4161    prepare 0.1109    bound 1.2386    transfer 0.0185    finalize 0.0264    
all_split False
======================Cut inference begins======================
max lb tensor(0.02467674) min lb tensor(-0.11200285)
Number of Verified Splits: 271 of 1446
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 59.
#cuts 1-3: 4
#cuts 4-6: 36
#cuts 7-9: 19
#cuts >= 20: 0
BICCOS time: 0.08983564376831055 
BICCOS Cumulative time: 0.7977018356323242
Preprocessing time: 0.048470258712768555 Inference time: 0.030378341674804688 Add cuts time: 0.008199691772460938 Cut analysis time: 0.002787351608276367
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11200 (13), -0.11129 (13), -0.10912 (13), -0.10840 (13), -0.10824 (13), -0.10796 (13), -0.10654 (13), -0.10630 (13), -0.10534 (13), -0.10498 (13), -0.10479 (13), -0.10361 (13), -0.10314 (13), -0.10258 (13), -0.10251 (13), -0.10213 (13), -0.10174 (13), -0.10025 (13), -0.09967 (13), -0.09960 (13), 
Length of domains: 1175
Time: pickout 0.0741    decision 0.0629    set_bounds 0.0680    solve 0.2322    add 0.0946    
Accumulated time: pickout 0.1399    decision 0.7352    set_bounds 0.2081    solve 1.3649    add 1.0124    
Current (lb-rhs): -0.11200284957885742
2754 domains visited
Cumulative time: 4.400512456893921

BaB round 6
batch: 1175
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 820] [/input-8, 820] [/input-8, 820] [/input-8, 820] [/input-8, 820] [/input-8, 106] [/input-8, 820] [/input-8, 820] [/input-8, 102] [/input-8, 820] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10634803771972656
10 lb beta sum: 0.19363252818584442, worst -0.1058340072631836
Time: prepare 0.0476    bound 0.1969    transfer 0.0062    finalize 0.1708    func 0.4387    
Accumulated time: func 1.8548    prepare 0.1590    bound 1.4356    transfer 0.0247    finalize 0.1972    
all_split False
======================Cut inference begins======================
max lb tensor(0.28742415) min lb tensor(-0.10579014)
Number of Verified Splits: 434 of 2350
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 9
#cuts 4-6: 14
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.139176607131958 
BICCOS Cumulative time: 0.9368784427642822
Preprocessing time: 0.07578349113464355 Inference time: 0.052921295166015625 Add cuts time: 0.00931859016418457 Cut analysis time: 0.0011532306671142578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10579 (14), -0.10534 (14), -0.10351 (14), -0.10295 (14), -0.10257 (14), -0.10248 (14), -0.10157 (14), -0.10118 (14), -0.10088 (14), -0.10066 (14), -0.09976 (14), -0.09971 (14), -0.09966 (14), -0.09927 (14), -0.09871 (14), -0.09816 (14), -0.09811 (14), -0.09801 (14), -0.09799 (14), -0.09781 (14), 
Length of domains: 1916
Time: pickout 0.0334    decision 0.0858    set_bounds 0.1086    solve 0.4393    add 0.1278    
Accumulated time: pickout 0.1733    decision 0.8210    set_bounds 0.3166    solve 1.8042    add 1.1401    
Current (lb-rhs): -0.1057901382446289
4670 domains visited
Cumulative time: 5.348524570465088

BaB round 7
batch: 1916
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 859] [/input-8, 821] [/input-8, 821] [/input-8, 821] [/input-8, 106] [/input-8, 821] [/input-8, 821] [/input-8, 859] [/input-8, 604] [/input-8, 821] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1046762466430664
10 lb beta sum: 0.41717350482940674, worst -0.10414648056030273
Time: prepare 0.0824    bound 0.2808    transfer 0.0412    finalize 0.0238    func 0.4542    
Accumulated time: func 2.3090    prepare 0.2417    bound 1.7163    transfer 0.0658    finalize 0.2210    
all_split False
======================Cut inference begins======================
max lb tensor(0.59170067) min lb tensor(-0.10411167)
Number of Verified Splits: 2537 of 3832
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.717667818069458 
BICCOS Cumulative time: 1.6545462608337402
Preprocessing time: 0.13100218772888184 Inference time: 0.5415544509887695 Add cuts time: 0.0443730354309082 Cut analysis time: 0.0007381439208984375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10411 (15), -0.10363 (15), -0.10169 (15), -0.10094 (15), -0.10003 (15), -0.09984 (15), -0.09917 (15), -0.09809 (15), -0.09793 (15), -0.09626 (15), -0.09618 (15), -0.09615 (15), -0.09470 (15), -0.09434 (15), -0.09295 (15), -0.09167 (15), -0.09154 (15), -0.09136 (15), -0.09126 (15), -0.09034 (15), 
Length of domains: 1295
Time: pickout 0.0320    decision 0.1173    set_bounds 0.1728    solve 0.4553    add 0.1172    
Accumulated time: pickout 0.2053    decision 0.9383    set_bounds 0.4895    solve 2.2595    add 1.2573    
Current (lb-rhs): -0.1041116714477539
5965 domains visited
Cumulative time: 7.00858473777771

BaB round 8
batch: 1295
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1827] [/input-8, 106] [/input-8, 290] [/input-8, 867] [/input-8, 1827] [/input-8, 290] [/input-8, 1827] [/input-8, 106] [/input-8, 106] [/input-8, 867] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10157322883605957
10 lb beta sum: 1.483363151550293, worst -0.0959877222776413
Time: prepare 0.0579    bound 0.2099    transfer 0.0079    finalize 0.0141    func 0.3081    
Accumulated time: func 2.6171    prepare 0.3000    bound 1.9262    transfer 0.0737    finalize 0.2351    
all_split False
======================Cut inference begins======================
max lb tensor(0.92759782) min lb tensor(-0.09593207)
Number of Verified Splits: 2428 of 2590
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 25
#cuts >= 20: 0
BICCOS time: 0.4144442081451416 
BICCOS Cumulative time: 2.068990468978882
Preprocessing time: 0.08527183532714844 Inference time: 0.2982442378997803 Add cuts time: 0.030236005783081055 Cut analysis time: 0.0006921291351318359
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09593 (16), -0.09282 (16), -0.08559 (16), -0.08406 (16), -0.08248 (16), -0.08098 (16), -0.08043 (16), -0.07899 (16), -0.07882 (16), -0.07761 (16), -0.07732 (16), -0.07685 (16), -0.07541 (16), -0.07523 (16), -0.07413 (16), -0.07401 (16), -0.07246 (16), -0.06889 (16), -0.06735 (16), -0.06716 (16), 
Length of domains: 162
Time: pickout 0.0795    decision 0.0899    set_bounds 0.1199    solve 0.3091    add 0.0761    
Accumulated time: pickout 0.2848    decision 1.0283    set_bounds 0.6093    solve 2.5686    add 1.3334    
Current (lb-rhs): -0.09593206644058228
6127 domains visited
Cumulative time: 8.129131555557251

BaB round 9
batch: 162
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 821] [/input-8, 290] [/input-8, 821] [/input-8, 821] [/input-8, 290] [/input-8, 102] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 821] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09482955932617188
10 lb beta sum: 2.1760523319244385, worst -0.0773056149482727
Time: prepare 0.0070    bound 0.1411    transfer 0.0008    finalize 0.0025    func 0.1536    
Accumulated time: func 2.7706    prepare 0.3072    bound 2.0673    transfer 0.0745    finalize 0.2376    
all_split False
======================Cut inference begins======================
max lb tensor(0.67052031) min lb tensor(-0.07729277)
Number of Verified Splits: 225 of 324
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.041661977767944336 
BICCOS Cumulative time: 2.110652446746826
Preprocessing time: 0.009868383407592773 Inference time: 0.028806447982788086 Add cuts time: 0.0027718544006347656 Cut analysis time: 0.00021529197692871094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07729 (17), -0.07410 (17), -0.07371 (17), -0.07055 (17), -0.06850 (17), -0.06500 (17), -0.06411 (17), -0.06054 (17), -0.06054 (17), -0.05856 (17), -0.05705 (17), -0.05540 (17), -0.05534 (17), -0.05425 (17), -0.05236 (17), -0.05191 (17), -0.05114 (17), -0.04965 (17), -0.04887 (17), -0.04797 (17), 
Length of domains: 99
Time: pickout 0.0164    decision 0.0215    set_bounds 0.0144    solve 0.1536    add 0.0686    
Accumulated time: pickout 0.3012    decision 1.0497    set_bounds 0.6237    solve 2.7222    add 1.4020    
Current (lb-rhs): -0.07729277014732361
6226 domains visited
Cumulative time: 8.455227851867676

BaB round 10
batch: 99
splitting decisions: 
split level 0: [/input-8, 426] [/input-8, 426] [/input-8, 426] [/input-8, 426] [/input-8, 426] [/input-8, 821] [/input-8, 426] [/input-8, 821] [/input-8, 821] [/input-8, 821] 
split level 1: [/input-8, 1827] [/input-8, 1827] [/input-8, 1827] [/input-8, 1827] [/input-8, 1827] [/input-8, 1827] [/input-8, 1827] [/input-8, 1827] [/input-8, 1827] [/input-8, 1827] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08717083930969238

all verified at 2th iter
Time: prepare 0.0079    bound 0.0201    transfer 0.0012    finalize 0.0020    func 0.0345    
Accumulated time: func 2.8051    prepare 0.3153    bound 2.0874    transfer 0.0757    finalize 0.2396    
all_split False
======================Cut inference begins======================
max lb tensor(0.07904271) min lb tensor(0.01185419)
Number of Verified Splits: 396 of 396
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011478662490844727 
BICCOS Cumulative time: 2.122131109237671
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0138    decision 0.0206    set_bounds 0.0185    solve 0.0346    add 0.0005    
Accumulated time: pickout 0.3150    decision 1.0704    set_bounds 0.6423    solve 2.7569    add 1.4025    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
6226 domains visited
Cumulative time: 8.556554555892944


Properties batch 5, size 1
Remaining timeout: 189.81570839881897
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 189.81561589241028
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 189.81559038162231
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 189.8155701160431
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 10.1848 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 71, vnnlib ID: 71 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.23181081, -6.13865471, -5.08255959, -5.81894684, -5.10377789,
         -6.43214750, -5.88667679, -5.84751606, -6.03846073, -6.48124504]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [600]; unstable size 600; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 134, 1, 600] with unstable size 133 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 600] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 600] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [133]; unstable size 133; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 133] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 133] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.68216181, 2.01670504, 2.51456165, 1.81788015, 2.98190999, 2.39753675,
         2.20995498, 2.77434254, 3.16959429]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0836 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 72, vnnlib ID: 72 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.04805279, -11.81328869,  -6.59518147,  -6.36475563,  -7.03116512,
          -6.60425329,  -7.20965433,  -8.31397438,  -8.97400188, -10.04430199]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [644]; unstable size 644; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 218, 1, 644] with unstable size 217 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 644] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 644] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [217]; unstable size 217; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 217] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 217] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.59573561,  3.84289026, -0.66203940, -0.35017091, -0.20632467,
          0.11054787,  0.49438119,  0.95489407,  1.85776711]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.04805279, -11.81328869,  -6.59518147,  -6.36475563,  -7.03116512,
          -6.60425329,  -7.20965433,  -8.31397438,  -8.97400188, -10.04430199]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.45969152, -12.50387001,  -6.75212955,  -7.02717876,  -7.47408676,
           -7.30156040,  -7.84784174,  -8.79535866,  -9.60956287, -10.84120369],
         [ -7.45969152, -12.50387001,  -6.75212955,  -7.02717876,  -7.47408676,
           -7.30156040,  -7.84784174,  -8.79535866,  -9.60956287, -10.84120369]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.43251276, -0.27504921,  0.44690800,  0.27438164]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0075 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0745 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 73, vnnlib ID: 73 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.91584206, -11.23733044,  -4.95584011,  -5.17609406,  -4.67090321,
          -5.68216658,  -2.94505668,  -7.65497255, -10.49558067, -10.30911922]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [530]; unstable size 530; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 286, 1, 530] with unstable size 285 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 530] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 530] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [285]; unstable size 285; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 285] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 285] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.01592398, 5.78018808, 0.67337418, 0.94682014, 0.40892148, 1.18366766,
         2.78911281, 4.93772936, 4.91414595]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0722 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 74, vnnlib ID: 74 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.75821781, -13.33421040,  -9.89368343,  -9.90017796,  -8.64980602,
          -9.78042221,  -9.99710751,  -4.75752258, -13.64687443, -11.43529987]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [557]; unstable size 557; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 557] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 557] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 557] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 216] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.65111065, 6.98895836, 3.93457913, 3.96870136, 2.90565825, 3.92689133,
         3.80601048, 7.22786236, 5.19847012]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0754 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 75, vnnlib ID: 75 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.29954243, -11.45261860, -13.34986973, -13.67515564, -13.40554333,
         -14.42231846, -13.27403164, -13.71299839, -10.82265949, -11.58751392]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [682]; unstable size 682; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 682] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 682] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 682] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 184] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.10945773,  1.98779726,  2.28032899,  1.90550256,  2.75677037,
          1.69960523,  1.94380963, -0.60779387, -0.09704113]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.29954243, -11.45261860, -13.34986973, -13.67515564, -13.40554333,
         -14.42231846, -13.27403164, -13.71299839, -10.82265949, -11.58751392]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.56808662, -11.42974663, -13.45270157, -13.65275669, -13.48646450,
          -14.33638859, -13.28952789, -13.75271511, -10.36225224, -11.49094582],
         [-10.56808662, -11.42974663, -13.45270157, -13.65275669, -13.48646450,
          -14.33638859, -13.28952789, -13.75271511, -10.36225224, -11.49094582]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.86166000, -0.20583439,  0.92285919]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0067 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0793 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 76, vnnlib ID: 76 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.85307121, -8.24333668, -2.96728778, -1.66786790, -3.85206652,
         -1.00410879, -4.09244967, -4.12650394, -7.75833988, -6.65997744]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [554]; unstable size 554; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 227, 1, 554] with unstable size 226 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 554] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 554] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [226]; unstable size 226; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 226] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 226] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.37778521, 5.08529711, 0.43795538, 0.25316495, 1.50299835, 1.94422305,
         2.22069526, 4.52716446, 3.75112295]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0935 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 77, vnnlib ID: 77 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.27097034, -11.59263897, -13.77681637, -13.17456245, -13.49902725,
         -13.92919827, -14.42542553, -14.19969749,  -9.72965145,  -9.57371902]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [484]; unstable size 484; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 175, 1, 484] with unstable size 174 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 484] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 484] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [174]; unstable size 174; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 174] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.28471565,  1.18307209,  2.52050543,  2.22602749,  2.26000214,
          2.91944194,  3.25191450,  3.06435537, -1.13768911]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.27097034, -11.59263897, -13.77681637, -13.17456245, -13.49902725,
         -13.92919827, -14.42542553, -14.19969749,  -9.72965145,  -9.57371902]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.00729084, -11.61149406, -13.44780445, -12.92614937, -13.19767094,
          -13.75501728, -14.04838467, -14.12834930,  -9.19971180,  -9.85693741]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.65722561]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0752 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 78, vnnlib ID: 78 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.73918152, -8.53411102, -3.85345960, -3.82583189, -3.55089569,
         -4.12887335, -4.16478586, -5.91378498, -8.29353142, -8.77650642]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [613]; unstable size 613; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 281, 1, 613] with unstable size 280 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 613] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 613] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [280]; unstable size 280; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 280] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 280] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.07348055,  1.60172319, -1.32437277, -1.43540144, -0.22906235,
         -0.94617903,  0.48511821,  2.09677696,  2.21030140]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.73918152, -8.53411102, -3.85345960, -3.82583189, -3.55089569,
         -4.12887335, -4.16478586, -5.91378498, -8.29353142, -8.77650642]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.73918104, -8.53411007, -3.85345936, -3.82583237, -3.55089521,
          -4.12887335, -4.16478539, -5.91378498, -8.29353142, -8.77650642],
         [-5.73918104, -8.53411007, -3.85345936, -3.82583237, -3.55089521,
          -4.12887335, -4.16478539, -5.91378498, -8.29353142, -8.77650642]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.91334867,  0.02762699, -0.27493715,  0.30304098,  0.33895302]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0868 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 79, vnnlib ID: 79 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.05248165, -11.65894604, -12.25777149, -10.95008183,  -9.94209957,
         -10.12332249, -11.05361462,  -6.32633877, -14.71703625, -10.15004635]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [432]; unstable size 432; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 201, 1, 432] with unstable size 200 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 432] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 432] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 200] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.82437682, 2.96819687, 4.11948109, 3.11231136, 2.39884853, 2.32052016,
         2.91186881, 6.36293077, 1.88987482]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0675 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 80, vnnlib ID: 80 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.44930172, -15.25463963,  -9.82252502, -12.00500107,  -9.42480278,
         -12.67968750, -10.39871120, -11.85678768, -11.46559906, -13.09015942]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [742]; unstable size 742; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 301, 1, 742] with unstable size 300 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 742] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 742] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [300]; unstable size 300; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 300] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 300] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.98650265, -1.78932333,  0.26673177, -2.52717829,  0.69541419,
         -1.41547847, -0.58254105, -0.39011741,  1.13849401]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.44930172, -15.25463963,  -9.82252502, -12.00500107,  -9.42480278,
         -12.67968750, -10.39871120, -11.85678768, -11.46559906, -13.09015942]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.44930172, -15.25463867,  -9.82252502, -12.00500011,  -9.42480087,
          -12.67968464, -10.39871025, -11.85678864, -11.46559906, -13.09015942],
         [-10.44930172, -15.25463867,  -9.82252502, -12.00500011,  -9.42480087,
          -12.67968464, -10.39871025, -11.85678864, -11.46559906, -13.09015942]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.62677670, -1.02450085, -0.05059147,  1.40748692,  1.01629734]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0891 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 81, vnnlib ID: 81 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.10813904, -15.89954853,  -7.31516552, -10.82333755,  -8.54076099,
         -10.33981800, -11.38731098, -12.22146320, -14.46312428, -15.25714493]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [595]; unstable size 595; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 191, 1, 595] with unstable size 190 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 595] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 595] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [190]; unstable size 190; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 190] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 190] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.01579952, 7.21389246, 2.88120985, 0.47409204, 2.25944805, 3.19084287,
         3.74374318, 5.93748665, 6.55921412]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0672 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 82, vnnlib ID: 82 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.24675894, -8.88183308, -4.39334679, -3.84514856, -4.41373539,
         -4.05639076, -4.91783571, -6.25871420, -9.17700768, -7.08661222]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [586]; unstable size 586; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 303, 1, 586] with unstable size 302 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 586] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 586] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [302]; unstable size 302; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 302] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 302] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.48434615,  2.69666791, -0.88318062, -0.67275059, -1.05266690,
         -0.60235131,  1.16763580,  2.82550144,  1.08651781]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.24675894, -8.88183308, -4.39334679, -3.84514856, -4.41373539,
         -4.05639076, -4.91783571, -6.25871420, -9.17700768, -7.08661222]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.24675846, -8.88183308, -4.39334631, -3.84514809, -4.41373491,
          -4.05638981, -4.91783571, -6.25871420, -9.17700863, -7.08661318],
         [-6.24675846, -8.88183308, -4.39334631, -3.84514809, -4.41373491,
          -4.05638981, -4.91783571, -6.25871420, -9.17700863, -7.08661318]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.33695650, -0.21124172,  0.35734510,  0.86144590]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0830 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 83, vnnlib ID: 83 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.36881924, -3.89865160, -7.93544197, -6.23400021, -6.74230671,
         -6.96568727, -8.17397594, -6.56449556, -5.37149715, -2.30208302]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [592]; unstable size 592; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 220, 1, 592] with unstable size 219 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 592] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 592] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [219]; unstable size 219; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 219] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 219] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.89441156, 0.29969537, 2.93555880, 1.68636465, 1.92622948, 2.15194607,
         3.21918154, 1.75679517, 0.56472826]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0657 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 84, vnnlib ID: 84 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.80086327, -15.88022327,  -7.39093113,  -9.48237228,  -6.51979351,
          -9.19186211,  -7.76570368, -10.53886223, -14.64324093, -15.33413029]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [570]; unstable size 570; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 179, 1, 570] with unstable size 178 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 570] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 570] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [178]; unstable size 178; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 178] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 178] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.99768162,  7.91173935, -0.14131752,  2.21972227,  1.75214767,
          0.21274090,  3.05064726,  6.73370552,  7.60544586]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.80086327, -15.88022327,  -7.39093113,  -9.48237228,  -6.51979351,
          -9.19186211,  -7.76570368, -10.53886223, -14.64324093, -15.33413029]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.21it/s]100%|██████████| 1/1 [00:00<00:00,  8.19it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.14176750, -15.39953613,  -6.68415260,  -9.07587337,  -6.41280174,
           -8.82754326,  -7.32056284, -10.51403236, -14.15463734, -15.02766609]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.27135086]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1255 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 33.624610900878906
alpha/beta optimization time: 1.448209524154663
initial alpha-crown bounds: tensor([[ 4.04458523,  7.94689703, -0.11414784,  2.23972225,  1.77452922,
          0.24281096,  3.07658291,  6.77713537,  7.63649845]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.1141478419303894
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.34526920318604
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.34519171714783
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.34515953063965
Verifying property 2 with 1 instances.
##### Instance 84 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.11414784]], device='cuda:0') need to verify.
Model prediction is: tensor([-11.80086327, -15.88022327,  -7.39093113,  -9.48237228,  -6.51979351,
         -9.19186211,  -7.76570368, -10.53886223, -14.64324093, -15.33413029],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.11414784]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 570
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 175
Node /15 input 0: size torch.Size([100]) unstable 11
-----------------
# of unstable neurons: 756
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011610984802246094
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11414414644241333
10 lb beta sum: 0.0, worst -0.11415040493011475
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0574    transfer 0.0001    finalize 0.0001    func 0.0579    
Accumulated time: func 0.0579    prepare 0.0002    bound 0.0574    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] 
split level 1: [/input-12, 93] 
split level 2: [/input-12, 15] 
split level 3: [/input-12, 26] 
split level 4: [/input-12, 6] 
split level 5: [/input-8, 1892] 
split level 6: [/input-12, 11] 
split level 7: [/input-12, 68] 
split level 8: [/input-8, 1908] 
split level 9: [/input-8, 1919] 
split level 10: [/input-12, 9] 
split level 11: [/input-8, 1081] 
split level 12: [/input-8, 1884] 
split level 13: [/input, 2780] 
split level 14: [/input-8, 1878] 
split level 15: [/input-8, 1877] 
split level 16: [/input-8, 1917] 
split level 17: [/input-8, 1915] 
split level 18: [/input-8, 1895] 
split level 19: [/input-8, 1057] 
split level 20: [/input-8, 1893] 
split level 21: [/input-8, 1354] 
split level 22: [/input-8, 101] 
split level 23: [/input-8, 1083] 
split level 24: [/input-8, 1901] 
split level 25: [/input-8, 1918] 
split level 26: [/input-8, 1138] 
split level 27: [/input-8, 1365] 
split level 28: [/input-8, 1366] 
split level 29: [/input-8, 699] 
split level 30: [/input, 2747] 
split level 31: [/input, 1758] 
split level 32: [/input-8, 1870] 
split level 33: [/input-8, 1316] 
split level 34: [/input-8, 1074] 
split level 35: [/input-8, 1869] 
split level 36: [/input-8, 689] 
split level 37: [/input-8, 1076] 
split level 38: [/input-8, 1358] 
split level 39: [/input-8, 1369] 
split level 40: [/input-8, 1337] 
split level 41: [/input, 2520] 
split level 42: [/input-8, 94] 
split level 43: [/input, 2456] 
split level 44: [/input, 2440] 
split level 45: [/input-8, 1025] 
split level 46: [/input, 2796] 
split level 47: [/input-8, 553] 
split level 48: [/input-8, 524] 
split level 49: [/input-8, 674] 
split level 50: [/input-8, 573] 
split level 51: [/input-8, 1913] 
split level 52: [/input-8, 1516] 
split level 53: [/input-8, 642] 
split level 54: [/input-8, 532] 
split level 55: [/input, 1773] 
split level 56: [/input-8, 1150] 
split level 57: [/input, 2505] 
split level 58: [/input, 1703] 
split level 59: [/input-8, 516] 
split level 60: [/input-8, 651] 
split level 61: [/input-8, 1881] 
split level 62: [/input, 1739] 
split level 63: [/input, 2745] 
split level 64: [/input-8, 474] 
split level 65: [/input-8, 147] 
split level 66: [/input, 2491] 
split level 67: [/input-8, 1897] 
split level 68: [/input-8, 1904] 
split level 69: [/input, 2409] 
split level 70: [/input, 2414] 
split level 71: [/input, 2535] 
split level 72: [/input, 2518] 
split level 73: [/input-8, 1889] 
split level 74: [/input, 2510] 
split level 75: [/input-8, 1914] 
split level 76: [/input, 3314] 
split level 77: [/input, 2490] 
split level 78: [/input-8, 1342] 
split level 79: [/input, 2439] 
split level 80: [/input-8, 969] 
split level 81: [/input-8, 1114] 
split level 82: [/input, 2458] 
split level 83: [/input, 2812] 
split level 84: [/input-8, 1377] 
split level 85: [/input, 2489] 
split level 86: [/input-8, 122] 
split level 87: [/input, 2684] 
split level 88: [/input, 2468] 
split level 89: [/input-8, 693] 
split level 90: [/input-8, 1374] 
split level 91: [/input-8, 886] 
split level 92: [/input, 2533] 
split level 93: [/input, 1767] 
split level 94: [/input-8, 974] 
split level 95: [/input, 1656] 
split level 96: [/input, 220] 
split level 97: [/input, 2493] 
split level 98: [/input, 1752] 
split level 99: [/input, 1626] 
split level 100: [/input-8, 1880] 
split level 101: [/input-8, 1888] 
split level 102: [/input, 2445] 
split level 103: [/input-8, 1027] 
split level 104: [/input, 3576] 
split level 105: [/input, 4072] 
split level 106: [/input, 2897] 
split level 107: [/input-8, 889] 
split level 108: [/input-8, 1293] 
split level 109: [/input, 2463] 
split level 110: [/input, 1641] 
split level 111: [/input, 757] 
split level 112: [/input, 1642] 
split level 113: [/input, 3283] 
split level 114: [/input-12, 53] 
split level 115: [/input-8, 1803] 
split level 116: [/input, 1522] 
split level 117: [/input, 498] 
split level 118: [/input-8, 1468] 
split level 119: [/input, 1743] 
split level 120: [/input-8, 1424] 
split level 121: [/input, 2546] 
split level 122: [/input-8, 1106] 
split level 123: [/input-8, 1015] 
split level 124: [/input-8, 953] 
split level 125: [/input, 2993] 
split level 126: [/input-8, 1023] 
split level 127: [/input-8, 1079] 
split level 128: [/input, 2363] 
split level 129: [/input, 2444] 
split level 130: [/input, 1700] 
split level 131: [/input-8, 74] 
split level 132: [/input, 1784] 
split level 133: [/input, 2184] 
split level 134: [/input, 2881] 
split level 135: [/input, 2707] 
split level 136: [/input, 3262] 
split level 137: [/input-8, 907] 
split level 138: [/input, 4060] 
split level 139: [/input, 3538] 
split level 140: [/input-8, 1302] 
split level 141: [/input, 3293] 
split level 142: [/input, 2715] 
split level 143: [/input, 1596] 
split level 144: [/input, 1189] 
split level 145: [/input, 2930] 
split level 146: [/input, 226] 
split level 147: [/input, 2898] 
split level 148: [/input, 4027] 
split level 149: [/input, 4075] 
split level 150: [/input, 3397] 
split level 151: [/input, 2977] 
split level 152: [/input, 2475] 
split level 153: [/input, 690] 
split level 154: [/input, 2913] 
split level 155: [/input, 3297] 
split level 156: [/input, 3266] 
split level 157: [/input-8, 1448] 
split level 158: [/input, 3310] 
split level 159: [/input, 1367] 
split level 160: [/input, 292] 
split level 161: [/input-8, 1400] 
split level 162: [/input, 2464] 
split level 163: [/input, 1088] 
split level 164: [/input-8, 913] 
split level 165: [/input, 1595] 
split level 166: [/input, 1441] 
split level 167: [/input, 2553] 
split level 168: [/input, 2945] 
split level 169: [/input, 2515] 
split level 170: [/input-8, 856] 
split level 171: [/input, 2928] 
split level 172: [/input, 673] 
split level 173: [/input, 3308] 
split level 174: [/input, 2216] 
split level 175: [/input, 1682] 
split level 176: [/input-8, 1912] 
split level 177: [/input-8, 579] 
split level 178: [/input-8, 1137] 
split level 179: [/input, 2183] 
split level 180: [/input, 3232] 
split level 181: [/input, 4026] 
split level 182: [/input, 2994] 
split level 183: [/input-8, 1974] 
split level 184: [/input, 2480] 
split level 185: [/input, 3319] 
split level 186: [/input, 22] 
split level 187: [/input, 2843] 
split level 188: [/input, 1489] 
split level 189: [/input, 3216] 
split level 190: [/input, 2192] 
split level 191: [/input, 3506] 
split level 192: [/input, 3076] 
split level 193: [/input, 1648] 
split level 194: [/input, 2961] 
split level 195: [/input, 2453] 
split level 196: [/input, 2400] 
split level 197: [/input, 2946] 
split level 198: [/input, 2975] 
split level 199: [/input, 2944] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11412614583969116
10 lb beta sum: 0.0, worst -0.11412900686264038
Time: prepare 0.0116    bound 0.1006    transfer 0.0018    finalize 0.0030    func 0.1197    
Accumulated time: func 0.1776    prepare 0.0221    bound 0.1580    transfer 0.0019    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.25377703) min lb tensor(-0.11412328)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.01117563247680664 
BICCOS Cumulative time: 0.01117563247680664
Preprocessing time: 0.010493278503417969 Inference time: 0.000278472900390625 Add cuts time: 0.0001163482666015625 Cut analysis time: 0.0002875328063964844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10323 (1), -0.10322 (1), -0.10258 (1), -0.10253 (1), -0.10239 (1), -0.10214 (1), -0.10202 (1), -0.10190 (1), -0.10184 (1), -0.10125 (1), -0.10074 (1), -0.09905 (1), -0.09812 (1), -0.09754 (1), -0.09714 (1), -0.09656 (1), -0.09614 (1), -0.09574 (1), -0.09571 (1), -0.09492 (1), 
Length of domains: 50
Time: pickout 0.0005    decision 0.5204    set_bounds 0.0106    solve 0.1198    add 0.2020    
Accumulated time: pickout 0.0005    decision 0.5204    set_bounds 0.0106    solve 0.1198    add 0.2020    
Current (lb-rhs): -0.10322868824005127
50 domains visited
Cumulative time: 0.9452428817749023

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 1] [/input-12, 15] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 1: [/input-12, 15] [/input-12, 15] [/input-12, 26] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] 
split level 2: [/input-12, 26] [/input-12, 26] [/input-12, 6] [/input-12, 26] [/input-12, 26] [/input-12, 6] [/input-12, 6] [/input-12, 26] [/input-12, 26] [/input-12, 26] 
split level 3: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 6] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0870090126991272

all verified at 4th iter
Time: prepare 0.0078    bound 0.0304    transfer 0.0017    finalize 0.0027    func 0.0451    
Accumulated time: func 0.2227    prepare 0.0301    bound 0.1883    transfer 0.0035    finalize 0.0059    
all_split False
======================Cut inference begins======================
max lb tensor(0.19232941) min lb tensor(0.00054681)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.0347745418548584 
BICCOS Cumulative time: 0.04595017433166504
Preprocessing time: 0.011907339096069336 Inference time: 0.013956546783447266 Add cuts time: 0.008684635162353516 Cut analysis time: 0.00022602081298828125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0081    decision 0.0201    set_bounds 0.0119    solve 0.0452    add 0.0153    
Accumulated time: pickout 0.0086    decision 0.5405    set_bounds 0.0226    solve 0.1650    add 0.2172    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 1] 
split level 1: [/input-12, 15] 
split level 2: [/input-12, 26] 
split level 3: [/input-12, 6] 
split level 4: [/input-12, 11] 
split level 5: [/input-12, 68] 
split level 6: [/input-8, 1884] 
split level 7: [/input-8, 1901] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.07589089870452881

all verified at 0th iter
Time: prepare 0.0052    bound 0.0042    transfer 0.0009    finalize 0.0013    func 0.0133    
Accumulated time: func 0.2360    prepare 0.0357    bound 0.1926    transfer 0.0045    finalize 0.0072    
all_split False
======================Cut inference begins======================
max lb tensor(0.26224014) min lb tensor(0.07589090)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.007346153259277344 
BICCOS Cumulative time: 0.05329632759094238
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.0222    set_bounds 0.0208    solve 0.0134    add 0.0001    
Accumulated time: pickout 0.0090    decision 0.5627    set_bounds 0.0433    solve 0.1784    add 0.2173    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
Cumulative time: 1.152479648590088


Properties batch 3, size 1
Remaining timeout: 196.83080744743347
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 196.83072900772095
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 196.8307065963745
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 196.83045411109924
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 196.83042764663696
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 196.8302903175354
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.1698 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 85, vnnlib ID: 85 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.42035007, -11.01566029, -16.78618240, -17.08073235, -15.94405842,
         -18.31308746, -16.60547638, -16.45758438, -12.49265862, -13.06334209]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [534]; unstable size 534; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 534] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 534] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 534] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 197] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.66741276, 3.53291798, 4.23364973, 2.83012772, 5.27459431, 3.79739237,
         3.37451935, 0.14124203, 1.17811882]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0765 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 86, vnnlib ID: 86 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.28128910, -17.14933395, -11.40331554, -14.08204365, -14.06262875,
         -13.41378117, -16.03304672, -13.62230492, -16.91720581, -17.59583473]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [674]; unstable size 674; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 194, 1, 674] with unstable size 193 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 674] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 674] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [193]; unstable size 193; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 193] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 193] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.10949564, 4.45415878, 2.07507968, 2.01375389, 1.43745148, 3.63756800,
         1.59498549, 4.70254755, 5.05546284]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0710 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 87, vnnlib ID: 87 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.75811863, -7.24076557, -3.96754313, -3.75479078, -2.71305084,
         -3.64833927, -3.95274568, -3.04537916, -8.23825359, -5.63892746]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [434]; unstable size 434; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 222, 1, 434] with unstable size 221 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 434] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 434] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [221]; unstable size 221; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 221] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 221] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.55352449,  1.36358690, -0.76676738, -0.70900565, -1.60512829,
         -0.78009844, -1.31760657,  2.84528327,  0.56516695]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.75811863, -7.24076557, -3.96754313, -3.75479078, -2.71305084,
         -3.64833927, -3.95274568, -3.04537916, -8.23825359, -5.63892746]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.75811815, -7.24076557, -3.96754289, -3.75479031, -2.71305084,
          -3.64833879, -3.95274591, -3.04537868, -8.23825359, -5.63892746],
         [-7.75811815, -7.24076557, -3.96754289, -3.75479031, -2.71305084,
          -3.64833879, -3.95274591, -3.04537868, -8.23825359, -5.63892746]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.92216420,  0.70941162, -0.33232784,  0.60296011,  0.90736723]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0803 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 88, vnnlib ID: 88 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.13618565, -7.95294571, -3.64413977, -3.37936306, -3.17752457,
         -3.15863037, -5.09549570, -2.59429359, -6.38139343, -5.47579718]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [416]; unstable size 416; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 168, 1, 416] with unstable size 167 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 416] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 416] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [167]; unstable size 167; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 167] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 167] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.65106153,  3.34274721, -0.95804256, -1.22589183, -1.23296726,
          0.48913813, -2.05695391,  1.96782136,  0.53511190]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.13618565, -7.95294571, -3.64413977, -3.37936306, -3.17752457,
         -3.15863037, -5.09549570, -2.59429359, -6.38139343, -5.47579718]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.13618565, -7.95294476, -3.64413953, -3.37936282, -3.17752457,
          -3.15863037, -5.09549522, -2.59429312, -6.38139343, -5.47579718],
         [-6.13618565, -7.95294476, -3.64413953, -3.37936282, -3.17752457,
          -3.15863037, -5.09549522, -2.59429312, -6.38139343, -5.47579718]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.26477671, -0.46661496, -0.48550916, -1.04984641]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0742 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 89, vnnlib ID: 89 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.58886576, -2.20369244, -8.07431412, -7.83337307, -7.94223309,
         -9.24308968, -8.43767738, -8.89227295, -3.14519000, -4.67166090]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [472]; unstable size 472; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 211, 1, 472] with unstable size 210 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 472] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 472] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [210]; unstable size 210; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 210] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 210] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.69297743,  3.94914913,  3.92555094,  4.07342052,  5.17004538,
          4.61110926,  4.71607876, -0.48206472,  1.52207315]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.58886576, -2.20369244, -8.07431412, -7.83337307, -7.94223309,
         -9.24308968, -8.43767738, -8.89227295, -3.14519000, -4.67166090]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.58it/s]100%|██████████| 1/1 [00:00<00:00,  8.56it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.60659981, -2.84582663, -8.02860737, -7.76232910, -7.95765686,
          -9.17981625, -8.46953678, -8.89545727, -2.92662191, -5.02388382]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.08079529]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1198 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 29.900585174560547
alpha/beta optimization time: 1.2604527473449707
initial alpha-crown bounds: tensor([[ 1.81915092,  4.04639435,  4.01018620,  4.15022755,  5.26251030,
          4.67265892,  4.80006218, -0.42643166,  1.56582522]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.42643165588378906
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5368616580963
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.53680872917175
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.53678488731384
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.5367615222931
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.53674221038818
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.53672051429749
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.53670144081116
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.5366780757904
Verifying property 7 with 1 instances.
##### Instance 89 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.42643166]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.58886576, -2.20369244, -8.07431412, -7.83337307, -7.94223309,
        -9.24308968, -8.43767738, -8.89227295, -3.14519000, -4.67166090],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.42643166]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 472
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 206
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 696
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00012612342834472656
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.42643070220947266
10 lb beta sum: 0.0, worst -0.42643308639526367
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0620    transfer 0.0001    finalize 0.0002    func 0.0626    
Accumulated time: func 0.0626    prepare 0.0002    bound 0.0620    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] 
split level 1: [/input-12, 35] 
split level 2: [/input-12, 80] 
split level 3: [/input-12, 74] 
split level 4: [/input-12, 10] 
split level 5: [/input-12, 11] 
split level 6: [/input-12, 60] 
split level 7: [/input-12, 54] 
split level 8: [/input-12, 1] 
split level 9: [/input-12, 6] 
split level 10: [/input-12, 93] 
split level 11: [/input-8, 827] 
split level 12: [/input-8, 1075] 
split level 13: [/input-8, 684] 
split level 14: [/input-8, 812] 
split level 15: [/input-8, 106] 
split level 16: [/input-8, 1126] 
split level 17: [/input-8, 1074] 
split level 18: [/input-8, 1611] 
split level 19: [/input, 2725] 
split level 20: [/input-8, 66] 
split level 21: [/input-8, 844] 
split level 22: [/input-8, 852] 
split level 23: [/input-8, 1331] 
split level 24: [/input-8, 1077] 
split level 25: [/input-8, 65] 
split level 26: [/input-8, 678] 
split level 27: [/input, 226] 
split level 28: [/input, 1790] 
split level 29: [/input-8, 64] 
split level 30: [/input-8, 403] 
split level 31: [/input, 2726] 
split level 32: [/input-8, 270] 
split level 33: [/input-8, 793] 
split level 34: [/input-8, 1026] 
split level 35: [/input-8, 861] 
split level 36: [/input-8, 1332] 
split level 37: [/input-8, 817] 
split level 38: [/input, 481] 
split level 39: [/input-8, 75] 
split level 40: [/input-8, 85] 
split level 41: [/input, 3190] 
split level 42: [/input, 2135] 
split level 43: [/input-8, 108] 
split level 44: [/input, 3994] 
split level 45: [/input, 2422] 
split level 46: [/input, 3191] 
split level 47: [/input, 800] 
split level 48: [/input, 435] 
split level 49: [/input, 3158] 
split level 50: [/input-8, 87] 
split level 51: [/input-8, 1629] 
split level 52: [/input, 2133] 
split level 53: [/input-8, 1838] 
split level 54: [/input, 2421] 
split level 55: [/input, 635] 
split level 56: [/input, 436] 
split level 57: [/input, 2392] 
split level 58: [/input, 2137] 
split level 59: [/input-8, 1734] 
split level 60: [/input, 3160] 
split level 61: [/input, 2423] 
split level 62: [/input, 3173] 
split level 63: [/input, 1651] 
split level 64: [/input, 2425] 
split level 65: [/input-8, 72] 
split level 66: [/input, 2410] 
split level 67: [/input, 3192] 
split level 68: [/input, 784] 
split level 69: [/input-8, 1618] 
split level 70: [/input-8, 1943] 
split level 71: [/input-8, 1847] 
split level 72: [/input-8, 1521] 
split level 73: [/input, 449] 
split level 74: [/input-8, 970] 
split level 75: [/input-8, 110] 
split level 76: [/input-8, 1392] 
split level 77: [/input-8, 1870] 
split level 78: [/input-8, 1935] 
split level 79: [/input, 3976] 
split level 80: [/input-8, 67] 
split level 81: [/input, 2028] 
split level 82: [/input, 225] 
split level 83: [/input, 2393] 
split level 84: [/input, 1655] 
split level 85: [/input-8, 432] 
split level 86: [/input, 3418] 
split level 87: [/input, 2027] 
split level 88: [/input, 3995] 
split level 89: [/input, 3161] 
split level 90: [/input, 1756] 
split level 91: [/input, 1653] 
split level 92: [/input-8, 1027] 
split level 93: [/input, 2420] 
split level 94: [/input, 4051] 
split level 95: [/input-8, 846] 
split level 96: [/input, 1192] 
split level 97: [/input-8, 86] 
split level 98: [/input-8, 1046] 
split level 99: [/input, 832] 
split level 100: [/input, 2030] 
split level 101: [/input, 1657] 
split level 102: [/input, 2388] 
split level 103: [/input, 2394] 
split level 104: [/input, 1652] 
split level 105: [/input, 1654] 
split level 106: [/input-8, 961] 
split level 107: [/input-8, 1445] 
split level 108: [/input, 2131] 
split level 109: [/input, 3207] 
split level 110: [/input-8, 1642] 
split level 111: [/input-8, 1861] 
split level 112: [/input, 163] 
split level 113: [/input, 843] 
split level 114: [/input, 2013] 
split level 115: [/input, 1656] 
split level 116: [/input, 3188] 
split level 117: [/input-8, 600] 
split level 118: [/input-8, 452] 
split level 119: [/input-8, 445] 
split level 120: [/input-8, 439] 
split level 121: [/input, 1055] 
split level 122: [/input-8, 1937] 
split level 123: [/input, 3746] 
split level 124: [/input-8, 1034] 
split level 125: [/input, 2014] 
split level 126: [/input, 4016] 
split level 127: [/input, 1619] 
split level 128: [/input, 424] 
split level 129: [/input, 3203] 
split level 130: [/input, 2225] 
split level 131: [/input-8, 1454] 
split level 132: [/input-8, 1035] 
split level 133: [/input, 1770] 
split level 134: [/input, 544] 
split level 135: [/input, 3143] 
split level 136: [/input-8, 615] 
split level 137: [/input, 2268] 
split level 138: [/input, 2292] 
split level 139: [/input-8, 1588] 
split level 140: [/input-8, 962] 
split level 141: [/input, 4002] 
split level 142: [/input, 2047] 
split level 143: [/input, 950] 
split level 144: [/input-8, 408] 
split level 145: [/input, 3144] 
split level 146: [/input-8, 504] 
split level 147: [/input, 2183] 
split level 148: [/input, 1288] 
split level 149: [/input, 2156] 
split level 150: [/input, 2877] 
split level 151: [/input-8, 1090] 
split level 152: [/input, 3810] 
split level 153: [/input, 1800] 
split level 154: [/input, 810] 
split level 155: [/input, 2122] 
split level 156: [/input, 2841] 
split level 157: [/input, 1934] 
split level 158: [/input-8, 394] 
split level 159: [/input-8, 1493] 
split level 160: [/input, 1853] 
split level 161: [/input-8, 971] 
split level 162: [/input, 3458] 
split level 163: [/input-8, 983] 
split level 164: [/input-8, 258] 
split level 165: [/input, 179] 
split level 166: [/input-8, 1644] 
split level 167: [/input, 517] 
split level 168: [/input-8, 1831] 
split level 169: [/input, 1997] 
split level 170: [/input, 2140] 
split level 171: [/input-8, 1729] 
split level 172: [/input, 2359] 
split level 173: [/input-8, 81] 
split level 174: [/input, 1950] 
split level 175: [/input, 1111] 
split level 176: [/input, 1533] 
split level 177: [/input, 2700] 
split level 178: [/input, 2172] 
split level 179: [/input, 1981] 
split level 180: [/input, 3828] 
split level 181: [/input, 2143] 
split level 182: [/input-8, 1852] 
split level 183: [/input-8, 833] 
split level 184: [/input, 3613] 
split level 185: [/input, 2177] 
split level 186: [/input, 2344] 
split level 187: [/input, 2435] 
split level 188: [/input, 1966] 
split level 189: [/input, 3745] 
split level 190: [/input-8, 692] 
split level 191: [/input, 2328] 
split level 192: [/input, 2556] 
split level 193: [/input, 3080] 
split level 194: [/input, 3646] 
split level 195: [/input, 3255] 
split level 196: [/input, 849] 
split level 197: [/input, 1982] 
split level 198: [/input, 1998] 
split level 199: [/input-8, 1227] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4264063835144043
10 lb beta sum: 0.0, worst -0.42641258239746094
Time: prepare 0.0116    bound 0.1006    transfer 0.0016    finalize 0.0030    func 0.1195    
Accumulated time: func 0.1821    prepare 0.0224    bound 0.1626    transfer 0.0017    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.19878769) min lb tensor(-0.42640638)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01100778579711914 
BICCOS Cumulative time: 0.01100778579711914
Preprocessing time: 0.010301351547241211 Inference time: 0.0002167224884033203 Add cuts time: 0.0001800060272216797 Cut analysis time: 0.0003097057342529297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.41315 (1), -0.41290 (1), -0.41277 (1), -0.41251 (1), -0.41245 (1), -0.41178 (1), -0.41120 (1), -0.41097 (1), -0.41089 (1), -0.41057 (1), -0.41010 (1), -0.40991 (1), -0.40988 (1), -0.40921 (1), -0.40902 (1), -0.40865 (1), -0.40837 (1), -0.40821 (1), -0.40723 (1), -0.40678 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5414    set_bounds 0.0101    solve 0.1196    add 0.1958    
Accumulated time: pickout 0.0004    decision 0.5414    set_bounds 0.0101    solve 0.1196    add 0.1958    
Current (lb-rhs): -0.41314697265625
50 domains visited
Cumulative time: 0.9658982753753662

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 35] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] 
split level 1: [/input-12, 60] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 11] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 2: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 60] [/input-12, 60] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 3: [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4112358093261719
10 lb beta sum: 0.5693191885948181, worst -0.3877313733100891
Time: prepare 0.0075    bound 0.1207    transfer 0.0013    finalize 0.0027    func 0.1348    
Accumulated time: func 0.3169    prepare 0.0301    bound 0.2833    transfer 0.0030    finalize 0.0058    
all_split False
======================Cut inference begins======================
max lb tensor(0.58580577) min lb tensor(-0.38760579)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.015872478485107422 
BICCOS Cumulative time: 0.026880264282226562
Preprocessing time: 0.011834144592285156 Inference time: 0.002142190933227539 Add cuts time: 0.001512765884399414 Cut analysis time: 0.0003833770751953125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10933 (2), -0.10824 (2), -0.10767 (2), -0.10732 (2), -0.10568 (2), -0.10527 (2), -0.10460 (2), -0.10427 (2), -0.10357 (2), -0.10321 (2), -0.10083 (2), -0.10051 (2), -0.09945 (2), -0.09928 (2), -0.09745 (2), -0.09685 (2), -0.09679 (2), -0.09650 (2), -0.09623 (2), -0.09375 (2), 
Length of domains: 50
Time: pickout 0.0081    decision 0.0204    set_bounds 0.0123    solve 0.1349    add 0.2112    
Accumulated time: pickout 0.0086    decision 0.5619    set_bounds 0.0225    solve 0.2545    add 0.4070    
Current (lb-rhs): -0.10933274030685425
100 domains visited
Cumulative time: 1.3759760856628418

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 21] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 10] [/input-12, 60] [/input-12, 11] [/input-12, 11] [/input-12, 10] [/input-12, 60] [/input-12, 10] [/input-12, 60] [/input-12, 10] [/input-12, 60] 
split level 2: [/input-12, 11] [/input-12, 11] [/input-12, 1] [/input-12, 60] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 3: [/input-12, 1] [/input-12, 1] [/input-12, 6] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1339855194091797
10 lb beta sum: 1.2089718580245972, worst -0.07511693239212036
Time: prepare 0.0075    bound 0.1253    transfer 0.0009    finalize 0.0028    func 0.1396    
Accumulated time: func 0.4565    prepare 0.0379    bound 0.4086    transfer 0.0039    finalize 0.0087    
all_split False
======================Cut inference begins======================
max lb tensor(0.34411538) min lb tensor(-0.07275051)
Number of Verified Splits: 387 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 7
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.03787398338317871 
BICCOS Cumulative time: 0.06475424766540527
Preprocessing time: 0.011904478073120117 Inference time: 0.01607370376586914 Add cuts time: 0.0095062255859375 Cut analysis time: 0.0003895759582519531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07275 (3), -0.04744 (3), -0.03880 (3), -0.03626 (3), 
Length of domains: 4
Time: pickout 0.0080    decision 0.0196    set_bounds 0.0156    solve 0.1397    add 0.1782    
Accumulated time: pickout 0.0165    decision 0.5814    set_bounds 0.0381    solve 0.3942    add 0.5852    
Current (lb-rhs): -0.0727505087852478
104 domains visited
Cumulative time: 1.7822222709655762

Shallow-BaB round 4
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 80] 
split level 1: [/input-12, 80] [/input-12, 80] [/input-12, 80] [/input-12, 74] 
split level 2: [/input-12, 74] [/input-12, 74] [/input-12, 74] [/input-12, 10] 
split level 3: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 11] 
split level 4: [/input-12, 60] [/input-12, 11] [/input-12, 11] [/input-12, 60] 
split level 5: [/input-12, 1] [/input-12, 1] [/input-12, 60] [/input-12, 1] 
split level 6: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 7: [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
split level 8: [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] 
split level 9: [/input-8, 1075] [/input-8, 1075] [/input-8, 1075] [/input-8, 1075] 
split level 10: [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] 
split level 11: [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] 
split level 12: [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] 
split level 13: [/input-8, 106] [/input-8, 106] [/input-8, 106] [/input-8, 106] 
split level 14: [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] 
split level 15: [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] 
split level 16: [/input-8, 678] [/input-8, 678] [/input, 1790] [/input-8, 678] 
split level 17: [/input, 1790] [/input, 1790] [/input, 2726] [/input, 1790] 
split level 18: [/input, 2726] [/input, 2726] [/input-8, 403] [/input, 2726] 
split level 19: [/input-8, 1332] [/input-8, 403] [/input-8, 1332] [/input-8, 403] 
split level 20: [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 1332] 
split level 21: [/input-8, 403] [/input-8, 1332] [/input, 481] [/input-8, 270] 
split level 22: [/input, 481] [/input, 481] [/input, 3158] [/input, 481] 
split level 23: [/input, 3158] [/input, 3158] [/input, 2133] [/input, 3158] 
split level 24: [/input-8, 1734] [/input, 2133] [/input-8, 1734] [/input, 2133] 
split level 25: [/input, 2422] [/input-8, 1734] [/input, 2392] [/input-8, 1734] 
split level 26: [/input, 2133] [/input, 635] [/input, 449] [/input, 449] 
split level 27: [/input, 449] [/input, 449] [/input, 635] [/input, 635] 
split level 28: [/input-8, 1618] [/input-8, 1618] [/input, 3173] [/input, 3173] 
split level 29: [/input, 3173] [/input-8, 1629] [/input-8, 1618] [/input-8, 1618] 
split level 30: [/input, 635] [/input, 3173] [/input-8, 1629] [/input-8, 1629] 
split level 31: [/input-8, 1629] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] 
split level 32: [/input-8, 1861] [/input-8, 1046] [/input-8, 1046] [/input-8, 1046] 
split level 33: [/input-8, 1046] [/input, 2388] [/input-8, 846] [/input, 2388] 
split level 34: [/input, 2388] [/input-8, 1445] [/input-8, 1445] [/input-8, 846] 
split level 35: [/input-8, 846] [/input, 163] [/input, 2388] [/input-8, 1937] 
split level 36: [/input-8, 1937] [/input-8, 846] [/input-8, 1937] [/input, 2131] 
split level 37: [/input-8, 1445] [/input-8, 1937] [/input, 2131] [/input, 163] 
split level 38: [/input, 163] [/input, 2131] [/input, 163] [/input, 1653] 
split level 39: [/input, 2131] [/input, 1653] [/input, 1655] [/input-8, 1445] 
split level 40: [/input, 1653] [/input, 1756] [/input, 1653] [/input, 1655] 
split level 41: [/input, 1655] [/input, 1655] [/input, 1756] [/input, 1756] 
split level 42: [/input, 1756] [/input, 1619] [/input, 1619] [/input, 1619] 
split level 43: [/input, 1619] [/input, 1654] [/input, 1654] [/input, 1654] 
split level 44: [/input, 1654] [/input-8, 394] [/input, 2268] [/input, 2268] 
split level 45: [/input, 2268] [/input, 2268] [/input, 2359] [/input, 2359] 
split level 46: [/input, 2359] [/input, 2359] [/input, 2115] [/input, 2115] 
split level 47: [/input, 2115] [/input, 3255] [/input, 3255] [/input, 3255] 
split level 48: [/input, 3255] [/input, 2115] [/input, 2386] [/input, 2386] 
split level 49: [/input, 2386] [/input, 2386] [/input, 1604] [/input, 1604] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09561395645141602

all verified at 7th iter
Time: prepare 0.0079    bound 0.0481    transfer 0.0008    finalize 0.0024    func 0.0618    
Accumulated time: func 0.5183    prepare 0.0484    bound 0.4568    transfer 0.0047    finalize 0.0110    
all_split False
======================Cut inference begins======================
max lb tensor(0.39963290) min lb tensor(0.00250244)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.03720283508300781 
BICCOS Cumulative time: 0.10195708274841309
Preprocessing time: 0.01137542724609375 Inference time: 0.0172884464263916 Add cuts time: 0.00812220573425293 Cut analysis time: 0.00041675567626953125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0008    decision 0.1460    set_bounds 0.0120    solve 0.0619    add 0.0238    
Accumulated time: pickout 0.0173    decision 0.7274    set_bounds 0.0500    solve 0.4562    add 0.6090    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
104 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] 
split level 1: [/input-12, 35] 
split level 2: [/input-12, 74] 
split level 3: [/input-12, 10] 
split level 4: [/input-12, 11] 
split level 5: [/input-12, 60] 
split level 6: [/input-12, 1] 
split level 7: [/input-12, 6] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12758731842041016
10 lb beta sum: 0.08434553444385529, worst -0.09485045075416565
Time: prepare 0.0037    bound 0.1144    transfer 0.0006    finalize 0.0013    func 0.1217    
Accumulated time: func 0.6400    prepare 0.0525    bound 0.5712    transfer 0.0053    finalize 0.0123    
all_split False
======================Cut inference begins======================
max lb tensor(0.43440151) min lb tensor(-0.09463410)
Number of Verified Splits: 251 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.32619237899780273
10 lb beta sum: 0.8482549786567688, worst -0.18601548671722412
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 9
#cuts 4-6: 13
#cuts >= 20: 0
BICCOS time: 0.47887420654296875 
BICCOS Cumulative time: 0.5808312892913818
Preprocessing time: 0.006428718566894531 Inference time: 0.46639370918273926 Add cuts time: 0.005268573760986328 Cut analysis time: 0.0007832050323486328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09463 (8), -0.05411 (8), -0.03266 (8), -0.01188 (8), -0.00386 (8), 
Length of domains: 5
Time: pickout 0.0004    decision 0.0222    set_bounds 0.0171    solve 0.1217    add 0.0254    
Accumulated time: pickout 0.0177    decision 0.7496    set_bounds 0.0671    solve 0.5779    add 0.6344    
Current (lb-rhs): -0.09463410079479218
109 domains visited
Cumulative time: 2.7446491718292236

BaB round 2
batch: 5
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 80] [/input-12, 80] [/input-12, 80] [/input-12, 80] [/input-12, 80] 
split level 1: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 2: [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] 
split level 3: [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 1075] [/input-8, 827] 
split level 4: [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 684] [/input-8, 684] 
split level 5: [/input-8, 106] [/input-8, 106] [/input-8, 106] [/input-8, 812] [/input-8, 812] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06613922119140625
10 lb beta sum: 0.010481970384716988, worst -0.06577825546264648
Time: prepare 0.0064    bound 0.1155    transfer 0.0015    finalize 0.0014    func 0.1270    
Accumulated time: func 0.7670    prepare 0.0593    bound 0.6867    transfer 0.0068    finalize 0.0137    
all_split False
======================Cut inference begins======================
max lb tensor(0.42021704) min lb tensor(-0.06558228)
Number of Verified Splits: 308 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.29058218002319336
10 lb beta sum: 0.84065842628479, worst -0.17082971334457397
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 9
#cuts 4-6: 13
#cuts 7-9: 10
#cuts 10-12: 6
#cuts >= 20: 0
BICCOS time: 0.3526909351348877 
BICCOS Cumulative time: 0.9335222244262695
Preprocessing time: 0.009169578552246094 Inference time: 0.32640767097473145 Add cuts time: 0.015037775039672852 Cut analysis time: 0.0020759105682373047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06558 (14), -0.05905 (14), -0.05759 (14), -0.05582 (14), -0.05218 (14), -0.04476 (14), -0.04392 (14), -0.04116 (14), -0.02549 (14), -0.02154 (14), -0.01938 (14), -0.01883 (14), 
Length of domains: 12
Time: pickout 0.0042    decision 0.0183    set_bounds 0.0275    solve 0.1277    add 0.0404    
Accumulated time: pickout 0.0220    decision 0.7679    set_bounds 0.0946    solve 0.7056    add 0.6748    
Current (lb-rhs): -0.065582275390625
121 domains visited
Cumulative time: 3.32767653465271

BaB round 3
batch: 12
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] 
split level 1: [/input-8, 1075] [/input-8, 1075] [/input-8, 106] [/input-8, 1075] [/input-8, 1075] [/input-8, 106] [/input-8, 1075] [/input-8, 1075] [/input-8, 106] [/input-8, 1075] 
split level 2: [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] 
split level 3: [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 108] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] 
split level 4: [/input-8, 108] [/input-8, 108] [/input-8, 861] [/input-8, 108] [/input-8, 108] [/input-8, 861] [/input-8, 1332] [/input-8, 108] [/input-8, 861] [/input-8, 108] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04734373092651367
10 lb beta sum: 0.0, worst -0.04704999923706055
Time: prepare 0.0078    bound 0.1383    transfer 0.0017    finalize 0.0022    func 0.1526    
Accumulated time: func 0.9196    prepare 0.0674    bound 0.8250    transfer 0.0085    finalize 0.0159    
all_split False
======================Cut inference begins======================
max lb tensor(0.05973530) min lb tensor(-0.04692125)
Number of Verified Splits: 317 of 384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 12
#cuts 4-6: 9
#cuts 7-9: 4
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.05504298210144043 
BICCOS Cumulative time: 0.98856520652771
Preprocessing time: 0.01200556755065918 Inference time: 0.03864860534667969 Add cuts time: 0.0033113956451416016 Cut analysis time: 0.001077413558959961
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04692 (19), -0.04526 (19), -0.04311 (19), -0.04192 (19), -0.03989 (19), -0.03905 (19), -0.03824 (19), -0.03580 (19), -0.03571 (19), -0.03528 (19), -0.03520 (19), -0.03460 (19), -0.03436 (19), -0.03381 (19), -0.03356 (19), -0.03337 (19), -0.03280 (19), -0.03249 (19), -0.03231 (19), -0.03112 (19), 
Length of domains: 67
Time: pickout 0.0026    decision 0.0198    set_bounds 0.0274    solve 0.1528    add 0.0709    
Accumulated time: pickout 0.0246    decision 0.7877    set_bounds 0.1220    solve 0.8584    add 0.7458    
Current (lb-rhs): -0.0469212532043457
188 domains visited
Cumulative time: 3.6653389930725098

BaB round 4
batch: 67
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 817] [/input-8, 817] 
split level 1: [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04107189178466797
10 lb beta sum: 0.07951204478740692, worst -0.04089927673339844
Time: prepare 0.0059    bound 0.1436    transfer 0.0007    finalize 0.0014    func 0.1534    
Accumulated time: func 1.0730    prepare 0.0735    bound 0.9686    transfer 0.0092    finalize 0.0174    
all_split False
======================Cut inference begins======================
max lb tensor(0.01932430) min lb tensor(-0.04080677)
Number of Verified Splits: 73 of 268
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 12
#cuts 4-6: 9
#cuts 7-9: 4
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.02118825912475586 
BICCOS Cumulative time: 1.0097534656524658
Preprocessing time: 0.007915735244750977 Inference time: 0.009883642196655273 Add cuts time: 0.002320528030395508 Cut analysis time: 0.0010683536529541016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04081 (21), -0.03898 (21), -0.03832 (21), -0.03699 (21), -0.03650 (21), -0.03562 (21), -0.03450 (21), -0.03391 (21), -0.03391 (21), -0.03313 (21), -0.03296 (21), -0.03225 (21), -0.03209 (21), -0.03142 (21), -0.03141 (21), -0.03047 (21), -0.03009 (21), -0.02983 (21), -0.02976 (21), -0.02959 (21), 
Length of domains: 195
Time: pickout 0.0077    decision 0.0188    set_bounds 0.0129    solve 0.1535    add 0.0767    
Accumulated time: pickout 0.0322    decision 0.8065    set_bounds 0.1349    solve 1.0119    add 0.8224    
Current (lb-rhs): -0.04080677032470703
383 domains visited
Cumulative time: 3.964275360107422

BaB round 5
batch: 195
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 403] [/input-8, 64] [/input-8, 64] [/input-8, 64] [/input-8, 64] [/input-8, 64] [/input-8, 403] [/input-8, 64] [/input-8, 64] [/input-8, 64] 
cut re-enabled after branching node selection
0 lb beta sum: 0.08096511662006378, worst -0.0396723747253418
10 lb beta sum: 0.08096511662006378, worst -0.03955554962158203
Time: prepare 0.0169    bound 0.1399    transfer 0.0011    finalize 0.0018    func 0.1623    
Accumulated time: func 1.2353    prepare 0.0907    bound 1.1084    transfer 0.0103    finalize 0.0191    
all_split False
======================Cut inference begins======================
max lb tensor(0.00887537) min lb tensor(-0.03947258)
Number of Verified Splits: 111 of 390
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 14
#cuts 4-6: 10
#cuts 7-9: 4
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.030939102172851562 
BICCOS Cumulative time: 1.0406925678253174
Preprocessing time: 0.011186599731445312 Inference time: 0.016338348388671875 Add cuts time: 0.002294301986694336 Cut analysis time: 0.001119852066040039
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03947 (22), -0.03755 (22), -0.03698 (22), -0.03569 (22), -0.03505 (22), -0.03416 (22), -0.03319 (22), -0.03272 (22), -0.03201 (22), -0.03169 (22), -0.03167 (22), -0.03102 (22), -0.03022 (22), -0.03008 (22), -0.02948 (22), -0.02920 (22), -0.02864 (22), -0.02852 (22), -0.02825 (22), -0.02822 (22), 
Length of domains: 279
Time: pickout 0.0156    decision 0.0225    set_bounds 0.0178    solve 0.1625    add 0.0799    
Accumulated time: pickout 0.0479    decision 0.8290    set_bounds 0.1527    solve 1.1744    add 0.9023    
Current (lb-rhs): -0.03947257995605469
662 domains visited
Cumulative time: 4.301549434661865

BaB round 6
batch: 279
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 403] [/input-8, 64] [/input-8, 403] [/input-8, 403] [/input-8, 817] [/input-8, 817] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03764677047729492
10 lb beta sum: 0.03991960361599922, worst -0.03759574890136719
Time: prepare 0.0111    bound 0.1390    transfer 0.0026    finalize 0.0026    func 0.1589    
Accumulated time: func 1.3942    prepare 0.1020    bound 1.2474    transfer 0.0129    finalize 0.0217    
all_split False
======================Cut inference begins======================
max lb tensor(0.01089859) min lb tensor(-0.03754997)
Number of Verified Splits: 231 of 558
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 17
#cuts 4-6: 10
#cuts 7-9: 4
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.055396318435668945 
BICCOS Cumulative time: 1.0960888862609863
Preprocessing time: 0.015849590301513672 Inference time: 0.03471827507019043 Add cuts time: 0.003655672073364258 Cut analysis time: 0.001172780990600586
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03755 (23), -0.03553 (23), -0.03505 (23), -0.03379 (23), -0.03302 (23), -0.03217 (23), -0.03128 (23), -0.03088 (23), -0.02987 (23), -0.02981 (23), -0.02966 (23), -0.02915 (23), -0.02838 (23), -0.02785 (23), -0.02734 (23), -0.02730 (23), -0.02681 (23), -0.02665 (23), -0.02632 (23), -0.02611 (23), 
Length of domains: 327
Time: pickout 0.0173    decision 0.0259    set_bounds 0.0238    solve 0.1591    add 0.0782    
Accumulated time: pickout 0.0652    decision 0.8549    set_bounds 0.1766    solve 1.3334    add 0.9805    
Current (lb-rhs): -0.03754997253417969
989 domains visited
Cumulative time: 4.669290065765381

BaB round 7
batch: 327
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03453254699707031
10 lb beta sum: 0.044857900589704514, worst -0.034516334533691406
Time: prepare 0.0160    bound 0.1421    transfer 0.0028    finalize 0.0026    func 0.1687    
Accumulated time: func 1.5629    prepare 0.1182    bound 1.3895    transfer 0.0156    finalize 0.0243    
all_split False
======================Cut inference begins======================
max lb tensor(0.00773811) min lb tensor(-0.03450108)
Number of Verified Splits: 143 of 654
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 18
#cuts 4-6: 10
#cuts 7-9: 4
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.04459691047668457 
BICCOS Cumulative time: 1.140685796737671
Preprocessing time: 0.018911361694335938 Inference time: 0.021673202514648438 Add cuts time: 0.0027871131896972656 Cut analysis time: 0.0012252330780029297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03450 (24), -0.03385 (24), -0.03235 (24), -0.03205 (24), -0.03170 (24), -0.03112 (24), -0.03071 (24), -0.03006 (24), -0.02989 (24), -0.02897 (24), -0.02896 (24), -0.02832 (24), -0.02824 (24), -0.02784 (24), -0.02731 (24), -0.02719 (24), -0.02675 (24), -0.02666 (24), -0.02646 (24), -0.02610 (24), 
Length of domains: 511
Time: pickout 0.0179    decision 0.0289    set_bounds 0.0168    solve 0.1689    add 0.0987    
Accumulated time: pickout 0.0831    decision 0.8838    set_bounds 0.1933    solve 1.5023    add 1.0792    
Current (lb-rhs): -0.034501075744628906
1500 domains visited
Cumulative time: 5.0531675815582275

BaB round 8
batch: 511
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 424] [/input, 424] [/input-8, 1331] [/input, 481] [/input-8, 1618] [/input, 481] [/input-8, 1618] [/input-8, 1331] [/input-8, 1331] [/input, 481] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03219461441040039
10 lb beta sum: 0.04420236125588417, worst -0.03218793869018555
Time: prepare 0.0257    bound 0.1439    transfer 0.0021    finalize 0.0061    func 0.1846    
Accumulated time: func 1.7475    prepare 0.1441    bound 1.5334    transfer 0.0177    finalize 0.0305    
all_split False
======================Cut inference begins======================
max lb tensor(0.01613331) min lb tensor(-0.03217888)
Number of Verified Splits: 250 of 1022
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 20
#cuts 4-6: 10
#cuts 7-9: 4
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.07277369499206543 
BICCOS Cumulative time: 1.2134594917297363
Preprocessing time: 0.03144431114196777 Inference time: 0.035802364349365234 Add cuts time: 0.004233598709106445 Cut analysis time: 0.0012934207916259766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03218 (25), -0.03154 (25), -0.02993 (25), -0.02974 (25), -0.02968 (25), -0.02930 (25), -0.02904 (25), -0.02881 (25), -0.02780 (25), -0.02749 (25), -0.02743 (25), -0.02723 (25), -0.02716 (25), -0.02679 (25), -0.02657 (25), -0.02631 (25), -0.02597 (25), -0.02552 (25), -0.02533 (25), -0.02533 (25), 
Length of domains: 772
Time: pickout 0.0579    decision 0.0383    set_bounds 0.0442    solve 0.1849    add 0.1145    
Accumulated time: pickout 0.1410    decision 0.9222    set_bounds 0.2376    solve 1.6872    add 1.1937    
Current (lb-rhs): -0.03217887878417969
2272 domains visited
Cumulative time: 5.575361490249634

BaB round 9
batch: 772
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 481] [/input, 481] [/input-8, 861] [/input, 481] [/input-8, 1331] [/input-8, 861] [/input, 481] [/input-8, 861] [/input-8, 1331] [/input-8, 861] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.029649734497070312
10 lb beta sum: 0.06942331045866013, worst -0.029651641845703125
Time: prepare 0.0389    bound 0.1889    transfer 0.0040    finalize 0.0076    func 0.2504    
Accumulated time: func 1.9979    prepare 0.1833    bound 1.7222    transfer 0.0216    finalize 0.0381    
all_split False
======================Cut inference begins======================
max lb tensor(0.24834824) min lb tensor(-0.02963495)
Number of Verified Splits: 554 of 1544
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 15
#cuts 4-6: 10
#cuts 7-9: 4
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.13777470588684082 
BICCOS Cumulative time: 1.3512341976165771
Preprocessing time: 0.04692196846008301 Inference time: 0.08250594139099121 Add cuts time: 0.0071599483489990234 Cut analysis time: 0.0011868476867675781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02963 (26), -0.02901 (26), -0.02866 (26), -0.02804 (26), -0.02732 (26), -0.02720 (26), -0.02712 (26), -0.02670 (26), -0.02650 (26), -0.02635 (26), -0.02627 (26), -0.02623 (26), -0.02615 (26), -0.02573 (26), -0.02552 (26), -0.02538 (26), -0.02530 (26), -0.02489 (26), -0.02481 (26), -0.02476 (26), 
Length of domains: 990
Time: pickout 0.0759    decision 0.0541    set_bounds 0.0662    solve 0.2508    add 0.1147    
Accumulated time: pickout 0.2169    decision 0.9762    set_bounds 0.3038    solve 1.9380    add 1.3084    
Current (lb-rhs): -0.029634952545166016
3262 domains visited
Cumulative time: 6.287083864212036

BaB round 10
batch: 990
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 449] [/input, 449] [/input, 449] [/input, 449] [/input, 2726] [/input, 449] [/input, 2726] [/input, 2726] [/input, 449] [/input, 449] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028363704681396484
10 lb beta sum: 0.05350114777684212, worst -0.028350353240966797
Time: prepare 0.0499    bound 0.1720    transfer 0.0045    finalize 0.0102    func 0.2502    
Accumulated time: func 2.2481    prepare 0.2335    bound 1.8943    transfer 0.0261    finalize 0.0483    
all_split False
======================Cut inference begins======================
max lb tensor(0.01601648) min lb tensor(-0.02834606)
Number of Verified Splits: 968 of 1980
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 20
#cuts 4-6: 9
#cuts 7-9: 4
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.22412753105163574 
BICCOS Cumulative time: 1.575361728668213
Preprocessing time: 0.06048583984375 Inference time: 0.15069818496704102 Add cuts time: 0.011615991592407227 Cut analysis time: 0.0013275146484375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02835 (27), -0.02773 (27), -0.02738 (27), -0.02677 (27), -0.02592 (27), -0.02587 (27), -0.02582 (27), -0.02525 (27), -0.02521 (27), -0.02498 (27), -0.02496 (27), -0.02490 (27), -0.02486 (27), -0.02429 (27), -0.02424 (27), -0.02403 (27), -0.02344 (27), -0.02339 (27), -0.02334 (27), -0.02284 (27), 
Length of domains: 1012
Time: pickout 0.0793    decision 0.2203    set_bounds 0.0838    solve 0.2507    add 0.1228    
Accumulated time: pickout 0.2962    decision 1.1965    set_bounds 0.3876    solve 2.1887    add 1.4312    
Current (lb-rhs): -0.02834606170654297
4274 domains visited
Cumulative time: 7.282861948013306

BaB round 11
batch: 1012
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026741504669189453
10 lb beta sum: 0.17514106631278992, worst -0.02670001983642578
Time: prepare 0.0522    bound 0.2276    transfer 0.0049    finalize 0.0114    func 0.3091    
Accumulated time: func 2.5573    prepare 0.2859    bound 2.1218    transfer 0.0310    finalize 0.0596    
all_split False
======================Cut inference begins======================
max lb tensor(0.02327962) min lb tensor(-0.02669191)
Number of Verified Splits: 977 of 2024
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 21
#cuts 4-6: 9
#cuts 7-9: 4
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.23382925987243652 
BICCOS Cumulative time: 1.8091909885406494
Preprocessing time: 0.06321144104003906 Inference time: 0.1587367057800293 Add cuts time: 0.010576963424682617 Cut analysis time: 0.0013041496276855469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02669 (28), -0.02608 (28), -0.02573 (28), -0.02512 (28), -0.02426 (28), -0.02415 (28), -0.02354 (28), -0.02333 (28), -0.02330 (28), -0.02320 (28), -0.02275 (28), -0.02266 (28), -0.02259 (28), -0.02239 (28), -0.02237 (28), -0.02200 (28), -0.02180 (28), -0.02172 (28), -0.02171 (28), -0.02145 (28), 
Length of domains: 1047
Time: pickout 0.0524    decision 0.0660    set_bounds 0.0865    solve 0.3096    add 0.0944    
Accumulated time: pickout 0.3487    decision 1.2626    set_bounds 0.4741    solve 2.4983    add 1.5256    
Current (lb-rhs): -0.026691913604736328
5321 domains visited
Cumulative time: 8.138697147369385

BaB round 12
batch: 1047
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1331] [/input-8, 75] [/input-8, 861] [/input, 2726] [/input-8, 861] [/input-8, 75] [/input-8, 861] [/input-8, 1618] [/input-8, 75] [/input-8, 75] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023596763610839844
10 lb beta sum: 0.1664421111345291, worst -0.023593902587890625
Time: prepare 0.0535    bound 0.2355    transfer 0.0030    finalize 0.0117    func 0.4728    
Accumulated time: func 3.0301    prepare 0.3397    bound 2.3573    transfer 0.0340    finalize 0.0714    
all_split False
======================Cut inference begins======================
max lb tensor(0.01763526) min lb tensor(-0.02358723)
Number of Verified Splits: 759 of 2094
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 19
#cuts 4-6: 9
#cuts 7-9: 4
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.20367836952209473 
BICCOS Cumulative time: 2.012869358062744
Preprocessing time: 0.06690359115600586 Inference time: 0.12717080116271973 Add cuts time: 0.008314847946166992 Cut analysis time: 0.0012891292572021484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02359 (29), -0.02349 (29), -0.02323 (29), -0.02284 (29), -0.02262 (29), -0.02254 (29), -0.02227 (29), -0.02187 (29), -0.02123 (29), -0.02110 (29), -0.02106 (29), -0.02104 (29), -0.02101 (29), -0.02094 (29), -0.02074 (29), -0.02068 (29), -0.02064 (29), -0.02034 (29), -0.02029 (29), -0.02028 (29), 
Length of domains: 1335
Time: pickout 0.0394    decision 0.0684    set_bounds 0.0894    solve 0.4733    add 0.1309    
Accumulated time: pickout 0.3881    decision 1.3310    set_bounds 0.5635    solve 2.9716    add 1.6565    
Current (lb-rhs): -0.02358722686767578
6656 domains visited
Cumulative time: 9.162047147750854

BaB round 13
batch: 1335
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2726] [/input-8, 75] [/input-8, 75] [/input-8, 1618] [/input-8, 75] [/input-8, 75] [/input-8, 1618] [/input-8, 1618] [/input-8, 1618] [/input-8, 75] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02158355712890625
10 lb beta sum: 0.12812651693820953, worst -0.02158355712890625
Time: prepare 0.0801    bound 0.2334    transfer 0.0109    finalize 0.0184    func 0.3615    
Accumulated time: func 3.3916    prepare 0.4219    bound 2.5907    transfer 0.0448    finalize 0.0897    
all_split False
======================Cut inference begins======================
max lb tensor(0.00674343) min lb tensor(-0.02157450)
Number of Verified Splits: 858 of 2670
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 19
#cuts 4-6: 9
#cuts 7-9: 5
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.2726607322692871 
BICCOS Cumulative time: 2.2855300903320312
Preprocessing time: 0.09350800514221191 Inference time: 0.16637706756591797 Add cuts time: 0.011097431182861328 Cut analysis time: 0.0016782283782958984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02157 (30), -0.02149 (30), -0.02121 (30), -0.02081 (30), -0.02061 (30), -0.02052 (30), -0.02025 (30), -0.01986 (30), -0.01953 (30), -0.01945 (30), -0.01931 (30), -0.01907 (30), -0.01901 (30), -0.01898 (30), -0.01893 (30), -0.01872 (30), -0.01867 (30), -0.01865 (30), -0.01857 (30), -0.01850 (30), 
Length of domains: 1812
Time: pickout 0.1067    decision 0.1229    set_bounds 0.1347    solve 0.3625    add 0.1260    
Accumulated time: pickout 0.4948    decision 1.4539    set_bounds 0.6982    solve 3.3341    add 1.7825    
Current (lb-rhs): -0.02157449722290039
8468 domains visited
Cumulative time: 10.341346263885498

BaB round 14
batch: 1812
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2726] [/input, 3994] [/input, 2726] [/input-8, 1629] [/input, 2726] [/input, 3994] [/input-8, 1629] [/input, 2726] [/input, 3994] [/input-8, 970] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018699169158935547
10 lb beta sum: 0.09637309610843658, worst -0.01859283447265625
Time: prepare 0.1027    bound 0.3580    transfer 0.0241    finalize 0.2305    func 0.7398    
Accumulated time: func 4.1314    prepare 0.5249    bound 2.9487    transfer 0.0689    finalize 0.3202    
all_split False
======================Cut inference begins======================
max lb tensor(0.00880766) min lb tensor(-0.01858044)
Number of Verified Splits: 1371 of 3624
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 25
#cuts 4-6: 10
#cuts 7-9: 4
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.4219322204589844 
BICCOS Cumulative time: 2.7074623107910156
Preprocessing time: 0.12628531455993652 Inference time: 0.27163171768188477 Add cuts time: 0.02229905128479004 Cut analysis time: 0.0017161369323730469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01858 (31), -0.01849 (31), -0.01844 (31), -0.01835 (31), -0.01821 (31), -0.01807 (31), -0.01782 (31), -0.01768 (31), -0.01762 (31), -0.01753 (31), -0.01748 (31), -0.01740 (31), -0.01726 (31), -0.01711 (31), -0.01687 (31), -0.01680 (31), -0.01672 (31), -0.01650 (31), -0.01641 (31), -0.01637 (31), 
Length of domains: 2253
Time: pickout 0.1068    decision 0.1244    set_bounds 0.1721    solve 0.7416    add 0.0112    
Accumulated time: pickout 0.6016    decision 1.5783    set_bounds 0.8703    solve 4.0757    add 1.7938    
Current (lb-rhs): -0.01858043670654297
10721 domains visited
Cumulative time: 11.94048547744751

BaB round 15
batch: 2253
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 1618] [/input, 2726] [/input-8, 678] [/input-8, 1618] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.017376422882080078
10 lb beta sum: 0.3674231469631195, worst -0.016446590423583984
Time: prepare 0.1382    bound 0.4276    transfer 0.0236    finalize 0.0288    func 0.6482    
Accumulated time: func 4.7797    prepare 0.6634    bound 3.3763    transfer 0.0925    finalize 0.3490    
all_split False
======================Cut inference begins======================
max lb tensor(0.48634285) min lb tensor(-0.01643419)
Number of Verified Splits: 3655 of 4506
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 1-3: 31
#cuts 4-6: 9
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 1.1793863773345947 
BICCOS Cumulative time: 3.8868486881256104
Preprocessing time: 0.157088041305542 Inference time: 0.9806175231933594 Add cuts time: 0.04033684730529785 Cut analysis time: 0.0013439655303955078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01643 (32), -0.01635 (32), -0.01633 (32), -0.01626 (32), -0.01607 (32), -0.01598 (32), -0.01568 (32), -0.01558 (32), -0.01547 (32), -0.01539 (32), -0.01537 (32), -0.01529 (32), -0.01510 (32), -0.01502 (32), -0.01471 (32), -0.01462 (32), -0.01431 (32), -0.01423 (32), -0.01423 (32), -0.01417 (32), 
Length of domains: 851
Time: pickout 0.0490    decision 0.1459    set_bounds 0.2157    solve 0.6499    add 0.0908    
Accumulated time: pickout 0.6505    decision 1.7242    set_bounds 1.0860    solve 4.7256    add 1.8846    
Current (lb-rhs): -0.016434192657470703
11572 domains visited
Cumulative time: 14.32036304473877

BaB round 16
batch: 851
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input-8, 678] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0164337158203125
10 lb beta sum: 0.7057632207870483, worst -0.013174772262573242
Time: prepare 0.0473    bound 0.2175    transfer 0.0073    finalize 0.0113    func 0.2953    
Accumulated time: func 5.0749    prepare 0.7110    bound 3.5939    transfer 0.0998    finalize 0.3603    
all_split False
======================Cut inference begins======================
max lb tensor(0.72102338) min lb tensor(-0.01316732)
Number of Verified Splits: 1597 of 1702
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 32
#cuts 4-6: 9
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.3746795654296875 
BICCOS Cumulative time: 4.261528253555298
Preprocessing time: 0.05942058563232422 Inference time: 0.30384397506713867 Add cuts time: 0.010205984115600586 Cut analysis time: 0.0012090206146240234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01317 (33), -0.01307 (33), -0.01305 (33), -0.01296 (33), -0.01221 (33), -0.01212 (33), -0.01209 (33), -0.01199 (33), -0.01110 (33), -0.01108 (33), -0.01103 (33), -0.01101 (33), -0.01060 (33), -0.01051 (33), -0.01048 (33), -0.01039 (33), -0.01014 (33), -0.01014 (33), -0.01007 (33), -0.01006 (33), 
Length of domains: 105
Time: pickout 0.0353    decision 0.0628    set_bounds 0.0785    solve 0.2956    add 0.0808    
Accumulated time: pickout 0.6858    decision 1.7870    set_bounds 1.1645    solve 5.0212    add 1.9653    
Current (lb-rhs): -0.013167321681976318
11677 domains visited
Cumulative time: 15.270262479782104

BaB round 17
batch: 105
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input, 1790] [/input, 1790] [/input, 1790] [/input-8, 678] [/input, 1790] [/input, 1790] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01528310775756836
10 lb beta sum: 0.7309778928756714, worst -0.011842012405395508
Time: prepare 0.0060    bound 0.1800    transfer 0.0018    finalize 0.0015    func 0.1908    
Accumulated time: func 5.2658    prepare 0.7173    bound 3.7739    transfer 0.1015    finalize 0.3618    
all_split False
======================Cut inference begins======================
max lb tensor(0.00749159) min lb tensor(-0.01183057)
Number of Verified Splits: 110 of 210
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 32
#cuts 4-6: 9
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.03614473342895508 
BICCOS Cumulative time: 4.297672986984253
Preprocessing time: 0.0076372623443603516 Inference time: 0.024332761764526367 Add cuts time: 0.0028502941131591797 Cut analysis time: 0.0013244152069091797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01183 (34), -0.01174 (34), -0.01171 (34), -0.01162 (34), -0.01087 (34), -0.01078 (34), -0.01075 (34), -0.01066 (34), -0.00975 (34), -0.00974 (34), -0.00968 (34), -0.00968 (34), -0.00927 (34), -0.00917 (34), -0.00915 (34), -0.00905 (34), -0.00880 (34), -0.00878 (34), -0.00872 (34), -0.00871 (34), 
Length of domains: 100
Time: pickout 0.0150    decision 0.0207    set_bounds 0.0101    solve 0.1909    add 0.0765    
Accumulated time: pickout 0.7008    decision 1.8077    set_bounds 1.1746    solve 5.2121    add 2.0419    
Current (lb-rhs): -0.011830568313598633
11777 domains visited
Cumulative time: 15.628275871276855

BaB round 18
batch: 100
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input, 1790] [/input, 1790] 
split level 1: [/input-8, 1629] [/input-8, 1629] [/input-8, 1629] [/input-8, 1629] [/input-8, 1618] [/input-8, 1618] [/input-8, 1629] [/input-8, 1618] [/input-8, 970] [/input-8, 970] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9428697228431702, worst -0.011831045150756836
10 lb beta sum: 0.9428697228431702, worst -0.01184391975402832
Time: prepare 0.0201    bound 0.1586    transfer 0.0010    finalize 0.0022    func 0.1847    
Accumulated time: func 5.4504    prepare 0.7377    bound 3.9325    transfer 0.1025    finalize 0.3640    
all_split False
======================Cut inference begins======================
max lb tensor(0.01345193) min lb tensor(-0.01183057)
Number of Verified Splits: 211 of 400
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 32
#cuts 4-6: 9
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.05921578407287598 
BICCOS Cumulative time: 4.356888771057129
Preprocessing time: 0.012596368789672852 Inference time: 0.043091773986816406 Add cuts time: 0.0024864673614501953 Cut analysis time: 0.0010411739349365234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01183 (36), -0.01174 (36), -0.01171 (36), -0.01162 (36), -0.01087 (36), -0.01078 (36), -0.01075 (36), -0.01066 (36), -0.01060 (36), -0.01051 (36), -0.01050 (36), -0.01041 (36), -0.00975 (36), -0.00974 (36), -0.00967 (36), -0.00966 (36), -0.00964 (36), -0.00956 (36), -0.00954 (36), -0.00945 (36), 
Length of domains: 189
Time: pickout 0.0156    decision 0.0193    set_bounds 0.0340    solve 0.1848    add 0.0809    
Accumulated time: pickout 0.7163    decision 1.8271    set_bounds 1.2086    solve 5.3969    add 2.1227    
Current (lb-rhs): -0.011830568313598633
11966 domains visited
Cumulative time: 16.030760765075684

BaB round 19
batch: 189
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input, 3994] [/input-8, 67] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8812320232391357, worst -0.010998010635375977
10 lb beta sum: 0.8812320232391357, worst -0.011006593704223633
Time: prepare 0.0188    bound 0.1630    transfer 0.0012    finalize 0.0023    func 0.1878    
Accumulated time: func 5.6383    prepare 0.7567    bound 4.0955    transfer 0.1037    finalize 0.3663    
all_split False
======================Cut inference begins======================
max lb tensor(0.01152736) min lb tensor(-0.01099801)
Number of Verified Splits: 228 of 378
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 33
#cuts 4-6: 9
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.06152009963989258 
BICCOS Cumulative time: 4.4184088706970215
Preprocessing time: 0.011636734008789062 Inference time: 0.046157121658325195 Add cuts time: 0.0026895999908447266 Cut analysis time: 0.0010366439819335938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01100 (37), -0.01088 (37), -0.01088 (37), -0.01076 (37), -0.01004 (37), -0.00992 (37), -0.00991 (37), -0.00980 (37), -0.00976 (37), -0.00967 (37), -0.00963 (37), -0.00955 (37), -0.00887 (37), -0.00886 (37), -0.00881 (37), -0.00876 (37), -0.00876 (37), -0.00871 (37), -0.00868 (37), -0.00859 (37), 
Length of domains: 150
Time: pickout 0.0171    decision 0.0226    set_bounds 0.0178    solve 0.1880    add 0.0766    
Accumulated time: pickout 0.7334    decision 1.8497    set_bounds 1.2264    solve 5.5848    add 2.1993    
Current (lb-rhs): -0.010998010635375977
12116 domains visited
Cumulative time: 16.42286968231201

BaB round 20
batch: 150
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 67] [/input-8, 67] [/input-8, 67] [/input-8, 67] [/input-8, 67] [/input-8, 67] [/input-8, 67] [/input-8, 67] [/input-8, 67] [/input, 3994] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.009247779846191406
10 lb beta sum: 0.23676921427249908, worst -0.009252458810806274
Time: prepare 0.0082    bound 0.1605    transfer 0.0006    finalize 0.0019    func 0.1733    
Accumulated time: func 5.8115    prepare 0.7651    bound 4.2560    transfer 0.1044    finalize 0.3682    
all_split False
======================Cut inference begins======================
max lb tensor(0.00444275) min lb tensor(-0.00924778)
Number of Verified Splits: 149 of 300
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 33
#cuts 4-6: 9
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.04365134239196777 
BICCOS Cumulative time: 4.462060213088989
Preprocessing time: 0.009392976760864258 Inference time: 0.03110790252685547 Add cuts time: 0.002125978469848633 Cut analysis time: 0.001024484634399414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00925 (38), -0.00913 (38), -0.00912 (38), -0.00900 (38), -0.00828 (38), -0.00817 (38), -0.00816 (38), -0.00804 (38), -0.00794 (38), -0.00787 (38), -0.00781 (38), -0.00775 (38), -0.00722 (38), -0.00714 (38), -0.00713 (38), -0.00711 (38), -0.00704 (38), -0.00703 (38), -0.00699 (38), -0.00699 (38), 
Length of domains: 151
Time: pickout 0.0162    decision 0.0203    set_bounds 0.0135    solve 0.1734    add 0.0794    
Accumulated time: pickout 0.7497    decision 1.8700    set_bounds 1.2400    solve 5.7582    add 2.2787    
Current (lb-rhs): -0.009247779846191406
12267 domains visited
Cumulative time: 16.775097370147705

BaB round 21
batch: 151
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4540887773036957, worst -0.007871150970458984
10 lb beta sum: 0.4593154788017273, worst -0.007861524820327759
Time: prepare 0.0152    bound 0.1614    transfer 0.0007    finalize 0.0019    func 0.1813    
Accumulated time: func 5.9928    prepare 0.7805    bound 4.4174    transfer 0.1051    finalize 0.3701    
all_split False
======================Cut inference begins======================
max lb tensor(0.00264013) min lb tensor(-0.00784783)
Number of Verified Splits: 78 of 302
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 33
#cuts 4-6: 9
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.02933645248413086 
BICCOS Cumulative time: 4.49139666557312
Preprocessing time: 0.009411334991455078 Inference time: 0.01592230796813965 Add cuts time: 0.002953767776489258 Cut analysis time: 0.001049041748046875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00785 (39), -0.00773 (39), -0.00772 (39), -0.00760 (39), -0.00689 (39), -0.00677 (39), -0.00676 (39), -0.00664 (39), -0.00655 (39), -0.00647 (39), -0.00641 (39), -0.00635 (39), -0.00623 (39), -0.00611 (39), -0.00610 (39), -0.00598 (39), -0.00574 (39), -0.00573 (39), -0.00572 (39), -0.00564 (39), 
Length of domains: 224
Time: pickout 0.0162    decision 0.0209    set_bounds 0.0136    solve 0.1814    add 0.0765    
Accumulated time: pickout 0.7659    decision 1.8908    set_bounds 1.2535    solve 5.9396    add 2.3552    
Current (lb-rhs): -0.007847830653190613
12491 domains visited
Cumulative time: 17.121400356292725

BaB round 22
batch: 224
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4324929714202881, worst -0.007027193903923035
10 lb beta sum: 0.4324929714202881, worst -0.00702337920665741
Time: prepare 0.0226    bound 0.1576    transfer 0.0010    finalize 0.0033    func 0.1876    
Accumulated time: func 6.1804    prepare 0.8034    bound 4.5750    transfer 0.1061    finalize 0.3734    
all_split False
======================Cut inference begins======================
max lb tensor(0.01048499) min lb tensor(-0.00700335)
Number of Verified Splits: 267 of 448
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 45.
#cuts 1-3: 35
#cuts 4-6: 9
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.07651782035827637 
BICCOS Cumulative time: 4.5679144859313965
Preprocessing time: 0.013737916946411133 Inference time: 0.058465003967285156 Add cuts time: 0.0032541751861572266 Cut analysis time: 0.0010607242584228516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00700 (40), -0.00689 (40), -0.00688 (40), -0.00677 (40), -0.00605 (40), -0.00593 (40), -0.00592 (40), -0.00581 (40), -0.00559 (40), -0.00550 (40), -0.00547 (40), -0.00540 (40), -0.00538 (40), -0.00528 (40), -0.00527 (40), -0.00516 (40), -0.00488 (40), -0.00486 (40), -0.00485 (40), -0.00478 (40), 
Length of domains: 181
Time: pickout 0.0186    decision 0.0215    set_bounds 0.0202    solve 0.1877    add 0.0982    
Accumulated time: pickout 0.7845    decision 1.9123    set_bounds 1.2737    solve 6.1273    add 2.4534    
Current (lb-rhs): -0.007003352046012878
12672 domains visited
Cumulative time: 17.553266048431396

BaB round 23
batch: 181
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.005364418029785156
10 lb beta sum: 0.2278304249048233, worst -0.005317121744155884
Time: prepare 0.0096    bound 0.1555    transfer 0.0008    finalize 0.0028    func 0.1712    
Accumulated time: func 6.3516    prepare 0.8132    bound 4.7305    transfer 0.1069    finalize 0.3763    
all_split False
======================Cut inference begins======================
max lb tensor(0.23573680) min lb tensor(-0.00528987)
Number of Verified Splits: 239 of 362
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 36
#cuts 4-6: 9
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.06867718696594238 
BICCOS Cumulative time: 4.636591672897339
Preprocessing time: 0.011196374893188477 Inference time: 0.05315256118774414 Add cuts time: 0.003209352493286133 Cut analysis time: 0.0011188983917236328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00529 (41), -0.00518 (41), -0.00517 (41), -0.00505 (41), -0.00433 (41), -0.00422 (41), -0.00422 (41), -0.00410 (41), -0.00388 (41), -0.00379 (41), -0.00376 (41), -0.00369 (41), -0.00367 (41), -0.00358 (41), -0.00357 (41), -0.00353 (41), -0.00345 (41), -0.00342 (41), -0.00340 (41), -0.00330 (41), 
Length of domains: 123
Time: pickout 0.0527    decision 0.0190    set_bounds 0.0167    solve 0.1713    add 0.0767    
Accumulated time: pickout 0.8372    decision 1.9313    set_bounds 1.2904    solve 6.2986    add 2.5302    
Current (lb-rhs): -0.005289867520332336
12795 domains visited
Cumulative time: 17.967156887054443

BaB round 24
batch: 123
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1734] [/input-8, 1935] [/input-8, 1734] [/input-8, 1734] [/input-8, 1734] [/input-8, 1734] [/input-8, 1734] [/input-8, 1734] [/input-8, 1734] [/input-8, 1734] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0041599273681640625
10 lb beta sum: 0.11870542913675308, worst -0.004092127084732056
Time: prepare 0.0066    bound 0.1604    transfer 0.0007    finalize 0.0015    func 0.1709    
Accumulated time: func 6.5225    prepare 0.8200    bound 4.8909    transfer 0.1076    finalize 0.3778    
all_split False
======================Cut inference begins======================
max lb tensor(0.23048444) min lb tensor(-0.00408398)
Number of Verified Splits: 194 of 246
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 37
#cuts 4-6: 9
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.05518317222595215 
BICCOS Cumulative time: 4.691774845123291
Preprocessing time: 0.007967710494995117 Inference time: 0.04357457160949707 Add cuts time: 0.0025703907012939453 Cut analysis time: 0.0010704994201660156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00408 (42), -0.00397 (42), -0.00396 (42), -0.00384 (42), -0.00313 (42), -0.00301 (42), -0.00301 (42), -0.00289 (42), -0.00266 (42), -0.00259 (42), -0.00254 (42), -0.00248 (42), -0.00246 (42), -0.00235 (42), -0.00235 (42), -0.00223 (42), -0.00196 (42), -0.00194 (42), -0.00184 (42), -0.00183 (42), 
Length of domains: 52
Time: pickout 0.0155    decision 0.0188    set_bounds 0.0112    solve 0.1710    add 0.0618    
Accumulated time: pickout 0.8527    decision 1.9501    set_bounds 1.3017    solve 6.4696    add 2.5919    
Current (lb-rhs): -0.004083976149559021
12847 domains visited
Cumulative time: 18.308794498443604

BaB round 25
batch: 52
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3192] [/input, 3192] [/input, 3192] [/input, 3192] [/input, 3192] [/input, 3192] [/input, 3192] [/input, 3192] [/input, 3192] [/input, 3192] 
split level 1: [/input, 424] [/input, 424] [/input, 424] [/input, 424] [/input, 424] [/input, 424] [/input, 424] [/input, 424] [/input, 424] [/input, 424] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -8.058547973632812e-05

all verified at 4th iter
Time: prepare 0.0055    bound 0.0415    transfer 0.0011    finalize 0.0015    func 0.0511    
Accumulated time: func 6.5736    prepare 0.8258    bound 4.9325    transfer 0.1087    finalize 0.3793    
all_split False
======================Cut inference begins======================
max lb tensor(0.00515604) min lb tensor(8.88109207e-06)
Number of Verified Splits: 208 of 208
No cut inferred: All or none verified.
Total number of valid cuts: 47.
#cuts 1-3: 37
#cuts 4-6: 9
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.0067365169525146484 
BICCOS Cumulative time: 4.698511362075806
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0110    decision 0.0167    set_bounds 0.0104    solve 0.0512    add 0.0001    
Accumulated time: pickout 0.8637    decision 1.9668    set_bounds 1.3121    solve 6.5207    add 2.5920    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
12847 domains visited
Cumulative time: 18.406299829483032


Properties batch 8, size 1
Remaining timeout: 179.8554446697235
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 20.1447 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 90, vnnlib ID: 90 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.92437601, -4.53821707, -1.81814766, -0.89523673, -2.18286943,
         -1.50445235, -2.81978679, -2.90949965, -4.78050327, -3.54446316]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [640]; unstable size 640; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 228, 1, 640] with unstable size 227 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 640] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 640] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [227]; unstable size 227; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 227] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 227] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.54901510, -0.55123234, -2.14694476, -2.65342474, -1.82377076,
         -2.15827703, -1.06202710,  0.01771563, -1.15435982]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.92437601, -4.53821707, -1.81814766, -0.89523673, -2.18286943,
         -1.50445235, -2.81978679, -2.90949965, -4.78050327, -3.54446316]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.92437601, -4.53821659, -1.81814742, -0.89523673, -2.18286896,
          -1.50445259, -2.81978631, -2.90949917, -4.78050327, -3.54446268],
         [-3.92437601, -4.53821659, -1.81814742, -0.89523673, -2.18286896,
          -1.50445259, -2.81978631, -2.90949917, -4.78050327, -3.54446268]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.10458970,  1.71843028, -1.00163889, -1.92454958, -0.63691735,
          -1.31533372,  0.08971286,  0.72467637]]], device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         ...,


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0941 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 91, vnnlib ID: 91 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.28595638,  -5.88002491, -13.45972347, -12.72046280, -11.91884041,
         -13.39254284, -13.69190216, -11.92345619, -11.07378769,  -5.33333635]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [628]; unstable size 628; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 195, 1, 628] with unstable size 194 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 628] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 628] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [194]; unstable size 194; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 194] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 194] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.77330256,  5.60239124,  4.83423901,  3.93323135,  5.32919121,
          5.82401514,  3.69637299,  3.85418463, -1.36576056]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.28595638,  -5.88002491, -13.45972347, -12.72046280, -11.91884041,
         -13.39254284, -13.69190216, -11.92345619, -11.07378769,  -5.33333635]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.28595638,  -5.88002491, -13.45972347, -12.72046280, -11.91884041,
          -13.39254284, -13.69190216, -11.92345619, -11.07378769,  -5.33333635]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.54668856]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.32222211, -1.24285710, -1.14761901,  ..., -1.32222211,
            -1.32222211, -1.21111107],
           [-1.25873005, -1.24285710, -1.16349196,  ..., -1.32222211,
            -1.32222211, -1.32222211],
           [-1.22698402, -1.22698402, -1.21111107,  ..., -1.33809519,
            -1.32222211, -1.21111107],
           ...,
           [ 0.97936511,  0.99523818,  0.99523818,  ...,  1.04285717,
             1.05873048,  1.04285717],
           [ 1.04285717,  1.04285717,  1.02698421,  ...,  1.05873048,
             1.10634947,  1.13809550],
           [ 1.04285717,  1.04285717,  1.04285717,  ...,  1.01111114,
             1.07460344,  1.07460344]],

          [[-1.56199670, -1.48148143, -1.38486302,  ..., -1.46537840,
            -1.46537840, -1.35265696],
           [-1.44927526, -1.43317223, -1.35265696,  ..., -1.46537840,
            -1.46537840, -1.46537840],
           [-1.40096617, -1.40096617, -1.38486302,  ..., -1.48148143,
            -1.46537840, -1.35265696],
           ...,
           [ 0.72463775,  0.74074084,  0.74074084,  ...,  0.86956531,
             0.88566834,  0.86956531],
           [ 0.78904998,  0.78904998,  0.77294695,  ...,  0.88566834,
             0.93397754,  0.96618366],
           [ 0.78904998,  0.78904998,  0.78904998,  ...,  0.83735919,
             0.90177143,  0.90177143]],

          [[-1.30284870, -1.22788620, -1.13793111,  ..., -1.25787115,
            -1.25787115, -1.15292358],
           [-1.21289361, -1.19790113, -1.12293863,  ..., -1.25787115,
            -1.25787115, -1.25787115],
           [-1.16791618, -1.16791618, -1.15292358,  ..., -1.27286363,
            -1.25787115, -1.15292358],
           ...,
           [ 0.84107965,  0.85607213,  0.85607213,  ...,  0.94602716,
             0.96101969,  0.94602716],
           [ 0.90104967,  0.90104967,  0.88605714,  ...,  0.96101969,
             1.00599718,  1.03598225],
           [ 0.90104967,  0.90104967,  0.90104967,  ...,  0.91604215,
             0.97601217,  0.97601217]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0731 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 92, vnnlib ID: 92 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.22173882,  -9.89736652,  -4.68373394,  -3.01329088,  -4.28179979,
          -2.86711979,  -5.53003645,  -5.05347300, -11.67127705,  -7.88633108]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [485]; unstable size 485; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 197, 1, 485] with unstable size 196 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 485] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 485] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [196]; unstable size 196; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 196] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 196] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.00222683,  5.24682570,  0.82175922, -0.20462823,  0.32712030,
          1.14493680,  1.33189178,  7.36666679,  3.64896488]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.22173882,  -9.89736652,  -4.68373394,  -3.01329088,  -4.28179979,
          -2.86711979,  -5.53003645,  -5.05347300, -11.67127705,  -7.88633108]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.24767017,  -9.97193718,  -4.73787022,  -3.23425245,  -4.31496525,
           -3.29052877,  -5.42143679,  -5.31018877, -11.66250134,  -7.98117399]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05627632]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0066 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0792 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 93, vnnlib ID: 93 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.15195465,  -9.58116150, -14.61256504, -15.32470417, -14.07134438,
         -16.02833176, -16.91090012, -13.49322128, -10.77580357, -11.62801266]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [531]; unstable size 531; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 531] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 531] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 531] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 184] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.31977224, 3.21350455, 3.97968602, 2.74568701, 4.38296127, 5.60134506,
         1.73482752, 0.05008984, 1.12907457]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0643 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 94, vnnlib ID: 94 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.19431782, -14.89802456,  -8.13741684,  -9.92391682,  -9.58477306,
          -9.65702534, -11.04900360, -13.72198963,  -7.17759037, -14.95812511]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [488]; unstable size 488; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 144, 1, 488] with unstable size 143 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 488] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 488] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [143]; unstable size 143; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 143] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 143] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.41919088,  6.05724716,  1.13111067,  0.98754275,  0.83572423,
          2.28893948,  4.95927334, -1.78601420,  6.10188055]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.19431782, -14.89802456,  -8.13741684,  -9.92391682,  -9.58477306,
          -9.65702534, -11.04900360, -13.72198963,  -7.17759037, -14.95812511]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.19431925, -14.89802551,  -8.13741779,  -9.92391777,  -9.58477402,
           -9.65702629, -11.04900360, -13.72199059,  -7.17759132, -14.95812702],
         [ -6.19431925, -14.89802551,  -8.13741779,  -9.92391777,  -9.58477402,
           -9.65702629, -11.04900360, -13.72199059,  -7.17759132, -14.95812702]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.94309855, -0.95982647]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]],


         [[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0849 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 95, vnnlib ID: 95 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.28730583,  -6.10024929,  -9.28009796,  -8.44915771,  -9.51987553,
          -8.47933578,  -8.97727776, -11.69865417,  -9.80428314,  -9.38548374]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [510]; unstable size 510; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 179, 1, 510] with unstable size 178 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 510] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 510] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [178]; unstable size 178; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 178] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 178] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.50108480,  1.35110998,  0.54155397,  1.42685032,  0.50430536,
          1.14256811,  3.30734301,  2.23950005,  2.31573200]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.28730583,  -6.10024929,  -9.28009796,  -8.44915771,  -9.51987553,
          -8.47933578,  -8.97727776, -11.69865417,  -9.80428314,  -9.38548374]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.44it/s]100%|██████████| 1/1 [00:00<00:00,  8.42it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.63890123,  -6.32812786,  -8.66560364,  -7.82581139,  -8.96019840,
           -7.87306643,  -8.56936741, -11.11590290,  -9.56170082,  -9.26755810]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.31077337]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1216 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 12.919256210327148
alpha/beta optimization time: 1.3179118633270264
initial alpha-crown bounds: tensor([[-0.44016039,  1.42102480,  0.61154795,  1.51243067,  0.57646036,
          1.21278596,  3.40189695,  2.28027201,  2.34299707]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.4401603937149048
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.48559308052063
Verifying property 0 with 1 instances.
##### Instance 95 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.44016039]], device='cuda:0') need to verify.
Model prediction is: tensor([ -7.28730583,  -6.10024929,  -9.28009796,  -8.44915771,  -9.51987553,
         -8.47933578,  -8.97727776, -11.69865417,  -9.80428314,  -9.38548374],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.44016039]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 510
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 175
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 703
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010585784912109375
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4401592016220093
10 lb beta sum: 0.0, worst -0.4401611089706421
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0543    transfer 0.0001    finalize 0.0001    func 0.0548    
Accumulated time: func 0.0548    prepare 0.0002    bound 0.0543    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 28] 
split level 2: [/input-12, 6] 
split level 3: [/input-12, 15] 
split level 4: [/input-12, 58] 
split level 5: [/input-12, 29] 
split level 6: [/input-12, 35] 
split level 7: [/input-12, 82] 
split level 8: [/input-12, 45] 
split level 9: [/input-12, 93] 
split level 10: [/input-8, 1428] 
split level 11: [/input-12, 11] 
split level 12: [/input-8, 781] 
split level 13: [/input-8, 893] 
split level 14: [/input-8, 1422] 
split level 15: [/input-12, 90] 
split level 16: [/input-8, 162] 
split level 17: [/input-8, 173] 
split level 18: [/input-8, 1421] 
split level 19: [/input-8, 894] 
split level 20: [/input-8, 697] 
split level 21: [/input, 1771] 
split level 22: [/input-8, 1916] 
split level 23: [/input-8, 557] 
split level 24: [/input-8, 790] 
split level 25: [/input-8, 655] 
split level 26: [/input-8, 1019] 
split level 27: [/input-8, 597] 
split level 28: [/input-8, 130] 
split level 29: [/input-8, 938] 
split level 30: [/input-8, 797] 
split level 31: [/input-8, 1010] 
split level 32: [/input-8, 793] 
split level 33: [/input-8, 565] 
split level 34: [/input-8, 672] 
split level 35: [/input-8, 1938] 
split level 36: [/input-8, 661] 
split level 37: [/input-8, 618] 
split level 38: [/input-8, 1466] 
split level 39: [/input-8, 1875] 
split level 40: [/input, 2537] 
split level 41: [/input-8, 680] 
split level 42: [/input-8, 1868] 
split level 43: [/input, 995] 
split level 44: [/input-8, 1431] 
split level 45: [/input, 2131] 
split level 46: [/input-8, 1090] 
split level 47: [/input, 1772] 
split level 48: [/input-8, 129] 
split level 49: [/input, 1457] 
split level 50: [/input, 1640] 
split level 51: [/input-8, 1619] 
split level 52: [/input, 3523] 
split level 53: [/input-8, 68] 
split level 54: [/input-8, 936] 
split level 55: [/input, 3505] 
split level 56: [/input-8, 1135] 
split level 57: [/input-8, 503] 
split level 58: [/input, 1708] 
split level 59: [/input, 2541] 
split level 60: [/input, 404] 
split level 61: [/input, 2520] 
split level 62: [/input-8, 1576] 
split level 63: [/input-8, 591] 
split level 64: [/input, 2456] 
split level 65: [/input, 3254] 
split level 66: [/input, 2540] 
split level 67: [/input-8, 985] 
split level 68: [/input, 3255] 
split level 69: [/input, 916] 
split level 70: [/input, 3990] 
split level 71: [/input, 822] 
split level 72: [/input, 2750] 
split level 73: [/input-8, 944] 
split level 74: [/input, 3397] 
split level 75: [/input, 2510] 
split level 76: [/input, 1474] 
split level 77: [/input, 2726] 
split level 78: [/input-8, 1011] 
split level 79: [/input, 2150] 
split level 80: [/input, 2252] 
split level 81: [/input, 2766] 
split level 82: [/input, 1369] 
split level 83: [/input, 3489] 
split level 84: [/input, 1502] 
split level 85: [/input, 2536] 
split level 86: [/input, 238] 
split level 87: [/input-8, 1423] 
split level 88: [/input, 2747] 
split level 89: [/input, 3995] 
split level 90: [/input, 2524] 
split level 91: [/input, 2542] 
split level 92: [/input, 3550] 
split level 93: [/input, 2745] 
split level 94: [/input, 966] 
split level 95: [/input-8, 1631] 
split level 96: [/input, 2772] 
split level 97: [/input, 3504] 
split level 98: [/input, 2525] 
split level 99: [/input-8, 1478] 
split level 100: [/input, 1013] 
split level 101: [/input, 4051] 
split level 102: [/input, 3267] 
split level 103: [/input, 4025] 
split level 104: [/input, 227] 
split level 105: [/input, 242] 
split level 106: [/input-8, 1279] 
split level 107: [/input, 180] 
split level 108: [/input, 957] 
split level 109: [/input, 2538] 
split level 110: [/input, 830] 
split level 111: [/input-8, 1623] 
split level 112: [/input, 3393] 
split level 113: [/input, 2279] 
split level 114: [/input, 241] 
split level 115: [/input-8, 1474] 
split level 116: [/input, 197] 
split level 117: [/input-8, 1597] 
split level 118: [/input, 1575] 
split level 119: [/input-8, 835] 
split level 120: [/input, 3564] 
split level 121: [/input-8, 1446] 
split level 122: [/input, 2526] 
split level 123: [/input, 986] 
split level 124: [/input, 806] 
split level 125: [/input, 3249] 
split level 126: [/input, 4052] 
split level 127: [/input, 580] 
split level 128: [/input-8, 871] 
split level 129: [/input, 2509] 
split level 130: [/input, 3418] 
split level 131: [/input, 170] 
split level 132: [/input, 4059] 
split level 133: [/input, 228] 
split level 134: [/input-8, 510] 
split level 135: [/input, 1019] 
split level 136: [/input, 3553] 
split level 137: [/input, 3473] 
split level 138: [/input, 970] 
split level 139: [/input, 3434] 
split level 140: [/input, 499] 
split level 141: [/input, 3304] 
split level 142: [/input, 979] 
split level 143: [/input, 1401] 
split level 144: [/input, 933] 
split level 145: [/input, 229] 
split level 146: [/input, 950] 
split level 147: [/input, 4066] 
split level 148: [/input-8, 905] 
split level 149: [/input, 1516] 
split level 150: [/input, 3251] 
split level 151: [/input, 3306] 
split level 152: [/input-8, 934] 
split level 153: [/input, 1343] 
split level 154: [/input-8, 296] 
split level 155: [/input, 3265] 
split level 156: [/input, 1425] 
split level 157: [/input-8, 1947] 
split level 158: [/input, 2678] 
split level 159: [/input, 3270] 
split level 160: [/input, 4040] 
split level 161: [/input, 1399] 
split level 162: [/input-8, 1617] 
split level 163: [/input, 3268] 
split level 164: [/input, 2126] 
split level 165: [/input, 1014] 
split level 166: [/input, 1490] 
split level 167: [/input, 972] 
split level 168: [/input, 1137] 
split level 169: [/input-8, 973] 
split level 170: [/input, 815] 
split level 171: [/input-8, 1594] 
split level 172: [/input, 1501] 
split level 173: [/input, 2255] 
split level 174: [/input-8, 990] 
split level 175: [/input, 1154] 
split level 176: [/input-8, 511] 
split level 177: [/input, 2481] 
split level 178: [/input, 1008] 
split level 179: [/input, 4074] 
split level 180: [/input, 3172] 
split level 181: [/input-8, 1596] 
split level 182: [/input, 4065] 
split level 183: [/input, 2111] 
split level 184: [/input, 1770] 
split level 185: [/input, 3554] 
split level 186: [/input, 3281] 
split level 187: [/input, 2556] 
split level 188: [/input, 3305] 
split level 189: [/input-8, 1432] 
split level 190: [/input, 3520] 
split level 191: [/input, 1837] 
split level 192: [/input, 145] 
split level 193: [/input, 1500] 
split level 194: [/input-8, 1584] 
split level 195: [/input, 3974] 
split level 196: [/input, 3494] 
split level 197: [/input, 1051] 
split level 198: [/input, 2204] 
split level 199: [/input, 1788] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4400656223297119
10 lb beta sum: 0.0, worst -0.44007253646850586
Time: prepare 0.0116    bound 0.0989    transfer 0.0024    finalize 0.0028    func 0.1184    
Accumulated time: func 0.1732    prepare 0.0218    bound 0.1532    transfer 0.0025    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.35096812) min lb tensor(-0.44006562)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.011897802352905273 
BICCOS Cumulative time: 0.011897802352905273
Preprocessing time: 0.011341571807861328 Inference time: 0.00019669532775878906 Add cuts time: 8.511543273925781e-05 Cut analysis time: 0.00027441978454589844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.42516 (1), -0.42422 (1), -0.42385 (1), -0.42277 (1), -0.42272 (1), -0.42075 (1), -0.42059 (1), -0.42047 (1), -0.42041 (1), -0.42036 (1), -0.41967 (1), -0.41944 (1), -0.41852 (1), -0.41801 (1), -0.41658 (1), -0.41579 (1), -0.41558 (1), -0.41538 (1), -0.41486 (1), -0.41405 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5204    set_bounds 0.0095    solve 0.1185    add 0.1973    
Accumulated time: pickout 0.0004    decision 0.5204    set_bounds 0.0095    solve 0.1185    add 0.1973    
Current (lb-rhs): -0.425156831741333
50 domains visited
Cumulative time: 0.9354889392852783

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 6] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] 
split level 1: [/input-12, 15] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 15] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
split level 2: [/input-12, 35] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 35] [/input-12, 35] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] 
split level 3: [/input-12, 82] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 82] [/input-12, 82] [/input-12, 35] [/input-12, 82] [/input-12, 82] [/input-12, 35] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.37531614303588867
10 lb beta sum: 0.6084477305412292, worst -0.3628388047218323
Time: prepare 0.0074    bound 0.1192    transfer 0.0023    finalize 0.0024    func 0.1339    
Accumulated time: func 0.3071    prepare 0.0294    bound 0.2723    transfer 0.0048    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.36320543) min lb tensor(-0.36278042)
Number of Verified Splits: 75 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 11
#cuts >= 20: 0
BICCOS time: 0.017119646072387695 
BICCOS Cumulative time: 0.02901744842529297
Preprocessing time: 0.011877059936523438 Inference time: 0.0028607845306396484 Add cuts time: 0.001974344253540039 Cut analysis time: 0.0004074573516845703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14134 (2), -0.14121 (2), -0.14116 (2), -0.14067 (2), -0.14013 (2), -0.14009 (2), -0.13622 (2), -0.13579 (2), -0.13513 (2), -0.13382 (2), -0.12988 (2), -0.12913 (2), -0.12675 (2), -0.12670 (2), -0.12170 (2), -0.12055 (2), -0.11939 (2), -0.11934 (2), -0.11860 (2), -0.11744 (2), 
Length of domains: 50
Time: pickout 0.0118    decision 0.0217    set_bounds 0.0129    solve 0.1340    add 0.2083    
Accumulated time: pickout 0.0121    decision 0.5421    set_bounds 0.0225    solve 0.2526    add 0.4056    
Current (lb-rhs): -0.14133507013320923
100 domains visited
Cumulative time: 1.3483476638793945

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 28] [/input-12, 28] [/input-12, 6] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] 
split level 1: [/input-12, 6] [/input-12, 6] [/input-12, 15] [/input-12, 15] [/input-12, 6] [/input-12, 15] [/input-12, 15] [/input-12, 29] [/input-12, 6] [/input-12, 6] 
split level 2: [/input-12, 15] [/input-12, 15] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 15] [/input-12, 35] [/input-12, 29] 
split level 3: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1334848403930664
10 lb beta sum: 1.1945639848709106, worst -0.04287850856781006
Time: prepare 0.0066    bound 0.1183    transfer 0.0007    finalize 0.0025    func 0.1309    
Accumulated time: func 0.4380    prepare 0.0363    bound 0.3907    transfer 0.0056    finalize 0.0079    
all_split False
======================Cut inference begins======================
max lb tensor(0.56132066) min lb tensor(-0.00363183)
Number of Verified Splits: 399 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.03791189193725586 
BICCOS Cumulative time: 0.06692934036254883
Preprocessing time: 0.011463403701782227 Inference time: 0.017973661422729492 Add cuts time: 0.008084774017333984 Cut analysis time: 0.00039005279541015625
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0077    decision 0.0191    set_bounds 0.0154    solve 0.1310    add 0.0193    
Accumulated time: pickout 0.0198    decision 0.5612    set_bounds 0.0379    solve 0.3835    add 0.4248    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 28] 
split level 2: [/input-12, 6] 
split level 3: [/input-12, 15] 
split level 4: [/input-12, 58] 
split level 5: [/input-12, 29] 
split level 6: [/input-12, 35] 
split level 7: [/input-12, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014830291271209717

all verified at 1th iter
Time: prepare 0.0036    bound 0.0118    transfer 0.0005    finalize 0.0014    func 0.0191    
Accumulated time: func 0.4571    prepare 0.0404    bound 0.4025    transfer 0.0061    finalize 0.0093    
all_split False
======================Cut inference begins======================
max lb tensor(0.97088766) min lb tensor(0.00228256)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.007975101470947266 
BICCOS Cumulative time: 0.0749044418334961
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0007    decision 0.0225    set_bounds 0.0174    solve 0.0191    add 0.0003    
Accumulated time: pickout 0.0205    decision 0.5837    set_bounds 0.0553    solve 0.4027    add 0.4251    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
Cumulative time: 1.6545405387878418


Properties batch 1, size 1
Remaining timeout: 196.60520005226135
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 196.60510444641113
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 196.60508060455322
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 196.60506057739258
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 196.60504007339478
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 196.60490250587463
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 196.6048789024353
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 196.6048595905304
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.3952 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 96, vnnlib ID: 96 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.44995165, -10.24393463,  -3.02499723,  -5.52738094,  -3.64600706,
          -4.67218781,  -4.64619398,  -5.73077822, -10.13163280,  -9.56945515]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [457]; unstable size 457; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 224, 1, 457] with unstable size 223 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 457] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 457] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [223]; unstable size 223; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 223] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 223] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.06982219,  3.56651092, -3.10427308, -0.30050814, -2.24185658,
         -1.43835652, -0.57025743,  3.45370245,  3.13693810]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.44995165, -10.24393463,  -3.02499723,  -5.52738094,  -3.64600706,
          -4.67218781,  -4.64619398,  -5.73077822, -10.13163280,  -9.56945515]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -5.44995213, -10.24393463,  -3.02499771,  -5.52738142,  -3.64600754,
           -4.67218828,  -4.64619493,  -5.73077869, -10.13163280,  -9.56945324],
         [ -5.44995213, -10.24393463,  -3.02499771,  -5.52738142,  -3.64600754,
           -4.67218828,  -4.64619493,  -5.73077869, -10.13163280,  -9.56945324]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.80375719, -1.62119722,  0.88118649, -1.00018740,  0.02599335,
           1.08458376]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0877 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 97, vnnlib ID: 97 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.42443323, -12.86629391,  -5.06406689,  -6.59175348,  -5.65273857,
          -7.37562561,  -6.97437239,  -7.97660685,  -9.45366764, -11.25179768]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [815]; unstable size 815; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 348, 1, 815] with unstable size 347 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 815] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 815] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [347]; unstable size 347; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 347] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 347] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.99483001,  5.88476849,  0.52514803, -0.25146756,  1.10865986,
          0.87214231,  1.88426137,  2.11473441,  4.06170177]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.42443323, -12.86629391,  -5.06406689,  -6.59175348,  -5.65273857,
          -7.37562561,  -6.97437239,  -7.97660685,  -9.45366764, -11.25179768]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.88it/s]100%|██████████| 1/1 [00:00<00:00,  8.87it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.91634750, -12.22560024,  -4.62670612,  -5.97058296,  -4.77927256,
           -6.74498940,  -6.27670527,  -7.29330587,  -8.81531429, -10.70232105]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.15256643]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1155 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 18.199153900146484
alpha/beta optimization time: 1.2241830825805664
initial alpha-crown bounds: tensor([[ 1.10888231,  6.06384706,  0.59163475, -0.20346993,  1.20185626,
          0.91255498,  1.97026205,  2.29743600,  4.25614977]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.20346993207931519
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.587482213974
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.5874445438385
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.58742117881775
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.5873987674713
Verifying property 3 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.20346993]], device='cuda:0') need to verify.
Model prediction is: tensor([ -7.42443323, -12.86629391,  -5.06406689,  -6.59175348,  -5.65273857,
         -7.37562561,  -6.97437239,  -7.97660685,  -9.45366764, -11.25179768],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.20346993]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 815
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 334
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 1167
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010728836059570312
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20346954464912415
10 lb beta sum: 0.0, worst -0.20347529649734497
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0537    transfer 0.0001    finalize 0.0001    func 0.0542    
Accumulated time: func 0.0542    prepare 0.0002    bound 0.0537    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 32] 
split level 3: [/input-12, 33] 
split level 4: [/input-8, 289] 
split level 5: [/input-8, 457] 
split level 6: [/input-12, 60] 
split level 7: [/input-8, 290] 
split level 8: [/input-8, 843] 
split level 9: [/input-8, 1412] 
split level 10: [/input-8, 1003] 
split level 11: [/input, 2628] 
split level 12: [/input, 2629] 
split level 13: [/input-8, 116] 
split level 14: [/input-8, 421] 
split level 15: [/input-8, 866] 
split level 16: [/input-8, 1420] 
split level 17: [/input-8, 1749] 
split level 18: [/input-8, 1748] 
split level 19: [/input-8, 618] 
split level 20: [/input-8, 1756] 
split level 21: [/input, 476] 
split level 22: [/input-8, 1322] 
split level 23: [/input, 2630] 
split level 24: [/input-8, 2008] 
split level 25: [/input-8, 617] 
split level 26: [/input-8, 1490] 
split level 27: [/input-8, 310] 
split level 28: [/input-8, 619] 
split level 29: [/input-8, 1859] 
split level 30: [/input-8, 858] 
split level 31: [/input-8, 1443] 
split level 32: [/input, 2105] 
split level 33: [/input-8, 429] 
split level 34: [/input-8, 1747] 
split level 35: [/input, 3947] 
split level 36: [/input, 460] 
split level 37: [/input, 329] 
split level 38: [/input-8, 117] 
split level 39: [/input-8, 1004] 
split level 40: [/input, 475] 
split level 41: [/input-8, 1459] 
split level 42: [/input, 620] 
split level 43: [/input-8, 1966] 
split level 44: [/input, 330] 
split level 45: [/input-8, 489] 
split level 46: [/input-8, 2036] 
split level 47: [/input-8, 995] 
split level 48: [/input-8, 1482] 
split level 49: [/input-8, 932] 
split level 50: [/input, 2965] 
split level 51: [/input-8, 477] 
split level 52: [/input, 2326] 
split level 53: [/input-8, 456] 
split level 54: [/input-8, 473] 
split level 55: [/input-8, 928] 
split level 56: [/input, 3148] 
split level 57: [/input-8, 874] 
split level 58: [/input-8, 1331] 
split level 59: [/input, 2122] 
split level 60: [/input-8, 1460] 
split level 61: [/input, 3494] 
split level 62: [/input-8, 978] 
split level 63: [/input-8, 291] 
split level 64: [/input, 2642] 
split level 65: [/input, 3692] 
split level 66: [/input, 1097] 
split level 67: [/input, 236] 
split level 68: [/input, 458] 
split level 69: [/input-8, 1757] 
split level 70: [/input-8, 963] 
split level 71: [/input, 1302] 
split level 72: [/input-8, 1011] 
split level 73: [/input, 2137] 
split level 74: [/input-8, 481] 
split level 75: [/input-8, 414] 
split level 76: [/input, 1557] 
split level 77: [/input-8, 929] 
split level 78: [/input-8, 413] 
split level 79: [/input, 2981] 
split level 80: [/input, 1590] 
split level 81: [/input, 2359] 
split level 82: [/input, 426] 
split level 83: [/input, 3163] 
split level 84: [/input, 102] 
split level 85: [/input, 1370] 
split level 86: [/input, 3130] 
split level 87: [/input-8, 1427] 
split level 88: [/input-8, 264] 
split level 89: [/input, 3178] 
split level 90: [/input, 361] 
split level 91: [/input, 313] 
split level 92: [/input, 3515] 
split level 93: [/input, 2949] 
split level 94: [/input-8, 994] 
split level 95: [/input, 2155] 
split level 96: [/input-8, 2037] 
split level 97: [/input, 408] 
split level 98: [/input, 2087] 
split level 99: [/input-8, 1491] 
split level 100: [/input, 2236] 
split level 101: [/input-8, 1570] 
split level 102: [/input-8, 2033] 
split level 103: [/input-8, 940] 
split level 104: [/input, 132] 
split level 105: [/input, 252] 
split level 106: [/input, 2232] 
split level 107: [/input, 3195] 
split level 108: [/input, 1556] 
split level 109: [/input-8, 1323] 
split level 110: [/input-8, 2000] 
split level 111: [/input, 1368] 
split level 112: [/input, 3946] 
split level 113: [/input, 3096] 
split level 114: [/input-8, 474] 
split level 115: [/input-8, 948] 
split level 116: [/input-8, 620] 
split level 117: [/input-8, 2001] 
split level 118: [/input, 2392] 
split level 119: [/input-8, 586] 
split level 120: [/input, 2235] 
split level 121: [/input-8, 1483] 
split level 122: [/input, 3400] 
split level 123: [/input-8, 1489] 
split level 124: [/input-8, 859] 
split level 125: [/input, 2343] 
split level 126: [/input, 2342] 
split level 127: [/input-8, 1950] 
split level 128: [/input, 3180] 
split level 129: [/input, 3912] 
split level 130: [/input-8, 1765] 
split level 131: [/input-8, 1568] 
split level 132: [/input, 2357] 
split level 133: [/input, 134] 
split level 134: [/input-8, 1554] 
split level 135: [/input, 3177] 
split level 136: [/input, 2325] 
split level 137: [/input, 2071] 
split level 138: [/input-8, 1576] 
split level 139: [/input, 3131] 
split level 140: [/input-8, 1426] 
split level 141: [/input, 2154] 
split level 142: [/input, 3690] 
split level 143: [/input-8, 1986] 
split level 144: [/input, 3923] 
split level 145: [/input-8, 397] 
split level 146: [/input, 2361] 
split level 147: [/input, 1317] 
split level 148: [/input-8, 979] 
split level 149: [/input, 2268] 
split level 150: [/input, 2950] 
split level 151: [/input-8, 1006] 
split level 152: [/input, 2373] 
split level 153: [/input, 3655] 
split level 154: [/input-8, 126] 
split level 155: [/input, 2425] 
split level 156: [/input, 1446] 
split level 157: [/input, 3192] 
split level 158: [/input, 2067] 
split level 159: [/input-8, 450] 
split level 160: [/input-8, 1553] 
split level 161: [/input, 3658] 
split level 162: [/input-8, 1552] 
split level 163: [/input, 2262] 
split level 164: [/input, 2072] 
split level 165: [/input, 4009] 
split level 166: [/input, 2422] 
split level 167: [/input, 3095] 
split level 168: [/input, 2360] 
split level 169: [/input, 3113] 
split level 170: [/input, 3724] 
split level 171: [/input, 3708] 
split level 172: [/input, 2948] 
split level 173: [/input, 2982] 
split level 174: [/input-8, 495] 
split level 175: [/input, 2421] 
split level 176: [/input, 3189] 
split level 177: [/input, 3492] 
split level 178: [/input, 2243] 
split level 179: [/input-8, 867] 
split level 180: [/input, 2227] 
split level 181: [/input, 114] 
split level 182: [/input, 3660] 
split level 183: [/input, 2563] 
split level 184: [/input, 220] 
split level 185: [/input, 1338] 
split level 186: [/input, 2967] 
split level 187: [/input, 1572] 
split level 188: [/input, 116] 
split level 189: [/input, 2054] 
split level 190: [/input, 2375] 
split level 191: [/input, 360] 
split level 192: [/input, 3212] 
split level 193: [/input, 3350] 
split level 194: [/input-8, 1001] 
split level 195: [/input, 117] 
split level 196: [/input, 3642] 
split level 197: [/input, 1484] 
split level 198: [/input, 2884] 
split level 199: [/input, 2997] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2034694254398346
10 lb beta sum: 0.0, worst -0.20347514748573303
Time: prepare 0.0114    bound 0.0984    transfer 0.0015    finalize 0.0031    func 0.1170    
Accumulated time: func 0.1712    prepare 0.0216    bound 0.1521    transfer 0.0016    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.04398435) min lb tensor(-0.20346928)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010436296463012695 
BICCOS Cumulative time: 0.010436296463012695
Preprocessing time: 0.01000213623046875 Inference time: 0.00012540817260742188 Add cuts time: 7.772445678710938e-05 Cut analysis time: 0.00023102760314941406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19579 (1), -0.19577 (1), -0.19563 (1), -0.19537 (1), -0.19524 (1), -0.19520 (1), -0.19499 (1), -0.19495 (1), -0.19479 (1), -0.19442 (1), -0.19434 (1), -0.19433 (1), -0.19426 (1), -0.19424 (1), -0.19423 (1), -0.19393 (1), -0.19365 (1), -0.19335 (1), -0.19321 (1), -0.19306 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5126    set_bounds 0.0091    solve 0.1171    add 0.2055    
Accumulated time: pickout 0.0004    decision 0.5126    set_bounds 0.0091    solve 0.1171    add 0.2055    
Current (lb-rhs): -0.19579452276229858
50 domains visited
Cumulative time: 0.9318492412567139

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 46] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 1: [/input-12, 46] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
split level 3: [/input-8, 429] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-8, 290] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19013464450836182
10 lb beta sum: 0.40796828269958496, worst -0.16285014152526855
Time: prepare 0.0077    bound 0.1180    transfer 0.0007    finalize 0.0024    func 0.1316    
Accumulated time: func 0.3028    prepare 0.0296    bound 0.2702    transfer 0.0023    finalize 0.0056    
all_split False
======================Cut inference begins======================
max lb tensor(0.22742030) min lb tensor(-0.16281150)
Number of Verified Splits: 99 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.017368555068969727 
BICCOS Cumulative time: 0.027804851531982422
Preprocessing time: 0.011729717254638672 Inference time: 0.0034720897674560547 Add cuts time: 0.0019087791442871094 Cut analysis time: 0.0002579689025878906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04542 (2), -0.04449 (2), -0.04439 (2), -0.04424 (2), -0.04379 (2), -0.04361 (2), -0.04301 (2), -0.04264 (2), -0.04241 (2), -0.04182 (2), -0.04168 (2), -0.04151 (2), -0.04139 (2), -0.04121 (2), -0.04113 (2), -0.04091 (2), -0.04069 (2), -0.04058 (2), -0.04027 (2), -0.03996 (2), 
Length of domains: 50
Time: pickout 0.0151    decision 0.0194    set_bounds 0.0114    solve 0.1316    add 0.2166    
Accumulated time: pickout 0.0155    decision 0.5320    set_bounds 0.0205    solve 0.2487    add 0.4221    
Current (lb-rhs): -0.045422062277793884
100 domains visited
Cumulative time: 1.3504562377929688

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 1: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
split level 2: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-8, 289] [/input-12, 33] [/input-8, 289] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 3: [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input, 2072] [/input-8, 290] [/input-8, 290] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07779121398925781
10 lb beta sum: 0.5109068751335144, worst -0.047894835472106934
Time: prepare 0.0082    bound 0.1189    transfer 0.0011    finalize 0.0025    func 0.1338    
Accumulated time: func 0.4366    prepare 0.0380    bound 0.3890    transfer 0.0034    finalize 0.0081    
all_split False
======================Cut inference begins======================
max lb tensor(0.17879474) min lb tensor(-0.04343270)
Number of Verified Splits: 108 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 6
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.01843738555908203 
BICCOS Cumulative time: 0.04624223709106445
Preprocessing time: 0.01160430908203125 Inference time: 0.003995180130004883 Add cuts time: 0.0024225711822509766 Cut analysis time: 0.0004153251647949219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01233 (3), -0.01228 (3), -0.01217 (3), -0.01176 (3), -0.01173 (3), -0.01172 (3), -0.01160 (3), -0.01152 (3), -0.01137 (3), -0.01133 (3), -0.01128 (3), -0.01122 (3), -0.01106 (3), -0.01089 (3), -0.01088 (3), -0.01078 (3), -0.01067 (3), -0.01060 (3), -0.01049 (3), -0.01025 (3), 
Length of domains: 50
Time: pickout 0.0152    decision 0.0198    set_bounds 0.0157    solve 0.1339    add 0.2225    
Accumulated time: pickout 0.0307    decision 0.5517    set_bounds 0.0361    solve 0.3826    add 0.6446    
Current (lb-rhs): -0.0123310387134552
150 domains visited
Cumulative time: 1.7831692695617676

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 1: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
split level 2: [/input-8, 290] [/input-8, 289] [/input-8, 289] [/input-8, 290] [/input-8, 289] [/input-12, 33] [/input-8, 289] [/input-8, 289] [/input-8, 289] [/input-8, 289] 
split level 3: [/input, 2072] [/input-8, 290] [/input-8, 290] [/input, 2630] [/input-8, 290] [/input, 2071] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05123382806777954
10 lb beta sum: 0.5603712201118469, worst -0.10459041595458984
Time: prepare 0.0084    bound 0.1338    transfer 0.0012    finalize 0.0025    func 0.1485    
Accumulated time: func 0.5851    prepare 0.0467    bound 0.5229    transfer 0.0046    finalize 0.0106    
all_split False
======================Cut inference begins======================
max lb tensor(0.20295873) min lb tensor(-0.00795150)
Number of Verified Splits: 316 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 45.
#cuts 1-3: 11
#cuts 4-6: 34
#cuts >= 20: 0
BICCOS time: 0.03572797775268555 
BICCOS Cumulative time: 0.08197021484375
Preprocessing time: 0.011660337448120117 Inference time: 0.01316976547241211 Add cuts time: 0.009578466415405273 Cut analysis time: 0.0013194084167480469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00795 (4), -0.00793 (4), -0.00736 (4), -0.00732 (4), -0.00727 (4), -0.00722 (4), -0.00478 (4), -0.00461 (4), -0.00450 (4), -0.00258 (4), -0.00124 (4), -0.00124 (4), 
Length of domains: 12
Time: pickout 0.0150    decision 0.0192    set_bounds 0.0157    solve 0.1486    add 0.3619    
Accumulated time: pickout 0.0457    decision 0.5710    set_bounds 0.0518    solve 0.5312    add 1.0065    
Current (lb-rhs): -0.007951498031616211
162 domains visited
Cumulative time: 2.3867883682250977

Shallow-BaB round 5
batch: 12
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 32] [/input-12, 41] [/input-12, 32] 
split level 1: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] 
split level 2: [/input-8, 457] [/input-8, 289] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 289] [/input-8, 289] [/input-8, 289] [/input-8, 289] 
split level 3: [/input-8, 289] [/input-8, 457] [/input-8, 289] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 843] 
split level 4: [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 290] 
split level 5: [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] 
split level 6: [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] 
split level 7: [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] 
split level 8: [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 117] 
split level 9: [/input-8, 117] [/input-8, 117] [/input-8, 1490] [/input-8, 117] [/input-8, 117] [/input-8, 1490] [/input-8, 117] [/input-8, 117] [/input-8, 117] [/input-8, 1748] 
split level 10: [/input-8, 1331] [/input-8, 1490] [/input-8, 117] [/input-8, 1331] [/input-8, 1490] [/input-8, 117] [/input-8, 1331] [/input-8, 1331] [/input-8, 1490] [/input-8, 1490] 
split level 11: [/input-8, 995] [/input-8, 1331] [/input-8, 1331] [/input-8, 995] [/input-8, 1331] [/input-8, 1331] [/input-8, 995] [/input-8, 995] [/input-8, 1331] [/input-8, 1331] 
split level 12: [/input-8, 874] [/input-8, 1859] [/input-8, 874] [/input-8, 874] [/input-8, 1859] [/input-8, 874] [/input-8, 874] [/input-8, 874] [/input-8, 1859] [/input-8, 1859] 
split level 13: [/input, 2087] [/input-8, 995] [/input-8, 995] [/input, 2087] [/input-8, 995] [/input-8, 995] [/input, 2087] [/input-8, 1323] [/input-8, 995] [/input-8, 874] 
split level 14: [/input-8, 1323] [/input-8, 874] [/input-8, 1323] [/input-8, 1323] [/input-8, 874] [/input-8, 1323] [/input-8, 1323] [/input, 2087] [/input-8, 874] [/input-8, 995] 
split level 15: [/input, 3400] [/input-8, 1323] [/input, 3961] [/input, 3400] [/input-8, 1323] [/input, 3961] [/input, 3400] [/input, 3400] [/input-8, 1323] [/input-8, 1323] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.048787057399749756
10 lb beta sum: 0.5863906145095825, worst -0.12579549849033356
Time: prepare 0.0081    bound 0.1524    transfer 0.0012    finalize 0.0036    func 0.1680    
Accumulated time: func 0.7531    prepare 0.0557    bound 0.6753    transfer 0.0058    finalize 0.0142    
all_split False
======================Cut inference begins======================
max lb tensor(0.19631258) min lb tensor(0.00010234)
Number of Verified Splits: 384 of 384
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 57.
#cuts 1-3: 11
#cuts 4-6: 46
#cuts >= 20: 0
BICCOS time: 0.04566478729248047 
BICCOS Cumulative time: 0.12763500213623047
Preprocessing time: 0.011229515075683594 Inference time: 0.017850875854492188 Add cuts time: 0.014822006225585938 Cut analysis time: 0.00176239013671875
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0516    set_bounds 0.0151    solve 0.1681    add 0.0334    
Accumulated time: pickout 0.0468    decision 0.6225    set_bounds 0.0669    solve 0.6994    add 1.0399    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
162 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 32] 
split level 3: [/input-12, 33] 
split level 4: [/input-8, 289] 
split level 5: [/input-8, 290] 
split level 6: [/input-8, 1748] 
split level 7: [/input-8, 429] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09858936071395874
10 lb beta sum: 0.15389248728752136, worst -0.10823914408683777
Time: prepare 0.0051    bound 0.1461    transfer 0.0005    finalize 0.0016    func 0.1551    
Accumulated time: func 0.9082    prepare 0.0613    bound 0.8213    transfer 0.0064    finalize 0.0159    
all_split False
======================Cut inference begins======================
max lb tensor(0.21193475) min lb tensor(-0.09659979)
Number of Verified Splits: 216 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1753259003162384
10 lb beta sum: 0.40726813673973083, worst -0.17568480968475342
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 12
#cuts 4-6: 15
#cuts >= 20: 0
BICCOS time: 0.2804107666015625 
BICCOS Cumulative time: 0.40804576873779297
Preprocessing time: 0.0071103572845458984 Inference time: 0.2643120288848877 Add cuts time: 0.00805807113647461 Cut analysis time: 0.0009303092956542969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09660 (8), -0.09560 (8), -0.09321 (8), -0.09270 (8), -0.09222 (8), -0.09162 (8), -0.09131 (8), -0.09064 (8), -0.09039 (8), -0.08907 (8), -0.08824 (8), -0.08777 (8), -0.08726 (8), -0.08631 (8), -0.08545 (8), -0.08411 (8), -0.07978 (8), -0.07951 (8), -0.07879 (8), -0.07854 (8), 
Length of domains: 40
Time: pickout 0.0005    decision 0.0221    set_bounds 0.0209    solve 0.1552    add 0.0616    
Accumulated time: pickout 0.0472    decision 0.6446    set_bounds 0.0878    solve 0.8545    add 1.1015    
Current (lb-rhs): -0.09659978747367859
202 domains visited
Cumulative time: 3.2575485706329346

BaB round 2
batch: 40
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] 
split level 1: [/input-8, 421] [/input-8, 421] [/input-8, 1749] [/input-8, 421] [/input-8, 421] [/input-8, 421] [/input-8, 421] [/input-8, 1749] [/input-8, 421] [/input-8, 421] 
split level 2: [/input-8, 1859] [/input-8, 1859] [/input-8, 1331] [/input-8, 1859] [/input-8, 1859] [/input-8, 1859] [/input-8, 1859] [/input-8, 1331] [/input-8, 1859] [/input-8, 1859] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09075617790222168
10 lb beta sum: 0.17828726768493652, worst -0.12894049286842346
Time: prepare 0.0062    bound 0.1308    transfer 0.0011    finalize 0.0016    func 0.1417    
Accumulated time: func 1.0499    prepare 0.0677    bound 0.9521    transfer 0.0075    finalize 0.0174    
all_split False
======================Cut inference begins======================
max lb tensor(0.01999122) min lb tensor(-0.08915183)
Number of Verified Splits: 60 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0911959558725357
10 lb beta sum: 0.5361431241035461, worst -0.13922619819641113
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 12
#cuts 4-6: 15
#cuts 7-9: 10
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.18514513969421387 
BICCOS Cumulative time: 0.5931909084320068
Preprocessing time: 0.00923919677734375 Inference time: 0.17168354988098145 Add cuts time: 0.002721548080444336 Cut analysis time: 0.001500844955444336
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08915 (11), -0.08856 (11), -0.08724 (11), -0.08665 (11), -0.08571 (11), -0.08513 (11), -0.08498 (11), -0.08462 (11), -0.08418 (11), -0.08399 (11), -0.08377 (11), -0.08363 (11), -0.08319 (11), -0.08309 (11), -0.08290 (11), -0.08257 (11), -0.08236 (11), -0.08235 (11), -0.08228 (11), -0.08210 (11), 
Length of domains: 260
Time: pickout 0.0066    decision 0.0161    set_bounds 0.0168    solve 0.1418    add 0.0764    
Accumulated time: pickout 0.0538    decision 0.6607    set_bounds 0.1046    solve 0.9963    add 1.1779    
Current (lb-rhs): -0.08915182948112488
462 domains visited
Cumulative time: 3.7078349590301514

BaB round 3
batch: 260
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 843] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08826583623886108
10 lb beta sum: 0.1974072903394699, worst -0.16855445504188538
Time: prepare 0.0103    bound 0.1428    transfer 0.0023    finalize 0.0026    func 0.1614    
Accumulated time: func 1.2114    prepare 0.0782    bound 1.0949    transfer 0.0098    finalize 0.0200    
all_split False
======================Cut inference begins======================
max lb tensor(0.02075827) min lb tensor(-0.08677916)
Number of Verified Splits: 4 of 520
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.016392946243286133 
BICCOS Cumulative time: 0.609583854675293
Preprocessing time: 0.014962196350097656 Inference time: 0.0004477500915527344 Add cuts time: 0.0007185935974121094 Cut analysis time: 0.0002644062042236328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08678 (12), -0.08631 (12), -0.08488 (12), -0.08440 (12), -0.08336 (12), -0.08289 (12), -0.08271 (12), -0.08257 (12), -0.08193 (12), -0.08172 (12), -0.08146 (12), -0.08139 (12), -0.08091 (12), -0.08090 (12), -0.08068 (12), -0.08058 (12), -0.08052 (12), -0.08036 (12), -0.08003 (12), -0.07983 (12), 
Length of domains: 516
Time: pickout 0.0077    decision 0.0248    set_bounds 0.0224    solve 0.1616    add 0.0859    
Accumulated time: pickout 0.0615    decision 0.6855    set_bounds 0.1270    solve 1.1579    add 1.2639    
Current (lb-rhs): -0.0867791622877121
978 domains visited
Cumulative time: 4.034317970275879

BaB round 4
batch: 516
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1749] [/input-8, 843] [/input-8, 1749] [/input-8, 843] [/input-8, 1749] [/input-8, 843] [/input-8, 1749] [/input-8, 843] [/input-8, 1749] [/input-8, 1003] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08614039421081543
10 lb beta sum: 0.1980724185705185, worst -0.0847524106502533
Time: prepare 0.0202    bound 0.1274    transfer 0.0023    finalize 0.0049    func 0.1615    
Accumulated time: func 1.3729    prepare 0.0986    bound 1.2223    transfer 0.0121    finalize 0.0249    
all_split False
======================Cut inference begins======================
max lb tensor(0.05740544) min lb tensor(-0.08470632)
Number of Verified Splits: 8 of 1032
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.03201031684875488 
BICCOS Cumulative time: 0.6415941715240479
Preprocessing time: 0.03076648712158203 Inference time: 0.0008146762847900391 Add cuts time: 0.0001704692840576172 Cut analysis time: 0.0002586841583251953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08471 (13), -0.08428 (13), -0.08280 (13), -0.08239 (13), -0.08083 (13), -0.08061 (13), -0.08059 (13), -0.08042 (13), -0.07985 (13), -0.07977 (13), -0.07942 (13), -0.07886 (13), -0.07877 (13), -0.07872 (13), -0.07843 (13), -0.07837 (13), -0.07828 (13), -0.07820 (13), -0.07794 (13), -0.07786 (13), 
Length of domains: 1024
Time: pickout 0.0196    decision 0.0408    set_bounds 0.0434    solve 0.1618    add 0.1174    
Accumulated time: pickout 0.0811    decision 0.7263    set_bounds 0.1704    solve 1.3197    add 1.3813    
Current (lb-rhs): -0.08470632135868073
2002 domains visited
Cumulative time: 4.456543207168579

BaB round 5
batch: 1024
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1490] [/input-8, 1749] [/input-8, 1490] [/input-8, 1749] [/input-8, 1490] [/input-8, 1749] [/input-8, 1490] [/input-8, 1749] [/input-8, 1490] [/input-8, 1749] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2360585629940033, worst -0.08288194239139557
10 lb beta sum: 0.2360585629940033, worst -0.08278454840183258
Time: prepare 0.0876    bound 0.1442    transfer 0.0053    finalize 0.0089    func 0.2595    
Accumulated time: func 1.6324    prepare 0.1865    bound 1.3665    transfer 0.0174    finalize 0.0338    
all_split False
======================Cut inference begins======================
max lb tensor(0.00497706) min lb tensor(-0.08275993)
Number of Verified Splits: 33 of 2048
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.06682705879211426 
BICCOS Cumulative time: 0.7084212303161621
Preprocessing time: 0.061386823654174805 Inference time: 0.004079341888427734 Add cuts time: 0.0008759498596191406 Cut analysis time: 0.0004849433898925781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08276 (14), -0.08235 (14), -0.08085 (14), -0.08044 (14), -0.07883 (14), -0.07869 (14), -0.07845 (14), -0.07843 (14), -0.07830 (14), -0.07803 (14), -0.07784 (14), -0.07783 (14), -0.07742 (14), -0.07690 (14), -0.07678 (14), -0.07656 (14), -0.07650 (14), -0.07644 (14), -0.07617 (14), -0.07608 (14), 
Length of domains: 2015
Time: pickout 0.0766    decision 0.0665    set_bounds 0.0860    solve 0.2600    add 0.0956    
Accumulated time: pickout 0.1577    decision 0.7927    set_bounds 0.2563    solve 1.5798    add 1.4769    
Current (lb-rhs): -0.08275993168354034
4017 domains visited
Cumulative time: 5.117311477661133

BaB round 6
batch: 2015
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 620] [/input, 620] [/input, 620] [/input, 620] [/input, 620] [/input, 620] [/input, 620] [/input, 620] [/input, 620] [/input, 620] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08376553654670715
10 lb beta sum: 0.1958426684141159, worst -0.08243399858474731
Time: prepare 0.0957    bound 0.2866    transfer 0.0152    finalize 0.0207    func 0.4454    
Accumulated time: func 2.0778    prepare 0.2825    bound 1.6531    transfer 0.0326    finalize 0.0545    
all_split False
======================Cut inference begins======================
max lb tensor(0.00527653) min lb tensor(-0.08241846)
Number of Verified Splits: 88 of 4030
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts 7-9: 10
#cuts 10-12: 6
#cuts >= 20: 0
BICCOS time: 0.14345192909240723 
BICCOS Cumulative time: 0.8518731594085693
Preprocessing time: 0.12508845329284668 Inference time: 0.014038562774658203 Add cuts time: 0.002802133560180664 Cut analysis time: 0.0015227794647216797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08242 (15), -0.08201 (15), -0.08050 (15), -0.08008 (15), -0.07849 (15), -0.07809 (15), -0.07807 (15), -0.07765 (15), -0.07747 (15), -0.07705 (15), -0.07653 (15), -0.07616 (15), -0.07611 (15), -0.07608 (15), -0.07579 (15), -0.07575 (15), -0.07555 (15), -0.07514 (15), -0.07496 (15), -0.07433 (15), 
Length of domains: 3942
Time: pickout 0.0422    decision 0.2921    set_bounds 0.1591    solve 0.4462    add 0.1429    
Accumulated time: pickout 0.1999    decision 1.0848    set_bounds 0.4154    solve 2.0259    add 1.6198    
Current (lb-rhs): -0.08241845667362213
7959 domains visited
Cumulative time: 6.354175806045532

BaB round 7
batch: 3942
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 995] [/input, 330] [/input-8, 995] [/input, 330] [/input-8, 473] [/input, 330] [/input-8, 473] [/input, 330] [/input-8, 995] [/input, 330] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08151817321777344
10 lb beta sum: 0.1949346661567688, worst -0.08019429445266724
Time: prepare 0.1843    bound 0.6708    transfer 0.0230    finalize 0.0431    func 1.1449    
Accumulated time: func 3.2227    prepare 0.4671    bound 2.3239    transfer 0.0556    finalize 0.0976    
all_split False
======================Cut inference begins======================
max lb tensor(0.01245174) min lb tensor(-0.08018483)
Number of Verified Splits: 531 of 7884
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 58.
#cuts 1-3: 4
#cuts 4-6: 10
#cuts 7-9: 35
#cuts 10-12: 9
#cuts >= 20: 0
BICCOS time: 0.3534543514251709 
BICCOS Cumulative time: 1.2053275108337402
Preprocessing time: 0.24692821502685547 Inference time: 0.08669471740722656 Add cuts time: 0.016146183013916016 Cut analysis time: 0.0036852359771728516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08018 (16), -0.07977 (16), -0.07836 (16), -0.07826 (16), -0.07795 (16), -0.07785 (16), -0.07646 (16), -0.07627 (16), -0.07604 (16), -0.07587 (16), -0.07513 (16), -0.07474 (16), -0.07463 (16), -0.07444 (16), -0.07433 (16), -0.07430 (16), -0.07422 (16), -0.07419 (16), -0.07406 (16), -0.07404 (16), 
Length of domains: 7353
Time: pickout 0.0698    decision 0.4062    set_bounds 0.3372    solve 1.1466    add 0.1662    
Accumulated time: pickout 0.2697    decision 1.4910    set_bounds 0.7527    solve 3.1725    add 1.7860    
Current (lb-rhs): -0.08018483221530914
15312 domains visited
Cumulative time: 8.852354526519775

BaB round 8
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 843] [/input-8, 477] [/input-8, 843] [/input-8, 477] [/input-8, 843] [/input-8, 477] [/input-8, 843] [/input-8, 477] [/input-8, 843] [/input-8, 477] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08006066083908081
10 lb beta sum: 0.19490832090377808, worst -0.07873433828353882
Time: prepare 0.2078    bound 0.7041    transfer 0.0287    finalize 0.0487    func 1.0437    
Accumulated time: func 4.2664    prepare 0.6752    bound 3.0280    transfer 0.0842    finalize 0.1463    
all_split False
======================Cut inference begins======================
max lb tensor(0.01018268) min lb tensor(-0.07872547)
Number of Verified Splits: 405 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 93.
#cuts 1-3: 4
#cuts 4-6: 11
#cuts 7-9: 54
#cuts 10-12: 24
#cuts >= 20: 0
BICCOS time: 0.36014294624328613 
BICCOS Cumulative time: 1.5654704570770264
Preprocessing time: 0.26134228706359863 Inference time: 0.07116961479187012 Add cuts time: 0.021446943283081055 Cut analysis time: 0.006184101104736328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07873 (17), -0.07831 (17), -0.07686 (17), -0.07672 (17), -0.07644 (17), -0.07630 (17), -0.07513 (16), -0.07488 (17), -0.07480 (17), -0.07474 (16), -0.07445 (17), -0.07439 (17), -0.07407 (17), -0.07322 (17), -0.07322 (16), -0.07317 (17), -0.07293 (17), -0.07283 (16), -0.07280 (17), -0.07275 (17), 
Length of domains: 11044
Time: pickout 0.0716    decision 0.2272    set_bounds 0.5313    solve 1.0460    add 0.2057    
Accumulated time: pickout 0.3413    decision 1.7182    set_bounds 1.2840    solve 4.2186    add 1.9917    
Current (lb-rhs): -0.07872547209262848
23099 domains visited
current_vram/total_varm: 13.6GB/99.9GB, batch_size increase to 8192
Cumulative time: 11.316152095794678

BaB round 9
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 620] [/input, 330] [/input, 620] [/input-8, 477] [/input, 620] [/input-8, 116] [/input, 620] [/input-8, 617] [/input, 620] [/input-8, 477] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07757976651191711
10 lb beta sum: 0.18562188744544983, worst -0.07625210285186768
Time: prepare 0.4209    bound 1.3605    transfer 0.0427    finalize 0.1056    func 2.0397    
Accumulated time: func 6.3061    prepare 1.0965    bound 4.3885    transfer 0.1270    finalize 0.2519    
all_split False
======================Cut inference begins======================
max lb tensor(0.23409176) min lb tensor(-0.07624799)
Number of Verified Splits: 1895 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 159.
#cuts 1-3: 4
#cuts 4-6: 18
#cuts 7-9: 114
#cuts 10-12: 23
#cuts >= 20: 0
BICCOS time: 1.2657604217529297 
BICCOS Cumulative time: 2.831230878829956
Preprocessing time: 0.5244991779327393 Inference time: 0.6514792442321777 Add cuts time: 0.07883715629577637 Cut analysis time: 0.010944843292236328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07625 (18), -0.07583 (18), -0.07448 (18), -0.07436 (18), -0.07424 (18), -0.07407 (18), -0.07395 (18), -0.07382 (18), -0.07359 (17), -0.07320 (17), -0.07260 (18), -0.07248 (18), -0.07237 (18), -0.07224 (18), -0.07218 (18), -0.07206 (18), -0.07195 (18), -0.07183 (18), -0.07163 (17), -0.07160 (18), 
Length of domains: 17341
Time: pickout 0.1220    decision 0.6807    set_bounds 0.9134    solve 2.0430    add 0.2540    
Accumulated time: pickout 0.4632    decision 2.3988    set_bounds 2.1973    solve 6.2616    add 2.2456    
Current (lb-rhs): -0.07624799013137817
37588 domains visited
current_vram/total_varm: 20.3GB/99.9GB, batch_size increase to 16384
Cumulative time: 16.67179226875305

BaB round 10
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 473] [/input-8, 473] [/input, 330] [/input-8, 473] [/input, 330] [/input-8, 473] [/input, 330] [/input-8, 473] [/input-8, 473] [/input-12, 60] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07579448819160461
10 lb beta sum: 0.1691594123840332, worst -0.0744398832321167
Time: prepare 0.9159    bound 2.8144    transfer 0.2597    finalize 0.2252    func 4.4325    
Accumulated time: func 10.7386    prepare 2.0128    bound 7.2030    transfer 0.3866    finalize 0.4771    
all_split False
======================Cut inference begins======================
max lb tensor(0.23628919) min lb tensor(-0.07442956)
Number of Verified Splits: 4718 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 260.
#cuts 1-3: 4
#cuts 4-6: 27
#cuts 7-9: 189
#cuts 10-12: 40
#cuts >= 20: 0
BICCOS time: 2.1230030059814453 
BICCOS Cumulative time: 4.954233884811401
Preprocessing time: 1.1066851615905762 Inference time: 0.7926347255706787 Add cuts time: 0.20814013481140137 Cut analysis time: 0.015542984008789062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07443 (19), -0.07436 (18), -0.07401 (19), -0.07395 (18), -0.07264 (19), -0.07242 (19), -0.07237 (18), -0.07222 (19), -0.07200 (19), -0.07195 (18), -0.07111 (18), -0.07073 (19), -0.07073 (18), -0.07066 (19), -0.07043 (19), -0.07036 (18), -0.07034 (19), -0.07024 (19), -0.07001 (19), -0.06994 (18), 
Length of domains: 29007
Time: pickout 0.3121    decision 1.7533    set_bounds 2.4769    solve 4.8431    add 0.2806    
Accumulated time: pickout 0.7753    decision 4.1521    set_bounds 4.6742    solve 11.1047    add 2.5262    
Current (lb-rhs): -0.07442955672740936
65638 domains visited
Cumulative time: 28.5763041973114

BaB round 11
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 617] [/input-8, 617] [/input-8, 617] [/input-8, 477] [/input-8, 617] [/input-8, 116] [/input-8, 617] [/input-8, 116] [/input-8, 617] [/input-8, 116] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07400932908058167
10 lb beta sum: 0.13665300607681274, worst -0.07400810718536377
Time: prepare 0.9991    bound 3.0156    transfer 0.2398    finalize 0.2763    func 4.7511    
Accumulated time: func 15.4897    prepare 3.0124    bound 10.2185    transfer 0.6264    finalize 0.7534    
all_split False
======================Cut inference begins======================
max lb tensor(0.24088678) min lb tensor(-0.07400352)
Number of Verified Splits: 5695 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 353.
#cuts 1-3: 4
#cuts 4-6: 51
#cuts 7-9: 234
#cuts 10-12: 64
#cuts >= 20: 0
BICCOS time: 2.455615997314453 
BICCOS Cumulative time: 7.4098498821258545
Preprocessing time: 1.1249902248382568 Inference time: 0.9705259799957275 Add cuts time: 0.338726282119751 Cut analysis time: 0.021373510360717773
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07400 (20), -0.07253 (19), -0.07221 (20), -0.07210 (19), -0.07200 (20), -0.07151 (20), -0.07111 (18), -0.07073 (18), -0.07057 (20), -0.07052 (19), -0.07029 (20), -0.07019 (20), -0.07010 (19), -0.07001 (20), -0.06971 (20), -0.06950 (20), -0.06913 (18), -0.06896 (20), -0.06891 (20), -0.06879 (20), 
Length of domains: 39696
Time: pickout 0.2953    decision 2.1182    set_bounds 2.1253    solve 5.3221    add 0.3368    
Accumulated time: pickout 1.0706    decision 6.2704    set_bounds 6.7995    solve 16.4267    add 2.8630    
Current (lb-rhs): -0.07400351762771606
92711 domains visited
Cumulative time: 41.39765286445618

BaB round 12
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 475] [/input, 458] [/input, 475] [/input-8, 995] [/input, 475] [/input-8, 995] [/input, 475] [/input-8, 995] [/input, 475] [/input, 458] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07210075855255127
10 lb beta sum: 0.1473919004201889, worst -0.07213708758354187
Time: prepare 0.9480    bound 3.1825    transfer 0.2259    finalize 0.2408    func 4.8181    
Accumulated time: func 20.3079    prepare 3.9608    bound 13.4010    transfer 0.8523    finalize 0.9942    
all_split False
======================Cut inference begins======================
max lb tensor(0.23799878) min lb tensor(-0.07208833)
Number of Verified Splits: 6548 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 435.
#cuts 1-3: 4
#cuts 4-6: 49
#cuts 7-9: 300
#cuts 10-12: 82
#cuts >= 20: 0
BICCOS time: 3.3461809158325195 
BICCOS Cumulative time: 10.756030797958374
Preprocessing time: 1.1161928176879883 Inference time: 1.7124428749084473 Add cuts time: 0.4898567199707031 Cut analysis time: 0.02768850326538086
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07400 (20), -0.07221 (20), -0.07209 (20), -0.07200 (20), -0.07151 (20), -0.07057 (20), -0.07029 (20), -0.07019 (20), -0.07008 (20), -0.07001 (20), -0.06971 (20), -0.06960 (20), -0.06950 (20), -0.06929 (19), -0.06896 (20), -0.06891 (20), -0.06889 (19), -0.06879 (20), -0.06866 (20), -0.06857 (20), 
Length of domains: 49532
Time: pickout 0.3040    decision 2.0448    set_bounds 2.2519    solve 4.8251    add 0.2169    
Accumulated time: pickout 1.3746    decision 8.3152    set_bounds 9.0514    solve 21.2518    add 3.0799    
Current (lb-rhs): -0.07400351762771606
118931 domains visited
Cumulative time: 54.507453203201294

BaB round 13
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 116] [/input-8, 473] [/input-8, 995] [/input-8, 473] [/input-8, 116] [/input-8, 473] [/input, 475] [/input-8, 473] [/input, 475] [/input-12, 60] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07315748929977417
10 lb beta sum: 0.09861177206039429, worst -0.07315433025360107
Time: prepare 0.9881    bound 3.3655    transfer 0.2260    finalize 0.2353    func 5.0369    
Accumulated time: func 25.3448    prepare 4.9493    bound 16.7665    transfer 1.0783    finalize 1.2295    
all_split False
======================Cut inference begins======================
max lb tensor(0.24551749) min lb tensor(-0.07314786)
Number of Verified Splits: 6939 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 518.
#cuts 1-3: 4
#cuts 4-6: 59
#cuts 7-9: 342
#cuts 10-12: 113
#cuts >= 20: 0
BICCOS time: 3.6159543991088867 
BICCOS Cumulative time: 14.37198519706726
Preprocessing time: 1.1162841320037842 Inference time: 1.882972240447998 Add cuts time: 0.5846796035766602 Cut analysis time: 0.032018423080444336
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07315 (21), -0.07209 (20), -0.07151 (20), -0.07134 (21), -0.07114 (21), -0.07055 (21), -0.07008 (20), -0.07000 (21), -0.06971 (20), -0.06960 (20), -0.06950 (20), -0.06943 (21), -0.06932 (21), -0.06929 (19), -0.06916 (21), -0.06889 (19), -0.06874 (21), -0.06866 (20), -0.06854 (21), -0.06821 (21), 
Length of domains: 58977
Time: pickout 0.2906    decision 1.6658    set_bounds 2.2605    solve 5.0447    add 0.2973    
Accumulated time: pickout 1.6652    decision 9.9809    set_bounds 11.3119    solve 26.2965    add 3.3772    
Current (lb-rhs): -0.07314786314964294
144760 domains visited
Cumulative time: 67.86524868011475

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 458] [/input-12, 60] [/input, 458] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-8, 473] [/input-12, 60] [/input, 458] [/input-12, 60] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07150906324386597
10 lb beta sum: 0.1025049015879631, worst -0.07149770855903625
Time: prepare 0.9776    bound 3.5492    transfer 0.2130    finalize 0.2320    func 5.1938    
Accumulated time: func 30.5386    prepare 5.9273    bound 20.3157    transfer 1.2913    finalize 1.4615    
all_split False
======================Cut inference begins======================
max lb tensor(0.24896997) min lb tensor(-0.07148877)
Number of Verified Splits: 7576 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 518.
#cuts 1-3: 4
#cuts 4-6: 59
#cuts 7-9: 342
#cuts 10-12: 113
#cuts >= 20: 0
BICCOS time: 0.001134634017944336 
BICCOS Cumulative time: 14.373119831085205
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07315 (21), -0.07209 (20), -0.07149 (21), -0.07134 (21), -0.07114 (21), -0.07055 (21), -0.07008 (20), -0.07000 (21), -0.06969 (21), -0.06960 (20), -0.06948 (21), -0.06943 (21), -0.06932 (21), -0.06916 (21), -0.06889 (20), -0.06874 (21), -0.06866 (20), -0.06854 (21), -0.06821 (21), -0.06811 (21), 
Length of domains: 67785
Time: pickout 0.3007    decision 1.6632    set_bounds 2.4342    solve 5.2022    add 0.4506    
Accumulated time: pickout 1.9659    decision 11.6442    set_bounds 13.7460    solve 31.4987    add 3.8278    
Current (lb-rhs): -0.07314786314964294
169952 domains visited
Cumulative time: 78.09281182289124

BaB round 15
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 475] [/input-12, 60] [/input, 475] [/input-12, 60] [/input, 475] [/input, 458] [/input, 475] [/input, 458] [/input-12, 60] [/input-12, 60] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0712420642375946
10 lb beta sum: 0.10469381511211395, worst -0.07129961252212524
Time: prepare 1.0483    bound 3.5584    transfer 0.3510    finalize 0.2724    func 5.4567    
Accumulated time: func 35.9953    prepare 6.9760    bound 23.8741    transfer 1.6423    finalize 1.7339    
all_split False
======================Cut inference begins======================
max lb tensor(0.25357395) min lb tensor(-0.07123023)
Number of Verified Splits: 8252 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 518.
#cuts 1-3: 4
#cuts 4-6: 59
#cuts 7-9: 342
#cuts 10-12: 113
#cuts >= 20: 0
BICCOS time: 0.0019719600677490234 
BICCOS Cumulative time: 14.375091791152954
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07315 (21), -0.07149 (21), -0.07134 (21), -0.07123 (21), -0.07114 (21), -0.07055 (21), -0.07000 (21), -0.06969 (21), -0.06958 (21), -0.06948 (21), -0.06943 (21), -0.06932 (21), -0.06923 (21), -0.06916 (21), -0.06889 (20), -0.06874 (21), -0.06865 (21), -0.06854 (21), -0.06821 (21), -0.06811 (21), 
Length of domains: 75917
Time: pickout 0.3136    decision 1.6789    set_bounds 2.5369    solve 5.4701    add 0.2466    
Accumulated time: pickout 2.2794    decision 13.3231    set_bounds 16.2829    solve 36.9689    add 4.0744    
Current (lb-rhs): -0.07314786314964294
194468 domains visited
Cumulative time: 88.56080055236816

BaB round 16
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-8, 995] [/input-12, 60] [/input, 458] [/input-12, 60] [/input, 458] [/input-12, 60] [/input-12, 60] [/input-8, 995] [/input-12, 60] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06970295310020447
10 lb beta sum: 0.05035000666975975, worst -0.06972074508666992
Time: prepare 1.2202    bound 3.5524    transfer 0.2438    finalize 0.2629    func 6.5925    
Accumulated time: func 42.5877    prepare 8.1968    bound 27.4264    transfer 1.8861    finalize 1.9967    
all_split False
======================Cut inference begins======================
max lb tensor(0.23963448) min lb tensor(-0.06968543)
Number of Verified Splits: 6330 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 518.
#cuts 1-3: 4
#cuts 4-6: 59
#cuts 7-9: 342
#cuts 10-12: 113
#cuts >= 20: 0
BICCOS time: 0.0011887550354003906 
BICCOS Cumulative time: 14.376280546188354
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07315 (21), -0.07149 (21), -0.07134 (21), -0.07123 (21), -0.07114 (21), -0.06969 (21), -0.06969 (22), -0.06958 (21), -0.06948 (21), -0.06943 (21), -0.06932 (21), -0.06923 (21), -0.06916 (21), -0.06889 (20), -0.06865 (21), -0.06811 (21), -0.06811 (21), -0.06810 (22), -0.06787 (22), -0.06778 (21), 
Length of domains: 85971
Time: pickout 0.3999    decision 3.1870    set_bounds 1.9687    solve 6.6007    add 0.1566    
Accumulated time: pickout 2.6794    decision 16.5101    set_bounds 18.2516    solve 43.5696    add 4.2310    
Current (lb-rhs): -0.07314786314964294
220906 domains visited
Cumulative time: 101.02573990821838

BaB round 17
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input, 458] [/input-8, 874] [/input-12, 60] [/input-8, 874] [/input-8, 995] [/input-8, 995] [/input-8, 995] [/input-12, 60] [/input-8, 617] 
cut re-enabled after branching node selection
0 lb beta sum: 0.031337276101112366, worst -0.07132455706596375
10 lb beta sum: 0.06873016059398651, worst -0.07126778364181519
Time: prepare 1.3408    bound 3.5653    transfer 0.2678    finalize 1.3870    func 6.7814    
Accumulated time: func 49.3691    prepare 9.5381    bound 30.9917    transfer 2.1538    finalize 3.3838    
all_split False
======================Cut inference begins======================
max lb tensor(0.25420338) min lb tensor(-0.07125747)
Number of Verified Splits: 6690 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 518.
#cuts 1-3: 4
#cuts 4-6: 59
#cuts 7-9: 342
#cuts 10-12: 113
#cuts >= 20: 0
BICCOS time: 0.0012230873107910156 
BICCOS Cumulative time: 14.377503633499146
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07126 (22), -0.07123 (21), -0.07064 (22), -0.06969 (22), -0.06958 (21), -0.06941 (22), -0.06926 (22), -0.06923 (21), -0.06889 (20), -0.06879 (22), -0.06865 (21), -0.06863 (22), -0.06811 (21), -0.06810 (22), -0.06787 (22), -0.06769 (22), -0.06756 (21), -0.06752 (22), -0.06749 (22), -0.06742 (22), 
Length of domains: 95665
Time: pickout 0.3207    decision 1.6752    set_bounds 1.6627    solve 6.7904    add 0.2557    
Accumulated time: pickout 3.0001    decision 18.1853    set_bounds 19.9143    solve 50.3600    add 4.4867    
Current (lb-rhs): -0.07125747203826904
246984 domains visited
Cumulative time: 111.90186429023743

BaB round 18
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 995] [/input-8, 995] [/input-8, 995] [/input-8, 473] [/input-12, 60] [/input-8, 473] [/input-12, 60] [/input-8, 473] [/input-12, 60] [/input-8, 473] 
cut re-enabled after branching node selection
0 lb beta sum: 0.11698154360055923, worst -0.06803947687149048
10 lb beta sum: 0.11701555550098419, worst -0.06805840134620667
Time: prepare 1.8010    bound 3.5554    transfer 0.2904    finalize 1.3755    func 7.2450    
Accumulated time: func 56.6142    prepare 11.3396    bound 34.5471    transfer 2.4442    finalize 4.7592    
all_split False
======================Cut inference begins======================
max lb tensor(0.24371769) min lb tensor(-0.06803018)
Number of Verified Splits: 7241 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 518.
#cuts 1-3: 4
#cuts 4-6: 59
#cuts 7-9: 342
#cuts 10-12: 113
#cuts >= 20: 0
BICCOS time: 0.0011970996856689453 
BICCOS Cumulative time: 14.378700733184814
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07126 (22), -0.07123 (21), -0.07064 (22), -0.06969 (22), -0.06958 (21), -0.06941 (22), -0.06926 (22), -0.06923 (21), -0.06879 (22), -0.06865 (21), -0.06863 (22), -0.06811 (21), -0.06810 (22), -0.06803 (21), -0.06787 (22), -0.06769 (22), -0.06756 (21), -0.06752 (22), -0.06749 (22), -0.06742 (22), 
Length of domains: 104808
Time: pickout 0.3372    decision 1.6812    set_bounds 1.6341    solve 7.2533    add 0.1341    
Accumulated time: pickout 3.3373    decision 19.8664    set_bounds 21.5483    solve 57.6133    add 4.6208    
Current (lb-rhs): -0.07125747203826904
272511 domains visited
Cumulative time: 123.06516861915588

BaB round 19
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 995] [/input-8, 116] [/input-12, 60] [/input-8, 116] [/input-8, 995] [/input-8, 116] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
cut re-enabled after branching node selection
0 lb beta sum: 0.09789469093084335, worst -0.06873530149459839
10 lb beta sum: 0.09794388711452484, worst -0.06876489520072937
Time: prepare 1.7947    bound 3.5502    transfer 0.3013    finalize 1.4655    func 7.3318    
Accumulated time: func 63.9460    prepare 13.1347    bound 38.0973    transfer 2.7455    finalize 6.2247    
all_split False
======================Cut inference begins======================
max lb tensor(0.24698220) min lb tensor(-0.06872535)
Number of Verified Splits: 6530 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 518.
#cuts 1-3: 4
#cuts 4-6: 59
#cuts 7-9: 342
#cuts 10-12: 113
#cuts >= 20: 0
BICCOS time: 0.001146078109741211 
BICCOS Cumulative time: 14.379846811294556
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07126 (22), -0.07123 (21), -0.07064 (22), -0.06969 (22), -0.06941 (22), -0.06926 (22), -0.06923 (21), -0.06879 (22), -0.06873 (22), -0.06863 (22), -0.06810 (22), -0.06803 (21), -0.06787 (22), -0.06779 (22), -0.06769 (22), -0.06752 (22), -0.06749 (22), -0.06742 (22), -0.06727 (22), -0.06724 (21), 
Length of domains: 114662
Time: pickout 0.3091    decision 1.6644    set_bounds 1.6077    solve 7.3397    add 0.2649    
Accumulated time: pickout 3.6464    decision 21.5308    set_bounds 23.1560    solve 64.9531    add 4.8857    
Current (lb-rhs): -0.07125747203826904
298749 domains visited
Cumulative time: 134.41497778892517

BaB round 20
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 116] [/input-8, 995] [/input, 460] [/input-8, 473] [/input, 460] [/input-8, 473] [/input-8, 473] [/input-8, 473] [/input-8, 473] [/input-8, 116] 
cut re-enabled after branching node selection
0 lb beta sum: 0.09363165497779846, worst -0.06939870119094849
10 lb beta sum: 0.09365729987621307, worst -0.06939911842346191
Time: prepare 1.7795    bound 3.5663    transfer 0.3006    finalize 0.2995    func 7.4436    
Accumulated time: func 71.3896    prepare 14.9147    bound 41.6636    transfer 3.0461    finalize 6.5242    
all_split False
======================Cut inference begins======================
max lb tensor(0.24220325) min lb tensor(-0.06934610)
Number of Verified Splits: 6237 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 518.
#cuts 1-3: 4
#cuts 4-6: 59
#cuts 7-9: 342
#cuts 10-12: 113
#cuts >= 20: 0
BICCOS time: 0.001172780990600586 
BICCOS Cumulative time: 14.381019592285156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07126 (22), -0.07064 (22), -0.06969 (22), -0.06941 (22), -0.06935 (22), -0.06926 (22), -0.06879 (22), -0.06873 (22), -0.06863 (22), -0.06810 (22), -0.06803 (21), -0.06787 (22), -0.06779 (22), -0.06769 (22), -0.06752 (22), -0.06749 (22), -0.06742 (22), -0.06733 (22), -0.06727 (22), -0.06690 (22), 
Length of domains: 124809
Time: pickout 0.3312    decision 1.6724    set_bounds 1.6276    solve 7.4520    add 0.1445    
Accumulated time: pickout 3.9777    decision 23.2032    set_bounds 24.7836    solve 72.4051    add 5.0302    
Current (lb-rhs): -0.07125747203826904
325280 domains visited
Cumulative time: 145.77481150627136

BaB round 21
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 458] [/input, 460] [/input-8, 874] [/input, 460] [/input-12, 60] [/input-8, 116] [/input-8, 874] [/input-8, 995] [/input-8, 874] [/input-8, 477] 
cut re-enabled after branching node selection
0 lb beta sum: 0.04058554023504257, worst -0.06772351264953613
10 lb beta sum: 0.040634483098983765, worst -0.06772097945213318
Time: prepare 1.7992    bound 3.5557    transfer 0.3094    finalize 0.3012    func 6.1918    
Accumulated time: func 77.5814    prepare 16.7144    bound 45.2193    transfer 3.3555    finalize 6.8254    
all_split False
======================Cut inference begins======================
max lb tensor(0.24555838) min lb tensor(-0.06771362)
Number of Verified Splits: 4515 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 518.
#cuts 1-3: 4
#cuts 4-6: 59
#cuts 7-9: 342
#cuts 10-12: 113
#cuts >= 20: 0
BICCOS time: 0.0018112659454345703 
BICCOS Cumulative time: 14.38283085823059
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07126 (22), -0.07064 (22), -0.06941 (22), -0.06935 (22), -0.06926 (22), -0.06879 (22), -0.06873 (22), -0.06863 (22), -0.06803 (21), -0.06779 (22), -0.06771 (23), -0.06752 (22), -0.06749 (22), -0.06742 (22), -0.06733 (22), -0.06727 (22), -0.06690 (22), -0.06680 (22), -0.06671 (22), -0.06668 (22), 
Length of domains: 136678
Time: pickout 0.3216    decision 1.6731    set_bounds 1.6355    solve 6.2030    add 0.2560    
Accumulated time: pickout 4.2993    decision 24.8762    set_bounds 26.4191    solve 78.6080    add 5.2862    
Current (lb-rhs): -0.07125747203826904
353533 domains visited
Cumulative time: 156.0380265712738

BaB round 22
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 460] [/input-8, 473] [/input, 458] [/input-8, 473] [/input, 460] [/input-8, 116] [/input-8, 116] [/input, 460] [/input, 460] [/input, 458] 
cut re-enabled after branching node selection
0 lb beta sum: 0.055524032562971115, worst -0.06838777661323547
10 lb beta sum: 0.055552709847688675, worst -0.06836828589439392
Time: prepare 1.8157    bound 3.5521    transfer 0.3227    finalize 0.3114    func 6.2205    
Accumulated time: func 83.8019    prepare 18.5306    bound 48.7714    transfer 3.6782    finalize 7.1369    
all_split False
======================Cut inference begins======================
max lb tensor(0.24586825) min lb tensor(-0.06835324)
Number of Verified Splits: 4648 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 518.
#cuts 1-3: 4
#cuts 4-6: 59
#cuts 7-9: 342
#cuts 10-12: 113
#cuts >= 20: 0
BICCOS time: 0.0017518997192382812 
BICCOS Cumulative time: 14.384582757949829
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07064 (22), -0.06935 (22), -0.06879 (22), -0.06873 (22), -0.06863 (22), -0.06835 (23), -0.06803 (21), -0.06779 (22), -0.06771 (23), -0.06749 (22), -0.06733 (22), -0.06733 (23), -0.06690 (22), -0.06671 (22), -0.06665 (22), -0.06650 (23), -0.06635 (23), -0.06620 (22), -0.06609 (21), -0.06605 (21), 
Length of domains: 148414
Time: pickout 0.3373    decision 2.9796    set_bounds 1.6347    solve 6.2310    add 0.2679    
Accumulated time: pickout 4.6366    decision 27.8559    set_bounds 28.0538    solve 84.8390    add 5.5540    
Current (lb-rhs): -0.07064014673233032
381653 domains visited
Cumulative time: 167.6706485748291

BaB round 23
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 116] [/input-12, 60] [/input, 475] [/input-8, 995] [/input-8, 116] [/input-8, 995] [/input-8, 116] [/input-8, 473] [/input-12, 60] [/input-8, 617] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0730409249663353, worst -0.06867676973342896
10 lb beta sum: 0.07306213676929474, worst -0.06867644190788269
Time: prepare 1.7724    bound 3.5542    transfer 0.4143    finalize 0.2601    func 6.2264    
Accumulated time: func 90.0283    prepare 20.3034    bound 52.3256    transfer 4.0925    finalize 7.3970    
all_split False
======================Cut inference begins======================
max lb tensor(0.24939951) min lb tensor(-0.06866544)
Number of Verified Splits: 4851 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 518.
#cuts 1-3: 4
#cuts 4-6: 59
#cuts 7-9: 342
#cuts 10-12: 113
#cuts >= 20: 0
BICCOS time: 0.0016658306121826172 
BICCOS Cumulative time: 14.386248588562012
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06935 (22), -0.06873 (22), -0.06867 (23), -0.06835 (23), -0.06803 (21), -0.06779 (22), -0.06771 (23), -0.06733 (22), -0.06733 (23), -0.06681 (23), -0.06674 (23), -0.06671 (22), -0.06665 (23), -0.06650 (23), -0.06635 (23), -0.06620 (22), -0.06605 (21), -0.06591 (23), -0.06579 (23), -0.06577 (22), 
Length of domains: 159947
Time: pickout 0.3309    decision 2.8235    set_bounds 1.6576    solve 6.2378    add 0.2803    
Accumulated time: pickout 4.9674    decision 30.6794    set_bounds 29.7114    solve 91.0768    add 5.8344    
Current (lb-rhs): -0.0693461000919342
409570 domains visited
Cumulative time: 179.19125032424927

BaB round 24
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 458] [/input-8, 116] [/input-12, 60] [/input-8, 116] [/input-8, 995] [/input, 620] [/input-12, 60] [/input, 620] [/input-12, 60] [/input, 475] 
cut re-enabled after branching node selection
0 lb beta sum: 0.10228820145130157, worst -0.06620243191719055
10 lb beta sum: 0.10230645537376404, worst -0.06615445017814636
Time: prepare 1.7912    bound 3.5540    transfer 0.4177    finalize 0.2713    func 6.2531    
Accumulated time: func 96.2814    prepare 22.0952    bound 55.8796    transfer 4.5102    finalize 7.6682    
all_split False
======================Cut inference begins======================
max lb tensor(0.24170250) min lb tensor(-0.06614009)
Number of Verified Splits: 4313 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 518.
#cuts 1-3: 4
#cuts 4-6: 59
#cuts 7-9: 342
#cuts 10-12: 113
#cuts >= 20: 0
BICCOS time: 0.0017316341400146484 
BICCOS Cumulative time: 14.387980222702026
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06935 (22), -0.06873 (22), -0.06867 (23), -0.06835 (23), -0.06779 (22), -0.06771 (23), -0.06733 (22), -0.06733 (23), -0.06681 (23), -0.06674 (23), -0.06671 (22), -0.06665 (23), -0.06650 (23), -0.06635 (23), -0.06620 (22), -0.06614 (22), -0.06591 (23), -0.06579 (23), -0.06577 (22), -0.06571 (23), 
Length of domains: 172018
Time: pickout 0.3439    decision 1.6679    set_bounds 3.1959    solve 6.2637    add 0.2668    
Accumulated time: pickout 5.3113    decision 32.3473    set_bounds 32.9074    solve 97.3405    add 6.1012    
Current (lb-rhs): -0.0693461000919342
438025 domains visited
Cumulative time: 191.1162588596344

BaB round 25
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 874] [/input-8, 874] [/input-8, 995] [/input-8, 995] [/input-12, 60] [/input, 460] [/input, 460] [/input, 460] [/input, 460] [/input-8, 116] 
cut re-enabled after branching node selection
0 lb beta sum: 0.08605305850505829, worst -0.06333306431770325
10 lb beta sum: 0.08607546985149384, worst -0.06336811184883118
Time: prepare 1.8173    bound 3.5517    transfer 0.4213    finalize 1.9209    func 7.9254    
Accumulated time: func 104.2068    prepare 23.9130    bound 59.4313    transfer 4.9315    finalize 9.5892    
all_split False
======================Cut inference begins======================
max lb tensor(0.25013685) min lb tensor(-0.06327403)
Number of Verified Splits: 4706 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 518.
#cuts 1-3: 4
#cuts 4-6: 59
#cuts 7-9: 342
#cuts 10-12: 113
#cuts >= 20: 0
BICCOS time: 0.0011603832244873047 
BICCOS Cumulative time: 14.389140605926514
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06935 (22), -0.06873 (22), -0.06867 (23), -0.06835 (23), -0.06779 (22), -0.06771 (23), -0.06733 (22), -0.06733 (23), -0.06681 (23), -0.06674 (23), -0.06671 (22), -0.06665 (23), -0.06650 (23), -0.06635 (23), -0.06614 (22), -0.06591 (23), -0.06579 (23), -0.06577 (22), -0.06571 (23), -0.06558 (22), 
Length of domains: 183696
Time: pickout 0.3268    decision 1.6635    set_bounds 1.6036    solve 7.9332    add 0.2654    
Accumulated time: pickout 5.6381    decision 34.0108    set_bounds 34.5109    solve 105.2738    add 6.3665    
Current (lb-rhs): -0.0693461000919342
466087 domains visited
Time out!!!!!!!!
Result: unknown in 206.4848 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 98, vnnlib ID: 98 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.97282171, -9.59043694, -6.44806576, -4.78952980, -4.97297287,
         -4.42642069, -6.68016386, -6.68106413, -7.70960140, -9.47742367]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [664]; unstable size 664; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 664] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 664] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 664] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 239] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.04075193,  2.86903501,  0.75436544,  0.06829157, -0.61994475,
          1.08730936,  0.85343820,  1.25660920,  3.10610676]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.97282171, -9.59043694, -6.44806576, -4.78952980, -4.97297287,
         -4.42642069, -6.68016386, -6.68106413, -7.70960140, -9.47742367]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.18765354, -9.77073288, -6.59089756, -5.29431868, -4.97382355,
          -4.98171186, -7.01910067, -6.92423296, -7.98603344, -9.82796764]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00788832]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0082 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0751 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 99, vnnlib ID: 99 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.23901796, -6.11622238, -0.89747995, -2.37960625, -1.48292530,
         -3.00284576, -1.44222963, -3.95331812, -5.41394901, -6.03653765]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [445]; unstable size 445; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 180, 1, 445] with unstable size 179 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 445] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 445] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [179]; unstable size 179; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 179] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 179] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.11019564,  3.76489162, -1.18024445,  0.25222456, -0.68485928,
          0.81499958,  1.69955850,  2.79094505,  3.59716249]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.23901796, -6.11622238, -0.89747995, -2.37960625, -1.48292530,
         -3.00284576, -1.44222963, -3.95331812, -5.41394901, -6.03653765]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.23901796, -6.11622334, -0.89747965, -2.37960601, -1.48292530,
          -3.00284576, -1.44222927, -3.95331812, -5.41394997, -6.03653717],
         [-4.23901796, -6.11622334, -0.89747965, -2.37960601, -1.48292530,
          -3.00284576, -1.44222927, -3.95331812, -5.41394997, -6.03653717]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.54474962,  0.04069602]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.05873025,  0.34444451,  0.05873025,  ..., -1.52857137,
            -1.48095226, -1.48095226],
           [ 0.04285724, -0.30634910, -0.44920623,  ..., -1.54444432,
            -1.56031740, -1.52857137],
           [-0.25873005, -0.63968253, -0.94126981,  ..., -1.54444432,
            -1.56031740, -1.54444432],
           ...,
           [-1.92539680, -1.92539680, -1.95714283,  ..., -1.73492062,
            -1.73492062, -1.75079370],
           [-1.90952384, -1.95714283, -1.96507931,  ..., -1.73492062,
            -1.75079370, -1.76666665],
           [-1.89365077, -1.90952384, -1.92539680,  ..., -1.76666665,
            -1.78253973, -1.78253973]],

          [[-0.16103047,  0.11272153, -0.20933965,  ..., -1.41706920,
            -1.36875999, -1.36875999],
           [-0.25764883, -0.56360704, -0.64412236,  ..., -1.43317223,
            -1.44927526, -1.41706920],
           [-0.51529789, -0.80515295, -1.03059578,  ..., -1.43317223,
            -1.44927526, -1.41706920],
           ...,
           [-1.88405800, -1.90016103, -1.91626418,  ..., -1.88405800,
            -1.90016103, -1.88405800],
           [-1.88405800, -1.93236721, -1.94847023,  ..., -1.90016103,
            -1.90016103, -1.90016103],
           [-1.91626418, -1.94847023, -1.95652175,  ..., -1.88405800,
            -1.91626418, -1.91626418]],

          [[-0.92803597, -0.65817088, -0.97301346,  ..., -1.68515754,
            -1.64767623, -1.64767623],
           [-1.00299859, -1.27286363, -1.34782624,  ..., -1.69265378,
            -1.68515754, -1.68515754],
           [-1.25787115, -1.48275876, -1.61769128,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.68515754, -1.68515754, -1.69265378,  ..., -1.64767623,
            -1.66266882, -1.67766130],
           [-1.68515754, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.67766130, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.66266882,
            -1.67766130, -1.68515754]]],


         [[[ 0.05873025,  0.34444451,  0.05873025,  ..., -1.52857137,
            -1.48095226, -1.48095226],
           [ 0.04285724, -0.30634910, -0.44920623,  ..., -1.54444432,
            -1.56031740, -1.52857137],
           [-0.25873005, -0.63968253, -0.94126981,  ..., -1.54444432,
            -1.56031740, -1.54444432],
           ...,
           [-1.92539680, -1.92539680, -1.95714283,  ..., -1.73492062,
            -1.73492062, -1.75079370],
           [-1.90952384, -1.95714283, -1.96507931,  ..., -1.73492062,
            -1.75079370, -1.76666665],
           [-1.89365077, -1.90952384, -1.92539680,  ..., -1.76666665,
            -1.78253973, -1.78253973]],

          [[-0.16103047,  0.11272153, -0.20933965,  ..., -1.41706920,
            -1.36875999, -1.36875999],
           [-0.25764883, -0.56360704, -0.64412236,  ..., -1.43317223,
            -1.44927526, -1.41706920],
           [-0.51529789, -0.80515295, -1.03059578,  ..., -1.43317223,
            -1.44927526, -1.41706920],
           ...,
           [-1.88405800, -1.90016103, -1.91626418,  ..., -1.88405800,
            -1.90016103, -1.88405800],
           [-1.88405800, -1.93236721, -1.94847023,  ..., -1.90016103,
            -1.90016103, -1.90016103],
           [-1.91626418, -1.94847023, -1.95652175,  ..., -1.88405800,
            -1.91626418, -1.91626418]],

          [[-0.92803597, -0.65817088, -0.97301346,  ..., -1.68515754,
            -1.64767623, -1.64767623],
           [-1.00299859, -1.27286363, -1.34782624,  ..., -1.69265378,
            -1.68515754, -1.68515754],
           [-1.25787115, -1.48275876, -1.61769128,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.68515754, -1.68515754, -1.69265378,  ..., -1.64767623,
            -1.66266882, -1.67766130],
           [-1.68515754, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.67766130, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.66266882,
            -1.67766130, -1.68515754]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0811 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 100, vnnlib ID: 100 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.53976345, -13.16501808,  -7.78616238,  -7.53348351,  -7.22956753,
          -7.13146210,  -9.51203918,  -8.66154480, -12.44145298, -11.93621635]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [583]; unstable size 583; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 279, 1, 583] with unstable size 278 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 583] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 583] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [278]; unstable size 278; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 278] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 278] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.95121849,  2.65529966, -1.12760592, -1.74681807, -0.90773958,
          0.75648606, -0.87717152,  2.33981419,  1.64043450]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.53976345, -13.16501808,  -7.78616238,  -7.53348351,  -7.22956753,
          -7.13146210,  -9.51203918,  -8.66154480, -12.44145298, -11.93621635]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.53976154, -13.16501617,  -7.78616142,  -7.53348160,  -7.22956657,
           -7.13146067,  -9.51203918,  -8.66154480, -12.44145107, -11.93621540],
         [-10.53976154, -13.16501617,  -7.78616142,  -7.53348160,  -7.22956657,
           -7.13146067,  -9.51203918,  -8.66154480, -12.44145107, -11.93621540]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.25267982, -0.30391502, -0.40202093,  1.12806320]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0842 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 101, vnnlib ID: 101 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.08083820, -14.74164295, -15.41894627, -16.35571480, -15.69711781,
         -17.93531990, -17.23896980, -18.14307785, -10.66590214, -14.52196217]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [682]; unstable size 682; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 682] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 682] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 682] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 177] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.62306970,  3.08737016,  3.49406004,  4.42359114,  3.72971272,
          5.79383564,  5.18702316,  5.91974592,  2.72902703]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.08083820, -14.74164295, -15.41894627, -16.35571480, -15.69711781,
         -17.93531990, -17.23896980, -18.14307785, -10.66590214, -14.52196217]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.86083126, -14.65515518, -15.32081318, -16.32747269, -15.65061283,
          -17.88081551, -17.16146469, -17.99161720, -10.98882198, -14.44098759]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12799072]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0059 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0702 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 102, vnnlib ID: 102 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.08662319, -10.92296124,  -4.84066486,  -5.63669729,  -5.64046621,
          -5.76534128,  -7.64309168,  -7.17506170,  -8.36095524,  -9.82923794]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [704]; unstable size 704; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 251, 1, 704] with unstable size 250 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 704] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 704] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [250]; unstable size 250; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 250] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 250] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.20884323,  3.62872171, -1.65299916, -0.98555756, -1.01563942,
          0.82072157,  0.33104610,  1.38739491,  2.34938693]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.08662319, -10.92296124,  -4.84066486,  -5.63669729,  -5.64046621,
          -5.76534128,  -7.64309168,  -7.17506170,  -8.36095524,  -9.82923794]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.08662319, -10.92296028,  -4.84066582,  -5.63669777,  -5.64046764,
           -5.76534081,  -7.64309168,  -7.17506170,  -8.36095524,  -9.82923794],
         [ -7.08662319, -10.92296028,  -4.84066582,  -5.63669777,  -5.64046764,
           -5.76534081,  -7.64309168,  -7.17506170,  -8.36095524,  -9.82923794]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.79980183, -0.00376987,  0.12487316]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0828 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 103, vnnlib ID: 103 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.82976532, -12.37597370,  -4.80148506,  -8.27321815,  -4.32335472,
          -8.39564705,  -7.14005709,  -8.87581921, -10.65055561, -11.85609341]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [682]; unstable size 682; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 682] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 682] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 682] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 256] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.48958659,  6.85282898, -0.38445073,  3.19247007,  3.10144305,
          1.89875448,  3.66963387,  5.16848564,  6.31332350]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.82976532, -12.37597370,  -4.80148506,  -8.27321815,  -4.32335472,
          -8.39564705,  -7.14005709,  -8.87581921, -10.65055561, -11.85609341]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.02it/s]100%|██████████| 1/1 [00:00<00:00,  9.01it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.09303856, -12.88755322,  -4.96290588,  -8.65058517,  -4.84228325,
           -8.76727962,  -7.62690067,  -9.28729725, -11.05305099, -12.33880711]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.12062263]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1135 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 32.900123596191406
alpha/beta optimization time: 1.2192811965942383
initial alpha-crown bounds: tensor([[ 2.57451010,  6.94005108, -0.32821131,  3.23324466,  3.14501953,
          1.95601809,  3.71171713,  5.26033640,  6.40743446]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.32821130752563477
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5957064628601
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.59566569328308
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.59564185142517
Verifying property 2 with 1 instances.
##### Instance 103 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.32821131]], device='cuda:0') need to verify.
Model prediction is: tensor([ -7.82976532, -12.37597370,  -4.80148506,  -8.27321815,  -4.32335472,
         -8.39564705,  -7.14005709,  -8.87581921, -10.65055561, -11.85609341],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.32821131]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 682
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 253
Node /15 input 0: size torch.Size([100]) unstable 14
-----------------
# of unstable neurons: 949
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010943412780761719
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.328208863735199
10 lb beta sum: 0.0, worst -0.3282143771648407
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0527    transfer 0.0001    finalize 0.0001    func 0.0531    
Accumulated time: func 0.0531    prepare 0.0002    bound 0.0527    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 1] 
split level 2: [/input-12, 37] 
split level 3: [/input-12, 72] 
split level 4: [/input-12, 26] 
split level 5: [/input-12, 44] 
split level 6: [/input-12, 51] 
split level 7: [/input-8, 1892] 
split level 8: [/input-8, 1365] 
split level 9: [/input-8, 542] 
split level 10: [/input-8, 533] 
split level 11: [/input-8, 1308] 
split level 12: [/input-8, 1363] 
split level 13: [/input-8, 523] 
split level 14: [/input-8, 1052] 
split level 15: [/input-8, 86] 
split level 16: [/input-8, 1886] 
split level 17: [/input-8, 1357] 
split level 18: [/input-8, 1891] 
split level 19: [/input-8, 1364] 
split level 20: [/input-8, 1356] 
split level 21: [/input-8, 1373] 
split level 22: [/input-8, 77] 
split level 23: [/input-8, 1370] 
split level 24: [/input-8, 1828] 
split level 25: [/input-8, 1067] 
split level 26: [/input-8, 1899] 
split level 27: [/input-8, 539] 
split level 28: [/input-8, 476] 
split level 29: [/input-8, 1812] 
split level 30: [/input-8, 1379] 
split level 31: [/input-8, 1900] 
split level 32: [/input-8, 76] 
split level 33: [/input-8, 1374] 
split level 34: [/input-8, 1068] 
split level 35: [/input-8, 1369] 
split level 36: [/input-8, 1366] 
split level 37: [/input-8, 1358] 
split level 38: [/input-8, 1044] 
split level 39: [/input-8, 1292] 
split level 40: [/input-8, 1894] 
split level 41: [/input-8, 1901] 
split level 42: [/input-8, 1378] 
split level 43: [/input-8, 1893] 
split level 44: [/input-8, 1346] 
split level 45: [/input-8, 1381] 
split level 46: [/input-8, 1876] 
split level 47: [/input-8, 916] 
split level 48: [/input-8, 1861] 
split level 49: [/input-8, 1310] 
split level 50: [/input-8, 517] 
split level 51: [/input-8, 1882] 
split level 52: [/input-8, 1289] 
split level 53: [/input-8, 1890] 
split level 54: [/input-8, 1349] 
split level 55: [/input-8, 1910] 
split level 56: [/input-8, 669] 
split level 57: [/input-8, 990] 
split level 58: [/input-8, 939] 
split level 59: [/input-8, 85] 
split level 60: [/input-8, 1902] 
split level 61: [/input-8, 1889] 
split level 62: [/input-8, 944] 
split level 63: [/input-8, 1382] 
split level 64: [/input-8, 1868] 
split level 65: [/input-8, 1019] 
split level 66: [/input-8, 1339] 
split level 67: [/input-8, 571] 
split level 68: [/input-8, 1350] 
split level 69: [/input-8, 1401] 
split level 70: [/input-8, 572] 
split level 71: [/input-8, 1090] 
split level 72: [/input-8, 92] 
split level 73: [/input-8, 1361] 
split level 74: [/input, 2492] 
split level 75: [/input-8, 931] 
split level 76: [/input-8, 936] 
split level 77: [/input-8, 518] 
split level 78: [/input-8, 932] 
split level 79: [/input-8, 951] 
split level 80: [/input-8, 1405] 
split level 81: [/input-8, 1353] 
split level 82: [/input-8, 969] 
split level 83: [/input, 2455] 
split level 84: [/input-8, 1080] 
split level 85: [/input-8, 1402] 
split level 86: [/input-8, 1827] 
split level 87: [/input-8, 868] 
split level 88: [/input-8, 1318] 
split level 89: [/input-8, 558] 
split level 90: [/input-8, 1396] 
split level 91: [/input-8, 1888] 
split level 92: [/input-8, 977] 
split level 93: [/input, 2536] 
split level 94: [/input-8, 943] 
split level 95: [/input, 2460] 
split level 96: [/input-8, 1880] 
split level 97: [/input, 1687] 
split level 98: [/input-8, 1326] 
split level 99: [/input-8, 1389] 
split level 100: [/input-8, 546] 
split level 101: [/input-12, 53] 
split level 102: [/input-8, 1430] 
split level 103: [/input, 3547] 
split level 104: [/input-8, 404] 
split level 105: [/input, 2475] 
split level 106: [/input-8, 844] 
split level 107: [/input, 2474] 
split level 108: [/input-8, 832] 
split level 109: [/input-8, 985] 
split level 110: [/input-8, 528] 
split level 111: [/input-8, 545] 
split level 112: [/input, 1689] 
split level 113: [/input-8, 537] 
split level 114: [/input-8, 915] 
split level 115: [/input, 1685] 
split level 116: [/input, 2522] 
split level 117: [/input, 3451] 
split level 118: [/input, 437] 
split level 119: [/input, 1723] 
split level 120: [/input-8, 566] 
split level 121: [/input, 2424] 
split level 122: [/input, 1684] 
split level 123: [/input-8, 564] 
split level 124: [/input, 2462] 
split level 125: [/input, 2477] 
split level 126: [/input, 487] 
split level 127: [/input-8, 561] 
split level 128: [/input, 3272] 
split level 129: [/input, 2883] 
split level 130: [/input, 2487] 
split level 131: [/input, 2523] 
split level 132: [/input, 2723] 
split level 133: [/input, 3303] 
split level 134: [/input, 3269] 
split level 135: [/input, 2472] 
split level 136: [/input, 1497] 
split level 137: [/input-8, 1424] 
split level 138: [/input, 4019] 
split level 139: [/input, 1513] 
split level 140: [/input, 1515] 
split level 141: [/input, 2533] 
split level 142: [/input-8, 64] 
split level 143: [/input-8, 1416] 
split level 144: [/input, 1132] 
split level 145: [/input, 471] 
split level 146: [/input, 2518] 
split level 147: [/input, 2554] 
split level 148: [/input, 2516] 
split level 149: [/input, 613] 
split level 150: [/input, 1668] 
split level 151: [/input, 2505] 
split level 152: [/input, 486] 
split level 153: [/input-8, 121] 
split level 154: [/input, 3531] 
split level 155: [/input, 2634] 
split level 156: [/input-8, 980] 
split level 157: [/input, 2264] 
split level 158: [/input, 2555] 
split level 159: [/input, 2551] 
split level 160: [/input, 474] 
split level 161: [/input, 455] 
split level 162: [/input-8, 1875] 
split level 163: [/input-8, 521] 
split level 164: [/input, 2244] 
split level 165: [/input, 438] 
split level 166: [/input, 2506] 
split level 167: [/input, 458] 
split level 168: [/input-8, 935] 
split level 169: [/input, 2500] 
split level 170: [/input, 2443] 
split level 171: [/input, 1674] 
split level 172: [/input, 3575] 
split level 173: [/input, 2553] 
split level 174: [/input, 1403] 
split level 175: [/input, 3577] 
split level 176: [/input, 3467] 
split level 177: [/input, 1499] 
split level 178: [/input-8, 1045] 
split level 179: [/input, 2539] 
split level 180: [/input, 489] 
split level 181: [/input, 2280] 
split level 182: [/input-8, 998] 
split level 183: [/input-8, 84] 
split level 184: [/input, 1117] 
split level 185: [/input, 3290] 
split level 186: [/input, 1751] 
split level 187: [/input, 2428] 
split level 188: [/input, 2249] 
split level 189: [/input, 1419] 
split level 190: [/input, 3256] 
split level 191: [/input, 2470] 
split level 192: [/input, 2429] 
split level 193: [/input, 3321] 
split level 194: [/input, 521] 
split level 195: [/input, 3579] 
split level 196: [/input, 2549] 
split level 197: [/input-8, 529] 
split level 198: [/input, 149] 
split level 199: [/input, 3572] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.32817432284355164
10 lb beta sum: 0.0, worst -0.32816755771636963
Time: prepare 0.0117    bound 0.0965    transfer 0.0013    finalize 0.0028    func 0.1150    
Accumulated time: func 0.1681    prepare 0.0221    bound 0.1492    transfer 0.0014    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02066171) min lb tensor(-0.32815915)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.010081291198730469 
BICCOS Cumulative time: 0.010081291198730469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.31694 (1), -0.31648 (1), -0.31636 (1), -0.31617 (1), -0.31571 (1), -0.31507 (1), -0.31478 (1), -0.31362 (1), -0.31352 (1), -0.31339 (1), -0.31337 (1), -0.31321 (1), -0.31234 (1), -0.31215 (1), -0.31212 (1), -0.31074 (1), -0.31035 (1), -0.31021 (1), -0.30959 (1), -0.30912 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5104    set_bounds 0.0090    solve 0.1151    add 0.1939    
Accumulated time: pickout 0.0003    decision 0.5104    set_bounds 0.0090    solve 0.1151    add 0.1939    
Current (lb-rhs): -0.316937118768692
50 domains visited
Cumulative time: 0.9167191982269287

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 37] [/input-12, 37] [/input-12, 1] [/input-12, 37] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 37] 
split level 2: [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 37] [/input-12, 37] [/input-12, 26] [/input-12, 26] 
split level 3: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 26] [/input-12, 51] [/input-12, 51] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.29596254229545593
10 lb beta sum: 0.0, worst -0.29588401317596436
Time: prepare 0.0125    bound 0.0977    transfer 0.0008    finalize 0.0026    func 0.1163    
Accumulated time: func 0.2844    prepare 0.0349    bound 0.2469    transfer 0.0022    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.16014087) min lb tensor(-0.29586720)
Number of Verified Splits: 27 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.013765335083007812 
BICCOS Cumulative time: 0.02384662628173828
Preprocessing time: 0.011866331100463867 Inference time: 0.0011909008026123047 Add cuts time: 0.0003848075866699219 Cut analysis time: 0.00032329559326171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13613 (2), -0.13576 (2), -0.13385 (2), -0.13356 (2), -0.13349 (2), -0.13302 (2), -0.13233 (2), -0.13217 (2), -0.13213 (2), -0.13045 (2), -0.13022 (2), -0.12939 (2), -0.12920 (2), -0.12847 (2), -0.12797 (2), -0.12766 (2), -0.12625 (2), -0.12470 (2), -0.12452 (2), -0.12318 (2), 
Length of domains: 50
Time: pickout 0.0078    decision 0.0196    set_bounds 0.0121    solve 0.1163    add 0.2106    
Accumulated time: pickout 0.0082    decision 0.5299    set_bounds 0.0211    solve 0.2314    add 0.4045    
Current (lb-rhs): -0.1361347734928131
100 domains visited
Cumulative time: 1.3040642738342285

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 1] [/input-12, 37] [/input-12, 1] [/input-12, 54] [/input-12, 37] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 1: [/input-12, 37] [/input-12, 37] [/input-12, 26] [/input-12, 37] [/input-12, 1] [/input-12, 26] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
split level 2: [/input-12, 26] [/input-12, 26] [/input-12, 44] [/input-12, 26] [/input-12, 26] [/input-12, 44] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 44] 
split level 3: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-8, 1364] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1292262077331543
10 lb beta sum: 0.4122433364391327, worst -0.28343212604522705
Time: prepare 0.0070    bound 0.1167    transfer 0.0007    finalize 0.0023    func 0.1299    
Accumulated time: func 0.4142    prepare 0.0421    bound 0.3636    transfer 0.0030    finalize 0.0078    
all_split False
======================Cut inference begins======================
max lb tensor(0.25799453) min lb tensor(-0.08397110)
Number of Verified Splits: 172 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 18
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.022583723068237305 
BICCOS Cumulative time: 0.046430349349975586
Preprocessing time: 0.011546611785888672 Inference time: 0.007578611373901367 Add cuts time: 0.002774477005004883 Cut analysis time: 0.0006840229034423828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01667 (3), -0.01619 (3), -0.01580 (3), -0.01579 (3), -0.01490 (3), -0.01458 (3), -0.01404 (3), -0.01403 (3), -0.01355 (3), -0.01336 (3), -0.01333 (3), -0.01322 (3), -0.01313 (3), -0.01236 (3), -0.01232 (3), -0.01227 (3), -0.01207 (3), -0.01174 (3), -0.01155 (3), -0.01152 (3), 
Length of domains: 50
Time: pickout 0.0077    decision 0.0197    set_bounds 0.0157    solve 0.1300    add 0.2225    
Accumulated time: pickout 0.0158    decision 0.5496    set_bounds 0.0367    solve 0.3614    add 0.6270    
Current (lb-rhs): -0.016674309968948364
150 domains visited
Cumulative time: 1.7310757637023926

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 1] [/input-12, 54] 
split level 1: [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
split level 2: [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] 
split level 3: [/input-8, 1373] [/input-8, 1373] [/input-12, 51] [/input-12, 51] [/input-8, 1364] [/input-12, 51] [/input-12, 51] [/input-8, 1373] [/input-12, 51] [/input-12, 51] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07622343301773071
10 lb beta sum: 0.47116339206695557, worst -0.2470209300518036
Time: prepare 0.0076    bound 0.1578    transfer 0.0025    finalize 0.0029    func 0.1735    
Accumulated time: func 0.5877    prepare 0.0501    bound 0.5214    transfer 0.0055    finalize 0.0107    
all_split False
======================Cut inference begins======================
max lb tensor(0.70417488) min lb tensor(-0.01225069)
Number of Verified Splits: 358 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 6
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.04482865333557129 
BICCOS Cumulative time: 0.09125900268554688
Preprocessing time: 0.012761116027832031 Inference time: 0.01997518539428711 Add cuts time: 0.011101722717285156 Cut analysis time: 0.0009906291961669922
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0071    decision 0.0234    set_bounds 0.0185    solve 0.1738    add 0.0256    
Accumulated time: pickout 0.0229    decision 0.5730    set_bounds 0.0553    solve 0.5351    add 0.6525    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 1] 
split level 2: [/input-12, 37] 
split level 3: [/input-12, 26] 
split level 4: [/input-12, 44] 
split level 5: [/input-12, 51] 
split level 6: [/input-8, 1892] 
split level 7: [/input-8, 1364] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1160966157913208
10 lb beta sum: 0.05438690632581711, worst -0.17456376552581787
Time: prepare 0.0054    bound 0.1659    transfer 0.0015    finalize 0.0027    func 0.1772    
Accumulated time: func 0.7649    prepare 0.0561    bound 0.6873    transfer 0.0069    finalize 0.0134    
all_split False
======================Cut inference begins======================
max lb tensor(0.27310556) min lb tensor(-0.11003658)
Number of Verified Splits: 238 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.32821348309516907
10 lb beta sum: 0.665265679359436, worst -0.24024730920791626
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 8
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.33117055892944336 
BICCOS Cumulative time: 0.42242956161499023
Preprocessing time: 0.008231401443481445 Inference time: 0.3159189224243164 Add cuts time: 0.006356954574584961 Cut analysis time: 0.0006632804870605469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11004 (8), -0.10686 (8), -0.09039 (8), -0.08726 (8), -0.06815 (8), -0.06656 (8), -0.05744 (8), -0.05449 (8), -0.05127 (8), -0.04996 (8), -0.04271 (8), -0.03964 (8), -0.03951 (8), -0.03872 (8), -0.02592 (8), -0.02494 (8), -0.00427 (8), -0.00406 (8), 
Length of domains: 18
Time: pickout 0.0016    decision 0.0266    set_bounds 0.0224    solve 0.1773    add 0.0472    
Accumulated time: pickout 0.0246    decision 0.5996    set_bounds 0.0776    solve 0.7124    add 0.6997    
Current (lb-rhs): -0.11003658175468445
168 domains visited
Cumulative time: 2.652634620666504

BaB round 2
batch: 18
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1891] [/input-8, 1363] [/input-8, 1891] [/input-8, 1363] [/input-8, 1363] [/input-8, 1891] 
split level 2: [/input-8, 1891] [/input-8, 1886] [/input-8, 1891] [/input-8, 1886] [/input-8, 539] [/input-8, 1886] [/input-8, 1373] [/input-8, 1373] [/input-8, 1886] [/input-8, 1363] 
split level 3: [/input-8, 1373] [/input-8, 1373] [/input-8, 1373] [/input-8, 1373] [/input-8, 1373] [/input-8, 1373] [/input-8, 1381] [/input-8, 1891] [/input-8, 1373] [/input-8, 1373] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09168010950088501
10 lb beta sum: 0.018497595563530922, worst -0.09077566862106323
Time: prepare 0.0062    bound 0.1652    transfer 0.0025    finalize 0.0018    func 0.1777    
Accumulated time: func 0.9427    prepare 0.0625    bound 0.8524    transfer 0.0094    finalize 0.0152    
all_split False
======================Cut inference begins======================
max lb tensor(0.47500235) min lb tensor(-0.09031850)
Number of Verified Splits: 177 of 288
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18401271104812622
10 lb beta sum: 0.6464995741844177, worst -0.06591194868087769
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 9
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.29338979721069336 
BICCOS Cumulative time: 0.7158193588256836
Preprocessing time: 0.011606693267822266 Inference time: 0.27451086044311523 Add cuts time: 0.006261587142944336 Cut analysis time: 0.0010106563568115234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09032 (12), -0.08806 (12), -0.08702 (12), -0.08487 (12), -0.08454 (12), -0.08228 (12), -0.08129 (12), -0.07926 (12), -0.07914 (12), -0.07672 (12), -0.07344 (12), -0.07293 (12), -0.07199 (12), -0.07093 (12), -0.07069 (12), -0.06984 (12), -0.06812 (12), -0.06710 (12), -0.06603 (12), -0.06491 (12), 
Length of domains: 111
Time: pickout 0.0016    decision 0.0161    set_bounds 0.2798    solve 0.1779    add 0.0779    
Accumulated time: pickout 0.0262    decision 0.6157    set_bounds 0.3574    solve 0.8903    add 0.7776    
Current (lb-rhs): -0.09031850099563599
279 domains visited
Cumulative time: 3.5090551376342773

BaB round 3
batch: 111
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1886] [/input-8, 1052] [/input-8, 1356] [/input-8, 1363] [/input-8, 1356] [/input-8, 1052] [/input-8, 1356] [/input-8, 1356] [/input-8, 1052] [/input-8, 1356] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08676213026046753
10 lb beta sum: 0.0, worst -0.08621013164520264
Time: prepare 0.0048    bound 0.1538    transfer 0.0020    finalize 0.0016    func 0.1637    
Accumulated time: func 1.1064    prepare 0.0675    bound 1.0062    transfer 0.0115    finalize 0.0167    
all_split False
======================Cut inference begins======================
max lb tensor(0.01291287) min lb tensor(-0.08587098)
Number of Verified Splits: 36 of 222
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 8
#cuts 4-6: 16
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.014587879180908203 
BICCOS Cumulative time: 0.7304072380065918
Preprocessing time: 0.007382631301879883 Inference time: 0.003995180130004883 Add cuts time: 0.0015492439270019531 Cut analysis time: 0.0016608238220214844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08587 (13), -0.08272 (13), -0.08251 (13), -0.08011 (13), -0.07979 (13), -0.07778 (13), -0.07695 (13), -0.07679 (13), -0.07589 (13), -0.07440 (13), -0.07367 (13), -0.07254 (13), -0.07215 (13), -0.07200 (13), -0.07185 (13), -0.07012 (13), -0.06862 (13), -0.06824 (13), -0.06751 (13), -0.06680 (13), 
Length of domains: 186
Time: pickout 0.0137    decision 0.0190    set_bounds 0.0100    solve 0.1638    add 0.0790    
Accumulated time: pickout 0.0399    decision 0.6346    set_bounds 0.3675    solve 1.0542    add 0.8566    
Current (lb-rhs): -0.08587098121643066
465 domains visited
Cumulative time: 3.8170883655548096

BaB round 4
batch: 186
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1886] [/input-8, 1067] [/input-8, 1357] [/input-8, 1828] [/input-8, 1886] [/input-8, 1067] [/input-8, 1357] [/input-8, 1356] [/input-8, 1067] [/input-8, 1357] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08091562986373901
10 lb beta sum: 0.0021625759545713663, worst -0.08059939742088318
Time: prepare 0.0077    bound 0.1544    transfer 0.0009    finalize 0.0020    func 0.1676    
Accumulated time: func 1.2740    prepare 0.0755    bound 1.1607    transfer 0.0123    finalize 0.0188    
all_split False
======================Cut inference begins======================
max lb tensor(0.02938094) min lb tensor(-0.08048165)
Number of Verified Splits: 89 of 372
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 1-3: 8
#cuts 4-6: 29
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.025774478912353516 
BICCOS Cumulative time: 0.7561817169189453
Preprocessing time: 0.011700630187988281 Inference time: 0.009456396102905273 Add cuts time: 0.0031232833862304688 Cut analysis time: 0.0014941692352294922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08048 (14), -0.07763 (14), -0.07716 (14), -0.07598 (14), -0.07532 (14), -0.07379 (14), -0.07303 (14), -0.07271 (14), -0.07259 (14), -0.07032 (14), -0.06967 (14), -0.06926 (14), -0.06804 (14), -0.06784 (14), -0.06757 (14), -0.06734 (14), -0.06709 (14), -0.06671 (14), -0.06657 (14), -0.06594 (14), 
Length of domains: 283
Time: pickout 0.0164    decision 0.0234    set_bounds 0.0169    solve 0.1678    add 0.0769    
Accumulated time: pickout 0.0563    decision 0.6580    set_bounds 0.3844    solve 1.2220    add 0.9335    
Current (lb-rhs): -0.0804816484451294
748 domains visited
Cumulative time: 4.152636528015137

BaB round 5
batch: 283
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1356] [/input-8, 1828] [/input-8, 1886] [/input-8, 1067] [/input-8, 1828] [/input-8, 1886] [/input-8, 1828] [/input-8, 1356] [/input-8, 1886] [/input-8, 1828] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07750898599624634
10 lb beta sum: 0.0027325351256877184, worst -0.07735782861709595
Time: prepare 0.0111    bound 0.1442    transfer 0.0024    finalize 0.0034    func 0.1650    
Accumulated time: func 1.4390    prepare 0.0868    bound 1.3049    transfer 0.0148    finalize 0.0222    
all_split False
======================Cut inference begins======================
max lb tensor(0.02899646) min lb tensor(-0.07726786)
Number of Verified Splits: 208 of 566
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 14
#cuts 4-6: 20
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.0453336238861084 
BICCOS Cumulative time: 0.8015153408050537
Preprocessing time: 0.01643204689025879 Inference time: 0.02386927604675293 Add cuts time: 0.003655672073364258 Cut analysis time: 0.0013766288757324219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07727 (15), -0.07705 (15), -0.07389 (15), -0.07275 (15), -0.07161 (15), -0.06949 (15), -0.06937 (15), -0.06936 (15), -0.06872 (15), -0.06851 (15), -0.06599 (15), -0.06599 (15), -0.06405 (15), -0.06398 (15), -0.06393 (15), -0.06373 (15), -0.06341 (15), -0.06264 (15), -0.06241 (15), -0.06227 (15), 
Length of domains: 358
Time: pickout 0.0171    decision 0.0275    set_bounds 0.0242    solve 0.1652    add 0.1106    
Accumulated time: pickout 0.0734    decision 0.6855    set_bounds 0.4086    solve 1.3872    add 1.0441    
Current (lb-rhs): -0.0772678554058075
1106 domains visited
Cumulative time: 4.55396580696106

BaB round 6
batch: 358
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1357] [/input-8, 1356] [/input-8, 1357] [/input-8, 1357] [/input-8, 1886] [/input-8, 1357] [/input-8, 1067] [/input-8, 1067] [/input-8, 539] [/input-8, 1067] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07356446981430054
10 lb beta sum: 0.1470426619052887, worst -0.07323506474494934
Time: prepare 0.0143    bound 0.1598    transfer 0.0026    finalize 0.0049    func 0.1863    
Accumulated time: func 1.6254    prepare 0.1013    bound 1.4647    transfer 0.0174    finalize 0.0271    
all_split False
======================Cut inference begins======================
max lb tensor(0.29538125) min lb tensor(-0.07319528)
Number of Verified Splits: 150 of 716
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 1-3: 20
#cuts 4-6: 16
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.045340538024902344 
BICCOS Cumulative time: 0.846855878829956
Preprocessing time: 0.021136760711669922 Inference time: 0.019208431243896484 Add cuts time: 0.003408670425415039 Cut analysis time: 0.0015866756439208984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07320 (16), -0.07278 (16), -0.06934 (16), -0.06749 (16), -0.06605 (16), -0.06502 (16), -0.06483 (16), -0.06481 (16), -0.06387 (16), -0.06384 (16), -0.06364 (16), -0.06302 (16), -0.06147 (16), -0.06044 (16), -0.06035 (16), -0.05974 (16), -0.05965 (16), -0.05932 (16), -0.05925 (16), -0.05909 (16), 
Length of domains: 566
Time: pickout 0.0614    decision 0.0342    set_bounds 0.0337    solve 0.1866    add 0.0890    
Accumulated time: pickout 0.1348    decision 0.7197    set_bounds 0.4423    solve 1.5738    add 1.1332    
Current (lb-rhs): -0.07319527864456177
1672 domains visited
Cumulative time: 5.016014337539673

BaB round 7
batch: 566
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1067] [/input-8, 539] [/input-8, 1067] [/input-8, 1067] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 1357] [/input-8, 542] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0711037814617157
10 lb beta sum: 0.17793013155460358, worst -0.0707833468914032
Time: prepare 0.0229    bound 0.1537    transfer 0.0076    finalize 0.0064    func 0.1981    
Accumulated time: func 1.8235    prepare 0.1245    bound 1.6184    transfer 0.0250    finalize 0.0334    
all_split False
======================Cut inference begins======================
max lb tensor(0.32753086) min lb tensor(-0.07076135)
Number of Verified Splits: 376 of 1132
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 69.
#cuts 1-3: 23
#cuts 4-6: 38
#cuts 7-9: 8
#cuts >= 20: 0
BICCOS time: 0.09947943687438965 
BICCOS Cumulative time: 0.9463353157043457
Preprocessing time: 0.0355381965637207 Inference time: 0.05036163330078125 Add cuts time: 0.010906696319580078 Cut analysis time: 0.002672910690307617
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07076 (17), -0.06909 (17), -0.06746 (17), -0.06546 (17), -0.06423 (17), -0.06295 (17), -0.06197 (17), -0.06188 (17), -0.06065 (17), -0.06064 (17), -0.06056 (17), -0.05947 (17), -0.05945 (17), -0.05918 (17), -0.05864 (17), -0.05768 (17), -0.05736 (17), -0.05720 (17), -0.05717 (17), -0.05711 (17), 
Length of domains: 756
Time: pickout 0.0212    decision 0.0448    set_bounds 0.0493    solve 0.1984    add 0.1223    
Accumulated time: pickout 0.1560    decision 0.7645    set_bounds 0.4916    solve 1.7722    add 1.2555    
Current (lb-rhs): -0.07076135277748108
2428 domains visited
Cumulative time: 5.562696218490601

BaB round 8
batch: 756
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 1356] [/input-8, 1356] [/input-8, 1067] [/input-8, 539] [/input-8, 1356] [/input-8, 539] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06745758652687073
10 lb beta sum: 0.29552337527275085, worst -0.06715553998947144
Time: prepare 0.0309    bound 0.1580    transfer 0.0026    finalize 0.0078    func 0.3962    
Accumulated time: func 2.2197    prepare 0.1558    bound 1.7764    transfer 0.0276    finalize 0.0412    
all_split False
======================Cut inference begins======================
max lb tensor(0.41137147) min lb tensor(-0.06712666)
Number of Verified Splits: 568 of 1512
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 48.
#cuts 1-3: 21
#cuts 4-6: 23
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.14073538780212402 
BICCOS Cumulative time: 1.0870707035064697
Preprocessing time: 0.0502474308013916 Inference time: 0.07604765892028809 Add cuts time: 0.012766599655151367 Cut analysis time: 0.0016736984252929688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06713 (18), -0.06555 (18), -0.06201 (18), -0.06143 (18), -0.05996 (18), -0.05975 (18), -0.05866 (18), -0.05863 (18), -0.05748 (18), -0.05731 (18), -0.05729 (18), -0.05701 (18), -0.05651 (18), -0.05546 (18), -0.05535 (18), -0.05421 (18), -0.05415 (18), -0.05411 (18), -0.05339 (18), -0.05291 (18), 
Length of domains: 944
Time: pickout 0.0873    decision 0.0576    set_bounds 0.0693    solve 0.3967    add 0.0746    
Accumulated time: pickout 0.2433    decision 0.8221    set_bounds 0.5609    solve 2.1689    add 1.3301    
Current (lb-rhs): -0.06712666153907776
3372 domains visited
Cumulative time: 6.396780014038086

BaB round 9
batch: 944
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 539] [/input-8, 1356] [/input-8, 539] [/input-8, 539] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06542494893074036
10 lb beta sum: 0.4271072447299957, worst -0.06514567136764526
Time: prepare 0.0388    bound 0.1675    transfer 0.0088    finalize 0.0097    func 0.2375    
Accumulated time: func 2.4572    prepare 0.1948    bound 1.9440    transfer 0.0364    finalize 0.0509    
all_split False
======================Cut inference begins======================
max lb tensor(0.71490705) min lb tensor(-0.06513602)
Number of Verified Splits: 1555 of 1888
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 20
#cuts 4-6: 5
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.28566956520080566 
BICCOS Cumulative time: 1.3727402687072754
Preprocessing time: 0.05836033821105957 Inference time: 0.20375370979309082 Add cuts time: 0.022743701934814453 Cut analysis time: 0.0008118152618408203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06514 (19), -0.06261 (19), -0.06155 (19), -0.05956 (19), -0.05929 (19), -0.05692 (19), -0.05607 (19), -0.05554 (19), -0.05487 (19), -0.05377 (19), -0.05368 (19), -0.05253 (19), -0.05237 (19), -0.05189 (19), -0.05149 (19), -0.05127 (19), -0.05110 (19), -0.05023 (19), -0.04987 (19), -0.04966 (19), 
Length of domains: 333
Time: pickout 0.0221    decision 0.0654    set_bounds 0.0846    solve 0.2379    add 0.0512    
Accumulated time: pickout 0.2654    decision 0.8875    set_bounds 0.6455    solve 2.4068    add 1.3814    
Current (lb-rhs): -0.06513601541519165
3705 domains visited
Cumulative time: 7.159054756164551

BaB round 10
batch: 333
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06513595581054688
10 lb beta sum: 0.6461191773414612, worst -0.06513458490371704
Time: prepare 0.0136    bound 0.1441    transfer 0.0016    finalize 0.0033    func 0.1670    
Accumulated time: func 2.6241    prepare 0.2087    bound 2.0881    transfer 0.0380    finalize 0.0542    
all_split False
======================Cut inference begins======================
max lb tensor(1.19080210) min lb tensor(-0.06512737)
Number of Verified Splits: 625 of 666
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 20
#cuts 4-6: 5
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.115966796875 
BICCOS Cumulative time: 1.4887070655822754
Preprocessing time: 0.021613359451293945 Inference time: 0.08688759803771973 Add cuts time: 0.006562948226928711 Cut analysis time: 0.0009028911590576172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06513 (20), -0.06257 (20), -0.05535 (20), -0.05377 (20), -0.05249 (20), -0.04631 (20), -0.04553 (20), -0.04286 (20), -0.03946 (20), -0.03753 (20), -0.03562 (20), -0.03432 (20), -0.03293 (20), -0.02665 (20), -0.02623 (20), -0.02417 (20), -0.02009 (20), -0.01799 (20), -0.01726 (20), -0.01511 (20), 
Length of domains: 41
Time: pickout 0.0075    decision 0.0311    set_bounds 0.0292    solve 0.1672    add 0.0659    
Accumulated time: pickout 0.2729    decision 0.9186    set_bounds 0.6747    solve 2.5740    add 1.4472    
Current (lb-rhs): -0.06512737274169922
3746 domains visited
Cumulative time: 7.591973304748535

BaB round 11
batch: 41
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 542] [/input-8, 1894] [/input-8, 1901] [/input-8, 1894] [/input-8, 542] [/input-8, 542] [/input-8, 1894] [/input-8, 1901] [/input-8, 1292] [/input-8, 1292] 
split level 1: [/input-8, 1894] [/input-8, 1901] [/input-8, 931] [/input-8, 1901] [/input-8, 1901] [/input-8, 1901] [/input-8, 1901] [/input-8, 931] [/input-8, 1893] [/input-8, 1893] 
split level 2: [/input-8, 1901] [/input-8, 931] [/input-8, 1910] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 1910] [/input-8, 1894] [/input-8, 1894] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5566496849060059, worst -0.05051088333129883
10 lb beta sum: 0.7274415493011475, worst -0.05043745040893555
Time: prepare 0.0153    bound 0.1550    transfer 0.0014    finalize 0.0020    func 0.1759    
Accumulated time: func 2.8000    prepare 0.2243    bound 2.2431    transfer 0.0394    finalize 0.0561    
all_split False
======================Cut inference begins======================
max lb tensor(0.31356138) min lb tensor(-0.05040079)
Number of Verified Splits: 186 of 328
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 20
#cuts 4-6: 5
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.04015994071960449 
BICCOS Cumulative time: 1.5288670063018799
Preprocessing time: 0.010258913040161133 Inference time: 0.02780008316040039 Add cuts time: 0.0013170242309570312 Cut analysis time: 0.0007839202880859375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05040 (23), -0.04926 (23), -0.04830 (23), -0.04783 (23), -0.04752 (23), -0.04719 (23), -0.04668 (23), -0.04637 (23), -0.04613 (23), -0.04604 (23), -0.04577 (23), -0.04533 (23), -0.04505 (23), -0.04359 (23), -0.04317 (23), -0.04288 (23), -0.04189 (23), -0.04053 (23), -0.03934 (23), -0.03894 (23), 
Length of domains: 142
Time: pickout 0.0098    decision 0.0212    set_bounds 0.0186    solve 0.1760    add 0.0818    
Accumulated time: pickout 0.2827    decision 0.9398    set_bounds 0.6933    solve 2.7499    add 1.5290    
Current (lb-rhs): -0.05040079355239868
3888 domains visited
Cumulative time: 7.947533845901489

BaB round 12
batch: 142
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1381] [/input-8, 1044] [/input-8, 1044] [/input-8, 1381] [/input-8, 1381] [/input-8, 1381] [/input-8, 1044] [/input-8, 1381] [/input-8, 931] [/input-8, 931] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8520714044570923, worst -0.0464203804731369
10 lb beta sum: 0.8520714044570923, worst -0.046338990330696106
Time: prepare 0.0140    bound 0.1549    transfer 0.0018    finalize 0.0017    func 0.1744    
Accumulated time: func 2.9744    prepare 0.2385    bound 2.3980    transfer 0.0412    finalize 0.0579    
all_split False
======================Cut inference begins======================
max lb tensor(0.00828090) min lb tensor(-0.04630746)
Number of Verified Splits: 40 of 284
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 20
#cuts 4-6: 5
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.01770496368408203 
BICCOS Cumulative time: 1.546571969985962
Preprocessing time: 0.00888681411743164 Inference time: 0.0061304569244384766 Add cuts time: 0.0011723041534423828 Cut analysis time: 0.0015153884887695312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04631 (24), -0.04561 (24), -0.04476 (24), -0.04474 (24), -0.04438 (24), -0.04404 (24), -0.04375 (24), -0.04342 (24), -0.04339 (24), -0.04305 (24), -0.04274 (24), -0.04118 (24), -0.04094 (24), -0.04081 (24), -0.04067 (24), -0.04049 (24), -0.04016 (24), -0.04001 (24), -0.03973 (24), -0.03871 (24), 
Length of domains: 244
Time: pickout 0.0165    decision 0.0231    set_bounds 0.0132    solve 0.1745    add 0.0999    
Accumulated time: pickout 0.2993    decision 0.9629    set_bounds 0.7065    solve 2.9244    add 1.6289    
Current (lb-rhs): -0.046307459473609924
4132 domains visited
Cumulative time: 8.300115823745728

BaB round 13
batch: 244
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1044] [/input-8, 1381] [/input-8, 1381] [/input-8, 1044] [/input-8, 1044] [/input-8, 1044] [/input-8, 1381] [/input-8, 1044] [/input-8, 1044] [/input-8, 1044] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8211098909378052, worst -0.04257422685623169
10 lb beta sum: 0.8211098909378052, worst -0.04254308342933655
Time: prepare 0.0228    bound 0.1612    transfer 0.0024    finalize 0.0027    func 0.1931    
Accumulated time: func 3.1675    prepare 0.2615    bound 2.5592    transfer 0.0437    finalize 0.0606    
all_split False
======================Cut inference begins======================
max lb tensor(0.00932449) min lb tensor(-0.04253086)
Number of Verified Splits: 103 of 488
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 20
#cuts 4-6: 5
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.03598737716674805 
BICCOS Cumulative time: 1.58255934715271
Preprocessing time: 0.015920162200927734 Inference time: 0.016312837600708008 Add cuts time: 0.0029859542846679688 Cut analysis time: 0.0007684230804443359
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04253 (25), -0.04161 (25), -0.04151 (25), -0.04062 (25), -0.04022 (25), -0.03992 (25), -0.03960 (25), -0.03959 (25), -0.03946 (25), -0.03906 (25), -0.03903 (25), -0.03890 (25), -0.03871 (25), -0.03859 (25), -0.03858 (25), -0.03833 (25), -0.03805 (25), -0.03803 (25), -0.03771 (25), -0.03770 (25), 
Length of domains: 385
Time: pickout 0.0562    decision 0.0263    set_bounds 0.0224    solve 0.1935    add 0.0853    
Accumulated time: pickout 0.3554    decision 0.9892    set_bounds 0.7289    solve 3.1179    add 1.7142    
Current (lb-rhs): -0.04253086447715759
4517 domains visited
Cumulative time: 8.727936506271362

BaB round 14
batch: 385
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 1381] [/input-8, 1381] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7765416502952576, worst -0.038233786821365356
10 lb beta sum: 0.7765416502952576, worst -0.03814879059791565
Time: prepare 0.2343    bound 0.1577    transfer 0.0035    finalize 0.0045    func 0.4052    
Accumulated time: func 3.5727    prepare 0.4960    bound 2.7169    transfer 0.0472    finalize 0.0650    
all_split False
======================Cut inference begins======================
max lb tensor(0.00797188) min lb tensor(-0.03811944)
Number of Verified Splits: 109 of 770
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 20
#cuts 4-6: 5
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.04579901695251465 
BICCOS Cumulative time: 1.6283583641052246
Preprocessing time: 0.02381134033203125 Inference time: 0.01967477798461914 Add cuts time: 0.001562356948852539 Cut analysis time: 0.0007505416870117188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03812 (26), -0.03723 (26), -0.03713 (26), -0.03711 (26), -0.03627 (26), -0.03625 (26), -0.03621 (26), -0.03620 (26), -0.03612 (26), -0.03592 (26), -0.03588 (26), -0.03549 (26), -0.03532 (26), -0.03525 (26), -0.03524 (26), -0.03518 (26), -0.03509 (26), -0.03498 (26), -0.03491 (26), -0.03461 (26), 
Length of domains: 661
Time: pickout 0.0227    decision 0.0346    set_bounds 0.0338    solve 0.4055    add 0.1069    
Accumulated time: pickout 0.3781    decision 1.0238    set_bounds 0.7627    solve 3.5234    add 1.8211    
Current (lb-rhs): -0.03811943531036377
5178 domains visited
Cumulative time: 9.386390924453735

BaB round 15
batch: 661
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7390632033348083, worst -0.035481393337249756
10 lb beta sum: 0.7390632033348083, worst -0.03544566035270691
Time: prepare 0.0634    bound 0.1605    transfer 0.0057    finalize 0.0073    func 0.2459    
Accumulated time: func 3.8186    prepare 0.5596    bound 2.8774    transfer 0.0529    finalize 0.0723    
all_split False
======================Cut inference begins======================
max lb tensor(0.00517148) min lb tensor(-0.03542718)
Number of Verified Splits: 231 of 1322
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 20
#cuts 4-6: 5
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.0852499008178711 
BICCOS Cumulative time: 1.7136082649230957
Preprocessing time: 0.04209089279174805 Inference time: 0.040003061294555664 Add cuts time: 0.002218008041381836 Cut analysis time: 0.0009379386901855469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03543 (27), -0.03452 (27), -0.03443 (27), -0.03441 (27), -0.03383 (27), -0.03375 (27), -0.03355 (27), -0.03350 (27), -0.03342 (27), -0.03320 (27), -0.03305 (27), -0.03287 (27), -0.03281 (27), -0.03281 (27), -0.03274 (27), -0.03252 (27), -0.03240 (27), -0.03225 (27), -0.03216 (27), -0.03206 (27), 
Length of domains: 1091
Time: pickout 0.0676    decision 0.0507    set_bounds 0.0643    solve 0.2463    add 0.0870    
Accumulated time: pickout 0.4457    decision 1.0745    set_bounds 0.8270    solve 3.7698    add 1.9081    
Current (lb-rhs): -0.03542718291282654
6269 domains visited
Cumulative time: 9.997753620147705

BaB round 16
batch: 1091
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6882566213607788, worst -0.032700568437576294
10 lb beta sum: 0.6882566213607788, worst -0.03264734148979187
Time: prepare 0.1064    bound 0.1868    transfer 0.0099    finalize 0.0111    func 0.3294    
Accumulated time: func 4.1480    prepare 0.6663    bound 3.0641    transfer 0.0629    finalize 0.0835    
all_split False
======================Cut inference begins======================
max lb tensor(0.00887549) min lb tensor(-0.03261641)
Number of Verified Splits: 670 of 2182
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 20
#cuts 4-6: 5
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.19839882850646973 
BICCOS Cumulative time: 1.9120070934295654
Preprocessing time: 0.06864428520202637 Inference time: 0.12360334396362305 Add cuts time: 0.005318403244018555 Cut analysis time: 0.0008327960968017578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03262 (28), -0.03174 (28), -0.03170 (28), -0.03160 (28), -0.03097 (28), -0.03089 (28), -0.03082 (28), -0.03072 (28), -0.03071 (28), -0.03023 (28), -0.03017 (28), -0.03010 (28), -0.03002 (28), -0.03001 (28), -0.03001 (28), -0.02983 (28), -0.02936 (28), -0.02936 (28), -0.02935 (28), -0.02922 (28), 
Length of domains: 1512
Time: pickout 0.0286    decision 0.0763    set_bounds 0.0980    solve 0.3299    add 0.1253    
Accumulated time: pickout 0.4743    decision 1.1508    set_bounds 0.9250    solve 4.0997    add 2.0335    
Current (lb-rhs): -0.03261640667915344
7781 domains visited
Cumulative time: 10.869180917739868

BaB round 17
batch: 1512
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5975852608680725, worst -0.03057694435119629
10 lb beta sum: 0.5975852608680725, worst -0.030471473932266235
Time: prepare 0.1369    bound 0.2387    transfer 0.0066    finalize 0.0155    func 0.4184    
Accumulated time: func 4.5663    prepare 0.8039    bound 3.3029    transfer 0.0694    finalize 0.0990    
all_split False
======================Cut inference begins======================
max lb tensor(0.00635248) min lb tensor(-0.03044808)
Number of Verified Splits: 781 of 3024
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 21
#cuts 4-6: 5
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.24200105667114258 
BICCOS Cumulative time: 2.154008150100708
Preprocessing time: 0.09261655807495117 Inference time: 0.14231085777282715 Add cuts time: 0.006267070770263672 Cut analysis time: 0.0008065700531005859
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03045 (29), -0.02968 (29), -0.02957 (29), -0.02943 (29), -0.02885 (29), -0.02880 (29), -0.02870 (29), -0.02869 (29), -0.02855 (29), -0.02807 (29), -0.02800 (29), -0.02796 (29), -0.02796 (29), -0.02784 (29), -0.02783 (29), -0.02780 (29), -0.02734 (29), -0.02720 (29), -0.02720 (29), -0.02716 (29), 
Length of domains: 2243
Time: pickout 0.0957    decision 0.0967    set_bounds 0.3342    solve 0.4191    add 0.1042    
Accumulated time: pickout 0.5699    decision 1.2475    set_bounds 1.2592    solve 4.5188    add 2.1377    
Current (lb-rhs): -0.030448079109191895
10024 domains visited
Cumulative time: 12.176598310470581

BaB round 18
batch: 2243
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1901] [/input-8, 1901] [/input-8, 1901] [/input-8, 1901] [/input-8, 1901] [/input-8, 1901] [/input-8, 1901] [/input-8, 1901] [/input-8, 1901] [/input-8, 1901] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026456892490386963
10 lb beta sum: 0.20883122086524963, worst -0.02643647789955139
Time: prepare 0.0980    bound 0.3120    transfer 0.0643    finalize 0.0221    func 0.5260    
Accumulated time: func 5.0924    prepare 0.9022    bound 3.6148    transfer 0.1337    finalize 0.1211    
all_split False
======================Cut inference begins======================
max lb tensor(0.00516409) min lb tensor(-0.02641517)
Number of Verified Splits: 1260 of 4486
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 22
#cuts 4-6: 5
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.3951432704925537 
BICCOS Cumulative time: 2.5491514205932617
Preprocessing time: 0.14059019088745117 Inference time: 0.24135637283325195 Add cuts time: 0.012167930603027344 Cut analysis time: 0.0010287761688232422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02642 (30), -0.02597 (30), -0.02578 (30), -0.02569 (30), -0.02566 (30), -0.02554 (30), -0.02523 (30), -0.02510 (30), -0.02502 (30), -0.02496 (30), -0.02491 (30), -0.02481 (30), -0.02477 (30), -0.02463 (30), -0.02435 (30), -0.02428 (30), -0.02418 (30), -0.02414 (30), -0.02409 (30), -0.02407 (30), 
Length of domains: 3226
Time: pickout 0.0529    decision 0.1317    set_bounds 0.3570    solve 0.5281    add 0.1891    
Accumulated time: pickout 0.6229    decision 1.3792    set_bounds 1.6162    solve 5.0469    add 2.3268    
Current (lb-rhs): -0.02641516923904419
13250 domains visited
Cumulative time: 13.865956783294678

BaB round 19
batch: 3226
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1374] [/input-8, 1308] [/input-8, 1308] [/input-8, 1374] [/input-8, 1308] [/input-8, 1374] [/input-8, 1308] [/input-8, 1308] [/input-8, 1374] [/input-8, 1308] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025016576051712036
10 lb beta sum: 0.1318543553352356, worst -0.02500671148300171
Time: prepare 0.1449    bound 0.4210    transfer 0.0205    finalize 0.0466    func 0.6771    
Accumulated time: func 5.7695    prepare 1.0474    bound 4.0359    transfer 0.1543    finalize 0.1676    
all_split False
======================Cut inference begins======================
max lb tensor(0.01744685) min lb tensor(-0.02499488)
Number of Verified Splits: 3770 of 6452
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 25
#cuts 4-6: 5
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 1.2583296298980713 
BICCOS Cumulative time: 3.807481050491333
Preprocessing time: 0.22762703895568848 Inference time: 0.9994795322418213 Add cuts time: 0.030248165130615234 Cut analysis time: 0.0009748935699462891
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02499 (31), -0.02439 (31), -0.02437 (31), -0.02423 (31), -0.02413 (31), -0.02412 (31), -0.02355 (31), -0.02352 (31), -0.02350 (31), -0.02350 (31), -0.02340 (31), -0.02336 (31), -0.02325 (31), -0.02319 (31), -0.02275 (31), -0.02272 (31), -0.02267 (31), -0.02267 (31), -0.02262 (31), -0.02253 (31), 
Length of domains: 2682
Time: pickout 0.1515    decision 0.2133    set_bounds 0.6009    solve 0.6801    add 0.0258    
Accumulated time: pickout 0.7743    decision 1.5925    set_bounds 2.2171    solve 5.7270    add 2.3526    
Current (lb-rhs): -0.024994879961013794
15932 domains visited
Cumulative time: 16.881730556488037

BaB round 20
batch: 2682
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 533] [/input-8, 533] [/input-8, 1308] [/input-8, 533] [/input-8, 533] [/input-8, 533] [/input-8, 1374] [/input-8, 533] [/input-8, 533] [/input-8, 533] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.024034082889556885
10 lb beta sum: 0.2931659519672394, worst -0.021792948246002197
Time: prepare 0.1214    bound 0.3631    transfer 0.0301    finalize 0.0400    func 0.5913    
Accumulated time: func 6.3609    prepare 1.1691    bound 4.3990    transfer 0.1843    finalize 0.2076    
all_split False
======================Cut inference begins======================
max lb tensor(0.47687840) min lb tensor(-0.02177298)
Number of Verified Splits: 4043 of 5364
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 28
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 1.246934175491333 
BICCOS Cumulative time: 5.054415225982666
Preprocessing time: 0.18333768844604492 Inference time: 1.038130760192871 Add cuts time: 0.02248978614807129 Cut analysis time: 0.002975940704345703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02177 (32), -0.02123 (32), -0.02115 (32), -0.02115 (32), -0.02091 (32), -0.02089 (32), -0.02077 (32), -0.02035 (32), -0.02032 (32), -0.02023 (32), -0.02017 (32), -0.02015 (32), -0.02005 (32), -0.01991 (32), -0.01990 (32), -0.01985 (32), -0.01961 (32), -0.01960 (32), -0.01946 (32), -0.01934 (32), 
Length of domains: 1321
Time: pickout 0.0577    decision 0.1710    set_bounds 0.2816    solve 0.5944    add 0.0535    
Accumulated time: pickout 0.8320    decision 1.7635    set_bounds 2.4986    solve 6.3214    add 2.4061    
Current (lb-rhs): -0.02177298069000244
17253 domains visited
Cumulative time: 19.369849681854248

BaB round 21
batch: 1321
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.021773546934127808
10 lb beta sum: 0.4273257553577423, worst -0.02175694704055786
Time: prepare 0.0582    bound 0.2178    transfer 0.0093    finalize 0.0160    func 0.3200    
Accumulated time: func 6.6809    prepare 1.2276    bound 4.6168    transfer 0.1936    finalize 0.2236    
all_split False
======================Cut inference begins======================
max lb tensor(0.24422103) min lb tensor(-0.02173740)
Number of Verified Splits: 1381 of 2642
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 28
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.37944602966308594 
BICCOS Cumulative time: 5.433861255645752
Preprocessing time: 0.0905771255493164 Inference time: 0.280318021774292 Add cuts time: 0.007697105407714844 Cut analysis time: 0.0008537769317626953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02174 (33), -0.02110 (33), -0.02087 (33), -0.02087 (33), -0.02073 (33), -0.02023 (33), -0.02011 (33), -0.02004 (33), -0.01988 (33), -0.01986 (33), -0.01983 (33), -0.01959 (33), -0.01959 (33), -0.01943 (33), -0.01927 (33), -0.01924 (33), -0.01912 (33), -0.01904 (33), -0.01903 (33), -0.01899 (33), 
Length of domains: 1261
Time: pickout 0.0408    decision 0.0976    set_bounds 0.1328    solve 0.3208    add 0.0076    
Accumulated time: pickout 0.8728    decision 1.8611    set_bounds 2.6314    solve 6.6422    add 2.4137    
Current (lb-rhs): -0.021737396717071533
18514 domains visited
Cumulative time: 20.371431827545166

BaB round 22
batch: 1261
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 533] [/input-8, 1861] [/input-8, 533] [/input-8, 533] [/input-8, 1910] [/input-8, 1910] [/input-8, 1861] [/input-8, 571] [/input-8, 1861] [/input-8, 1910] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6336724758148193, worst -0.019323289394378662
10 lb beta sum: 0.6397748589515686, worst -0.019262254238128662
Time: prepare 0.1232    bound 0.2124    transfer 0.0077    finalize 0.1792    func 0.5400    
Accumulated time: func 7.2209    prepare 1.3510    bound 4.8291    transfer 0.2013    finalize 0.4028    
all_split False
======================Cut inference begins======================
max lb tensor(0.01490915) min lb tensor(-0.01921868)
Number of Verified Splits: 815 of 2522
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 28
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.26660680770874023 
BICCOS Cumulative time: 5.700468063354492
Preprocessing time: 0.09035849571228027 Inference time: 0.170304536819458 Add cuts time: 0.005024433135986328 Cut analysis time: 0.000919342041015625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01922 (34), -0.01888 (34), -0.01835 (34), -0.01831 (34), -0.01822 (34), -0.01801 (34), -0.01768 (34), -0.01761 (34), -0.01747 (34), -0.01735 (34), -0.01732 (34), -0.01707 (34), -0.01691 (34), -0.01689 (34), -0.01681 (34), -0.01677 (34), -0.01675 (34), -0.01654 (34), -0.01652 (34), -0.01648 (34), 
Length of domains: 1707
Time: pickout 0.0261    decision 0.0844    set_bounds 0.1181    solve 0.5415    add 0.1043    
Accumulated time: pickout 0.8989    decision 1.9455    set_bounds 2.7495    solve 7.1837    add 2.5180    
Current (lb-rhs): -0.01921868324279785
20221 domains visited
Cumulative time: 21.536346912384033

BaB round 23
batch: 1707
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6181768774986267, worst -0.017211467027664185
10 lb beta sum: 0.6181768774986267, worst -0.017149299383163452
Time: prepare 0.1696    bound 0.2579    transfer 0.0252    finalize 0.0182    func 0.4946    
Accumulated time: func 7.7155    prepare 1.5209    bound 5.0870    transfer 0.2265    finalize 0.4210    
all_split False
======================Cut inference begins======================
max lb tensor(0.00936747) min lb tensor(-0.01711166)
Number of Verified Splits: 1983 of 3414
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 29
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.7498083114624023 
BICCOS Cumulative time: 6.4502763748168945
Preprocessing time: 0.11492133140563965 Inference time: 0.6205379962921143 Add cuts time: 0.013379335403442383 Cut analysis time: 0.0009696483612060547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01711 (35), -0.01682 (35), -0.01624 (35), -0.01624 (35), -0.01603 (35), -0.01594 (35), -0.01556 (35), -0.01554 (35), -0.01540 (35), -0.01517 (35), -0.01516 (35), -0.01499 (35), -0.01497 (35), -0.01486 (35), -0.01480 (35), -0.01471 (35), -0.01467 (35), -0.01465 (35), -0.01448 (35), -0.01446 (35), 
Length of domains: 1431
Time: pickout 0.1052    decision 0.1150    set_bounds 0.1676    solve 0.4963    add 0.0958    
Accumulated time: pickout 1.0041    decision 2.0606    set_bounds 2.9171    solve 7.6800    add 2.6138    
Current (lb-rhs): -0.017111659049987793
21652 domains visited
Cumulative time: 23.30934476852417

BaB round 24
batch: 1431
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1812] [/input-8, 1812] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014953285455703735
10 lb beta sum: 0.2853816747665405, worst -0.014844030141830444
Time: prepare 0.0647    bound 0.2295    transfer 0.0211    finalize 0.0174    func 0.3525    
Accumulated time: func 8.0680    prepare 1.5859    bound 5.3165    transfer 0.2476    finalize 0.4385    
all_split False
======================Cut inference begins======================
max lb tensor(0.00836912) min lb tensor(-0.01482254)
Number of Verified Splits: 1227 of 2862
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 30
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.3746955394744873 
BICCOS Cumulative time: 6.824971914291382
Preprocessing time: 0.09741783142089844 Inference time: 0.2691164016723633 Add cuts time: 0.00730586051940918 Cut analysis time: 0.0008554458618164062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01482 (36), -0.01453 (36), -0.01405 (36), -0.01400 (36), -0.01374 (36), -0.01372 (36), -0.01331 (36), -0.01327 (36), -0.01326 (36), -0.01296 (36), -0.01290 (36), -0.01274 (36), -0.01265 (36), -0.01263 (36), -0.01257 (36), -0.01251 (36), -0.01244 (36), -0.01233 (36), -0.01220 (36), -0.01219 (36), 
Length of domains: 1635
Time: pickout 0.0462    decision 0.0973    set_bounds 0.1415    solve 0.3540    add 0.0206    
Accumulated time: pickout 1.0503    decision 2.1578    set_bounds 3.0586    solve 8.0340    add 2.6344    
Current (lb-rhs): -0.014822542667388916
23287 domains visited
Cumulative time: 24.36547350883484

BaB round 25
batch: 1635
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.012666374444961548
10 lb beta sum: 0.21890895068645477, worst -0.012615323066711426
Time: prepare 0.2837    bound 0.2568    transfer 0.0045    finalize 0.0158    func 0.5835    
Accumulated time: func 8.6514    prepare 1.8699    bound 5.5733    transfer 0.2522    finalize 0.4543    
all_split False
======================Cut inference begins======================
max lb tensor(0.23581961) min lb tensor(-0.01259613)
Number of Verified Splits: 1939 of 3270
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 31
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.5214712619781494 
BICCOS Cumulative time: 7.346443176269531
Preprocessing time: 0.10324621200561523 Inference time: 0.40952372550964355 Add cuts time: 0.007785797119140625 Cut analysis time: 0.00091552734375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01260 (37), -0.01182 (37), -0.01175 (37), -0.01131 (37), -0.01104 (37), -0.01081 (37), -0.01053 (37), -0.01050 (37), -0.01047 (37), -0.01043 (37), -0.01037 (37), -0.01029 (37), -0.01019 (37), -0.00999 (37), -0.00998 (37), -0.00996 (37), -0.00996 (37), -0.00995 (37), -0.00983 (37), -0.00977 (37), 
Length of domains: 1331
Time: pickout 0.0359    decision 0.1076    set_bounds 0.1539    solve 0.5844    add 0.1270    
Accumulated time: pickout 1.0862    decision 2.2655    set_bounds 3.2125    solve 8.6184    add 2.7613    
Current (lb-rhs): -0.01259613037109375
24618 domains visited
Cumulative time: 25.920406579971313

BaB round 26
batch: 1331
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.010215014219284058
10 lb beta sum: 0.1627677083015442, worst -0.010142803192138672
Time: prepare 0.0538    bound 0.2125    transfer 0.0044    finalize 0.0131    func 0.3013    
Accumulated time: func 8.9527    prepare 1.9239    bound 5.7858    transfer 0.2565    finalize 0.4674    
all_split False
======================Cut inference begins======================
max lb tensor(0.23897028) min lb tensor(-0.01012474)
Number of Verified Splits: 2087 of 2662
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 39.
#cuts 1-3: 34
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.5332989692687988 
BICCOS Cumulative time: 7.87974214553833
Preprocessing time: 0.08405542373657227 Inference time: 0.4418637752532959 Add cuts time: 0.006501674652099609 Cut analysis time: 0.0008780956268310547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01012 (38), -0.00934 (38), -0.00927 (38), -0.00887 (38), -0.00856 (38), -0.00833 (38), -0.00808 (38), -0.00803 (38), -0.00802 (38), -0.00802 (38), -0.00787 (38), -0.00781 (38), -0.00772 (38), -0.00751 (38), -0.00748 (38), -0.00747 (38), -0.00742 (38), -0.00734 (38), -0.00730 (38), -0.00729 (38), 
Length of domains: 575
Time: pickout 0.0615    decision 0.0837    set_bounds 0.1178    solve 0.3024    add 0.0027    
Accumulated time: pickout 1.1478    decision 2.3492    set_bounds 3.3303    solve 8.9209    add 2.7640    
Current (lb-rhs): -0.010124742984771729
25193 domains visited
Cumulative time: 27.041588306427002

BaB round 27
batch: 575
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1350] [/input-8, 1350] [/input-8, 1902] [/input-8, 1350] [/input-8, 1350] [/input-8, 1350] [/input-8, 1350] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0067206621170043945
10 lb beta sum: 0.13331136107444763, worst -0.006695091724395752
Time: prepare 0.0238    bound 0.1424    transfer 0.0026    finalize 0.1413    func 0.3178    
Accumulated time: func 9.2705    prepare 1.9480    bound 5.9282    transfer 0.2591    finalize 0.6087    
all_split False
======================Cut inference begins======================
max lb tensor(0.47448969) min lb tensor(-0.00667983)
Number of Verified Splits: 1047 of 1150
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 35
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.2622690200805664 
BICCOS Cumulative time: 8.142011165618896
Preprocessing time: 0.03773164749145508 Inference time: 0.22085165977478027 Add cuts time: 0.0027968883514404297 Cut analysis time: 0.000888824462890625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00668 (39), -0.00589 (39), -0.00582 (39), -0.00549 (39), -0.00511 (39), -0.00470 (39), -0.00464 (39), -0.00458 (39), -0.00457 (39), -0.00437 (39), -0.00401 (39), -0.00392 (39), -0.00387 (39), -0.00384 (39), -0.00377 (39), -0.00372 (39), -0.00361 (39), -0.00352 (39), -0.00338 (39), -0.00325 (39), 
Length of domains: 103
Time: pickout 0.0134    decision 0.0433    set_bounds 0.0496    solve 0.3181    add 0.0016    
Accumulated time: pickout 1.1612    decision 2.3924    set_bounds 3.3799    solve 9.2389    add 2.7657    
Current (lb-rhs): -0.006679832935333252
25296 domains visited
Cumulative time: 27.73671269416809

BaB round 28
batch: 103
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.005079030990600586
10 lb beta sum: 0.09865383058786392, worst -0.005054384469985962
Time: prepare 0.0045    bound 0.1367    transfer 0.0006    finalize 0.0010    func 0.1443    
Accumulated time: func 9.4148    prepare 1.9527    bound 6.0649    transfer 0.2597    finalize 0.6097    
all_split False
======================Cut inference begins======================
max lb tensor(0.23860748) min lb tensor(-0.00503567)
Number of Verified Splits: 167 of 206
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 35
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.04343247413635254 
BICCOS Cumulative time: 8.185443639755249
Preprocessing time: 0.006469011306762695 Inference time: 0.03497767448425293 Add cuts time: 0.0012156963348388672 Cut analysis time: 0.0007700920104980469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00504 (40), -0.00426 (40), -0.00415 (40), -0.00390 (40), -0.00344 (40), -0.00312 (40), -0.00302 (40), -0.00292 (40), -0.00263 (40), -0.00236 (40), -0.00230 (40), -0.00221 (40), -0.00220 (40), -0.00179 (40), -0.00179 (40), -0.00177 (40), -0.00161 (40), -0.00154 (40), -0.00151 (40), -0.00146 (40), 
Length of domains: 39
Time: pickout 0.0045    decision 0.0178    set_bounds 0.0089    solve 0.1443    add 0.0010    
Accumulated time: pickout 1.1657    decision 2.4102    set_bounds 3.3888    solve 9.3832    add 2.7667    
Current (lb-rhs): -0.005035668611526489
25335 domains visited
Cumulative time: 27.95943021774292

BaB round 29
batch: 39
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] 
split level 1: [/input-8, 1902] [/input-8, 1019] [/input-8, 1902] [/input-8, 1902] [/input-8, 1019] [/input-8, 1019] [/input-8, 1019] [/input-8, 1019] [/input-8, 1019] [/input-8, 1019] 
split level 2: [/input-8, 1019] [/input-8, 1902] [/input-8, 1019] [/input-8, 1019] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] 
cut re-enabled after branching node selection
0 lb beta sum: 0.30201050639152527, worst 0.0027018189430236816

all verified at 0th iter
Time: prepare 0.0134    bound 0.0074    transfer 0.0013    finalize 0.0014    func 0.0256    
Accumulated time: func 9.4404    prepare 1.9663    bound 6.0723    transfer 0.2610    finalize 0.6111    
all_split False
======================Cut inference begins======================
max lb tensor(0.24993192) min lb tensor(0.00270182)
Number of Verified Splits: 312 of 312
No cut inferred: All or none verified.
Total number of valid cuts: 40.
#cuts 1-3: 35
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.008937597274780273 
BICCOS Cumulative time: 8.19438123703003
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0018    decision 0.0159    set_bounds 0.0163    solve 0.0256    add 0.0001    
Accumulated time: pickout 1.1675    decision 2.4262    set_bounds 3.4051    solve 9.4089    add 2.7668    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
25335 domains visited
Cumulative time: 28.029433488845825


Properties batch 3, size 1
Remaining timeout: 170.3144702911377
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 170.31437873840332
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 170.31435585021973
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 170.31433582305908
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 170.31431555747986
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 170.31421399116516
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 29.6858 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 104, vnnlib ID: 104 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.93376207, -6.71706390, -2.45791340, -1.94786179, -3.43069839,
         -0.01497591, -4.77984476, -2.99772120, -6.68260002, -5.67084932]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [775]; unstable size 775; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 265, 1, 775] with unstable size 264 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 775] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 775] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [264]; unstable size 264; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 264] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 264] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.31793880, 4.18651628, 1.24683094, 1.51535201, 1.97004580, 3.30764055,
         1.65014291, 4.22078037, 3.37990904]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0628 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 105, vnnlib ID: 105 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.58880043, -10.13493252,  -4.93114376,  -6.19413185,  -6.14457750,
          -6.40420198,  -6.35660315,  -6.51874971,  -8.22681046,  -9.13034344]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [623]; unstable size 623; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 253, 1, 623] with unstable size 252 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 623] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 623] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [252]; unstable size 252; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 252] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 252] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.65812528,  1.61883998, -2.82501435, -1.14642072, -1.45474672,
         -0.98869795, -1.28088367, -0.29947913,  0.88783240]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.58880043, -10.13493252,  -4.93114376,  -6.19413185,  -6.14457750,
          -6.40420198,  -6.35660315,  -6.51874971,  -8.22681046,  -9.13034344]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.58880091, -10.13493347,  -4.93114376,  -6.19413280,  -6.14457798,
           -6.40420198,  -6.35660315,  -6.51874971,  -8.22680950,  -9.13034534],
         [ -6.58880091, -10.13493347,  -4.93114376,  -6.19413280,  -6.14457798,
           -6.40420198,  -6.35660315,  -6.51874971,  -8.22680950,  -9.13034534]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.07005119, -1.58760595, -0.32461691, -0.37417173, -0.11454773,
          -0.16214657,  1.70805979]]], device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         ...,


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0776 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 106, vnnlib ID: 106 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.73701859,  -4.31693745,  -8.52546501,  -9.33157349,  -8.00366402,
         -10.34507942,  -9.10334110,  -9.12430954,  -4.68865204,  -6.33631182]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [549]; unstable size 549; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 168, 1, 549] with unstable size 167 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 549] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 549] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [167]; unstable size 167; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 167] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 167] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.18721104,  2.73353958,  3.30611420,  2.10224628,  4.03056717,
          3.46064472,  2.85602856, -0.83577108,  1.03666818]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.73701859,  -4.31693745,  -8.52546501,  -9.33157349,  -8.00366402,
         -10.34507942,  -9.10334110,  -9.12430954,  -4.68865204,  -6.33631182]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.89133787,  -4.93664169,  -8.66371727,  -9.56306934,  -8.16865921,
          -10.62470722,  -9.37549400,  -9.37268066,  -4.54248905,  -6.85806894]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.39415264]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0057 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0736 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 107, vnnlib ID: 107 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.25630188, -18.41019440, -14.19659901, -16.87197685, -15.07205296,
         -17.43015480, -17.99939728, -16.44446564, -13.78191662, -17.80060196]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [636]; unstable size 636; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 232, 1, 636] with unstable size 231 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 636] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 636] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [231]; unstable size 231; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 231] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 231] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.34137440,  0.70376420,  3.10112047,  1.09246945,  3.41379404,
          3.82853651,  1.99575400, -0.16639990,  3.65535474]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.25630188, -18.41019440, -14.19659901, -16.87197685, -15.07205296,
         -17.43015480, -17.99939728, -16.44446564, -13.78191662, -17.80060196]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.26it/s]100%|██████████| 1/1 [00:00<00:00,  9.25it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.98635578, -17.72829819, -13.82835865, -16.31543732, -14.73994732,
          -16.84854698, -17.46200371, -16.24205780, -12.71058083, -17.06022263]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.72422504]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1106 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 22.566566467285156
alpha/beta optimization time: 1.187936782836914
initial alpha-crown bounds: tensor([[ 4.41341877,  0.78251934,  3.14730668,  1.16422820,  3.46807384,
          3.87461972,  2.07521415, -0.08283985,  3.72402573]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.08283984661102295
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6325602531433
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.63252305984497
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.63250017166138
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.63248014450073
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.63246154785156
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.63244247436523
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.63242435455322
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.63240480422974
Verifying property 7 with 1 instances.
##### Instance 107 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.08283985]], device='cuda:0') need to verify.
Model prediction is: tensor([-12.25630188, -18.41019440, -14.19659901, -16.87197685, -15.07205296,
        -17.43015480, -17.99939728, -16.44446564, -13.78191662, -17.80060196],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.08283985]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 636
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 225
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 879
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001125335693359375
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08283740282058716
10 lb beta sum: 0.0, worst -0.08286356925964355
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0523    transfer 0.0001    finalize 0.0001    func 0.0527    
Accumulated time: func 0.0527    prepare 0.0002    bound 0.0523    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 44] 
split level 1: [/input-12, 17] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 78] 
split level 4: [/input-12, 9] 
split level 5: [/input-8, 1516] 
split level 6: [/input-8, 1388] 
split level 7: [/input-8, 1523] 
split level 8: [/input-12, 99] 
split level 9: [/input-8, 1323] 
split level 10: [/input-8, 1386] 
split level 11: [/input-8, 1396] 
split level 12: [/input-8, 1076] 
split level 13: [/input-8, 618] 
split level 14: [/input-8, 1069] 
split level 15: [/input-8, 1077] 
split level 16: [/input-8, 1342] 
split level 17: [/input-8, 1395] 
split level 18: [/input-8, 1339] 
split level 19: [/input-8, 1390] 
split level 20: [/input-12, 40] 
split level 21: [/input-8, 1084] 
split level 22: [/input-8, 294] 
split level 23: [/input-8, 666] 
split level 24: [/input-8, 421] 
split level 25: [/input-8, 1070] 
split level 26: [/input-8, 673] 
split level 27: [/input-8, 571] 
split level 28: [/input-8, 1340] 
split level 29: [/input, 1659] 
split level 30: [/input-8, 1443] 
split level 31: [/input-8, 657] 
split level 32: [/input-8, 1341] 
split level 33: [/input-8, 1133] 
split level 34: [/input-8, 687] 
split level 35: [/input-8, 403] 
split level 36: [/input, 1660] 
split level 37: [/input-12, 32] 
split level 38: [/input-8, 1514] 
split level 39: [/input-8, 797] 
split level 40: [/input-8, 484] 
split level 41: [/input, 1625] 
split level 42: [/input-8, 1905] 
split level 43: [/input-8, 402] 
split level 44: [/input-8, 295] 
split level 45: [/input-8, 796] 
split level 46: [/input, 4066] 
split level 47: [/input-8, 278] 
split level 48: [/input, 3399] 
split level 49: [/input-8, 1085] 
split level 50: [/input-8, 846] 
split level 51: [/input, 199] 
split level 52: [/input-8, 803] 
split level 53: [/input-8, 1134] 
split level 54: [/input-8, 1573] 
split level 55: [/input, 168] 
split level 56: [/input-8, 871] 
split level 57: [/input-8, 1138] 
split level 58: [/input-8, 924] 
split level 59: [/input, 447] 
split level 60: [/input, 1595] 
split level 61: [/input-8, 486] 
split level 62: [/input-8, 1436] 
split level 63: [/input-8, 932] 
split level 64: [/input-8, 1402] 
split level 65: [/input-8, 1056] 
split level 66: [/input-8, 1264] 
split level 67: [/input-8, 1136] 
split level 68: [/input-8, 1130] 
split level 69: [/input-8, 1513] 
split level 70: [/input-8, 404] 
split level 71: [/input-8, 1334] 
split level 72: [/input-8, 993] 
split level 73: [/input, 462] 
split level 74: [/input, 1624] 
split level 75: [/input-8, 483] 
split level 76: [/input, 1365] 
split level 77: [/input, 190] 
split level 78: [/input, 2136] 
split level 79: [/input-8, 521] 
split level 80: [/input-8, 97] 
split level 81: [/input-8, 1110] 
split level 82: [/input, 4069] 
split level 83: [/input, 407] 
split level 84: [/input-8, 77] 
split level 85: [/input, 226] 
split level 86: [/input-8, 1446] 
split level 87: [/input, 4049] 
split level 88: [/input-8, 1307] 
split level 89: [/input, 2135] 
split level 90: [/input, 2244] 
split level 91: [/input, 1335] 
split level 92: [/input, 459] 
split level 93: [/input, 4035] 
split level 94: [/input-8, 795] 
split level 95: [/input, 1629] 
split level 96: [/input-8, 1378] 
split level 97: [/input, 3157] 
split level 98: [/input, 2152] 
split level 99: [/input, 4050] 
split level 100: [/input, 2753] 
split level 101: [/input, 1643] 
split level 102: [/input, 4056] 
split level 103: [/input, 3492] 
split level 104: [/input, 4067] 
split level 105: [/input, 2214] 
split level 106: [/input-8, 1485] 
split level 107: [/input, 225] 
split level 108: [/input-8, 1141] 
split level 109: [/input, 3753] 
split level 110: [/input-8, 2025] 
split level 111: [/input, 2187] 
split level 112: [/input, 3429] 
split level 113: [/input-8, 1615] 
split level 114: [/input-8, 685] 
split level 115: [/input, 358] 
split level 116: [/input, 488] 
split level 117: [/input-8, 2034] 
split level 118: [/input, 3277] 
split level 119: [/input-8, 1040] 
split level 120: [/input-8, 1438] 
split level 121: [/input, 3140] 
split level 122: [/input, 3781] 
split level 123: [/input, 1430] 
split level 124: [/input-8, 81] 
split level 125: [/input-8, 461] 
split level 126: [/input, 2360] 
split level 127: [/input, 3142] 
split level 128: [/input, 2139] 
split level 129: [/input, 242] 
split level 130: [/input, 492] 
split level 131: [/input, 2198] 
split level 132: [/input, 457] 
split level 133: [/input, 458] 
split level 134: [/input-8, 2033] 
split level 135: [/input, 2119] 
split level 136: [/input, 296] 
split level 137: [/input, 2373] 
split level 138: [/input-8, 302] 
split level 139: [/input, 3125] 
split level 140: [/input-8, 975] 
split level 141: [/input, 3709] 
split level 142: [/input-8, 642] 
split level 143: [/input-8, 1472] 
split level 144: [/input-8, 2037] 
split level 145: [/input, 3797] 
split level 146: [/input, 3737] 
split level 147: [/input, 3960] 
split level 148: [/input, 3445] 
split level 149: [/input-8, 1473] 
split level 150: [/input-8, 423] 
split level 151: [/input-8, 1346] 
split level 152: [/input-8, 1021] 
split level 153: [/input, 3263] 
split level 154: [/input, 3126] 
split level 155: [/input, 3292] 
split level 156: [/input, 3231] 
split level 157: [/input, 280] 
split level 158: [/input, 312] 
split level 159: [/input-8, 839] 
split level 160: [/input, 3411] 
split level 161: [/input, 1446] 
split level 162: [/input, 279] 
split level 163: [/input, 2256] 
split level 164: [/input, 2548] 
split level 165: [/input, 227] 
split level 166: [/input-8, 1818] 
split level 167: [/input, 2513] 
split level 168: [/input, 1439] 
split level 169: [/input, 3187] 
split level 170: [/input, 2165] 
split level 171: [/input, 2228] 
split level 172: [/input, 1966] 
split level 173: [/input, 876] 
split level 174: [/input, 136] 
split level 175: [/input-8, 2032] 
split level 176: [/input, 1455] 
split level 177: [/input-8, 1240] 
split level 178: [/input-8, 864] 
split level 179: [/input, 2794] 
split level 180: [/input, 2530] 
split level 181: [/input, 1160] 
split level 182: [/input, 4076] 
split level 183: [/input, 3870] 
split level 184: [/input, 1437] 
split level 185: [/input, 293] 
split level 186: [/input, 1469] 
split level 187: [/input, 3260] 
split level 188: [/input-8, 2038] 
split level 189: [/input, 2181] 
split level 190: [/input, 3307] 
split level 191: [/input, 2532] 
split level 192: [/input, 1414] 
split level 193: [/input, 2374] 
split level 194: [/input, 2586] 
split level 195: [/input, 3813] 
split level 196: [/input, 1347] 
split level 197: [/input-8, 945] 
split level 198: [/input, 877] 
split level 199: [/input, 282] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08276888728141785
10 lb beta sum: 0.0, worst -0.08276259899139404
Time: prepare 0.0116    bound 0.0985    transfer 0.0025    finalize 0.0029    func 0.1182    
Accumulated time: func 0.1709    prepare 0.0217    bound 0.1508    transfer 0.0026    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.28787279) min lb tensor(-0.08275160)
Number of Verified Splits: 11 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01075291633605957 
BICCOS Cumulative time: 0.01075291633605957
Preprocessing time: 0.009924173355102539 Inference time: 0.0004553794860839844 Add cuts time: 0.0001704692840576172 Cut analysis time: 0.0002028942108154297
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5006    set_bounds 0.0088    solve 0.1183    add 0.0097    
Accumulated time: pickout 0.0003    decision 0.5006    set_bounds 0.0088    solve 0.1183    add 0.0097    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 44] 
split level 1: [/input-12, 17] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 78] 
split level 4: [/input-12, 9] 
split level 5: [/input-8, 1388] 
split level 6: [/input-8, 1323] 
split level 7: [/input-8, 1077] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.35871225595474243

all verified at 0th iter
Time: prepare 0.0050    bound 0.0041    transfer 0.0006    finalize 0.0014    func 0.0128    
Accumulated time: func 0.1837    prepare 0.0271    bound 0.1549    transfer 0.0032    finalize 0.0044    
all_split False
======================Cut inference begins======================
max lb tensor(1.11816514) min lb tensor(0.35871226)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.007866859436035156 
BICCOS Cumulative time: 0.018619775772094727
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.0213    set_bounds 0.0203    solve 0.0128    add 0.0001    
Accumulated time: pickout 0.0007    decision 0.5219    set_bounds 0.0291    solve 0.1311    add 0.0098    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.7925982475280762


Properties batch 8, size 1
Remaining timeout: 197.63244199752808
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.3677 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 108, vnnlib ID: 108 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.67031240,  -9.52653027,  -5.79421425,  -5.15730333,  -5.24825621,
          -5.88681936,  -4.92760229,  -6.80504274, -10.24907398,  -9.07698536]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [634]; unstable size 634; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 245, 1, 634] with unstable size 244 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 634] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 634] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [244]; unstable size 244; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 244] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 244] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.24761415,  2.93305993, -0.23562050, -0.90710044,  0.36504617,
         -1.18999708,  0.08450946,  3.42949867,  2.57326174]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.67031240,  -9.52653027,  -5.79421425,  -5.15730333,  -5.24825621,
          -5.88681936,  -4.92760229,  -6.80504274, -10.24907398,  -9.07698536]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.67031288,  -9.52653027,  -5.79421329,  -5.15730429,  -5.24825621,
           -5.88681889,  -4.92760229,  -6.80504179, -10.24907398,  -9.07698536],
         [ -7.67031288,  -9.52653027,  -5.79421329,  -5.15730429,  -5.24825621,
           -5.88681889,  -4.92760229,  -6.80504179, -10.24907398,  -9.07698536]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.63690901,  0.09095192, -0.22970200]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0906 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 109, vnnlib ID: 109 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -4.68137455, -11.11765766,  -8.01337242,  -9.71148872,  -8.79326439,
         -10.48354340, -10.25170231, -11.03672123,  -9.45322895, -10.81242466]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [555]; unstable size 555; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 118, 1, 555] with unstable size 117 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 555] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 555] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [117]; unstable size 117; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 117] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 117] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.02142048, 2.59467459, 4.01387119, 3.15092158, 4.53091192, 4.70333385,
         4.88892984, 3.85758591, 5.04689932]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0736 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 110, vnnlib ID: 110 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.59310770, -8.98699856, -1.98446643, -1.86275947, -2.02259350,
         -2.92739010,  0.91057259, -5.46356249, -8.21526527, -9.22765255]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [455]; unstable size 455; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 269, 1, 455] with unstable size 268 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 455] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 455] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [268]; unstable size 268; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 268] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 268] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.81164646, 7.72943830, 1.56485224, 1.38150644, 1.52279806, 2.12491846,
         4.28514671, 7.13579226, 8.30116081]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0734 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 111, vnnlib ID: 111 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.92330647, -14.34430218,  -7.27562428, -10.29554081,  -6.15860891,
         -10.20837307,  -9.93119907,  -8.65463638, -13.25779629, -14.20930576]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [611]; unstable size 611; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 254, 1, 611] with unstable size 253 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 611] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 611] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [253]; unstable size 253; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 253] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 253] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.99095201,  5.73210239, -0.06892401,  3.12794542,  2.97227168,
          2.38821363,  1.26657963,  4.99652910,  5.76884365]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.92330647, -14.34430218,  -7.27562428, -10.29554081,  -6.15860891,
         -10.20837307,  -9.93119907,  -8.65463638, -13.25779629, -14.20930576]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.71it/s]100%|██████████| 1/1 [00:00<00:00,  7.70it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.49070644, -14.02054882,  -6.77474308, -10.01947308,  -6.14811516,
           -9.94418907,  -9.79620838,  -8.69151878, -12.92936230, -13.88387489]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.62662792]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1332 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 9th iter
best_l after optimization: 29.920612335205078
alpha/beta optimization time: 0.15091681480407715
initial alpha-crown bounds: tensor([[3.09697342e+00, 5.84763956e+00, 1.91938877e-03, 3.17881083e+00,
         3.02511549e+00, 2.45539403e+00, 1.32388139e+00, 5.10637712e+00,
         5.88450003e+00]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 0 ; Worst class: (+ rhs) 0.001919388771057129
verified with init bound!
Result: safe-incomplete in 0.3615 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 112, vnnlib ID: 112 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.39937687, -6.31978703, -7.08044434, -6.31649590, -8.13005733,
         -7.18079948, -7.62912607, -6.36020851, -5.32509041, -4.25607824]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [646]; unstable size 646; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 646] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 646] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 646] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 171] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.06740260,  0.96642995,  1.28221989,  0.65053320,  2.26329422,
          1.44973636,  2.01239824,  0.51637983, -0.32224464]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.39937687, -6.31978703, -7.08044434, -6.31649590, -8.13005733,
         -7.18079948, -7.62912607, -6.36020851, -5.32509041, -4.25607824]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.91it/s]100%|██████████| 1/1 [00:00<00:00,  7.90it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.57936287, -6.66815186, -7.30564022, -6.68102264, -8.49092770,
          -7.56898642, -7.92801905, -6.75226736, -5.11898041, -4.89544821]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.22353220]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1294 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.232048988342285
alpha/beta optimization time: 1.32405424118042
initial alpha-crown bounds: tensor([[ 1.09233940,  1.00209785,  1.32075071,  0.68928814,  2.30610085,
          1.48740554,  2.04873061,  0.55730462, -0.27196884]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.2719688415527344
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.47501802444458
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.47497940063477
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.4749562740326
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.47493481636047
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.47491574287415
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.47489714622498
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.47487831115723
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.4748570919037
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 198.4748387336731
Verifying property 8 with 1 instances.
##### Instance 112 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.27196884]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.39937687, -6.31978703, -7.08044434, -6.31649590, -8.13005733,
        -7.18079948, -7.62912607, -6.36020851, -5.32509041, -4.25607824],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.27196884]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 646
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 166
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 827
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010132789611816406
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.27196693420410156
10 lb beta sum: 0.0, worst -0.2719736099243164
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0547    transfer 0.0001    finalize 0.0001    func 0.0552    
Accumulated time: func 0.0552    prepare 0.0002    bound 0.0547    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 78] 
split level 3: [/input-12, 1] 
split level 4: [/input-12, 51] 
split level 5: [/input-8, 1890] 
split level 6: [/input-12, 55] 
split level 7: [/input-8, 1121] 
split level 8: [/input-8, 477] 
split level 9: [/input-8, 1124] 
split level 10: [/input-8, 1888] 
split level 11: [/input-8, 1331] 
split level 12: [/input-8, 1132] 
split level 13: [/input-8, 1840] 
split level 14: [/input-8, 1131] 
split level 15: [/input-8, 1381] 
split level 16: [/input-8, 1898] 
split level 17: [/input-8, 1506] 
split level 18: [/input-8, 802] 
split level 19: [/input-8, 1069] 
split level 20: [/input-8, 1113] 
split level 21: [/input-8, 932] 
split level 22: [/input, 1787] 
split level 23: [/input, 1518] 
split level 24: [/input-12, 54] 
split level 25: [/input, 2676] 
split level 26: [/input, 1770] 
split level 27: [/input-8, 1067] 
split level 28: [/input-8, 1049] 
split level 29: [/input-8, 1062] 
split level 30: [/input, 762] 
split level 31: [/input-8, 413] 
split level 32: [/input, 3581] 
split level 33: [/input, 1768] 
split level 34: [/input, 3383] 
split level 35: [/input, 1517] 
split level 36: [/input-8, 1035] 
split level 37: [/input-8, 942] 
split level 38: [/input, 1637] 
split level 39: [/input-8, 1894] 
split level 40: [/input-8, 1332] 
split level 41: [/input-8, 1509] 
split level 42: [/input-8, 1382] 
split level 43: [/input, 2168] 
split level 44: [/input, 3566] 
split level 45: [/input-8, 808] 
split level 46: [/input, 3580] 
split level 47: [/input-8, 623] 
split level 48: [/input, 2420] 
split level 49: [/input, 2269] 
split level 50: [/input, 2362] 
split level 51: [/input-8, 769] 
split level 52: [/input-8, 1897] 
split level 53: [/input-8, 1906] 
split level 54: [/input-8, 1857] 
split level 55: [/input, 2283] 
split level 56: [/input, 2617] 
split level 57: [/input, 4075] 
split level 58: [/input-8, 1465] 
split level 59: [/input, 1368] 
split level 60: [/input-8, 2041] 
split level 61: [/input, 1769] 
split level 62: [/input-8, 409] 
split level 63: [/input, 3914] 
split level 64: [/input-8, 81] 
split level 65: [/input-8, 2033] 
split level 66: [/input, 2683] 
split level 67: [/input, 3550] 
split level 68: [/input-8, 89] 
split level 69: [/input, 1753] 
split level 70: [/input, 2954] 
split level 71: [/input, 3043] 
split level 72: [/input-8, 1581] 
split level 73: [/input, 2798] 
split level 74: [/input-8, 1482] 
split level 75: [/input, 1519] 
split level 76: [/input-8, 1080] 
split level 77: [/input, 2884] 
split level 78: [/input, 3942] 
split level 79: [/input-8, 2046] 
split level 80: [/input, 2392] 
split level 81: [/input-8, 1441] 
split level 82: [/input-8, 893] 
split level 83: [/input-8, 96] 
split level 84: [/input, 1534] 
split level 85: [/input, 1987] 
split level 86: [/input-8, 1498] 
split level 87: [/input, 3929] 
split level 88: [/input, 2691] 
split level 89: [/input-8, 1910] 
split level 90: [/input, 3945] 
split level 91: [/input, 2393] 
split level 92: [/input-8, 72] 
split level 93: [/input-8, 1743] 
split level 94: [/input-8, 1440] 
split level 95: [/input, 2712] 
split level 96: [/input, 1949] 
split level 97: [/input, 2039] 
split level 98: [/input, 1622] 
split level 99: [/input, 1980] 
split level 100: [/input, 2005] 
split level 101: [/input, 581] 
split level 102: [/input, 3578] 
split level 103: [/input, 1503] 
split level 104: [/input, 3415] 
split level 105: [/input, 3928] 
split level 106: [/input, 1651] 
split level 107: [/input, 2359] 
split level 108: [/input, 1995] 
split level 109: [/input, 2949] 
split level 110: [/input-8, 1751] 
split level 111: [/input, 2932] 
split level 112: [/input, 2377] 
split level 113: [/input, 3907] 
split level 114: [/input, 3722] 
split level 115: [/input, 3796] 
split level 116: [/input, 1948] 
split level 117: [/input, 310] 
split level 118: [/input, 3779] 
split level 119: [/input-8, 2031] 
split level 120: [/input, 1964] 
split level 121: [/input, 1212] 
split level 122: [/input, 2011] 
split level 123: [/input, 4078] 
split level 124: [/input, 1685] 
split level 125: [/input, 1752] 
split level 126: [/input, 1988] 
split level 127: [/input, 2407] 
split level 128: [/input-8, 789] 
split level 129: [/input, 2826] 
split level 130: [/input-8, 2035] 
split level 131: [/input, 2388] 
split level 132: [/input, 3978] 
split level 133: [/input, 3718] 
split level 134: [/input, 1767] 
split level 135: [/input, 3310] 
split level 136: [/input, 1791] 
split level 137: [/input, 2542] 
split level 138: [/input, 3927] 
split level 139: [/input, 628] 
split level 140: [/input-8, 1371] 
split level 141: [/input-8, 2037] 
split level 142: [/input-8, 2019] 
split level 143: [/input, 2711] 
split level 144: [/input, 2994] 
split level 145: [/input, 3110] 
split level 146: [/input-8, 936] 
split level 147: [/input, 1592] 
split level 148: [/input-8, 2034] 
split level 149: [/input, 2024] 
split level 150: [/input, 2550] 
split level 151: [/input, 1502] 
split level 152: [/input, 2008] 
split level 153: [/input, 3180] 
split level 154: [/input, 3979] 
split level 155: [/input, 2900] 
split level 156: [/input, 3997] 
split level 157: [/input, 3730] 
split level 158: [/input, 3996] 
split level 159: [/input, 3027] 
split level 160: [/input-8, 2036] 
split level 161: [/input, 4012] 
split level 162: [/input, 2004] 
split level 163: [/input, 2023] 
split level 164: [/input, 2006] 
split level 165: [/input, 3398] 
split level 166: [/input, 2916] 
split level 167: [/input-8, 1488] 
split level 168: [/input, 2868] 
split level 169: [/input, 231] 
split level 170: [/input, 3128] 
split level 171: [/input, 2184] 
split level 172: [/input-8, 1974] 
split level 173: [/input, 3143] 
split level 174: [/input-8, 1032] 
split level 175: [/input, 3159] 
split level 176: [/input, 2007] 
split level 177: [/input, 2380] 
split level 178: [/input, 1400] 
split level 179: [/input, 3111] 
split level 180: [/input, 1873] 
split level 181: [/input, 2021] 
split level 182: [/input, 1383] 
split level 183: [/input, 3890] 
split level 184: [/input, 2022] 
split level 185: [/input, 3926] 
split level 186: [/input-8, 1618] 
split level 187: [/input, 3723] 
split level 188: [/input-8, 1449] 
split level 189: [/input, 2010] 
split level 190: [/input, 3156] 
split level 191: [/input, 1287] 
split level 192: [/input-8, 157] 
split level 193: [/input-8, 1501] 
split level 194: [/input, 2137] 
split level 195: [/input, 2918] 
split level 196: [/input, 2858] 
split level 197: [/input-8, 1416] 
split level 198: [/input, 618] 
split level 199: [/input, 1260] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.27196812629699707
10 lb beta sum: 0.0, worst -0.2719745635986328
Time: prepare 0.0118    bound 0.1023    transfer 0.0013    finalize 0.0037    func 0.1218    
Accumulated time: func 0.1770    prepare 0.0218    bound 0.1571    transfer 0.0014    finalize 0.0038    
all_split False
======================Cut inference begins======================
max lb tensor(0.31710100) min lb tensor(-0.27196598)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.011675119400024414 
BICCOS Cumulative time: 0.011675119400024414
Preprocessing time: 0.010590791702270508 Inference time: 0.0002849102020263672 Add cuts time: 0.00012421607971191406 Cut analysis time: 0.000675201416015625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26063 (1), -0.26061 (1), -0.26035 (1), -0.26031 (1), -0.26028 (1), -0.25989 (1), -0.25972 (1), -0.25968 (1), -0.25931 (1), -0.25924 (1), -0.25869 (1), -0.25819 (1), -0.25739 (1), -0.25723 (1), -0.25698 (1), -0.25687 (1), -0.25671 (1), -0.25577 (1), -0.25550 (1), -0.25478 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5058    set_bounds 0.0098    solve 0.1219    add 0.2015    
Accumulated time: pickout 0.0004    decision 0.5058    set_bounds 0.0098    solve 0.1219    add 0.2015    
Current (lb-rhs): -0.2606344223022461
50 domains visited
Cumulative time: 0.9329555034637451

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] [/input-12, 68] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] 
split level 1: [/input-12, 68] [/input-12, 1] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] 
split level 3: [/input-12, 1] [/input-8, 1890] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24576401710510254
10 lb beta sum: 1.0268969535827637, worst -0.03684055805206299
Time: prepare 0.0079    bound 0.1184    transfer 0.0008    finalize 0.0027    func 0.1325    
Accumulated time: func 0.3094    prepare 0.0304    bound 0.2755    transfer 0.0022    finalize 0.0065    
all_split False
======================Cut inference begins======================
max lb tensor(0.53197312) min lb tensor(-0.03660518)
Number of Verified Splits: 241 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.02550220489501953 
BICCOS Cumulative time: 0.037177324295043945
Preprocessing time: 0.012545347213745117 Inference time: 0.008808374404907227 Add cuts time: 0.003721475601196289 Cut analysis time: 0.00042700767517089844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01761 (2), -0.01758 (2), -0.01756 (2), -0.01755 (2), -0.01751 (2), -0.01738 (2), -0.01686 (2), -0.01683 (2), -0.01681 (2), -0.01671 (2), -0.01540 (2), -0.01538 (2), -0.01537 (2), -0.01519 (2), -0.01439 (2), -0.01439 (2), -0.01437 (2), -0.01430 (2), -0.01429 (2), -0.01427 (2), 
Length of domains: 50
Time: pickout 0.0089    decision 0.0239    set_bounds 0.0123    solve 0.1326    add 0.2269    
Accumulated time: pickout 0.0092    decision 0.5297    set_bounds 0.0221    solve 0.2544    add 0.4284    
Current (lb-rhs): -0.01761317253112793
100 domains visited
Cumulative time: 1.370129108428955

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 68] [/input-12, 68] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] 
split level 1: [/input-12, 1] [/input-12, 68] [/input-12, 78] [/input-12, 68] [/input-12, 1] [/input-12, 1] [/input-12, 78] [/input-12, 68] [/input-12, 68] [/input-12, 78] 
split level 2: [/input-12, 78] [/input-12, 78] [/input-12, 1] [/input-12, 1] [/input-12, 78] [/input-12, 78] [/input-12, 1] [/input-12, 78] [/input-12, 1] [/input-12, 1] 
split level 3: [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22659969329833984

all verified at 8th iter
Time: prepare 0.0082    bound 0.0615    transfer 0.0008    finalize 0.0024    func 0.0755    
Accumulated time: func 0.3850    prepare 0.0389    bound 0.3370    transfer 0.0031    finalize 0.0088    
all_split False
======================Cut inference begins======================
max lb tensor(0.42608380) min lb tensor(0.00041413)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 67.
#cuts 1-3: 67
#cuts >= 20: 0
BICCOS time: 0.03709578514099121 
BICCOS Cumulative time: 0.07427310943603516
Preprocessing time: 0.011731147766113281 Inference time: 0.014891386032104492 Add cuts time: 0.009130477905273438 Cut analysis time: 0.0013427734375
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0079    decision 0.0194    set_bounds 0.0160    solve 0.0756    add 0.0231    
Accumulated time: pickout 0.0171    decision 0.5490    set_bounds 0.0381    solve 0.3301    add 0.4516    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 78] 
split level 3: [/input-12, 1] 
split level 4: [/input-8, 1890] 
split level 5: [/input-8, 1131] 
split level 6: [/input-8, 1898] 
split level 7: [/input-8, 932] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0003533363342285156

all verified at 2th iter
Time: prepare 0.0051    bound 0.0210    transfer 0.0007    finalize 0.0014    func 0.0299    
Accumulated time: func 0.4149    prepare 0.0444    bound 0.3580    transfer 0.0037    finalize 0.0103    
all_split False
======================Cut inference begins======================
max lb tensor(0.69019580) min lb tensor(0.00026107)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 67.
#cuts 1-3: 67
#cuts >= 20: 0
BICCOS time: 0.0070722103118896484 
BICCOS Cumulative time: 0.0813453197479248
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.0218    set_bounds 0.0206    solve 0.0299    add 0.0001    
Accumulated time: pickout 0.0175    decision 0.5709    set_bounds 0.0587    solve 0.3600    add 0.4517    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
Cumulative time: 1.6404623985290527

Result: safe in 3.3759 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 113, vnnlib ID: 113 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.78284311, -8.25498867, -3.91874337, -1.90788758, -4.97474670,
         -1.46400177, -6.09554291, -3.89886856, -8.36994171, -6.97793961]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [667]; unstable size 667; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 214, 1, 667] with unstable size 213 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 667] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 667] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [213]; unstable size 213; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 213] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 213] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.60612798,  4.23385572,  0.99936318,  2.04068375, -0.70643765,
          3.00155044,  1.31167328,  4.90406275,  3.47214890]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.78284311, -8.25498867, -3.91874337, -1.90788758, -4.97474670,
         -1.46400177, -6.09554291, -3.89886856, -8.36994171, -6.97793961]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.78284311, -8.25498867, -3.91874337, -1.90788758, -4.97474670,
          -1.46400177, -6.09554291, -3.89886856, -8.36994171, -6.97793961]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44388580]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.03650784, -1.00476182, -0.75079364,  ..., -0.68730158,
            -0.90952379, -1.62380958],
           [-0.44920623, -0.95714283, -0.67142856,  ..., -0.32222211,
            -0.65555555, -1.62380958],
           [-0.09999990, -0.92539680, -0.63968253,  ..., -0.22698402,
            -0.57619047, -1.63968253],
           ...,
           [-0.27460307, -0.29047608, -0.33809513,  ..., -0.87777776,
            -0.51269841, -0.48095238],
           [-0.30634910, -0.30634910, -0.33809513,  ..., -1.09999990,
            -0.65555555, -0.49682540],
           [-0.40158719, -0.40158719, -0.41746020,  ..., -1.29047608,
            -0.87777776, -0.62380952]],

          [[-1.62640905, -1.72302747, -1.65861523,  ..., -1.49758446,
            -1.57809973, -1.75523353],
           [-1.38486302, -1.77133656, -1.61030602,  ..., -1.35265696,
            -1.49758446, -1.75523353],
           [-1.09500802, -1.80354273, -1.62640905,  ..., -1.22383249,
            -1.40096617, -1.75523353],
           ...,
           [-1.25603855, -1.25603855, -1.28824472,  ..., -0.72463763,
            -0.43478248, -0.51529789],
           [-1.28824472, -1.25603855, -1.28824472,  ..., -0.88566822,
            -0.48309177, -0.45088565],
           [-1.33655393, -1.33655393, -1.33655393,  ..., -1.12721407,
            -0.67632848, -0.46698871]],

          [[-1.48275876, -1.52773619, -1.49775124,  ..., -1.28785622,
            -1.34782624, -1.42278874],
           [-1.15292358, -1.55772126, -1.54272878,  ..., -1.12293863,
            -1.19790113, -1.42278874],
           [-0.89805096, -1.54272878, -1.51274371,  ..., -1.06296861,
            -1.13793111, -1.43778121],
           ...,
           [-0.94302845, -0.94302845, -0.95802099,  ..., -0.61319339,
            -0.38830581, -0.52323836],
           [-0.94302845, -0.94302845, -0.94302845,  ..., -0.70314842,
            -0.34332830, -0.38830581],
           [-0.98800600, -1.00299859, -1.00299859,  ..., -0.89805096,
            -0.52323836, -0.31334329]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0933 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 114, vnnlib ID: 114 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.20003605, -18.01286888, -15.99082375, -17.43127060, -15.99804783,
         -18.05647850, -17.26184273, -18.19654465, -14.18293667, -18.52462387]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [575]; unstable size 575; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 278, 1, 575] with unstable size 277 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 575] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 575] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [277]; unstable size 277; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 277] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 277] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.64699364, 2.80865288, 4.23958635, 2.61277151, 4.73358536, 3.88175774,
         4.35204315, 1.01147723, 5.09978485]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0693 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 115, vnnlib ID: 115 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.36256695, -13.41296291,  -7.44461441,  -8.80130768,  -6.03208971,
          -9.45968819,  -8.73321247,  -9.01270103, -12.02322006, -13.37573814]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [544]; unstable size 544; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 300, 1, 544] with unstable size 299 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 544] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 544] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [299]; unstable size 299; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 299] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 299] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.81327713, 5.48521519, 0.46946692, 1.82796848, 2.35864878, 1.48084867,
         1.92163324, 4.35953045, 5.34309292]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0702 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 116, vnnlib ID: 116 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.81765366, -7.31970978, -3.61689496, -2.33775973, -4.04815769,
         -1.70513523, -4.43761539, -2.28235054, -5.83187103, -5.49887180]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [659]; unstable size 659; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 163, 1, 659] with unstable size 162 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 659] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 659] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [162]; unstable size 162; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 162] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 162] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.62464428,  3.89426231,  0.79460704,  0.29400682,  1.47056723,
          1.78599668, -0.22968006,  2.20870399,  2.15642834]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.81765366, -7.31970978, -3.61689496, -2.33775973, -4.04815769,
         -1.70513523, -4.43761539, -2.28235054, -5.83187103, -5.49887180]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.12it/s]100%|██████████| 1/1 [00:00<00:00,  9.11it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.89979172, -7.36104774, -3.67233706, -2.66874647, -4.12950802,
          -2.08822346, -4.72593451, -2.15821362, -6.01429844, -5.55949211]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.06999016]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1128 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 16.392478942871094
alpha/beta optimization time: 1.2003381252288818
initial alpha-crown bounds: tensor([[ 3.67620039,  3.94920158,  0.83800340,  0.30350497,  1.50146949,
          1.81741679, -0.19317865,  2.29632831,  2.20353174]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.19317865371704102
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.62045907974243
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6204228401184
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.62039995193481
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.6203796863556
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.62036156654358
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.620343208313
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.62032461166382
Verifying property 6 with 1 instances.
##### Instance 116 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.19317865]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.81765366, -7.31970978, -3.61689496, -2.33775973, -4.04815769,
        -1.70513523, -4.43761539, -2.28235054, -5.83187103, -5.49887180],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.19317865]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 659
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 159
Node /15 input 0: size torch.Size([100]) unstable 16
-----------------
# of unstable neurons: 834
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010418891906738281
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19317841529846191
10 lb beta sum: 0.0, worst -0.19318127632141113
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0514    transfer 0.0001    finalize 0.0001    func 0.0519    
Accumulated time: func 0.0519    prepare 0.0002    bound 0.0514    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] 
split level 1: [/input-12, 6] 
split level 2: [/input-12, 1] 
split level 3: [/input-12, 68] 
split level 4: [/input-12, 10] 
split level 5: [/input-12, 53] 
split level 6: [/input-8, 110] 
split level 7: [/input-8, 926] 
split level 8: [/input-8, 1460] 
split level 9: [/input-8, 162] 
split level 10: [/input-12, 64] 
split level 11: [/input-8, 486] 
split level 12: [/input-8, 1001] 
split level 13: [/input-8, 573] 
split level 14: [/input-8, 1017] 
split level 15: [/input-8, 1506] 
split level 16: [/input-8, 1058] 
split level 17: [/input-8, 998] 
split level 18: [/input-8, 102] 
split level 19: [/input-8, 1453] 
split level 20: [/input-8, 93] 
split level 21: [/input-8, 2036] 
split level 22: [/input-8, 619] 
split level 23: [/input-8, 1461] 
split level 24: [/input-8, 1329] 
split level 25: [/input, 2375] 
split level 26: [/input-8, 1523] 
split level 27: [/input-8, 598] 
split level 28: [/input, 481] 
split level 29: [/input-8, 1018] 
split level 30: [/input-8, 1009] 
split level 31: [/input-8, 2024] 
split level 32: [/input-8, 1421] 
split level 33: [/input-8, 993] 
split level 34: [/input-8, 1869] 
split level 35: [/input-8, 105] 
split level 36: [/input, 436] 
split level 37: [/input, 2430] 
split level 38: [/input, 1724] 
split level 39: [/input-8, 490] 
split level 40: [/input-8, 1765] 
split level 41: [/input, 2748] 
split level 42: [/input-8, 979] 
split level 43: [/input-8, 924] 
split level 44: [/input-8, 479] 
split level 45: [/input, 2071] 
split level 46: [/input-8, 1265] 
split level 47: [/input-8, 1467] 
split level 48: [/input, 497] 
split level 49: [/input, 2747] 
split level 50: [/input, 2397] 
split level 51: [/input-8, 892] 
split level 52: [/input-8, 521] 
split level 53: [/input-8, 1662] 
split level 54: [/input-8, 985] 
split level 55: [/input-8, 1466] 
split level 56: [/input-8, 1525] 
split level 57: [/input, 2446] 
split level 58: [/input-8, 497] 
split level 59: [/input-8, 585] 
split level 60: [/input-8, 969] 
split level 61: [/input, 1658] 
split level 62: [/input, 126] 
split level 63: [/input-8, 2041] 
split level 64: [/input, 455] 
split level 65: [/input, 285] 
split level 66: [/input-8, 1774] 
split level 67: [/input-8, 1518] 
split level 68: [/input, 1925] 
split level 69: [/input, 3027] 
split level 70: [/input-8, 698] 
split level 71: [/input, 2719] 
split level 72: [/input-8, 1514] 
split level 73: [/input-8, 2039] 
split level 74: [/input-8, 1805] 
split level 75: [/input, 196] 
split level 76: [/input-8, 78] 
split level 77: [/input-8, 1396] 
split level 78: [/input, 2215] 
split level 79: [/input, 3880] 
split level 80: [/input, 1642] 
split level 81: [/input-8, 481] 
split level 82: [/input, 2072] 
split level 83: [/input-8, 111] 
split level 84: [/input, 3021] 
split level 85: [/input, 2329] 
split level 86: [/input, 2380] 
split level 87: [/input-8, 2006] 
split level 88: [/input, 2749] 
split level 89: [/input, 440] 
split level 90: [/input-8, 1860] 
split level 91: [/input, 2763] 
split level 92: [/input, 2245] 
split level 93: [/input, 2463] 
split level 94: [/input-8, 2026] 
split level 95: [/input, 3811] 
split level 96: [/input, 3025] 
split level 97: [/input, 2984] 
split level 98: [/input, 3815] 
split level 99: [/input-8, 564] 
split level 100: [/input, 3223] 
split level 101: [/input-8, 1470] 
split level 102: [/input, 2280] 
split level 103: [/input, 2989] 
split level 104: [/input, 2597] 
split level 105: [/input, 3967] 
split level 106: [/input, 1246] 
split level 107: [/input-8, 529] 
split level 108: [/input, 3096] 
split level 109: [/input, 1560] 
split level 110: [/input, 1784] 
split level 111: [/input, 2714] 
split level 112: [/input-8, 121] 
split level 113: [/input, 3966] 
split level 114: [/input, 3099] 
split level 115: [/input, 2294] 
split level 116: [/input, 2248] 
split level 117: [/input-8, 454] 
split level 118: [/input, 2371] 
split level 119: [/input, 3198] 
split level 120: [/input, 2426] 
split level 121: [/input, 2089] 
split level 122: [/input, 3998] 
split level 123: [/input, 3000] 
split level 124: [/input, 3795] 
split level 125: [/input-8, 103] 
split level 126: [/input, 2381] 
split level 127: [/input, 3876] 
split level 128: [/input, 3793] 
split level 129: [/input, 3197] 
split level 130: [/input, 2302] 
split level 131: [/input, 2238] 
split level 132: [/input, 1941] 
split level 133: [/input, 2815] 
split level 134: [/input, 1783] 
split level 135: [/input, 1518] 
split level 136: [/input, 3112] 
split level 137: [/input, 2615] 
split level 138: [/input, 273] 
split level 139: [/input, 3233] 
split level 140: [/input, 2585] 
split level 141: [/input, 2973] 
split level 142: [/input, 1307] 
split level 143: [/input, 1878] 
split level 144: [/input-8, 987] 
split level 145: [/input, 3100] 
split level 146: [/input, 1481] 
split level 147: [/input, 1657] 
split level 148: [/input, 2587] 
split level 149: [/input, 1785] 
split level 150: [/input, 4043] 
split level 151: [/input, 3104] 
split level 152: [/input, 4051] 
split level 153: [/input-8, 527] 
split level 154: [/input, 3794] 
split level 155: [/input, 3140] 
split level 156: [/input, 2298] 
split level 157: [/input, 2244] 
split level 158: [/input, 3115] 
split level 159: [/input, 474] 
split level 160: [/input, 1801] 
split level 161: [/input, 3826] 
split level 162: [/input, 2372] 
split level 163: [/input, 1942] 
split level 164: [/input, 1493] 
split level 165: [/input, 1305] 
split level 166: [/input-8, 1413] 
split level 167: [/input, 3185] 
split level 168: [/input, 3980] 
split level 169: [/input, 2415] 
split level 170: [/input, 3866] 
split level 171: [/input, 3043] 
split level 172: [/input, 2354] 
split level 173: [/input, 3102] 
split level 174: [/input, 2368] 
split level 175: [/input, 3825] 
split level 176: [/input, 2988] 
split level 177: [/input-8, 1397] 
split level 178: [/input, 2257] 
split level 179: [/input, 3881] 
split level 180: [/input, 3107] 
split level 181: [/input-8, 2033] 
split level 182: [/input-8, 525] 
split level 183: [/input, 2807] 
split level 184: [/input, 3790] 
split level 185: [/input, 3822] 
split level 186: [/input, 3054] 
split level 187: [/input, 3169] 
split level 188: [/input, 1247] 
split level 189: [/input, 2053] 
split level 190: [/input, 95] 
split level 191: [/input-8, 2025] 
split level 192: [/input, 3820] 
split level 193: [/input, 1653] 
split level 194: [/input-8, 1554] 
split level 195: [/input, 3092] 
split level 196: [/input, 2311] 
split level 197: [/input, 2097] 
split level 198: [/input, 3136] 
split level 199: [/input, 3088] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19308733940124512
10 lb beta sum: 0.0, worst -0.1930907964706421
Time: prepare 0.0117    bound 0.0952    transfer 0.0008    finalize 0.0030    func 0.1134    
Accumulated time: func 0.1653    prepare 0.0218    bound 0.1466    transfer 0.0009    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.22567415) min lb tensor(-0.19308734)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010352134704589844 
BICCOS Cumulative time: 0.010352134704589844
Preprocessing time: 0.009880781173706055 Inference time: 0.00015592575073242188 Add cuts time: 8.058547973632812e-05 Cut analysis time: 0.00023484230041503906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18751 (1), -0.18750 (1), -0.18735 (1), -0.18653 (1), -0.18647 (1), -0.18629 (1), -0.18606 (1), -0.18601 (1), -0.18572 (1), -0.18517 (1), -0.18504 (1), -0.18486 (1), -0.18453 (1), -0.18438 (1), -0.18432 (1), -0.18384 (1), -0.18302 (1), -0.18255 (1), -0.18144 (1), -0.18126 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5033    set_bounds 0.0089    solve 0.1134    add 0.1946    
Accumulated time: pickout 0.0003    decision 0.5033    set_bounds 0.0089    solve 0.1134    add 0.1946    
Current (lb-rhs): -0.1875145435333252
50 domains visited
Cumulative time: 0.90545654296875

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 68] [/input-12, 10] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 10] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 3: [/input-12, 10] [/input-12, 53] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 53] [/input-12, 53] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17295706272125244
10 lb beta sum: 0.4636729657649994, worst -0.15743544697761536
Time: prepare 0.0076    bound 0.1148    transfer 0.0007    finalize 0.0024    func 0.1281    
Accumulated time: func 0.2933    prepare 0.0296    bound 0.2614    transfer 0.0016    finalize 0.0056    
all_split False
======================Cut inference begins======================
max lb tensor(0.18049049) min lb tensor(-0.15740493)
Number of Verified Splits: 99 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.017130374908447266 
BICCOS Cumulative time: 0.02748250961303711
Preprocessing time: 0.011701107025146484 Inference time: 0.00351715087890625 Add cuts time: 0.0016393661499023438 Cut analysis time: 0.0002727508544921875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08632 (2), -0.08597 (2), -0.08590 (2), -0.08574 (2), -0.08545 (2), -0.08521 (2), -0.08519 (2), -0.08503 (2), -0.08444 (2), -0.08343 (2), -0.08339 (2), -0.08241 (2), -0.08170 (2), -0.08161 (2), -0.08091 (2), -0.08059 (2), -0.07997 (2), -0.07902 (2), -0.07889 (2), -0.07888 (2), 
Length of domains: 50
Time: pickout 0.0086    decision 0.0193    set_bounds 0.0114    solve 0.1281    add 0.2069    
Accumulated time: pickout 0.0089    decision 0.5226    set_bounds 0.0203    solve 0.2416    add 0.4015    
Current (lb-rhs): -0.08631539344787598
100 domains visited
Cumulative time: 1.3041129112243652

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 1] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 68] [/input-12, 68] [/input-12, 1] [/input-12, 6] [/input-12, 6] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 68] [/input-12, 10] [/input-12, 68] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 1] [/input-12, 1] [/input-12, 10] [/input-12, 10] 
split level 3: [/input-12, 53] [/input-8, 93] [/input-12, 53] [/input-12, 53] [/input-8, 93] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11711275577545166
10 lb beta sum: 0.6051169037818909, worst -0.09011518955230713
Time: prepare 0.0075    bound 0.1156    transfer 0.0009    finalize 0.0025    func 0.1297    
Accumulated time: func 0.4230    prepare 0.0375    bound 0.3770    transfer 0.0025    finalize 0.0081    
all_split False
======================Cut inference begins======================
max lb tensor(0.41313297) min lb tensor(-0.08440277)
Number of Verified Splits: 118 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 6
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.018973112106323242 
BICCOS Cumulative time: 0.04645562171936035
Preprocessing time: 0.0114898681640625 Inference time: 0.0050694942474365234 Add cuts time: 0.002044200897216797 Cut analysis time: 0.0003695487976074219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04234 (3), -0.04202 (3), -0.04166 (3), -0.04158 (3), -0.04147 (3), -0.04021 (3), -0.04018 (3), -0.04015 (3), -0.04011 (3), -0.04009 (3), -0.03978 (3), -0.03923 (3), -0.03898 (3), -0.03805 (3), -0.03781 (3), -0.03720 (3), -0.03689 (3), -0.03670 (3), -0.03658 (3), -0.03658 (3), 
Length of domains: 50
Time: pickout 0.0079    decision 0.0192    set_bounds 0.0155    solve 0.1297    add 0.2134    
Accumulated time: pickout 0.0168    decision 0.5418    set_bounds 0.0358    solve 0.3713    add 0.6149    
Current (lb-rhs): -0.042339324951171875
150 domains visited
Cumulative time: 1.7160074710845947

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 1] [/input-12, 1] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 6] [/input-12, 6] [/input-12, 1] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 6] 
split level 2: [/input-12, 53] [/input-12, 53] [/input-12, 1] [/input-12, 1] [/input-12, 10] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 1] 
split level 3: [/input-8, 93] [/input-8, 93] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-8, 93] [/input-8, 93] [/input-8, 93] [/input-8, 93] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07732856273651123
10 lb beta sum: 0.5559888482093811, worst -0.05340149998664856
Time: prepare 0.0075    bound 0.1307    transfer 0.0009    finalize 0.0023    func 0.1440    
Accumulated time: func 0.5670    prepare 0.0453    bound 0.5077    transfer 0.0033    finalize 0.0104    
all_split False
======================Cut inference begins======================
max lb tensor(0.23799777) min lb tensor(-0.04202354)
Number of Verified Splits: 173 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 4
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.023585081100463867 
BICCOS Cumulative time: 0.07004070281982422
Preprocessing time: 0.011312484741210938 Inference time: 0.008600234985351562 Add cuts time: 0.003289461135864258 Cut analysis time: 0.0003829002380371094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02283 (4), -0.02268 (4), -0.02267 (4), -0.02228 (4), -0.02098 (4), -0.02087 (4), -0.01982 (4), -0.01951 (4), -0.01947 (4), -0.01926 (4), -0.01910 (4), -0.01906 (4), -0.01898 (4), -0.01866 (4), -0.01862 (4), -0.01845 (4), -0.01758 (4), -0.01741 (4), -0.01705 (4), -0.01649 (4), 
Length of domains: 50
Time: pickout 0.0081    decision 0.0191    set_bounds 0.0154    solve 0.1441    add 0.3810    
Accumulated time: pickout 0.0249    decision 0.5609    set_bounds 0.0512    solve 0.5154    add 0.9959    
Current (lb-rhs): -0.022834300994873047
200 domains visited
Cumulative time: 2.3143231868743896

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
split level 2: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 3: [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.059125423431396484
10 lb beta sum: 0.4171697199344635, worst -0.03843188285827637
Time: prepare 0.0127    bound 0.1618    transfer 0.0014    finalize 0.0030    func 0.1826    
Accumulated time: func 0.7496    prepare 0.0583    bound 0.6695    transfer 0.0047    finalize 0.0134    
all_split False
======================Cut inference begins======================
max lb tensor(0.26322103) min lb tensor(-0.02283430)
Number of Verified Splits: 171 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 4
#cuts 4-6: 11
#cuts >= 20: 0
BICCOS time: 0.026189327239990234 
BICCOS Cumulative time: 0.09623003005981445
Preprocessing time: 0.012512445449829102 Inference time: 0.009131908416748047 Add cuts time: 0.003715991973876953 Cut analysis time: 0.0008289813995361328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00649 (5), -0.00638 (5), -0.00629 (5), -0.00629 (5), -0.00628 (5), -0.00626 (5), -0.00624 (5), -0.00623 (5), -0.00617 (5), -0.00616 (5), -0.00616 (5), -0.00608 (5), -0.00606 (5), -0.00604 (5), -0.00595 (5), -0.00594 (5), -0.00589 (5), -0.00585 (5), -0.00580 (5), -0.00580 (5), 
Length of domains: 50
Time: pickout 0.0082    decision 0.0228    set_bounds 0.0319    solve 0.1832    add 0.2319    
Accumulated time: pickout 0.0331    decision 0.5837    set_bounds 0.0831    solve 0.6986    add 1.2278    
Current (lb-rhs): -0.006493091583251953
250 domains visited
Cumulative time: 2.8258447647094727


Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] 
split level 1: [/input-12, 6] 
split level 2: [/input-12, 1] 
split level 3: [/input-12, 68] 
split level 4: [/input-12, 10] 
split level 5: [/input-12, 53] 
split level 6: [/input-8, 1460] 
split level 7: [/input-8, 1506] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09853625297546387
10 lb beta sum: 0.0943034440279007, worst -0.0956997275352478
Time: prepare 0.0053    bound 0.1741    transfer 0.0014    finalize 0.0022    func 0.1847    
Accumulated time: func 0.9342    prepare 0.0640    bound 0.8436    transfer 0.0061    finalize 0.0155    
all_split False
======================Cut inference begins======================
max lb tensor(0.35549092) min lb tensor(-0.09563120)
Number of Verified Splits: 224 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17433583736419678
10 lb beta sum: 0.4544052183628082, worst -0.14006340503692627
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 4
#cuts 4-6: 11
#cuts >= 20: 0
BICCOS time: 0.30184412002563477 
BICCOS Cumulative time: 0.3980741500854492
Preprocessing time: 0.007823944091796875 Inference time: 0.2874176502227783 Add cuts time: 0.005795478820800781 Cut analysis time: 0.0008070468902587891
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09563 (8), -0.08930 (8), -0.08744 (8), -0.08485 (8), -0.08102 (8), -0.07757 (8), -0.07691 (8), -0.07379 (8), -0.06979 (8), -0.06967 (8), -0.06894 (8), -0.06365 (8), -0.06316 (8), -0.06063 (8), -0.05972 (8), -0.05950 (8), -0.05783 (8), -0.05364 (8), -0.05196 (8), -0.04909 (8), 
Length of domains: 32
Time: pickout 0.0004    decision 0.0249    set_bounds 0.0226    solve 0.1848    add 0.0655    
Accumulated time: pickout 0.0334    decision 0.6086    set_bounds 0.1057    solve 0.8834    add 1.2933    
Current (lb-rhs): -0.0956311970949173
282 domains visited
Cumulative time: 3.4472594261169434

BaB round 2
batch: 32
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 926] [/input-8, 926] [/input-8, 1058] [/input-8, 926] [/input-8, 926] [/input-8, 926] [/input-8, 926] [/input-8, 926] [/input-8, 926] [/input-8, 926] 
split level 1: [/input-8, 1453] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-8, 162] [/input-8, 1461] [/input-12, 64] [/input-12, 64] [/input-8, 1453] [/input-12, 64] 
split level 2: [/input-8, 1461] [/input-8, 1461] [/input-8, 1461] [/input-8, 1461] [/input-8, 1461] [/input-8, 993] [/input-8, 993] [/input-8, 993] [/input-8, 1461] [/input-8, 1461] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23422780632972717, worst -0.08761496841907501
10 lb beta sum: 0.23415905237197876, worst -0.08746953308582306
Time: prepare 0.0122    bound 0.1659    transfer 0.0010    finalize 0.0019    func 0.1828    
Accumulated time: func 1.1170    prepare 0.0764    bound 1.0095    transfer 0.0071    finalize 0.0174    
all_split False
======================Cut inference begins======================
max lb tensor(0.12864102) min lb tensor(-0.08743985)
Number of Verified Splits: 88 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.23526668548583984, worst -0.13742785155773163
10 lb beta sum: 0.5204097032546997, worst -0.03351891040802002
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 4
#cuts 4-6: 11
#cuts 7-9: 1
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.250316858291626 
BICCOS Cumulative time: 0.6483910083770752
Preprocessing time: 0.008426666259765625 Inference time: 0.23627138137817383 Add cuts time: 0.004666805267333984 Cut analysis time: 0.0009520053863525391
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08744 (11), -0.08528 (11), -0.08080 (11), -0.07936 (11), -0.07927 (11), -0.07857 (11), -0.07840 (11), -0.07702 (11), -0.07251 (11), -0.07208 (11), -0.07123 (11), -0.07097 (11), -0.07032 (11), -0.07022 (11), -0.06643 (11), -0.06604 (11), -0.06500 (11), -0.06425 (11), -0.06413 (11), -0.06377 (11), 
Length of domains: 168
Time: pickout 0.0056    decision 0.0172    set_bounds 0.0194    solve 0.1829    add 0.0765    
Accumulated time: pickout 0.0391    decision 0.6258    set_bounds 0.1251    solve 1.0663    add 1.3698    
Current (lb-rhs): -0.08743984997272491
450 domains visited
Cumulative time: 4.007404088973999

BaB round 3
batch: 168
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 162] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08744001388549805
10 lb beta sum: 0.06745477020740509, worst -0.08742022514343262
Time: prepare 0.0075    bound 0.1723    transfer 0.0014    finalize 0.0024    func 0.1858    
Accumulated time: func 1.3029    prepare 0.0842    bound 1.1818    transfer 0.0085    finalize 0.0198    
all_split False
======================Cut inference begins======================
max lb tensor(0.10612842) min lb tensor(-0.08740294)
Number of Verified Splits: 103 of 336
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 4
#cuts 4-6: 17
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.024615764617919922 
BICCOS Cumulative time: 0.6730067729949951
Preprocessing time: 0.010327816009521484 Inference time: 0.009964704513549805 Add cuts time: 0.0031385421752929688 Cut analysis time: 0.001184701919555664
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08740 (12), -0.08525 (12), -0.08076 (12), -0.07923 (12), -0.07854 (12), -0.07712 (12), -0.07698 (12), -0.07613 (12), -0.07243 (12), -0.07015 (12), -0.06987 (12), -0.06879 (12), -0.06843 (12), -0.06794 (12), -0.06616 (12), -0.06587 (12), -0.06461 (12), -0.06401 (12), -0.06391 (12), -0.06359 (12), 
Length of domains: 233
Time: pickout 0.0153    decision 0.0227    set_bounds 0.0159    solve 0.1859    add 0.0757    
Accumulated time: pickout 0.0544    decision 0.6485    set_bounds 0.1410    solve 1.2522    add 1.4455    
Current (lb-rhs): -0.08740293979644775
683 domains visited
Cumulative time: 4.355810642242432

BaB round 4
batch: 233
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1058] [/input-8, 1453] [/input-8, 1265] [/input-8, 162] [/input-8, 1453] [/input-8, 1265] [/input-8, 162] [/input-8, 1453] [/input-8, 1265] [/input-8, 162] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08519983291625977
10 lb beta sum: 0.020534269511699677, worst -0.08516573905944824
Time: prepare 0.0100    bound 0.1741    transfer 0.0020    finalize 0.0031    func 0.1923    
Accumulated time: func 1.4951    prepare 0.0945    bound 1.3558    transfer 0.0104    finalize 0.0229    
all_split False
======================Cut inference begins======================
max lb tensor(0.10922199) min lb tensor(-0.08514595)
Number of Verified Splits: 69 of 466
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 4
#cuts 4-6: 26
#cuts 7-9: 8
#cuts >= 20: 0
BICCOS time: 0.027245759963989258 
BICCOS Cumulative time: 0.7002525329589844
Preprocessing time: 0.013921976089477539 Inference time: 0.007462739944458008 Add cuts time: 0.0040209293365478516 Cut analysis time: 0.0018401145935058594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08515 (13), -0.08274 (13), -0.07904 (13), -0.07850 (13), -0.07784 (13), -0.07675 (13), -0.07604 (13), -0.07601 (13), -0.07492 (13), -0.07413 (13), -0.07235 (13), -0.07172 (13), -0.07107 (13), -0.07075 (13), -0.06997 (13), -0.06868 (13), -0.06760 (13), -0.06728 (13), -0.06720 (13), -0.06670 (13), 
Length of domains: 397
Time: pickout 0.0048    decision 0.0255    set_bounds 0.0213    solve 0.1924    add 0.0669    
Accumulated time: pickout 0.0592    decision 0.6740    set_bounds 0.1622    solve 1.4446    add 1.5124    
Current (lb-rhs): -0.08514595031738281
1080 domains visited
Cumulative time: 4.699125528335571

BaB round 5
batch: 397
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-8, 1329] [/input, 2430] [/input-8, 1058] [/input-8, 1329] [/input, 2430] [/input-8, 1058] [/input-8, 1329] [/input-8, 1453] [/input-8, 1058] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08298599720001221
10 lb beta sum: 0.005693813785910606, worst -0.08290219306945801
Time: prepare 0.0178    bound 0.1761    transfer 0.0041    finalize 0.0045    func 0.2079    
Accumulated time: func 1.7031    prepare 0.1125    bound 1.5319    transfer 0.0145    finalize 0.0274    
all_split False
======================Cut inference begins======================
max lb tensor(0.08284569) min lb tensor(-0.08288479)
Number of Verified Splits: 101 of 794
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 50.
#cuts 1-3: 4
#cuts 4-6: 40
#cuts 7-9: 6
#cuts >= 20: 0
BICCOS time: 0.04696202278137207 
BICCOS Cumulative time: 0.7472145557403564
Preprocessing time: 0.025024890899658203 Inference time: 0.012197017669677734 Add cuts time: 0.00728154182434082 Cut analysis time: 0.0024585723876953125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08288 (14), -0.08047 (14), -0.07675 (14), -0.07617 (14), -0.07612 (14), -0.07553 (14), -0.07453 (14), -0.07371 (14), -0.07368 (14), -0.07331 (14), -0.07228 (14), -0.07190 (14), -0.07067 (14), -0.06998 (14), -0.06997 (14), -0.06995 (14), -0.06958 (14), -0.06945 (14), -0.06872 (14), -0.06870 (14), 
Length of domains: 693
Time: pickout 0.0615    decision 0.0362    set_bounds 0.0348    solve 0.2082    add 0.0843    
Accumulated time: pickout 0.1207    decision 0.7102    set_bounds 0.1970    solve 1.6528    add 1.5967    
Current (lb-rhs): -0.0828847885131836
1773 domains visited
Cumulative time: 5.179847717285156

BaB round 6
batch: 693
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1329] [/input, 436] [/input-8, 1467] [/input-8, 1329] [/input, 436] [/input-8, 1453] [/input-8, 1329] [/input, 436] [/input, 2430] [/input-8, 1329] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08163845539093018
10 lb beta sum: 0.0016729162307456136, worst -0.08162534236907959
Time: prepare 0.0347    bound 0.1916    transfer 0.0067    finalize 0.0084    func 0.2507    
Accumulated time: func 1.9538    prepare 0.1474    bound 1.7235    transfer 0.0212    finalize 0.0357    
all_split False
======================Cut inference begins======================
max lb tensor(0.00984408) min lb tensor(-0.08161259)
Number of Verified Splits: 125 of 1386
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 71.
#cuts 1-3: 4
#cuts 4-6: 48
#cuts 7-9: 19
#cuts >= 20: 0
BICCOS time: 0.07757401466369629 
BICCOS Cumulative time: 0.8247885704040527
Preprocessing time: 0.05014920234680176 Inference time: 0.016457319259643555 Add cuts time: 0.007420539855957031 Cut analysis time: 0.0035469532012939453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08161 (15), -0.07920 (15), -0.07825 (15), -0.07582 (15), -0.07547 (15), -0.07425 (15), -0.07414 (15), -0.07408 (15), -0.07346 (15), -0.07325 (15), -0.07240 (15), -0.07209 (15), -0.07174 (15), -0.07159 (15), -0.07145 (15), -0.07104 (15), -0.07082 (15), -0.07063 (15), -0.07041 (15), -0.06989 (15), 
Length of domains: 1261
Time: pickout 0.0226    decision 0.0510    set_bounds 0.0551    solve 0.4925    add 0.0941    
Accumulated time: pickout 0.1432    decision 0.7612    set_bounds 0.2521    solve 2.1453    add 1.6908    
Current (lb-rhs): -0.08161258697509766
3034 domains visited
Cumulative time: 5.9839794635772705

BaB round 7
batch: 1261
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 436] [/input-8, 993] [/input-8, 1453] [/input, 2430] [/input-8, 993] [/input-8, 1467] [/input, 436] [/input-8, 993] [/input-8, 1467] [/input, 436] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07819569110870361
10 lb beta sum: 0.0016045564552769065, worst -0.0782008171081543
Time: prepare 0.0673    bound 0.2680    transfer 0.0076    finalize 0.0148    func 0.3748    
Accumulated time: func 2.3286    prepare 0.2150    bound 1.9915    transfer 0.0289    finalize 0.0505    
all_split False
======================Cut inference begins======================
max lb tensor(0.01327872) min lb tensor(-0.07818663)
Number of Verified Splits: 235 of 2522
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 97.
#cuts 1-3: 4
#cuts 4-6: 52
#cuts 7-9: 41
#cuts >= 20: 0
BICCOS time: 0.13032746315002441 
BICCOS Cumulative time: 0.9551160335540771
Preprocessing time: 0.08019781112670898 Inference time: 0.031238555908203125 Add cuts time: 0.013852596282958984 Cut analysis time: 0.00503849983215332
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07819 (16), -0.07774 (16), -0.07578 (16), -0.07534 (16), -0.07467 (16), -0.07454 (16), -0.07224 (16), -0.07212 (16), -0.07203 (16), -0.07159 (16), -0.07124 (16), -0.07081 (16), -0.07072 (16), -0.07065 (16), -0.07038 (16), -0.07023 (16), -0.07000 (16), -0.06996 (16), -0.06982 (16), -0.06974 (16), 
Length of domains: 2287
Time: pickout 0.0428    decision 0.0856    set_bounds 0.1068    solve 0.3753    add 0.1028    
Accumulated time: pickout 0.1860    decision 0.8468    set_bounds 0.3590    solve 2.5207    add 1.7937    
Current (lb-rhs): -0.07818663120269775
5321 domains visited
Cumulative time: 6.839512586593628

BaB round 8
batch: 2287
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 598] [/input-8, 1009] [/input, 2748] [/input, 436] [/input, 2748] [/input, 2748] [/input, 2430] [/input-8, 1009] [/input, 2748] [/input, 2430] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07624757289886475
10 lb beta sum: 0.0016922737704589963, worst -0.07623457908630371
Time: prepare 0.1248    bound 0.4376    transfer 0.0280    finalize 0.2193    func 0.8400    
Accumulated time: func 3.1686    prepare 0.3401    bound 2.4290    transfer 0.0569    finalize 0.2699    
all_split False
======================Cut inference begins======================
max lb tensor(0.01221418) min lb tensor(-0.07622468)
Number of Verified Splits: 449 of 4574
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 115.
#cuts 1-3: 4
#cuts 4-6: 58
#cuts 7-9: 53
#cuts >= 20: 0
BICCOS time: 0.23309731483459473 
BICCOS Cumulative time: 1.1882133483886719
Preprocessing time: 0.1437840461730957 Inference time: 0.059386253356933594 Add cuts time: 0.024468183517456055 Cut analysis time: 0.005458831787109375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07622 (17), -0.07578 (17), -0.07363 (17), -0.07319 (17), -0.07284 (17), -0.07273 (17), -0.07159 (17), -0.07115 (17), -0.07010 (17), -0.07000 (17), -0.06998 (17), -0.06957 (17), -0.06939 (17), -0.06892 (17), -0.06887 (17), -0.06880 (17), -0.06865 (17), -0.06844 (17), -0.06821 (17), -0.06813 (17), 
Length of domains: 4125
Time: pickout 0.0508    decision 0.1376    set_bounds 0.2006    solve 0.8415    add 0.1502    
Accumulated time: pickout 0.2368    decision 0.9843    set_bounds 0.5596    solve 3.3622    add 1.9438    
Current (lb-rhs): -0.076224684715271
9446 domains visited
Cumulative time: 8.467749118804932

BaB round 9
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2430] [/input, 2748] [/input-8, 479] [/input-8, 598] [/input-8, 1009] [/input-8, 479] [/input-8, 598] [/input, 2748] [/input-8, 479] [/input-8, 598] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0736769437789917
10 lb beta sum: 0.002822723938152194, worst -0.07368767261505127
Time: prepare 0.4193    bound 0.7202    transfer 0.0572    finalize 0.0477    func 1.2990    
Accumulated time: func 4.4675    prepare 0.7598    bound 3.1492    transfer 0.1140    finalize 0.3175    
all_split False
======================Cut inference begins======================
max lb tensor(0.01448184) min lb tensor(-0.07366884)
Number of Verified Splits: 1057 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 210.
#cuts 1-3: 4
#cuts 4-6: 93
#cuts 7-9: 109
#cuts 10-12: 4
#cuts >= 20: 0
BICCOS time: 0.4886963367462158 
BICCOS Cumulative time: 1.6769096851348877
Preprocessing time: 0.2642860412597656 Inference time: 0.150040864944458 Add cuts time: 0.0640866756439209 Cut analysis time: 0.010282754898071289
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07367 (18), -0.07323 (18), -0.07302 (18), -0.07258 (18), -0.07167 (18), -0.07124 (18), -0.07029 (18), -0.07018 (18), -0.06964 (18), -0.06964 (18), -0.06952 (18), -0.06919 (18), -0.06828 (18), -0.06817 (18), -0.06804 (18), -0.06759 (18), -0.06670 (18), -0.06664 (18), -0.06654 (18), -0.06638 (18), 
Length of domains: 7164
Time: pickout 0.0751    decision 0.2323    set_bounds 0.3724    solve 1.3010    add 0.1968    
Accumulated time: pickout 0.3119    decision 1.2166    set_bounds 0.9320    solve 4.6632    add 2.1406    
Current (lb-rhs): -0.07366883754730225
16581 domains visited
current_vram/total_varm: 11.1GB/99.9GB, batch_size increase to 8192
Cumulative time: 11.159345388412476

BaB round 10
batch: 7164
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2763] [/input-8, 1265] [/input-8, 598] [/input, 2763] [/input, 2446] [/input-8, 1017] [/input-8, 993] [/input-8, 598] [/input, 2430] [/input-8, 1017] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07242178916931152
10 lb beta sum: 0.001771634677425027, worst -0.07242345809936523
Time: prepare 0.4193    bound 1.3133    transfer 0.1282    finalize 0.3227    func 2.2778    
Accumulated time: func 6.7453    prepare 1.1795    bound 4.4625    transfer 0.2422    finalize 0.6402    
all_split False
======================Cut inference begins======================
max lb tensor(0.01443219) min lb tensor(-0.07241011)
Number of Verified Splits: 2149 of 14328
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 316.
#cuts 1-3: 4
#cuts 4-6: 110
#cuts 7-9: 193
#cuts 10-12: 9
#cuts >= 20: 0
BICCOS time: 0.9658198356628418 
BICCOS Cumulative time: 2.6427295207977295
Preprocessing time: 0.46192336082458496 Inference time: 0.32003045082092285 Add cuts time: 0.1676795482635498 Cut analysis time: 0.01618647575378418
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07241 (19), -0.07197 (19), -0.07177 (19), -0.07133 (19), -0.06912 (19), -0.06904 (19), -0.06892 (19), -0.06868 (19), -0.06847 (19), -0.06839 (19), -0.06827 (19), -0.06802 (19), -0.06708 (19), -0.06664 (19), -0.06643 (19), -0.06599 (19), -0.06572 (19), -0.06561 (19), -0.06546 (19), -0.06530 (19), 
Length of domains: 12179
Time: pickout 0.2172    decision 0.5905    set_bounds 0.6430    solve 2.2814    add 0.1856    
Accumulated time: pickout 0.5292    decision 1.8071    set_bounds 1.5750    solve 6.9446    add 2.3262    
Current (lb-rhs): -0.07241010665893555
28760 domains visited
Cumulative time: 16.086552381515503

BaB round 11
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1518] [/input-8, 162] [/input, 2430] [/input-8, 1518] [/input, 2430] [/input, 2748] [/input, 2430] [/input-8, 1017] [/input-8, 969] [/input, 2748] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07049357891082764
10 lb beta sum: 0.005400273948907852, worst -0.07049810886383057
Time: prepare 0.4663    bound 1.5815    transfer 0.1497    finalize 0.3515    func 2.6557    
Accumulated time: func 9.4010    prepare 1.6462    bound 6.0440    transfer 0.3919    finalize 0.9917    
all_split False
======================Cut inference begins======================
max lb tensor(0.29316640) min lb tensor(-0.07049334)
Number of Verified Splits: 2646 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 425.
#cuts 1-3: 4
#cuts 4-6: 166
#cuts 7-9: 244
#cuts 10-12: 11
#cuts >= 20: 0
BICCOS time: 1.5699548721313477 
BICCOS Cumulative time: 4.212684392929077
Preprocessing time: 0.547487735748291 Inference time: 0.7293214797973633 Add cuts time: 0.2720301151275635 Cut analysis time: 0.021115541458129883
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07049 (20), -0.07005 (20), -0.06984 (20), -0.06941 (20), -0.06876 (20), -0.06832 (20), -0.06811 (20), -0.06787 (20), -0.06768 (20), -0.06743 (20), -0.06722 (20), -0.06712 (20), -0.06700 (20), -0.06678 (20), -0.06646 (20), -0.06643 (19), -0.06634 (20), -0.06583 (20), -0.06538 (20), -0.06538 (20), 
Length of domains: 17725
Time: pickout 0.1377    decision 0.6825    set_bounds 0.8313    solve 2.6619    add 0.2320    
Accumulated time: pickout 0.6669    decision 2.4896    set_bounds 2.4063    solve 9.6065    add 2.5582    
Current (lb-rhs): -0.07049334049224854
42498 domains visited
current_vram/total_varm: 25.1GB/99.9GB, batch_size increase to 16384
Cumulative time: 22.258570909500122

BaB round 12
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1466] [/input-8, 1453] [/input-8, 892] [/input-8, 93] [/input-8, 479] [/input-8, 1009] [/input-8, 93] [/input-8, 1453] [/input-8, 479] [/input-8, 1009] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06921899318695068
10 lb beta sum: 0.04602377116680145, worst -0.06919026374816895
Time: prepare 0.9284    bound 3.3322    transfer 0.4052    finalize 0.6691    func 5.5558    
Accumulated time: func 14.9568    prepare 2.5751    bound 9.3762    transfer 0.7971    finalize 1.6607    
all_split False
======================Cut inference begins======================
max lb tensor(0.39207935) min lb tensor(-0.06918001)
Number of Verified Splits: 7766 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 485.
#cuts 1-3: 5
#cuts 4-6: 154
#cuts 7-9: 313
#cuts 10-12: 13
#cuts >= 20: 0
BICCOS time: 3.2814741134643555 
BICCOS Cumulative time: 7.494158506393433
Preprocessing time: 1.4636640548706055 Inference time: 1.2200477123260498 Add cuts time: 0.5718545913696289 Cut analysis time: 0.02590775489807129
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06918 (21), -0.06874 (21), -0.06824 (21), -0.06779 (21), -0.06743 (21), -0.06698 (21), -0.06656 (21), -0.06649 (21), -0.06612 (21), -0.06604 (21), -0.06580 (21), -0.06580 (21), -0.06569 (21), -0.06561 (21), -0.06536 (21), -0.06517 (21), -0.06485 (21), -0.06474 (21), -0.06404 (21), -0.06404 (21), 
Length of domains: 26343
Time: pickout 0.2726    decision 1.6468    set_bounds 1.7892    solve 5.5630    add 0.2656    
Accumulated time: pickout 0.9395    decision 4.1365    set_bounds 4.1955    solve 15.1696    add 2.8238    
Current (lb-rhs): -0.06918001174926758
67500 domains visited
current_vram/total_varm: 42.2GB/99.9GB, batch_size increase to 32768
Cumulative time: 35.200653314590454

BaB round 13
batch: 26343
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1265] [/input, 497] [/input-8, 1017] [/input-8, 1265] [/input-8, 969] [/input-8, 1009] [/input-8, 1009] [/input-8, 1017] [/input-8, 1009] [/input-8, 1265] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06744503974914551
10 lb beta sum: 0.12606535851955414, worst -0.06579256057739258
Time: prepare 1.6124    bound 5.4137    transfer 0.6772    finalize 1.1781    func 9.2496    
Accumulated time: func 24.2064    prepare 4.1883    bound 14.7898    transfer 1.4744    finalize 2.8388    
all_split False
======================Cut inference begins======================
max lb tensor(0.41083121) min lb tensor(-0.06578219)
Number of Verified Splits: 22127 of 52686
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 195.
#cuts 1-3: 10
#cuts 4-6: 65
#cuts 7-9: 104
#cuts 10-12: 16
#cuts >= 20: 0
BICCOS time: 8.610225677490234 
BICCOS Cumulative time: 16.104384183883667
Preprocessing time: 2.9539401531219482 Inference time: 4.65888237953186 Add cuts time: 0.986626386642456 Cut analysis time: 0.010776758193969727
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06578 (22), -0.06535 (22), -0.06525 (22), -0.06481 (22), -0.06403 (22), -0.06359 (22), -0.06349 (22), -0.06314 (22), -0.06308 (22), -0.06306 (22), -0.06283 (22), -0.06271 (22), -0.06264 (22), -0.06261 (22), -0.06239 (22), -0.06239 (22), -0.06228 (22), -0.06217 (22), -0.06187 (21), -0.06185 (22), 
Length of domains: 30559
Time: pickout 0.6208    decision 2.7125    set_bounds 3.2004    solve 9.2647    add 0.3628    
Accumulated time: pickout 1.5603    decision 6.8489    set_bounds 7.3958    solve 24.4343    add 3.1866    
Current (lb-rhs): -0.06578218936920166
98059 domains visited
Cumulative time: 60.413259506225586

BaB round 14
batch: 30559
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 598] [/input, 2748] [/input-8, 1329] [/input-8, 598] [/input-8, 1329] [/input, 2748] [/input, 2446] [/input, 2748] [/input-8, 598] [/input, 2430] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06601667404174805
10 lb beta sum: 0.31907469034194946, worst -0.06578922271728516
Time: prepare 1.7741    bound 5.2426    transfer 0.7339    finalize 0.4893    func 8.6433    
Accumulated time: func 32.8498    prepare 5.9628    bound 20.0325    transfer 2.2083    finalize 3.3282    
all_split False
======================Cut inference begins======================
max lb tensor(0.69496918) min lb tensor(-0.06577933)
Number of Verified Splits: 33770 of 61118
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 9.509982109069824 
BICCOS Cumulative time: 25.61436629295349
Preprocessing time: 2.183715581893921 Inference time: 6.4671430587768555 Add cuts time: 0.8583292961120605 Cut analysis time: 0.0007941722869873047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06578 (23), -0.06523 (23), -0.06480 (23), -0.06431 (23), -0.06358 (23), -0.06348 (23), -0.06307 (23), -0.06304 (23), -0.06303 (23), -0.06282 (23), -0.06264 (23), -0.06239 (23), -0.06238 (23), -0.06227 (23), -0.06184 (23), -0.06173 (23), -0.06132 (23), -0.06106 (23), -0.06088 (23), -0.06066 (23), 
Length of domains: 27348
Time: pickout 0.7197    decision 3.1268    set_bounds 4.2625    solve 9.3935    add 0.4015    
Accumulated time: pickout 2.2799    decision 9.9757    set_bounds 11.6584    solve 33.8278    add 3.5881    
Current (lb-rhs): -0.06577932834625244
125407 domains visited
Cumulative time: 88.39931130409241

BaB round 15
batch: 27348
splitting decisions: 
split level 0: [/input, 2430] [/input-8, 1017] [/input, 2748] [/input-8, 1017] [/input-8, 1017] [/input-8, 598] [/input, 2430] [/input-8, 1017] [/input, 2430] [/input-8, 1017] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0648038387298584
10 lb beta sum: 0.19883489608764648, worst -0.011649638414382935
Time: prepare 1.5845    bound 2.2871    transfer 0.6626    finalize 0.4277    func 5.3277    
Accumulated time: func 38.1775    prepare 7.5480    bound 22.3196    transfer 2.8709    finalize 3.7559    
all_split False
======================Cut inference begins======================
max lb tensor(0.34446919) min lb tensor(1.66893005e-06)
Number of Verified Splits: 54696 of 54696
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 2.698936939239502 
BICCOS Cumulative time: 28.313303232192993
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.7331    decision 2.7852    set_bounds 3.9829    solve 5.3415    add 0.0289    
Accumulated time: pickout 3.0131    decision 12.7609    set_bounds 15.6413    solve 39.1692    add 3.6170    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
125407 domains visited
Cumulative time: 104.60893249511719


Properties batch 7, size 1
Remaining timeout: 93.79377317428589
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 93.79362678527832
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 106.2064 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 117, vnnlib ID: 117 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.05410433,  -7.98528099,  -7.76803017,  -8.62869644,  -7.58290386,
          -9.83789062,  -8.41322899, -10.12581921,  -1.82107425,  -8.20621872]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [462]; unstable size 462; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 196, 1, 462] with unstable size 195 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 462] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 462] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [195]; unstable size 195; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 195] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 195] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.12438488, 5.28402185, 4.66859198, 5.64474773, 4.65305614, 6.76825380,
         5.48563194, 7.03934669, 5.25850201]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0354 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 118, vnnlib ID: 118 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.12188244,  -7.11672592, -10.05889606, -10.35688305, -11.79731369,
          -9.88283920, -13.23313427,  -9.69955254,  -9.69626141,  -8.79122162]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [485]; unstable size 485; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 133, 1, 485] with unstable size 132 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 485] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 485] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [132]; unstable size 132; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 132] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 132] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.78854370, 1.30756640, 1.88601065, 3.26214194, 1.25751054, 4.64157391,
         1.15222812, 1.10766912, 0.93016064]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0676 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 119, vnnlib ID: 119 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.32807446, -12.10395241,  -6.98160744,  -7.09187889,  -7.17572021,
          -7.24349356,  -7.85012865,  -8.02880383, -10.09511280, -10.98221016]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [818]; unstable size 818; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 292, 1, 818] with unstable size 291 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 818] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 818] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [291]; unstable size 291; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 291] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 291] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.75854379,  3.26663256, -1.20437741, -1.10650253, -0.29332358,
         -0.34117436, -0.69933468,  1.05337381,  1.86989951]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.32807446, -12.10395241,  -6.98160744,  -7.09187889,  -7.17572021,
          -7.24349356,  -7.85012865,  -8.02880383, -10.09511280, -10.98221016]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.32807541, -12.10395432,  -6.98160744,  -7.09188032,  -7.17572117,
           -7.24349451,  -7.85012913,  -8.02880478, -10.09511280, -10.98221016],
         [ -9.32807541, -12.10395432,  -6.98160744,  -7.09188032,  -7.17572117,
           -7.24349451,  -7.85012913,  -8.02880478, -10.09511280, -10.98221016]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11027288,  0.08384085,  0.15161419,  0.75824881,  0.93692446]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.11587298, -1.08412695, -0.89365077,  ..., -1.14761901,
            -1.21111107, -1.29047608],
           [-1.05238092, -1.00476182, -0.84603173,  ..., -0.51269841,
            -0.56031746, -0.63968253],
           [-0.41746020, -0.33809513, -0.29047608,  ...,  0.01111121,
            -0.06825387, -0.19523799],
           ...,
           [-0.48095238, -0.49682540, -0.49682540,  ..., -0.68730158,
            -0.71904761, -0.78253967],
           [-0.46507925, -0.48095238, -0.46507925,  ..., -0.60793650,
            -0.63968253, -0.71904761],
           [-0.38571417, -0.36984116, -0.35396814,  ..., -0.46507925,
            -0.49682540, -0.56031746]],

          [[-0.90177131, -0.93397743, -0.72463763,  ..., -1.17552328,
            -1.25603855, -1.36875999],
           [-0.88566822, -0.88566822, -0.67632848,  ..., -0.57971013,
            -0.64412236, -0.75684375],
           [-0.37037024, -0.28985494, -0.17713353,  ..., -0.09661824,
            -0.19323659, -0.35426718],
           ...,
           [-0.59581316, -0.61191624, -0.61191624,  ..., -0.98228657,
            -0.98228657, -0.98228657],
           [-0.59581316, -0.61191624, -0.59581316,  ..., -0.99838966,
            -0.95008045, -1.03059578],
           [-0.59581316, -0.57971013, -0.54750401,  ..., -0.70853460,
            -0.67632848, -0.75684375]],

          [[-0.49325335, -0.52323836, -0.28335828,  ..., -0.86806595,
            -0.95802099, -1.07796109],
           [-0.53823084, -0.52323836, -0.28335828,  ..., -0.34332830,
            -0.43328333, -0.55322337],
           [-0.14842562, -0.05847061,  0.10644694,  ...,  0.04647692,
            -0.05847061, -0.20839565],
           ...,
           [-0.55322337, -0.56821585, -0.56821585,  ..., -0.92803597,
            -0.91304344, -0.91304344],
           [-0.55322337, -0.56821585, -0.55322337,  ..., -0.86806595,
            -0.85307342, -0.92803597],
           [-0.53823084, -0.50824583, -0.49325335,  ..., -0.58320838,
            -0.58320838, -0.67316341]]],


         [[[-1.11587298, -1.08412695, -0.89365077,  ..., -1.14761901,
            -1.21111107, -1.29047608],
           [-1.05238092, -1.00476182, -0.84603173,  ..., -0.51269841,
            -0.56031746, -0.63968253],
           [-0.41746020, -0.33809513, -0.29047608,  ...,  0.01111121,
            -0.06825387, -0.19523799],
           ...,
           [-0.48095238, -0.49682540, -0.49682540,  ..., -0.68730158,
            -0.71904761, -0.78253967],
           [-0.46507925, -0.48095238, -0.46507925,  ..., -0.60793650,
            -0.63968253, -0.71904761],
           [-0.38571417, -0.36984116, -0.35396814,  ..., -0.46507925,
            -0.49682540, -0.56031746]],

          [[-0.90177131, -0.93397743, -0.72463763,  ..., -1.17552328,
            -1.25603855, -1.36875999],
           [-0.88566822, -0.88566822, -0.67632848,  ..., -0.57971013,
            -0.64412236, -0.75684375],
           [-0.37037024, -0.28985494, -0.17713353,  ..., -0.09661824,
            -0.19323659, -0.35426718],
           ...,
           [-0.59581316, -0.61191624, -0.61191624,  ..., -0.98228657,
            -0.98228657, -0.98228657],
           [-0.59581316, -0.61191624, -0.59581316,  ..., -0.99838966,
            -0.95008045, -1.03059578],
           [-0.59581316, -0.57971013, -0.54750401,  ..., -0.70853460,
            -0.67632848, -0.75684375]],

          [[-0.49325335, -0.52323836, -0.28335828,  ..., -0.86806595,
            -0.95802099, -1.07796109],
           [-0.53823084, -0.52323836, -0.28335828,  ..., -0.34332830,
            -0.43328333, -0.55322337],
           [-0.14842562, -0.05847061,  0.10644694,  ...,  0.04647692,
            -0.05847061, -0.20839565],
           ...,
           [-0.55322337, -0.56821585, -0.56821585,  ..., -0.92803597,
            -0.91304344, -0.91304344],
           [-0.55322337, -0.56821585, -0.55322337,  ..., -0.86806595,
            -0.85307342, -0.92803597],
           [-0.53823084, -0.50824583, -0.49325335,  ..., -0.58320838,
            -0.58320838, -0.67316341]]],


         [[[-1.11587298, -1.08412695, -0.89365077,  ..., -1.14761901,
            -1.21111107, -1.29047608],
           [-1.05238092, -1.00476182, -0.84603173,  ..., -0.51269841,
            -0.56031746, -0.63968253],
           [-0.41746020, -0.33809513, -0.29047608,  ...,  0.01111121,
            -0.06825387, -0.19523799],
           ...,
           [-0.48095238, -0.49682540, -0.49682540,  ..., -0.68730158,
            -0.71904761, -0.78253967],
           [-0.46507925, -0.48095238, -0.46507925,  ..., -0.60793650,
            -0.63968253, -0.71904761],
           [-0.38571417, -0.36984116, -0.35396814,  ..., -0.46507925,
            -0.49682540, -0.56031746]],

          [[-0.90177131, -0.93397743, -0.72463763,  ..., -1.17552328,
            -1.25603855, -1.36875999],
           [-0.88566822, -0.88566822, -0.67632848,  ..., -0.57971013,
            -0.64412236, -0.75684375],
           [-0.37037024, -0.28985494, -0.17713353,  ..., -0.09661824,
            -0.19323659, -0.35426718],
           ...,
           [-0.59581316, -0.61191624, -0.61191624,  ..., -0.98228657,
            -0.98228657, -0.98228657],
           [-0.59581316, -0.61191624, -0.59581316,  ..., -0.99838966,
            -0.95008045, -1.03059578],
           [-0.59581316, -0.57971013, -0.54750401,  ..., -0.70853460,
            -0.67632848, -0.75684375]],

          [[-0.49325335, -0.52323836, -0.28335828,  ..., -0.86806595,
            -0.95802099, -1.07796109],
           [-0.53823084, -0.52323836, -0.28335828,  ..., -0.34332830,
            -0.43328333, -0.55322337],
           [-0.14842562, -0.05847061,  0.10644694,  ...,  0.04647692,
            -0.05847061, -0.20839565],
           ...,
           [-0.55322337, -0.56821585, -0.56821585,  ..., -0.92803597,
            -0.91304344, -0.91304344],
           [-0.55322337, -0.56821585, -0.55322337,  ..., -0.86806595,
            -0.85307342, -0.92803597],
           [-0.53823084, -0.50824583, -0.49325335,  ..., -0.58320838,
            -0.58320838, -0.67316341]]],


         [[[-1.11587298, -1.08412695, -0.89365077,  ..., -1.14761901,
            -1.21111107, -1.29047608],
           [-1.05238092, -1.00476182, -0.84603173,  ..., -0.51269841,
            -0.56031746, -0.63968253],
           [-0.41746020, -0.33809513, -0.29047608,  ...,  0.01111121,
            -0.06825387, -0.19523799],
           ...,
           [-0.48095238, -0.49682540, -0.49682540,  ..., -0.68730158,
            -0.71904761, -0.78253967],
           [-0.46507925, -0.48095238, -0.46507925,  ..., -0.60793650,
            -0.63968253, -0.71904761],
           [-0.38571417, -0.36984116, -0.35396814,  ..., -0.46507925,
            -0.49682540, -0.56031746]],

          [[-0.90177131, -0.93397743, -0.72463763,  ..., -1.17552328,
            -1.25603855, -1.36875999],
           [-0.88566822, -0.88566822, -0.67632848,  ..., -0.57971013,
            -0.64412236, -0.75684375],
           [-0.37037024, -0.28985494, -0.17713353,  ..., -0.09661824,
            -0.19323659, -0.35426718],
           ...,
           [-0.59581316, -0.61191624, -0.61191624,  ..., -0.98228657,
            -0.98228657, -0.98228657],
           [-0.59581316, -0.61191624, -0.59581316,  ..., -0.99838966,
            -0.95008045, -1.03059578],
           [-0.59581316, -0.57971013, -0.54750401,  ..., -0.70853460,
            -0.67632848, -0.75684375]],

          [[-0.49325335, -0.52323836, -0.28335828,  ..., -0.86806595,
            -0.95802099, -1.07796109],
           [-0.53823084, -0.52323836, -0.28335828,  ..., -0.34332830,
            -0.43328333, -0.55322337],
           [-0.14842562, -0.05847061,  0.10644694,  ...,  0.04647692,
            -0.05847061, -0.20839565],
           ...,
           [-0.55322337, -0.56821585, -0.56821585,  ..., -0.92803597,
            -0.91304344, -0.91304344],
           [-0.55322337, -0.56821585, -0.55322337,  ..., -0.86806595,
            -0.85307342, -0.92803597],
           [-0.53823084, -0.50824583, -0.49325335,  ..., -0.58320838,
            -0.58320838, -0.67316341]]],


         [[[-1.11587298, -1.08412695, -0.89365077,  ..., -1.14761901,
            -1.21111107, -1.29047608],
           [-1.05238092, -1.00476182, -0.84603173,  ..., -0.51269841,
            -0.56031746, -0.63968253],
           [-0.41746020, -0.33809513, -0.29047608,  ...,  0.01111121,
            -0.06825387, -0.19523799],
           ...,
           [-0.48095238, -0.49682540, -0.49682540,  ..., -0.68730158,
            -0.71904761, -0.78253967],
           [-0.46507925, -0.48095238, -0.46507925,  ..., -0.60793650,
            -0.63968253, -0.71904761],
           [-0.38571417, -0.36984116, -0.35396814,  ..., -0.46507925,
            -0.49682540, -0.56031746]],

          [[-0.90177131, -0.93397743, -0.72463763,  ..., -1.17552328,
            -1.25603855, -1.36875999],
           [-0.88566822, -0.88566822, -0.67632848,  ..., -0.57971013,
            -0.64412236, -0.75684375],
           [-0.37037024, -0.28985494, -0.17713353,  ..., -0.09661824,
            -0.19323659, -0.35426718],
           ...,
           [-0.59581316, -0.61191624, -0.61191624,  ..., -0.98228657,
            -0.98228657, -0.98228657],
           [-0.59581316, -0.61191624, -0.59581316,  ..., -0.99838966,
            -0.95008045, -1.03059578],
           [-0.59581316, -0.57971013, -0.54750401,  ..., -0.70853460,
            -0.67632848, -0.75684375]],

          [[-0.49325335, -0.52323836, -0.28335828,  ..., -0.86806595,
            -0.95802099, -1.07796109],
           [-0.53823084, -0.52323836, -0.28335828,  ..., -0.34332830,
            -0.43328333, -0.55322337],
           [-0.14842562, -0.05847061,  0.10644694,  ...,  0.04647692,
            -0.05847061, -0.20839565],
           ...,
           [-0.55322337, -0.56821585, -0.56821585,  ..., -0.92803597,
            -0.91304344, -0.91304344],
           [-0.55322337, -0.56821585, -0.55322337,  ..., -0.86806595,
            -0.85307342, -0.92803597],
           [-0.53823084, -0.50824583, -0.49325335,  ..., -0.58320838,
            -0.58320838, -0.67316341]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0799 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 120, vnnlib ID: 120 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -3.83905172, -12.57908535,  -3.68583417,  -3.78964639,  -5.75812435,
          -4.08564281,  -7.30590010,  -4.61561012, -11.22108173, -10.78313065]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [686]; unstable size 686; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 99, 1, 686] with unstable size 98 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 686] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 686] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [98]; unstable size 98; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 98] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 98] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 7.90750790, -0.64292026, -0.82822943,  1.19824767, -0.54596621,
          2.64874268, -0.17078602,  6.71303511,  6.26933956]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -3.83905172, -12.57908535,  -3.68583417,  -3.78964639,  -5.75812435,
          -4.08564281,  -7.30590010,  -4.61561012, -11.22108173, -10.78313065]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -3.83905125, -12.57908630,  -3.68583441,  -3.78964591,  -5.75812483,
           -4.08564281,  -7.30589867,  -4.61561012, -11.22108078, -10.78313160],
         [ -3.83905125, -12.57908630,  -3.68583441,  -3.78964591,  -5.75812483,
           -4.08564281,  -7.30589867,  -4.61561012, -11.22108078, -10.78313160]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.15321684, -0.04940534,  0.24659157,  0.77655888]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0843 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 121, vnnlib ID: 121 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.86313248,  -8.44097900, -13.20821190, -13.39188290, -12.26532078,
         -13.55902863, -14.16451168, -12.10001564, -14.36103153, -11.35003471]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [533]; unstable size 533; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 226, 1, 533] with unstable size 225 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 533] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 533] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [225]; unstable size 225; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 225] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 225] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.58184528, 2.47265053, 2.70894623, 1.52924061, 2.67172718, 3.54394722,
         1.39660025, 3.88951063, 1.85305786]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0694 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 122, vnnlib ID: 122 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.28887367,  -8.90356731, -12.90353107, -13.19761372, -12.63090992,
         -13.74266148, -14.50664043, -13.25693512,  -8.36382961, -11.89731884]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [470]; unstable size 470; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 191, 1, 470] with unstable size 190 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 470] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 470] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [190]; unstable size 190; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 190] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 190] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.83597183,  1.88928556,  2.30730534,  1.75963211,  2.61177921,
          3.72314715,  2.18467283, -1.76713848,  1.99258900]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.28887367,  -8.90356731, -12.90353107, -13.19761372, -12.63090992,
         -13.74266148, -14.50664043, -13.25693512,  -8.36382961, -11.89731884]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.28887367,  -8.90356731, -12.90353107, -13.19761372, -12.63090992,
          -13.74266148, -14.50664043, -13.25693512,  -8.36382961, -11.89731884]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.53973770]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.17936504, -0.97301590, -0.90952379,  ..., -1.27460313,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.83015871,  ..., -1.56031740,
            -1.65555561, -1.41746020],
           [-1.19523799, -1.17936504, -1.03650784,  ..., -1.44920623,
            -1.65555561, -1.52857137],
           ...,
           [ 0.69365084,  0.70952386,  0.72539687,  ..., -1.38571417,
            -1.43333328, -1.44920623],
           [ 0.74126989,  0.75714290,  0.77301592,  ..., -1.35396814,
            -1.41746020, -1.44920623],
           [ 0.77301592,  0.75714290,  0.72539687,  ..., -1.33809519,
            -1.38571417, -1.40158725]],

          [[-1.25603855, -0.91787434, -0.70853460,  ..., -0.91787434,
            -1.11111104, -0.91787434],
           [-1.20772946, -1.03059578, -0.67632848,  ..., -1.25603855,
            -1.38486302, -1.09500802],
           [-1.27214170, -1.23993552, -0.98228657,  ..., -1.17552328,
            -1.38486302, -1.23993552],
           ...,
           [ 0.53140104,  0.54750413,  0.56360716,  ..., -1.27214170,
            -1.32045078, -1.33655393],
           [ 0.57971025,  0.59581327,  0.61191636,  ..., -1.23993552,
            -1.30434775, -1.32045078],
           [ 0.61191636,  0.59581327,  0.57971025,  ..., -1.22383249,
            -1.28824472, -1.28824472]],

          [[-1.28785622, -1.07796109, -1.01799107,  ..., -1.37781119,
            -1.51274371, -1.42278874],
           [-1.22788620, -1.15292358, -0.92803597,  ..., -1.52773619,
            -1.55772126, -1.43778121],
           [-1.27286363, -1.28785622, -1.10794616,  ..., -1.21289361,
            -1.34782624, -1.36281872],
           ...,
           [ 0.54122955,  0.55622208,  0.57121456,  ..., -0.86806595,
            -0.91304344, -0.92803597],
           [ 0.58620709,  0.60119957,  0.60119957,  ..., -0.83808094,
            -0.89805096, -0.92803597],
           [ 0.61619210,  0.60119957,  0.58620709,  ..., -0.82308841,
            -0.88305843, -0.89805096]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0676 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 123, vnnlib ID: 123 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.10229683, -25.38055038, -21.73574066, -24.28678703, -25.19532585,
         -24.57376480, -24.21175194, -26.78511238, -20.36679649, -26.62832260]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [535]; unstable size 535; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 289, 1, 535] with unstable size 288 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 535] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 535] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [288]; unstable size 288; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 288] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 288] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.20214999,  3.29560661, -0.48173261,  2.02197981,  2.71108198,
          2.06478977,  1.99369478,  3.83842278,  4.76781845]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.10229683, -25.38055038, -21.73574066, -24.28678703, -25.19532585,
         -24.57376480, -24.21175194, -26.78511238, -20.36679649, -26.62832260]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.90987015, -24.70122147, -20.82708359, -23.43597221, -24.32200050,
          -23.68591499, -23.38396645, -25.73447037, -20.12191963, -25.80022812],
         [-19.90987015, -24.70122147, -20.82708359, -23.43597221, -24.32200050,
          -23.68591499, -23.38396645, -25.73447037, -20.12191963, -25.80022812]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.21204948,  0.70516396]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0070 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0783 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 124, vnnlib ID: 124 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.82584620, -7.63018703, -7.73003864, -7.25304461, -6.31065321,
         -8.23791885, -6.43050718, -6.84701109, -9.17996407, -7.64501524]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [632]; unstable size 632; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 261, 1, 632] with unstable size 260 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 632] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 632] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 260] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.27221370, -1.34621954, -1.80931950, -2.15861130, -2.98624754,
         -1.27028799, -2.80886602, -2.57974672, -0.39991617]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.82584620, -7.63018703, -7.73003864, -7.25304461, -6.31065321,
         -8.23791885, -6.43050718, -6.84701109, -9.17996407, -7.64501524]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.82584524, -7.63018608, -7.73003769, -7.25304365, -6.31065226,
          -8.23791599, -6.43050575, -6.84701014, -9.17996311, -7.64501333],
         [-7.82584524, -7.63018608, -7.73003769, -7.25304365, -6.31065226,
          -8.23791599, -6.43050575, -6.84701014, -9.17996311, -7.64501333]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.18083191, -0.01482725,  0.08502436, -0.39196968, -1.33436108,
           0.59290266, -1.21450758, -0.79800320,  1.53494978]]],
       device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         ...,


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0760 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 125, vnnlib ID: 125 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.10437679,  -8.96013069,  -8.69070339,  -8.62474823,  -9.76555538,
          -8.77996826, -10.66582012,  -9.75414944,  -7.47076607,  -8.44103909]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [743]; unstable size 743; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 170, 1, 743] with unstable size 169 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 743] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 743] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [169]; unstable size 169; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 169] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 169] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.60137320, -0.36385378, -1.25714493, -1.13711548, -0.05323458,
         -1.18300915,  0.78644753, -0.01430035, -2.42923355]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.10437679,  -8.96013069,  -8.69070339,  -8.62474823,  -9.76555538,
          -8.77996826, -10.66582012,  -9.75414944,  -7.47076607,  -8.44103909]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.10437679,  -8.96013069,  -8.69070339,  -8.62474823,  -9.76555729,
           -8.77996826, -10.66582012,  -9.75414848,  -7.47076511,  -8.44103909],
         [ -8.10437679,  -8.96013069,  -8.69070339,  -8.62474823,  -9.76555729,
           -8.77996826, -10.66582012,  -9.75414848,  -7.47076511,  -8.44103909]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.33666229,  0.51909161,  0.24966431,  0.18370914,  1.32451820,
           0.33892918,  1.31310940, -0.97027397]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         ...,


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0868 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 126, vnnlib ID: 126 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.85289669, -8.00897789, -3.25385118, -4.58932209, -3.74074745,
         -4.14678431, -4.96510458, -4.05580473, -7.93344116, -6.89174938]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [508]; unstable size 508; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 508] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 508] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 508] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 185] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.07057762,  2.60909176, -1.19970727,  0.02767622, -0.45064336,
          0.08406529, -0.38396740,  2.78343749,  1.49663746]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.85289669, -8.00897789, -3.25385118, -4.58932209, -3.74074745,
         -4.14678431, -4.96510458, -4.05580473, -7.93344116, -6.89174938]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.85289764, -8.00897884, -3.25385094, -4.58932209, -3.74074745,
          -4.14678431, -4.96510506, -4.05580473, -7.93344021, -6.89175034],
         [-6.85289764, -8.00897884, -3.25385094, -4.58932209, -3.74074745,
          -4.14678431, -4.96510506, -4.05580473, -7.93344021, -6.89175034]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.48689651,  0.40603685,  0.31505728]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]],


         [[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]],


         [[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0783 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 127, vnnlib ID: 127 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.57729053, -10.22089481,  -8.00115299,  -7.89926720,  -8.22076607,
          -9.08212662,  -9.97586060,  -9.23946381,  -7.82561684,  -9.45760345]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [685]; unstable size 685; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 685] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 685] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 685] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 208] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.39561701,  1.13157201, -1.32989621, -1.52063823, -1.36703968,
         -0.59409899,  0.40751338, -0.57752180,  0.47539353]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.57729053, -10.22089481,  -8.00115299,  -7.89926720,  -8.22076607,
          -9.08212662,  -9.97586060,  -9.23946381,  -7.82561684,  -9.45760345]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.57729101, -10.22089481,  -8.00115299,  -7.89926624,  -8.22076702,
           -9.08212757,  -9.97586155,  -9.23946476,  -7.82561779,  -9.45760345],
         [ -7.57729101, -10.22089481,  -8.00115299,  -7.89926624,  -8.22076702,
           -9.08212757,  -9.97586155,  -9.23946476,  -7.82561779,  -9.45760345]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.24832678,  0.17553520,  0.07364845,  0.39514923,  1.25650978,
           1.41384697]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0829 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 128, vnnlib ID: 128 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.12257195, -8.18585014, -3.72392344, -4.82489967, -3.27657938,
         -4.91832876, -4.09014797, -4.34730959, -7.98648739, -6.16137838]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [563]; unstable size 563; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 239, 1, 563] with unstable size 238 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 563] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 563] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [238]; unstable size 238; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 238] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 238] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.90272856,  1.91782355, -1.66059661, -0.46604270, -2.21083927,
         -0.55527329, -1.51988912,  1.75675356, -0.03911448]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.12257195, -8.18585014, -3.72392344, -4.82489967, -3.27657938,
         -4.91832876, -4.09014797, -4.34730959, -7.98648739, -6.16137838]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.12257195, -8.18585014, -3.72392321, -4.82489920, -3.27657890,
          -4.91832876, -4.09014797, -4.34730911, -7.98648739, -6.16137838],
         [-5.12257195, -8.18585014, -3.72392321, -4.82489920, -3.27657890,
          -4.91832876, -4.09014797, -4.34730911, -7.98648739, -6.16137838]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.03242397, -0.36622477,  0.73475122, -0.81356907,  0.82818079,
           0.25716114,  2.07123041]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]],


         [[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]],


         [[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]],


         ...,


         [[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]],


         [[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]],


         [[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]]]],
       device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0808 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 129, vnnlib ID: 129 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.31356716, -13.91007519,  -9.13539219,  -8.59541893,  -8.22070026,
          -8.21194839, -10.18828583, -10.88986969, -10.20756531, -12.20699596]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [584]; unstable size 584; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 263, 1, 584] with unstable size 262 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 584] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 584] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [262]; unstable size 262; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 262] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 262] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.54147238,  3.51588011, -0.48492002, -0.11444461, -1.27845049,
          0.64233303,  1.06292820,  0.06253466,  1.78522778]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.31356716, -13.91007519,  -9.13539219,  -8.59541893,  -8.22070026,
          -8.21194839, -10.18828583, -10.88986969, -10.20756531, -12.20699596]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.32136536, -13.92663002,  -9.13717842,  -8.60724545,  -8.21953201,
           -8.22270298, -10.20281887, -10.89065933, -10.21816635, -12.22472954],
         [ -9.32136536, -13.92663002,  -9.13717842,  -8.60724545,  -8.21953201,
           -8.22270298, -10.20281887, -10.89065933, -10.21816635, -12.22472954]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.09866238,  0.91447544,  0.38454247, -0.00317097]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0046 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0677 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 130, vnnlib ID: 130 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.37966061, -10.86174870,  -6.27118492,  -7.18504333,  -4.88041210,
          -7.02919436,  -7.02008009,  -5.68175220, -12.22475624,  -9.74924088]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [468]; unstable size 468; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 468] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 468] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 468] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 197] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.92446518,  1.83843052, -1.80397642, -0.25452483, -3.28706455,
         -1.12619340, -2.72712803,  3.37554169,  1.23327672]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.37966061, -10.86174870,  -6.27118492,  -7.18504333,  -4.88041210,
          -7.02919436,  -7.02008009,  -5.68175220, -12.22475624,  -9.74924088]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.37965965, -10.86174679,  -6.27118492,  -7.18504381,  -4.88041258,
           -7.02919531,  -7.02007914,  -5.68175268, -12.22475624,  -9.74924088],
         [ -9.37965965, -10.86174679,  -6.27118492,  -7.18504381,  -4.88041258,
           -7.02919531,  -7.02007914,  -5.68175268, -12.22475624,  -9.74924088]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.75801039,  0.15584850, -2.14878273, -0.00911617, -1.34744263]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0755 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 131, vnnlib ID: 131 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.35881138, -13.11242390,  -9.13916874, -10.32992744,  -9.78460979,
         -10.37751198, -11.98755741, -12.49197388,  -5.29605007, -12.74240780]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [574]; unstable size 574; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 574] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 574] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 574] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 192] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.78351957, 6.23856449, 2.09941626, 3.41462398, 2.79624486, 3.32999039,
         5.10516310, 5.41959763, 6.04746485]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0735 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 132, vnnlib ID: 132 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.14653015,  -8.83935356, -17.06118393, -16.39709473, -15.91677952,
         -18.22977066, -16.70629501, -16.62640762, -11.32539654,  -9.82044125]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [660]; unstable size 660; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 143, 1, 660] with unstable size 142 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 660] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 660] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [142]; unstable size 142; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 142] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 142] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.91259909,  6.46374893,  5.83736467,  5.29915905,  7.56130886,
          6.20057487,  5.96402359,  1.06313705, -0.07201374]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.14653015,  -8.83935356, -17.06118393, -16.39709473, -15.91677952,
         -18.22977066, -16.70629501, -16.62640762, -11.32539654,  -9.82044125]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.10it/s]100%|██████████| 1/1 [00:00<00:00,  9.09it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.66808319,  -8.80762291, -16.54941559, -15.81319427, -15.26967907,
          -17.61644936, -16.17386246, -15.95940590, -11.03059864,  -9.22308636]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.41546345]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1129 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 39.90987777709961
alpha/beta optimization time: 1.2008624076843262
initial alpha-crown bounds: tensor([[ 0.98155355,  6.54999447,  5.92335892,  5.37160444,  7.64936399,
          6.28047180,  6.04217720,  1.13449574, -0.02314544]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.023145437240600586
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.60474252700806
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.60469579696655
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.60467314720154
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.60465097427368
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.60463213920593
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.60461282730103
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.60459446907043
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.60457468032837
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 198.60455536842346
Verifying property 8 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02314544]], device='cuda:0') need to verify.
Model prediction is: tensor([-11.14653015,  -8.83935356, -17.06118393, -16.39709473, -15.91677952,
        -18.22977066, -16.70629501, -16.62640762, -11.32539654,  -9.82044125],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02314544]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 660
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 139
Node /15 input 0: size torch.Size([100]) unstable 12
-----------------
# of unstable neurons: 811
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010514259338378906
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023143529891967773
10 lb beta sum: 0.0, worst -0.023145437240600586
Time: prepare 0.0002    bound 0.0863    transfer 0.0001    finalize 0.0001    func 0.0868    
Accumulated time: func 0.0868    prepare 0.0002    bound 0.0863    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 32] 
split level 1: [/input-12, 37] 
split level 2: [/input-8, 1436] 
split level 3: [/input-12, 25] 
split level 4: [/input-8, 796] 
split level 5: [/input-8, 1438] 
split level 6: [/input-12, 26] 
split level 7: [/input-8, 987] 
split level 8: [/input-12, 90] 
split level 9: [/input-12, 11] 
split level 10: [/input-8, 563] 
split level 11: [/input-8, 812] 
split level 12: [/input-8, 690] 
split level 13: [/input-8, 1076] 
split level 14: [/input-8, 821] 
split level 15: [/input-8, 169] 
split level 16: [/input-8, 1425] 
split level 17: [/input, 360] 
split level 18: [/input-12, 78] 
split level 19: [/input-12, 60] 
split level 20: [/input-8, 1646] 
split level 21: [/input-8, 788] 
split level 22: [/input-8, 1964] 
split level 23: [/input-8, 1326] 
split level 24: [/input-8, 797] 
split level 25: [/input, 1416] 
split level 26: [/input-8, 1947] 
split level 27: [/input-8, 1322] 
split level 28: [/input-8, 179] 
split level 29: [/input, 2454] 
split level 30: [/input, 364] 
split level 31: [/input, 2471] 
split level 32: [/input-8, 1519] 
split level 33: [/input-8, 787] 
split level 34: [/input, 420] 
split level 35: [/input, 3272] 
split level 36: [/input-8, 884] 
split level 37: [/input, 4065] 
split level 38: [/input, 3239] 
split level 39: [/input-8, 681] 
split level 40: [/input, 2184] 
split level 41: [/input, 343] 
split level 42: [/input, 1617] 
split level 43: [/input-8, 1962] 
split level 44: [/input-8, 1454] 
split level 45: [/input, 449] 
split level 46: [/input, 3269] 
split level 47: [/input-8, 1520] 
split level 48: [/input, 448] 
split level 49: [/input, 645] 
split level 50: [/input, 1495] 
split level 51: [/input-8, 1305] 
split level 52: [/input-8, 571] 
split level 53: [/input, 421] 
split level 54: [/input, 1431] 
split level 55: [/input-8, 573] 
split level 56: [/input, 4066] 
split level 57: [/input, 398] 
split level 58: [/input-8, 1289] 
split level 59: [/input-8, 1318] 
split level 60: [/input, 3287] 
split level 61: [/input, 3383] 
split level 62: [/input, 380] 
split level 63: [/input, 1404] 
split level 64: [/input, 1618] 
split level 65: [/input, 2121] 
split level 66: [/input, 1494] 
split level 67: [/input, 419] 
split level 68: [/input, 2469] 
split level 69: [/input, 404] 
split level 70: [/input, 422] 
split level 71: [/input-8, 570] 
split level 72: [/input, 2505] 
split level 73: [/input-8, 1508] 
split level 74: [/input, 2489] 
split level 75: [/input-8, 1505] 
split level 76: [/input, 2266] 
split level 77: [/input, 1769] 
split level 78: [/input, 3541] 
split level 79: [/input, 2507] 
split level 80: [/input, 3253] 
split level 81: [/input-8, 1353] 
split level 82: [/input, 2625] 
split level 83: [/input, 3221] 
split level 84: [/input, 3257] 
split level 85: [/input, 3527] 
split level 86: [/input, 3283] 
split level 87: [/input, 1447] 
split level 88: [/input-8, 2010] 
split level 89: [/input-8, 1039] 
split level 90: [/input-8, 540] 
split level 91: [/input, 1185] 
split level 92: [/input, 1500] 
split level 93: [/input, 2120] 
split level 94: [/input, 3166] 
split level 95: [/input, 2119] 
split level 96: [/input, 2200] 
split level 97: [/input-8, 822] 
split level 98: [/input, 4064] 
split level 99: [/input, 2504] 
split level 100: [/input, 110] 
split level 101: [/input, 1509] 
split level 102: [/input, 1367] 
split level 103: [/input, 3865] 
split level 104: [/input, 3219] 
split level 105: [/input, 3302] 
split level 106: [/input, 3385] 
split level 107: [/input, 929] 
split level 108: [/input, 4014] 
split level 109: [/input, 2538] 
split level 110: [/input, 1379] 
split level 111: [/input, 415] 
split level 112: [/input, 3547] 
split level 113: [/input-8, 679] 
split level 114: [/input, 3386] 
split level 115: [/input, 1451] 
split level 116: [/input, 3384] 
split level 117: [/input, 3542] 
split level 118: [/input, 1770] 
split level 119: [/input, 2530] 
split level 120: [/input, 1381] 
split level 121: [/input, 1403] 
split level 122: [/input, 2104] 
split level 123: [/input, 3284] 
split level 124: [/input, 41] 
split level 125: [/input, 227] 
split level 126: [/input, 3305] 
split level 127: [/input, 3291] 
split level 128: [/input, 3308] 
split level 129: [/input, 3282] 
split level 130: [/input, 3866] 
split level 131: [/input, 2523] 
split level 132: [/input, 373] 
split level 133: [/input, 3345] 
split level 134: [/input, 2346] 
split level 135: [/input, 3329] 
split level 136: [/input, 3150] 
split level 137: [/input, 3881] 
split level 138: [/input, 2534] 
split level 139: [/input, 2332] 
split level 140: [/input-8, 546] 
split level 141: [/input, 3556] 
split level 142: [/input, 2514] 
split level 143: [/input, 4067] 
split level 144: [/input, 4032] 
split level 145: [/input, 40] 
split level 146: [/input, 2345] 
split level 147: [/input, 2146] 
split level 148: [/input, 1335] 
split level 149: [/input, 3868] 
split level 150: [/input, 2257] 
split level 151: [/input, 3559] 
split level 152: [/input, 3884] 
split level 153: [/input, 3867] 
split level 154: [/input, 3915] 
split level 155: [/input, 2099] 
split level 156: [/input, 3883] 
split level 157: [/input, 2519] 
split level 158: [/input, 3304] 
split level 159: [/input, 2155] 
split level 160: [/input, 2397] 
split level 161: [/input, 3934] 
split level 162: [/input, 3165] 
split level 163: [/input, 3364] 
split level 164: [/input, 2329] 
split level 165: [/input-8, 1378] 
split level 166: [/input, 2539] 
split level 167: [/input, 2347] 
split level 168: [/input, 3864] 
split level 169: [/input-8, 1354] 
split level 170: [/input, 3199] 
split level 171: [/input, 2331] 
split level 172: [/input, 3330] 
split level 173: [/input, 3097] 
split level 174: [/input, 2348] 
split level 175: [/input, 3882] 
split level 176: [/input, 899] 
split level 177: [/input, 713] 
split level 178: [/input, 3863] 
split level 179: [/input, 3202] 
split level 180: [/input, 3870] 
split level 181: [/input, 3861] 
split level 182: [/input, 3363] 
split level 183: [/input, 3879] 
split level 184: [/input, 3354] 
split level 185: [/input, 3880] 
split level 186: [/input, 87] 
split level 187: [/input, 1775] 
split level 188: [/input, 3296] 
split level 189: [/input, 3862] 
split level 190: [/input, 3332] 
split level 191: [/input, 3860] 
split level 192: [/input, 2327] 
split level 193: [/input, 3349] 
split level 194: [/input, 1282] 
split level 195: [/input, 498] 
split level 196: [/input, 3398] 
split level 197: [/input, 2856] 
split level 198: [/input, 1515] 
split level 199: [/input, 2855] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023122072219848633
10 lb beta sum: 0.0, worst -0.02313089370727539
Time: prepare 0.0117    bound 0.0966    transfer 0.0008    finalize 0.0029    func 0.1146    
Accumulated time: func 0.2014    prepare 0.0216    bound 0.1830    transfer 0.0009    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.22516036) min lb tensor(-0.02312016)
Number of Verified Splits: 17 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011338233947753906 
BICCOS Cumulative time: 0.011338233947753906
Preprocessing time: 0.009968757629394531 Inference time: 0.0006906986236572266 Add cuts time: 0.00021886825561523438 Cut analysis time: 0.00045990943908691406
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5024    set_bounds 0.0089    solve 0.1147    add 0.0099    
Accumulated time: pickout 0.0003    decision 0.5024    set_bounds 0.0089    solve 0.1147    add 0.0099    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 32] 
split level 1: [/input-12, 37] 
split level 2: [/input-8, 1436] 
split level 3: [/input-12, 25] 
split level 4: [/input-8, 987] 
split level 5: [/input-12, 90] 
split level 6: [/input-12, 11] 
split level 7: [/input-8, 690] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.21521127223968506

all verified at 0th iter
Time: prepare 0.0050    bound 0.0041    transfer 0.0005    finalize 0.0026    func 0.0139    
Accumulated time: func 0.2153    prepare 0.0270    bound 0.1870    transfer 0.0015    finalize 0.0056    
all_split False
======================Cut inference begins======================
max lb tensor(0.41927671) min lb tensor(0.21521127)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.007133007049560547 
BICCOS Cumulative time: 0.018471240997314453
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.0214    set_bounds 0.0205    solve 0.0139    add 0.0001    
Accumulated time: pickout 0.0007    decision 0.5239    set_bounds 0.0294    solve 0.1286    add 0.0100    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.823453426361084

Result: safe in 2.5006 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 133, vnnlib ID: 133 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.25358391, -24.01944351, -13.62016106, -15.25064659, -19.34745598,
         -15.90201569, -19.20198250, -17.42230415, -21.89736557, -21.49999237]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [554]; unstable size 554; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 98, 1, 554] with unstable size 97 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 554] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 554] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [97]; unstable size 97; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 97] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 97] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.17917991, 9.69885063, 1.01258564, 5.11244965, 1.56947923, 4.91068268,
         3.15387392, 7.60085869, 7.21997929]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0763 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 134, vnnlib ID: 134 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.00686455, -14.29141140, -14.37695026, -15.86271286, -15.28532314,
         -17.60468292, -14.91024494, -17.65866089, -10.37097645, -14.77221203]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [752]; unstable size 752; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 224, 1, 752] with unstable size 223 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 752] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 752] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [223]; unstable size 223; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 223] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 223] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.77094555,  1.88772810,  3.21973848,  2.86656594,  4.79594135,
          2.18563223,  4.89809752, -1.79894912,  2.22324061]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.00686455, -14.29141140, -14.37695026, -15.86271286, -15.28532314,
         -17.60468292, -14.91024494, -17.65866089, -10.37097645, -14.77221203]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.00686455, -14.29141140, -14.37695026, -15.86271286, -15.28532314,
          -17.60468292, -14.91024494, -17.65866089, -10.37097645, -14.77221203]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.63588810]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.15396857,  1.01111114,  1.01111114,  ...,  1.02698421,
             1.04285717,  1.10634947],
           [ 1.02698421,  0.94761908,  0.94761908,  ...,  1.12222254,
             1.12222254,  1.16984153],
           [ 0.99523818,  0.91587305,  0.86825401,  ...,  1.12222254,
             1.13809550,  1.16984153],
           ...,
           [-0.14761895, -0.41746020, -0.43333322,  ..., -0.36984116,
            -0.33809513, -0.41746020],
           [-0.30634910, -0.56031746, -0.57619047,  ..., -0.68730158,
            -0.54444444, -0.36984116],
           [-0.22698402, -0.33809513, -0.40158719,  ..., -0.59206349,
            -0.32222211, -0.14761895]],

          [[ 1.20772982,  1.06280196,  1.06280196,  ...,  1.07890511,
             1.09500813,  1.15942061],
           [ 1.07890511,  0.99838978,  0.99838978,  ...,  1.17552364,
             1.17552364,  1.22383285],
           [ 1.04669893,  0.96618366,  0.91787446,  ...,  1.17552364,
             1.19162667,  1.22383285],
           ...,
           [-0.11272129, -0.38647330, -0.40257636,  ..., -0.33816412,
            -0.30595800, -0.38647330],
           [-0.27375188, -0.53140092, -0.54750401,  ..., -0.66022539,
            -0.51529789, -0.33816412],
           [-0.19323659, -0.30595800, -0.37037024,  ..., -0.56360704,
            -0.28985494, -0.11272129]],

          [[ 1.26086998,  1.12593722,  1.12593722,  ...,  1.14092970,
             1.15592217,  1.21589243],
           [ 1.14092970,  1.06596720,  1.06596720,  ...,  1.23088503,
             1.23088503,  1.27586246],
           [ 1.11094475,  1.03598225,  0.99100471,  ...,  1.23088503,
             1.24587750,  1.27586246],
           ...,
           [ 0.03148442, -0.22338814, -0.23838064,  ..., -0.17841063,
            -0.14842562, -0.22338814],
           [-0.11844061, -0.35832080, -0.37331331,  ..., -0.47826082,
            -0.34332830, -0.17841063],
           [-0.04347810, -0.14842562, -0.20839565,  ..., -0.38830581,
            -0.13343313,  0.03148442]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0771 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 135, vnnlib ID: 135 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.44892406,  -4.04770756, -11.04793358,  -9.86121178,  -9.30945015,
         -10.61656761, -11.13577747,  -9.78641891,  -8.20079136,  -4.34282255]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [511]; unstable size 511; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 511] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 511] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 511] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 203] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.79137325,  4.81029177,  3.58750868,  3.09708118,  4.12102747,
          5.00578594,  3.13694382,  2.81165552, -0.60362887]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.44892406,  -4.04770756, -11.04793358,  -9.86121178,  -9.30945015,
         -10.61656761, -11.13577747,  -9.78641891,  -8.20079136,  -4.34282255]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.17292595, -3.44921255, -9.58248615, -8.45668793, -7.94491386,
          -9.12796783, -9.80561256, -8.33679199, -7.18043041, -3.17307949]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.27613306]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0083 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0548 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 136, vnnlib ID: 136 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.25000286, -9.54972458, -6.18170929, -5.75074911, -6.05999041,
         -5.86923456, -7.27043962, -7.67426729, -6.16280842, -8.88309860]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [683]; unstable size 683; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 150, 1, 683] with unstable size 149 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 683] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 683] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [149]; unstable size 149; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 149] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.00514364, 1.08236098, 0.27113563, 0.77234662, 0.24157703, 1.78406560,
         1.89451599, 0.67536879, 3.36466599]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0693 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 137, vnnlib ID: 137 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.10846710, -8.76792812, -2.56949711, -3.15299773, -2.80712223,
         -3.16891909, -2.61646676, -4.73773241, -8.38235092, -7.32381153]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [508]; unstable size 508; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 298, 1, 508] with unstable size 297 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 508] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 508] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [297]; unstable size 297; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 297] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 297] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.63653481,  3.73463750, -1.26144528, -0.64267200, -1.08236933,
         -0.74575412,  0.71406746,  3.06178951,  2.80589008]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.10846710, -8.76792812, -2.56949711, -3.15299773, -2.80712223,
         -3.16891909, -2.61646676, -4.73773241, -8.38235092, -7.32381153]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.10846806, -8.76792812, -2.56949711, -3.15299821, -2.80712175,
          -3.16891956, -2.61646700, -4.73773289, -8.38235092, -7.32381201],
         [-6.10846806, -8.76792812, -2.56949711, -3.15299821, -2.80712175,
          -3.16891956, -2.61646700, -4.73773289, -8.38235092, -7.32381201]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04696989,  0.53653121,  0.19065475,  0.55245256]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.24285710, -1.30634916, -1.09999990,  ...,  0.05873025,
            -0.46507925, -0.57619047],
           [-1.11587298, -1.16349196, -1.09999990,  ..., -0.24285704,
            -0.65555555, -0.79841268],
           [-1.19523799, -1.13174593, -0.84603173,  ..., -0.14761895,
            -0.84603173, -0.75079364],
           ...,
           [ 1.15396857, -0.57619047, -1.44920623,  ..., -0.70317459,
            -0.68730158, -0.48095238],
           [ 1.63015902,  0.58253974, -0.02063482,  ..., -0.86190474,
            -0.79841268, -0.43333322],
           [ 1.67777801,  1.39206374,  1.16984153,  ..., -1.03650784,
            -1.08412695, -0.89365077]],

          [[-1.11111104, -1.20772946, -1.01449275,  ...,  0.08051541,
            -0.53140092, -0.62801927],
           [-1.01449275, -1.06280184, -0.98228657,  ..., -0.22544271,
            -0.64412236, -0.77294683],
           [-1.11111104, -1.01449275, -0.72463763,  ..., -0.11272129,
            -0.77294683, -0.72463763],
           ...,
           [ 0.99838978, -0.66022539, -1.30434775,  ..., -0.78904986,
            -0.85346210, -0.66022539],
           [ 1.52979100,  0.43478271, -0.06441211,  ..., -0.80515295,
            -0.77294683, -0.57971013],
           [ 1.64251232,  1.27214205,  0.95008057,  ..., -0.93397743,
            -1.04669881, -0.96618354]],

          [[-0.55322337, -0.70314842, -0.55322337,  ...,  0.60119957,
            -0.17841063, -0.23838064],
           [-0.52323836, -0.55322337, -0.46326834,  ...,  0.33133450,
            -0.17841063, -0.35832080],
           [-0.64317840, -0.58320838, -0.22338814,  ...,  0.40629703,
            -0.20839565, -0.28335828],
           ...,
           [ 1.08095968, -0.31334329, -0.65817088,  ..., -0.35832080,
            -0.56821585, -0.38830581],
           [ 1.53073502,  0.60119957,  0.40629703,  ..., -0.26836565,
            -0.35832080, -0.22338814],
           [ 1.66566753,  1.26086998,  1.03598225,  ..., -0.31334329,
            -0.55322337, -0.52323836]]],


         [[[-1.24285710, -1.30634916, -1.09999990,  ...,  0.05873025,
            -0.46507925, -0.57619047],
           [-1.11587298, -1.16349196, -1.09999990,  ..., -0.24285704,
            -0.65555555, -0.79841268],
           [-1.19523799, -1.13174593, -0.84603173,  ..., -0.14761895,
            -0.84603173, -0.75079364],
           ...,
           [ 1.15396857, -0.57619047, -1.44920623,  ..., -0.70317459,
            -0.68730158, -0.48095238],
           [ 1.63015902,  0.58253974, -0.02063482,  ..., -0.86190474,
            -0.79841268, -0.43333322],
           [ 1.67777801,  1.39206374,  1.16984153,  ..., -1.03650784,
            -1.08412695, -0.89365077]],

          [[-1.11111104, -1.20772946, -1.01449275,  ...,  0.08051541,
            -0.53140092, -0.62801927],
           [-1.01449275, -1.06280184, -0.98228657,  ..., -0.22544271,
            -0.64412236, -0.77294683],
           [-1.11111104, -1.01449275, -0.72463763,  ..., -0.11272129,
            -0.77294683, -0.72463763],
           ...,
           [ 0.99838978, -0.66022539, -1.30434775,  ..., -0.78904986,
            -0.85346210, -0.66022539],
           [ 1.52979100,  0.43478271, -0.06441211,  ..., -0.80515295,
            -0.77294683, -0.57971013],
           [ 1.64251232,  1.27214205,  0.95008057,  ..., -0.93397743,
            -1.04669881, -0.96618354]],

          [[-0.55322337, -0.70314842, -0.55322337,  ...,  0.60119957,
            -0.17841063, -0.23838064],
           [-0.52323836, -0.55322337, -0.46326834,  ...,  0.33133450,
            -0.17841063, -0.35832080],
           [-0.64317840, -0.58320838, -0.22338814,  ...,  0.40629703,
            -0.20839565, -0.28335828],
           ...,
           [ 1.08095968, -0.31334329, -0.65817088,  ..., -0.35832080,
            -0.56821585, -0.38830581],
           [ 1.53073502,  0.60119957,  0.40629703,  ..., -0.26836565,
            -0.35832080, -0.22338814],
           [ 1.66566753,  1.26086998,  1.03598225,  ..., -0.31334329,
            -0.55322337, -0.52323836]]],


         [[[-1.24285710, -1.30634916, -1.09999990,  ...,  0.05873025,
            -0.46507925, -0.57619047],
           [-1.11587298, -1.16349196, -1.09999990,  ..., -0.24285704,
            -0.65555555, -0.79841268],
           [-1.19523799, -1.13174593, -0.84603173,  ..., -0.14761895,
            -0.84603173, -0.75079364],
           ...,
           [ 1.15396857, -0.57619047, -1.44920623,  ..., -0.70317459,
            -0.68730158, -0.48095238],
           [ 1.63015902,  0.58253974, -0.02063482,  ..., -0.86190474,
            -0.79841268, -0.43333322],
           [ 1.67777801,  1.39206374,  1.16984153,  ..., -1.03650784,
            -1.08412695, -0.89365077]],

          [[-1.11111104, -1.20772946, -1.01449275,  ...,  0.08051541,
            -0.53140092, -0.62801927],
           [-1.01449275, -1.06280184, -0.98228657,  ..., -0.22544271,
            -0.64412236, -0.77294683],
           [-1.11111104, -1.01449275, -0.72463763,  ..., -0.11272129,
            -0.77294683, -0.72463763],
           ...,
           [ 0.99838978, -0.66022539, -1.30434775,  ..., -0.78904986,
            -0.85346210, -0.66022539],
           [ 1.52979100,  0.43478271, -0.06441211,  ..., -0.80515295,
            -0.77294683, -0.57971013],
           [ 1.64251232,  1.27214205,  0.95008057,  ..., -0.93397743,
            -1.04669881, -0.96618354]],

          [[-0.55322337, -0.70314842, -0.55322337,  ...,  0.60119957,
            -0.17841063, -0.23838064],
           [-0.52323836, -0.55322337, -0.46326834,  ...,  0.33133450,
            -0.17841063, -0.35832080],
           [-0.64317840, -0.58320838, -0.22338814,  ...,  0.40629703,
            -0.20839565, -0.28335828],
           ...,
           [ 1.08095968, -0.31334329, -0.65817088,  ..., -0.35832080,
            -0.56821585, -0.38830581],
           [ 1.53073502,  0.60119957,  0.40629703,  ..., -0.26836565,
            -0.35832080, -0.22338814],
           [ 1.66566753,  1.26086998,  1.03598225,  ..., -0.31334329,
            -0.55322337, -0.52323836]]],


         [[[-1.24285710, -1.30634916, -1.09999990,  ...,  0.05873025,
            -0.46507925, -0.57619047],
           [-1.11587298, -1.16349196, -1.09999990,  ..., -0.24285704,
            -0.65555555, -0.79841268],
           [-1.19523799, -1.13174593, -0.84603173,  ..., -0.14761895,
            -0.84603173, -0.75079364],
           ...,
           [ 1.15396857, -0.57619047, -1.44920623,  ..., -0.70317459,
            -0.68730158, -0.48095238],
           [ 1.63015902,  0.58253974, -0.02063482,  ..., -0.86190474,
            -0.79841268, -0.43333322],
           [ 1.67777801,  1.39206374,  1.16984153,  ..., -1.03650784,
            -1.08412695, -0.89365077]],

          [[-1.11111104, -1.20772946, -1.01449275,  ...,  0.08051541,
            -0.53140092, -0.62801927],
           [-1.01449275, -1.06280184, -0.98228657,  ..., -0.22544271,
            -0.64412236, -0.77294683],
           [-1.11111104, -1.01449275, -0.72463763,  ..., -0.11272129,
            -0.77294683, -0.72463763],
           ...,
           [ 0.99838978, -0.66022539, -1.30434775,  ..., -0.78904986,
            -0.85346210, -0.66022539],
           [ 1.52979100,  0.43478271, -0.06441211,  ..., -0.80515295,
            -0.77294683, -0.57971013],
           [ 1.64251232,  1.27214205,  0.95008057,  ..., -0.93397743,
            -1.04669881, -0.96618354]],

          [[-0.55322337, -0.70314842, -0.55322337,  ...,  0.60119957,
            -0.17841063, -0.23838064],
           [-0.52323836, -0.55322337, -0.46326834,  ...,  0.33133450,
            -0.17841063, -0.35832080],
           [-0.64317840, -0.58320838, -0.22338814,  ...,  0.40629703,
            -0.20839565, -0.28335828],
           ...,
           [ 1.08095968, -0.31334329, -0.65817088,  ..., -0.35832080,
            -0.56821585, -0.38830581],
           [ 1.53073502,  0.60119957,  0.40629703,  ..., -0.26836565,
            -0.35832080, -0.22338814],
           [ 1.66566753,  1.26086998,  1.03598225,  ..., -0.31334329,
            -0.55322337, -0.52323836]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0870 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 138, vnnlib ID: 138 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.98990536, -11.53243732,  -9.55218792,  -9.34306908,  -9.59223843,
         -10.21041489,  -9.89879131, -10.73451996, -10.49936199,  -8.82808018]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [578]; unstable size 578; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 578] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 578] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 578] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 188] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 9.28026557e-01, -4.45046186e-01, -7.57262230e-01, -6.84045553e-01,
         -8.51631165e-04, -3.69360447e-01,  3.41859579e-01,  4.21400249e-01,
         -1.54338706e+00]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.98990536, -11.53243732,  -9.55218792,  -9.34306908,  -9.59223843,
         -10.21041489,  -9.89879131, -10.73451996, -10.49936199,  -8.82808018]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.98990536, -11.53243637,  -9.55218792,  -9.34306812,  -9.59223938,
          -10.21041393,  -9.89879227, -10.73451996, -10.49936199,  -8.82808018],
         [ -8.98990536, -11.53243637,  -9.55218792,  -9.34306812,  -9.59223938,
          -10.21041393,  -9.89879227, -10.73451996, -10.49936199,  -8.82808018]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.56228256,  0.35316277,  0.60233402,  1.22050858,  0.90888691,
          -0.16182518]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]],


         [[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]],


         [[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]],


         [[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]],


         [[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]],


         [[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0798 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 139, vnnlib ID: 139 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.46985912, -9.78631687, -3.83598518, -5.51694536, -3.54354000,
         -5.34781790, -2.52311063, -5.68112326, -9.51543331, -9.21476460]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [439]; unstable size 439; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 276, 1, 439] with unstable size 275 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 439] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 439] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [275]; unstable size 275; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 275] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 275] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.63732028,  4.43945551, -0.32903957,  1.63714933, -0.59455538,
          1.22534406,  1.17066205,  4.56741524,  4.21444511]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.46985912, -9.78631687, -3.83598518, -5.51694536, -3.54354000,
         -5.34781790, -2.52311063, -5.68112326, -9.51543331, -9.21476460]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.91it/s]100%|██████████| 1/1 [00:00<00:00,  8.90it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.29665041, -9.85951042, -3.74907804, -5.51449394, -3.18303251,
          -5.30622292, -2.97571468, -5.53970671, -9.34093189, -9.30280685],
         [-7.29665041, -9.85951042, -3.74907804, -5.51449394, -3.18303251,
          -5.30622292, -2.97571468, -5.53970671, -9.34093189, -9.30280685]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.77336335, 0.20731783]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1152 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.830381393432617
alpha/beta optimization time: 1.2246668338775635
initial alpha-crown bounds: tensor([[ 2.76347327,  4.57243681, -0.24465656,  1.68950558, -0.50626135,
          1.28860593,  1.25143123,  4.69473553,  4.32111073]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.5062613487243652
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.58410906791687
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.58406901359558
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.5840458869934
Verifying property 2 with 1 instances.
##### Instance 139 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.24465656]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.46985912, -9.78631687, -3.83598518, -5.51694536, -3.54354000,
        -5.34781790, -2.52311063, -5.68112326, -9.51543331, -9.21476460],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.24465656]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 439
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 269
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 731
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010037422180175781
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24465274810791016
10 lb beta sum: 0.0, worst -0.24466323852539062
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0527    transfer 0.0001    finalize 0.0001    func 0.0532    
Accumulated time: func 0.0532    prepare 0.0002    bound 0.0527    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 38] 
split level 2: [/input-12, 10] 
split level 3: [/input-12, 60] 
split level 4: [/input-12, 51] 
split level 5: [/input-12, 26] 
split level 6: [/input-12, 1] 
split level 7: [/input-12, 17] 
split level 8: [/input-12, 25] 
split level 9: [/input-12, 92] 
split level 10: [/input-12, 68] 
split level 11: [/input-8, 850] 
split level 12: [/input-12, 33] 
split level 13: [/input-8, 1828] 
split level 14: [/input-8, 923] 
split level 15: [/input-8, 932] 
split level 16: [/input-8, 88] 
split level 17: [/input-8, 95] 
split level 18: [/input-8, 859] 
split level 19: [/input-8, 1902] 
split level 20: [/input-8, 809] 
split level 21: [/input-8, 85] 
split level 22: [/input-8, 867] 
split level 23: [/input-8, 1370] 
split level 24: [/input-8, 1427] 
split level 25: [/input-8, 666] 
split level 26: [/input-8, 1362] 
split level 27: [/input-8, 674] 
split level 28: [/input-8, 988] 
split level 29: [/input-8, 292] 
split level 30: [/input-8, 1497] 
split level 31: [/input-8, 933] 
split level 32: [/input-8, 291] 
split level 33: [/input-8, 1357] 
split level 34: [/input-8, 985] 
split level 35: [/input-8, 485] 
split level 36: [/input-8, 682] 
split level 37: [/input-8, 1829] 
split level 38: [/input-8, 858] 
split level 39: [/input-8, 522] 
split level 40: [/input-8, 491] 
split level 41: [/input-8, 1364] 
split level 42: [/input-8, 660] 
split level 43: [/input-8, 1307] 
split level 44: [/input-8, 80] 
split level 45: [/input-8, 531] 
split level 46: [/input-8, 1373] 
split level 47: [/input-8, 542] 
split level 48: [/input-8, 1019] 
split level 49: [/input-8, 1021] 
split level 50: [/input-8, 989] 
split level 51: [/input-8, 994] 
split level 52: [/input-8, 1894] 
split level 53: [/input-8, 1306] 
split level 54: [/input-8, 2008] 
split level 55: [/input-8, 1876] 
split level 56: [/input-8, 1873] 
split level 57: [/input-8, 541] 
split level 58: [/input-8, 1910] 
split level 59: [/input-8, 1426] 
split level 60: [/input-8, 1428] 
split level 61: [/input, 1674] 
split level 62: [/input-8, 427] 
split level 63: [/input-8, 66] 
split level 64: [/input-8, 110] 
split level 65: [/input-8, 1429] 
split level 66: [/input-8, 1886] 
split level 67: [/input-8, 1486] 
split level 68: [/input-8, 1495] 
split level 69: [/input-8, 530] 
split level 70: [/input-8, 817] 
split level 71: [/input-8, 89] 
split level 72: [/input-8, 972] 
split level 73: [/input-8, 1515] 
split level 74: [/input-8, 1420] 
split level 75: [/input-8, 918] 
split level 76: [/input-8, 1012] 
split level 77: [/input-8, 1301] 
split level 78: [/input-8, 307] 
split level 79: [/input-8, 1874] 
split level 80: [/input-8, 1291] 
split level 81: [/input-8, 1433] 
split level 82: [/input, 1603] 
split level 83: [/input-8, 1498] 
split level 84: [/input-8, 841] 
split level 85: [/input, 1671] 
split level 86: [/input-8, 1421] 
split level 87: [/input-8, 1506] 
split level 88: [/input-8, 1437] 
split level 89: [/input-8, 1885] 
split level 90: [/input-8, 973] 
split level 91: [/input-8, 1142] 
split level 92: [/input-8, 893] 
split level 93: [/input-8, 1869] 
split level 94: [/input-8, 1425] 
split level 95: [/input-8, 981] 
split level 96: [/input-8, 658] 
split level 97: [/input-8, 297] 
split level 98: [/input-8, 1139] 
split level 99: [/input, 1637] 
split level 100: [/input-8, 849] 
split level 101: [/input-8, 942] 
split level 102: [/input-8, 637] 
split level 103: [/input-8, 1011] 
split level 104: [/input, 482] 
split level 105: [/input-8, 1081] 
split level 106: [/input-8, 73] 
split level 107: [/input-8, 2024] 
split level 108: [/input-8, 953] 
split level 109: [/input-8, 1860] 
split level 110: [/input-8, 1911] 
split level 111: [/input-8, 565] 
split level 112: [/input-8, 1811] 
split level 113: [/input-8, 111] 
split level 114: [/input-8, 1417] 
split level 115: [/input-8, 916] 
split level 116: [/input-8, 65] 
split level 117: [/input, 1705] 
split level 118: [/input-8, 127] 
split level 119: [/input-8, 1352] 
split level 120: [/input-8, 1861] 
split level 121: [/input-8, 635] 
split level 122: [/input-8, 945] 
split level 123: [/input, 1669] 
split level 124: [/input-8, 1867] 
split level 125: [/input, 2169] 
split level 126: [/input-8, 495] 
split level 127: [/input-8, 2009] 
split level 128: [/input, 1721] 
split level 129: [/input-8, 1865] 
split level 130: [/input-8, 494] 
split level 131: [/input, 1641] 
split level 132: [/input-8, 471] 
split level 133: [/input-8, 436] 
split level 134: [/input, 1654] 
split level 135: [/input-8, 116] 
split level 136: [/input-8, 2000] 
split level 137: [/input, 2698] 
split level 138: [/input-8, 470] 
split level 139: [/input, 2291] 
split level 140: [/input-8, 2033] 
split level 141: [/input-8, 1302] 
split level 142: [/input-8, 559] 
split level 143: [/input-8, 936] 
split level 144: [/input, 1602] 
split level 145: [/input-8, 1940] 
split level 146: [/input, 2116] 
split level 147: [/input-8, 1533] 
split level 148: [/input-8, 1039] 
split level 149: [/input-8, 1881] 
split level 150: [/input-8, 1360] 
split level 151: [/input, 570] 
split level 152: [/input-8, 786] 
split level 153: [/input, 2115] 
split level 154: [/input, 2168] 
split level 155: [/input-8, 943] 
split level 156: [/input-8, 2032] 
split level 157: [/input-8, 699] 
split level 158: [/input, 2185] 
split level 159: [/input-8, 1787] 
split level 160: [/input-8, 1490] 
split level 161: [/input-8, 1788] 
split level 162: [/input-8, 1947] 
split level 163: [/input-8, 281] 
split level 164: [/input-8, 415] 
split level 165: [/input, 2699] 
split level 166: [/input, 2343] 
split level 167: [/input-8, 885] 
split level 168: [/input-8, 1465] 
split level 169: [/input, 676] 
split level 170: [/input-8, 1530] 
split level 171: [/input-8, 1120] 
split level 172: [/input-8, 905] 
split level 173: [/input-8, 1440] 
split level 174: [/input-8, 122] 
split level 175: [/input-8, 574] 
split level 176: [/input-8, 1350] 
split level 177: [/input, 293] 
split level 178: [/input, 1524] 
split level 179: [/input-8, 949] 
split level 180: [/input, 95] 
split level 181: [/input, 2345] 
split level 182: [/input-8, 1232] 
split level 183: [/input-8, 1872] 
split level 184: [/input, 2592] 
split level 185: [/input-8, 1448] 
split level 186: [/input-8, 1975] 
split level 187: [/input, 2700] 
split level 188: [/input, 2613] 
split level 189: [/input-8, 426] 
split level 190: [/input, 4] 
split level 191: [/input, 2260] 
split level 192: [/input, 1352] 
split level 193: [/input, 4049] 
split level 194: [/input-8, 961] 
split level 195: [/input, 647] 
split level 196: [/input-8, 1812] 
split level 197: [/input, 11] 
split level 198: [/input, 2359] 
split level 199: [/input, 3841] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24462223052978516
10 lb beta sum: 0.0, worst -0.24462127685546875
Time: prepare 0.0116    bound 0.0961    transfer 0.0016    finalize 0.0026    func 0.1144    
Accumulated time: func 0.1676    prepare 0.0217    bound 0.1488    transfer 0.0017    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.41849804) min lb tensor(-0.24461079)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.010821104049682617 
BICCOS Cumulative time: 0.010821104049682617
Preprocessing time: 0.009957075119018555 Inference time: 0.0002319812774658203 Add cuts time: 8.416175842285156e-05 Cut analysis time: 0.0005478858947753906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22439 (1), -0.22387 (1), -0.22345 (1), -0.22296 (1), -0.22291 (1), -0.22271 (1), -0.22150 (1), -0.22144 (1), -0.22069 (1), -0.22037 (1), -0.22016 (1), -0.21998 (1), -0.21990 (1), -0.21947 (1), -0.21886 (1), -0.21815 (1), -0.21752 (1), -0.21725 (1), -0.21681 (1), -0.21676 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5069    set_bounds 0.0086    solve 0.1144    add 0.1769    
Accumulated time: pickout 0.0003    decision 0.5069    set_bounds 0.0086    solve 0.1144    add 0.1769    
Current (lb-rhs): -0.22439289093017578
50 domains visited
Cumulative time: 0.8887698650360107

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 51] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 51] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 1] [/input-12, 51] [/input-12, 1] [/input-12, 51] [/input-12, 51] [/input-12, 1] [/input-12, 1] [/input-12, 51] [/input-12, 51] [/input-12, 51] 
split level 2: [/input-12, 17] [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 1] 
split level 3: [/input-12, 92] [/input-12, 17] [/input-12, 92] [/input-12, 92] [/input-12, 17] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 17] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18611717224121094
10 lb beta sum: 0.7892306447029114, worst -0.1330774426460266
Time: prepare 0.0073    bound 0.1183    transfer 0.0008    finalize 0.0024    func 0.1315    
Accumulated time: func 0.2991    prepare 0.0293    bound 0.2671    transfer 0.0025    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.18590784) min lb tensor(-0.13278645)
Number of Verified Splits: 218 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.02436971664428711 
BICCOS Cumulative time: 0.03519082069396973
Preprocessing time: 0.012002944946289062 Inference time: 0.008155584335327148 Add cuts time: 0.0039806365966796875 Cut analysis time: 0.00023055076599121094
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0081    decision 0.0231    set_bounds 0.0140    solve 0.1316    add 0.0154    
Accumulated time: pickout 0.0084    decision 0.5300    set_bounds 0.0226    solve 0.2461    add 0.1923    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 38] 
split level 1: [/input-12, 10] 
split level 2: [/input-12, 51] 
split level 3: [/input-12, 26] 
split level 4: [/input-12, 1] 
split level 5: [/input-12, 17] 
split level 6: [/input-12, 25] 
split level 7: [/input-12, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.305966854095459

all verified at 0th iter
Time: prepare 0.0037    bound 0.0047    transfer 0.0006    finalize 0.0013    func 0.0121    
Accumulated time: func 0.3111    prepare 0.0334    bound 0.2718    transfer 0.0031    finalize 0.0064    
all_split False
======================Cut inference begins======================
max lb tensor(1.04025030) min lb tensor(0.30596685)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.006740570068359375 
BICCOS Cumulative time: 0.0419313907623291
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0007    decision 0.0234    set_bounds 0.0169    solve 0.0122    add 0.0002    
Accumulated time: pickout 0.0091    decision 0.5535    set_bounds 0.0395    solve 0.2582    add 0.1925    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
Cumulative time: 1.176598310470581


Properties batch 3, size 1
Remaining timeout: 197.12550473213196
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.12520551681519
Verifying property 4 with 1 instances.
##### Instance 139 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.50626135]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.46985912, -9.78631687, -3.83598518, -5.51694536, -3.54354000,
        -5.34781790, -2.52311063, -5.68112326, -9.51543331, -9.21476460],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.50626135]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 439
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 269
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 731
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.918212890625e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5062580108642578
10 lb beta sum: 0.0, worst -0.506263256072998
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0513    transfer 0.0001    finalize 0.0001    func 0.0517    
Accumulated time: func 0.0517    prepare 0.0002    bound 0.0513    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] 
split level 1: [/input-12, 51] 
split level 2: [/input-12, 41] 
split level 3: [/input-12, 92] 
split level 4: [/input-12, 38] 
split level 5: [/input-12, 1] 
split level 6: [/input-12, 26] 
split level 7: [/input-12, 17] 
split level 8: [/input-12, 54] 
split level 9: [/input-12, 46] 
split level 10: [/input-12, 33] 
split level 11: [/input-12, 10] 
split level 12: [/input-8, 850] 
split level 13: [/input-8, 88] 
split level 14: [/input-8, 1427] 
split level 15: [/input-8, 95] 
split level 16: [/input-8, 923] 
split level 17: [/input-8, 932] 
split level 18: [/input-8, 859] 
split level 19: [/input-8, 292] 
split level 20: [/input-8, 988] 
split level 21: [/input-8, 660] 
split level 22: [/input-12, 68] 
split level 23: [/input-8, 289] 
split level 24: [/input-8, 867] 
split level 25: [/input-8, 809] 
split level 26: [/input-8, 1420] 
split level 27: [/input-8, 989] 
split level 28: [/input, 1603] 
split level 29: [/input-8, 858] 
split level 30: [/input-8, 1873] 
split level 31: [/input-12, 40] 
split level 32: [/input-8, 291] 
split level 33: [/input-8, 434] 
split level 34: [/input-8, 933] 
split level 35: [/input-8, 1828] 
split level 36: [/input-8, 1428] 
split level 37: [/input-8, 2008] 
split level 38: [/input, 1637] 
split level 39: [/input-8, 80] 
split level 40: [/input-8, 994] 
split level 41: [/input-8, 1437] 
split level 42: [/input-8, 297] 
split level 43: [/input-8, 972] 
split level 44: [/input-8, 981] 
split level 45: [/input-8, 307] 
split level 46: [/input, 1669] 
split level 47: [/input-8, 485] 
split level 48: [/input, 1674] 
split level 49: [/input-8, 1426] 
split level 50: [/input-8, 1005] 
split level 51: [/input-8, 985] 
split level 52: [/input-8, 1865] 
split level 53: [/input-8, 85] 
split level 54: [/input-8, 973] 
split level 55: [/input-8, 1497] 
split level 56: [/input-8, 1421] 
split level 57: [/input-8, 817] 
split level 58: [/input-8, 1429] 
split level 59: [/input-8, 302] 
split level 60: [/input-8, 1011] 
split level 61: [/input-8, 1829] 
split level 62: [/input-8, 1874] 
split level 63: [/input, 1654] 
split level 64: [/input-8, 436] 
split level 65: [/input-8, 849] 
split level 66: [/input-8, 2024] 
split level 67: [/input-8, 427] 
split level 68: [/input-8, 841] 
split level 69: [/input-8, 470] 
split level 70: [/input-8, 471] 
split level 71: [/input-8, 110] 
split level 72: [/input-8, 89] 
split level 73: [/input, 1671] 
split level 74: [/input-8, 522] 
split level 75: [/input-8, 1012] 
split level 76: [/input-8, 1142] 
split level 77: [/input-8, 281] 
split level 78: [/input-8, 674] 
split level 79: [/input-8, 293] 
split level 80: [/input-8, 1947] 
split level 81: [/input-8, 1019] 
split level 82: [/input-8, 565] 
split level 83: [/input-8, 1139] 
split level 84: [/input-8, 1486] 
split level 85: [/input, 1705] 
split level 86: [/input, 1721] 
split level 87: [/input-8, 116] 
split level 88: [/input-8, 1454] 
split level 89: [/input-8, 491] 
split level 90: [/input-8, 942] 
split level 91: [/input-8, 426] 
split level 92: [/input-8, 1857] 
split level 93: [/input-8, 1495] 
split level 94: [/input-8, 1425] 
split level 95: [/input, 2693] 
split level 96: [/input-8, 2000] 
split level 97: [/input-8, 415] 
split level 98: [/input-8, 1413] 
split level 99: [/input-8, 531] 
split level 100: [/input, 1556] 
split level 101: [/input, 2168] 
split level 102: [/input-8, 786] 
split level 103: [/input-8, 936] 
split level 104: [/input-8, 438] 
split level 105: [/input-8, 530] 
split level 106: [/input, 1767] 
split level 107: [/input, 2085] 
split level 108: [/input, 2613] 
split level 109: [/input-8, 1433] 
split level 110: [/input-8, 1452] 
split level 111: [/input-8, 997] 
split level 112: [/input-8, 916] 
split level 113: [/input, 2115] 
split level 114: [/input, 1641] 
split level 115: [/input, 2152] 
split level 116: [/input-8, 66] 
split level 117: [/input-8, 111] 
split level 118: [/input, 1734] 
split level 119: [/input, 2698] 
split level 120: [/input-8, 445] 
split level 121: [/input, 174] 
split level 122: [/input-8, 1417] 
split level 123: [/input, 2116] 
split level 124: [/input-8, 457] 
split level 125: [/input, 1735] 
split level 126: [/input, 300] 
split level 127: [/input-8, 65] 
split level 128: [/input, 482] 
split level 129: [/input, 2069] 
split level 130: [/input-8, 1533] 
split level 131: [/input, 1589] 
split level 132: [/input-8, 494] 
split level 133: [/input, 3862] 
split level 134: [/input-8, 495] 
split level 135: [/input-8, 1133] 
split level 136: [/input-8, 2033] 
split level 137: [/input, 2185] 
split level 138: [/input, 1718] 
split level 139: [/input-8, 1232] 
split level 140: [/input, 2150] 
split level 141: [/input, 2133] 
split level 142: [/input-8, 2032] 
split level 143: [/input-8, 1856] 
split level 144: [/input, 1602] 
split level 145: [/input-8, 1864] 
split level 146: [/input-8, 834] 
split level 147: [/input, 2291] 
split level 148: [/input-8, 1498] 
split level 149: [/input, 1100] 
split level 150: [/input-8, 1530] 
split level 151: [/input, 1765] 
split level 152: [/input-8, 1975] 
split level 153: [/input-8, 430] 
split level 154: [/input, 2090] 
split level 155: [/input-8, 1872] 
split level 156: [/input, 2699] 
split level 157: [/input-8, 1409] 
split level 158: [/input-8, 949] 
split level 159: [/input, 3861] 
split level 160: [/input-8, 2009] 
split level 161: [/input, 2108] 
split level 162: [/input, 2088] 
split level 163: [/input, 2592] 
split level 164: [/input, 2260] 
split level 165: [/input, 3892] 
split level 166: [/input, 282] 
split level 167: [/input, 3878] 
split level 168: [/input, 1352] 
split level 169: [/input-8, 635] 
split level 170: [/input, 46] 
split level 171: [/input, 3869] 
split level 172: [/input, 2101] 
split level 173: [/input-8, 1360] 
split level 174: [/input-8, 1787] 
split level 175: [/input-8, 73] 
split level 176: [/input, 4049] 
split level 177: [/input, 1524] 
split level 178: [/input-8, 1352] 
split level 179: [/input-8, 1490] 
split level 180: [/input, 1754] 
split level 181: [/input, 2182] 
split level 182: [/input, 1513] 
split level 183: [/input, 676] 
split level 184: [/input-8, 1120] 
split level 185: [/input, 1452] 
split level 186: [/input, 3357] 
split level 187: [/input-8, 1291] 
split level 188: [/input, 3448] 
split level 189: [/input, 3867] 
split level 190: [/input, 2203] 
split level 191: [/input, 2107] 
split level 192: [/input-8, 1008] 
split level 193: [/input, 647] 
split level 194: [/input, 2188] 
split level 195: [/input, 3560] 
split level 196: [/input, 3021] 
split level 197: [/input, 3386] 
split level 198: [/input, 1455] 
split level 199: [/input-8, 1839] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5061736106872559
10 lb beta sum: 0.0, worst -0.5061812400817871
Time: prepare 0.0116    bound 0.0957    transfer 0.0009    finalize 0.0025    func 0.1134    
Accumulated time: func 0.1651    prepare 0.0215    bound 0.1470    transfer 0.0010    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.40367413) min lb tensor(-0.50617075)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010338068008422852 
BICCOS Cumulative time: 0.010338068008422852
Preprocessing time: 0.009889841079711914 Inference time: 0.00016355514526367188 Add cuts time: 6.437301635742188e-05 Cut analysis time: 0.00022029876708984375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.48849 (1), -0.48792 (1), -0.48754 (1), -0.48726 (1), -0.48583 (1), -0.48515 (1), -0.48433 (1), -0.48391 (1), -0.48385 (1), -0.48346 (1), -0.48335 (1), -0.48328 (1), -0.48165 (1), -0.48136 (1), -0.48094 (1), -0.48011 (1), -0.47983 (1), -0.47808 (1), -0.47807 (1), -0.47700 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.4991    set_bounds 0.0084    solve 0.1134    add 0.2000    
Accumulated time: pickout 0.0003    decision 0.4991    set_bounds 0.0084    solve 0.1134    add 0.2000    
Current (lb-rhs): -0.4884915351867676
50 domains visited
Cumulative time: 0.9066755771636963

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 41] [/input-12, 41] [/input-12, 51] [/input-12, 51] [/input-12, 51] 
split level 1: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 92] [/input-12, 41] [/input-12, 92] [/input-12, 92] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 3: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4442734718322754
10 lb beta sum: 0.580084502696991, worst -0.4315527379512787
Time: prepare 0.0069    bound 0.1142    transfer 0.0014    finalize 0.0020    func 0.1273    
Accumulated time: func 0.2924    prepare 0.0287    bound 0.2612    transfer 0.0024    finalize 0.0046    
all_split False
======================Cut inference begins======================
max lb tensor(0.06436816) min lb tensor(-0.43132174)
Number of Verified Splits: 12 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.012651205062866211 
BICCOS Cumulative time: 0.022989273071289062
Preprocessing time: 0.011614561080932617 Inference time: 0.0005345344543457031 Add cuts time: 0.0002543926239013672 Cut analysis time: 0.00024771690368652344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23470 (2), -0.23435 (2), -0.23302 (2), -0.23191 (2), -0.23077 (2), -0.22997 (2), -0.22991 (2), -0.22731 (2), -0.22638 (2), -0.22625 (2), -0.22572 (2), -0.22556 (2), -0.22311 (2), -0.22236 (2), -0.22209 (2), -0.22113 (2), -0.21566 (2), -0.21550 (2), -0.21354 (2), -0.20685 (2), 
Length of domains: 50
Time: pickout 0.0078    decision 0.0194    set_bounds 0.0126    solve 0.1274    add 0.2099    
Accumulated time: pickout 0.0082    decision 0.5185    set_bounds 0.0210    solve 0.2409    add 0.4100    
Current (lb-rhs): -0.23469749093055725
100 domains visited
Cumulative time: 1.3036558628082275

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 51] [/input-12, 41] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 41] [/input-12, 92] 
split level 1: [/input-12, 92] [/input-12, 92] [/input-12, 41] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 92] [/input-12, 1] 
split level 2: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 17] 
split level 3: [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 17] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.222747802734375
10 lb beta sum: 0.9273459911346436, worst -0.20668625831604004
Time: prepare 0.0064    bound 0.1167    transfer 0.0008    finalize 0.0020    func 0.1291    
Accumulated time: func 0.4215    prepare 0.0354    bound 0.3779    transfer 0.0032    finalize 0.0066    
all_split False
======================Cut inference begins======================
max lb tensor(0.14580774) min lb tensor(-0.19941157)
Number of Verified Splits: 61 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.015502214431762695 
BICCOS Cumulative time: 0.03849148750305176
Preprocessing time: 0.011475086212158203 Inference time: 0.0027856826782226562 Add cuts time: 0.0008449554443359375 Cut analysis time: 0.00039649009704589844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04815 (3), -0.04722 (3), -0.04629 (3), -0.04446 (3), -0.04412 (3), -0.04389 (3), -0.04357 (3), -0.04349 (3), -0.04334 (3), -0.04209 (3), -0.04107 (3), -0.04066 (3), -0.03809 (3), -0.03802 (3), -0.03509 (3), -0.03503 (3), -0.03434 (3), -0.03413 (3), -0.03267 (3), -0.03225 (3), 
Length of domains: 50
Time: pickout 0.0077    decision 0.0195    set_bounds 0.0155    solve 0.1292    add 0.2291    
Accumulated time: pickout 0.0159    decision 0.5380    set_bounds 0.0365    solve 0.3700    add 0.6391    
Current (lb-rhs): -0.04814732074737549
150 domains visited
Cumulative time: 1.7272248268127441

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 1: [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 17] [/input-12, 46] [/input-12, 46] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 46] [/input-12, 46] [/input-12, 17] [/input-12, 17] 
split level 3: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 46] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05287456512451172
10 lb beta sum: 0.7248145341873169, worst -0.03690314292907715
Time: prepare 0.0065    bound 0.1366    transfer 0.0014    finalize 0.0025    func 0.1499    
Accumulated time: func 0.5714    prepare 0.0422    bound 0.5146    transfer 0.0047    finalize 0.0092    
all_split False
======================Cut inference begins======================
max lb tensor(0.29559457) min lb tensor(-0.00389922)
Number of Verified Splits: 398 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 13
#cuts 4-6: 13
#cuts >= 20: 0
BICCOS time: 0.04268026351928711 
BICCOS Cumulative time: 0.08117175102233887
Preprocessing time: 0.012374401092529297 Inference time: 0.021190643310546875 Add cuts time: 0.008147716522216797 Cut analysis time: 0.0009675025939941406
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0081    decision 0.0230    set_bounds 0.0177    solve 0.1500    add 0.0256    
Accumulated time: pickout 0.0240    decision 0.5611    set_bounds 0.0542    solve 0.5200    add 0.6646    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 51] 
split level 1: [/input-12, 41] 
split level 2: [/input-12, 92] 
split level 3: [/input-12, 1] 
split level 4: [/input-12, 17] 
split level 5: [/input-12, 46] 
split level 6: [/input-12, 33] 
split level 7: [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11055469512939453
10 lb beta sum: 0.20173946022987366, worst -0.08854079246520996
Time: prepare 0.0038    bound 0.1496    transfer 0.0010    finalize 0.0019    func 0.1580    
Accumulated time: func 0.7294    prepare 0.0465    bound 0.6642    transfer 0.0056    finalize 0.0111    
all_split False
======================Cut inference begins======================
max lb tensor(0.30944616) min lb tensor(-0.08794415)
Number of Verified Splits: 246 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4066438674926758
10 lb beta sum: 1.6569273471832275, worst -0.419230580329895
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 9
#cuts 4-6: 17
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.5050597190856934 
BICCOS Cumulative time: 0.5862314701080322
Preprocessing time: 0.00730133056640625 Inference time: 0.4891479015350342 Add cuts time: 0.007330656051635742 Cut analysis time: 0.0012798309326171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08794 (8), -0.07293 (8), -0.03905 (8), -0.03336 (8), -0.02996 (8), -0.02385 (8), -0.01266 (8), -0.01187 (8), -0.00763 (8), -0.00398 (8), 
Length of domains: 10
Time: pickout 0.0004    decision 0.0233    set_bounds 0.0178    solve 0.1581    add 0.0396    
Accumulated time: pickout 0.0244    decision 0.5844    set_bounds 0.0720    solve 0.6781    add 0.7042    
Current (lb-rhs): -0.0879441499710083
160 domains visited
Cumulative time: 2.758784294128418

BaB round 2
batch: 10
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
split level 1: [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] 
split level 2: [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] 
split level 3: [/input-8, 859] [/input-8, 859] [/input-8, 859] [/input-8, 859] [/input-8, 859] [/input-8, 988] [/input-8, 859] [/input-8, 859] [/input-8, 859] [/input-8, 859] 
split level 4: [/input-8, 291] [/input-8, 858] [/input-8, 858] [/input-8, 858] [/input-8, 427] [/input-8, 859] [/input-8, 858] [/input-8, 858] [/input-8, 291] [/input-8, 291] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07648134231567383
10 lb beta sum: 0.03576201945543289, worst -0.07341527938842773
Time: prepare 0.0066    bound 0.1371    transfer 0.0024    finalize 0.0019    func 0.1502    
Accumulated time: func 0.8796    prepare 0.0534    bound 0.8013    transfer 0.0080    finalize 0.0129    
all_split False
======================Cut inference begins======================
max lb tensor(0.42297983) min lb tensor(-0.07312632)
Number of Verified Splits: 298 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3383650779724121
10 lb beta sum: 0.6071186661720276, worst -0.30873483419418335
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 9
#cuts 4-6: 17
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.3421285152435303 
BICCOS Cumulative time: 0.9283599853515625
Preprocessing time: 0.010314702987670898 Inference time: 0.3212714195251465 Add cuts time: 0.009338617324829102 Cut analysis time: 0.001203775405883789
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07313 (13), -0.06669 (13), -0.06316 (13), -0.05870 (13), -0.05530 (13), -0.05265 (13), -0.04876 (13), -0.04725 (13), -0.02138 (13), -0.01724 (13), -0.01611 (13), -0.01429 (13), -0.01348 (13), -0.01107 (13), -0.00949 (13), -0.00906 (13), -0.00783 (13), -0.00536 (13), -0.00312 (13), -0.00213 (13), 
Length of domains: 22
Time: pickout 0.0013    decision 0.0179    set_bounds 0.0275    solve 0.1504    add 0.0484    
Accumulated time: pickout 0.0257    decision 0.6022    set_bounds 0.0995    solve 0.8285    add 0.7527    
Current (lb-rhs): -0.07312631607055664
182 domains visited
Cumulative time: 3.3604679107666016

BaB round 3
batch: 22
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 988] [/input-8, 988] [/input-8, 809] [/input-8, 988] [/input-8, 988] [/input-8, 988] [/input-8, 988] [/input-8, 809] [/input-8, 988] [/input-8, 291] 
split level 1: [/input-12, 40] [/input-8, 291] [/input-8, 291] [/input-8, 867] [/input-8, 1873] [/input-12, 40] [/input-8, 291] [/input-8, 291] [/input-8, 867] [/input-8, 867] 
split level 2: [/input-8, 994] [/input-8, 470] [/input-8, 994] [/input-8, 994] [/input-12, 40] [/input-8, 994] [/input-8, 470] [/input-8, 994] [/input-12, 40] [/input-8, 985] 
split level 3: [/input-8, 858] [/input-8, 427] [/input-8, 858] [/input-12, 40] [/input-8, 858] [/input-8, 858] [/input-8, 427] [/input-8, 858] [/input-8, 291] [/input-8, 85] 
cut re-enabled after branching node selection
0 lb beta sum: 0.46304887533187866, worst -0.04929924011230469
10 lb beta sum: 0.46304887533187866, worst -0.0487828254699707
Time: prepare 0.0152    bound 0.1257    transfer 0.0009    finalize 0.0020    func 0.1466    
Accumulated time: func 1.0262    prepare 0.0688    bound 0.9270    transfer 0.0089    finalize 0.0149    
all_split False
======================Cut inference begins======================
max lb tensor(0.04605007) min lb tensor(-0.04865599)
Number of Verified Splits: 266 of 352
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 12
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.0449986457824707 
BICCOS Cumulative time: 0.9733586311340332
Preprocessing time: 0.010356903076171875 Inference time: 0.030924558639526367 Add cuts time: 0.0031485557556152344 Cut analysis time: 0.0005686283111572266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04866 (17), -0.04597 (17), -0.04578 (17), -0.04471 (17), -0.04219 (17), -0.04183 (17), -0.04181 (17), -0.04129 (17), -0.04052 (17), -0.03884 (17), -0.03820 (17), -0.03765 (17), -0.03739 (17), -0.03647 (17), -0.03644 (17), -0.03637 (17), -0.03446 (17), -0.03427 (17), -0.03380 (17), -0.03340 (17), 
Length of domains: 86
Time: pickout 0.0014    decision 0.0152    set_bounds 0.0261    solve 0.1467    add 0.0763    
Accumulated time: pickout 0.0271    decision 0.6175    set_bounds 0.1256    solve 0.9752    add 0.8290    
Current (lb-rhs): -0.04865598678588867
268 domains visited
Cumulative time: 3.681205987930298

BaB round 4
batch: 86
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 809] [/input-8, 809] [/input-8, 1873] [/input-8, 809] [/input-8, 1873] [/input-8, 809] [/input-8, 1873] [/input-8, 809] [/input-8, 1873] [/input-8, 809] 
split level 1: [/input-8, 1428] [/input-8, 867] [/input-12, 40] [/input-8, 867] [/input-12, 40] [/input-8, 867] [/input-12, 40] [/input-8, 1428] [/input-12, 40] [/input-8, 867] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04112577438354492
10 lb beta sum: 0.27072450518608093, worst -0.03831768035888672
Time: prepare 0.0073    bound 0.1549    transfer 0.0013    finalize 0.0021    func 0.1689    
Accumulated time: func 1.1951    prepare 0.0763    bound 1.0818    transfer 0.0102    finalize 0.0171    
all_split False
======================Cut inference begins======================
max lb tensor(0.02485657) min lb tensor(-0.03820467)
Number of Verified Splits: 206 of 344
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 13
#cuts 4-6: 18
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.04453778266906738 
BICCOS Cumulative time: 1.0178964138031006
Preprocessing time: 0.010772466659545898 Inference time: 0.02920842170715332 Add cuts time: 0.003444194793701172 Cut analysis time: 0.0011126995086669922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03820 (19), -0.03543 (19), -0.03522 (19), -0.03429 (19), -0.03150 (19), -0.03145 (19), -0.03141 (19), -0.03051 (19), -0.03021 (19), -0.02835 (19), -0.02770 (19), -0.02711 (19), -0.02692 (19), -0.02614 (19), -0.02592 (19), -0.02564 (19), -0.02401 (19), -0.02391 (19), -0.02386 (19), -0.02344 (19), 
Length of domains: 138
Time: pickout 0.0184    decision 0.0220    set_bounds 0.0244    solve 0.1691    add 0.0760    
Accumulated time: pickout 0.0455    decision 0.6394    set_bounds 0.1501    solve 1.1443    add 0.9049    
Current (lb-rhs): -0.03820466995239258
406 domains visited
Cumulative time: 4.0445356369018555

BaB round 5
batch: 138
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 867] [/input-8, 867] [/input-8, 1428] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 1428] [/input-8, 1428] [/input-8, 867] [/input-8, 867] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.036006927490234375
10 lb beta sum: 0.30578354001045227, worst -0.0387725830078125
Time: prepare 0.0057    bound 0.1524    transfer 0.0014    finalize 0.0017    func 0.1631    
Accumulated time: func 1.3582    prepare 0.0824    bound 1.2342    transfer 0.0116    finalize 0.0188    
all_split False
======================Cut inference begins======================
max lb tensor(0.02918148) min lb tensor(-0.03324699)
Number of Verified Splits: 147 of 276
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 17
#cuts 4-6: 26
#cuts >= 20: 0
BICCOS time: 0.03503108024597168 
BICCOS Cumulative time: 1.0529274940490723
Preprocessing time: 0.008698701858520508 Inference time: 0.021320104598999023 Add cuts time: 0.003623485565185547 Cut analysis time: 0.0013887882232666016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03325 (20), -0.03106 (20), -0.02955 (20), -0.02909 (20), -0.02718 (20), -0.02691 (20), -0.02681 (20), -0.02619 (20), -0.02593 (20), -0.02549 (20), -0.02340 (20), -0.02264 (20), -0.02246 (20), -0.02213 (20), -0.02210 (20), -0.02159 (20), -0.02158 (20), -0.01956 (20), -0.01885 (20), -0.01884 (20), 
Length of domains: 129
Time: pickout 0.0151    decision 0.0207    set_bounds 0.0128    solve 0.1632    add 0.0760    
Accumulated time: pickout 0.0606    decision 0.6601    set_bounds 0.1629    solve 1.3075    add 0.9809    
Current (lb-rhs): -0.03324699401855469
535 domains visited
Cumulative time: 4.375905990600586

BaB round 6
batch: 129
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1428] [/input-8, 1428] [/input-8, 1428] [/input-8, 1428] [/input-8, 867] [/input-8, 867] [/input-8, 1428] [/input-8, 1428] [/input-8, 1428] [/input-8, 1428] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.029838085174560547
10 lb beta sum: 0.29730284214019775, worst -0.02725076675415039
Time: prepare 0.0054    bound 0.1500    transfer 0.0011    finalize 0.0017    func 0.1600    
Accumulated time: func 1.5182    prepare 0.0880    bound 1.3842    transfer 0.0127    finalize 0.0205    
all_split False
======================Cut inference begins======================
max lb tensor(0.01379112) min lb tensor(-0.02719498)
Number of Verified Splits: 116 of 258
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 20
#cuts 4-6: 17
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.02832174301147461 
BICCOS Cumulative time: 1.0812492370605469
Preprocessing time: 0.008172273635864258 Inference time: 0.016533374786376953 Add cuts time: 0.0024895668029785156 Cut analysis time: 0.0011265277862548828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02719 (21), -0.02500 (21), -0.02404 (21), -0.02399 (21), -0.02352 (21), -0.02179 (21), -0.02121 (21), -0.02118 (21), -0.02080 (21), -0.02074 (21), -0.02041 (21), -0.02040 (21), -0.01939 (21), -0.01819 (21), -0.01802 (21), -0.01757 (21), -0.01741 (21), -0.01726 (21), -0.01686 (21), -0.01647 (21), 
Length of domains: 142
Time: pickout 0.0187    decision 0.0201    set_bounds 0.0117    solve 0.1601    add 0.0761    
Accumulated time: pickout 0.0793    decision 0.6802    set_bounds 0.1745    solve 1.4676    add 1.0571    
Current (lb-rhs): -0.027194976806640625
677 domains visited
Cumulative time: 4.699059009552002

BaB round 7
batch: 142
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 1865] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.024672508239746094
10 lb beta sum: 0.3109833002090454, worst -0.022083759307861328
Time: prepare 0.0059    bound 0.1485    transfer 0.0012    finalize 0.0023    func 0.1598    
Accumulated time: func 1.6780    prepare 0.0941    bound 1.5327    transfer 0.0139    finalize 0.0228    
all_split False
======================Cut inference begins======================
max lb tensor(0.00483513) min lb tensor(-0.02204418)
Number of Verified Splits: 126 of 284
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 44.
#cuts 1-3: 19
#cuts 4-6: 25
#cuts >= 20: 0
BICCOS time: 0.03203225135803223 
BICCOS Cumulative time: 1.113281488418579
Preprocessing time: 0.008850336074829102 Inference time: 0.01858210563659668 Add cuts time: 0.0031747817993164062 Cut analysis time: 0.001425027847290039
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02204 (22), -0.02178 (22), -0.01985 (22), -0.01956 (22), -0.01885 (22), -0.01874 (22), -0.01851 (22), -0.01835 (22), -0.01815 (22), -0.01654 (22), -0.01607 (22), -0.01603 (22), -0.01596 (22), -0.01572 (22), -0.01558 (22), -0.01554 (22), -0.01527 (22), -0.01521 (22), -0.01505 (22), -0.01503 (22), 
Length of domains: 158
Time: pickout 0.0156    decision 0.0182    set_bounds 0.0128    solve 0.1600    add 0.0097    
Accumulated time: pickout 0.0949    decision 0.6984    set_bounds 0.1873    solve 1.6275    add 1.0668    
Current (lb-rhs): -0.02204418182373047
835 domains visited
Cumulative time: 4.948703289031982

BaB round 8
batch: 158
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1865] [/input-8, 1865] [/input-8, 1865] [/input-8, 1865] [/input-8, 973] [/input-8, 1865] [/input-8, 973] [/input-8, 817] [/input-8, 973] [/input-8, 973] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02255725860595703
10 lb beta sum: 0.295439749956131, worst -0.032251037657260895
Time: prepare 0.0065    bound 0.1549    transfer 0.0014    finalize 0.0020    func 0.1671    
Accumulated time: func 1.8451    prepare 0.1008    bound 1.6876    transfer 0.0153    finalize 0.0248    
all_split False
======================Cut inference begins======================
max lb tensor(0.01758778) min lb tensor(-0.01978731)
Number of Verified Splits: 166 of 316
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 1-3: 20
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.03976726531982422 
BICCOS Cumulative time: 1.1530487537384033
Preprocessing time: 0.009583473205566406 Inference time: 0.025350570678710938 Add cuts time: 0.0035364627838134766 Cut analysis time: 0.0012967586517333984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01979 (23), -0.01759 (23), -0.01656 (23), -0.01642 (23), -0.01641 (23), -0.01610 (23), -0.01421 (23), -0.01414 (23), -0.01391 (23), -0.01390 (23), -0.01379 (23), -0.01327 (23), -0.01322 (23), -0.01315 (23), -0.01304 (23), -0.01299 (23), -0.01277 (23), -0.01276 (23), -0.01186 (23), -0.01167 (23), 
Length of domains: 150
Time: pickout 0.0031    decision 0.0212    set_bounds 0.0140    solve 0.1672    add 0.0269    
Accumulated time: pickout 0.0980    decision 0.7197    set_bounds 0.2013    solve 1.7947    add 1.0936    
Current (lb-rhs): -0.019787311553955078
985 domains visited
Cumulative time: 5.229411602020264

BaB round 9
batch: 150
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 985] [/input-8, 985] [/input-8, 1011] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018449783325195312
10 lb beta sum: 0.2724819481372833, worst -0.01586151123046875
Time: prepare 0.0061    bound 0.1485    transfer 0.0030    finalize 0.0021    func 0.1617    
Accumulated time: func 2.0068    prepare 0.1072    bound 1.8361    transfer 0.0183    finalize 0.0268    
all_split False
======================Cut inference begins======================
max lb tensor(0.01714897) min lb tensor(-0.01582098)
Number of Verified Splits: 206 of 300
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 39.
#cuts 1-3: 21
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.04521346092224121 
BICCOS Cumulative time: 1.1982622146606445
Preprocessing time: 0.00924539566040039 Inference time: 0.03163957595825195 Add cuts time: 0.0032062530517578125 Cut analysis time: 0.0011222362518310547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01582 (24), -0.01366 (24), -0.01250 (24), -0.01242 (24), -0.01236 (24), -0.01196 (24), -0.01028 (24), -0.01023 (24), -0.00993 (24), -0.00992 (24), -0.00966 (24), -0.00909 (24), -0.00900 (24), -0.00899 (24), -0.00899 (24), -0.00893 (24), -0.00867 (24), -0.00852 (24), -0.00773 (24), -0.00748 (24), 
Length of domains: 94
Time: pickout 0.0152    decision 0.0192    set_bounds 0.0135    solve 0.1618    add 0.0830    
Accumulated time: pickout 0.1132    decision 0.7388    set_bounds 0.2148    solve 1.9565    add 1.1766    
Current (lb-rhs): -0.015820980072021484
1079 domains visited
Cumulative time: 5.576224088668823

BaB round 10
batch: 94
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] 
split level 1: [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014065265655517578
10 lb beta sum: 0.10183873772621155, worst -0.011380195617675781
Time: prepare 0.0076    bound 0.1517    transfer 0.0035    finalize 0.0021    func 0.1676    
Accumulated time: func 2.1744    prepare 0.1149    bound 1.9879    transfer 0.0218    finalize 0.0290    
all_split False
======================Cut inference begins======================
max lb tensor(0.03301573) min lb tensor(-0.01135015)
Number of Verified Splits: 331 of 376
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 26
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.06835365295410156 
BICCOS Cumulative time: 1.266615867614746
Preprocessing time: 0.011263370513916016 Inference time: 0.05318927764892578 Add cuts time: 0.0032765865325927734 Cut analysis time: 0.0006244182586669922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01135 (26), -0.00916 (26), -0.00803 (26), -0.00797 (26), -0.00791 (26), -0.00755 (26), -0.00576 (26), -0.00575 (26), -0.00542 (26), -0.00535 (26), -0.00524 (26), -0.00458 (26), -0.00455 (26), -0.00451 (26), -0.00448 (26), -0.00445 (26), -0.00426 (26), -0.00410 (26), -0.00402 (26), -0.00321 (26), 
Length of domains: 45
Time: pickout 0.0355    decision 0.0209    set_bounds 0.0186    solve 0.1677    add 0.0623    
Accumulated time: pickout 0.1488    decision 0.7598    set_bounds 0.2334    solve 2.1242    add 1.2389    
Current (lb-rhs): -0.011350154876708984
1124 domains visited
Cumulative time: 5.959112882614136

BaB round 11
batch: 45
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] 
split level 1: [/input-8, 1421] [/input-8, 1421] [/input-8, 1421] [/input-8, 1421] [/input-8, 1429] [/input-8, 1421] [/input-8, 1421] [/input-8, 1421] [/input-8, 1421] [/input-8, 1421] 
split level 2: [/input-8, 1429] [/input-8, 1429] [/input-8, 1429] [/input-8, 1429] [/input-8, 1421] [/input-8, 1429] [/input-8, 1429] [/input-8, 1429] [/input-8, 1429] [/input-8, 1429] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.00022649765014648438

all verified at 0th iter
Time: prepare 0.0083    bound 0.0089    transfer 0.0017    finalize 0.0019    func 0.0231    
Accumulated time: func 2.1975    prepare 0.1234    bound 1.9967    transfer 0.0235    finalize 0.0309    
all_split False
======================Cut inference begins======================
max lb tensor(0.01807928) min lb tensor(0.00022650)
Number of Verified Splits: 360 of 360
No cut inferred: All or none verified.
Total number of valid cuts: 27.
#cuts 1-3: 26
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.010755300521850586 
BICCOS Cumulative time: 1.2773711681365967
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0058    decision 0.0182    set_bounds 0.0198    solve 0.0232    add 0.0005    
Accumulated time: pickout 0.1545    decision 0.7780    set_bounds 0.2532    solve 2.1474    add 1.2394    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1124 domains visited
Cumulative time: 6.0390849113464355


Properties batch 5, size 1
Remaining timeout: 190.86782956123352
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 190.867742061615
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 190.86771512031555
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 190.86769270896912
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 9.1324 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 140, vnnlib ID: 140 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.70108557, -2.61450195, -7.88389778, -7.46980858, -7.10053349,
         -7.85311460, -7.32898045, -5.37792873, -5.26348686, -0.13527048]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [517]; unstable size 517; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 190, 1, 517] with unstable size 189 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 517] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 517] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [189]; unstable size 189; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 189] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 189] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.44307852, 1.46007872, 5.86254644, 5.68103218, 5.60793304, 5.96620083,
         5.60759163, 3.70175481, 3.77148247]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0753 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 141, vnnlib ID: 141 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.93660259, -3.64990735, -5.69686222, -5.46793270, -5.41355324,
         -6.32598066, -5.22664785, -6.09948301, -3.93378472, -2.67238760]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [480]; unstable size 480; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 480] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 480] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 480] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 192] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.12637210,  0.23386860,  0.06982803,  0.04919529,  0.70030731,
         -0.06877661,  0.36111903, -0.89804649, -1.82256544]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.93660259, -3.64990735, -5.69686222, -5.46793270, -5.41355324,
         -6.32598066, -5.22664785, -6.09948301, -3.93378472, -2.67238760]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.93660212, -3.64990807, -5.69686222, -5.46793365, -5.41355324,
          -6.32598066, -5.22664833, -6.09948254, -3.93378496, -2.67238760],
         [-4.93660212, -3.64990807, -5.69686222, -5.46793365, -5.41355324,
          -6.32598066, -5.22664833, -6.09948254, -3.93378496, -2.67238760]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.28669405,  1.57674026,  0.28387690, -0.97752047]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]],


         [[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]],


         [[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]],


         [[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0862 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 142, vnnlib ID: 142 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-9.01175785, -9.22564220, -6.09865665, -6.68279839, -7.01091385,
         -7.66662741, -3.74865699, -8.93857002, -9.70948601, -9.36056805]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [415]; unstable size 415; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 290, 1, 415] with unstable size 289 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 415] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 415] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [289]; unstable size 289; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 289] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 289] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.92234230, 3.34474015, 0.83518028, 1.42703438, 1.62353659, 2.12632918,
         3.08041930, 3.64250803, 3.61395836]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0790 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 143, vnnlib ID: 143 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.98219585, -11.93984127,  -4.80098343,  -6.43815804,  -4.75239468,
          -5.96528244,  -6.83383131,  -6.40824652, -11.32667923, -10.02781868]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [464]; unstable size 464; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 196, 1, 464] with unstable size 195 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 464] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 464] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [195]; unstable size 195; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 195] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 195] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.50733948,  4.83027935, -1.04858828,  0.40518242, -0.05837512,
          0.48497486,  0.45264578,  4.44294167,  3.27292323]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.98219585, -11.93984127,  -4.80098343,  -6.43815804,  -4.75239468,
          -5.96528244,  -6.83383131,  -6.40824652, -11.32667923, -10.02781868]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.89328861, -11.87365723,  -4.72995949,  -6.58205509,  -5.11540079,
           -6.15687943,  -6.98943567,  -6.80347681, -11.29017735, -10.07491016],
         [ -7.89328861, -11.87365723,  -4.72995949,  -6.58205509,  -5.11540079,
           -6.15687943,  -6.98943567,  -6.80347681, -11.29017735, -10.07491016]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.38544130,  1.04147863]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0069 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0747 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 144, vnnlib ID: 144 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.60607052, -9.81349945, -5.86607075, -4.14033175, -5.51711655,
         -3.53696299, -6.38849020, -6.08620310, -7.73200989, -8.22923183]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [522]; unstable size 522; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 221, 1, 522] with unstable size 220 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 522] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 522] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [220]; unstable size 220; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 220] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 220] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.89997864, 4.68741703, 1.57923090, 0.30736449, 1.14825940, 1.82109797,
         1.72909081, 2.65290308, 3.25950575]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0669 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 145, vnnlib ID: 145 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.97581673, -7.36369705, -2.25391197, -0.90559614, -3.35363531,
         -0.93793738, -3.88091850, -3.94542360, -8.08611870, -6.59433222]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [686]; unstable size 686; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 215, 1, 686] with unstable size 214 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 686] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 686] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [214]; unstable size 214; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 214] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 214] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.63966501,  4.83987522,  0.26498580, -0.32372522,  1.13650560,
          1.87988925,  2.01293588,  5.47729778,  4.25807333]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.97581673, -7.36369705, -2.25391197, -0.90559614, -3.35363531,
         -0.93793738, -3.88091850, -3.94542360, -8.08611870, -6.59433222]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.97581673, -7.36369705, -2.25391197, -0.90559614, -3.35363531,
          -0.93793738, -3.88091850, -3.94542360, -8.08611870, -6.59433222]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.03234124]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0771 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 146, vnnlib ID: 146 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.88469028, -12.65882111, -12.62442398, -13.26971817, -13.08886814,
         -14.39622879, -13.06826305, -13.77910519,  -7.61941338, -13.15269947]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [474]; unstable size 474; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 183, 1, 474] with unstable size 182 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 474] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 474] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [182]; unstable size 182; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 182] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 182] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.66201323, 3.41532993, 3.31493258, 3.81620955, 3.48846340, 4.76713276,
         3.58373880, 3.89160728, 3.77728796]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0652 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 147, vnnlib ID: 147 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.95316505, -29.04301071, -22.88550568, -26.99249268, -26.92433929,
         -26.87813187, -26.17901230, -26.50130844, -27.15471458, -29.93289757]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [636]; unstable size 636; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 636] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 636] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 636] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 206] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.13847542, 4.55568790, 3.22048426, 3.02970314, 2.95622373, 2.20912409,
         2.32559395, 2.85925484, 5.64449835]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0650 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 148, vnnlib ID: 148 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.92584610, -7.42483807, -4.62941742, -4.01557446, -4.85893917,
         -3.11745501, -6.51985884, -2.25635386, -7.85682869, -5.87989426]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [573]; unstable size 573; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 573] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 573] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 573] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 164] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.58360767, 3.69630313, 1.62351406, 1.19872499, 1.87599492, 0.30902314,
         3.29060125, 4.20989084, 2.42179346]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0641 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 149, vnnlib ID: 149 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.82564068, -16.12564659,  -8.40596962, -11.14722919,  -8.84027576,
         -11.49166584,  -8.61030483, -12.62408161, -15.33834553, -15.51428890]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [612]; unstable size 612; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 318, 1, 612] with unstable size 317 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 612] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 612] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [317]; unstable size 317; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 317] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 317] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.89976621,  5.63465881,  1.31291008, -0.68691456,  1.36818075,
         -1.07342339,  2.11837912,  5.13911724,  5.00889349]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.82564068, -16.12564659,  -8.40596962, -11.14722919,  -8.84027576,
         -11.49166584,  -8.61030483, -12.62408161, -15.33834553, -15.51428890]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.90783310, -15.16053009,  -7.57349110,  -9.97743225,  -7.48518276,
          -10.30821037,  -7.42592621, -11.38831425, -14.43945026, -14.46265030],
         [-11.90783310, -15.16053009,  -7.57349110,  -9.97743225,  -7.48518276,
          -10.30821037,  -7.42592621, -11.38831425, -14.43945026, -14.46265030]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.08830833, -0.14756489]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0737 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 150, vnnlib ID: 150 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.13626671, -12.95860291, -17.87646484, -18.21573448, -16.54766655,
         -19.77405167, -18.47913933, -17.13456726, -12.88059044, -12.20954704]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [659]; unstable size 659; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 227, 1, 659] with unstable size 226 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 659] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 659] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [226]; unstable size 226; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 226] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 226] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.12454128,  2.88798380,  3.24317837,  1.46328163,  4.59323883,
          3.30328608,  1.93248844, -1.68345642, -1.69870043]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.13626671, -12.95860291, -17.87646484, -18.21573448, -16.54766655,
         -19.77405167, -18.47913933, -17.13456726, -12.88059044, -12.20954704]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.13626671, -12.95860291, -17.87646675, -18.21573257, -16.54766655,
          -19.77405167, -18.47914314, -17.13456726, -12.88059235, -12.20954704],
         [-12.13626671, -12.95860291, -17.87646675, -18.21573257, -16.54766655,
          -19.77405167, -18.47914314, -17.13456726, -12.88059235, -12.20954704]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.82233620, -0.07801056, -0.74905586]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0752 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 151, vnnlib ID: 151 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.92925501, -7.14253235, -2.67746592, -1.64019978, -3.21286678,
         -2.15658951, -4.77550077, -2.71008253, -7.95267010, -6.10923672]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [509]; unstable size 509; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 191, 1, 509] with unstable size 190 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 509] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 509] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [190]; unstable size 190; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 190] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 190] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.62681055,  3.42381310, -0.43489385, -0.80544966,  0.11626744,
          1.46117401, -0.19169986,  4.37902164,  2.50552511]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.92925501, -7.14253235, -2.67746592, -1.64019978, -3.21286678,
         -2.15658951, -4.77550077, -2.71008253, -7.95267010, -6.10923672]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.92925453, -7.14253139, -2.67746544, -1.64019978, -3.21286583,
          -2.15658951, -4.77549982, -2.71008205, -7.95266914, -6.10923672],
         [-4.92925453, -7.14253139, -2.67746544, -1.64019978, -3.21286583,
          -2.15658951, -4.77549982, -2.71008205, -7.95266914, -6.10923672]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.52087593, -0.51638973,  0.55349255]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]],


         [[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]],


         [[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0713 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 152, vnnlib ID: 152 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.37253094, -15.35466290,  -8.84723759, -11.91200066,  -9.14601994,
         -12.22006512, -11.46233749, -11.63420105, -15.26982689, -14.99343395]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [511]; unstable size 511; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 247, 1, 511] with unstable size 246 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 511] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 511] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [246]; unstable size 246; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 246] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 246] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.05601645,  4.40511084,  1.92022443, -0.67723620,  2.14849854,
          1.43644238,  1.45348608,  4.22401047,  4.17532158]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.37253094, -15.35466290,  -8.84723759, -11.91200066,  -9.14601994,
         -12.22006512, -11.46233749, -11.63420105, -15.26982689, -14.99343395]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.95911980, -14.67740154,  -8.50276279, -11.15490532,  -8.22284317,
          -11.39343548, -10.70833683, -10.67666340, -14.70250797, -14.25697708]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.27991962]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0055 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0718 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 153, vnnlib ID: 153 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.36052370, -3.64754987, -8.43094254, -6.93587589, -8.07399559,
         -7.95548391, -8.76295853, -8.07159233, -4.37078619, -1.63098276]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [666]; unstable size 666; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 666] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 666] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 666] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 197] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.38331795, 0.85898769, 5.10982227, 3.81529713, 4.82118130, 4.66787148,
         5.43832779, 4.82864904, 1.05962658]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0655 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 154, vnnlib ID: 154 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.37273693, -13.41425037,  -7.99989891,  -7.64088869,  -7.68787098,
          -7.30278063,  -9.00737858,  -9.44757938, -11.26918030, -13.87256336]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [665]; unstable size 665; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 191, 1, 665] with unstable size 190 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 665] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 665] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [190]; unstable size 190; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 190] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 190] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.81563997,  4.79626989, -0.23131967,  0.04256094, -0.61334944,
          0.76331413,  1.09416652,  2.70510578,  5.43058109]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.37273693, -13.41425037,  -7.99989891,  -7.64088869,  -7.68787098,
          -7.30278063,  -9.00737858,  -9.44757938, -11.26918030, -13.87256336]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.39031887, -13.36584949,  -7.99200344,  -7.88567734,  -7.51200867,
           -7.59368086,  -9.04060841,  -9.48881340, -11.36435127, -13.91123199],
         [-12.39031887, -13.36584949,  -7.99200344,  -7.88567734,  -7.51200867,
           -7.59368086,  -9.04060841,  -9.48881340, -11.36435127, -13.91123199]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.39832258, -0.08167219]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0056 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0700 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 155, vnnlib ID: 155 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.79153347, -11.06904888,  -7.80160236,  -7.62448120,  -8.11459255,
          -8.06301022,  -7.22633886,  -9.50167847,  -7.88424015, -10.52373123]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [522]; unstable size 522; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 244, 1, 522] with unstable size 243 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 522] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 522] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [243]; unstable size 243; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 243] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 243] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.54438400,  1.50450706, -1.00405860, -0.75059628, -0.65832686,
         -0.60824060,  0.62780261, -1.52603471,  1.13424706]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.79153347, -11.06904888,  -7.80160236,  -7.62448120,  -8.11459255,
          -8.06301022,  -7.22633886,  -9.50167847,  -7.88424015, -10.52373123]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.39375973, -10.87876701,  -7.30129433,  -7.40815878,  -7.76286411,
           -7.76071310,  -7.42278099,  -9.15025520,  -7.50671482, -10.33001041],
         [ -9.39375973, -10.87876701,  -7.30129433,  -7.40815878,  -7.76286411,
           -7.76071310,  -7.42278099,  -9.15025520,  -7.50671482, -10.33001041]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12148666, -0.01462221,  0.34008312,  0.33793211,  0.08393383]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.0123 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0795 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 156, vnnlib ID: 156 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.62991190, -8.22150135, -3.56266642, -2.64211535, -2.55210876,
         -3.17030573, -2.78596139, -4.91182852, -7.74587250, -7.17337656]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [520]; unstable size 520; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 520] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 520] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 520] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 184] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.35063863,  3.30825758, -0.56681514, -0.80880821, -1.41259146,
         -1.49340820,  0.91902608,  3.26092243,  2.75898981]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.62991190, -8.22150135, -3.56266642, -2.64211535, -2.55210876,
         -3.17030573, -2.78596139, -4.91182852, -7.74587250, -7.17337656]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.62991190, -8.22150135, -3.56266618, -2.64211535, -2.55210876,
          -3.17030573, -2.78596210, -4.91182852, -7.74587250, -7.17337751],
         [-6.62991190, -8.22150135, -3.56266618, -2.64211535, -2.55210876,
          -3.17030573, -2.78596210, -4.91182852, -7.74587250, -7.17337751]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.39236045, -0.52819037, -0.61819696, -0.38434362]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0737 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 157, vnnlib ID: 157 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.04801083,  -6.34156513, -11.41678429,  -9.62609482, -10.79650021,
         -10.91422462, -10.18493938,  -9.82091618,  -7.10640144,  -2.62643194]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [489]; unstable size 489; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 166, 1, 489] with unstable size 165 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 489] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 489] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [165]; unstable size 165; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 165] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 165] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.36141181, 2.37881184, 7.25882244, 5.68141174, 6.92046452, 6.83364058,
         6.18870258, 5.80481243, 3.38991737]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0628 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 158, vnnlib ID: 158 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.81927967,  -9.30375195, -10.87481976,  -8.97626114, -10.13474369,
          -8.76882172, -10.25335312,  -9.09837914,  -6.59457874, -10.58987808]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [517]; unstable size 517; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 517] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 517] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 517] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 191] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.71505964,  0.93899965,  2.11313224,  0.24073672,  1.31830502,
         -0.27658820,  1.65153718, -0.12757969,  2.09712458]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.81927967,  -9.30375195, -10.87481976,  -8.97626114, -10.13474369,
          -8.76882172, -10.25335312,  -9.09837914,  -6.59457874, -10.58987808]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.77it/s]100%|██████████| 1/1 [00:00<00:00,  8.76it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.51523590,  -9.07377148, -10.23342419,  -8.17811871,  -9.40123940,
           -7.79556513,  -9.75415516,  -8.18024349,  -6.82714367, -10.12567520],
         [ -9.51523590,  -9.07377148, -10.23342419,  -8.17811871,  -9.40123940,
           -7.79556513,  -9.75415516,  -8.18024349,  -6.82714367, -10.12567520]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.96842146, 1.35309982]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1168 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.416451454162598
alpha/beta optimization time: 1.201927900314331
initial alpha-crown bounds: tensor([[ 1.76490903,  1.00492334,  2.20698833,  0.32836938,  1.41238594,
         -0.17884541,  1.72935700, -0.01777840,  2.16614246]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.17884540557861328
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6148874759674
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.61484718322754
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.61482453346252
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.61480450630188
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.6147859096527
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.61476755142212
Verifying property 5 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.17884541]], device='cuda:0') need to verify.
Model prediction is: tensor([ -9.81927967,  -9.30375195, -10.87481976,  -8.97626114, -10.13474369,
         -8.76882172, -10.25335312,  -9.09837914,  -6.59457874, -10.58987808],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.17884541]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 517
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 188
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 726
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010585784912109375
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17884206771850586
10 lb beta sum: 0.0, worst -0.17885494232177734
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    func 0.0527    
Accumulated time: func 0.0527    prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 37] 
split level 1: [/input-12, 25] 
split level 2: [/input-12, 26] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 58] 
split level 5: [/input-12, 24] 
split level 6: [/input-12, 45] 
split level 7: [/input-12, 51] 
split level 8: [/input-12, 74] 
split level 9: [/input-12, 60] 
split level 10: [/input, 1735] 
split level 11: [/input-8, 1452] 
split level 12: [/input-8, 1459] 
split level 13: [/input, 1720] 
split level 14: [/input, 1690] 
split level 15: [/input-8, 923] 
split level 16: [/input, 1734] 
split level 17: [/input, 1692] 
split level 18: [/input, 2248] 
split level 19: [/input, 1674] 
split level 20: [/input, 1706] 
split level 21: [/input, 1736] 
split level 22: [/input-8, 1460] 
split level 23: [/input-8, 845] 
split level 24: [/input, 1675] 
split level 25: [/input, 1691] 
split level 26: [/input, 1721] 
split level 27: [/input, 1723] 
split level 28: [/input, 1704] 
split level 29: [/input-8, 493] 
split level 30: [/input, 1705] 
split level 31: [/input-8, 1596] 
split level 32: [/input-8, 1451] 
split level 33: [/input-8, 1010] 
split level 34: [/input-8, 1293] 
split level 35: [/input-8, 921] 
split level 36: [/input-8, 1962] 
split level 37: [/input, 1739] 
split level 38: [/input, 2686] 
split level 39: [/input-8, 931] 
split level 40: [/input-8, 1588] 
split level 41: [/input-8, 1011] 
split level 42: [/input-8, 1965] 
split level 43: [/input, 2217] 
split level 44: [/input, 2743] 
split level 45: [/input-8, 1438] 
split level 46: [/input-8, 1353] 
split level 47: [/input-8, 1933] 
split level 48: [/input-8, 852] 
split level 49: [/input, 1689] 
split level 50: [/input, 1733] 
split level 51: [/input, 1686] 
split level 52: [/input, 2199] 
split level 53: [/input-8, 517] 
split level 54: [/input-8, 949] 
split level 55: [/input, 2702] 
split level 56: [/input, 2776] 
split level 57: [/input, 1658] 
split level 58: [/input, 2774] 
split level 59: [/input-8, 1309] 
split level 60: [/input-8, 1369] 
split level 61: [/input-8, 1592] 
split level 62: [/input-8, 1583] 
split level 63: [/input-8, 1644] 
split level 64: [/input-8, 483] 
split level 65: [/input-8, 494] 
split level 66: [/input, 1452] 
split level 67: [/input, 1636] 
split level 68: [/input, 2476] 
split level 69: [/input-8, 1453] 
split level 70: [/input, 1755] 
split level 71: [/input-8, 1925] 
split level 72: [/input, 2281] 
split level 73: [/input, 1747] 
split level 74: [/input, 2216] 
split level 75: [/input, 2250] 
split level 76: [/input, 1478] 
split level 77: [/input-8, 1445] 
split level 78: [/input, 2265] 
split level 79: [/input, 2157] 
split level 80: [/input, 1672] 
split level 81: [/input, 1347] 
split level 82: [/input-8, 301] 
split level 83: [/input-8, 862] 
split level 84: [/input, 1364] 
split level 85: [/input, 2486] 
split level 86: [/input, 2685] 
split level 87: [/input, 3527] 
split level 88: [/input, 2989] 
split level 89: [/input, 2200] 
split level 90: [/input, 1481] 
split level 91: [/input, 2501] 
split level 92: [/input-8, 522] 
split level 93: [/input-8, 799] 
split level 94: [/input, 2729] 
split level 95: [/input-8, 527] 
split level 96: [/input, 1731] 
split level 97: [/input, 2504] 
split level 98: [/input, 3544] 
split level 99: [/input, 3090] 
split level 100: [/input, 1647] 
split level 101: [/input, 3560] 
split level 102: [/input, 4043] 
split level 103: [/input-8, 1584] 
split level 104: [/input, 2213] 
split level 105: [/input, 3396] 
split level 106: [/input-8, 1444] 
split level 107: [/input, 2188] 
split level 108: [/input, 2472] 
split level 109: [/input, 2891] 
split level 110: [/input-8, 1656] 
split level 111: [/input, 2492] 
split level 112: [/input, 1607] 
split level 113: [/input, 2148] 
split level 114: [/input-8, 1585] 
split level 115: [/input, 2473] 
split level 116: [/input, 2155] 
split level 117: [/input, 3395] 
split level 118: [/input, 2535] 
split level 119: [/input, 2322] 
split level 120: [/input-8, 942] 
split level 121: [/input, 2493] 
split level 122: [/input-8, 1064] 
split level 123: [/input, 2164] 
split level 124: [/input, 2282] 
split level 125: [/input-8, 836] 
split level 126: [/input-8, 387] 
split level 127: [/input, 2197] 
split level 128: [/input, 2503] 
split level 129: [/input, 3749] 
split level 130: [/input, 1316] 
split level 131: [/input, 252] 
split level 132: [/input, 2521] 
split level 133: [/input-8, 149] 
split level 134: [/input, 2506] 
split level 135: [/input, 2337] 
split level 136: [/input, 2244] 
split level 137: [/input, 2458] 
split level 138: [/input, 2099] 
split level 139: [/input, 2154] 
split level 140: [/input, 3394] 
split level 141: [/input, 2324] 
split level 142: [/input, 3105] 
split level 143: [/input-8, 1285] 
split level 144: [/input, 3781] 
split level 145: [/input, 2132] 
split level 146: [/input, 3522] 
split level 147: [/input-8, 1973] 
split level 148: [/input-8, 963] 
split level 149: [/input, 2523] 
split level 150: [/input-8, 647] 
split level 151: [/input, 3490] 
split level 152: [/input, 3293] 
split level 153: [/input, 1363] 
split level 154: [/input, 4029] 
split level 155: [/input-8, 1449] 
split level 156: [/input, 3005] 
split level 157: [/input, 1498] 
split level 158: [/input, 2067] 
split level 159: [/input, 2356] 
split level 160: [/input, 2509] 
split level 161: [/input, 2171] 
split level 162: [/input, 3410] 
split level 163: [/input, 2499] 
split level 164: [/input, 3753] 
split level 165: [/input, 2494] 
split level 166: [/input, 2190] 
split level 167: [/input, 2508] 
split level 168: [/input, 2973] 
split level 169: [/input, 3783] 
split level 170: [/input, 2371] 
split level 171: [/input-8, 1397] 
split level 172: [/input-8, 1065] 
split level 173: [/input, 3770] 
split level 174: [/input, 1335] 
split level 175: [/input, 3153] 
split level 176: [/input, 3786] 
split level 177: [/input-8, 114] 
split level 178: [/input-8, 835] 
split level 179: [/input, 2369] 
split level 180: [/input, 2917] 
split level 181: [/input, 3539] 
split level 182: [/input, 2306] 
split level 183: [/input, 3091] 
split level 184: [/input-8, 516] 
split level 185: [/input, 2347] 
split level 186: [/input, 3529] 
split level 187: [/input, 2083] 
split level 188: [/input-8, 97] 
split level 189: [/input-8, 397] 
split level 190: [/input, 3246] 
split level 191: [/input, 2307] 
split level 192: [/input, 3411] 
split level 193: [/input, 2305] 
split level 194: [/input, 2942] 
split level 195: [/input-8, 1347] 
split level 196: [/input, 2206] 
split level 197: [/input-8, 2008] 
split level 198: [/input, 239] 
split level 199: [/input-8, 431] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17879581451416016
10 lb beta sum: 0.0, worst -0.17879199981689453
Time: prepare 0.0117    bound 0.0966    transfer 0.0017    finalize 0.0028    func 0.1155    
Accumulated time: func 0.1682    prepare 0.0218    bound 0.1488    transfer 0.0018    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.43607879) min lb tensor(-0.17878914)
Number of Verified Splits: 7 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.010873556137084961 
BICCOS Cumulative time: 0.010873556137084961
Preprocessing time: 0.010146379470825195 Inference time: 0.0003185272216796875 Add cuts time: 0.00012731552124023438 Cut analysis time: 0.00028133392333984375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16462 (1), -0.16453 (1), -0.16450 (1), -0.16449 (1), -0.16446 (1), -0.16443 (1), -0.16429 (1), -0.16358 (1), -0.16302 (1), -0.16083 (1), -0.16055 (1), -0.16039 (1), -0.16034 (1), -0.16025 (1), -0.15999 (1), -0.15956 (1), -0.15856 (1), -0.15845 (1), -0.15833 (1), -0.15817 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5088    set_bounds 0.0097    solve 0.1156    add 0.2026    
Accumulated time: pickout 0.0003    decision 0.5088    set_bounds 0.0097    solve 0.1156    add 0.2026    
Current (lb-rhs): -0.16461658477783203
50 domains visited
Cumulative time: 0.9231610298156738

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 37] [/input-12, 37] [/input-12, 25] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
split level 1: [/input-12, 25] [/input-12, 25] [/input-12, 26] [/input-12, 26] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 26] [/input-12, 25] 
split level 2: [/input-12, 4] [/input-12, 26] [/input-12, 4] [/input-12, 4] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 25] [/input-12, 26] 
split level 3: [/input-12, 58] [/input-12, 4] [/input-12, 58] [/input-12, 58] [/input-12, 4] [/input-12, 58] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09042072296142578

all verified at 1th iter
Time: prepare 0.0076    bound 0.0123    transfer 0.0008    finalize 0.0025    func 0.0257    
Accumulated time: func 0.1939    prepare 0.0297    bound 0.1611    transfer 0.0026    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.22435808) min lb tensor(0.00014591)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03542733192443848 
BICCOS Cumulative time: 0.04630088806152344
Preprocessing time: 0.011935234069824219 Inference time: 0.014292240142822266 Add cuts time: 0.00899815559387207 Cut analysis time: 0.00020170211791992188
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0082    decision 0.0194    set_bounds 0.0121    solve 0.0258    add 0.0152    
Accumulated time: pickout 0.0085    decision 0.5282    set_bounds 0.0218    solve 0.1414    add 0.2178    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 37] 
split level 1: [/input-12, 25] 
split level 2: [/input-12, 26] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 58] 
split level 5: [/input-12, 45] 
split level 6: [/input-12, 51] 
split level 7: [/input-12, 74] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.45201969146728516

all verified at 0th iter
Time: prepare 0.0036    bound 0.0040    transfer 0.0005    finalize 0.0014    func 0.0112    
Accumulated time: func 0.2052    prepare 0.0337    bound 0.1651    transfer 0.0032    finalize 0.0068    
all_split False
======================Cut inference begins======================
max lb tensor(0.95999336) min lb tensor(0.45201969)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.006464719772338867 
BICCOS Cumulative time: 0.052765607833862305
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.0217    set_bounds 0.0169    solve 0.0113    add 0.0002    
Accumulated time: pickout 0.0088    decision 0.5498    set_bounds 0.0388    solve 0.1527    add 0.2180    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
Cumulative time: 1.1036951541900635


Properties batch 6, size 1
Remaining timeout: 197.29812216758728
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.2980351448059
Verifying property 7 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.01777840]], device='cuda:0') need to verify.
Model prediction is: tensor([ -9.81927967,  -9.30375195, -10.87481976,  -8.97626114, -10.13474369,
         -8.76882172, -10.25335312,  -9.09837914,  -6.59457874, -10.58987808],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.01777840]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 517
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 188
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 726
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010228157043457031
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0177762508392334
10 lb beta sum: 0.0, worst -0.01778411865234375
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0517    transfer 0.0001    finalize 0.0001    func 0.0521    
Accumulated time: func 0.0521    prepare 0.0002    bound 0.0517    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 45] 
split level 2: [/input-12, 37] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 51] 
split level 5: [/input-12, 25] 
split level 6: [/input-12, 26] 
split level 7: [/input, 1735] 
split level 8: [/input-8, 1452] 
split level 9: [/input-12, 6] 
split level 10: [/input, 1720] 
split level 11: [/input-8, 1459] 
split level 12: [/input-8, 921] 
split level 13: [/input, 1690] 
split level 14: [/input, 1706] 
split level 15: [/input, 1692] 
split level 16: [/input-8, 1011] 
split level 17: [/input, 1734] 
split level 18: [/input-12, 1] 
split level 19: [/input, 2248] 
split level 20: [/input-8, 1460] 
split level 21: [/input-8, 870] 
split level 22: [/input, 1736] 
split level 23: [/input-8, 1010] 
split level 24: [/input, 1674] 
split level 25: [/input, 1704] 
split level 26: [/input, 1721] 
split level 27: [/input, 1705] 
split level 28: [/input, 1723] 
split level 29: [/input, 1675] 
split level 30: [/input-8, 1451] 
split level 31: [/input, 1739] 
split level 32: [/input, 2686] 
split level 33: [/input-8, 1438] 
split level 34: [/input, 2217] 
split level 35: [/input-8, 493] 
split level 36: [/input, 1691] 
split level 37: [/input-8, 923] 
split level 38: [/input, 2743] 
split level 39: [/input-8, 1596] 
split level 40: [/input, 2702] 
split level 41: [/input, 2219] 
split level 42: [/input-8, 1445] 
split level 43: [/input, 1755] 
split level 44: [/input, 2199] 
split level 45: [/input-8, 1962] 
split level 46: [/input, 2774] 
split level 47: [/input-8, 949] 
split level 48: [/input, 2776] 
split level 49: [/input-8, 1444] 
split level 50: [/input, 1733] 
split level 51: [/input-8, 1293] 
split level 52: [/input-8, 494] 
split level 53: [/input-8, 931] 
split level 54: [/input, 2216] 
split level 55: [/input, 2250] 
split level 56: [/input, 1689] 
split level 57: [/input, 2265] 
split level 58: [/input, 2684] 
split level 59: [/input, 2729] 
split level 60: [/input-8, 1453] 
split level 61: [/input-8, 862] 
split level 62: [/input-8, 517] 
split level 63: [/input, 2485] 
split level 64: [/input-8, 942] 
split level 65: [/input, 2685] 
split level 66: [/input, 2476] 
split level 67: [/input-8, 301] 
split level 68: [/input, 2213] 
split level 69: [/input-8, 1050] 
split level 70: [/input, 1672] 
split level 71: [/input-8, 1868] 
split level 72: [/input, 2200] 
split level 73: [/input-8, 1644] 
split level 74: [/input-8, 1937] 
split level 75: [/input, 1747] 
split level 76: [/input, 1658] 
split level 77: [/input, 2188] 
split level 78: [/input-8, 852] 
split level 79: [/input, 2157] 
split level 80: [/input, 1452] 
split level 81: [/input-8, 527] 
split level 82: [/input-8, 1965] 
split level 83: [/input, 2703] 
split level 84: [/input, 1647] 
split level 85: [/input-8, 522] 
split level 86: [/input, 2197] 
split level 87: [/input-8, 1064] 
split level 88: [/input, 1686] 
split level 89: [/input, 1636] 
split level 90: [/input, 2773] 
split level 91: [/input, 1478] 
split level 92: [/input, 1607] 
split level 93: [/input, 2486] 
split level 94: [/input-8, 488] 
split level 95: [/input, 2492] 
split level 96: [/input, 2282] 
split level 97: [/input-8, 1588] 
split level 98: [/input, 2989] 
split level 99: [/input, 2190] 
split level 100: [/input-8, 1369] 
split level 101: [/input-8, 1592] 
split level 102: [/input, 2493] 
split level 103: [/input-8, 1925] 
split level 104: [/input-8, 1583] 
split level 105: [/input, 2501] 
split level 106: [/input, 2281] 
split level 107: [/input, 3544] 
split level 108: [/input, 1481] 
split level 109: [/input-8, 1309] 
split level 110: [/input, 4043] 
split level 111: [/input, 1710] 
split level 112: [/input, 1731] 
split level 113: [/input-8, 387] 
split level 114: [/input-8, 835] 
split level 115: [/input-8, 1485] 
split level 116: [/input-8, 836] 
split level 117: [/input, 2164] 
split level 118: [/input, 3781] 
split level 119: [/input, 3560] 
split level 120: [/input, 2503] 
split level 121: [/input-8, 474] 
split level 122: [/input, 1742] 
split level 123: [/input-8, 114] 
split level 124: [/input-8, 963] 
split level 125: [/input, 2509] 
split level 126: [/input, 3527] 
split level 127: [/input, 2504] 
split level 128: [/input-8, 1449] 
split level 129: [/input, 2535] 
split level 130: [/input-8, 1739] 
split level 131: [/input-8, 647] 
split level 132: [/input, 3246] 
split level 133: [/input, 2462] 
split level 134: [/input-8, 982] 
split level 135: [/input-8, 1656] 
split level 136: [/input, 2155] 
split level 137: [/input, 2206] 
split level 138: [/input, 2521] 
split level 139: [/input, 2067] 
split level 140: [/input, 3396] 
split level 141: [/input, 2244] 
split level 142: [/input, 2324] 
split level 143: [/input, 2148] 
split level 144: [/input, 2171] 
split level 145: [/input, 2472] 
split level 146: [/input, 3090] 
split level 147: [/input-8, 1457] 
split level 148: [/input-8, 516] 
split level 149: [/input-8, 1013] 
split level 150: [/input, 113] 
split level 151: [/input, 2473] 
split level 152: [/input, 2494] 
split level 153: [/input, 2322] 
split level 154: [/input, 4029] 
split level 155: [/input, 3005] 
split level 156: [/input, 3786] 
split level 157: [/input, 3395] 
split level 158: [/input, 3749] 
split level 159: [/input, 3783] 
split level 160: [/input, 2973] 
split level 161: [/input, 2508] 
split level 162: [/input, 2523] 
split level 163: [/input, 2222] 
split level 164: [/input-8, 1933] 
split level 165: [/input, 3753] 
split level 166: [/input, 2083] 
split level 167: [/input, 3105] 
split level 168: [/input, 2506] 
split level 169: [/input, 2384] 
split level 170: [/input-8, 1945] 
split level 171: [/input, 3529] 
split level 172: [/input, 2337] 
split level 173: [/input, 2416] 
split level 174: [/input-8, 1024] 
split level 175: [/input, 3770] 
split level 176: [/input, 98] 
split level 177: [/input-8, 1959] 
split level 178: [/input, 2942] 
split level 179: [/input, 3767] 
split level 180: [/input-8, 962] 
split level 181: [/input, 2132] 
split level 182: [/input, 3153] 
split level 183: [/input-8, 661] 
split level 184: [/input, 2306] 
split level 185: [/input-8, 471] 
split level 186: [/input, 252] 
split level 187: [/input, 2285] 
split level 188: [/input, 3091] 
split level 189: [/input, 2369] 
split level 190: [/input, 2558] 
split level 191: [/input, 2499] 
split level 192: [/input, 2458] 
split level 193: [/input, 3522] 
split level 194: [/input, 2293] 
split level 195: [/input, 2479] 
split level 196: [/input, 239] 
split level 197: [/input, 1498] 
split level 198: [/input, 3490] 
split level 199: [/input, 3295] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01755976676940918
10 lb beta sum: 0.0, worst -0.017554044723510742
Time: prepare 0.0117    bound 0.0979    transfer 0.0023    finalize 0.0027    func 0.1173    
Accumulated time: func 0.1695    prepare 0.0216    bound 0.1496    transfer 0.0024    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.40603924) min lb tensor(-0.01755047)
Number of Verified Splits: 53 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.013079404830932617 
BICCOS Cumulative time: 0.013079404830932617
Preprocessing time: 0.01003408432006836 Inference time: 0.0019850730895996094 Add cuts time: 0.0008711814880371094 Cut analysis time: 0.00018906593322753906
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5046    set_bounds 0.0088    solve 0.1174    add 0.0101    
Accumulated time: pickout 0.0004    decision 0.5046    set_bounds 0.0088    solve 0.1174    add 0.0101    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 45] 
split level 2: [/input-12, 37] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 51] 
split level 5: [/input-12, 25] 
split level 6: [/input-12, 26] 
split level 7: [/input, 1736] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.6363282203674316

all verified at 0th iter
Time: prepare 0.0051    bound 0.0041    transfer 0.0006    finalize 0.0015    func 0.0129    
Accumulated time: func 0.1824    prepare 0.0271    bound 0.1537    transfer 0.0030    finalize 0.0044    
all_split False
======================Cut inference begins======================
max lb tensor(1.25986445) min lb tensor(0.63632822)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.007048130035400391 
BICCOS Cumulative time: 0.020127534866333008
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.0215    set_bounds 0.0207    solve 0.0130    add 0.0003    
Accumulated time: pickout 0.0008    decision 0.5262    set_bounds 0.0296    solve 0.1304    add 0.0103    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.7956192493438721


Properties batch 8, size 1
Remaining timeout: 196.29315662384033
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.7070 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 159, vnnlib ID: 159 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.94552898, -11.88663006, -11.47941303,  -9.72749805, -12.11168003,
         -10.94520473,  -8.55705357, -13.68229103, -10.67903423, -11.17602921]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [836]; unstable size 836; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 836] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 836] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 836] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 188] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.05637676, 1.39599609, 1.75964916, 0.17517826, 2.39905357, 1.14613712,
         3.57038641, 0.74127966, 1.09699881]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0688 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 160, vnnlib ID: 160 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.69691086, -9.90914440, -3.04869223, -5.95901394, -2.41780186,
         -6.51351690, -5.05484104, -5.98770094, -7.13607407, -9.76951885]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [647]; unstable size 647; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 242, 1, 647] with unstable size 241 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 647] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 647] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [241]; unstable size 241; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 241] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 241] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.95681751,  5.94022322, -0.25544405,  2.46004272,  2.96836066,
          1.44257116,  2.64147139,  3.15622735,  5.52299976]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.69691086, -9.90914440, -3.04869223, -5.95901394, -2.41780186,
         -6.51351690, -5.05484104, -5.98770094, -7.13607407, -9.76951885]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.23it/s]100%|██████████| 1/1 [00:00<00:00,  9.22it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.53756809, -9.76719856, -2.86113811, -5.85877895, -2.57433796,
          -6.37398863, -5.08237123, -6.03231287, -7.07665539, -9.52616215]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.28680015]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1113 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 26.49099349975586
alpha/beta optimization time: 1.1893041133880615
initial alpha-crown bounds: tensor([[ 2.05517411,  6.03731346, -0.21251884,  2.50705314,  3.02221227,
          1.49958706,  2.69033313,  3.27446389,  5.61737394]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.2125188410282135
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.63106274604797
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.63102555274963
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.6310031414032
Verifying property 2 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.21251884]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.69691086, -9.90914440, -3.04869223, -5.95901394, -2.41780186,
        -6.51351690, -5.05484104, -5.98770094, -7.13607407, -9.76951885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.21251884]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 647
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 238
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 906
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011539459228515625
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21251699328422546
10 lb beta sum: 0.0, worst -0.21252121031284332
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0523    transfer 0.0001    finalize 0.0001    func 0.0528    
Accumulated time: func 0.0528    prepare 0.0002    bound 0.0523    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 1] 
split level 2: [/input-12, 25] 
split level 3: [/input-12, 37] 
split level 4: [/input-12, 93] 
split level 5: [/input-12, 26] 
split level 6: [/input-12, 51] 
split level 7: [/input-12, 72] 
split level 8: [/input-12, 42] 
split level 9: [/input-12, 44] 
split level 10: [/input-12, 82] 
split level 11: [/input-8, 1370] 
split level 12: [/input-8, 1300] 
split level 13: [/input-8, 1066] 
split level 14: [/input-8, 1878] 
split level 15: [/input-8, 1291] 
split level 16: [/input-8, 666] 
split level 17: [/input-8, 532] 
split level 18: [/input-8, 682] 
split level 19: [/input-8, 1290] 
split level 20: [/input-8, 1292] 
split level 21: [/input-8, 658] 
split level 22: [/input-8, 1373] 
split level 23: [/input-8, 1020] 
split level 24: [/input-8, 1043] 
split level 25: [/input-8, 1365] 
split level 26: [/input-8, 1357] 
split level 27: [/input-8, 542] 
split level 28: [/input-8, 673] 
split level 29: [/input-8, 1819] 
split level 30: [/input-8, 524] 
split level 31: [/input-8, 468] 
split level 32: [/input-8, 1374] 
split level 33: [/input-8, 1309] 
split level 34: [/input-8, 1297] 
split level 35: [/input-8, 1347] 
split level 36: [/input-8, 517] 
split level 37: [/input-8, 538] 
split level 38: [/input-8, 541] 
split level 39: [/input-8, 698] 
split level 40: [/input, 1142] 
split level 41: [/input-8, 1021] 
split level 42: [/input-8, 484] 
split level 43: [/input-8, 1354] 
split level 44: [/input, 3221] 
split level 45: [/input-8, 79] 
split level 46: [/input, 3219] 
split level 47: [/input, 3220] 
split level 48: [/input-8, 1477] 
split level 49: [/input-8, 476] 
split level 50: [/input-12, 78] 
split level 51: [/input-8, 526] 
split level 52: [/input-8, 1072] 
split level 53: [/input-8, 1778] 
split level 54: [/input-8, 1382] 
split level 55: [/input-8, 1289] 
split level 56: [/input-8, 1349] 
split level 57: [/input-8, 1326] 
split level 58: [/input-8, 979] 
split level 59: [/input, 2452] 
split level 60: [/input-8, 516] 
split level 61: [/input-8, 572] 
split level 62: [/input-8, 87] 
split level 63: [/input-8, 1281] 
split level 64: [/input-8, 1396] 
split level 65: [/input-8, 530] 
split level 66: [/input-8, 1342] 
split level 67: [/input-8, 1388] 
split level 68: [/input-8, 1137] 
split level 69: [/input-8, 670] 
split level 70: [/input-8, 1476] 
split level 71: [/input-8, 1389] 
split level 72: [/input-8, 107] 
split level 73: [/input-8, 1053] 
split level 74: [/input-8, 562] 
split level 75: [/input-8, 1093] 
split level 76: [/input-8, 1478] 
split level 77: [/input-8, 1018] 
split level 78: [/input-8, 1779] 
split level 79: [/input-8, 1764] 
split level 80: [/input-8, 515] 
split level 81: [/input, 4036] 
split level 82: [/input-8, 1130] 
split level 83: [/input, 2453] 
split level 84: [/input-8, 1036] 
split level 85: [/input, 3204] 
split level 86: [/input-8, 860] 
split level 87: [/input-8, 990] 
split level 88: [/input-8, 1780] 
split level 89: [/input, 3430] 
split level 90: [/input-8, 987] 
split level 91: [/input-8, 535] 
split level 92: [/input-8, 895] 
split level 93: [/input-8, 1473] 
split level 94: [/input, 2906] 
split level 95: [/input, 3429] 
split level 96: [/input-12, 53] 
split level 97: [/input-12, 28] 
split level 98: [/input-8, 1438] 
split level 99: [/input, 1624] 
split level 100: [/input-8, 977] 
split level 101: [/input, 4046] 
split level 102: [/input-8, 564] 
split level 103: [/input-8, 565] 
split level 104: [/input-8, 1475] 
split level 105: [/input-8, 1777] 
split level 106: [/input, 450] 
split level 107: [/input, 459] 
split level 108: [/input, 4039] 
split level 109: [/input-8, 1738] 
split level 110: [/input-8, 1765] 
split level 111: [/input-8, 91] 
split level 112: [/input-8, 1457] 
split level 113: [/input, 4006] 
split level 114: [/input, 2149] 
split level 115: [/input-8, 552] 
split level 116: [/input, 453] 
split level 117: [/input, 4005] 
split level 118: [/input, 4020] 
split level 119: [/input, 1444] 
split level 120: [/input, 2922] 
split level 121: [/input-8, 1474] 
split level 122: [/input, 3445] 
split level 123: [/input-8, 1284] 
split level 124: [/input, 3452] 
split level 125: [/input, 2551] 
split level 126: [/input-8, 559] 
split level 127: [/input-8, 543] 
split level 128: [/input, 2235] 
split level 129: [/input, 460] 
split level 130: [/input-8, 982] 
split level 131: [/input, 2251] 
split level 132: [/input, 2535] 
split level 133: [/input, 2909] 
split level 134: [/input-8, 112] 
split level 135: [/input-8, 1294] 
split level 136: [/input, 410] 
split level 137: [/input, 2910] 
split level 138: [/input, 438] 
split level 139: [/input, 2507] 
split level 140: [/input-8, 569] 
split level 141: [/input-8, 1439] 
split level 142: [/input, 2553] 
split level 143: [/input, 2469] 
split level 144: [/input, 1993] 
split level 145: [/input, 3991] 
split level 146: [/input, 1782] 
split level 147: [/input, 2926] 
split level 148: [/input, 2492] 
split level 149: [/input, 2556] 
split level 150: [/input-8, 521] 
split level 151: [/input, 2547] 
split level 152: [/input, 2548] 
split level 153: [/input, 2526] 
split level 154: [/input, 3303] 
split level 155: [/input, 3268] 
split level 156: [/input, 2893] 
split level 157: [/input, 2203] 
split level 158: [/input, 445] 
split level 159: [/input, 2519] 
split level 160: [/input, 2924] 
split level 161: [/input, 2525] 
split level 162: [/input, 2749] 
split level 163: [/input-8, 71] 
split level 164: [/input, 2887] 
split level 165: [/input, 239] 
split level 166: [/input, 3317] 
split level 167: [/input-8, 974] 
split level 168: [/input, 3300] 
split level 169: [/input, 3469] 
split level 170: [/input, 4058] 
split level 171: [/input, 3254] 
split level 172: [/input, 2541] 
split level 173: [/input-8, 594] 
split level 174: [/input, 2491] 
split level 175: [/input, 1783] 
split level 176: [/input, 3318] 
split level 177: [/input, 250] 
split level 178: [/input, 1947] 
split level 179: [/input-8, 1766] 
split level 180: [/input, 1784] 
split level 181: [/input, 3188] 
split level 182: [/input, 4061] 
split level 183: [/input, 446] 
split level 184: [/input, 4018] 
split level 185: [/input, 3284] 
split level 186: [/input, 2538] 
split level 187: [/input, 2921] 
split level 188: [/input-8, 931] 
split level 189: [/input, 2783] 
split level 190: [/input, 2508] 
split level 191: [/input, 1691] 
split level 192: [/input, 3262] 
split level 193: [/input, 3304] 
split level 194: [/input, 2929] 
split level 195: [/input, 3428] 
split level 196: [/input, 1526] 
split level 197: [/input, 1962] 
split level 198: [/input, 3575] 
split level 199: [/input, 1977] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2125202864408493
10 lb beta sum: 0.0, worst -0.2125188410282135
Time: prepare 0.0114    bound 0.0956    transfer 0.0015    finalize 0.0027    func 0.1139    
Accumulated time: func 0.1667    prepare 0.0215    bound 0.1479    transfer 0.0016    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.01664466) min lb tensor(-0.21251684)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01036214828491211 
BICCOS Cumulative time: 0.01036214828491211
Preprocessing time: 0.010009288787841797 Inference time: 8.416175842285156e-05 Add cuts time: 6.246566772460938e-05 Cut analysis time: 0.00020623207092285156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20007 (1), -0.19931 (1), -0.19922 (1), -0.19884 (1), -0.19873 (1), -0.19870 (1), -0.19839 (1), -0.19818 (1), -0.19745 (1), -0.19722 (1), -0.19710 (1), -0.19693 (1), -0.19679 (1), -0.19658 (1), -0.19653 (1), -0.19645 (1), -0.19573 (1), -0.19547 (1), -0.19451 (1), -0.19368 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5042    set_bounds 0.0088    solve 0.1140    add 0.2109    
Accumulated time: pickout 0.0004    decision 0.5042    set_bounds 0.0088    solve 0.1140    add 0.2109    
Current (lb-rhs): -0.20007365942001343
50 domains visited
Cumulative time: 0.9282083511352539

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 25] [/input-12, 25] [/input-12, 1] [/input-12, 25] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 25] [/input-12, 25] [/input-12, 25] 
split level 3: [/input-12, 37] [/input-12, 26] [/input-12, 37] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1780613362789154
10 lb beta sum: 0.18744227290153503, worst -0.17715077102184296
Time: prepare 0.0073    bound 0.1294    transfer 0.0015    finalize 0.0028    func 0.1437    
Accumulated time: func 0.3104    prepare 0.0291    bound 0.2774    transfer 0.0031    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.08656764) min lb tensor(-0.17697060)
Number of Verified Splits: 29 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.014377355575561523 
BICCOS Cumulative time: 0.024739503860473633
Preprocessing time: 0.012374639511108398 Inference time: 0.0013108253479003906 Add cuts time: 0.0003921985626220703 Cut analysis time: 0.00029969215393066406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06183 (2), -0.06108 (2), -0.06098 (2), -0.06010 (2), -0.06008 (2), -0.05841 (2), -0.05738 (2), -0.05617 (2), -0.05609 (2), -0.05608 (2), -0.05552 (2), -0.05478 (2), -0.05454 (2), -0.05430 (2), -0.05320 (2), -0.05159 (2), -0.05085 (2), -0.05064 (2), -0.05053 (2), -0.04944 (2), 
Length of domains: 50
Time: pickout 0.0082    decision 0.0223    set_bounds 0.0140    solve 0.1438    add 0.2160    
Accumulated time: pickout 0.0086    decision 0.5265    set_bounds 0.0228    solve 0.2578    add 0.4270    
Current (lb-rhs): -0.06182800233364105
100 domains visited
Cumulative time: 1.3547918796539307

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 25] [/input-12, 25] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 1: [/input-12, 25] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 25] 
split level 2: [/input-12, 37] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 37] 
split level 3: [/input-12, 26] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04115001857280731
10 lb beta sum: 0.3064647912979126, worst -0.021371185779571533
Time: prepare 0.0065    bound 0.1173    transfer 0.0015    finalize 0.0028    func 0.1308    
Accumulated time: func 0.4412    prepare 0.0358    bound 0.3946    transfer 0.0047    finalize 0.0084    
all_split False
======================Cut inference begins======================
max lb tensor(0.15123594) min lb tensor(-0.02105352)
Number of Verified Splits: 394 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.037143707275390625 
BICCOS Cumulative time: 0.06188321113586426
Preprocessing time: 0.011970043182373047 Inference time: 0.018192768096923828 Add cuts time: 0.006768465042114258 Cut analysis time: 0.0002124309539794922
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0079    decision 0.0195    set_bounds 0.0169    solve 0.1309    add 0.0188    
Accumulated time: pickout 0.0165    decision 0.5460    set_bounds 0.0397    solve 0.3887    add 0.4458    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 1] 
split level 2: [/input-12, 25] 
split level 3: [/input-12, 37] 
split level 4: [/input-12, 26] 
split level 5: [/input-12, 51] 
split level 6: [/input-12, 44] 
split level 7: [/input-12, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.10418903827667236

all verified at 0th iter
Time: prepare 0.0037    bound 0.0042    transfer 0.0006    finalize 0.0014    func 0.0117    
Accumulated time: func 0.4529    prepare 0.0400    bound 0.3988    transfer 0.0053    finalize 0.0098    
all_split False
======================Cut inference begins======================
max lb tensor(0.35299459) min lb tensor(0.10418904)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.00713801383972168 
BICCOS Cumulative time: 0.06902122497558594
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.0219    set_bounds 0.0179    solve 0.0118    add 0.0001    
Accumulated time: pickout 0.0169    decision 0.5679    set_bounds 0.0576    solve 0.4005    add 0.4458    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
Cumulative time: 1.653965711593628


Properties batch 3, size 1
Remaining timeout: 196.76472997665405
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 196.764630317688
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 196.7646017074585
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 196.76458191871643
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 196.76456212997437
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 196.76454377174377
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.2355 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 161, vnnlib ID: 161 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.37989235, -12.20897579,  -6.17734432,  -5.76625729,  -6.93807411,
          -3.77729273,  -8.37195778,  -7.49653196, -10.76665974, -11.58906174]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [456]; unstable size 456; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 195, 1, 456] with unstable size 194 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 456] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 456] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [194]; unstable size 194; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 194] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 194] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.38867855, 6.47063160, 1.48629010, 1.57262707, 2.21376467, 3.23497581,
         2.94880295, 5.30806875, 6.18771601]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0851 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 162, vnnlib ID: 162 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.11128426, -16.94595146,  -9.70340824, -12.93247986, -10.71098232,
         -13.59650612, -11.43742085, -14.93857956, -14.94828510, -17.84584045]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [429]; unstable size 429; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 211, 1, 429] with unstable size 210 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 429] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 429] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [210]; unstable size 210; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 210] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 210] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.12003732, 5.67748880, 2.36852121, 0.16531861, 2.94698167, 0.60729074,
         3.85684562, 3.46587372, 6.63982296]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0672 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 163, vnnlib ID: 163 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.02505970,  -9.52995014,  -8.17180538,  -8.71479893,  -8.61084557,
          -8.27292728,  -9.82778072,  -7.94948912, -11.30757618,  -9.90987301]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [638]; unstable size 638; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 638] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 638] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 638] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 259] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.64108038, -0.23480129, -1.33058929, -0.47275138, -0.46761560,
         -0.91006339,  0.31482863,  1.61070657,  0.12702465]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.02505970,  -9.52995014,  -8.17180538,  -8.71479893,  -8.61084557,
          -8.27292728,  -9.82778072,  -7.94948912, -11.30757618,  -9.90987301]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.50275230,  -9.31137848,  -7.50799370,  -8.29128933,  -8.19631863,
           -7.91926050,  -9.32222462,  -7.97495413, -10.89629650,  -9.75931168],
         [ -8.50275230,  -9.31137848,  -7.50799370,  -8.29128933,  -8.19631863,
           -7.91926050,  -9.32222462,  -7.97495413, -10.89629650,  -9.75931168]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.52779818,  1.33642435, -0.46696043,  0.31633520,  0.22136450,
          -0.05569363]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0067 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0743 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 164, vnnlib ID: 164 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.41563416, -7.71300030, -2.86234260, -2.13727427, -3.26359797,
         -1.15524995, -3.90352178, -2.95602751, -6.72349644, -6.40303564]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [677]; unstable size 677; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 255, 1, 677] with unstable size 254 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 677] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 677] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [254]; unstable size 254; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 254] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 254] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.88557887, 4.58735847, 0.73231339, 0.69587111, 1.00518155, 1.60793114,
         0.80470550, 3.98152113, 3.66006422]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0416 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 165, vnnlib ID: 165 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.93124580, -13.00026798, -10.51418877, -11.34232426, -11.59994984,
         -12.09090137, -13.21082306, -11.37638664, -10.77716541, -12.72988605]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [678]; unstable size 678; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 229, 1, 678] with unstable size 228 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 678] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 678] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [228]; unstable size 228; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 228] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 228] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.97155690, -0.03237700, -1.84702158, -0.69079244, -0.48902345,
          0.04457062,  0.97582519, -2.07122731, -0.15928864]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.93124580, -13.00026798, -10.51418877, -11.34232426, -11.59994984,
         -12.09090137, -13.21082306, -11.37638664, -10.77716541, -12.72988605]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.93124771, -13.00026798, -10.51418972, -11.34232521, -11.59995174,
          -12.09090233, -13.21082497, -11.37638760, -10.77716732, -12.72988605],
         [-11.93124771, -13.00026798, -10.51418972, -11.34232521, -11.59995174,
          -12.09090233, -13.21082497, -11.37638760, -10.77716732, -12.72988605]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.55486012,  1.62388039, -0.86219788, -0.03406239,  0.22356415,
          -0.59922028,  1.35349846]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         ...,


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0820 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 166, vnnlib ID: 166 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.11835384, -8.97128582, -5.58492565, -4.69414091, -4.89179802,
         -5.64415693, -2.85636353, -6.39860678, -9.19930935, -7.69397116]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [551]; unstable size 551; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 328, 1, 551] with unstable size 327 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 551] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 551] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [327]; unstable size 327; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 327] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 327] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.57804966e+00,  3.19466400e+00,  7.62257576e-01,  2.92238951e-01,
         -4.12940979e-04,  8.40279341e-01,  1.08616281e+00,  3.18620491e+00,
          2.37681603e+00]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.11835384, -8.97128582, -5.58492565, -4.69414091, -4.89179802,
         -5.64415693, -2.85636353, -6.39860678, -9.19930935, -7.69397116]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.00it/s]100%|██████████| 1/1 [00:00<00:00,  9.00it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.55580521, -8.57808781, -5.04000854, -4.20195580, -4.09700203,
          -5.05925369, -2.93464255, -5.77540493, -8.65878296, -7.32569599]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[1.16235948]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1137 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 1th iter
best_l after optimization: 14.467984199523926
alpha/beta optimization time: 0.025171279907226562
initial alpha-crown bounds: tensor([[2.59561181, 3.21909380, 0.77398109, 0.30205679, 0.01444960, 0.85292172,
         1.10492229, 3.20971036, 2.39523602]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 0 ; Worst class: (+ rhs) 0.014449596405029297
verified with init bound!
Result: safe-incomplete in 0.2169 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 167, vnnlib ID: 167 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.73988724, -9.75906086, -5.44053173, -6.54372168, -6.64882469,
         -6.77933979, -7.41226196, -7.94059706, -5.61829853, -8.84854412]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [625]; unstable size 625; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 289, 1, 625] with unstable size 288 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 625] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 625] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [288]; unstable size 288; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 288] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 288] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.12974119, -0.58860964,  0.22682774,  0.44695175,  0.33009362,
          0.98268509,  1.32415771, -0.52337861,  2.49502420]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.73988724, -9.75906086, -5.44053173, -6.54372168, -6.64882469,
         -6.77933979, -7.41226196, -7.94059706, -5.61829853, -8.84854412]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.04it/s]100%|██████████| 1/1 [00:00<00:00,  9.03it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.69770527, -9.33743763, -5.35973167, -6.24397135, -6.46449852,
          -6.50081301, -7.10666513, -7.71766424, -4.85390425, -8.43731594],
         [-4.69770527, -9.33743763, -5.35973167, -6.24397135, -6.46449852,
          -6.50081301, -7.10666513, -7.71766424, -4.85390425, -8.43731594]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.66202641, 0.15619898]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1134 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 8.481110572814941
alpha/beta optimization time: 1.2139892578125
initial alpha-crown bounds: tensor([[ 3.24760509, -0.53066182,  0.27715790,  0.50497150,  0.39338481,
          1.04264975,  1.40458298, -0.43028873,  2.57170916]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.5306618213653564
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.60635924339294
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6063210964203
Verifying property 1 with 1 instances.
##### Instance 167 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.53066182]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.73988724, -9.75906086, -5.44053173, -6.54372168, -6.64882469,
        -6.77933979, -7.41226196, -7.94059706, -5.61829853, -8.84854412],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.53066182]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 625
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 280
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 926
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.000102996826171875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5306606888771057
10 lb beta sum: 0.0, worst -0.5306679010391235
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0527    transfer 0.0001    finalize 0.0001    func 0.0531    
Accumulated time: func 0.0531    prepare 0.0002    bound 0.0527    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 1] 
split level 3: [/input-12, 26] 
split level 4: [/input-12, 4] 
split level 5: [/input-12, 41] 
split level 6: [/input-12, 90] 
split level 7: [/input-12, 10] 
split level 8: [/input-8, 1637] 
split level 9: [/input-8, 1628] 
split level 10: [/input-12, 45] 
split level 11: [/input-8, 1438] 
split level 12: [/input-8, 542] 
split level 13: [/input-8, 1620] 
split level 14: [/input-8, 1309] 
split level 15: [/input-8, 845] 
split level 16: [/input-8, 1889] 
split level 17: [/input-8, 659] 
split level 18: [/input-8, 1890] 
split level 19: [/input-8, 1052] 
split level 20: [/input-8, 996] 
split level 21: [/input-8, 413] 
split level 22: [/input-8, 1885] 
split level 23: [/input-8, 1446] 
split level 24: [/input-8, 1003] 
split level 25: [/input-8, 1069] 
split level 26: [/input-8, 1011] 
split level 27: [/input-8, 284] 
split level 28: [/input-8, 1289] 
split level 29: [/input-8, 1437] 
split level 30: [/input-8, 549] 
split level 31: [/input-8, 854] 
split level 32: [/input-8, 1453] 
split level 33: [/input-8, 1461] 
split level 34: [/input-8, 1071] 
split level 35: [/input-8, 1013] 
split level 36: [/input-8, 1651] 
split level 37: [/input, 2268] 
split level 38: [/input-8, 1054] 
split level 39: [/input-8, 1044] 
split level 40: [/input-8, 422] 
split level 41: [/input-8, 1648] 
split level 42: [/input-8, 1891] 
split level 43: [/input-8, 1460] 
split level 44: [/input, 3273] 
split level 45: [/input-8, 1010] 
split level 46: [/input-8, 412] 
split level 47: [/input-8, 550] 
split level 48: [/input-8, 1656] 
split level 49: [/input-8, 1253] 
split level 50: [/input-8, 1017] 
split level 51: [/input-8, 1063] 
split level 52: [/input, 2188] 
split level 53: [/input, 3479] 
split level 54: [/input-8, 614] 
split level 55: [/input-8, 698] 
split level 56: [/input, 3224] 
split level 57: [/input, 2172] 
split level 58: [/input, 2177] 
split level 59: [/input, 2235] 
split level 60: [/input-8, 1027] 
split level 61: [/input-8, 1470] 
split level 62: [/input-8, 276] 
split level 63: [/input-8, 1021] 
split level 64: [/input-8, 924] 
split level 65: [/input-8, 410] 
split level 66: [/input-8, 859] 
split level 67: [/input-8, 1001] 
split level 68: [/input-8, 678] 
split level 69: [/input, 442] 
split level 70: [/input, 2230] 
split level 71: [/input, 3438] 
split level 72: [/input, 937] 
split level 73: [/input, 3495] 
split level 74: [/input-8, 1640] 
split level 75: [/input-8, 867] 
split level 76: [/input-8, 1870] 
split level 77: [/input, 3208] 
split level 78: [/input, 2709] 
split level 79: [/input, 1585] 
split level 80: [/input-8, 1893] 
split level 81: [/input-8, 1608] 
split level 82: [/input-8, 690] 
split level 83: [/input-8, 1436] 
split level 84: [/input, 457] 
split level 85: [/input-8, 792] 
split level 86: [/input, 1769] 
split level 87: [/input, 2473] 
split level 88: [/input, 3242] 
split level 89: [/input, 2754] 
split level 90: [/input, 2913] 
split level 91: [/input, 3468] 
split level 92: [/input-8, 563] 
split level 93: [/input, 1626] 
split level 94: [/input, 324] 
split level 95: [/input, 2251] 
split level 96: [/input, 3240] 
split level 97: [/input, 3564] 
split level 98: [/input, 1675] 
split level 99: [/input-8, 630] 
split level 100: [/input, 3226] 
split level 101: [/input, 3449] 
split level 102: [/input, 198] 
split level 103: [/input, 1449] 
split level 104: [/input, 2519] 
split level 105: [/input, 2537] 
split level 106: [/input, 2293] 
split level 107: [/input-8, 1625] 
split level 108: [/input, 294] 
split level 109: [/input-8, 421] 
split level 110: [/input, 3320] 
split level 111: [/input-8, 1059] 
split level 112: [/input, 1627] 
split level 113: [/input, 3496] 
split level 114: [/input, 3454] 
split level 115: [/input, 1768] 
split level 116: [/input, 1411] 
split level 117: [/input, 4038] 
split level 118: [/input-8, 1641] 
split level 119: [/input, 490] 
split level 120: [/input-8, 406] 
split level 121: [/input, 4017] 
split level 122: [/input, 3239] 
split level 123: [/input, 2601] 
split level 124: [/input-8, 1347] 
split level 125: [/input-8, 1340] 
split level 126: [/input-8, 1614] 
split level 127: [/input, 3257] 
split level 128: [/input-8, 1447] 
split level 129: [/input, 489] 
split level 130: [/input, 2245] 
split level 131: [/input, 1434] 
split level 132: [/input, 2229] 
split level 133: [/input, 1577] 
split level 134: [/input, 4018] 
split level 135: [/input, 2489] 
split level 136: [/input, 2246] 
split level 137: [/input, 2073] 
split level 138: [/input, 4055] 
split level 139: [/input-8, 2044] 
split level 140: [/input, 441] 
split level 141: [/input, 2265] 
split level 142: [/input, 1672] 
split level 143: [/input, 3274] 
split level 144: [/input, 2439] 
split level 145: [/input-8, 1055] 
split level 146: [/input, 2504] 
split level 147: [/input, 2074] 
split level 148: [/input, 970] 
split level 149: [/input-8, 606] 
split level 150: [/input-8, 648] 
split level 151: [/input, 1602] 
split level 152: [/input, 2585] 
split level 153: [/input, 2089] 
split level 154: [/input, 3127] 
split level 155: [/input, 426] 
split level 156: [/input, 901] 
split level 157: [/input, 2513] 
split level 158: [/input, 2600] 
split level 159: [/input, 2554] 
split level 160: [/input, 343] 
split level 161: [/input, 3142] 
split level 162: [/input-8, 1880] 
split level 163: [/input-8, 952] 
split level 164: [/input, 3442] 
split level 165: [/input, 1415] 
split level 166: [/input, 2252] 
split level 167: [/input, 4049] 
split level 168: [/input, 291] 
split level 169: [/input-8, 393] 
split level 170: [/input, 3669] 
split level 171: [/input, 3193] 
split level 172: [/input, 2475] 
split level 173: [/input, 3681] 
split level 174: [/input, 1416] 
split level 175: [/input, 3262] 
split level 176: [/input, 2257] 
split level 177: [/input-8, 1236] 
split level 178: [/input, 485] 
split level 179: [/input, 3532] 
split level 180: [/input, 3110] 
split level 181: [/input, 3288] 
split level 182: [/input, 3259] 
split level 183: [/input, 825] 
split level 184: [/input-8, 1455] 
split level 185: [/input, 2603] 
split level 186: [/input, 2584] 
split level 187: [/input, 2428] 
split level 188: [/input, 972] 
split level 189: [/input, 2470] 
split level 190: [/input, 3665] 
split level 191: [/input, 4043] 
split level 192: [/input, 2203] 
split level 193: [/input, 2301] 
split level 194: [/input, 2213] 
split level 195: [/input, 3309] 
split level 196: [/input, 4056] 
split level 197: [/input, 1464] 
split level 198: [/input, 3715] 
split level 199: [/input, 3580] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5305794477462769
10 lb beta sum: 0.0, worst -0.5305604934692383
Time: prepare 0.0116    bound 0.0968    transfer 0.0017    finalize 0.0030    func 0.1158    
Accumulated time: func 0.1689    prepare 0.0216    bound 0.1495    transfer 0.0018    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(-0.11686003) min lb tensor(-0.53055561)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.01015329360961914 
BICCOS Cumulative time: 0.01015329360961914
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.52136 (1), -0.52083 (1), -0.52066 (1), -0.52060 (1), -0.52059 (1), -0.52049 (1), -0.52012 (1), -0.51991 (1), -0.51951 (1), -0.51931 (1), -0.51827 (1), -0.51807 (1), -0.51798 (1), -0.51768 (1), -0.51642 (1), -0.51638 (1), -0.51618 (1), -0.51527 (1), -0.51500 (1), -0.51495 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5059    set_bounds 0.0093    solve 0.1159    add 0.1815    
Accumulated time: pickout 0.0003    decision 0.5059    set_bounds 0.0093    solve 0.1159    add 0.1815    
Current (lb-rhs): -0.5213555097579956
50 domains visited
Cumulative time: 0.8915681838989258

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 31] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 31] [/input-12, 26] [/input-12, 31] [/input-12, 1] [/input-12, 26] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 2: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 26] [/input-12, 1] [/input-12, 26] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 3: [/input-12, 26] [/input-12, 4] [/input-12, 26] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 26] [/input-12, 4] [/input-12, 4] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4770684838294983
10 lb beta sum: 0.0, worst -0.47671496868133545
Time: prepare 0.0127    bound 0.1000    transfer 0.0008    finalize 0.0028    func 0.1190    
Accumulated time: func 0.2879    prepare 0.0346    bound 0.2495    transfer 0.0025    finalize 0.0059    
all_split False
======================Cut inference begins======================
max lb tensor(0.18310082) min lb tensor(-0.47664070)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.013173818588256836 
BICCOS Cumulative time: 0.023327112197875977
Preprocessing time: 0.012258052825927734 Inference time: 0.0004470348358154297 Add cuts time: 0.0001773834228515625 Cut analysis time: 0.0002913475036621094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18464 (2), -0.18406 (2), -0.18320 (2), -0.18254 (2), -0.18248 (2), -0.17996 (2), -0.17808 (2), -0.17793 (2), -0.17778 (2), -0.17772 (2), -0.17758 (2), -0.17571 (2), -0.17558 (2), -0.17549 (2), -0.17437 (2), -0.17410 (2), -0.17368 (2), -0.17343 (2), -0.17274 (2), -0.17022 (2), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0197    set_bounds 0.0133    solve 0.1191    add 0.2213    
Accumulated time: pickout 0.0015    decision 0.5256    set_bounds 0.0226    solve 0.2349    add 0.4028    
Current (lb-rhs): -0.1846352219581604
100 domains visited
Cumulative time: 1.2863702774047852

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 54] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 26] [/input-12, 31] [/input-12, 26] [/input-12, 31] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 1] [/input-12, 26] [/input-12, 1] [/input-12, 26] 
split level 2: [/input-12, 4] [/input-12, 4] [/input-12, 26] [/input-12, 4] [/input-12, 4] [/input-12, 1] [/input-12, 4] [/input-12, 1] [/input-12, 4] [/input-12, 1] 
split level 3: [/input-12, 41] [/input-12, 41] [/input-12, 4] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14694342017173767
10 lb beta sum: 0.28082790970802307, worst -0.2666304409503937
Time: prepare 0.0068    bound 0.1165    transfer 0.0008    finalize 0.0022    func 0.1295    
Accumulated time: func 0.4174    prepare 0.0418    bound 0.3660    transfer 0.0034    finalize 0.0082    
all_split False
======================Cut inference begins======================
max lb tensor(0.25962430) min lb tensor(-0.12940517)
Number of Verified Splits: 201 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 7
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.024170637130737305 
BICCOS Cumulative time: 0.04749774932861328
Preprocessing time: 0.011855125427246094 Inference time: 0.00930166244506836 Add cuts time: 0.0026068687438964844 Cut analysis time: 0.0004069805145263672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04495 (3), -0.04454 (3), -0.04373 (3), -0.04332 (3), -0.04310 (3), -0.04215 (3), -0.04169 (3), -0.04164 (3), -0.04090 (3), -0.04013 (3), -0.04000 (3), -0.03989 (3), -0.03973 (3), -0.03904 (3), -0.03824 (3), -0.03749 (3), -0.03708 (3), -0.03700 (3), -0.03668 (3), -0.03666 (3), 
Length of domains: 50
Time: pickout 0.0076    decision 0.0199    set_bounds 0.0161    solve 0.1296    add 0.2314    
Accumulated time: pickout 0.0091    decision 0.5455    set_bounds 0.0387    solve 0.3645    add 0.6342    
Current (lb-rhs): -0.04494565725326538
150 domains visited
Cumulative time: 1.7223105430603027

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 3: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0817750096321106
10 lb beta sum: 0.27857398986816406, worst -0.4550172686576843
Time: prepare 0.0064    bound 0.1337    transfer 0.0008    finalize 0.0021    func 0.1461    
Accumulated time: func 0.5635    prepare 0.0485    bound 0.4996    transfer 0.0042    finalize 0.0103    
all_split False
======================Cut inference begins======================
max lb tensor(0.28025457) min lb tensor(-0.00902733)
Number of Verified Splits: 386 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.03658580780029297 
BICCOS Cumulative time: 0.08408355712890625
Preprocessing time: 0.011615276336669922 Inference time: 0.01903510093688965 Add cuts time: 0.005621671676635742 Cut analysis time: 0.00031375885009765625
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0077    decision 0.0196    set_bounds 0.0159    solve 0.1462    add 0.0226    
Accumulated time: pickout 0.0168    decision 0.5651    set_bounds 0.0547    solve 0.5107    add 0.6568    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 1] 
split level 3: [/input-12, 26] 
split level 4: [/input-12, 4] 
split level 5: [/input-12, 41] 
split level 6: [/input-12, 10] 
split level 7: [/input-8, 1628] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0846533477306366
10 lb beta sum: 0.06628304719924927, worst -0.08021605014801025
Time: prepare 0.0051    bound 0.1143    transfer 0.0006    finalize 0.1537    func 0.2756    
Accumulated time: func 0.8391    prepare 0.0540    bound 0.6140    transfer 0.0048    finalize 0.1640    
all_split False
======================Cut inference begins======================
max lb tensor(0.45884421) min lb tensor(-0.07980521)
Number of Verified Splits: 230 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3859955966472626
10 lb beta sum: 0.5472561120986938, worst -0.44803351163864136
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 6
#cuts 4-6: 1
#cuts 7-9: 8
#cuts >= 20: 0
BICCOS time: 0.2565317153930664 
BICCOS Cumulative time: 0.34061527252197266
Preprocessing time: 0.007881641387939453 Inference time: 0.24403977394104004 Add cuts time: 0.0038335323333740234 Cut analysis time: 0.0007767677307128906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07981 (8), -0.07800 (8), -0.07317 (8), -0.07174 (8), -0.06235 (8), -0.06095 (8), -0.05395 (8), -0.05267 (8), -0.04333 (8), -0.04235 (8), -0.03957 (8), -0.03868 (8), -0.01854 (8), -0.01674 (8), -0.01486 (8), -0.01471 (8), -0.01397 (8), -0.01348 (8), -0.00898 (8), -0.00839 (8), 
Length of domains: 26
Time: pickout 0.0004    decision 0.0218    set_bounds 0.0215    solve 0.2756    add 0.0481    
Accumulated time: pickout 0.0172    decision 0.5869    set_bounds 0.0762    solve 0.7864    add 0.7049    
Current (lb-rhs): -0.07980521023273468
176 domains visited
Cumulative time: 2.6143624782562256

BaB round 2
batch: 26
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1052] [/input-8, 1052] [/input-8, 1052] [/input-8, 413] [/input-8, 1052] [/input-8, 1052] [/input-8, 1620] [/input-8, 1052] [/input-8, 1620] [/input-8, 1052] 
split level 1: [/input-8, 1620] [/input-8, 1620] [/input-8, 1885] [/input-8, 1885] [/input-8, 1885] [/input-8, 1620] [/input-8, 845] [/input-8, 1620] [/input-8, 845] [/input-8, 1885] 
split level 2: [/input-8, 859] [/input-8, 1885] [/input-8, 1620] [/input-8, 1013] [/input-8, 1013] [/input-8, 859] [/input-8, 1885] [/input-8, 1885] [/input-8, 1885] [/input-8, 1620] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06688129901885986
10 lb beta sum: 0.19920486211776733, worst -0.06353810429573059
Time: prepare 0.0044    bound 0.1504    transfer 0.0011    finalize 0.0015    func 0.1589    
Accumulated time: func 0.9980    prepare 0.0589    bound 0.7644    transfer 0.0060    finalize 0.1655    
all_split False
======================Cut inference begins======================
max lb tensor(0.02715212) min lb tensor(-0.06331679)
Number of Verified Splits: 110 of 208
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3712886571884155
10 lb beta sum: 0.7892361283302307, worst -0.31192487478256226
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 6
#cuts 4-6: 2
#cuts 7-9: 8
#cuts >= 20: 0
BICCOS time: 0.21710801124572754 
BICCOS Cumulative time: 0.5577232837677002
Preprocessing time: 0.007453441619873047 Inference time: 0.2070448398590088 Add cuts time: 0.0017819404602050781 Cut analysis time: 0.000827789306640625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06332 (11), -0.06207 (11), -0.06193 (11), -0.06085 (11), -0.05977 (11), -0.05920 (11), -0.05871 (11), -0.05805 (11), -0.05786 (11), -0.05699 (11), -0.05613 (11), -0.05542 (11), -0.05537 (11), -0.05530 (11), -0.05510 (11), -0.05442 (11), -0.05437 (11), -0.05413 (11), -0.05387 (11), -0.05317 (11), 
Length of domains: 98
Time: pickout 0.0040    decision 0.0202    set_bounds 0.0120    solve 0.1590    add 0.0766    
Accumulated time: pickout 0.0212    decision 0.6070    set_bounds 0.0881    solve 0.9454    add 0.7815    
Current (lb-rhs): -0.06331679224967957
274 domains visited
Cumulative time: 3.1115200519561768

BaB round 3
batch: 98
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 413] [/input-8, 1437] [/input-8, 284] [/input-8, 413] [/input-8, 1437] [/input-8, 284] [/input-8, 413] [/input-8, 1437] [/input-8, 284] [/input-8, 413] 
split level 1: [/input-8, 845] [/input-8, 845] [/input-8, 413] [/input-8, 845] [/input-8, 845] [/input-8, 413] [/input-8, 845] [/input-8, 845] [/input-8, 413] [/input-8, 845] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05991005897521973
10 lb beta sum: 0.352335125207901, worst -0.05690482258796692
Time: prepare 0.0077    bound 0.1388    transfer 0.0020    finalize 0.0019    func 0.1530    
Accumulated time: func 1.1510    prepare 0.0667    bound 0.9032    transfer 0.0079    finalize 0.1674    
all_split False
======================Cut inference begins======================
max lb tensor(0.02092995) min lb tensor(-0.05680481)
Number of Verified Splits: 79 of 392
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 6
#cuts 4-6: 1
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.020848512649536133 
BICCOS Cumulative time: 0.5785717964172363
Preprocessing time: 0.011671781539916992 Inference time: 0.0075075626373291016 Add cuts time: 0.0011556148529052734 Cut analysis time: 0.0005135536193847656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05680 (13), -0.05558 (13), -0.05514 (13), -0.05403 (13), -0.05245 (13), -0.05232 (13), -0.05229 (13), -0.05140 (13), -0.05128 (13), -0.05113 (13), -0.05066 (13), -0.05043 (13), -0.05017 (13), -0.04976 (13), -0.04958 (13), -0.04925 (13), -0.04914 (13), -0.04834 (13), -0.04825 (13), -0.04815 (13), 
Length of domains: 313
Time: pickout 0.0146    decision 0.0199    set_bounds 0.0189    solve 0.1531    add 0.0764    
Accumulated time: pickout 0.0358    decision 0.6269    set_bounds 0.1070    solve 1.0985    add 0.8580    
Current (lb-rhs): -0.056804805994033813
587 domains visited
Cumulative time: 3.4242734909057617

BaB round 4
batch: 313
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1011] [/input-8, 284] [/input-8, 1891] [/input-8, 284] [/input-8, 1011] [/input-8, 284] [/input-8, 1891] [/input-8, 284] [/input-8, 1011] [/input-8, 284] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05740851163864136
10 lb beta sum: 0.42183589935302734, worst -0.05447453260421753
Time: prepare 0.0122    bound 0.1394    transfer 0.0032    finalize 0.0027    func 0.1623    
Accumulated time: func 1.3133    prepare 0.0792    bound 1.0426    transfer 0.0111    finalize 0.1701    
all_split False
======================Cut inference begins======================
max lb tensor(0.31179571) min lb tensor(-0.05441083)
Number of Verified Splits: 179 of 626
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 11
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.04012894630432129 
BICCOS Cumulative time: 0.6187007427215576
Preprocessing time: 0.018191814422607422 Inference time: 0.019470691680908203 Add cuts time: 0.0020079612731933594 Cut analysis time: 0.0004584789276123047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05441 (14), -0.05323 (14), -0.05273 (14), -0.05172 (14), -0.04998 (14), -0.04981 (14), -0.04975 (14), -0.04891 (14), -0.04887 (14), -0.04874 (14), -0.04811 (14), -0.04786 (14), -0.04746 (14), -0.04723 (14), -0.04707 (14), -0.04674 (14), -0.04665 (14), -0.04609 (14), -0.04596 (14), -0.04574 (14), 
Length of domains: 447
Time: pickout 0.0179    decision 0.0288    set_bounds 0.0278    solve 0.1625    add 0.0914    
Accumulated time: pickout 0.0537    decision 0.6558    set_bounds 0.1349    solve 1.2611    add 0.9494    
Current (lb-rhs): -0.05441083014011383
1034 domains visited
Cumulative time: 3.801492691040039

BaB round 5
batch: 447
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1656] [/input-8, 1011] [/input-8, 1656] [/input-8, 1013] [/input-8, 413] [/input-8, 1011] [/input-8, 1656] [/input-8, 1656] [/input-8, 1011] [/input-8, 1656] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05660182237625122
10 lb beta sum: 0.9300376176834106, worst -0.051294296979904175
Time: prepare 0.0182    bound 0.1399    transfer 0.0017    finalize 0.0038    func 0.1695    
Accumulated time: func 1.4829    prepare 0.0976    bound 1.1825    transfer 0.0128    finalize 0.1739    
all_split False
======================Cut inference begins======================
max lb tensor(0.71049571) min lb tensor(-0.05122364)
Number of Verified Splits: 728 of 894
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.11699533462524414 
BICCOS Cumulative time: 0.7356960773468018
Preprocessing time: 0.027122020721435547 Inference time: 0.0802457332611084 Add cuts time: 0.009098529815673828 Cut analysis time: 0.0005290508270263672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05122 (15), -0.04997 (15), -0.04655 (15), -0.04650 (15), -0.04560 (15), -0.04537 (15), -0.04411 (15), -0.04328 (15), -0.04285 (15), -0.04247 (15), -0.04186 (15), -0.04153 (15), -0.04106 (15), -0.04000 (15), -0.03918 (15), -0.03839 (15), -0.03750 (15), -0.03713 (15), -0.03695 (15), -0.03500 (15), 
Length of domains: 166
Time: pickout 0.0476    decision 0.0328    set_bounds 0.0390    solve 0.1698    add 0.0761    
Accumulated time: pickout 0.1013    decision 0.6886    set_bounds 0.1738    solve 1.4308    add 1.0255    
Current (lb-rhs): -0.05122363567352295
1200 domains visited
Cumulative time: 4.294680118560791

BaB round 6
batch: 166
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1438] [/input-8, 1656] [/input-8, 1656] [/input-8, 1438] [/input-8, 1438] [/input-8, 1891] [/input-8, 1438] [/input-8, 1656] [/input-8, 1891] [/input-8, 1438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05402636528015137
10 lb beta sum: 1.613495945930481, worst -0.042988121509552
Time: prepare 0.0067    bound 0.1328    transfer 0.0007    finalize 0.0018    func 0.1450    
Accumulated time: func 1.6279    prepare 0.1045    bound 1.3152    transfer 0.0135    finalize 0.1757    
all_split False
======================Cut inference begins======================
max lb tensor(0.71812493) min lb tensor(-0.04294866)
Number of Verified Splits: 251 of 332
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 21
#cuts >= 20: 0
BICCOS time: 0.041918277740478516 
BICCOS Cumulative time: 0.7776143550872803
Preprocessing time: 0.010370731353759766 Inference time: 0.02821063995361328 Add cuts time: 0.0028274059295654297 Cut analysis time: 0.0005095005035400391
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04295 (16), -0.04098 (16), -0.03823 (16), -0.03659 (16), -0.03468 (16), -0.03452 (16), -0.03425 (16), -0.03297 (16), -0.03280 (16), -0.03254 (16), -0.02994 (16), -0.02858 (16), -0.02773 (16), -0.02703 (16), -0.02547 (16), -0.02476 (16), -0.02341 (16), -0.02244 (16), -0.02135 (16), -0.02117 (16), 
Length of domains: 81
Time: pickout 0.0144    decision 0.0205    set_bounds 0.0145    solve 0.1451    add 0.0772    
Accumulated time: pickout 0.1157    decision 0.7091    set_bounds 0.1883    solve 1.5760    add 1.1027    
Current (lb-rhs): -0.04294866323471069
1281 domains visited
Cumulative time: 4.616856336593628

BaB round 7
batch: 81
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1656] [/input-8, 1656] [/input-8, 1656] [/input-8, 1656] [/input-8, 1656] [/input-8, 1656] [/input-8, 1656] [/input-8, 1656] [/input-8, 1656] [/input-8, 1656] 
split level 1: [/input-8, 1021] [/input-8, 1021] [/input-8, 1021] [/input-8, 1021] [/input-8, 1021] [/input-8, 1021] [/input-8, 1021] [/input-8, 276] [/input-8, 1063] [/input-8, 1063] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04871731996536255
10 lb beta sum: 1.55137038230896, worst -0.04216158390045166
Time: prepare 0.0065    bound 0.1312    transfer 0.0014    finalize 0.0018    func 0.1429    
Accumulated time: func 1.7708    prepare 0.1112    bound 1.4464    transfer 0.0149    finalize 0.1775    
all_split False
======================Cut inference begins======================
max lb tensor(0.37532294) min lb tensor(-0.04212826)
Number of Verified Splits: 240 of 324
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.04227614402770996 
BICCOS Cumulative time: 0.8198904991149902
Preprocessing time: 0.009782075881958008 Inference time: 0.02956366539001465 Add cuts time: 0.0023796558380126953 Cut analysis time: 0.0005507469177246094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04213 (18), -0.04199 (18), -0.03767 (18), -0.03737 (18), -0.03724 (18), -0.03684 (18), -0.03393 (18), -0.03377 (18), -0.03347 (18), -0.03346 (18), -0.03332 (18), -0.03331 (18), -0.03326 (18), -0.03240 (18), -0.02969 (18), -0.02925 (18), -0.02888 (18), -0.02886 (18), -0.02874 (18), -0.02842 (18), 
Length of domains: 84
Time: pickout 0.0139    decision 0.0162    set_bounds 0.0155    solve 0.1430    add 0.0758    
Accumulated time: pickout 0.1296    decision 0.7253    set_bounds 0.2038    solve 1.7190    add 1.1785    
Current (lb-rhs): -0.04212826490402222
1365 domains visited
Cumulative time: 4.932027101516724

BaB round 8
batch: 84
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1013] [/input-8, 1013] [/input-8, 1013] [/input-8, 1013] [/input-8, 1013] [/input-8, 1013] [/input-8, 1013] [/input-8, 1013] [/input-8, 1013] [/input-8, 1013] 
split level 1: [/input-8, 859] [/input-8, 859] [/input-8, 859] [/input-8, 859] [/input-8, 859] [/input-8, 859] [/input-8, 859] [/input-8, 859] [/input-8, 859] [/input-8, 859] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.042347073554992676
10 lb beta sum: 1.4392889738082886, worst -0.03646564483642578
Time: prepare 0.0066    bound 0.1307    transfer 0.0007    finalize 0.0016    func 0.1419    
Accumulated time: func 1.9127    prepare 0.1181    bound 1.5771    transfer 0.0156    finalize 0.1792    
all_split False
======================Cut inference begins======================
max lb tensor(0.02010942) min lb tensor(-0.03644615)
Number of Verified Splits: 81 of 336
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.022419452667236328 
BICCOS Cumulative time: 0.8423099517822266
Preprocessing time: 0.00979924201965332 Inference time: 0.010359764099121094 Add cuts time: 0.0017616748809814453 Cut analysis time: 0.0004987716674804688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03645 (20), -0.03631 (20), -0.03472 (20), -0.03460 (20), -0.03224 (20), -0.03221 (20), -0.03201 (20), -0.03188 (20), -0.03135 (20), -0.03102 (20), -0.03088 (20), -0.03022 (20), -0.02918 (20), -0.02916 (20), -0.02907 (20), -0.02903 (20), -0.02808 (20), -0.02807 (20), -0.02797 (20), -0.02792 (20), 
Length of domains: 255
Time: pickout 0.0145    decision 0.0160    set_bounds 0.0160    solve 0.1420    add 0.0777    
Accumulated time: pickout 0.1441    decision 0.7413    set_bounds 0.2198    solve 1.8609    add 1.2561    
Current (lb-rhs): -0.03644615411758423
1620 domains visited
Cumulative time: 5.2280707359313965

BaB round 9
batch: 255
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 276] [/input-8, 630] [/input-8, 276] [/input-8, 630] [/input-8, 630] [/input-8, 630] [/input-8, 1011] [/input-8, 630] [/input-8, 276] [/input-8, 276] 
cut re-enabled after branching node selection
0 lb beta sum: 1.782720685005188, worst -0.03477829694747925
10 lb beta sum: 1.782720685005188, worst -0.03477120399475098
Time: prepare 0.0221    bound 0.1410    transfer 0.0011    finalize 0.0027    func 0.1704    
Accumulated time: func 2.0831    prepare 0.1404    bound 1.7181    transfer 0.0167    finalize 0.1818    
all_split False
======================Cut inference begins======================
max lb tensor(0.22584176) min lb tensor(-0.03476781)
Number of Verified Splits: 103 of 510
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.03165721893310547 
BICCOS Cumulative time: 0.873967170715332
Preprocessing time: 0.015077352523803711 Inference time: 0.013756752014160156 Add cuts time: 0.0023190975189208984 Cut analysis time: 0.0005040168762207031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03477 (21), -0.03463 (21), -0.03299 (21), -0.03287 (21), -0.03218 (21), -0.03216 (21), -0.03131 (21), -0.03078 (21), -0.03033 (21), -0.03019 (21), -0.03019 (21), -0.02990 (21), -0.02919 (21), -0.02906 (21), -0.02894 (21), -0.02739 (21), -0.02734 (21), -0.02727 (21), -0.02720 (21), -0.02705 (21), 
Length of domains: 407
Time: pickout 0.0177    decision 0.0249    set_bounds 0.0226    solve 0.1705    add 0.0857    
Accumulated time: pickout 0.1618    decision 0.7662    set_bounds 0.2424    solve 2.0315    add 1.3419    
Current (lb-rhs): -0.03476780652999878
2027 domains visited
Cumulative time: 5.58966326713562

BaB round 10
batch: 407
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 1011] [/input-8, 1011] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 1011] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7658199071884155, worst -0.031921565532684326
10 lb beta sum: 1.7658199071884155, worst -0.031922757625579834
Time: prepare 0.0351    bound 0.1397    transfer 0.0016    finalize 0.0038    func 0.1864    
Accumulated time: func 2.2694    prepare 0.1757    bound 1.8578    transfer 0.0183    finalize 0.1856    
all_split False
======================Cut inference begins======================
max lb tensor(0.23539257) min lb tensor(-0.03191775)
Number of Verified Splits: 191 of 814
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.05615091323852539 
BICCOS Cumulative time: 0.9301180839538574
Preprocessing time: 0.023314714431762695 Inference time: 0.02990412712097168 Add cuts time: 0.002385854721069336 Cut analysis time: 0.0005462169647216797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03192 (22), -0.03159 (22), -0.03066 (22), -0.03023 (22), -0.03014 (22), -0.03007 (22), -0.02982 (22), -0.02934 (22), -0.02897 (22), -0.02890 (22), -0.02886 (22), -0.02877 (22), -0.02829 (22), -0.02821 (22), -0.02820 (22), -0.02789 (22), -0.02748 (22), -0.02715 (22), -0.02634 (22), -0.02623 (22), 
Length of domains: 623
Time: pickout 0.0199    decision 0.0335    set_bounds 0.0351    solve 0.1866    add 0.1010    
Accumulated time: pickout 0.1817    decision 0.7997    set_bounds 0.2776    solve 2.2180    add 1.4429    
Current (lb-rhs): -0.0319177508354187
2650 domains visited
Cumulative time: 6.031408786773682

BaB round 11
batch: 623
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1011] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 678] [/input-8, 549] [/input-8, 549] 
cut re-enabled after branching node selection
0 lb beta sum: 1.715478777885437, worst -0.029388725757598877
10 lb beta sum: 1.715478777885437, worst -0.029385030269622803
Time: prepare 0.0541    bound 0.1484    transfer 0.0065    finalize 0.0058    func 0.2228    
Accumulated time: func 2.4923    prepare 0.2303    bound 2.0062    transfer 0.0248    finalize 0.1915    
all_split False
======================Cut inference begins======================
max lb tensor(0.24034464) min lb tensor(-0.02937824)
Number of Verified Splits: 385 of 1246
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 22
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.10044550895690918 
BICCOS Cumulative time: 1.0305635929107666
Preprocessing time: 0.03785419464111328 Inference time: 0.05707192420959473 Add cuts time: 0.0049419403076171875 Cut analysis time: 0.0005774497985839844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02938 (23), -0.02906 (23), -0.02866 (23), -0.02820 (23), -0.02813 (23), -0.02774 (23), -0.02760 (23), -0.02753 (23), -0.02729 (23), -0.02718 (23), -0.02706 (23), -0.02692 (23), -0.02636 (23), -0.02631 (23), -0.02628 (23), -0.02576 (23), -0.02537 (23), -0.02494 (23), -0.02474 (23), -0.02462 (23), 
Length of domains: 861
Time: pickout 0.0595    decision 0.0473    set_bounds 0.2113    solve 0.2232    add 0.1085    
Accumulated time: pickout 0.2411    decision 0.8470    set_bounds 0.4889    solve 2.4412    add 1.5515    
Current (lb-rhs): -0.029378235340118408
3511 domains visited
Cumulative time: 6.788941860198975

BaB round 12
batch: 861
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1011] [/input-8, 1011] [/input-8, 1011] [/input-8, 1011] [/input-8, 1011] [/input-8, 1011] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03326660394668579
10 lb beta sum: 1.2930874824523926, worst -0.028674721717834473
Time: prepare 0.0383    bound 0.1733    transfer 0.0078    finalize 0.0101    func 0.2411    
Accumulated time: func 2.7334    prepare 0.2689    bound 2.1796    transfer 0.0326    finalize 0.2015    
all_split False
======================Cut inference begins======================
max lb tensor(0.33702278) min lb tensor(-0.02865452)
Number of Verified Splits: 601 of 1722
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 24
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.16265106201171875 
BICCOS Cumulative time: 1.1932146549224854
Preprocessing time: 0.055942535400390625 Inference time: 0.09710049629211426 Add cuts time: 0.008926868438720703 Cut analysis time: 0.0006811618804931641
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02865 (24), -0.02774 (24), -0.02745 (24), -0.02718 (24), -0.02709 (24), -0.02672 (24), -0.02628 (24), -0.02615 (24), -0.02568 (24), -0.02560 (24), -0.02556 (24), -0.02537 (24), -0.02533 (24), -0.02479 (24), -0.02440 (24), -0.02385 (24), -0.02348 (24), -0.02315 (24), -0.02300 (24), -0.02286 (24), 
Length of domains: 1121
Time: pickout 0.0195    decision 0.0655    set_bounds 0.0810    solve 0.2424    add 0.0627    
Accumulated time: pickout 0.2607    decision 0.9125    set_bounds 0.5699    solve 2.6836    add 1.6142    
Current (lb-rhs): -0.028654515743255615
4632 domains visited
Cumulative time: 7.432116746902466

BaB round 13
batch: 1121
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.031439781188964844
10 lb beta sum: 1.2133538722991943, worst -0.026630759239196777
Time: prepare 0.0492    bound 0.2000    transfer 0.0199    finalize 0.0160    func 0.5411    
Accumulated time: func 3.2745    prepare 0.3184    bound 2.3796    transfer 0.0525    finalize 0.2175    
all_split False
======================Cut inference begins======================
max lb tensor(0.33531201) min lb tensor(-0.02660853)
Number of Verified Splits: 1135 of 2242
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 26
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.30292367935180664 
BICCOS Cumulative time: 1.496138334274292
Preprocessing time: 0.0783851146697998 Inference time: 0.20355939865112305 Add cuts time: 0.016739606857299805 Cut analysis time: 0.004239559173583984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02661 (25), -0.02569 (25), -0.02563 (25), -0.02527 (25), -0.02517 (25), -0.02475 (25), -0.02433 (25), -0.02427 (25), -0.02386 (25), -0.02379 (25), -0.02351 (25), -0.02343 (25), -0.02341 (25), -0.02271 (25), -0.02257 (25), -0.02220 (25), -0.02202 (25), -0.02144 (25), -0.02120 (25), -0.02109 (25), 
Length of domains: 1107
Time: pickout 0.0177    decision 0.0774    set_bounds 0.1034    solve 0.5420    add 0.0965    
Accumulated time: pickout 0.2784    decision 0.9899    set_bounds 0.6733    solve 3.2256    add 1.7107    
Current (lb-rhs): -0.026608526706695557
5739 domains visited
Cumulative time: 8.591617822647095

BaB round 14
batch: 1107
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.030065059661865234
10 lb beta sum: 1.0392087697982788, worst -0.023689687252044678
Time: prepare 0.0509    bound 0.1923    transfer 0.0111    finalize 0.0155    func 0.2851    
Accumulated time: func 3.5597    prepare 0.3696    bound 2.5719    transfer 0.0636    finalize 0.2330    
all_split False
======================Cut inference begins======================
max lb tensor(0.36195013) min lb tensor(-0.02367845)
Number of Verified Splits: 1379 of 2214
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 28
#cuts >= 20: 0
BICCOS time: 0.33452463150024414 
BICCOS Cumulative time: 1.8306629657745361
Preprocessing time: 0.0715022087097168 Inference time: 0.24346399307250977 Add cuts time: 0.018835783004760742 Cut analysis time: 0.0007226467132568359
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02368 (26), -0.02330 (26), -0.02295 (26), -0.02237 (26), -0.02215 (26), -0.02192 (26), -0.02183 (26), -0.02156 (26), -0.02154 (26), -0.02097 (26), -0.02070 (26), -0.02063 (26), -0.02009 (26), -0.01965 (26), -0.01961 (26), -0.01925 (26), -0.01892 (26), -0.01888 (26), -0.01854 (26), -0.01841 (26), 
Length of domains: 835
Time: pickout 0.0250    decision 0.0778    set_bounds 0.1008    solve 0.2858    add 0.0946    
Accumulated time: pickout 0.3034    decision 1.0677    set_bounds 0.7740    solve 3.5114    add 1.8052    
Current (lb-rhs): -0.023678451776504517
6574 domains visited
Cumulative time: 9.535875082015991

BaB round 15
batch: 835
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 996] [/input-8, 630] [/input-8, 996] [/input-8, 996] [/input, 442] [/input-8, 996] [/input-8, 996] [/input-8, 996] [/input-8, 996] [/input-8, 996] 
cut re-enabled after branching node selection
0 lb beta sum: 1.5605440139770508, worst -0.028614044189453125
10 lb beta sum: 2.3452582359313965, worst -0.023683547973632812
Time: prepare 0.0858    bound 0.1738    transfer 0.0061    finalize 0.0124    func 0.2901    
Accumulated time: func 3.8497    prepare 0.4557    bound 2.7457    transfer 0.0698    finalize 0.2453    
all_split False
======================Cut inference begins======================
max lb tensor(0.71674955) min lb tensor(-0.02367845)
Number of Verified Splits: 1303 of 1670
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 31
#cuts >= 20: 0
BICCOS time: 0.30283665657043457 
BICCOS Cumulative time: 2.1334996223449707
Preprocessing time: 0.06004762649536133 Inference time: 0.2279040813446045 Add cuts time: 0.014003753662109375 Cut analysis time: 0.000881195068359375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02368 (27), -0.02330 (27), -0.02237 (27), -0.02192 (27), -0.02183 (27), -0.02156 (27), -0.02072 (27), -0.02063 (27), -0.02006 (27), -0.01989 (27), -0.01928 (27), -0.01925 (27), -0.01887 (27), -0.01877 (27), -0.01843 (27), -0.01795 (27), -0.01750 (27), -0.01740 (27), -0.01738 (27), -0.01674 (27), 
Length of domains: 367
Time: pickout 0.0337    decision 0.0608    set_bounds 0.0753    solve 0.5262    add 0.0858    
Accumulated time: pickout 0.3371    decision 1.1285    set_bounds 0.8493    solve 4.0376    add 1.8911    
Current (lb-rhs): -0.023678451776504517
6941 domains visited
Cumulative time: 10.644225597381592

BaB round 16
batch: 367
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 996] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 630] [/input-8, 549] [/input-8, 549] [/input-8, 549] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026646971702575684
10 lb beta sum: 1.5644805431365967, worst -0.019590318202972412
Time: prepare 0.0170    bound 0.1575    transfer 0.0028    finalize 0.0063    func 0.1884    
Accumulated time: func 4.0382    prepare 0.4730    bound 2.9032    transfer 0.0726    finalize 0.2516    
all_split False
======================Cut inference begins======================
max lb tensor(0.70631063) min lb tensor(-0.01958358)
Number of Verified Splits: 630 of 734
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 31
#cuts >= 20: 0
BICCOS time: 0.14085149765014648 
BICCOS Cumulative time: 2.274351119995117
Preprocessing time: 0.02256298065185547 Inference time: 0.1091771125793457 Add cuts time: 0.008351325988769531 Cut analysis time: 0.0007600784301757812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01958 (28), -0.01942 (28), -0.01851 (28), -0.01783 (28), -0.01768 (28), -0.01706 (28), -0.01530 (28), -0.01515 (28), -0.01500 (28), -0.01456 (28), -0.01428 (28), -0.01226 (28), -0.01218 (28), -0.01210 (28), -0.01195 (28), -0.01169 (28), -0.01130 (28), -0.01111 (28), -0.01111 (28), -0.01102 (28), 
Length of domains: 104
Time: pickout 0.0223    decision 0.0342    set_bounds 0.0330    solve 0.1887    add 0.0784    
Accumulated time: pickout 0.3593    decision 1.1627    set_bounds 0.8822    solve 4.2263    add 1.9694    
Current (lb-rhs): -0.019583582878112793
7045 domains visited
Cumulative time: 11.154764175415039

BaB round 17
batch: 104
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 549] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] 
cut re-enabled after branching node selection
0 lb beta sum: 1.627101182937622, worst -0.018513500690460205
10 lb beta sum: 1.627101182937622, worst -0.018534749746322632
Time: prepare 0.0100    bound 0.1468    transfer 0.0011    finalize 0.0013    func 0.1607    
Accumulated time: func 4.1989    prepare 0.4832    bound 3.0500    transfer 0.0737    finalize 0.2529    
all_split False
======================Cut inference begins======================
max lb tensor(0.24292797) min lb tensor(-0.01851338)
Number of Verified Splits: 81 of 208
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 31
#cuts >= 20: 0
BICCOS time: 0.023821592330932617 
BICCOS Cumulative time: 2.29817271232605
Preprocessing time: 0.006781816482543945 Inference time: 0.014396190643310547 Add cuts time: 0.001989126205444336 Cut analysis time: 0.0006544589996337891
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01851 (29), -0.01704 (29), -0.01637 (29), -0.01621 (29), -0.01567 (29), -0.01555 (29), -0.01529 (29), -0.01460 (29), -0.01453 (29), -0.01447 (29), -0.01426 (29), -0.01391 (29), -0.01390 (29), -0.01381 (29), -0.01223 (29), -0.01215 (29), -0.01194 (29), -0.01178 (29), -0.01168 (29), -0.01130 (29), 
Length of domains: 127
Time: pickout 0.0136    decision 0.0185    set_bounds 0.0104    solve 0.1608    add 0.0766    
Accumulated time: pickout 0.3729    decision 1.1812    set_bounds 0.8927    solve 4.3870    add 2.0460    
Current (lb-rhs): -0.018513381481170654
7172 domains visited
Cumulative time: 11.466639280319214

BaB round 18
batch: 127
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 549] [/input-8, 1608] [/input-8, 1608] [/input-8, 1608] [/input-8, 1608] [/input-8, 1608] [/input-8, 1608] [/input-8, 1608] [/input-8, 1608] [/input-8, 1608] 
cut re-enabled after branching node selection
0 lb beta sum: 1.574302315711975, worst -0.018513500690460205
10 lb beta sum: 1.574302315711975, worst -0.01853257417678833
Time: prepare 0.0113    bound 0.1318    transfer 0.0007    finalize 0.0015    func 0.1470    
Accumulated time: func 4.3459    prepare 0.4947    bound 3.1818    transfer 0.0744    finalize 0.2544    
all_split False
======================Cut inference begins======================
max lb tensor(0.24200320) min lb tensor(-0.01851064)
Number of Verified Splits: 121 of 254
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 31
#cuts >= 20: 0
BICCOS time: 0.03210186958312988 
BICCOS Cumulative time: 2.3302745819091797
Preprocessing time: 0.007966279983520508 Inference time: 0.022000789642333984 Add cuts time: 0.001542806625366211 Cut analysis time: 0.0005919933319091797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01851 (30), -0.01703 (30), -0.01637 (30), -0.01621 (30), -0.01566 (30), -0.01554 (30), -0.01529 (30), -0.01459 (30), -0.01453 (30), -0.01446 (30), -0.01426 (30), -0.01389 (30), -0.01387 (30), -0.01380 (30), -0.01322 (30), -0.01194 (30), -0.01178 (30), -0.01168 (30), -0.01128 (30), -0.01123 (30), 
Length of domains: 133
Time: pickout 0.0159    decision 0.0198    set_bounds 0.0117    solve 0.1471    add 0.0765    
Accumulated time: pickout 0.3889    decision 1.2010    set_bounds 0.9043    solve 4.5341    add 2.1225    
Current (lb-rhs): -0.018510639667510986
7305 domains visited
Cumulative time: 11.777435541152954

BaB round 19
batch: 133
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1608] [/input-8, 1608] [/input-8, 1453] [/input-8, 1453] [/input-8, 1608] [/input-8, 1461] [/input-8, 1461] [/input-8, 1461] [/input-8, 1461] [/input-8, 1461] 
cut re-enabled after branching node selection
0 lb beta sum: 1.5708415508270264, worst -0.016366899013519287
10 lb beta sum: 1.5708415508270264, worst -0.01637089252471924
Time: prepare 0.0116    bound 0.1304    transfer 0.0006    finalize 0.0015    func 0.1460    
Accumulated time: func 4.4918    prepare 0.5065    bound 3.3123    transfer 0.0750    finalize 0.2559    
all_split False
======================Cut inference begins======================
max lb tensor(0.23998439) min lb tensor(-0.01636690)
Number of Verified Splits: 117 of 266
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 31
#cuts >= 20: 0
BICCOS time: 0.03170299530029297 
BICCOS Cumulative time: 2.3619775772094727
Preprocessing time: 0.008105039596557617 Inference time: 0.0214846134185791 Add cuts time: 0.0015339851379394531 Cut analysis time: 0.0005793571472167969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01637 (31), -0.01621 (31), -0.01566 (31), -0.01554 (31), -0.01544 (31), -0.01529 (31), -0.01468 (31), -0.01459 (31), -0.01446 (31), -0.01397 (31), -0.01389 (31), -0.01387 (31), -0.01380 (31), -0.01323 (31), -0.01319 (31), -0.01290 (31), -0.01194 (31), -0.01178 (31), -0.01123 (31), -0.01119 (31), 
Length of domains: 149
Time: pickout 0.0158    decision 0.0161    set_bounds 0.0119    solve 0.1461    add 0.0765    
Accumulated time: pickout 0.4047    decision 1.2171    set_bounds 0.9162    solve 4.6802    add 2.1990    
Current (lb-rhs): -0.016366899013519287
7454 domains visited
Cumulative time: 12.083407163619995

BaB round 20
batch: 149
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1608] [/input-8, 1608] [/input-8, 1461] [/input-8, 1461] [/input-8, 1461] [/input-8, 1461] [/input-8, 1461] [/input, 442] [/input, 442] [/input, 442] 
cut re-enabled after branching node selection
0 lb beta sum: 1.5718990564346313, worst -0.015542924404144287
10 lb beta sum: 1.5718990564346313, worst -0.015550285577774048
Time: prepare 0.0137    bound 0.1326    transfer 0.0017    finalize 0.0025    func 0.1524    
Accumulated time: func 4.6443    prepare 0.5205    bound 3.4448    transfer 0.0767    finalize 0.2584    
all_split False
======================Cut inference begins======================
max lb tensor(0.23986554) min lb tensor(-0.01554292)
Number of Verified Splits: 106 of 298
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 32
#cuts >= 20: 0
BICCOS time: 0.03139638900756836 
BICCOS Cumulative time: 2.393373966217041
Preprocessing time: 0.008963584899902344 Inference time: 0.019219160079956055 Add cuts time: 0.0025856494903564453 Cut analysis time: 0.0006279945373535156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01554 (32), -0.01488 (32), -0.01478 (32), -0.01385 (32), -0.01380 (32), -0.01379 (32), -0.01331 (32), -0.01325 (32), -0.01314 (32), -0.01289 (32), -0.01265 (32), -0.01255 (32), -0.01246 (32), -0.01242 (32), -0.01210 (32), -0.01198 (32), -0.01178 (32), -0.01157 (32), -0.01148 (32), -0.01143 (32), 
Length of domains: 192
Time: pickout 0.0167    decision 0.0194    set_bounds 0.0118    solve 0.1525    add 0.1018    
Accumulated time: pickout 0.4213    decision 1.2365    set_bounds 0.9280    solve 4.8327    add 2.3008    
Current (lb-rhs): -0.015542924404144287
7646 domains visited
Cumulative time: 12.422266006469727

BaB round 21
batch: 192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1453] [/input-8, 1453] [/input-8, 1453] [/input-8, 1453] [/input-8, 1453] [/input-8, 1453] [/input-8, 410] [/input-8, 1453] [/input-8, 630] [/input-8, 630] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01604640483856201
10 lb beta sum: 0.9284765124320984, worst -0.013429373502731323
Time: prepare 0.0091    bound 0.1343    transfer 0.0013    finalize 0.0025    func 0.1498    
Accumulated time: func 4.7940    prepare 0.5299    bound 3.5791    transfer 0.0780    finalize 0.2608    
all_split False
======================Cut inference begins======================
max lb tensor(0.00786719) min lb tensor(-0.01336244)
Number of Verified Splits: 184 of 384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 34
#cuts >= 20: 0
BICCOS time: 0.04958200454711914 
BICCOS Cumulative time: 2.44295597076416
Preprocessing time: 0.011572599411010742 Inference time: 0.03508639335632324 Add cuts time: 0.002282857894897461 Cut analysis time: 0.0006401538848876953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01336 (33), -0.01236 (33), -0.01195 (33), -0.01134 (33), -0.01097 (33), -0.01082 (33), -0.01063 (33), -0.01050 (33), -0.01029 (33), -0.01010 (33), -0.00991 (33), -0.00991 (33), -0.00987 (33), -0.00959 (33), -0.00941 (33), -0.00920 (33), -0.00920 (33), -0.00918 (33), -0.00915 (33), -0.00888 (33), 
Length of domains: 200
Time: pickout 0.0562    decision 0.0225    set_bounds 0.0169    solve 0.1507    add 0.0760    
Accumulated time: pickout 0.4776    decision 1.2590    set_bounds 0.9448    solve 4.9834    add 2.3768    
Current (lb-rhs): -0.01336243748664856
7846 domains visited
Cumulative time: 12.80263614654541

BaB round 22
batch: 200
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 630] [/input-8, 1063] [/input-8, 630] [/input-8, 630] [/input-8, 630] [/input-8, 630] [/input-8, 1063] [/input-8, 1063] [/input-8, 630] [/input-8, 630] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014083534479141235
10 lb beta sum: 0.8078245520591736, worst -0.009910762310028076
Time: prepare 0.0104    bound 0.1527    transfer 0.0019    finalize 0.0031    func 0.1709    
Accumulated time: func 4.9649    prepare 0.5405    bound 3.7318    transfer 0.0799    finalize 0.2639    
all_split False
======================Cut inference begins======================
max lb tensor(0.50324196) min lb tensor(-0.00990695)
Number of Verified Splits: 270 of 400
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 34
#cuts >= 20: 0
BICCOS time: 0.0685739517211914 
BICCOS Cumulative time: 2.5115299224853516
Preprocessing time: 0.01237797737121582 Inference time: 0.052983760833740234 Add cuts time: 0.0025072097778320312 Cut analysis time: 0.0007050037384033203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00991 (34), -0.00920 (34), -0.00920 (34), -0.00920 (34), -0.00864 (34), -0.00851 (34), -0.00850 (34), -0.00836 (34), -0.00817 (34), -0.00816 (34), -0.00791 (34), -0.00774 (34), -0.00771 (34), -0.00747 (34), -0.00746 (34), -0.00745 (34), -0.00744 (34), -0.00726 (34), -0.00719 (34), -0.00700 (34), 
Length of domains: 130
Time: pickout 0.0139    decision 0.0257    set_bounds 0.0192    solve 0.1710    add 0.0795    
Accumulated time: pickout 0.4915    decision 1.2846    set_bounds 0.9641    solve 5.1544    add 2.4563    
Current (lb-rhs): -0.009906947612762451
7976 domains visited
Cumulative time: 13.189993858337402

BaB round 23
batch: 130
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 410] [/input-8, 410] [/input-8, 410] [/input-8, 410] [/input-8, 410] [/input-8, 1063] [/input-8, 924] [/input-8, 410] [/input-8, 1063] [/input-8, 410] 
cut re-enabled after branching node selection
0 lb beta sum: 1.1351218223571777, worst -0.009233057498931885
10 lb beta sum: 1.1351218223571777, worst -0.009239256381988525
Time: prepare 0.0137    bound 0.1570    transfer 0.0011    finalize 0.0020    func 0.1755    
Accumulated time: func 5.1405    prepare 0.5544    bound 3.8888    transfer 0.0810    finalize 0.2659    
all_split False
======================Cut inference begins======================
max lb tensor(0.24691361) min lb tensor(-0.00923270)
Number of Verified Splits: 141 of 260
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 35
#cuts >= 20: 0
BICCOS time: 0.03892350196838379 
BICCOS Cumulative time: 2.5504534244537354
Preprocessing time: 0.008324861526489258 Inference time: 0.028337717056274414 Add cuts time: 0.0016062259674072266 Cut analysis time: 0.0006546974182128906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00923 (35), -0.00919 (35), -0.00852 (35), -0.00849 (35), -0.00839 (35), -0.00835 (35), -0.00817 (35), -0.00774 (35), -0.00771 (35), -0.00749 (35), -0.00745 (35), -0.00743 (35), -0.00717 (35), -0.00678 (35), -0.00676 (35), -0.00675 (35), -0.00665 (35), -0.00662 (35), -0.00656 (35), -0.00651 (35), 
Length of domains: 119
Time: pickout 0.0146    decision 0.0172    set_bounds 0.0108    solve 0.1756    add 0.0759    
Accumulated time: pickout 0.5061    decision 1.3019    set_bounds 0.9748    solve 5.3300    add 2.5322    
Current (lb-rhs): -0.009232699871063232
8095 domains visited
Cumulative time: 13.531213521957397

BaB round 24
batch: 119
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 442] [/input-8, 1069] [/input-8, 1069] [/input, 442] [/input, 442] [/input, 442] [/input-8, 1069] [/input-8, 1069] [/input-12, 45] [/input-8, 1069] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.010276257991790771
10 lb beta sum: 0.6976372599601746, worst -0.006284981966018677
Time: prepare 0.0094    bound 0.1485    transfer 0.0020    finalize 0.0018    func 0.1633    
Accumulated time: func 5.3038    prepare 0.5640    bound 4.0373    transfer 0.0830    finalize 0.2677    
all_split False
======================Cut inference begins======================
max lb tensor(0.32861340) min lb tensor(-0.00613672)
Number of Verified Splits: 165 of 238
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 36
#cuts >= 20: 0
BICCOS time: 0.04308581352233887 
BICCOS Cumulative time: 2.593539237976074
Preprocessing time: 0.0076410770416259766 Inference time: 0.03292226791381836 Add cuts time: 0.001871347427368164 Cut analysis time: 0.0006511211395263672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00614 (36), -0.00591 (36), -0.00579 (36), -0.00574 (36), -0.00541 (36), -0.00518 (36), -0.00516 (36), -0.00510 (36), -0.00505 (36), -0.00495 (36), -0.00489 (36), -0.00488 (36), -0.00468 (36), -0.00450 (36), -0.00443 (36), -0.00428 (36), -0.00428 (36), -0.00411 (36), -0.00396 (36), -0.00395 (36), 
Length of domains: 73
Time: pickout 0.0161    decision 0.0193    set_bounds 0.0101    solve 0.1634    add 0.0769    
Accumulated time: pickout 0.5222    decision 1.3211    set_bounds 0.9849    solve 5.4934    add 2.6092    
Current (lb-rhs): -0.006136715412139893
8168 domains visited
Cumulative time: 13.86717700958252

BaB round 25
batch: 73
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 1: [/input-8, 648] [/input-8, 648] [/input-8, 648] [/input-8, 648] [/input-8, 648] [/input-8, 648] [/input-8, 648] [/input-8, 648] [/input-8, 648] [/input-8, 648] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.006847560405731201
10 lb beta sum: 0.5787690281867981, worst -0.002326369285583496
Time: prepare 0.0075    bound 0.1533    transfer 0.0033    finalize 0.0022    func 0.1682    
Accumulated time: func 5.4720    prepare 0.5716    bound 4.1905    transfer 0.0863    finalize 0.2699    
all_split False
======================Cut inference begins======================
max lb tensor(0.32967716) min lb tensor(-0.00231147)
Number of Verified Splits: 252 of 292
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 38
#cuts >= 20: 0
BICCOS time: 0.06381106376647949 
BICCOS Cumulative time: 2.6573503017425537
Preprocessing time: 0.009227991104125977 Inference time: 0.05155348777770996 Add cuts time: 0.0022487640380859375 Cut analysis time: 0.0007808208465576172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00231 (38), -0.00226 (38), -0.00221 (38), -0.00215 (38), -0.00209 (38), -0.00206 (38), -0.00201 (38), -0.00186 (38), -0.00162 (38), -0.00157 (38), -0.00149 (38), -0.00147 (38), -0.00146 (38), -0.00141 (38), -0.00141 (38), -0.00134 (38), -0.00131 (38), -0.00130 (38), -0.00125 (38), -0.00122 (38), 
Length of domains: 40
Time: pickout 0.0151    decision 0.0190    set_bounds 0.0169    solve 0.1683    add 0.0615    
Accumulated time: pickout 0.5373    decision 1.3401    set_bounds 1.0018    solve 5.6617    add 2.6707    
Current (lb-rhs): -0.0023114681243896484
8208 domains visited
Cumulative time: 14.220307111740112

BaB round 26
batch: 40
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 412] [/input-8, 412] [/input-8, 412] [/input-8, 412] [/input-8, 412] [/input-8, 412] [/input-8, 412] [/input-8, 412] [/input-8, 412] [/input-8, 412] 
split level 1: [/input, 457] [/input, 457] [/input, 457] [/input, 457] [/input, 457] [/input-8, 1640] [/input-8, 1010] [/input-8, 1010] [/input-8, 1010] [/input-8, 1010] 
split level 2: [/input, 2537] [/input, 2537] [/input, 2537] [/input, 2537] [/input, 2537] [/input, 2537] [/input, 2537] [/input, 2537] [/input, 2537] [/input, 2537] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0019342601299285889

all verified at 3th iter
Time: prepare 0.0084    bound 0.0327    transfer 0.0022    finalize 0.0023    func 0.0476    
Accumulated time: func 5.5195    prepare 0.5802    bound 4.2232    transfer 0.0885    finalize 0.2722    
all_split False
======================Cut inference begins======================
max lb tensor(0.00818104) min lb tensor(9.89437103e-06)
Number of Verified Splits: 320 of 320
No cut inferred: All or none verified.
Total number of valid cuts: 38.
#cuts 1-3: 38
#cuts >= 20: 0
BICCOS time: 0.010313034057617188 
BICCOS Cumulative time: 2.667663335800171
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0069    decision 0.0146    set_bounds 0.0284    solve 0.0477    add 0.0001    
Accumulated time: pickout 0.5442    decision 1.3547    set_bounds 1.0301    solve 5.7094    add 2.6707    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
8208 domains visited
Cumulative time: 14.330078363418579


Properties batch 2, size 1
Remaining timeout: 184.0584478378296
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 184.05836129188538
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 184.05833506584167
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 184.05831265449524
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 184.05829191207886
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 184.05827021598816
Verifying property 7 with 1 instances.
##### Instance 167 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.43028873]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.73988724, -9.75906086, -5.44053173, -6.54372168, -6.64882469,
        -6.77933979, -7.41226196, -7.94059706, -5.61829853, -8.84854412],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.43028873]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 625
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 280
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 926
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010442733764648438
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4302869439125061
10 lb beta sum: 0.0, worst -0.4303075075149536
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0590    transfer 0.0001    finalize 0.0001    func 0.0595    
Accumulated time: func 0.0595    prepare 0.0002    bound 0.0590    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 17] 
split level 3: [/input-12, 53] 
split level 4: [/input-12, 31] 
split level 5: [/input-8, 1139] 
split level 6: [/input-12, 99] 
split level 7: [/input-12, 54] 
split level 8: [/input-12, 26] 
split level 9: [/input-8, 1438] 
split level 10: [/input-8, 1323] 
split level 11: [/input-8, 1446] 
split level 12: [/input-8, 1436] 
split level 13: [/input-8, 1445] 
split level 14: [/input-8, 1444] 
split level 15: [/input, 2771] 
split level 16: [/input-8, 277] 
split level 17: [/input-8, 1437] 
split level 18: [/input-8, 1069] 
split level 19: [/input-8, 1381] 
split level 20: [/input-8, 1434] 
split level 21: [/input-8, 422] 
split level 22: [/input-8, 118] 
split level 23: [/input-8, 293] 
split level 24: [/input-8, 924] 
split level 25: [/input-8, 284] 
split level 26: [/input-8, 926] 
split level 27: [/input-8, 614] 
split level 28: [/input-8, 1111] 
split level 29: [/input-8, 1253] 
split level 30: [/input, 2741] 
split level 31: [/input-8, 413] 
split level 32: [/input, 2726] 
split level 33: [/input-8, 630] 
split level 34: [/input, 1643] 
split level 35: [/input, 1592] 
split level 36: [/input, 4070] 
split level 37: [/input-8, 1447] 
split level 38: [/input-8, 620] 
split level 39: [/input, 1745] 
split level 40: [/input-8, 933] 
split level 41: [/input, 2787] 
split level 42: [/input, 183] 
split level 43: [/input-8, 854] 
split level 44: [/input-8, 550] 
split level 45: [/input-8, 1148] 
split level 46: [/input-8, 1483] 
split level 47: [/input-8, 1571] 
split level 48: [/input-8, 1620] 
split level 49: [/input-8, 410] 
split level 50: [/input-8, 934] 
split level 51: [/input, 1627] 
split level 52: [/input-8, 1325] 
split level 53: [/input-8, 1572] 
split level 54: [/input-8, 476] 
split level 55: [/input, 1623] 
split level 56: [/input, 417] 
split level 57: [/input, 2177] 
split level 58: [/input-8, 925] 
split level 59: [/input, 2601] 
split level 60: [/input-8, 1455] 
split level 61: [/input-8, 606] 
split level 62: [/input-8, 1439] 
split level 63: [/input-8, 567] 
split level 64: [/input-8, 1505] 
split level 65: [/input, 1762] 
split level 66: [/input-8, 1463] 
split level 67: [/input, 4069] 
split level 68: [/input-8, 1484] 
split level 69: [/input, 2209] 
split level 70: [/input-8, 430] 
split level 71: [/input-8, 274] 
split level 72: [/input-8, 1252] 
split level 73: [/input, 371] 
split level 74: [/input, 3438] 
split level 75: [/input, 369] 
split level 76: [/input-8, 294] 
split level 77: [/input, 1626] 
split level 78: [/input, 2585] 
split level 79: [/input-8, 1628] 
split level 80: [/input, 4036] 
split level 81: [/input-8, 1052] 
split level 82: [/input, 2587] 
split level 83: [/input-8, 111] 
split level 84: [/input, 2149] 
split level 85: [/input, 2150] 
split level 86: [/input, 418] 
split level 87: [/input, 2497] 
split level 88: [/input-8, 1238] 
split level 89: [/input, 2133] 
split level 90: [/input-8, 575] 
split level 91: [/input-8, 941] 
split level 92: [/input, 198] 
split level 93: [/input, 2759] 
split level 94: [/input, 2151] 
split level 95: [/input, 2140] 
split level 96: [/input-8, 1013] 
split level 97: [/input, 1620] 
split level 98: [/input-8, 103] 
split level 99: [/input, 2754] 
split level 100: [/input-8, 628] 
split level 101: [/input, 4055] 
split level 102: [/input, 2600] 
split level 103: [/input-8, 412] 
split level 104: [/input-8, 85] 
split level 105: [/input, 4038] 
split level 106: [/input-8, 475] 
split level 107: [/input-8, 469] 
split level 108: [/input, 1364] 
split level 109: [/input, 4006] 
split level 110: [/input, 1714] 
split level 111: [/input, 2709] 
split level 112: [/input-8, 276] 
split level 113: [/input, 37] 
split level 114: [/input-8, 1021] 
split level 115: [/input-8, 1486] 
split level 116: [/input, 2119] 
split level 117: [/input-8, 1521] 
split level 118: [/input, 2616] 
split level 119: [/input, 2513] 
split level 120: [/input, 1411] 
split level 121: [/input-8, 1063] 
split level 122: [/input, 2599] 
split level 123: [/input-8, 440] 
split level 124: [/input, 1609] 
split level 125: [/input, 192] 
split level 126: [/input-8, 458] 
split level 127: [/input, 3265] 
split level 128: [/input, 3454] 
split level 129: [/input-8, 1429] 
split level 130: [/input-8, 421] 
split level 131: [/input, 2225] 
split level 132: [/input-8, 445] 
split level 133: [/input-8, 1573] 
split level 134: [/input, 2770] 
split level 135: [/input-8, 1006] 
split level 136: [/input, 294] 
split level 137: [/input-8, 1347] 
split level 138: [/input-8, 629] 
split level 139: [/input-8, 500] 
split level 140: [/input-8, 1055] 
split level 141: [/input, 3249] 
split level 142: [/input, 2257] 
split level 143: [/input, 1698] 
split level 144: [/input, 2584] 
split level 145: [/input, 176] 
split level 146: [/input-8, 1608] 
split level 147: [/input, 1577] 
split level 148: [/input, 824] 
split level 149: [/input, 1439] 
split level 150: [/input, 2136] 
split level 151: [/input-8, 1625] 
split level 152: [/input, 2102] 
split level 153: [/input-8, 484] 
split level 154: [/input-8, 1261] 
split level 155: [/input, 2786] 
split level 156: [/input-8, 501] 
split level 157: [/input, 2466] 
split level 158: [/input, 2603] 
split level 159: [/input, 1363] 
split level 160: [/input, 2139] 
split level 161: [/input, 4007] 
split level 162: [/input, 3217] 
split level 163: [/input, 160] 
split level 164: [/input, 2629] 
split level 165: [/input-8, 502] 
split level 166: [/input, 4049] 
split level 167: [/input-8, 1581] 
split level 168: [/input, 4089] 
split level 169: [/input-8, 1230] 
split level 170: [/input, 3442] 
split level 171: [/input, 2913] 
split level 172: [/input, 2630] 
split level 173: [/input, 2371] 
split level 174: [/input-8, 1027] 
split level 175: [/input, 2104] 
split level 176: [/input, 216] 
split level 177: [/input, 1675] 
split level 178: [/input, 4008] 
split level 179: [/input, 1415] 
split level 180: [/input, 2206] 
split level 181: [/input, 970] 
split level 182: [/input, 4056] 
split level 183: [/input, 4039] 
split level 184: [/input-8, 450] 
split level 185: [/input, 1115] 
split level 186: [/input-8, 478] 
split level 187: [/input, 2537] 
split level 188: [/input, 307] 
split level 189: [/input, 2116] 
split level 190: [/input, 3654] 
split level 191: [/input, 4018] 
split level 192: [/input-8, 1254] 
split level 193: [/input, 2480] 
split level 194: [/input, 3349] 
split level 195: [/input, 1406] 
split level 196: [/input, 2830] 
split level 197: [/input, 3280] 
split level 198: [/input-8, 454] 
split level 199: [/input, 921] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4302481412887573
10 lb beta sum: 0.0, worst -0.4302433729171753
Time: prepare 0.0115    bound 0.0997    transfer 0.0021    finalize 0.0032    func 0.1191    
Accumulated time: func 0.1786    prepare 0.0222    bound 0.1586    transfer 0.0022    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.29872966) min lb tensor(-0.43022752)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010963201522827148 
BICCOS Cumulative time: 0.010963201522827148
Preprocessing time: 0.010541915893554688 Inference time: 9.894371032714844e-05 Add cuts time: 8.0108642578125e-05 Cut analysis time: 0.0002422332763671875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.41681 (1), -0.41668 (1), -0.41636 (1), -0.41632 (1), -0.41619 (1), -0.41599 (1), -0.41588 (1), -0.41587 (1), -0.41499 (1), -0.41497 (1), -0.41493 (1), -0.41406 (1), -0.41355 (1), -0.41318 (1), -0.41229 (1), -0.41185 (1), -0.41168 (1), -0.41157 (1), -0.41025 (1), -0.40885 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5472    set_bounds 0.0100    solve 0.1192    add 0.2027    
Accumulated time: pickout 0.0004    decision 0.5472    set_bounds 0.0100    solve 0.1192    add 0.2027    
Current (lb-rhs): -0.4168089032173157
50 domains visited
Cumulative time: 0.9666156768798828

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 17] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 17] [/input-12, 82] [/input-12, 82] 
split level 1: [/input-12, 53] [/input-12, 17] [/input-12, 53] [/input-12, 17] [/input-12, 53] [/input-12, 17] [/input-12, 53] [/input-12, 53] [/input-12, 17] [/input-12, 17] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 53] [/input-12, 31] [/input-12, 53] [/input-12, 17] [/input-12, 31] [/input-12, 53] [/input-12, 31] 
split level 3: [/input-8, 1436] [/input-12, 26] [/input-12, 26] [/input-12, 31] [/input-12, 26] [/input-12, 31] [/input-12, 31] [/input-12, 26] [/input-12, 31] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3957613706588745
10 lb beta sum: 0.18990863859653473, worst -0.3915831446647644
Time: prepare 0.0076    bound 0.1163    transfer 0.0008    finalize 0.0026    func 0.1299    
Accumulated time: func 0.3085    prepare 0.0300    bound 0.2749    transfer 0.0030    finalize 0.0059    
all_split False
======================Cut inference begins======================
max lb tensor(0.27107483) min lb tensor(-0.39155373)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.015933513641357422 
BICCOS Cumulative time: 0.02689671516418457
Preprocessing time: 0.0122528076171875 Inference time: 0.0021784305572509766 Add cuts time: 0.0012333393096923828 Cut analysis time: 0.0002689361572265625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15930 (2), -0.15926 (2), -0.15783 (2), -0.15649 (2), -0.15637 (2), -0.15626 (2), -0.15568 (2), -0.15558 (2), -0.15435 (2), -0.15405 (2), -0.15358 (2), -0.15175 (2), -0.15160 (2), -0.15074 (2), -0.15065 (2), -0.15010 (2), -0.15009 (2), -0.14882 (2), -0.14841 (2), -0.14800 (2), 
Length of domains: 50
Time: pickout 0.0015    decision 0.0206    set_bounds 0.0128    solve 0.1300    add 0.2185    
Accumulated time: pickout 0.0019    decision 0.5678    set_bounds 0.0228    solve 0.2492    add 0.4212    
Current (lb-rhs): -0.15929973125457764
100 domains visited
Cumulative time: 1.3730294704437256

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 46] [/input-12, 46] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
split level 1: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 46] [/input-12, 53] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 53] [/input-12, 31] [/input-12, 53] [/input-12, 31] [/input-12, 31] 
split level 3: [/input-8, 118] [/input-8, 1323] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 31] [/input-8, 118] [/input-12, 31] [/input-12, 26] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1561770737171173
10 lb beta sum: 0.5189957022666931, worst -0.015814676880836487
Time: prepare 0.0076    bound 0.1178    transfer 0.0023    finalize 0.0024    func 0.1329    
Accumulated time: func 0.4414    prepare 0.0379    bound 0.3927    transfer 0.0053    finalize 0.0083    
all_split False
======================Cut inference begins======================
max lb tensor(0.40861589) min lb tensor(-0.01292534)
Number of Verified Splits: 388 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.03791618347167969 
BICCOS Cumulative time: 0.06481289863586426
Preprocessing time: 0.011948108673095703 Inference time: 0.016436338424682617 Add cuts time: 0.009204864501953125 Cut analysis time: 0.0003268718719482422
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0078    decision 0.0194    set_bounds 0.0161    solve 0.1330    add 0.0194    
Accumulated time: pickout 0.0097    decision 0.5873    set_bounds 0.0390    solve 0.3822    add 0.4406    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 17] 
split level 3: [/input-12, 53] 
split level 4: [/input-12, 31] 
split level 5: [/input-12, 54] 
split level 6: [/input-12, 26] 
split level 7: [/input-8, 1323] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10873138904571533
10 lb beta sum: 0.02466345578432083, worst -0.10058003664016724
Time: prepare 0.0051    bound 0.1297    transfer 0.0006    finalize 0.0018    func 0.1389    
Accumulated time: func 0.5803    prepare 0.0435    bound 0.5225    transfer 0.0058    finalize 0.0101    
all_split False
======================Cut inference begins======================
max lb tensor(0.77645779) min lb tensor(-0.09984310)
Number of Verified Splits: 248 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.43030399084091187
10 lb beta sum: 0.5207924842834473, worst -0.15012848377227783
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 6
#cuts 4-6: 6
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.27286672592163086 
BICCOS Cumulative time: 0.3376796245574951
Preprocessing time: 0.00726628303527832 Inference time: 0.2592329978942871 Add cuts time: 0.0056192874908447266 Cut analysis time: 0.0007481575012207031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09984 (8), -0.08699 (8), -0.07236 (8), -0.06075 (8), -0.02873 (8), -0.01645 (8), -0.01005 (8), -0.00914 (8), 
Length of domains: 8
Time: pickout 0.0004    decision 0.0218    set_bounds 0.0209    solve 0.1390    add 0.0332    
Accumulated time: pickout 0.0101    decision 0.6091    set_bounds 0.0599    solve 0.5212    add 0.4739    
Current (lb-rhs): -0.0998430997133255
108 domains visited
Cumulative time: 2.1081840991973877

BaB round 2
batch: 8
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 99] [/input-12, 99] [/input-12, 99] [/input-12, 99] [/input-12, 99] [/input-12, 99] [/input-12, 99] [/input-12, 99] 
split level 1: [/input-8, 1436] [/input-8, 1436] [/input-8, 1436] [/input-8, 413] [/input-8, 1436] [/input-8, 118] [/input-8, 1436] [/input-8, 1436] 
split level 2: [/input-8, 413] [/input-8, 118] [/input-8, 1437] [/input-8, 924] [/input-8, 413] [/input-8, 410] [/input-8, 118] [/input-8, 1437] 
split level 3: [/input-8, 924] [/input-8, 413] [/input-8, 924] [/input-8, 1620] [/input-8, 924] [/input, 1623] [/input-8, 413] [/input-8, 924] 
split level 4: [/input-8, 1620] [/input-8, 410] [/input-8, 410] [/input-8, 1628] [/input-8, 1620] [/input-8, 550] [/input-8, 410] [/input-8, 410] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08040636777877808
10 lb beta sum: 0.15260514616966248, worst -0.0793570727109909
Time: prepare 0.0056    bound 0.1302    transfer 0.0006    finalize 0.0014    func 0.1394    
Accumulated time: func 0.7197    prepare 0.0494    bound 0.6526    transfer 0.0064    finalize 0.0115    
all_split False
======================Cut inference begins======================
max lb tensor(0.42090046) min lb tensor(-0.07898134)
Number of Verified Splits: 189 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.340468168258667
10 lb beta sum: 0.8908014297485352, worst -0.04643496870994568
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 6
#cuts 4-6: 6
#cuts 7-9: 9
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 0.2821846008300781 
BICCOS Cumulative time: 0.6198642253875732
Preprocessing time: 0.00794219970703125 Inference time: 0.2634122371673584 Add cuts time: 0.00948786735534668 Cut analysis time: 0.0013422966003417969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07898 (13), -0.07823 (13), -0.07377 (13), -0.07338 (13), -0.07310 (13), -0.07264 (13), -0.06690 (13), -0.06622 (13), -0.06558 (13), -0.06502 (13), -0.06413 (13), -0.06377 (13), -0.06088 (13), -0.06050 (13), -0.06017 (13), -0.06004 (13), -0.05971 (13), -0.05947 (13), -0.05846 (13), -0.05819 (13), 
Length of domains: 67
Time: pickout 0.0012    decision 0.0162    set_bounds 0.0248    solve 0.1395    add 0.0825    
Accumulated time: pickout 0.0112    decision 0.6253    set_bounds 0.0847    solve 0.6606    add 0.5564    
Current (lb-rhs): -0.07898133993148804
175 domains visited
Cumulative time: 2.6632211208343506

BaB round 3
batch: 67
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1437] [/input-8, 118] [/input-8, 1437] [/input-8, 630] [/input-8, 1437] [/input-8, 118] [/input-8, 1437] [/input-8, 118] [/input-8, 1437] [/input-8, 118] 
split level 1: [/input-8, 924] [/input-8, 630] [/input-8, 924] [/input-8, 118] [/input-8, 924] [/input-8, 630] [/input-8, 924] [/input-8, 413] [/input-8, 924] [/input-8, 630] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07251304388046265
10 lb beta sum: 0.18331941962242126, worst -0.07159925997257233
Time: prepare 0.0054    bound 0.1431    transfer 0.0006    finalize 0.0016    func 0.3114    
Accumulated time: func 1.0311    prepare 0.0549    bound 0.7957    transfer 0.0070    finalize 0.0132    
all_split False
======================Cut inference begins======================
max lb tensor(0.01237285) min lb tensor(-0.07138827)
Number of Verified Splits: 22 of 268
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 7
#cuts 4-6: 4
#cuts 7-9: 2
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.012982606887817383 
BICCOS Cumulative time: 0.6328468322753906
Preprocessing time: 0.008619308471679688 Inference time: 0.0027010440826416016 Add cuts time: 0.0009388923645019531 Cut analysis time: 0.0007233619689941406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07139 (15), -0.07063 (15), -0.06608 (15), -0.06545 (15), -0.06542 (15), -0.06472 (15), -0.06190 (15), -0.06114 (15), -0.05997 (15), -0.05960 (15), -0.05935 (15), -0.05886 (15), -0.05883 (15), -0.05837 (15), -0.05763 (15), -0.05742 (15), -0.05698 (15), -0.05665 (15), -0.05503 (15), -0.05441 (15), 
Length of domains: 246
Time: pickout 0.0169    decision 0.0145    set_bounds 0.0178    solve 0.3115    add 0.0768    
Accumulated time: pickout 0.0282    decision 0.6398    set_bounds 0.1025    solve 0.9721    add 0.6333    
Current (lb-rhs): -0.07138827443122864
421 domains visited
Cumulative time: 3.1228253841400146

BaB round 4
batch: 246
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 413] [/input, 1623] [/input-8, 413] [/input, 1623] [/input-8, 413] [/input, 1623] [/input-8, 630] [/input, 1623] [/input-8, 413] [/input, 1623] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06873136758804321
10 lb beta sum: 0.18647979199886322, worst -0.06812149286270142
Time: prepare 0.0115    bound 0.1754    transfer 0.0023    finalize 0.0033    func 0.1961    
Accumulated time: func 1.2272    prepare 0.0667    bound 0.9711    transfer 0.0093    finalize 0.0165    
all_split False
======================Cut inference begins======================
max lb tensor(0.00501031) min lb tensor(-0.06803329)
Number of Verified Splits: 36 of 492
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 7
#cuts 4-6: 7
#cuts 7-9: 2
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.025210142135620117 
BICCOS Cumulative time: 0.6580569744110107
Preprocessing time: 0.018234968185424805 Inference time: 0.005026340484619141 Add cuts time: 0.0010154247283935547 Cut analysis time: 0.0009334087371826172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06803 (16), -0.06730 (16), -0.06265 (16), -0.06210 (16), -0.06199 (16), -0.06139 (16), -0.05795 (16), -0.05720 (16), -0.05564 (16), -0.05552 (16), -0.05529 (16), -0.05506 (16), -0.05486 (16), -0.05483 (16), -0.05462 (16), -0.05455 (16), -0.05413 (16), -0.05404 (16), -0.05302 (16), -0.05267 (16), 
Length of domains: 456
Time: pickout 0.0180    decision 0.0305    set_bounds 0.0218    solve 0.1963    add 0.1022    
Accumulated time: pickout 0.0462    decision 0.6703    set_bounds 0.1243    solve 1.1685    add 0.7354    
Current (lb-rhs): -0.06803329288959503
877 domains visited
Cumulative time: 3.5289933681488037

BaB round 5
batch: 456
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1571] [/input-8, 1620] [/input-8, 1571] [/input-8, 1620] [/input, 1623] [/input-8, 1620] [/input, 1623] [/input-8, 1620] [/input-8, 1571] [/input-8, 1620] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06517648696899414
10 lb beta sum: 0.18302878737449646, worst -0.06470286846160889
Time: prepare 0.0268    bound 0.1804    transfer 0.0057    finalize 0.0066    func 0.2257    
Accumulated time: func 1.4530    prepare 0.0937    bound 1.1515    transfer 0.0150    finalize 0.0231    
all_split False
======================Cut inference begins======================
max lb tensor(0.00548512) min lb tensor(-0.06467219)
Number of Verified Splits: 89 of 912
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 7
#cuts 4-6: 11
#cuts 7-9: 12
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.04688692092895508 
BICCOS Cumulative time: 0.7049438953399658
Preprocessing time: 0.03019404411315918 Inference time: 0.011952638626098633 Add cuts time: 0.002806425094604492 Cut analysis time: 0.0019338130950927734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06467 (17), -0.06405 (17), -0.06138 (17), -0.06050 (17), -0.05878 (17), -0.05859 (17), -0.05816 (17), -0.05802 (17), -0.05549 (17), -0.05541 (17), -0.05467 (17), -0.05457 (17), -0.05427 (17), -0.05397 (17), -0.05184 (17), -0.05171 (17), -0.05151 (17), -0.05132 (17), -0.05126 (17), -0.05125 (17), 
Length of domains: 823
Time: pickout 0.0190    decision 0.2604    set_bounds 0.0401    solve 0.2262    add 0.1160    
Accumulated time: pickout 0.0652    decision 0.9307    set_bounds 0.1643    solve 1.3947    add 0.8514    
Current (lb-rhs): -0.06467218697071075
1700 domains visited
Cumulative time: 4.246428489685059

BaB round 6
batch: 823
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1623] [/input, 1623] [/input-8, 1571] [/input-8, 550] [/input-8, 1571] [/input, 1623] [/input-8, 550] [/input, 1623] [/input-8, 550] [/input-8, 1571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06124240159988403
10 lb beta sum: 0.17837780714035034, worst -0.06072781980037689
Time: prepare 0.0417    bound 0.2067    transfer 0.0102    finalize 0.0102    func 0.2799    
Accumulated time: func 1.7329    prepare 0.1356    bound 1.3582    transfer 0.0251    finalize 0.0333    
all_split False
======================Cut inference begins======================
max lb tensor(0.00873324) min lb tensor(-0.06068677)
Number of Verified Splits: 227 of 1646
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 51.
#cuts 1-3: 7
#cuts 4-6: 28
#cuts 7-9: 15
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.09328126907348633 
BICCOS Cumulative time: 0.7982251644134521
Preprocessing time: 0.05527973175048828 Inference time: 0.02956700325012207 Add cuts time: 0.005915164947509766 Cut analysis time: 0.002519369125366211
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06069 (18), -0.06012 (18), -0.05768 (18), -0.05734 (18), -0.05664 (18), -0.05659 (18), -0.05561 (18), -0.05510 (18), -0.05475 (18), -0.05436 (18), -0.05422 (18), -0.05331 (18), -0.05305 (18), -0.05259 (18), -0.05232 (18), -0.05164 (18), -0.05141 (18), -0.05120 (18), -0.05069 (18), -0.05052 (18), 
Length of domains: 1419
Time: pickout 0.0748    decision 0.0628    set_bounds 0.0654    solve 0.2804    add 0.0942    
Accumulated time: pickout 0.1401    decision 0.9935    set_bounds 0.2298    solve 1.6750    add 0.9456    
Current (lb-rhs): -0.06068676710128784
3119 domains visited
Cumulative time: 4.929471969604492

BaB round 7
batch: 1419
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1572] [/input-8, 1572] [/input-8, 1571] [/input-8, 1572] [/input-8, 1571] [/input-8, 1572] [/input-8, 1571] [/input-8, 1620] [/input-8, 1571] [/input-8, 1572] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05685853958129883
10 lb beta sum: 0.17439629137516022, worst -0.056400418281555176
Time: prepare 0.0757    bound 0.2992    transfer 0.0255    finalize 0.0186    func 0.6416    
Accumulated time: func 2.3745    prepare 0.2116    bound 1.6574    transfer 0.0506    finalize 0.0518    
all_split False
======================Cut inference begins======================
max lb tensor(0.01016456) min lb tensor(-0.05637015)
Number of Verified Splits: 480 of 2838
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 91.
#cuts 1-3: 7
#cuts 4-6: 46
#cuts 7-9: 37
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.17776083946228027 
BICCOS Cumulative time: 0.9759860038757324
Preprocessing time: 0.09262895584106445 Inference time: 0.06446599960327148 Add cuts time: 0.016236305236816406 Cut analysis time: 0.00442957878112793
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05637 (19), -0.05583 (19), -0.05479 (19), -0.05419 (19), -0.05359 (19), -0.05330 (19), -0.05234 (19), -0.05229 (19), -0.05175 (19), -0.05154 (19), -0.05147 (19), -0.05113 (19), -0.05102 (19), -0.05098 (19), -0.05095 (19), -0.05060 (19), -0.05042 (19), -0.04979 (19), -0.04937 (19), -0.04900 (19), 
Length of domains: 2358
Time: pickout 0.0410    decision 0.0966    set_bounds 0.1258    solve 0.6425    add 0.1047    
Accumulated time: pickout 0.1811    decision 1.0902    set_bounds 0.3556    solve 2.3176    add 1.0503    
Current (lb-rhs): -0.05637015402317047
5477 domains visited
Cumulative time: 6.136921167373657

BaB round 8
batch: 2358
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.053266704082489014
10 lb beta sum: 0.17244099080562592, worst -0.05272018909454346
Time: prepare 0.1332    bound 0.4487    transfer 0.0336    finalize 0.0272    func 0.6745    
Accumulated time: func 3.0490    prepare 0.3451    bound 2.1061    transfer 0.0842    finalize 0.0790    
all_split False
======================Cut inference begins======================
max lb tensor(0.01019615) min lb tensor(-0.05268414)
Number of Verified Splits: 1773 of 4716
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 194.
#cuts 1-3: 7
#cuts 4-6: 125
#cuts 7-9: 61
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.6809649467468262 
BICCOS Cumulative time: 1.6569509506225586
Preprocessing time: 0.14864706993103027 Inference time: 0.4394834041595459 Add cuts time: 0.08442568778991699 Cut analysis time: 0.008408784866333008
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05268 (20), -0.05212 (20), -0.05104 (20), -0.05060 (20), -0.05041 (20), -0.05011 (20), -0.05000 (20), -0.04942 (20), -0.04942 (20), -0.04907 (20), -0.04903 (20), -0.04900 (20), -0.04888 (20), -0.04850 (20), -0.04843 (20), -0.04816 (20), -0.04738 (20), -0.04734 (20), -0.04732 (20), -0.04724 (20), 
Length of domains: 2943
Time: pickout 0.0523    decision 0.1395    set_bounds 0.2117    solve 0.6762    add 0.1438    
Accumulated time: pickout 0.2334    decision 1.2297    set_bounds 0.5673    solve 2.9938    add 1.1941    
Current (lb-rhs): -0.05268414318561554
8420 domains visited
Cumulative time: 8.080400943756104

BaB round 9
batch: 2943
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1325] [/input-8, 1620] [/input-8, 1325] [/input-8, 1572] [/input-8, 630] [/input-8, 1325] [/input-8, 630] [/input-8, 1620] [/input-8, 1325] [/input, 1623] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0516204833984375
10 lb beta sum: 0.1655702143907547, worst -0.05115047097206116
Time: prepare 0.1783    bound 0.5756    transfer 0.0494    finalize 0.0348    func 0.8773    
Accumulated time: func 3.9263    prepare 0.5237    bound 2.6818    transfer 0.1336    finalize 0.1138    
all_split False
======================Cut inference begins======================
max lb tensor(0.02647981) min lb tensor(-0.05112736)
Number of Verified Splits: 1659 of 5886
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 158.
#cuts 1-3: 9
#cuts 4-6: 107
#cuts 7-9: 41
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.7218658924102783 
BICCOS Cumulative time: 2.378816843032837
Preprocessing time: 0.18939661979675293 Inference time: 0.4509422779083252 Add cuts time: 0.07286715507507324 Cut analysis time: 0.008659839630126953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05113 (21), -0.05055 (21), -0.04949 (21), -0.04899 (21), -0.04888 (21), -0.04854 (21), -0.04840 (21), -0.04790 (21), -0.04750 (21), -0.04749 (21), -0.04741 (21), -0.04691 (21), -0.04687 (21), -0.04664 (21), -0.04584 (21), -0.04579 (21), -0.04572 (21), -0.04569 (21), -0.04537 (21), -0.04537 (21), 
Length of domains: 4227
Time: pickout 0.1412    decision 0.1919    set_bounds 0.2969    solve 0.8791    add 0.1556    
Accumulated time: pickout 0.3746    decision 1.4217    set_bounds 0.8643    solve 3.8729    add 1.3497    
Current (lb-rhs): -0.0511273592710495
12647 domains visited
Cumulative time: 10.500893354415894

BaB round 10
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1572] [/input-8, 1438] [/input-8, 1572] [/input-8, 1438] [/input-8, 1572] [/input-8, 1438] [/input-8, 1438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.050163090229034424
10 lb beta sum: 0.14668945968151093, worst -0.10154682397842407
Time: prepare 0.2195    bound 0.7490    transfer 0.0268    finalize 0.2442    func 1.2929    
Accumulated time: func 5.2192    prepare 0.7436    bound 3.4307    transfer 0.1603    finalize 0.3580    
all_split False
======================Cut inference begins======================
max lb tensor(0.07137335) min lb tensor(-0.04969524)
Number of Verified Splits: 4069 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 171.
#cuts 1-3: 9
#cuts 4-6: 140
#cuts 7-9: 21
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 1.0366742610931396 
BICCOS Cumulative time: 3.4154911041259766
Preprocessing time: 0.2589542865753174 Inference time: 0.6398372650146484 Add cuts time: 0.13152551651000977 Cut analysis time: 0.0063571929931640625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04970 (22), -0.04911 (22), -0.04805 (22), -0.04747 (22), -0.04744 (22), -0.04709 (22), -0.04689 (22), -0.04647 (22), -0.04610 (22), -0.04599 (22), -0.04593 (22), -0.04545 (22), -0.04539 (22), -0.04521 (22), -0.04441 (22), -0.04435 (22), -0.04425 (22), -0.04421 (22), -0.04394 (22), -0.04393 (22), 
Length of domains: 4254
Time: pickout 0.0786    decision 0.2275    set_bounds 0.3775    solve 1.2947    add 0.1838    
Accumulated time: pickout 0.4532    decision 1.6492    set_bounds 1.2418    solve 5.1676    add 1.5335    
Current (lb-rhs): -0.04969523847103119
16770 domains visited
current_vram/total_varm: 11.3GB/99.9GB, batch_size increase to 8192
Cumulative time: 13.772496461868286

BaB round 11
batch: 4254
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0459294319152832
10 lb beta sum: 0.16840867698192596, worst -0.04936054348945618
Time: prepare 0.2474    bound 0.7935    transfer 0.0707    finalize 0.0665    func 1.2369    
Accumulated time: func 6.4561    prepare 0.9914    bound 4.2243    transfer 0.2311    finalize 0.4244    
all_split False
======================Cut inference begins======================
max lb tensor(0.04676607) min lb tensor(-0.04545557)
Number of Verified Splits: 4776 of 8508
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 170.
#cuts 1-3: 11
#cuts 4-6: 145
#cuts 7-9: 13
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 1.6236448287963867 
BICCOS Cumulative time: 5.039135932922363
Preprocessing time: 0.31894850730895996 Inference time: 1.1428256034851074 Add cuts time: 0.15460515022277832 Cut analysis time: 0.007265567779541016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04546 (23), -0.04486 (23), -0.04400 (23), -0.04400 (23), -0.04382 (23), -0.04378 (23), -0.04342 (23), -0.04342 (23), -0.04320 (23), -0.04318 (23), -0.04253 (23), -0.04252 (23), -0.04235 (23), -0.04192 (23), -0.04173 (23), -0.04169 (23), -0.04131 (23), -0.04121 (23), -0.04118 (23), -0.04097 (23), 
Length of domains: 3732
Time: pickout 0.1579    decision 0.5207    set_bounds 0.4559    solve 1.2411    add 0.1417    
Accumulated time: pickout 0.6111    decision 2.1699    set_bounds 1.6976    solve 6.4087    add 1.6752    
Current (lb-rhs): -0.04545557498931885
20502 domains visited
Cumulative time: 18.020319938659668

BaB round 12
batch: 3732
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1572] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 1572] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.042677998542785645
10 lb beta sum: 0.18652968108654022, worst -0.04548007249832153
Time: prepare 0.2226    bound 0.7005    transfer 0.0340    finalize 0.0487    func 1.0581    
Accumulated time: func 7.5141    prepare 1.2143    bound 4.9248    transfer 0.2651    finalize 0.4732    
all_split False
======================Cut inference begins======================
max lb tensor(0.04301135) min lb tensor(-0.04220121)
Number of Verified Splits: 1620 of 7464
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 147.
#cuts 1-3: 14
#cuts 4-6: 119
#cuts 7-9: 13
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.6557869911193848 
BICCOS Cumulative time: 5.694922924041748
Preprocessing time: 0.29178953170776367 Inference time: 0.28205394744873047 Add cuts time: 0.07593512535095215 Cut analysis time: 0.0060083866119384766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04220 (24), -0.04161 (24), -0.04058 (24), -0.04050 (24), -0.03996 (24), -0.03993 (24), -0.03955 (24), -0.03950 (24), -0.03903 (24), -0.03896 (24), -0.03893 (24), -0.03886 (24), -0.03866 (24), -0.03845 (24), -0.03842 (24), -0.03828 (24), -0.03822 (24), -0.03808 (24), -0.03806 (24), -0.03799 (24), 
Length of domains: 5844
Time: pickout 0.0843    decision 0.2348    set_bounds 0.3784    solve 1.3098    add 0.1910    
Accumulated time: pickout 0.6954    decision 2.4047    set_bounds 2.0760    solve 7.7185    add 1.8663    
Current (lb-rhs): -0.0422012060880661
26346 domains visited
Cumulative time: 20.925355911254883

BaB round 13
batch: 5844
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03922790288925171
10 lb beta sum: 0.18629659712314606, worst -0.040801435708999634
Time: prepare 0.3497    bound 1.0393    transfer 0.0886    finalize 0.0656    func 1.6210    
Accumulated time: func 9.1351    prepare 1.5643    bound 5.9641    transfer 0.3537    finalize 0.5388    
all_split False
======================Cut inference begins======================
max lb tensor(0.00907725) min lb tensor(-0.03875719)
Number of Verified Splits: 1278 of 11688
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 232.
#cuts 1-3: 15
#cuts 4-6: 156
#cuts 7-9: 59
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.9332442283630371 
BICCOS Cumulative time: 6.628167152404785
Preprocessing time: 0.3884742259979248 Inference time: 0.4712944030761719 Add cuts time: 0.0642549991607666 Cut analysis time: 0.009220600128173828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03876 (25), -0.03817 (25), -0.03777 (25), -0.03717 (25), -0.03713 (25), -0.03707 (25), -0.03651 (25), -0.03648 (25), -0.03644 (25), -0.03613 (25), -0.03613 (25), -0.03612 (25), -0.03587 (25), -0.03557 (25), -0.03554 (25), -0.03553 (25), -0.03552 (25), -0.03550 (25), -0.03542 (25), -0.03512 (25), 
Length of domains: 10410
Time: pickout 0.2124    decision 0.3657    set_bounds 0.8999    solve 1.6243    add 0.1640    
Accumulated time: pickout 0.9079    decision 2.7704    set_bounds 2.9759    solve 9.3428    add 2.0302    
Current (lb-rhs): -0.038757190108299255
36756 domains visited
Cumulative time: 25.160574674606323

BaB round 14
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 430] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.035697221755981445
10 lb beta sum: 0.16694572567939758, worst -0.03521449863910675
Time: prepare 0.4230    bound 1.4945    transfer 0.1602    finalize 0.0923    func 2.2775    
Accumulated time: func 11.4125    prepare 1.9877    bound 7.4587    transfer 0.5140    finalize 0.6311    
all_split False
======================Cut inference begins======================
max lb tensor(0.00992537) min lb tensor(-0.03518227)
Number of Verified Splits: 3411 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 232.
#cuts 1-3: 23
#cuts 4-6: 118
#cuts 7-9: 86
#cuts 10-12: 5
#cuts >= 20: 0
BICCOS time: 1.5319013595581055 
BICCOS Cumulative time: 8.16006851196289
Preprocessing time: 0.7862207889556885 Inference time: 0.5934433937072754 Add cuts time: 0.1424248218536377 Cut analysis time: 0.009812355041503906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03518 (26), -0.03471 (26), -0.03459 (26), -0.03454 (25), -0.03416 (26), -0.03414 (26), -0.03410 (25), -0.03397 (25), -0.03369 (26), -0.03362 (25), -0.03358 (26), -0.03357 (25), -0.03352 (26), -0.03341 (26), -0.03340 (26), -0.03316 (25), -0.03310 (26), -0.03302 (26), -0.03300 (25), -0.03296 (26), 
Length of domains: 15191
Time: pickout 0.1482    decision 0.4510    set_bounds 0.9971    solve 2.2812    add 0.0936    
Accumulated time: pickout 1.0560    decision 3.2214    set_bounds 3.9730    solve 11.6240    add 2.1239    
Current (lb-rhs): -0.03518226742744446
49729 domains visited
current_vram/total_varm: 23.9GB/99.9GB, batch_size increase to 16384
Cumulative time: 30.731656074523926

BaB round 15
batch: 15191
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 575] [/input-8, 1628] [/input-8, 430] [/input-8, 430] [/input-8, 575] [/input-8, 1628] [/input-8, 925] [/input-8, 575] [/input-8, 430] [/input-8, 575] 
cut re-enabled after branching node selection
0 lb beta sum: 0.1990024894475937, worst -0.032536834478378296
10 lb beta sum: 0.2233390063047409, worst -0.03767925500869751
Time: prepare 1.4351    bound 2.7187    transfer 0.3364    finalize 0.2510    func 5.4072    
Accumulated time: func 16.8197    prepare 3.4232    bound 10.1774    transfer 0.8504    finalize 0.8821    
all_split False
======================Cut inference begins======================
max lb tensor(0.01023406) min lb tensor(-0.03245822)
Number of Verified Splits: 12967 of 30382
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 295.
#cuts 1-3: 21
#cuts 4-6: 186
#cuts 7-9: 85
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 4.844151020050049 
BICCOS Cumulative time: 13.00421953201294
Preprocessing time: 1.1946232318878174 Inference time: 3.176358699798584 Add cuts time: 0.4605133533477783 Cut analysis time: 0.01265573501586914
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03246 (27), -0.03199 (27), -0.03186 (27), -0.03142 (27), -0.03139 (27), -0.03091 (27), -0.03090 (26), -0.03079 (27), -0.03079 (27), -0.03071 (27), -0.03067 (27), -0.03050 (26), -0.03046 (26), -0.03035 (27), -0.03033 (26), -0.03030 (27), -0.03030 (27), -0.03021 (27), -0.03006 (27), -0.03005 (27), 
Length of domains: 17415
Time: pickout 0.3259    decision 1.1322    set_bounds 1.7196    solve 5.4167    add 0.2560    
Accumulated time: pickout 1.3819    decision 4.3537    set_bounds 5.6926    solve 17.0407    add 2.3799    
Current (lb-rhs): -0.032458215951919556
67144 domains visited
Cumulative time: 44.6610848903656

BaB round 16
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input, 1620] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.029623210430145264
10 lb beta sum: 0.12060306966304779, worst -0.04616880416870117
Time: prepare 0.8966    bound 3.0671    transfer 0.3652    finalize 0.5803    func 5.1255    
Accumulated time: func 21.9452    prepare 4.3203    bound 13.2445    transfer 1.2157    finalize 1.4624    
all_split False
======================Cut inference begins======================
max lb tensor(0.03169228) min lb tensor(-0.02961558)
Number of Verified Splits: 16983 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 33
#cuts 4-6: 8
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 5.3186774253845215 
BICCOS Cumulative time: 18.32289695739746
Preprocessing time: 1.5177416801452637 Inference time: 3.1791884899139404 Add cuts time: 0.6200687885284424 Cut analysis time: 0.001678466796875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03091 (27), -0.03035 (27), -0.02977 (27), -0.02962 (28), -0.02937 (28), -0.02916 (27), -0.02902 (28), -0.02883 (28), -0.02875 (28), -0.02865 (28), -0.02857 (28), -0.02854 (28), -0.02847 (28), -0.02846 (28), -0.02839 (28), -0.02832 (28), -0.02825 (28), -0.02823 (28), -0.02821 (27), -0.02819 (28), 
Length of domains: 16816
Time: pickout 0.3037    decision 1.6311    set_bounds 1.9112    solve 5.1343    add 0.1411    
Accumulated time: pickout 1.6856    decision 5.9847    set_bounds 7.6039    solve 22.1750    add 2.5209    
Current (lb-rhs): -0.030907437205314636
82929 domains visited
current_vram/total_varm: 40.6GB/99.9GB, batch_size increase to 32768
Cumulative time: 59.492748498916626

BaB round 17
batch: 16816
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 575] [/input-8, 575] [/input-8, 1628] [/input-8, 1628] [/input-8, 575] [/input-8, 575] [/input-8, 575] [/input-8, 575] [/input-8, 925] [/input-8, 925] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028830349445343018
10 lb beta sum: 0.3728918135166168, worst -0.033227503299713135
Time: prepare 0.9573    bound 2.6016    transfer 0.3770    finalize 0.7139    func 4.8787    
Accumulated time: func 26.8239    prepare 5.2782    bound 15.8461    transfer 1.5927    finalize 2.1763    
all_split False
======================Cut inference begins======================
max lb tensor(0.94156802) min lb tensor(-0.02882892)
Number of Verified Splits: 27329 of 33632
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 7.334765672683716 
BICCOS Cumulative time: 25.657662630081177
Preprocessing time: 1.2730309963226318 Inference time: 5.6492760181427 Add cuts time: 0.4117727279663086 Cut analysis time: 0.0006859302520751953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02883 (29), -0.02853 (29), -0.02838 (29), -0.02823 (29), -0.02821 (29), -0.02796 (29), -0.02793 (29), -0.02791 (28), -0.02780 (29), -0.02778 (29), -0.02762 (29), -0.02755 (28), -0.02740 (29), -0.02732 (28), -0.02706 (29), -0.02699 (29), -0.02696 (28), -0.02685 (28), -0.02677 (29), -0.02673 (28), 
Length of domains: 6303
Time: pickout 0.4216    decision 1.9365    set_bounds 2.0844    solve 4.8907    add 0.2103    
Accumulated time: pickout 2.1072    decision 7.9212    set_bounds 9.6882    solve 27.0657    add 2.7313    
Current (lb-rhs): -0.028828918933868408
89232 domains visited
Cumulative time: 76.72776675224304

BaB round 18
batch: 6303
splitting decisions: 
split level 0: [/input-8, 422] [/input-8, 422] [/input-8, 422] [/input-8, 422] [/input-8, 422] [/input-8, 422] [/input-8, 422] [/input-8, 422] [/input-8, 422] [/input-8, 422] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027315378189086914

all verified at 1th iter
Time: prepare 0.3440    bound 0.0510    transfer 0.0882    finalize 0.0754    func 0.6403    
Accumulated time: func 27.4642    prepare 5.6225    bound 15.8972    transfer 1.6808    finalize 2.2517    
all_split False
======================Cut inference begins======================
max lb tensor(0.05261160) min lb tensor(3.81469727e-06)
Number of Verified Splits: 12606 of 12606
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.42811107635498047 
BICCOS Cumulative time: 26.085773706436157
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.1264    decision 0.3475    set_bounds 0.8554    solve 0.6442    add 0.0024    
Accumulated time: pickout 2.2336    decision 8.2687    set_bounds 10.5437    solve 27.7099    add 2.7337    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
89232 domains visited
Cumulative time: 79.28622603416443


Properties batch 8, size 1
Remaining timeout: 104.49209451675415
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 95.5082 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 168, vnnlib ID: 168 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.83010960, -18.46311760, -10.82516861, -14.02094841, -13.35524940,
         -13.57317543, -16.31656647, -16.24346542, -18.31108856, -17.83380508]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [478]; unstable size 478; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 77, 1, 478] with unstable size 76 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 478] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 478] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [76]; unstable size 76; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 76] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 76] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.44705343, 6.67497396, 2.73657417, 2.01246381, 2.17955446, 4.94374943,
         4.64395428, 6.66448021, 6.17840290]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0988 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 169, vnnlib ID: 169 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.63894939, -9.64244175, -5.12798119, -6.62656116, -4.67414284,
         -6.34183264, -7.44110918, -6.87718344, -7.57325172, -8.86707783]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 540] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 540] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 184] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.41975904,  2.63730383, -0.24886763,  1.14163041,  0.84137660,
          1.68192863,  1.20813799,  0.96860665,  2.32131577]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.63894939, -9.64244175, -5.12798119, -6.62656116, -4.67414284,
         -6.34183264, -7.44110918, -6.87718344, -7.57325172, -8.86707783]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.74it/s]100%|██████████| 1/1 [00:00<00:00,  7.74it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.51849270, -9.63056850, -5.03511810, -6.76035976, -4.96544600,
          -6.54092455, -7.44870996, -7.21986437, -7.37273216, -8.95295334]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.06967211]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1328 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 11.406267166137695
alpha/beta optimization time: 1.2718842029571533
initial alpha-crown bounds: tensor([[ 0.48204589,  2.72113299, -0.22036755,  1.16896904,  0.86237335,
          1.72370434,  1.25071573,  1.03288543,  2.38480854]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.22036755084991455
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5224268436432
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.52239179611206
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.52236890792847
Verifying property 2 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.22036755]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.63894939, -9.64244175, -5.12798119, -6.62656116, -4.67414284,
        -6.34183264, -7.44110918, -6.87718344, -7.57325172, -8.86707783],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.22036755]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 540
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 181
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 739
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010585784912109375
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22036606073379517
10 lb beta sum: 0.0, worst -0.22037053108215332
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0516    transfer 0.0001    finalize 0.0001    func 0.0521    
Accumulated time: func 0.0521    prepare 0.0002    bound 0.0516    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 44] 
split level 2: [/input-12, 82] 
split level 3: [/input-12, 11] 
split level 4: [/input-12, 42] 
split level 5: [/input-12, 17] 
split level 6: [/input-8, 1868] 
split level 7: [/input-8, 1066] 
split level 8: [/input-8, 1124] 
split level 9: [/input-8, 556] 
split level 10: [/input-8, 2019] 
split level 11: [/input-8, 1370] 
split level 12: [/input-8, 1403] 
split level 13: [/input-8, 685] 
split level 14: [/input-8, 1362] 
split level 15: [/input-8, 1138] 
split level 16: [/input-8, 1874] 
split level 17: [/input-8, 2020] 
split level 18: [/input-8, 1356] 
split level 19: [/input-8, 574] 
split level 20: [/input-8, 1073] 
split level 21: [/input-8, 787] 
split level 22: [/input-8, 555] 
split level 23: [/input-8, 1514] 
split level 24: [/input-8, 2018] 
split level 25: [/input-8, 89] 
split level 26: [/input-12, 64] 
split level 27: [/input-8, 1333] 
split level 28: [/input-8, 564] 
split level 29: [/input-8, 1361] 
split level 30: [/input-8, 1508] 
split level 31: [/input-8, 1896] 
split level 32: [/input-8, 700] 
split level 33: [/input-8, 571] 
split level 34: [/input, 2615] 
split level 35: [/input, 2682] 
split level 36: [/input-8, 1775] 
split level 37: [/input-8, 699] 
split level 38: [/input, 2691] 
split level 39: [/input-8, 90] 
split level 40: [/input-8, 573] 
split level 41: [/input, 3207] 
split level 42: [/input-8, 1366] 
split level 43: [/input-8, 1889] 
split level 44: [/input-8, 1499] 
split level 45: [/input-8, 808] 
split level 46: [/input-8, 1405] 
split level 47: [/input-8, 892] 
split level 48: [/input-8, 619] 
split level 49: [/input, 2534] 
split level 50: [/input-8, 1307] 
split level 51: [/input-8, 923] 
split level 52: [/input-12, 28] 
split level 53: [/input, 3973] 
split level 54: [/input, 2662] 
split level 55: [/input, 141] 
split level 56: [/input, 2409] 
split level 57: [/input, 2706] 
split level 58: [/input-8, 1974] 
split level 59: [/input-8, 1406] 
split level 60: [/input-8, 1107] 
split level 61: [/input, 2378] 
split level 62: [/input-8, 1393] 
split level 63: [/input-8, 855] 
split level 64: [/input, 2632] 
split level 65: [/input-8, 1272] 
split level 66: [/input-8, 1148] 
split level 67: [/input-12, 53] 
split level 68: [/input, 218] 
split level 69: [/input-8, 2009] 
split level 70: [/input-8, 1942] 
split level 71: [/input, 1628] 
split level 72: [/input-8, 534] 
split level 73: [/input, 2442] 
split level 74: [/input, 2651] 
split level 75: [/input-8, 883] 
split level 76: [/input-8, 1996] 
split level 77: [/input-8, 884] 
split level 78: [/input, 4039] 
split level 79: [/input-8, 1973] 
split level 80: [/input, 422] 
split level 81: [/input, 3301] 
split level 82: [/input-8, 612] 
split level 83: [/input, 3978] 
split level 84: [/input, 2661] 
split level 85: [/input, 3284] 
split level 86: [/input-8, 1957] 
split level 87: [/input-8, 865] 
split level 88: [/input-8, 1969] 
split level 89: [/input-8, 139] 
split level 90: [/input-8, 1922] 
split level 91: [/input, 2737] 
split level 92: [/input, 2441] 
split level 93: [/input-8, 1836] 
split level 94: [/input-8, 1047] 
split level 95: [/input-8, 1056] 
split level 96: [/input, 1558] 
split level 97: [/input-8, 1064] 
split level 98: [/input-8, 1847] 
split level 99: [/input, 3549] 
split level 100: [/input-8, 1039] 
split level 101: [/input, 2547] 
split level 102: [/input, 2680] 
split level 103: [/input, 3550] 
split level 104: [/input, 2546] 
split level 105: [/input, 2459] 
split level 106: [/input, 3981] 
split level 107: [/input, 2362] 
split level 108: [/input, 2455] 
split level 109: [/input, 2396] 
split level 110: [/input, 2550] 
split level 111: [/input-8, 1898] 
split level 112: [/input, 3226] 
split level 113: [/input, 3959] 
split level 114: [/input-8, 1783] 
split level 115: [/input, 3905] 
split level 116: [/input, 3253] 
split level 117: [/input, 2322] 
split level 118: [/input, 3299] 
split level 119: [/input, 2551] 
split level 120: [/input, 2328] 
split level 121: [/input-8, 277] 
split level 122: [/input, 2515] 
split level 123: [/input, 2774] 
split level 124: [/input, 3906] 
split level 125: [/input, 962] 
split level 126: [/input, 2549] 
split level 127: [/input, 3209] 
split level 128: [/input, 2922] 
split level 129: [/input, 2449] 
split level 130: [/input, 1653] 
split level 131: [/input-8, 489] 
split level 132: [/input, 2530] 
split level 133: [/input, 3690] 
split level 134: [/input, 2972] 
split level 135: [/input, 3752] 
split level 136: [/input, 3564] 
split level 137: [/input, 3554] 
split level 138: [/input, 2433] 
split level 139: [/input-12, 52] 
split level 140: [/input, 2273] 
split level 141: [/input, 997] 
split level 142: [/input-8, 1266] 
split level 143: [/input-8, 120] 
split level 144: [/input, 2726] 
split level 145: [/input, 3240] 
split level 146: [/input, 3904] 
split level 147: [/input, 3965] 
split level 148: [/input, 2548] 
split level 149: [/input-8, 122] 
split level 150: [/input, 3902] 
split level 151: [/input, 2986] 
split level 152: [/input, 2382] 
split level 153: [/input, 2686] 
split level 154: [/input, 3901] 
split level 155: [/input, 2674] 
split level 156: [/input-8, 1485] 
split level 157: [/input, 471] 
split level 158: [/input, 2337] 
split level 159: [/input, 2366] 
split level 160: [/input, 1527] 
split level 161: [/input, 1629] 
split level 162: [/input-8, 2021] 
split level 163: [/input, 1502] 
split level 164: [/input, 3546] 
split level 165: [/input, 3197] 
split level 166: [/input-8, 511] 
split level 167: [/input, 3293] 
split level 168: [/input-8, 1275] 
split level 169: [/input, 3762] 
split level 170: [/input, 3204] 
split level 171: [/input, 3166] 
split level 172: [/input, 3544] 
split level 173: [/input, 1614] 
split level 174: [/input, 1250] 
split level 175: [/input, 3561] 
split level 176: [/input-12, 55] 
split level 177: [/input-8, 1796] 
split level 178: [/input, 457] 
split level 179: [/input-8, 1008] 
split level 180: [/input, 1147] 
split level 181: [/input-8, 1975] 
split level 182: [/input, 980] 
split level 183: [/input-8, 792] 
split level 184: [/input, 3188] 
split level 185: [/input, 1882] 
split level 186: [/input, 2451] 
split level 187: [/input, 3297] 
split level 188: [/input, 2990] 
split level 189: [/input, 3545] 
split level 190: [/input, 2540] 
split level 191: [/input, 1526] 
split level 192: [/input-8, 121] 
split level 193: [/input, 3069] 
split level 194: [/input, 3765] 
split level 195: [/input, 1898] 
split level 196: [/input, 1329] 
split level 197: [/input, 2304] 
split level 198: [/input-8, 390] 
split level 199: [/input, 1794] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22031450271606445
10 lb beta sum: 0.0, worst -0.2203061580657959
Time: prepare 0.0117    bound 0.0956    transfer 0.0024    finalize 0.0028    func 0.1152    
Accumulated time: func 0.1673    prepare 0.0218    bound 0.1472    transfer 0.0025    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.11311245) min lb tensor(-0.22030205)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.011995792388916016 
BICCOS Cumulative time: 0.011995792388916016
Preprocessing time: 0.011281251907348633 Inference time: 0.00038695335388183594 Add cuts time: 6.556510925292969e-05 Cut analysis time: 0.0002620220184326172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21523 (1), -0.21491 (1), -0.21491 (1), -0.21482 (1), -0.21475 (1), -0.21474 (1), -0.21465 (1), -0.21448 (1), -0.21426 (1), -0.21426 (1), -0.21420 (1), -0.21398 (1), -0.21383 (1), -0.21379 (1), -0.21377 (1), -0.21375 (1), -0.21339 (1), -0.21311 (1), -0.21294 (1), -0.21291 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5014    set_bounds 0.0090    solve 0.1153    add 0.1990    
Accumulated time: pickout 0.0004    decision 0.5014    set_bounds 0.0090    solve 0.1153    add 0.1990    
Current (lb-rhs): -0.21523326635360718
50 domains visited
Cumulative time: 0.9125399589538574

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 82] [/input-12, 10] [/input-12, 82] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 11] [/input-12, 11] [/input-12, 82] [/input-12, 42] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
split level 2: [/input-12, 42] [/input-12, 42] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 42] [/input-12, 11] [/input-12, 11] 
split level 3: [/input-8, 1362] [/input-8, 1073] [/input-8, 2019] [/input-8, 2019] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-8, 2019] [/input-12, 42] [/input-12, 42] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2095072865486145
10 lb beta sum: 0.3847499489784241, worst -0.20672565698623657
Time: prepare 0.0076    bound 0.1161    transfer 0.0008    finalize 0.0024    func 0.1296    
Accumulated time: func 0.2969    prepare 0.0297    bound 0.2634    transfer 0.0033    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.14040715) min lb tensor(-0.20672181)
Number of Verified Splits: 54 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.01520681381225586 
BICCOS Cumulative time: 0.027202606201171875
Preprocessing time: 0.011862754821777344 Inference time: 0.0019478797912597656 Add cuts time: 0.00112152099609375 Cut analysis time: 0.000274658203125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05876 (2), -0.05827 (2), -0.05810 (2), -0.05796 (2), -0.05793 (2), -0.05793 (2), -0.05791 (2), -0.05785 (2), -0.05764 (2), -0.05755 (2), -0.05707 (2), -0.05702 (2), -0.05676 (2), -0.05652 (2), -0.05623 (2), -0.05606 (2), -0.05602 (2), -0.05588 (2), -0.05562 (2), -0.05548 (2), 
Length of domains: 50
Time: pickout 0.0084    decision 0.0202    set_bounds 0.0119    solve 0.1297    add 0.2057    
Accumulated time: pickout 0.0088    decision 0.5215    set_bounds 0.0208    solve 0.2450    add 0.4047    
Current (lb-rhs): -0.058758556842803955
100 domains visited
Cumulative time: 1.3108165264129639

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
split level 1: [/input-12, 11] [/input-12, 42] [/input-12, 42] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 42] 
split level 2: [/input-12, 42] [/input-8, 1073] [/input-8, 1073] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-8, 1073] 
split level 3: [/input-8, 1073] [/input-8, 2019] [/input-8, 2019] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 2019] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.056506991386413574
10 lb beta sum: 0.8361924290657043, worst -0.04702335596084595
Time: prepare 0.0080    bound 0.1151    transfer 0.0007    finalize 0.0024    func 0.1288    
Accumulated time: func 0.4258    prepare 0.0379    bound 0.3785    transfer 0.0040    finalize 0.0077    
all_split False
======================Cut inference begins======================
max lb tensor(0.31505400) min lb tensor(-0.04650852)
Number of Verified Splits: 160 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 13
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.02285909652709961 
BICCOS Cumulative time: 0.050061702728271484
Preprocessing time: 0.011709928512573242 Inference time: 0.007271528244018555 Add cuts time: 0.003406524658203125 Cut analysis time: 0.0004711151123046875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02308 (3), -0.02285 (3), -0.02279 (3), -0.02272 (3), -0.02219 (3), -0.02216 (3), -0.02202 (3), -0.02199 (3), -0.02199 (3), -0.02196 (3), -0.02182 (3), -0.02164 (3), -0.02152 (3), -0.02143 (3), -0.02142 (3), -0.02096 (3), -0.02076 (3), -0.02065 (3), -0.02038 (3), -0.02031 (3), 
Length of domains: 50
Time: pickout 0.0080    decision 0.0192    set_bounds 0.0149    solve 0.1289    add 0.1765    
Accumulated time: pickout 0.0167    decision 0.5407    set_bounds 0.0357    solve 0.3739    add 0.5812    
Current (lb-rhs): -0.023082196712493896
150 domains visited
Cumulative time: 1.681382656097412

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
split level 1: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 2: [/input-8, 2019] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 2019] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] 
split level 3: [/input-8, 1362] [/input-8, 2019] [/input-8, 1362] [/input-8, 2019] [/input-8, 2020] [/input-8, 2019] [/input-8, 2019] [/input-8, 2019] [/input-8, 2019] [/input-8, 2019] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.037435293197631836
10 lb beta sum: 1.988362431526184, worst -0.0172995924949646
Time: prepare 0.0082    bound 0.1301    transfer 0.0032    finalize 0.0026    func 0.1468    
Accumulated time: func 0.5725    prepare 0.0464    bound 0.5085    transfer 0.0072    finalize 0.0104    
all_split False
======================Cut inference begins======================
max lb tensor(0.32950461) min lb tensor(-0.01700252)
Number of Verified Splits: 162 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 14
#cuts 4-6: 15
#cuts >= 20: 0
BICCOS time: 0.024506807327270508 
BICCOS Cumulative time: 0.07456851005554199
Preprocessing time: 0.011515140533447266 Inference time: 0.00744175910949707 Add cuts time: 0.0046193599700927734 Cut analysis time: 0.0009305477142333984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00518 (4), -0.00517 (4), -0.00516 (4), -0.00515 (4), -0.00498 (4), -0.00469 (4), -0.00466 (4), -0.00444 (4), -0.00442 (4), -0.00418 (4), -0.00404 (4), -0.00400 (4), -0.00393 (4), -0.00393 (4), -0.00387 (4), -0.00380 (4), -0.00362 (4), -0.00360 (4), -0.00358 (4), -0.00356 (4), 
Length of domains: 50
Time: pickout 0.0015    decision 0.0200    set_bounds 0.0157    solve 0.1469    add 0.1835    
Accumulated time: pickout 0.0183    decision 0.5606    set_bounds 0.0514    solve 0.5208    add 0.7647    
Current (lb-rhs): -0.005177915096282959
200 domains visited
Cumulative time: 2.080512285232544

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
split level 1: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 2: [/input-8, 2019] [/input-8, 1073] [/input-8, 2019] [/input-8, 1073] [/input-8, 1073] [/input-8, 2019] [/input-8, 2019] [/input-8, 2019] [/input-8, 1073] [/input-8, 2019] 
split level 3: [/input-8, 1356] [/input-8, 1362] [/input-8, 1362] [/input-8, 1362] [/input-8, 2019] [/input-8, 1362] [/input-8, 1362] [/input-8, 1362] [/input-8, 1362] [/input-8, 1362] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025493919849395752
10 lb beta sum: 2.289771795272827, worst -0.017906785011291504
Time: prepare 0.0084    bound 0.1326    transfer 0.0008    finalize 0.0025    func 0.1478    
Accumulated time: func 0.7204    prepare 0.0551    bound 0.6411    transfer 0.0080    finalize 0.0129    
all_split False
======================Cut inference begins======================
max lb tensor(0.38913709) min lb tensor(-0.00197077)
Number of Verified Splits: 383 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 14
#cuts 4-6: 42
#cuts >= 20: 0
BICCOS time: 0.04879927635192871 
BICCOS Cumulative time: 0.1233677864074707
Preprocessing time: 0.011581182479858398 Inference time: 0.0185549259185791 Add cuts time: 0.016798734664916992 Cut analysis time: 0.0018644332885742188
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0079    decision 0.0195    set_bounds 0.0157    solve 0.1479    add 0.0333    
Accumulated time: pickout 0.0261    decision 0.5801    set_bounds 0.0671    solve 0.6688    add 0.7980    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 82] 
split level 2: [/input-12, 11] 
split level 3: [/input-12, 42] 
split level 4: [/input-8, 2019] 
split level 5: [/input-8, 1362] 
split level 6: [/input-8, 574] 
split level 7: [/input-8, 1073] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06628823280334473
10 lb beta sum: 0.42208248376846313, worst -0.3562314510345459
Time: prepare 0.0052    bound 0.1448    transfer 0.0007    finalize 0.0014    func 0.1538    
Accumulated time: func 0.8741    prepare 0.0610    bound 0.7859    transfer 0.0087    finalize 0.0144    
all_split False
======================Cut inference begins======================
max lb tensor(0.34176484) min lb tensor(-0.06233412)
Number of Verified Splits: 224 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20211708545684814
10 lb beta sum: 0.974521815776825, worst -0.3826580047607422
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 61.
#cuts 1-3: 14
#cuts 4-6: 46
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.27533817291259766 
BICCOS Cumulative time: 0.39870595932006836
Preprocessing time: 0.0071868896484375 Inference time: 0.2575955390930176 Add cuts time: 0.008560419082641602 Cut analysis time: 0.0019953250885009766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06233 (8), -0.06210 (8), -0.06178 (8), -0.06174 (8), -0.06155 (8), -0.06150 (8), -0.06119 (8), -0.06095 (8), -0.05666 (8), -0.05645 (8), -0.05626 (8), -0.05604 (8), -0.05592 (8), -0.05589 (8), -0.05585 (8), -0.05577 (8), -0.05570 (8), -0.05566 (8), -0.05530 (8), -0.05523 (8), 
Length of domains: 32
Time: pickout 0.0006    decision 0.0232    set_bounds 0.0207    solve 0.1539    add 0.0612    
Accumulated time: pickout 0.0268    decision 0.6034    set_bounds 0.0878    solve 0.8226    add 0.8591    
Current (lb-rhs): -0.06233412027359009
232 domains visited
Cumulative time: 2.907956123352051

BaB round 2
batch: 32
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1124] [/input-8, 1499] [/input-8, 1124] [/input-8, 1356] [/input-8, 1124] [/input-8, 1499] [/input-8, 1124] [/input-8, 573] [/input-8, 1124] [/input-8, 1356] 
split level 1: [/input-8, 1499] [/input-8, 1356] [/input-8, 1499] [/input-8, 573] [/input-8, 1499] [/input-8, 573] [/input-8, 1499] [/input-8, 1499] [/input-8, 1499] [/input-8, 1499] 
split level 2: [/input-8, 573] [/input-8, 573] [/input-8, 573] [/input-8, 1499] [/input-8, 573] [/input-8, 1356] [/input-8, 573] [/input-8, 1356] [/input-8, 573] [/input-8, 573] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05867624282836914
10 lb beta sum: 0.49620693922042847, worst -0.055260151624679565
Time: prepare 0.0050    bound 0.1412    transfer 0.0006    finalize 0.0012    func 0.1498    
Accumulated time: func 1.0239    prepare 0.0662    bound 0.9271    transfer 0.0093    finalize 0.0156    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01329723) min lb tensor(-0.05484325)
Number of Verified Splits: 0 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 61.
#cuts 1-3: 14
#cuts 4-6: 46
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.007717609405517578 
BICCOS Cumulative time: 0.40642356872558594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05484 (11), -0.05470 (11), -0.05426 (11), -0.05420 (11), -0.05412 (11), -0.05406 (11), -0.05392 (11), -0.05378 (11), -0.05362 (11), -0.05348 (11), -0.05327 (11), -0.05313 (11), -0.05214 (11), -0.05200 (11), -0.05149 (11), -0.05135 (11), -0.05072 (11), -0.05063 (11), -0.05014 (11), -0.05008 (11), 
Length of domains: 256
Time: pickout 0.0067    decision 0.0125    set_bounds 0.0133    solve 0.1498    add 0.0803    
Accumulated time: pickout 0.0335    decision 0.6159    set_bounds 0.1011    solve 0.9724    add 0.9395    
Current (lb-rhs): -0.054843246936798096
488 domains visited
Cumulative time: 3.18567156791687

BaB round 3
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1356] [/input-8, 2020] [/input-8, 1356] [/input-8, 2020] [/input-8, 1356] [/input-8, 2020] [/input-8, 2020] [/input-8, 2020] [/input-8, 1356] [/input-8, 2020] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5945770740509033, worst -0.05201363563537598
10 lb beta sum: 0.5946559906005859, worst -0.058384716510772705
Time: prepare 0.0222    bound 0.1505    transfer 0.0010    finalize 0.0028    func 0.1799    
Accumulated time: func 1.2038    prepare 0.0886    bound 1.0776    transfer 0.0103    finalize 0.0183    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00389615) min lb tensor(-0.05130911)
Number of Verified Splits: 0 of 512
No cut inferred: All or none verified.
Total number of valid cuts: 61.
#cuts 1-3: 14
#cuts 4-6: 46
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.014724254608154297 
BICCOS Cumulative time: 0.42114782333374023
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05131 (12), -0.05082 (12), -0.05062 (12), -0.05058 (12), -0.05015 (12), -0.05014 (12), -0.04989 (12), -0.04967 (12), -0.04947 (12), -0.04942 (12), -0.04898 (12), -0.04873 (12), -0.04870 (12), -0.04802 (12), -0.04793 (12), -0.04756 (12), -0.04754 (12), -0.04744 (12), -0.04724 (12), -0.04720 (12), 
Length of domains: 512
Time: pickout 0.0139    decision 0.2511    set_bounds 0.0229    solve 0.1800    add 0.0840    
Accumulated time: pickout 0.0473    decision 0.8669    set_bounds 0.1240    solve 1.1525    add 1.0235    
Current (lb-rhs): -0.05130910873413086
1000 domains visited
Cumulative time: 3.7597250938415527

BaB round 4
batch: 512
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2020] [/input-8, 1868] [/input-8, 2020] [/input-8, 1868] [/input-8, 2020] [/input-8, 1868] [/input-8, 1356] [/input-8, 1868] [/input-8, 2020] [/input-8, 1868] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5948208570480347, worst -0.04747164249420166
10 lb beta sum: 0.5948920249938965, worst -0.047122299671173096
Time: prepare 0.0436    bound 0.1569    transfer 0.0019    finalize 0.0042    func 0.2142    
Accumulated time: func 1.4179    prepare 0.1324    bound 1.2345    transfer 0.0122    finalize 0.0226    
all_split False
======================Cut inference begins======================
max lb tensor(0.00362225) min lb tensor(-0.04696691)
Number of Verified Splits: 94 of 1024
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.5521618127822876, worst -0.532910943031311
10 lb beta sum: 0.8499961495399475, worst -0.15663573145866394
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 62.
#cuts 1-3: 14
#cuts 4-6: 46
#cuts 7-9: 1
#cuts 13-15: 1
#cuts >= 20: 0
BICCOS time: 0.250746488571167 
BICCOS Cumulative time: 0.6718943119049072
Preprocessing time: 0.030289411544799805 Inference time: 0.21625494956970215 Add cuts time: 0.0020761489868164062 Cut analysis time: 0.002125978469848633
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04697 (13), -0.04675 (13), -0.04662 (13), -0.04641 (13), -0.04638 (13), -0.04624 (13), -0.04617 (13), -0.04602 (13), -0.04589 (13), -0.04568 (13), -0.04566 (13), -0.04544 (13), -0.04491 (13), -0.04476 (13), -0.04456 (13), -0.04444 (13), -0.04441 (13), -0.04432 (13), -0.04423 (13), -0.04418 (13), 
Length of domains: 930
Time: pickout 0.0193    decision 0.0352    set_bounds 0.0434    solve 0.2144    add 0.1017    
Accumulated time: pickout 0.0667    decision 0.9021    set_bounds 0.1674    solve 1.3669    add 1.1252    
Current (lb-rhs): -0.04696691036224365
1930 domains visited
Cumulative time: 4.433117628097534

BaB round 5
batch: 930
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-8, 89] [/input-12, 44] [/input-8, 89] [/input-12, 44] [/input-8, 89] [/input-12, 44] [/input-12, 44] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.047856926918029785
10 lb beta sum: 0.3420954644680023, worst -0.046869441866874695
Time: prepare 0.0376    bound 0.2130    transfer 0.0064    finalize 0.0091    func 0.2792    
Accumulated time: func 1.6971    prepare 0.1703    bound 1.4475    transfer 0.0186    finalize 0.0317    
all_split False
======================Cut inference begins======================
max lb tensor(0.06826180) min lb tensor(-0.04680282)
Number of Verified Splits: 677 of 1860
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 49.
#cuts 1-3: 17
#cuts 4-6: 32
#cuts >= 20: 0
BICCOS time: 0.1384577751159668 
BICCOS Cumulative time: 0.810352087020874
Preprocessing time: 0.056345224380493164 Inference time: 0.07064318656921387 Add cuts time: 0.009875774383544922 Cut analysis time: 0.0015935897827148438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04680 (14), -0.04658 (14), -0.04654 (14), -0.04632 (14), -0.04630 (14), -0.04608 (14), -0.04607 (14), -0.04586 (14), -0.04581 (14), -0.04559 (14), -0.04557 (14), -0.04535 (14), -0.04473 (14), -0.04459 (14), -0.04447 (14), -0.04437 (14), -0.04433 (14), -0.04423 (14), -0.04415 (14), -0.04409 (14), 
Length of domains: 1183
Time: pickout 0.0596    decision 0.0612    set_bounds 0.0778    solve 0.2795    add 0.0852    
Accumulated time: pickout 0.1262    decision 0.9633    set_bounds 0.2452    solve 1.6464    add 1.2104    
Current (lb-rhs): -0.046802818775177
3113 domains visited
Cumulative time: 5.141113519668579

BaB round 6
batch: 1183
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1868] [/input-8, 89] [/input-8, 1868] [/input-12, 44] [/input-8, 1868] [/input-12, 44] [/input-8, 1868] [/input-12, 44] [/input-8, 1868] [/input-8, 89] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04670894145965576
10 lb beta sum: 0.6549854278564453, worst -0.0457116961479187
Time: prepare 0.0492    bound 0.2536    transfer 0.0176    finalize 0.0135    func 0.3495    
Accumulated time: func 2.0466    prepare 0.2197    bound 1.7011    transfer 0.0362    finalize 0.0452    
all_split False
======================Cut inference begins======================
max lb tensor(0.24872653) min lb tensor(-0.04564066)
Number of Verified Splits: 956 of 2366
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 48.
#cuts 1-3: 19
#cuts 4-6: 29
#cuts >= 20: 0
BICCOS time: 0.192854642868042 
BICCOS Cumulative time: 1.003206729888916
Preprocessing time: 0.07226061820983887 Inference time: 0.10702776908874512 Add cuts time: 0.011897563934326172 Cut analysis time: 0.001668691635131836
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04564 (15), -0.04546 (15), -0.04541 (15), -0.04524 (15), -0.04522 (15), -0.04500 (15), -0.04491 (15), -0.04473 (15), -0.04468 (15), -0.04451 (15), -0.04450 (15), -0.04427 (15), -0.04377 (15), -0.04363 (15), -0.04360 (15), -0.04345 (15), -0.04336 (15), -0.04329 (15), -0.04321 (15), -0.04307 (15), 
Length of domains: 1410
Time: pickout 0.0265    decision 0.0733    set_bounds 0.2690    solve 0.3506    add 0.1231    
Accumulated time: pickout 0.1528    decision 1.0366    set_bounds 0.5142    solve 1.9970    add 1.3334    
Current (lb-rhs): -0.04564066231250763
4523 domains visited
Cumulative time: 6.192765951156616

BaB round 7
batch: 1410
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 89] [/input-8, 571] [/input-8, 89] [/input-8, 571] [/input-8, 89] [/input-8, 571] [/input-8, 89] [/input-8, 571] [/input-8, 89] [/input-8, 571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04367482662200928
10 lb beta sum: 0.5933770537376404, worst -0.042679592967033386
Time: prepare 0.0608    bound 0.2878    transfer 0.0069    finalize 0.0144    func 0.3895    
Accumulated time: func 2.4361    prepare 0.2808    bound 1.9889    transfer 0.0431    finalize 0.0596    
all_split False
======================Cut inference begins======================
max lb tensor(0.29488581) min lb tensor(-0.04263729)
Number of Verified Splits: 1934 of 2820
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 51.
#cuts 1-3: 22
#cuts 4-6: 29
#cuts >= 20: 0
BICCOS time: 0.5286130905151367 
BICCOS Cumulative time: 1.5318198204040527
Preprocessing time: 0.08669114112854004 Inference time: 0.41748666763305664 Add cuts time: 0.022504091262817383 Cut analysis time: 0.0019311904907226562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04264 (16), -0.04248 (16), -0.04225 (16), -0.04206 (16), -0.04191 (16), -0.04191 (16), -0.04175 (16), -0.04167 (16), -0.04152 (16), -0.04133 (16), -0.04118 (16), -0.04094 (16), -0.04061 (16), -0.04046 (16), -0.04041 (16), -0.04031 (16), -0.04025 (16), -0.04022 (16), -0.04002 (16), -0.03988 (16), 
Length of domains: 886
Time: pickout 0.0870    decision 0.0883    set_bounds 0.1211    solve 0.3900    add 0.0868    
Accumulated time: pickout 0.2398    decision 1.1248    set_bounds 0.6353    solve 2.3870    add 1.4203    
Current (lb-rhs): -0.04263728857040405
5409 domains visited
Cumulative time: 7.52152943611145

BaB round 8
batch: 886
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04028284549713135
10 lb beta sum: 1.0598050355911255, worst -0.036804378032684326
Time: prepare 0.0357    bound 0.2069    transfer 0.0046    finalize 0.0076    func 0.2674    
Accumulated time: func 2.7034    prepare 0.3168    bound 2.1958    transfer 0.0477    finalize 0.0672    
all_split False
======================Cut inference begins======================
max lb tensor(0.46775830) min lb tensor(-0.03675979)
Number of Verified Splits: 1405 of 1772
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 51.
#cuts 1-3: 22
#cuts 4-6: 29
#cuts >= 20: 0
BICCOS time: 0.23020076751708984 
BICCOS Cumulative time: 1.7620205879211426
Preprocessing time: 0.0544896125793457 Inference time: 0.16360688209533691 Add cuts time: 0.010539531707763672 Cut analysis time: 0.0015647411346435547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03676 (17), -0.03661 (17), -0.03640 (17), -0.03616 (17), -0.03601 (17), -0.03580 (17), -0.03473 (17), -0.03458 (17), -0.03450 (17), -0.03447 (17), -0.03437 (17), -0.03435 (17), -0.03414 (17), -0.03394 (17), -0.03387 (17), -0.03386 (17), -0.03379 (17), -0.03371 (17), -0.03358 (17), -0.03350 (17), 
Length of domains: 367
Time: pickout 0.0249    decision 0.0583    set_bounds 0.0759    solve 0.2677    add 0.0850    
Accumulated time: pickout 0.2646    decision 1.1831    set_bounds 0.7111    solve 2.6547    add 1.5053    
Current (lb-rhs): -0.036759793758392334
5776 domains visited
Cumulative time: 8.280328273773193

BaB round 9
batch: 367
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] 
cut re-enabled after branching node selection
0 lb beta sum: 1.0697211027145386, worst -0.036759793758392334
10 lb beta sum: 1.0697211027145386, worst -0.036713361740112305
Time: prepare 0.0411    bound 0.1466    transfer 0.0013    finalize 0.0037    func 0.1975    
Accumulated time: func 2.9009    prepare 0.3583    bound 2.3424    transfer 0.0490    finalize 0.0709    
all_split False
======================Cut inference begins======================
max lb tensor(0.00168073) min lb tensor(-0.03667986)
Number of Verified Splits: 40 of 734
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 51.
#cuts 1-3: 22
#cuts 4-6: 29
#cuts >= 20: 0
BICCOS time: 0.03158736228942871 
BICCOS Cumulative time: 1.7936079502105713
Preprocessing time: 0.020968198776245117 Inference time: 0.005454540252685547 Add cuts time: 0.003713846206665039 Cut analysis time: 0.0014507770538330078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03668 (18), -0.03653 (18), -0.03632 (18), -0.03611 (18), -0.03595 (18), -0.03574 (18), -0.03465 (18), -0.03450 (18), -0.03445 (18), -0.03438 (18), -0.03435 (18), -0.03430 (18), -0.03429 (18), -0.03419 (18), -0.03409 (18), -0.03402 (18), -0.03393 (18), -0.03385 (18), -0.03381 (18), -0.03378 (18), 
Length of domains: 694
Time: pickout 0.0181    decision 0.0455    set_bounds 0.0505    solve 0.1976    add 0.1150    
Accumulated time: pickout 0.2827    decision 1.2286    set_bounds 0.7616    solve 2.8523    add 1.6203    
Current (lb-rhs): -0.036679863929748535
6470 domains visited
Cumulative time: 8.746370792388916

BaB round 10
batch: 694
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 90] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-8, 564] [/input-8, 564] [/input-8, 564] [/input-8, 564] [/input-8, 90] [/input-12, 64] 
cut re-enabled after branching node selection
0 lb beta sum: 1.060269832611084, worst -0.03398871421813965
10 lb beta sum: 1.060269832611084, worst -0.03393387794494629
Time: prepare 0.0604    bound 0.1745    transfer 0.0059    finalize 0.0073    func 0.2572    
Accumulated time: func 3.1581    prepare 0.4190    bound 2.5168    transfer 0.0549    finalize 0.0781    
all_split False
======================Cut inference begins======================
max lb tensor(0.00705743) min lb tensor(-0.03390771)
Number of Verified Splits: 236 of 1388
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 51.
#cuts 1-3: 22
#cuts 4-6: 29
#cuts >= 20: 0
BICCOS time: 0.07874393463134766 
BICCOS Cumulative time: 1.872351884841919
Preprocessing time: 0.04180574417114258 Inference time: 0.030520915985107422 Add cuts time: 0.004927396774291992 Cut analysis time: 0.001489877700805664
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03391 (19), -0.03379 (19), -0.03351 (19), -0.03336 (19), -0.03324 (19), -0.03297 (19), -0.03188 (19), -0.03177 (19), -0.03176 (19), -0.03170 (19), -0.03159 (19), -0.03151 (19), -0.03149 (19), -0.03140 (19), -0.03140 (19), -0.03135 (19), -0.03131 (19), -0.03128 (19), -0.03121 (19), -0.03119 (19), 
Length of domains: 1152
Time: pickout 0.0747    decision 0.0494    set_bounds 0.0587    solve 0.2574    add 0.0950    
Accumulated time: pickout 0.3574    decision 1.2780    set_bounds 0.8203    solve 3.1098    add 1.7153    
Current (lb-rhs): -0.03390771150588989
7622 domains visited
Cumulative time: 9.369776964187622

BaB round 11
batch: 1152
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-8, 1138] 
cut re-enabled after branching node selection
0 lb beta sum: 1.0339983701705933, worst -0.030836105346679688
10 lb beta sum: 1.0339983701705933, worst -0.030810832977294922
Time: prepare 0.1042    bound 0.2486    transfer 0.0069    finalize 0.0117    func 0.3874    
Accumulated time: func 3.5455    prepare 0.5234    bound 2.7655    transfer 0.0618    finalize 0.0898    
all_split False
======================Cut inference begins======================
max lb tensor(0.00840247) min lb tensor(-0.03080082)
Number of Verified Splits: 275 of 2304
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 51.
#cuts 1-3: 22
#cuts 4-6: 29
#cuts >= 20: 0
BICCOS time: 0.11710977554321289 
BICCOS Cumulative time: 1.9894616603851318
Preprocessing time: 0.06992673873901367 Inference time: 0.04081988334655762 Add cuts time: 0.004833221435546875 Cut analysis time: 0.0015299320220947266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03080 (20), -0.03069 (20), -0.03047 (20), -0.03025 (20), -0.03014 (20), -0.02992 (20), -0.02876 (20), -0.02865 (20), -0.02858 (20), -0.02856 (20), -0.02848 (20), -0.02847 (20), -0.02843 (20), -0.02843 (20), -0.02833 (20), -0.02828 (20), -0.02825 (20), -0.02815 (20), -0.02807 (20), -0.02802 (20), 
Length of domains: 2029
Time: pickout 0.0381    decision 0.0734    set_bounds 0.2646    solve 0.3880    add 0.1323    
Accumulated time: pickout 0.3955    decision 1.3514    set_bounds 1.0849    solve 3.4977    add 1.8476    
Current (lb-rhs): -0.030800819396972656
9651 domains visited
Cumulative time: 10.39449429512024

BaB round 12
batch: 2029
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1138] [/input-8, 1508] [/input-8, 564] [/input-8, 1508] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1508] 
cut re-enabled after branching node selection
0 lb beta sum: 1.020986795425415, worst -0.028827428817749023
10 lb beta sum: 1.020986795425415, worst -0.028823256492614746
Time: prepare 0.1827    bound 0.3812    transfer 0.0195    finalize 0.0209    func 0.6316    
Accumulated time: func 4.1770    prepare 0.7064    bound 3.1467    transfer 0.0813    finalize 0.1107    
all_split False
======================Cut inference begins======================
max lb tensor(0.00571465) min lb tensor(-0.02881396)
Number of Verified Splits: 507 of 4058
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 51.
#cuts 1-3: 22
#cuts 4-6: 29
#cuts >= 20: 0
BICCOS time: 0.2136094570159912 
BICCOS Cumulative time: 2.203071117401123
Preprocessing time: 0.12346291542053223 Inference time: 0.08034896850585938 Add cuts time: 0.008252382278442383 Cut analysis time: 0.0015451908111572266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02881 (21), -0.02870 (21), -0.02849 (21), -0.02827 (21), -0.02815 (21), -0.02794 (21), -0.02678 (21), -0.02666 (21), -0.02660 (21), -0.02654 (21), -0.02649 (21), -0.02648 (21), -0.02645 (21), -0.02627 (21), -0.02623 (21), -0.02614 (21), -0.02612 (21), -0.02609 (21), -0.02603 (21), -0.02602 (21), 
Length of domains: 3551
Time: pickout 0.1049    decision 0.1172    set_bounds 0.1724    solve 0.7960    add 0.1449    
Accumulated time: pickout 0.5004    decision 1.4686    set_bounds 1.2573    solve 4.2937    add 1.9925    
Current (lb-rhs): -0.028813958168029785
13202 domains visited
Cumulative time: 11.958284854888916

BaB round 13
batch: 3551
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 564] [/input-8, 564] [/input-8, 1508] [/input-8, 1508] [/input-8, 564] [/input-8, 564] [/input-8, 1508] [/input-8, 564] [/input-12, 64] [/input-8, 1508] 
cut re-enabled after branching node selection
0 lb beta sum: 0.998837947845459, worst -0.026700973510742188
10 lb beta sum: 0.998837947845459, worst -0.026691854000091553
Time: prepare 0.3204    bound 0.6128    transfer 0.0216    finalize 0.0325    func 1.0345    
Accumulated time: func 5.2116    prepare 1.0270    bound 3.7595    transfer 0.1028    finalize 0.1433    
all_split False
======================Cut inference begins======================
max lb tensor(0.00704002) min lb tensor(-0.02668500)
Number of Verified Splits: 1359 of 7102
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 52.
#cuts 1-3: 22
#cuts 4-6: 30
#cuts >= 20: 0
BICCOS time: 0.46853041648864746 
BICCOS Cumulative time: 2.6716015338897705
Preprocessing time: 0.2194993495941162 Inference time: 0.22480511665344238 Add cuts time: 0.02257704734802246 Cut analysis time: 0.0016489028930664062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02668 (22), -0.02657 (22), -0.02636 (22), -0.02598 (22), -0.02587 (22), -0.02566 (22), -0.02465 (22), -0.02453 (22), -0.02441 (22), -0.02437 (22), -0.02432 (22), -0.02431 (22), -0.02419 (22), -0.02409 (22), -0.02401 (22), -0.02399 (22), -0.02398 (22), -0.02391 (22), -0.02380 (22), -0.02374 (22), 
Length of domains: 5743
Time: pickout 0.0678    decision 0.1991    set_bounds 0.5178    solve 1.0363    add 0.1534    
Accumulated time: pickout 0.5682    decision 1.6677    set_bounds 1.7751    solve 5.3300    add 2.1458    
Current (lb-rhs): -0.026684999465942383
18945 domains visited
Cumulative time: 14.424105882644653

BaB round 14
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1508] [/input-8, 700] [/input-8, 1508] [/input-8, 1514] [/input-8, 1514] [/input-8, 1508] [/input-8, 1514] [/input-8, 1514] [/input-8, 1508] [/input-8, 1514] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025294184684753418
10 lb beta sum: 0.5857330560684204, worst -0.024406716227531433
Time: prepare 0.1848    bound 0.6914    transfer 0.0449    finalize 0.0420    func 1.0164    
Accumulated time: func 6.2280    prepare 1.2121    bound 4.4509    transfer 0.1477    finalize 0.1852    
all_split False
======================Cut inference begins======================
max lb tensor(0.22714695) min lb tensor(-0.02440101)
Number of Verified Splits: 2486 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 53.
#cuts 1-3: 23
#cuts 4-6: 30
#cuts >= 20: 0
BICCOS time: 0.9479527473449707 
BICCOS Cumulative time: 3.619554281234741
Preprocessing time: 0.2562239170074463 Inference time: 0.6520347595214844 Add cuts time: 0.038034677505493164 Cut analysis time: 0.001659393310546875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02440 (23), -0.02429 (23), -0.02408 (23), -0.02368 (23), -0.02357 (23), -0.02350 (22), -0.02341 (22), -0.02339 (22), -0.02336 (23), -0.02330 (22), -0.02318 (22), -0.02309 (22), -0.02236 (23), -0.02225 (23), -0.02211 (23), -0.02208 (23), -0.02204 (23), -0.02201 (23), -0.02190 (23), -0.02183 (23), 
Length of domains: 7353
Time: pickout 0.0763    decision 0.2250    set_bounds 0.5521    solve 1.0187    add 0.1964    
Accumulated time: pickout 0.6445    decision 1.8927    set_bounds 2.3272    solve 6.3487    add 2.3423    
Current (lb-rhs): -0.02440100908279419
24651 domains visited
current_vram/total_varm: 10.0GB/99.9GB, batch_size increase to 8192
Cumulative time: 17.480226278305054

BaB round 15
batch: 7353
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1514] [/input-8, 1514] [/input-8, 1514] [/input-8, 1514] [/input-8, 1514] [/input-8, 1514] [/input-8, 1514] [/input-8, 1514] [/input-8, 1514] [/input-8, 1514] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023749351501464844
10 lb beta sum: 0.5682826042175293, worst -0.022849947214126587
Time: prepare 0.3186    bound 1.1996    transfer 0.1308    finalize 0.0755    func 1.8191    
Accumulated time: func 8.0471    prepare 1.5310    bound 5.6505    transfer 0.2786    finalize 0.2608    
all_split False
======================Cut inference begins======================
max lb tensor(0.00702715) min lb tensor(-0.02284005)
Number of Verified Splits: 6621 of 14706
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 58.
#cuts 1-3: 24
#cuts 4-6: 34
#cuts >= 20: 0
BICCOS time: 1.708191156387329 
BICCOS Cumulative time: 5.32774543762207
Preprocessing time: 0.4722096920013428 Inference time: 1.1440939903259277 Add cuts time: 0.08980154991149902 Cut analysis time: 0.0020859241485595703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02284 (24), -0.02272 (24), -0.02253 (24), -0.02212 (24), -0.02200 (24), -0.02181 (24), -0.02117 (23), -0.02110 (23), -0.02105 (23), -0.02099 (23), -0.02084 (23), -0.02080 (24), -0.02078 (23), -0.02069 (24), -0.02055 (24), -0.02052 (24), -0.02049 (24), -0.02045 (24), -0.02033 (24), -0.02028 (24), 
Length of domains: 8085
Time: pickout 0.2219    decision 0.4082    set_bounds 0.8925    solve 2.0525    add 0.0985    
Accumulated time: pickout 0.8664    decision 2.3010    set_bounds 3.2197    solve 8.4012    add 2.4408    
Current (lb-rhs): -0.022840052843093872
32736 domains visited
Cumulative time: 22.954070806503296

BaB round 16
batch: 8085
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 808] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02151203155517578
10 lb beta sum: 0.6318075656890869, worst -0.02059212327003479
Time: prepare 0.3405    bound 1.3137    transfer 0.1235    finalize 0.0878    func 1.9724    
Accumulated time: func 10.0196    prepare 1.8719    bound 6.9642    transfer 0.4020    finalize 0.3486    
all_split False
======================Cut inference begins======================
max lb tensor(0.22875926) min lb tensor(-0.02059028)
Number of Verified Splits: 7426 of 16170
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 55.
#cuts 1-3: 27
#cuts 4-6: 28
#cuts >= 20: 0
BICCOS time: 2.2255210876464844 
BICCOS Cumulative time: 7.553266525268555
Preprocessing time: 0.7969961166381836 Inference time: 1.3365800380706787 Add cuts time: 0.09023618698120117 Cut analysis time: 0.0017087459564208984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02059 (25), -0.02048 (25), -0.02028 (25), -0.01990 (25), -0.01978 (25), -0.01960 (24), -0.01959 (25), -0.01952 (24), -0.01948 (24), -0.01941 (24), -0.01928 (24), -0.01922 (24), -0.01856 (25), -0.01844 (25), -0.01829 (25), -0.01827 (25), -0.01825 (25), -0.01822 (25), -0.01810 (25), -0.01800 (25), 
Length of domains: 8744
Time: pickout 0.1632    decision 0.6925    set_bounds 0.9709    solve 1.9766    add 0.0708    
Accumulated time: pickout 1.0296    decision 2.9935    set_bounds 4.1905    solve 10.3778    add 2.5116    
Current (lb-rhs): -0.020590275526046753
41480 domains visited
Cumulative time: 29.164206504821777

BaB round 17
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 700] [/input-8, 1405] [/input-8, 1405] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.019086837768554688
10 lb beta sum: 0.797455906867981, worst -0.0167405903339386
Time: prepare 0.3512    bound 1.3177    transfer 0.1333    finalize 0.0835    func 1.9934    
Accumulated time: func 12.0130    prepare 2.2236    bound 8.2820    transfer 0.5353    finalize 0.4321    
all_split False
======================Cut inference begins======================
max lb tensor(0.54213750) min lb tensor(-0.01673122)
Number of Verified Splits: 10344 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 32
#cuts 4-6: 24
#cuts >= 20: 0
BICCOS time: 2.7700867652893066 
BICCOS Cumulative time: 10.323353290557861
Preprocessing time: 0.5355663299560547 Inference time: 2.121138334274292 Add cuts time: 0.11178874969482422 Cut analysis time: 0.0015933513641357422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01673 (26), -0.01667 (26), -0.01656 (26), -0.01649 (26), -0.01642 (26), -0.01625 (26), -0.01583 (25), -0.01576 (25), -0.01573 (25), -0.01567 (25), -0.01558 (26), -0.01552 (26), -0.01552 (25), -0.01542 (25), -0.01527 (26), -0.01488 (26), -0.01482 (26), -0.01469 (26), -0.01463 (26), -0.01457 (26), 
Length of domains: 6592
Time: pickout 0.1373    decision 0.7190    set_bounds 1.0362    solve 1.9968    add 0.1570    
Accumulated time: pickout 1.1669    decision 3.7125    set_bounds 5.2267    solve 12.3746    add 2.6685    
Current (lb-rhs): -0.01673121750354767
47520 domains visited
current_vram/total_varm: 30.7GB/99.9GB, batch_size increase to 16384
Cumulative time: 36.122366428375244

BaB round 18
batch: 6592
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 700] [/input-8, 90] [/input-8, 923] [/input-8, 923] [/input-8, 90] [/input-8, 923] [/input-8, 923] [/input-8, 923] [/input-8, 923] [/input-8, 923] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.017615437507629395
10 lb beta sum: 1.196312427520752, worst -0.014696061611175537
Time: prepare 0.2904    bound 1.0753    transfer 0.1016    finalize 0.0685    func 1.9665    
Accumulated time: func 13.9795    prepare 2.5143    bound 9.3572    transfer 0.6369    finalize 0.5006    
all_split False
======================Cut inference begins======================
max lb tensor(0.70859450) min lb tensor(-0.01468749)
Number of Verified Splits: 11398 of 13184
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 60.
#cuts 1-3: 36
#cuts 4-6: 24
#cuts >= 20: 0
BICCOS time: 2.7615113258361816 
BICCOS Cumulative time: 13.084864616394043
Preprocessing time: 0.4308810234069824 Inference time: 1.9434642791748047 Add cuts time: 0.38543033599853516 Cut analysis time: 0.001735687255859375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01469 (27), -0.01461 (27), -0.01452 (27), -0.01444 (27), -0.01438 (27), -0.01420 (27), -0.01284 (27), -0.01276 (27), -0.01265 (27), -0.01257 (27), -0.01253 (27), -0.01234 (27), -0.01231 (27), -0.01214 (27), -0.01209 (27), -0.01206 (27), -0.01203 (27), -0.01202 (27), -0.01198 (27), -0.01196 (27), 
Length of domains: 1786
Time: pickout 0.1075    decision 0.3622    set_bounds 0.8355    solve 1.9693    add 0.1418    
Accumulated time: pickout 1.2744    decision 4.0748    set_bounds 6.0622    solve 14.3439    add 2.8103    
Current (lb-rhs): -0.014687493443489075
49306 domains visited
Cumulative time: 42.453354835510254

BaB round 19
batch: 1786
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1361] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.015180110931396484
10 lb beta sum: 1.6523135900497437, worst -0.007632583379745483
Time: prepare 0.0785    bound 0.3476    transfer 0.0069    finalize 0.0180    func 0.4743    
Accumulated time: func 14.4538    prepare 2.5931    bound 9.7048    transfer 0.6438    finalize 0.5186    
all_split False
======================Cut inference begins======================
max lb tensor(0.47398293) min lb tensor(-0.00754011)
Number of Verified Splits: 3152 of 3572
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 60.
#cuts 1-3: 36
#cuts 4-6: 24
#cuts >= 20: 0
BICCOS time: 0.6948933601379395 
BICCOS Cumulative time: 13.779757976531982
Preprocessing time: 0.11275029182434082 Inference time: 0.5517487525939941 Add cuts time: 0.028795957565307617 Cut analysis time: 0.001598358154296875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00754 (28), -0.00745 (28), -0.00739 (28), -0.00737 (28), -0.00728 (28), -0.00722 (28), -0.00707 (28), -0.00697 (28), -0.00692 (28), -0.00690 (28), -0.00680 (28), -0.00675 (28), -0.00569 (28), -0.00560 (28), -0.00554 (28), -0.00551 (28), -0.00541 (28), -0.00536 (28), -0.00534 (28), -0.00522 (28), 
Length of domains: 420
Time: pickout 0.1018    decision 0.1064    set_bounds 0.1611    solve 0.4755    add 0.0849    
Accumulated time: pickout 1.3762    decision 4.1811    set_bounds 6.2233    solve 14.8194    add 2.8952    
Current (lb-rhs): -0.007540106773376465
49726 domains visited
Cumulative time: 44.113609790802

BaB round 20
batch: 420
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] 
cut re-enabled after branching node selection
0 lb beta sum: 1.5851147174835205, worst -0.007540225982666016
10 lb beta sum: 1.5851147174835205, worst -0.0075032711029052734
Time: prepare 0.0374    bound 0.1567    transfer 0.0028    finalize 0.0039    func 0.2062    
Accumulated time: func 14.6600    prepare 2.6307    bound 9.8615    transfer 0.6466    finalize 0.5225    
all_split False
======================Cut inference begins======================
max lb tensor(0.23961365) min lb tensor(-0.00749820)
Number of Verified Splits: 382 of 840
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 60.
#cuts 1-3: 36
#cuts 4-6: 24
#cuts >= 20: 0
BICCOS time: 0.09969973564147949 
BICCOS Cumulative time: 13.879457712173462
Preprocessing time: 0.024618148803710938 Inference time: 0.06932497024536133 Add cuts time: 0.004277229309082031 Cut analysis time: 0.0014793872833251953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00750 (29), -0.00741 (29), -0.00737 (29), -0.00733 (29), -0.00724 (29), -0.00720 (29), -0.00703 (29), -0.00695 (29), -0.00690 (29), -0.00687 (29), -0.00677 (29), -0.00673 (29), -0.00565 (29), -0.00556 (29), -0.00552 (29), -0.00546 (29), -0.00537 (29), -0.00533 (29), -0.00531 (29), -0.00519 (29), 
Length of domains: 458
Time: pickout 0.0199    decision 0.0361    set_bounds 0.0375    solve 0.2064    add 0.0843    
Accumulated time: pickout 1.3961    decision 4.2172    set_bounds 6.2608    solve 15.0258    add 2.9795    
Current (lb-rhs): -0.007498204708099365
50184 domains visited
Cumulative time: 44.60738468170166

BaB round 21
batch: 458
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] 
cut re-enabled after branching node selection
0 lb beta sum: 1.5959429740905762, worst -0.007498323917388916
10 lb beta sum: 1.5959429740905762, worst -0.0075013041496276855
Time: prepare 0.0399    bound 0.1581    transfer 0.0015    finalize 0.0060    func 0.2116    
Accumulated time: func 14.8717    prepare 2.6708    bound 10.0197    transfer 0.6481    finalize 0.5285    
all_split False
======================Cut inference begins======================
max lb tensor(0.23958659) min lb tensor(-0.00749481)
Number of Verified Splits: 309 of 916
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 60.
#cuts 1-3: 36
#cuts 4-6: 24
#cuts >= 20: 0
BICCOS time: 0.08897972106933594 
BICCOS Cumulative time: 13.968437433242798
Preprocessing time: 0.028622150421142578 Inference time: 0.05369877815246582 Add cuts time: 0.005175590515136719 Cut analysis time: 0.0014832019805908203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00749 (30), -0.00741 (30), -0.00736 (30), -0.00733 (30), -0.00724 (30), -0.00719 (30), -0.00703 (30), -0.00694 (30), -0.00689 (30), -0.00686 (30), -0.00677 (30), -0.00672 (30), -0.00578 (30), -0.00569 (30), -0.00564 (30), -0.00564 (30), -0.00561 (30), -0.00556 (30), -0.00552 (30), -0.00552 (30), 
Length of domains: 607
Time: pickout 0.0199    decision 0.0354    set_bounds 0.0397    solve 0.2120    add 0.0314    
Accumulated time: pickout 1.4159    decision 4.2526    set_bounds 6.3005    solve 15.2378    add 3.0109    
Current (lb-rhs): -0.007494807243347168
50791 domains visited
Cumulative time: 45.037728786468506

BaB round 22
batch: 607
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] 
cut re-enabled after branching node selection
0 lb beta sum: 1.5500959157943726, worst -0.006449282169342041
10 lb beta sum: 1.5500959157943726, worst -0.006438851356506348
Time: prepare 0.0523    bound 0.1693    transfer 0.0077    finalize 0.0054    func 0.2428    
Accumulated time: func 15.1145    prepare 2.7234    bound 10.1889    transfer 0.6558    finalize 0.5339    
all_split False
======================Cut inference begins======================
max lb tensor(0.23767686) min lb tensor(-0.00643730)
Number of Verified Splits: 727 of 1214
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 60.
#cuts 1-3: 37
#cuts 4-6: 23
#cuts >= 20: 0
BICCOS time: 0.1769559383392334 
BICCOS Cumulative time: 14.145393371582031
Preprocessing time: 0.03721141815185547 Inference time: 0.1310560703277588 Add cuts time: 0.007199525833129883 Cut analysis time: 0.0014889240264892578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00644 (31), -0.00635 (31), -0.00631 (31), -0.00628 (31), -0.00619 (31), -0.00615 (31), -0.00596 (31), -0.00588 (31), -0.00583 (31), -0.00580 (31), -0.00571 (31), -0.00567 (31), -0.00471 (31), -0.00468 (30), -0.00463 (31), -0.00462 (31), -0.00459 (30), -0.00458 (31), -0.00455 (31), -0.00455 (31), 
Length of domains: 487
Time: pickout 0.0114    decision 0.0443    set_bounds 0.0523    solve 0.2438    add 0.0020    
Accumulated time: pickout 1.4273    decision 4.2969    set_bounds 6.3528    solve 15.4816    add 3.0129    
Current (lb-rhs): -0.0064373016357421875
51278 domains visited
Cumulative time: 45.57418465614319

BaB round 23
batch: 487
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] 
cut re-enabled after branching node selection
0 lb beta sum: 1.5452038049697876, worst -0.007264375686645508
10 lb beta sum: 1.7564890384674072, worst -0.006353437900543213
Time: prepare 0.0433    bound 0.1608    transfer 0.0017    finalize 0.0046    func 0.2169    
Accumulated time: func 15.3314    prepare 2.7669    bound 10.3498    transfer 0.6575    finalize 0.5385    
all_split False
======================Cut inference begins======================
max lb tensor(0.24094170) min lb tensor(-0.00634825)
Number of Verified Splits: 641 of 974
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 60.
#cuts 1-3: 37
#cuts 4-6: 23
#cuts >= 20: 0
BICCOS time: 0.15475869178771973 
BICCOS Cumulative time: 14.300152063369751
Preprocessing time: 0.029825687408447266 Inference time: 0.11719155311584473 Add cuts time: 0.0062563419342041016 Cut analysis time: 0.0014851093292236328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00635 (32), -0.00619 (32), -0.00479 (32), -0.00466 (32), -0.00462 (32), -0.00462 (32), -0.00455 (32), -0.00449 (32), -0.00445 (32), -0.00433 (32), -0.00430 (32), -0.00425 (32), -0.00425 (32), -0.00420 (32), -0.00417 (32), -0.00409 (32), -0.00408 (32), -0.00404 (32), -0.00378 (32), -0.00377 (32), 
Length of domains: 333
Time: pickout 0.0097    decision 0.0398    set_bounds 0.2019    solve 0.2171    add 0.0017    
Accumulated time: pickout 1.4370    decision 4.3368    set_bounds 6.5547    solve 15.6987    add 3.0146    
Current (lb-rhs): -0.006348252296447754
51611 domains visited
Cumulative time: 46.203750133514404

BaB round 24
batch: 333
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9037171602249146, worst -0.005281686782836914
10 lb beta sum: 1.9037171602249146, worst -0.0052759647369384766
Time: prepare 0.0313    bound 0.1767    transfer 0.0063    finalize 0.0043    func 0.2233    
Accumulated time: func 15.5547    prepare 2.7985    bound 10.5265    transfer 0.6639    finalize 0.5428    
all_split False
======================Cut inference begins======================
max lb tensor(0.23631239) min lb tensor(-0.00526917)
Number of Verified Splits: 492 of 666
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 62.
#cuts 1-3: 39
#cuts 4-6: 23
#cuts >= 20: 0
BICCOS time: 0.12139081954956055 
BICCOS Cumulative time: 14.421542882919312
Preprocessing time: 0.022222280502319336 Inference time: 0.09212756156921387 Add cuts time: 0.005268573760986328 Cut analysis time: 0.0017724037170410156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00527 (33), -0.00511 (33), -0.00371 (33), -0.00358 (33), -0.00354 (33), -0.00352 (33), -0.00347 (33), -0.00341 (33), -0.00336 (33), -0.00326 (33), -0.00322 (33), -0.00317 (33), -0.00317 (33), -0.00315 (32), -0.00313 (33), -0.00309 (33), -0.00301 (33), -0.00300 (33), -0.00296 (33), -0.00269 (33), 
Length of domains: 174
Time: pickout 0.0071    decision 0.0265    set_bounds 0.0199    solve 0.2236    add 0.0837    
Accumulated time: pickout 1.4440    decision 4.3632    set_bounds 6.5745    solve 15.9223    add 3.0983    
Current (lb-rhs): -0.005269169807434082
51785 domains visited
Cumulative time: 46.69754958152771

BaB round 25
batch: 174
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.004819393157958984
10 lb beta sum: 0.5193500518798828, worst -0.003707200288772583
Time: prepare 0.0095    bound 0.1750    transfer 0.0021    finalize 0.0023    func 0.1912    
Accumulated time: func 15.7459    prepare 2.8082    bound 10.7014    transfer 0.6660    finalize 0.5451    
all_split False
======================Cut inference begins======================
max lb tensor(0.23797268) min lb tensor(-0.00370400)
Number of Verified Splits: 232 of 348
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 62.
#cuts 1-3: 39
#cuts 4-6: 23
#cuts >= 20: 0
BICCOS time: 0.05983328819274902 
BICCOS Cumulative time: 14.48137617111206
Preprocessing time: 0.011610269546508789 Inference time: 0.043313026428222656 Add cuts time: 0.0033309459686279297 Cut analysis time: 0.0015790462493896484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00370 (34), -0.00362 (34), -0.00357 (34), -0.00354 (34), -0.00345 (34), -0.00341 (34), -0.00325 (34), -0.00316 (34), -0.00312 (34), -0.00309 (34), -0.00300 (34), -0.00296 (34), -0.00213 (34), -0.00204 (34), -0.00200 (34), -0.00197 (34), -0.00194 (34), -0.00190 (34), -0.00187 (34), -0.00187 (34), 
Length of domains: 116
Time: pickout 0.0166    decision 0.0245    set_bounds 0.0152    solve 0.1914    add 0.0769    
Accumulated time: pickout 1.4607    decision 4.3878    set_bounds 6.5898    solve 16.1138    add 3.1752    
Current (lb-rhs): -0.0037039965391159058
51901 domains visited
Cumulative time: 47.0913200378418

BaB round 26
batch: 116
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6863566637039185, worst -0.002529546618461609
10 lb beta sum: 0.6863566637039185, worst -0.002523943781852722
Time: prepare 0.0126    bound 0.1737    transfer 0.0010    finalize 0.0016    func 0.1905    
Accumulated time: func 15.9364    prepare 2.8210    bound 10.8751    transfer 0.6670    finalize 0.5467    
all_split False
======================Cut inference begins======================
max lb tensor(0.23670638) min lb tensor(-0.00252084)
Number of Verified Splits: 182 of 232
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 63.
#cuts 1-3: 40
#cuts 4-6: 23
#cuts >= 20: 0
BICCOS time: 0.04714465141296387 
BICCOS Cumulative time: 14.528520822525024
Preprocessing time: 0.00790715217590332 Inference time: 0.03470754623413086 Add cuts time: 0.0029790401458740234 Cut analysis time: 0.001550912857055664
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00252 (35), -0.00243 (35), -0.00239 (35), -0.00235 (35), -0.00227 (35), -0.00222 (35), -0.00207 (35), -0.00198 (35), -0.00194 (35), -0.00190 (35), -0.00182 (35), -0.00177 (35), -0.00100 (34), -0.00094 (35), -0.00091 (34), -0.00087 (34), -0.00085 (35), -0.00082 (35), -0.00078 (35), -0.00076 (35), 
Length of domains: 50
Time: pickout 0.0147    decision 0.0165    set_bounds 0.0108    solve 0.1905    add 0.0599    
Accumulated time: pickout 1.4754    decision 4.4042    set_bounds 6.6006    solve 16.3043    add 3.2351    
Current (lb-rhs): -0.002520844340324402
51951 domains visited
Cumulative time: 47.439473390579224

BaB round 27
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1366] [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] [/input-8, 1366] 
split level 1: [/input, 2632] [/input, 2632] [/input, 2632] [/input, 2632] [/input, 2632] [/input-8, 1836] [/input-8, 1836] [/input, 2632] [/input, 2632] [/input, 2632] 
split level 2: [/input-8, 1836] [/input-8, 1836] [/input-8, 1836] [/input-8, 1836] [/input-8, 1836] [/input, 2632] [/input, 2632] [/input-8, 1836] [/input-8, 1836] [/input-8, 1836] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.0014410018920898438

all verified at 0th iter
Time: prepare 0.0107    bound 0.0062    transfer 0.0026    finalize 0.0021    func 0.0243    
Accumulated time: func 15.9607    prepare 2.8319    bound 10.8813    transfer 0.6696    finalize 0.5488    
all_split False
======================Cut inference begins======================
max lb tensor(0.01131940) min lb tensor(0.00144100)
Number of Verified Splits: 400 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 63.
#cuts 1-3: 40
#cuts 4-6: 23
#cuts >= 20: 0
BICCOS time: 0.012660741806030273 
BICCOS Cumulative time: 14.541181564331055
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0071    decision 0.0156    set_bounds 0.0359    solve 0.0244    add 0.0007    
Accumulated time: pickout 1.4825    decision 4.4199    set_bounds 6.6365    solve 16.3287    add 3.2357    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
51951 domains visited
Cumulative time: 47.53850722312927


Properties batch 3, size 1
Remaining timeout: 150.68450212478638
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 150.68440508842468
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 150.68437886238098
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 150.68435716629028
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 150.6843330860138
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 150.68431186676025
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 49.3168 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 170, vnnlib ID: 170 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.00588608, -16.16182518,  -6.58917904,  -9.66689301,  -7.57059002,
          -8.67937565, -11.63756847, -10.25432014, -14.60658455, -14.13991070]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [571]; unstable size 571; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 151, 1, 571] with unstable size 150 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 571] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 571] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [150]; unstable size 150; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 150] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 150] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.57134914,  7.26472521, -1.64735627,  1.38431621,  0.25252247,
          3.19363284,  1.94417977,  5.92638063,  5.30164909]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.00588608, -16.16182518,  -6.58917904,  -9.66689301,  -7.57059002,
          -8.67937565, -11.63756847, -10.25432014, -14.60658455, -14.13991070]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.00588608, -16.16182518,  -6.58917904,  -9.66689301,  -7.57059002,
           -8.67937565, -11.63756847, -10.25432014, -14.60658455, -14.13991070]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.98141098]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.84603173, -0.94126981, -0.86190474,  ..., -0.33809513,
            -0.48095238, -0.51269841],
           [-0.25873005, -0.30634910, -0.27460307,  ..., -0.29047608,
            -0.33809513, -0.43333322],
           [ 0.42380959,  0.36031753,  0.39206356,  ..., -0.08412688,
            -0.14761895, -0.32222211],
           ...,
           [ 0.47142863,  0.48730165,  0.55079371,  ...,  0.05873025,
             0.01111121,  0.12222230],
           [ 0.12222230,  0.10634929,  0.23333341,  ..., -0.02063482,
            -0.02063482,  0.16984135],
           [-0.19523799, -0.41746020, -0.29047608,  ...,  0.16984135,
             0.31269848,  0.58253974]],

          [[-0.67632848, -0.78904986, -0.72463763,  ..., -0.03220600,
            -0.17713353, -0.20933965],
           [ 0.04830930, -0.01610294,  0.01610318,  ...,  0.03220624,
            -0.01610294, -0.11272129],
           [ 0.88566834,  0.82125610,  0.85346222,  ...,  0.24154601,
             0.19323683, -0.01610294],
           ...,
           [ 0.95008057,  0.98228669,  1.03059590,  ...,  0.62801939,
             0.56360716,  0.61191636],
           [ 0.70853472,  0.72463775,  0.85346222,  ...,  0.66022551,
             0.62801939,  0.77294695],
           [ 0.46698883,  0.22544295,  0.40257660,  ...,  0.77294695,
             0.85346222,  1.14331758]],

          [[-0.01349309, -0.07346311,  0.03148442,  ...,  0.76611710,
             0.66116959,  0.64617711],
           [-0.02848560, -0.04347810,  0.00149941,  ...,  0.78110963,
             0.78110963,  0.78110963],
           [-0.14842562, -0.19340314, -0.14842562,  ...,  0.81109464,
             0.81109464,  0.76611710],
           ...,
           [-0.53823084, -0.56821585, -0.50824583,  ..., -0.68815589,
            -0.65817088, -0.49325335],
           [-0.58320838, -0.73313338, -0.61319339,  ..., -0.83808094,
            -0.83808094, -0.65817088],
           [-0.80809593, -1.04797614, -0.85307342,  ..., -0.74812591,
            -0.67316341, -0.43328333]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0844 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 171, vnnlib ID: 171 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.39601326, -14.69097233, -12.64669704, -12.07789993, -12.42763519,
         -12.80878258, -10.90289593, -13.06480980, -16.92237282, -13.27768993]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [576]; unstable size 576; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 576] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 576] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 576] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 199] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.12973356, 2.10289240, 0.60040092, 0.30346054, 0.51467490, 0.89803624,
         1.03227460, 3.96525598, 0.86045074]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0711 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 172, vnnlib ID: 172 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.66107941, -11.79125309,  -7.86607170, -10.32452965,  -7.72983742,
         -11.17636871, -10.86951828, -11.03235435,  -7.73300457, -11.89622021]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [722]; unstable size 722; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 180, 1, 722] with unstable size 179 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 722] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 722] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [179]; unstable size 179; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 179] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 179] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.99104691,  0.21340632,  2.51710463, -0.09744847,  3.08586264,
          3.07672787,  2.41397452, -0.15205121,  3.96747732]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.66107941, -11.79125309,  -7.86607170, -10.32452965,  -7.72983742,
         -11.17636871, -10.86951828, -11.03235435,  -7.73300457, -11.89622021]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.08it/s]100%|██████████| 1/1 [00:00<00:00,  9.07it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.91187239, -11.79963017,  -8.07671642, -10.41768456,  -7.87977695,
          -11.27148438, -10.87535191, -11.22656631,  -7.33530617, -11.91874981],
         [ -6.91187239, -11.79963017,  -8.07671642, -10.41768456,  -7.87977695,
          -11.27148438, -10.87535191, -11.22656631,  -7.33530617, -11.91874981]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.96790457, 0.42343378]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1133 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.568561553955078
alpha/beta optimization time: 1.1973164081573486
initial alpha-crown bounds: tensor([[ 4.04605627,  0.26190430,  2.56589365, -0.03486192,  3.13469839,
          3.12771058,  2.50110149, -0.06319219,  4.02924919]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.06319218873977661
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.61484098434448
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.61480069160461
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.61477780342102
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.61475729942322
Verifying property 3 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03486192]], device='cuda:0') need to verify.
Model prediction is: tensor([ -6.66107941, -11.79125309,  -7.86607170, -10.32452965,  -7.72983742,
        -11.17636871, -10.86951828, -11.03235435,  -7.73300457, -11.89622021],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03486192]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 722
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 177
Node /15 input 0: size torch.Size([100]) unstable 19
-----------------
# of unstable neurons: 918
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.000102996826171875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03486233949661255
10 lb beta sum: 0.0, worst -0.034868061542510986
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0519    transfer 0.0001    finalize 0.0001    func 0.0524    
Accumulated time: func 0.0524    prepare 0.0002    bound 0.0519    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] 
split level 1: [/input-12, 45] 
split level 2: [/input-12, 37] 
split level 3: [/input-12, 9] 
split level 4: [/input-12, 78] 
split level 5: [/input-12, 90] 
split level 6: [/input-8, 651] 
split level 7: [/input-12, 92] 
split level 8: [/input-8, 802] 
split level 9: [/input-12, 58] 
split level 10: [/input-8, 534] 
split level 11: [/input-8, 652] 
split level 12: [/input-8, 1012] 
split level 13: [/input-8, 563] 
split level 14: [/input-8, 684] 
split level 15: [/input-8, 650] 
split level 16: [/input-8, 653] 
split level 17: [/input-8, 996] 
split level 18: [/input-8, 1886] 
split level 19: [/input-8, 564] 
split level 20: [/input, 1483] 
split level 21: [/input-8, 1306] 
split level 22: [/input, 3514] 
split level 23: [/input-8, 1330] 
split level 24: [/input-8, 548] 
split level 25: [/input-8, 1331] 
split level 26: [/input, 2250] 
split level 27: [/input-8, 1454] 
split level 28: [/input-8, 566] 
split level 29: [/input-8, 1010] 
split level 30: [/input-8, 1554] 
split level 31: [/input, 1721] 
split level 32: [/input, 2266] 
split level 33: [/input, 2983] 
split level 34: [/input-8, 573] 
split level 35: [/input-8, 994] 
split level 36: [/input, 2409] 
split level 37: [/input-8, 2024] 
split level 38: [/input-8, 857] 
split level 39: [/input-8, 681] 
split level 40: [/input-8, 927] 
split level 41: [/input-8, 1316] 
split level 42: [/input, 3530] 
split level 43: [/input, 3113] 
split level 44: [/input-8, 1449] 
split level 45: [/input-8, 1305] 
split level 46: [/input, 3110] 
split level 47: [/input-8, 1553] 
split level 48: [/input-8, 2022] 
split level 49: [/input, 3112] 
split level 50: [/input, 3173] 
split level 51: [/input, 1499] 
split level 52: [/input, 3257] 
split level 53: [/input-8, 1629] 
split level 54: [/input, 3429] 
split level 55: [/input, 342] 
split level 56: [/input, 3131] 
split level 57: [/input, 2361] 
split level 58: [/input, 3357] 
split level 59: [/input, 3432] 
split level 60: [/input, 375] 
split level 61: [/input, 1749] 
split level 62: [/input, 3735] 
split level 63: [/input, 3546] 
split level 64: [/input, 2375] 
split level 65: [/input, 3383] 
split level 66: [/input-8, 1974] 
split level 67: [/input, 2987] 
split level 68: [/input, 3493] 
split level 69: [/input, 3369] 
split level 70: [/input-8, 1461] 
split level 71: [/input, 2651] 
split level 72: [/input, 676] 
split level 73: [/input-8, 1109] 
split level 74: [/input, 3370] 
split level 75: [/input-8, 1803] 
split level 76: [/input, 341] 
split level 77: [/input, 3895] 
split level 78: [/input, 3174] 
split level 79: [/input-8, 1071] 
split level 80: [/input, 3143] 
split level 81: [/input, 3115] 
split level 82: [/input-8, 278] 
split level 83: [/input, 2405] 
split level 84: [/input, 3893] 
split level 85: [/input, 3116] 
split level 86: [/input, 3945] 
split level 87: [/input, 3928] 
split level 88: [/input-8, 1001] 
split level 89: [/input, 3929] 
split level 90: [/input, 2379] 
split level 91: [/input, 3511] 
split level 92: [/input, 1335] 
split level 93: [/input-8, 1249] 
split level 94: [/input, 2392] 
split level 95: [/input-8, 1122] 
split level 96: [/input-8, 1997] 
split level 97: [/input, 3927] 
split level 98: [/input-8, 464] 
split level 99: [/input, 2374] 
split level 100: [/input, 328] 
split level 101: [/input, 3256] 
split level 102: [/input, 3761] 
split level 103: [/input, 3523] 
split level 104: [/input, 3545] 
split level 105: [/input, 2404] 
split level 106: [/input, 3382] 
split level 107: [/input, 1750] 
split level 108: [/input, 3448] 
split level 109: [/input-8, 1552] 
split level 110: [/input-8, 1065] 
split level 111: [/input, 1310] 
split level 112: [/input-8, 574] 
split level 113: [/input-8, 1308] 
split level 114: [/input, 1351] 
split level 115: [/input, 3413] 
split level 116: [/input, 3098] 
split level 117: [/input, 330] 
split level 118: [/input, 3550] 
split level 119: [/input, 3894] 
split level 120: [/input, 2395] 
split level 121: [/input, 2373] 
split level 122: [/input, 1446] 
split level 123: [/input, 3763] 
split level 124: [/input, 2981] 
split level 125: [/input, 3241] 
split level 126: [/input, 344] 
split level 127: [/input, 2393] 
split level 128: [/input-8, 465] 
split level 129: [/input, 1502] 
split level 130: [/input, 3431] 
split level 131: [/input, 1336] 
split level 132: [/input, 2376] 
split level 133: [/input, 1531] 
split level 134: [/input-8, 646] 
split level 135: [/input-8, 645] 
split level 136: [/input, 3925] 
split level 137: [/input, 3125] 
split level 138: [/input-8, 1995] 
split level 139: [/input, 3931] 
split level 140: [/input, 1365] 
split level 141: [/input, 3738] 
split level 142: [/input, 2380] 
split level 143: [/input, 3397] 
split level 144: [/input, 3371] 
split level 145: [/input, 3175] 
split level 146: [/input, 2363] 
split level 147: [/input, 2235] 
split level 148: [/input, 1479] 
split level 149: [/input, 1337] 
split level 150: [/input, 3926] 
split level 151: [/input, 3005] 
split level 152: [/input-8, 2030] 
split level 153: [/input, 1532] 
split level 154: [/input, 3576] 
split level 155: [/input, 3571] 
split level 156: [/input, 3573] 
split level 157: [/input, 2506] 
split level 158: [/input, 1415] 
split level 159: [/input, 2652] 
split level 160: [/input, 438] 
split level 161: [/input, 3384] 
split level 162: [/input-8, 1441] 
split level 163: [/input, 1309] 
split level 164: [/input-8, 981] 
split level 165: [/input, 3356] 
split level 166: [/input-8, 1996] 
split level 167: [/input, 2388] 
split level 168: [/input, 2362] 
split level 169: [/input, 3160] 
split level 170: [/input, 3580] 
split level 171: [/input, 3385] 
split level 172: [/input, 44] 
split level 173: [/input, 3381] 
split level 174: [/input, 1863] 
split level 175: [/input, 3883] 
split level 176: [/input, 3387] 
split level 177: [/input, 2346] 
split level 178: [/input, 3572] 
split level 179: [/input, 3582] 
split level 180: [/input, 340] 
split level 181: [/input, 1530] 
split level 182: [/input, 2394] 
split level 183: [/input, 769] 
split level 184: [/input, 3574] 
split level 185: [/input, 1491] 
split level 186: [/input, 3575] 
split level 187: [/input, 2542] 
split level 188: [/input-8, 1758] 
split level 189: [/input, 1533] 
split level 190: [/input, 1453] 
split level 191: [/input, 3271] 
split level 192: [/input, 2403] 
split level 193: [/input, 1487] 
split level 194: [/input, 2553] 
split level 195: [/input, 3753] 
split level 196: [/input, 3943] 
split level 197: [/input-8, 1524] 
split level 198: [/input, 1334] 
split level 199: [/input, 3354] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.034767210483551025
10 lb beta sum: 0.0, worst -0.03476250171661377
Time: prepare 0.0114    bound 0.0951    transfer 0.0017    finalize 0.0028    func 0.1137    
Accumulated time: func 0.1660    prepare 0.0216    bound 0.1470    transfer 0.0018    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.10734296) min lb tensor(-0.03475934)
Number of Verified Splits: 11 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011019468307495117 
BICCOS Cumulative time: 0.011019468307495117
Preprocessing time: 0.01000213623046875 Inference time: 0.0004239082336425781 Add cuts time: 0.0001506805419921875 Cut analysis time: 0.00044274330139160156
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5073    set_bounds 0.0089    solve 0.1138    add 0.0097    
Accumulated time: pickout 0.0003    decision 0.5073    set_bounds 0.0089    solve 0.1138    add 0.0097    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 41] 
split level 1: [/input-12, 45] 
split level 2: [/input-12, 37] 
split level 3: [/input-12, 78] 
split level 4: [/input-12, 90] 
split level 5: [/input-12, 92] 
split level 6: [/input-12, 58] 
split level 7: [/input-8, 652] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.21258211135864258

all verified at 0th iter
Time: prepare 0.0051    bound 0.0079    transfer 0.0006    finalize 0.0013    func 0.0165    
Accumulated time: func 0.1826    prepare 0.0271    bound 0.1549    transfer 0.0024    finalize 0.0042    
all_split False
======================Cut inference begins======================
max lb tensor(0.49382573) min lb tensor(0.21258211)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.006961345672607422 
BICCOS Cumulative time: 0.01798081398010254
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.0213    set_bounds 0.0204    solve 0.0166    add 0.0002    
Accumulated time: pickout 0.0007    decision 0.5286    set_bounds 0.0293    solve 0.1304    add 0.0099    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.7906010150909424


Properties batch 4, size 1
Remaining timeout: 197.5992350578308
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.5991632938385
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.59892320632935
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.59889912605286
Verifying property 7 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.06319219]], device='cuda:0') need to verify.
Model prediction is: tensor([ -6.66107941, -11.79125309,  -7.86607170, -10.32452965,  -7.72983742,
        -11.17636871, -10.86951828, -11.03235435,  -7.73300457, -11.89622021],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.06319219]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 722
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 177
Node /15 input 0: size torch.Size([100]) unstable 19
-----------------
# of unstable neurons: 918
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.822845458984375e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06319063901901245
10 lb beta sum: 0.0, worst -0.0631900429725647
Time: prepare 0.0002    bound 0.0861    transfer 0.0001    finalize 0.0001    func 0.0865    
Accumulated time: func 0.0865    prepare 0.0002    bound 0.0861    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 53] 
split level 1: [/input-12, 21] 
split level 2: [/input-12, 78] 
split level 3: [/input-12, 9] 
split level 4: [/input-8, 1331] 
split level 5: [/input-12, 74] 
split level 6: [/input-12, 99] 
split level 7: [/input-8, 1330] 
split level 8: [/input-8, 1777] 
split level 9: [/input-8, 1396] 
split level 10: [/input-8, 1785] 
split level 11: [/input-8, 534] 
split level 12: [/input-8, 564] 
split level 13: [/input-8, 1776] 
split level 14: [/input-12, 40] 
split level 15: [/input-8, 563] 
split level 16: [/input, 2167] 
split level 17: [/input-8, 1372] 
split level 18: [/input-8, 1395] 
split level 19: [/input-8, 566] 
split level 20: [/input-8, 1769] 
split level 21: [/input-8, 880] 
split level 22: [/input-8, 1509] 
split level 23: [/input-8, 1839] 
split level 24: [/input-8, 1394] 
split level 25: [/input-12, 32] 
split level 26: [/input-8, 573] 
split level 27: [/input-8, 1524] 
split level 28: [/input-8, 1525] 
split level 29: [/input-8, 1900] 
split level 30: [/input-8, 118] 
split level 31: [/input-8, 1554] 
split level 32: [/input-8, 650] 
split level 33: [/input-8, 1454] 
split level 34: [/input, 3432] 
split level 35: [/input, 2983] 
split level 36: [/input-8, 299] 
split level 37: [/input-8, 1782] 
split level 38: [/input-8, 567] 
split level 39: [/input-8, 651] 
split level 40: [/input-8, 1841] 
split level 41: [/input-8, 1138] 
split level 42: [/input-8, 1843] 
split level 43: [/input, 3736] 
split level 44: [/input-8, 1374] 
split level 45: [/input, 3431] 
split level 46: [/input, 2683] 
split level 47: [/input-8, 117] 
split level 48: [/input, 1370] 
split level 49: [/input-8, 1306] 
split level 50: [/input-8, 1305] 
split level 51: [/input, 3433] 
split level 52: [/input, 2392] 
split level 53: [/input, 3417] 
split level 54: [/input, 3753] 
split level 55: [/input-8, 1429] 
split level 56: [/input, 2950] 
split level 57: [/input-8, 574] 
split level 58: [/input, 2409] 
split level 59: [/input-8, 2020] 
split level 60: [/input, 2987] 
split level 61: [/input, 3415] 
split level 62: [/input-8, 1842] 
split level 63: [/input, 676] 
split level 64: [/input-8, 1523] 
split level 65: [/input-8, 1364] 
split level 66: [/input-8, 1249] 
split level 67: [/input, 3174] 
split level 68: [/input, 388] 
split level 69: [/input, 1369] 
split level 70: [/input, 3448] 
split level 71: [/input, 3928] 
split level 72: [/input, 2391] 
split level 73: [/input, 3735] 
split level 74: [/input, 3160] 
split level 75: [/input, 2393] 
split level 76: [/input-8, 646] 
split level 77: [/input, 3429] 
split level 78: [/input, 1400] 
split level 79: [/input-8, 1122] 
split level 80: [/input, 3175] 
split level 81: [/input, 375] 
split level 82: [/input, 3942] 
split level 83: [/input-8, 1449] 
split level 84: [/input-8, 1803] 
split level 85: [/input, 3927] 
split level 86: [/input, 2375] 
split level 87: [/input, 3550] 
split level 88: [/input, 3975] 
split level 89: [/input, 3144] 
split level 90: [/input-8, 1010] 
split level 91: [/input-8, 1908] 
split level 92: [/input, 387] 
split level 93: [/input-8, 1526] 
split level 94: [/input, 371] 
split level 95: [/input, 3413] 
split level 96: [/input, 3401] 
split level 97: [/input, 2394] 
split level 98: [/input, 1502] 
split level 99: [/input-8, 1441] 
split level 100: [/input, 2981] 
split level 101: [/input, 3739] 
split level 102: [/input, 1386] 
split level 103: [/input, 3738] 
split level 104: [/input, 1335] 
split level 105: [/input, 3382] 
split level 106: [/input, 342] 
split level 107: [/input, 674] 
split level 108: [/input, 2374] 
split level 109: [/input, 2395] 
split level 110: [/input, 3419] 
split level 111: [/input-8, 1069] 
split level 112: [/input, 3944] 
split level 113: [/input-8, 1319] 
split level 114: [/input-8, 927] 
split level 115: [/input, 1402] 
split level 116: [/input, 1385] 
split level 117: [/input, 2407] 
split level 118: [/input, 3383] 
split level 119: [/input, 1356] 
split level 120: [/input, 3926] 
split level 121: [/input, 3925] 
split level 122: [/input-8, 681] 
split level 123: [/input, 344] 
split level 124: [/input, 3397] 
split level 125: [/input, 3546] 
split level 126: [/input-8, 1436] 
split level 127: [/input, 1893] 
split level 128: [/input, 2747] 
split level 129: [/input, 3754] 
split level 130: [/input, 2376] 
split level 131: [/input-8, 464] 
split level 132: [/input, 3381] 
split level 133: [/input, 2652] 
split level 134: [/input-8, 1780] 
split level 135: [/input-8, 1886] 
split level 136: [/input, 1351] 
split level 137: [/input, 3943] 
split level 138: [/input, 3143] 
split level 139: [/input, 3404] 
split level 140: [/input, 341] 
split level 141: [/input, 1353] 
split level 142: [/input-8, 1109] 
split level 143: [/input-8, 1001] 
split level 144: [/input, 1454] 
split level 145: [/input, 2379] 
split level 146: [/input-8, 111] 
split level 147: [/input, 328] 
split level 148: [/input, 3384] 
split level 149: [/input, 1605] 
split level 150: [/input-8, 1366] 
split level 151: [/input, 4022] 
split level 152: [/input, 2723] 
split level 153: [/input-8, 114] 
split level 154: [/input-8, 1371] 
split level 155: [/input, 1365] 
split level 156: [/input, 1336] 
split level 157: [/input, 1349] 
split level 158: [/input, 3569] 
split level 159: [/input-8, 1778] 
split level 160: [/input, 2872] 
split level 161: [/input, 3403] 
split level 162: [/input, 2373] 
split level 163: [/input, 3948] 
split level 164: [/input, 3718] 
split level 165: [/input, 662] 
split level 166: [/input, 2871] 
split level 167: [/input, 3412] 
split level 168: [/input-8, 1758] 
split level 169: [/input, 3929] 
split level 170: [/input-8, 466] 
split level 171: [/input, 330] 
split level 172: [/input, 1633] 
split level 173: [/input, 1415] 
split level 174: [/input, 1649] 
split level 175: [/input, 2189] 
split level 176: [/input, 2636] 
split level 177: [/input, 1665] 
split level 178: [/input, 340] 
split level 179: [/input, 2762] 
split level 180: [/input, 2685] 
split level 181: [/input, 3723] 
split level 182: [/input, 3570] 
split level 183: [/input, 1606] 
split level 184: [/input, 1681] 
split level 185: [/input-8, 1903] 
split level 186: [/input, 2123] 
split level 187: [/input, 385] 
split level 188: [/input, 3530] 
split level 189: [/input, 1334] 
split level 190: [/input, 3428] 
split level 191: [/input, 1595] 
split level 192: [/input, 1891] 
split level 193: [/input, 1984] 
split level 194: [/input, 1487] 
split level 195: [/input, 696] 
split level 196: [/input, 3385] 
split level 197: [/input-8, 645] 
split level 198: [/input, 2633] 
split level 199: [/input, 1374] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0631226897239685
10 lb beta sum: 0.0, worst -0.06312549114227295
Time: prepare 0.0115    bound 0.0956    transfer 0.0022    finalize 0.0026    func 0.1146    
Accumulated time: func 0.2011    prepare 0.0216    bound 0.1816    transfer 0.0023    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.25270563) min lb tensor(-0.06311446)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01096200942993164 
BICCOS Cumulative time: 0.01096200942993164
Preprocessing time: 0.010167598724365234 Inference time: 0.00038695335388183594 Add cuts time: 0.0002181529998779297 Cut analysis time: 0.00018930435180664062
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5080    set_bounds 0.0087    solve 0.1147    add 0.0100    
Accumulated time: pickout 0.0003    decision 0.5080    set_bounds 0.0087    solve 0.1147    add 0.0100    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 21] 
split level 1: [/input-12, 78] 
split level 2: [/input-8, 1331] 
split level 3: [/input-12, 74] 
split level 4: [/input-12, 99] 
split level 5: [/input-8, 1330] 
split level 6: [/input-8, 1396] 
split level 7: [/input-8, 564] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.23123878240585327

all verified at 0th iter
Time: prepare 0.0050    bound 0.0040    transfer 0.0005    finalize 0.0013    func 0.0125    
Accumulated time: func 0.2136    prepare 0.0271    bound 0.1856    transfer 0.0028    finalize 0.0040    
all_split False
======================Cut inference begins======================
max lb tensor(0.44365945) min lb tensor(0.23123878)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.0069386959075927734 
BICCOS Cumulative time: 0.017900705337524414
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0008    decision 0.0214    set_bounds 0.0201    solve 0.0125    add 0.0002    
Accumulated time: pickout 0.0011    decision 0.5294    set_bounds 0.0288    solve 0.1272    add 0.0102    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.8238725662231445


Properties batch 8, size 1
Remaining timeout: 196.59990525245667
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.4005 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 173, vnnlib ID: 173 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.96530533, -6.64648819, -4.20401192, -3.31281948, -3.79201317,
         -4.34627962, -3.10760784, -5.26119852, -7.51378918, -6.06500340]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [631]; unstable size 631; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 231, 1, 631] with unstable size 230 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 631] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 631] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [230]; unstable size 230; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 230] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 230] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.21187782,  1.27583194, -0.23146820, -0.57322240,  0.65389627,
         -1.39956260,  0.85230494,  2.21380806,  0.78133011]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.96530533, -6.64648819, -4.20401192, -3.31281948, -3.79201317,
         -4.34627962, -3.10760784, -5.26119852, -7.51378918, -6.06500340]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.96530533, -6.64648819, -4.20401287, -3.31281900, -3.79201317,
          -4.34627962, -3.10760832, -5.26119804, -7.51378918, -6.06500387],
         [-4.96530533, -6.64648819, -4.20401287, -3.31281900, -3.79201317,
          -4.34627962, -3.10760832, -5.26119804, -7.51378918, -6.06500387]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.89119387,  0.47919416, -0.20521069]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0788 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 174, vnnlib ID: 174 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.29587555, -13.48483086,  -6.09756279,  -7.41362858,  -5.89941597,
          -7.54863977,  -8.10572243,  -7.43977880, -10.08916378, -11.89095020]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [646]; unstable size 646; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 267, 1, 646] with unstable size 266 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 646] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 646] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [266]; unstable size 266; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 266] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 266] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.30793691,  4.85469532, -0.91200411,  0.07975274,  0.11433178,
          0.44498527,  0.30451035,  1.77916265,  3.32840061]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.29587555, -13.48483086,  -6.09756279,  -7.41362858,  -5.89941597,
          -7.54863977,  -8.10572243,  -7.43977880, -10.08916378, -11.89095020]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.93743134, -13.31060886,  -5.83817673,  -7.27862358,  -6.16091633,
           -7.49989176,  -7.92654562,  -7.81988096,  -9.65338612, -11.76567936]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.32273960]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0884 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 175, vnnlib ID: 175 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.83441734, -11.65409756, -13.59377003, -13.34711456, -13.02464199,
         -13.48545742, -13.37795448, -12.43483543, -12.00513840,  -9.86730289]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [638]; unstable size 638; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 292, 1, 638] with unstable size 291 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 638] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 638] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [291]; unstable size 291; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 291] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 291] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.04846811,  1.83894682,  1.50338125,  1.00280142,  1.39925551,
          1.18970394,  0.10379374,  0.61262071, -1.38501215]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.83441734, -11.65409756, -13.59377003, -13.34711456, -13.02464199,
         -13.48545742, -13.37795448, -12.43483543, -12.00513840,  -9.86730289]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.18911934, -11.47594929, -14.00399876, -13.58273888, -13.39752102,
          -13.68156528, -13.77247524, -12.52532673, -12.20017910,  -9.48548031]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.70363903]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0054 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0760 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 176, vnnlib ID: 176 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.06950283, -10.63156986,  -6.67671871,  -6.37868023,  -6.73359871,
          -6.50309849,  -7.44396973,  -8.55093956,  -8.65787315, -10.48859119]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [583]; unstable size 583; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 583] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 583] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 583] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 186] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.66228336,  2.91002989, -0.61161304, -0.37437868, -0.12838528,
          0.54327869,  1.21973610,  1.01675749,  2.96338701]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.06950283, -10.63156986,  -6.67671871,  -6.37868023,  -6.73359871,
          -6.50309849,  -7.44396973,  -8.55093956,  -8.65787315, -10.48859119]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.35448074, -11.02279854,  -6.83222103,  -6.96178865,  -7.00913334,
           -7.09443521,  -7.94125366,  -8.94181538,  -9.05925179, -10.96881390],
         [ -8.35448074, -11.02279854,  -6.83222103,  -6.96178865,  -7.00913334,
           -7.09443521,  -7.94125366,  -8.94181538,  -9.05925179, -10.96881390]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12956762,  0.04734468,  0.13264656]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0057 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0763 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 177, vnnlib ID: 177 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.68456459, -32.53074646, -22.78745079, -27.68545341, -28.40427208,
         -27.83055687, -30.00589561, -28.70033264, -29.08596420, -31.81694031]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [868]; unstable size 868; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 118, 1, 868] with unstable size 117 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 868] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 868] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [117]; unstable size 117; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 117] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 117] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.35312653, 8.74417496, 4.20461941, 4.84282970, 4.24144936, 6.39423656,
         5.11292028, 5.55689526, 8.21585178]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0662 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 178, vnnlib ID: 178 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.60622311, -13.14030361,  -7.17618370,  -8.58381081,  -7.30063725,
          -9.39536190, -10.97736740,  -8.69489574, -13.14762592, -13.82670879]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [636]; unstable size 636; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 636] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 636] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 636] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 148] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.19068098, 0.71572351, 1.81306088, 0.68747497, 2.54502177, 4.18923759,
         1.59729850, 6.44614601, 7.10734844]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0707 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 179, vnnlib ID: 179 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -2.84328127,  -9.61974049,  -5.05914211,  -8.02449036,  -6.49527788,
          -8.10750866,  -9.04593754,  -9.49392796,  -6.18774319, -10.90580273]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [499]; unstable size 499; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 153, 1, 499] with unstable size 152 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 499] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 499] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [152]; unstable size 152; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 152] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 152] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.54959440, 1.51223123, 4.22370243, 2.84299326, 4.27301931, 5.08756065,
         5.54216480, 2.37470150, 6.85313034]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0703 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 180, vnnlib ID: 180 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.90164661, -15.08635235,  -9.72878838,  -9.48129559,  -7.66526318,
          -8.64265442, -10.58757114,  -3.94943619, -14.45550442, -12.59689999]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [635]; unstable size 635; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 635] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 635] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 635] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 239] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.91279602, 8.85579205, 4.06592464, 3.92259717, 2.47752619, 3.07655287,
         4.65876627, 8.33458710, 6.58941221]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0882 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 181, vnnlib ID: 181 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.14476776, -8.54299259, -5.62799358, -7.28408384, -5.42767191,
         -7.26166582, -5.09700298, -8.12854862, -8.81086445, -8.40001583]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [561]; unstable size 561; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 561] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 561] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 561] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 199] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.70906830,  1.71759129, -0.59509254,  1.34410012, -0.63401151,
          1.15857625,  2.08130527,  2.03014326,  1.72439241]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.14476776, -8.54299259, -5.62799358, -7.28408384, -5.42767191,
         -7.26166582, -5.09700298, -8.12854862, -8.81086445, -8.40001583]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.20649433, -8.83073616, -5.63355064, -7.40713882, -5.33580017,
          -7.33170795, -5.46423101, -8.16074944, -8.97980404, -8.67313671],
         [-8.20649433, -8.83073616, -5.63355064, -7.40713882, -5.33580017,
          -7.33170795, -5.46423101, -8.16074944, -8.97980404, -8.67313671]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.16931963, -0.12843084]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0056 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0761 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 182, vnnlib ID: 182 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.62970924, -15.32867241, -14.02665234, -15.90782928, -15.88710308,
         -16.84171295, -16.61499405, -15.84648132, -15.30559063, -15.92606258]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [630]; unstable size 630; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 112, 1, 630] with unstable size 111 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 630] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 630] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [111]; unstable size 111; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 111] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 111] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.55479455, 0.65966964, 2.49934220, 2.45695734, 3.24221277, 3.17709994,
         2.06576133, 1.70381451, 2.33342171]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0662 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 183, vnnlib ID: 183 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.31477261, -14.64444065,  -8.04242039,  -9.54465961,  -7.47801971,
         -10.22035503,  -9.25665569, -10.87084675, -13.17573833, -14.46251965]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [785]; unstable size 785; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 441, 1, 785] with unstable size 440 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 785] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 785] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [440]; unstable size 440; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 440] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 440] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.74053061,  4.37037277, -0.76029527,  0.68074846,  0.98781753,
         -0.06960177,  1.50688016,  3.12951899,  4.10273933]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.31477261, -14.64444065,  -8.04242039,  -9.54465961,  -7.47801971,
         -10.22035503,  -9.25665569, -10.87084675, -13.17573833, -14.46251965]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.70it/s]100%|██████████| 1/1 [00:00<00:00,  8.69it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.97328854, -15.64343452,  -8.67847157, -10.54068565,  -8.60878944,
          -11.21894646, -10.33001900, -11.86674881, -13.97623920, -15.42976952],
         [-11.97328854, -15.64343452,  -8.67847157, -10.54068565,  -8.60878944,
          -11.21894646, -10.33001900, -11.86674881, -13.97623920, -15.42976952]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.06968212, 1.72122955]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1177 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 17.0271053314209
alpha/beta optimization time: 1.1908903121948242
initial alpha-crown bounds: tensor([[ 1.93041921,  4.51296139, -0.64870226,  0.80698454,  1.16863036,
          0.07121563,  1.61320806,  3.32261610,  4.24977160]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.6487022638320923
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6180419921875
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.61800694465637
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.61798453330994
Verifying property 2 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.64870226]], device='cuda:0') need to verify.
Model prediction is: tensor([-11.31477261, -14.64444065,  -8.04242039,  -9.54465961,  -7.47801971,
        -10.22035503,  -9.25665569, -10.87084675, -13.17573833, -14.46251965],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.64870226]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 785
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 435
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1246
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.965896606445312e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6486997604370117
10 lb beta sum: 0.0, worst -0.6487017273902893
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0515    transfer 0.0001    finalize 0.0001    func 0.0520    
Accumulated time: func 0.0520    prepare 0.0002    bound 0.0515    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 1] 
split level 2: [/input-12, 11] 
split level 3: [/input-12, 13] 
split level 4: [/input-12, 44] 
split level 5: [/input-12, 51] 
split level 6: [/input-12, 72] 
split level 7: [/input-12, 26] 
split level 8: [/input-12, 82] 
split level 9: [/input-12, 68] 
split level 10: [/input-12, 93] 
split level 11: [/input-8, 1372] 
split level 12: [/input-8, 1058] 
split level 13: [/input-8, 1373] 
split level 14: [/input-8, 1564] 
split level 15: [/input-12, 9] 
split level 16: [/input-8, 1911] 
split level 17: [/input-12, 21] 
split level 18: [/input-8, 1356] 
split level 19: [/input-8, 1869] 
split level 20: [/input-8, 1057] 
split level 21: [/input-8, 1870] 
split level 22: [/input-8, 531] 
split level 23: [/input-8, 1878] 
split level 24: [/input-12, 64] 
split level 25: [/input-8, 1555] 
split level 26: [/input-8, 1299] 
split level 27: [/input-8, 1371] 
split level 28: [/input-8, 1362] 
split level 29: [/input-8, 1073] 
split level 30: [/input-8, 1066] 
split level 31: [/input-8, 532] 
split level 32: [/input-8, 1884] 
split level 33: [/input-8, 571] 
split level 34: [/input-8, 1363] 
split level 35: [/input-8, 1065] 
split level 36: [/input-8, 533] 
split level 37: [/input-8, 1563] 
split level 38: [/input-8, 523] 
split level 39: [/input-8, 1565] 
split level 40: [/input-8, 530] 
split level 41: [/input-8, 1894] 
split level 42: [/input-8, 1307] 
split level 43: [/input-8, 1074] 
split level 44: [/input-8, 682] 
split level 45: [/input-8, 1902] 
split level 46: [/input-8, 1883] 
split level 47: [/input-8, 1886] 
split level 48: [/input-8, 677] 
split level 49: [/input-8, 1354] 
split level 50: [/input-8, 1355] 
split level 51: [/input-8, 1549] 
split level 52: [/input-8, 2020] 
split level 53: [/input-8, 1381] 
split level 54: [/input-8, 666] 
split level 55: [/input-8, 1548] 
split level 56: [/input-8, 686] 
split level 57: [/input-8, 1297] 
split level 58: [/input-8, 642] 
split level 59: [/input-8, 460] 
split level 60: [/input-8, 1760] 
split level 61: [/input-8, 668] 
split level 62: [/input-8, 846] 
split level 63: [/input-8, 573] 
split level 64: [/input-8, 1361] 
split level 65: [/input-8, 1021] 
split level 66: [/input-8, 891] 
split level 67: [/input-8, 1083] 
split level 68: [/input-8, 681] 
split level 69: [/input-8, 1301] 
split level 70: [/input-8, 1915] 
split level 71: [/input-8, 1062] 
split level 72: [/input-8, 1077] 
split level 73: [/input-8, 684] 
split level 74: [/input-8, 1881] 
split level 75: [/input-8, 700] 
split level 76: [/input-8, 1877] 
split level 77: [/input-8, 1506] 
split level 78: [/input-8, 1369] 
split level 79: [/input-8, 1558] 
split level 80: [/input, 4006] 
split level 81: [/input-12, 28] 
split level 82: [/input-8, 1289] 
split level 83: [/input-8, 1143] 
split level 84: [/input-8, 546] 
split level 85: [/input-8, 860] 
split level 86: [/input-8, 1509] 
split level 87: [/input, 183] 
split level 88: [/input-8, 665] 
split level 89: [/input-8, 1505] 
split level 90: [/input-8, 1347] 
split level 91: [/input-8, 854] 
split level 92: [/input, 4003] 
split level 93: [/input-8, 1580] 
split level 94: [/input, 3273] 
split level 95: [/input, 390] 
split level 96: [/input-8, 1596] 
split level 97: [/input-8, 491] 
split level 98: [/input, 3988] 
split level 99: [/input-8, 990] 
split level 100: [/input-8, 1310] 
split level 101: [/input-8, 1876] 
split level 102: [/input-8, 83] 
split level 103: [/input-8, 673] 
split level 104: [/input-8, 1597] 
split level 105: [/input-8, 1339] 
split level 106: [/input-8, 2021] 
split level 107: [/input-8, 1836] 
split level 108: [/input-8, 884] 
split level 109: [/input-8, 517] 
split level 110: [/input, 4043] 
split level 111: [/input-8, 545] 
split level 112: [/input-8, 570] 
split level 113: [/input, 426] 
split level 114: [/input, 1188] 
split level 115: [/input, 2757] 
split level 116: [/input, 199] 
split level 117: [/input, 3236] 
split level 118: [/input-8, 1752] 
split level 119: [/input-8, 987] 
split level 120: [/input-12, 53] 
split level 121: [/input-8, 1547] 
split level 122: [/input, 4053] 
split level 123: [/input-8, 1437] 
split level 124: [/input-8, 515] 
split level 125: [/input-8, 1940] 
split level 126: [/input, 3223] 
split level 127: [/input-8, 947] 
split level 128: [/input-8, 1405] 
split level 129: [/input, 4044] 
split level 130: [/input-8, 917] 
split level 131: [/input-8, 1540] 
split level 132: [/input, 2617] 
split level 133: [/input-8, 1819] 
split level 134: [/input-8, 1402] 
split level 135: [/input-8, 1546] 
split level 136: [/input, 2517] 
split level 137: [/input-8, 1545] 
split level 138: [/input-8, 694] 
split level 139: [/input, 1386] 
split level 140: [/input-8, 988] 
split level 141: [/input, 387] 
split level 142: [/input, 3468] 
split level 143: [/input, 583] 
split level 144: [/input, 4055] 
split level 145: [/input, 3304] 
split level 146: [/input, 4072] 
split level 147: [/input-8, 514] 
split level 148: [/input, 456] 
split level 149: [/input, 2533] 
split level 150: [/input-8, 276] 
split level 151: [/input-8, 883] 
split level 152: [/input, 3205] 
split level 153: [/input-8, 1281] 
split level 154: [/input, 3243] 
split level 155: [/input-8, 1318] 
split level 156: [/input-8, 952] 
split level 157: [/input, 3230] 
split level 158: [/input-8, 1873] 
split level 159: [/input, 4054] 
split level 160: [/input, 3290] 
split level 161: [/input, 2461] 
split level 162: [/input-8, 1541] 
split level 163: [/input, 3241] 
split level 164: [/input, 3228] 
split level 165: [/input-8, 2028] 
split level 166: [/input, 3255] 
split level 167: [/input-8, 1775] 
split level 168: [/input-8, 998] 
split level 169: [/input-8, 1017] 
split level 170: [/input-8, 1539] 
split level 171: [/input-8, 569] 
split level 172: [/input, 3218] 
split level 173: [/input, 2493] 
split level 174: [/input, 2467] 
split level 175: [/input, 4002] 
split level 176: [/input, 2867] 
split level 177: [/input-8, 1559] 
split level 178: [/input, 4035] 
split level 179: [/input-8, 552] 
split level 180: [/input, 2348] 
split level 181: [/input-8, 98] 
split level 182: [/input, 3286] 
split level 183: [/input-8, 1524] 
split level 184: [/input-8, 2013] 
split level 185: [/input, 2883] 
split level 186: [/input-8, 467] 
split level 187: [/input-8, 985] 
split level 188: [/input, 2478] 
split level 189: [/input, 3246] 
split level 190: [/input-8, 1475] 
split level 191: [/input-8, 836] 
split level 192: [/input-8, 1439] 
split level 193: [/input-8, 461] 
split level 194: [/input, 4029] 
split level 195: [/input, 2734] 
split level 196: [/input-8, 558] 
split level 197: [/input, 2885] 
split level 198: [/input, 649] 
split level 199: [/input, 2543] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6486305594444275
10 lb beta sum: 0.0, worst -0.6486300826072693
Time: prepare 0.0132    bound 0.0952    transfer 0.0016    finalize 0.0027    func 0.1155    
Accumulated time: func 0.1674    prepare 0.0232    bound 0.1468    transfer 0.0017    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01551694) min lb tensor(-0.64861727)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.009872198104858398 
BICCOS Cumulative time: 0.009872198104858398
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.63266 (1), -0.63181 (1), -0.63171 (1), -0.63153 (1), -0.63097 (1), -0.63057 (1), -0.62999 (1), -0.62990 (1), -0.62917 (1), -0.62872 (1), -0.62614 (1), -0.62477 (1), -0.62431 (1), -0.62339 (1), -0.62303 (1), -0.62265 (1), -0.62257 (1), -0.62230 (1), -0.62227 (1), -0.62135 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.4987    set_bounds 0.0086    solve 0.1155    add 0.2067    
Accumulated time: pickout 0.0004    decision 0.4987    set_bounds 0.0086    solve 0.1155    add 0.2067    
Current (lb-rhs): -0.6326591968536377
50 domains visited
Cumulative time: 0.9184017181396484

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 26] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 72] [/input-12, 26] 
split level 2: [/input-12, 72] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 72] 
split level 3: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6041437387466431
10 lb beta sum: 0.0, worst -0.6032804250717163
Time: prepare 0.0122    bound 0.0938    transfer 0.0008    finalize 0.0021    func 0.1115    
Accumulated time: func 0.2790    prepare 0.0356    bound 0.2406    transfer 0.0026    finalize 0.0049    
all_split False
======================Cut inference begins======================
max lb tensor(0.36800909) min lb tensor(-0.60306120)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.015657663345336914 
BICCOS Cumulative time: 0.025529861450195312
Preprocessing time: 0.011909008026123047 Inference time: 0.002293825149536133 Add cuts time: 0.0011627674102783203 Cut analysis time: 0.00029206275939941406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.45763 (2), -0.45667 (2), -0.45442 (2), -0.45375 (2), -0.45297 (2), -0.45240 (2), -0.45240 (2), -0.45211 (2), -0.44602 (2), -0.44595 (2), -0.43917 (2), -0.43637 (2), -0.43430 (2), -0.43303 (2), -0.43122 (2), -0.42882 (2), -0.42760 (2), -0.42280 (2), -0.42162 (2), -0.41747 (2), 
Length of domains: 50
Time: pickout 0.0151    decision 0.0199    set_bounds 0.0130    solve 0.1116    add 0.2238    
Accumulated time: pickout 0.0155    decision 0.5186    set_bounds 0.0216    solve 0.2271    add 0.4306    
Current (lb-rhs): -0.457627534866333
100 domains visited
Cumulative time: 1.3244521617889404

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 26] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 26] [/input-12, 72] [/input-12, 1] [/input-12, 26] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 26] [/input-12, 72] [/input-12, 26] [/input-12, 26] [/input-12, 72] [/input-12, 26] [/input-12, 72] 
split level 3: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 72] [/input-12, 82] [/input-12, 82] [/input-12, 72] [/input-12, 82] [/input-12, 72] [/input-12, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4300522804260254
10 lb beta sum: 0.6145477890968323, worst -0.4293510913848877
Time: prepare 0.0064    bound 0.1347    transfer 0.0016    finalize 0.0036    func 0.1491    
Accumulated time: func 0.4280    prepare 0.0423    bound 0.3753    transfer 0.0042    finalize 0.0085    
all_split False
======================Cut inference begins======================
max lb tensor(0.29501915) min lb tensor(-0.42451477)
Number of Verified Splits: 67 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.0179443359375 
BICCOS Cumulative time: 0.04347419738769531
Preprocessing time: 0.012592554092407227 Inference time: 0.0032961368560791016 Add cuts time: 0.0017428398132324219 Cut analysis time: 0.00031280517578125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17833 (3), -0.17712 (3), -0.17582 (3), -0.17505 (3), -0.17439 (3), -0.16764 (3), -0.16761 (3), -0.16675 (3), -0.16650 (3), -0.16602 (3), -0.15966 (3), -0.15853 (3), -0.15840 (3), -0.15837 (3), -0.15830 (3), -0.15744 (3), -0.13857 (3), -0.13778 (3), -0.13701 (3), -0.13665 (3), 
Length of domains: 50
Time: pickout 0.0153    decision 0.0217    set_bounds 0.0185    solve 0.1493    add 0.2307    
Accumulated time: pickout 0.0308    decision 0.5402    set_bounds 0.0401    solve 0.3764    add 0.6612    
Current (lb-rhs): -0.17833101749420166
150 domains visited
Cumulative time: 1.7851240634918213

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] 
split level 2: [/input-12, 26] [/input-12, 72] [/input-12, 26] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 3: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19959402084350586
10 lb beta sum: 0.7670286297798157, worst -0.17973536252975464
Time: prepare 0.0058    bound 0.1341    transfer 0.0025    finalize 0.0026    func 0.1478    
Accumulated time: func 0.5758    prepare 0.0483    bound 0.5094    transfer 0.0067    finalize 0.0111    
all_split False
======================Cut inference begins======================
max lb tensor(0.29197931) min lb tensor(-0.17422408)
Number of Verified Splits: 194 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 5
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.028068065643310547 
BICCOS Cumulative time: 0.07154226303100586
Preprocessing time: 0.012488842010498047 Inference time: 0.011755228042602539 Add cuts time: 0.003346681594848633 Cut analysis time: 0.0004773139953613281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10329 (4), -0.10092 (4), -0.09934 (4), -0.09898 (4), -0.09885 (4), -0.09863 (4), -0.09858 (4), -0.09853 (4), -0.09691 (4), -0.09688 (4), -0.09657 (4), -0.09622 (4), -0.09587 (4), -0.09449 (4), -0.09447 (4), -0.09407 (4), -0.09326 (4), -0.09163 (4), -0.09159 (4), -0.09117 (4), 
Length of domains: 50
Time: pickout 0.0149    decision 0.0209    set_bounds 0.0172    solve 0.1480    add 0.4894    
Accumulated time: pickout 0.0457    decision 0.5612    set_bounds 0.0574    solve 0.5244    add 1.1506    
Current (lb-rhs): -0.10328614711761475
200 domains visited
Cumulative time: 2.5105156898498535

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 72] [/input-12, 72] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 51] [/input-12, 51] 
split level 2: [/input-12, 82] [/input-12, 82] [/input-12, 72] [/input-12, 72] [/input-12, 82] [/input-12, 72] [/input-12, 72] [/input-12, 82] [/input-12, 26] [/input-12, 26] 
split level 3: [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12425732612609863
10 lb beta sum: 0.8836172223091125, worst -0.10729330778121948
Time: prepare 0.0060    bound 0.1333    transfer 0.0016    finalize 0.0034    func 0.1471    
Accumulated time: func 0.7230    prepare 0.0547    bound 0.6427    transfer 0.0083    finalize 0.0145    
all_split False
======================Cut inference begins======================
max lb tensor(0.31959581) min lb tensor(-0.10139924)
Number of Verified Splits: 178 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 5
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.026831388473510742 
BICCOS Cumulative time: 0.0983736515045166
Preprocessing time: 0.012319326400756836 Inference time: 0.011141300201416016 Add cuts time: 0.0027954578399658203 Cut analysis time: 0.0005753040313720703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02888 (5), -0.02862 (5), -0.02831 (5), -0.02819 (5), -0.02778 (5), -0.02774 (5), -0.02760 (5), -0.02751 (5), -0.02725 (5), -0.02693 (5), -0.02669 (5), -0.02584 (5), -0.02566 (5), -0.02486 (5), -0.02465 (5), -0.02439 (5), -0.02425 (5), -0.02348 (5), -0.02277 (5), -0.02169 (5), 
Length of domains: 50
Time: pickout 0.0152    decision 0.0228    set_bounds 0.0179    solve 0.1472    add 0.2495    
Accumulated time: pickout 0.0609    decision 0.5840    set_bounds 0.0753    solve 0.6716    add 1.4001    
Current (lb-rhs): -0.028878211975097656
250 domains visited
Cumulative time: 2.9973278045654297


Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 1] 
split level 2: [/input-12, 44] 
split level 3: [/input-12, 51] 
split level 4: [/input-12, 72] 
split level 5: [/input-12, 26] 
split level 6: [/input-12, 82] 
split level 7: [/input-12, 93] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2959693670272827
10 lb beta sum: 0.428672194480896, worst -0.2877488136291504
Time: prepare 0.0038    bound 0.1294    transfer 0.0010    finalize 0.0018    func 0.1379    
Accumulated time: func 0.8608    prepare 0.0589    bound 0.7721    transfer 0.0094    finalize 0.0162    
all_split False
======================Cut inference begins======================
max lb tensor(0.27713129) min lb tensor(-0.28714335)
Number of Verified Splits: 157 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5081221461296082
10 lb beta sum: 0.5856852531433105, worst -0.4725567102432251
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 5
#cuts 4-6: 10
#cuts 7-9: 7
#cuts >= 20: 0
BICCOS time: 0.2288494110107422 
BICCOS Cumulative time: 0.3272230625152588
Preprocessing time: 0.007239818572998047 Inference time: 0.21743535995483398 Add cuts time: 0.0030975341796875 Cut analysis time: 0.0010766983032226562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.28714 (8), -0.28661 (8), -0.28129 (8), -0.28082 (8), -0.27981 (8), -0.27956 (8), -0.26844 (8), -0.26707 (8), -0.25387 (8), -0.24918 (8), -0.24916 (8), -0.24474 (8), -0.24421 (8), -0.23989 (8), -0.23174 (8), -0.23029 (8), -0.22614 (8), -0.22519 (8), -0.22347 (8), -0.21774 (8), 
Length of domains: 99
Time: pickout 0.0004    decision 0.0232    set_bounds 0.0174    solve 0.1380    add 0.0770    
Accumulated time: pickout 0.0613    decision 0.6072    set_bounds 0.0927    solve 0.8096    add 1.4772    
Current (lb-rhs): -0.287143349647522
349 domains visited
Cumulative time: 3.512852907180786

BaB round 2
batch: 99
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1057] [/input-8, 1058] [/input-8, 1058] [/input-8, 1058] [/input-8, 1057] [/input-8, 1058] [/input-8, 1057] [/input-12, 9] [/input-12, 9] [/input-12, 9] 
split level 1: [/input-12, 9] [/input-8, 1057] [/input-12, 9] [/input-12, 9] [/input-8, 1066] [/input-12, 9] [/input-12, 9] [/input-8, 1057] [/input-8, 1057] [/input-8, 1057] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.28096121549606323
10 lb beta sum: 0.7832739949226379, worst -0.2735995054244995
Time: prepare 0.0084    bound 0.1372    transfer 0.0027    finalize 0.0039    func 0.1550    
Accumulated time: func 1.0159    prepare 0.0675    bound 0.9093    transfer 0.0121    finalize 0.0202    
all_split False
======================Cut inference begins======================
max lb tensor(0.54070228) min lb tensor(-0.27325392)
Number of Verified Splits: 82 of 396
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3873917758464813
10 lb beta sum: 1.0386415719985962, worst -0.20006853342056274
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 5
#cuts 4-6: 12
#cuts 7-9: 20
#cuts >= 20: 0
BICCOS time: 0.20946288108825684 
BICCOS Cumulative time: 0.5366859436035156
Preprocessing time: 0.012241840362548828 Inference time: 0.1886138916015625 Add cuts time: 0.006607532501220703 Cut analysis time: 0.0019996166229248047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27325 (10), -0.27255 (10), -0.26720 (10), -0.26681 (10), -0.26557 (10), -0.26546 (10), -0.25392 (10), -0.25339 (10), -0.23804 (10), -0.23401 (10), -0.23380 (10), -0.23282 (10), -0.23278 (10), -0.23277 (10), -0.23250 (10), -0.23206 (10), -0.23056 (10), -0.22918 (10), -0.22886 (10), -0.22753 (10), 
Length of domains: 314
Time: pickout 0.0137    decision 0.0187    set_bounds 0.0264    solve 0.1552    add 0.0771    
Accumulated time: pickout 0.0750    decision 0.6260    set_bounds 0.1191    solve 0.9648    add 1.5543    
Current (lb-rhs): -0.2732539176940918
663 domains visited
Cumulative time: 4.02191948890686

BaB round 3
batch: 314
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1058] [/input-12, 9] [/input-8, 1057] [/input-12, 68] [/input-8, 1058] [/input-8, 1057] [/input-8, 1555] [/input-8, 1299] [/input-12, 68] [/input-12, 68] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2750261425971985
10 lb beta sum: 0.7948193550109863, worst -0.27286863327026367
Time: prepare 0.0136    bound 0.1574    transfer 0.0039    finalize 0.0051    func 0.1842    
Accumulated time: func 1.2001    prepare 0.0813    bound 1.0667    transfer 0.0160    finalize 0.0252    
all_split False
======================Cut inference begins======================
max lb tensor(0.74297696) min lb tensor(-0.27262890)
Number of Verified Splits: 163 of 628
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 8
#cuts 4-6: 8
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.0396113395690918 
BICCOS Cumulative time: 0.5762972831726074
Preprocessing time: 0.019039154052734375 Inference time: 0.016551494598388672 Add cuts time: 0.003130197525024414 Cut analysis time: 0.0008904933929443359
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27263 (11), -0.27196 (11), -0.26643 (11), -0.26601 (11), -0.26511 (11), -0.25905 (11), -0.25333 (11), -0.25306 (11), -0.24803 (11), -0.23692 (11), -0.23272 (11), -0.23263 (11), -0.23170 (11), -0.23163 (11), -0.23142 (11), -0.23127 (11), -0.22828 (11), -0.22779 (11), -0.22567 (11), -0.22551 (11), 
Length of domains: 465
Time: pickout 0.0170    decision 0.0311    set_bounds 0.0291    solve 0.1844    add 0.1127    
Accumulated time: pickout 0.0919    decision 0.6571    set_bounds 0.1482    solve 1.1492    add 1.6669    
Current (lb-rhs): -0.27262890338897705
1128 domains visited
Cumulative time: 4.444899320602417

BaB round 4
batch: 465
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1555] [/input-8, 1299] [/input-8, 1066] [/input-12, 9] [/input-8, 1066] [/input-8, 1299] [/input-8, 1555] [/input-8, 1555] [/input-8, 1299] [/input-12, 68] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.267776757478714
10 lb beta sum: 0.7362366914749146, worst -0.2657204866409302
Time: prepare 0.0209    bound 0.1584    transfer 0.0037    finalize 0.0061    func 0.1962    
Accumulated time: func 1.3963    prepare 0.1024    bound 1.2251    transfer 0.0196    finalize 0.0313    
all_split False
======================Cut inference begins======================
max lb tensor(0.77960336) min lb tensor(-0.26553690)
Number of Verified Splits: 267 of 930
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 7
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.06145930290222168 
BICCOS Cumulative time: 0.6377565860748291
Preprocessing time: 0.029671430587768555 Inference time: 0.027774810791015625 Add cuts time: 0.0035810470581054688 Cut analysis time: 0.00043201446533203125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26554 (12), -0.26530 (12), -0.26101 (12), -0.25931 (12), -0.25901 (12), -0.25865 (12), -0.25610 (12), -0.25505 (12), -0.25022 (12), -0.24921 (12), -0.24882 (12), -0.24766 (12), -0.24659 (12), -0.23563 (12), -0.22897 (12), -0.22815 (12), -0.22721 (12), -0.22609 (12), -0.22471 (12), -0.22428 (12), 
Length of domains: 663
Time: pickout 0.0684    decision 0.0377    set_bounds 0.0436    solve 0.1966    add 0.0920    
Accumulated time: pickout 0.1603    decision 0.6948    set_bounds 0.1918    solve 1.3458    add 1.7590    
Current (lb-rhs): -0.265536904335022
1791 domains visited
Cumulative time: 4.956032752990723

BaB round 5
batch: 663
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1299] [/input-8, 666] [/input-8, 1555] [/input-12, 68] [/input-8, 1299] [/input-12, 68] [/input-8, 1548] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2618618309497833
10 lb beta sum: 0.7700197100639343, worst -0.25983917713165283
Time: prepare 0.0313    bound 0.1491    transfer 0.0079    finalize 0.0094    func 0.2095    
Accumulated time: func 1.6058    prepare 0.1339    bound 1.3742    transfer 0.0275    finalize 0.0407    
all_split False
======================Cut inference begins======================
max lb tensor(1.03597116) min lb tensor(-0.25974053)
Number of Verified Splits: 774 of 1326
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.1335296630859375 
BICCOS Cumulative time: 0.7712862491607666
Preprocessing time: 0.042559146881103516 Inference time: 0.08092093467712402 Add cuts time: 0.009355306625366211 Cut analysis time: 0.00069427490234375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25974 (13), -0.25869 (13), -0.25478 (13), -0.25453 (13), -0.25393 (13), -0.25246 (13), -0.25180 (13), -0.24951 (13), -0.24918 (13), -0.24795 (13), -0.24557 (13), -0.24455 (13), -0.24357 (13), -0.24338 (13), -0.24309 (13), -0.24188 (13), -0.24184 (13), -0.24069 (13), -0.23730 (13), -0.23695 (13), 
Length of domains: 552
Time: pickout 0.0277    decision 0.0505    set_bounds 0.3020    solve 0.2102    add 0.1073    
Accumulated time: pickout 0.1881    decision 0.7453    set_bounds 0.4938    solve 1.5560    add 1.8662    
Current (lb-rhs): -0.25974053144454956
2343 domains visited
Cumulative time: 5.800797462463379

BaB round 6
batch: 552
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1548] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.25536876916885376
10 lb beta sum: 2.2765414714813232, worst -0.23774981498718262
Time: prepare 0.0219    bound 0.1429    transfer 0.0044    finalize 0.0069    func 0.1833    
Accumulated time: func 1.7891    prepare 0.1562    bound 1.5171    transfer 0.0319    finalize 0.0475    
all_split False
======================Cut inference begins======================
max lb tensor(0.67358184) min lb tensor(-0.23763633)
Number of Verified Splits: 745 of 1104
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 20
#cuts >= 20: 0
BICCOS time: 0.12521839141845703 
BICCOS Cumulative time: 0.8965046405792236
Preprocessing time: 0.033536672592163086 Inference time: 0.08065938949584961 Add cuts time: 0.010518312454223633 Cut analysis time: 0.0005040168762207031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23764 (14), -0.23475 (14), -0.23097 (14), -0.22855 (14), -0.22650 (14), -0.22632 (14), -0.22204 (14), -0.22082 (14), -0.21966 (14), -0.21671 (14), -0.21262 (14), -0.21021 (14), -0.21019 (14), -0.20404 (14), -0.20228 (14), -0.20154 (14), -0.19886 (14), -0.19509 (14), -0.19479 (14), -0.19471 (14), 
Length of domains: 359
Time: pickout 0.0671    decision 0.0401    set_bounds 0.0485    solve 0.1837    add 0.0841    
Accumulated time: pickout 0.2552    decision 0.7854    set_bounds 0.5423    solve 1.7397    add 1.9504    
Current (lb-rhs): -0.23763632774353027
2702 domains visited
Cumulative time: 6.361409902572632

BaB round 7
batch: 359
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1363] [/input-8, 1299] [/input-8, 533] [/input-8, 1356] [/input-8, 1066] [/input-8, 1356] [/input-8, 1363] [/input-8, 1363] [/input-8, 1066] [/input-8, 1356] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2515801787376404
10 lb beta sum: 2.0554463863372803, worst -0.24620985984802246
Time: prepare 0.0141    bound 0.1368    transfer 0.0016    finalize 0.0032    func 0.1613    
Accumulated time: func 1.9504    prepare 0.1705    bound 1.6539    transfer 0.0336    finalize 0.0508    
all_split False
======================Cut inference begins======================
max lb tensor(0.05020738) min lb tensor(-0.23453206)
Number of Verified Splits: 36 of 718
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 20
#cuts >= 20: 0
BICCOS time: 0.0278317928314209 
BICCOS Cumulative time: 0.9243364334106445
Preprocessing time: 0.020859479904174805 Inference time: 0.004582881927490234 Add cuts time: 0.001928567886352539 Cut analysis time: 0.0004608631134033203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23453 (15), -0.23369 (15), -0.22660 (15), -0.22638 (15), -0.22459 (15), -0.22235 (15), -0.22203 (15), -0.22033 (15), -0.21841 (15), -0.21503 (15), -0.21348 (15), -0.21243 (15), -0.21241 (15), -0.21222 (15), -0.21075 (15), -0.20592 (15), -0.20464 (15), -0.20428 (15), -0.20404 (15), -0.20404 (15), 
Length of domains: 682
Time: pickout 0.0169    decision 0.0302    set_bounds 0.0305    solve 0.1615    add 0.1153    
Accumulated time: pickout 0.2721    decision 0.8157    set_bounds 0.5728    solve 1.9012    add 2.0657    
Current (lb-rhs): -0.23453205823898315
3384 domains visited
Cumulative time: 6.751651287078857

BaB round 8
batch: 682
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 531] [/input-8, 1356] [/input-8, 1363] [/input-8, 1299] [/input-8, 1363] [/input-8, 1299] [/input-8, 1066] [/input-8, 531] [/input-8, 533] [/input-8, 1363] 
cut re-enabled after branching node selection
0 lb beta sum: 2.400268077850342, worst -0.2287071943283081
10 lb beta sum: 2.40370512008667, worst -0.22865986824035645
Time: prepare 0.0597    bound 0.1514    transfer 0.0033    finalize 0.0067    func 0.2302    
Accumulated time: func 2.1807    prepare 0.2304    bound 1.8053    transfer 0.0369    finalize 0.0575    
all_split False
======================Cut inference begins======================
max lb tensor(0.13237834) min lb tensor(-0.22864068)
Number of Verified Splits: 50 of 1364
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 20
#cuts >= 20: 0
BICCOS time: 0.048935651779174805 
BICCOS Cumulative time: 0.9732720851898193
Preprocessing time: 0.04139375686645508 Inference time: 0.0058689117431640625 Add cuts time: 0.0011317729949951172 Cut analysis time: 0.0005412101745605469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22864 (16), -0.22808 (16), -0.22029 (16), -0.22024 (16), -0.21991 (16), -0.21954 (16), -0.21830 (16), -0.21769 (16), -0.21683 (16), -0.21364 (16), -0.21212 (16), -0.21118 (16), -0.21048 (16), -0.20931 (16), -0.20929 (16), -0.20905 (16), -0.20881 (16), -0.20843 (16), -0.20727 (16), -0.20589 (16), 
Length of domains: 1314
Time: pickout 0.0757    decision 0.0487    set_bounds 0.0593    solve 0.2306    add 0.0993    
Accumulated time: pickout 0.3477    decision 0.8643    set_bounds 0.6321    solve 2.1319    add 2.1650    
Current (lb-rhs): -0.22864067554473877
4698 domains visited
Cumulative time: 7.320224285125732

BaB round 9
batch: 1314
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1363] [/input-8, 1356] [/input-8, 1564] [/input-8, 533] [/input-8, 1555] [/input-8, 533] [/input-8, 1356] [/input-8, 532] [/input-8, 1356] [/input-8, 1363] 
cut re-enabled after branching node selection
0 lb beta sum: 2.3870584964752197, worst -0.2241114377975464
10 lb beta sum: 2.3929290771484375, worst -0.2240290641784668
Time: prepare 0.1138    bound 0.2089    transfer 0.0153    finalize 0.0123    func 0.3682    
Accumulated time: func 2.5489    prepare 0.3445    bound 2.0142    transfer 0.0522    finalize 0.0698    
all_split False
======================Cut inference begins======================
max lb tensor(0.16546059) min lb tensor(-0.22381657)
Number of Verified Splits: 29 of 2628
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 20
#cuts >= 20: 0
BICCOS time: 0.08717870712280273 
BICCOS Cumulative time: 1.060450792312622
Preprocessing time: 0.08103656768798828 Inference time: 0.004316568374633789 Add cuts time: 0.0012552738189697266 Cut analysis time: 0.0005702972412109375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22382 (17), -0.22242 (17), -0.21634 (17), -0.21606 (17), -0.21565 (17), -0.21399 (17), -0.21357 (17), -0.21327 (17), -0.21052 (17), -0.21040 (17), -0.20930 (17), -0.20928 (17), -0.20876 (17), -0.20868 (17), -0.20809 (17), -0.20785 (17), -0.20727 (17), -0.20618 (17), -0.20564 (17), -0.20501 (17), 
Length of domains: 2599
Time: pickout 0.0351    decision 0.2650    set_bounds 0.1119    solve 0.3689    add 0.1004    
Accumulated time: pickout 0.3829    decision 1.1293    set_bounds 0.7440    solve 2.5008    add 2.2654    
Current (lb-rhs): -0.22381657361984253
7297 domains visited
Cumulative time: 8.299463033676147

BaB round 10
batch: 2599
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 532] [/input-8, 531] [/input-8, 1363] [/input-8, 532] [/input-8, 1363] [/input-8, 532] [/input-8, 531] [/input-8, 533] [/input-8, 1363] [/input-8, 533] 
cut re-enabled after branching node selection
0 lb beta sum: 2.3812153339385986, worst -0.22241950035095215
10 lb beta sum: 2.3896138668060303, worst -0.22234606742858887
Time: prepare 0.2351    bound 0.3485    transfer 0.0350    finalize 0.0237    func 0.6765    
Accumulated time: func 3.2254    prepare 0.5800    bound 2.3627    transfer 0.0872    finalize 0.0935    
all_split False
======================Cut inference begins======================
max lb tensor(0.16375208) min lb tensor(-0.22230911)
Number of Verified Splits: 249 of 5198
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 20
#cuts >= 20: 0
BICCOS time: 0.20597434043884277 
BICCOS Cumulative time: 1.2664251327514648
Preprocessing time: 0.1596834659576416 Inference time: 0.0423426628112793 Add cuts time: 0.0033473968505859375 Cut analysis time: 0.0006008148193359375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22231 (18), -0.21744 (18), -0.21607 (18), -0.21413 (18), -0.21331 (18), -0.21317 (18), -0.21193 (18), -0.21035 (18), -0.21031 (18), -0.20978 (18), -0.20929 (18), -0.20876 (18), -0.20861 (18), -0.20861 (18), -0.20839 (18), -0.20795 (18), -0.20701 (18), -0.20677 (18), -0.20552 (18), -0.20500 (18), 
Length of domains: 4949
Time: pickout 0.0492    decision 0.1538    set_bounds 0.4147    solve 0.6783    add 0.1442    
Accumulated time: pickout 0.4320    decision 1.2831    set_bounds 1.1587    solve 3.1791    add 2.4095    
Current (lb-rhs): -0.22230911254882812
12246 domains visited
Cumulative time: 9.958744525909424

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1548] [/input-8, 682] [/input-8, 1307] [/input-8, 532] [/input-8, 1886] [/input-8, 1307] [/input-8, 1548] [/input-8, 1886] [/input-8, 1356] [/input-8, 682] 
cut re-enabled after branching node selection
0 lb beta sum: 2.3662405014038086, worst -0.2172560691833496
10 lb beta sum: 2.387833595275879, worst -0.2171916961669922
Time: prepare 0.3748    bound 0.5029    transfer 0.0499    finalize 0.0400    func 1.0223    
Accumulated time: func 4.2477    prepare 0.9551    bound 2.8656    transfer 0.1371    finalize 0.1335    
all_split False
======================Cut inference begins======================
max lb tensor(0.15569520) min lb tensor(-0.21714842)
Number of Verified Splits: 156 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 20
#cuts >= 20: 0
BICCOS time: 0.49136900901794434 
BICCOS Cumulative time: 1.7577941417694092
Preprocessing time: 0.25383734703063965 Inference time: 0.03639817237854004 Add cuts time: 0.20045828819274902 Cut analysis time: 0.000675201416015625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21715 (19), -0.21396 (19), -0.21107 (19), -0.21054 (19), -0.21032 (19), -0.20862 (19), -0.20815 (19), -0.20800 (19), -0.20791 (19), -0.20791 (19), -0.20698 (19), -0.20672 (19), -0.20640 (19), -0.20625 (19), -0.20508 (19), -0.20481 (19), -0.20468 (19), -0.20440 (19), -0.20409 (19), -0.20348 (19), 
Length of domains: 8889
Time: pickout 0.0684    decision 0.2253    set_bounds 0.5551    solve 1.0241    add 0.1724    
Accumulated time: pickout 0.5005    decision 1.5084    set_bounds 1.7138    solve 4.2032    add 2.5819    
Current (lb-rhs): -0.21714842319488525
20282 domains visited
current_vram/total_varm: 10.2GB/99.9GB, batch_size increase to 8192
Cumulative time: 12.508213996887207

BaB round 12
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 682] [/input-8, 1548] [/input-8, 1363] [/input-8, 1356] [/input-8, 1548] [/input-8, 532] [/input-8, 1355] [/input-8, 532] [/input-8, 532] [/input-8, 532] 
cut re-enabled after branching node selection
0 lb beta sum: 2.3721747398376465, worst -0.21714842319488525
10 lb beta sum: 2.400209426879883, worst -0.2171189785003662
Time: prepare 0.7193    bound 0.9359    transfer 0.1256    finalize 0.0767    func 2.1908    
Accumulated time: func 6.4385    prepare 1.6748    bound 3.8015    transfer 0.2627    finalize 0.2102    
all_split False
======================Cut inference begins======================
max lb tensor(0.15384173) min lb tensor(-0.21708930)
Number of Verified Splits: 256 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 20
#cuts >= 20: 0
BICCOS time: 0.7213375568389893 
BICCOS Cumulative time: 2.4791316986083984
Preprocessing time: 0.6455047130584717 Inference time: 0.06948423385620117 Add cuts time: 0.005587577819824219 Cut analysis time: 0.0007610321044921875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21709 (20), -0.21393 (20), -0.21039 (20), -0.21030 (20), -0.20797 (20), -0.20796 (20), -0.20791 (19), -0.20788 (20), -0.20684 (20), -0.20609 (20), -0.20573 (20), -0.20499 (20), -0.20480 (20), -0.20457 (20), -0.20440 (19), -0.20329 (20), -0.20295 (20), -0.20246 (20), -0.20213 (20), -0.20205 (20), 
Length of domains: 16825
Time: pickout 0.1069    decision 0.4478    set_bounds 0.9610    solve 2.1959    add 0.2268    
Accumulated time: pickout 0.6074    decision 1.9562    set_bounds 2.6748    solve 6.3991    add 2.8087    
Current (lb-rhs): -0.21708929538726807
36410 domains visited
current_vram/total_varm: 19.6GB/99.9GB, batch_size increase to 16384
Cumulative time: 17.22436809539795

BaB round 13
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1307] [/input-8, 1548] [/input-8, 533] [/input-8, 1307] [/input-8, 682] [/input-8, 682] [/input-8, 1564] [/input-8, 533] [/input-8, 1307] [/input-8, 533] 
cut re-enabled after branching node selection
0 lb beta sum: 2.371746063232422, worst -0.21413135528564453
10 lb beta sum: 2.4010000228881836, worst -0.2140582799911499
Time: prepare 1.4570    bound 1.8009    transfer 0.3576    finalize 0.1925    func 4.0220    
Accumulated time: func 10.4605    prepare 3.1323    bound 5.6024    transfer 0.6202    finalize 0.4027    
all_split False
======================Cut inference begins======================
max lb tensor(0.21199894) min lb tensor(-0.21402669)
Number of Verified Splits: 2197 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 24
#cuts >= 20: 0
BICCOS time: 1.8542742729187012 
BICCOS Cumulative time: 4.3334059715271
Preprocessing time: 1.0582480430603027 Inference time: 0.770869255065918 Add cuts time: 0.024478673934936523 Cut analysis time: 0.0006783008575439453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21403 (21), -0.21153 (21), -0.20774 (21), -0.20774 (21), -0.20769 (20), -0.20530 (21), -0.20489 (21), -0.20460 (21), -0.20419 (21), -0.20416 (20), -0.20399 (21), -0.20393 (21), -0.20239 (21), -0.20193 (21), -0.20191 (21), -0.20130 (21), -0.20115 (21), -0.19967 (21), -0.19941 (21), -0.19941 (21), 
Length of domains: 31012
Time: pickout 0.2668    decision 1.9276    set_bounds 2.3805    solve 4.0273    add 0.2856    
Accumulated time: pickout 0.8742    decision 3.8838    set_bounds 5.0553    solve 10.4264    add 3.0943    
Current (lb-rhs): -0.21402668952941895
66981 domains visited
current_vram/total_varm: 33.8GB/99.9GB, batch_size increase to 32768
Cumulative time: 28.060094594955444

BaB round 14
batch: 31012
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1878] [/input-8, 532] [/input-8, 1356] [/input-8, 1886] [/input-8, 1307] [/input-8, 531] [/input-8, 682] [/input-8, 532] [/input-8, 1878] [/input-8, 531] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2187948226928711
10 lb beta sum: 2.3214714527130127, worst -0.21053636074066162
Time: prepare 1.2922    bound 3.3693    transfer 0.7450    finalize 0.3706    func 6.6504    
Accumulated time: func 17.1109    prepare 4.4250    bound 8.9717    transfer 1.3653    finalize 0.7733    
all_split False
======================Cut inference begins======================
max lb tensor(0.59544230) min lb tensor(-0.20861614)
Number of Verified Splits: 44003 of 62024
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 26
#cuts >= 20: 0
BICCOS time: 11.807743549346924 
BICCOS Cumulative time: 16.141149520874023
Preprocessing time: 2.077730417251587 Inference time: 9.046937942504883 Add cuts time: 0.6821026802062988 Cut analysis time: 0.0009725093841552734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20862 (22), -0.20615 (22), -0.20589 (22), -0.20342 (22), -0.20113 (22), -0.19979 (21), -0.19918 (22), -0.19891 (22), -0.19860 (22), -0.19836 (22), -0.19723 (22), -0.19673 (22), -0.19657 (21), -0.19651 (22), -0.19645 (22), -0.19641 (22), -0.19587 (22), -0.19563 (22), -0.19541 (22), -0.19501 (22), 
Length of domains: 18021
Time: pickout 0.5860    decision 3.1300    set_bounds 3.7544    solve 6.6587    add 0.2239    
Accumulated time: pickout 1.4602    decision 7.0138    set_bounds 8.8096    solve 17.0850    add 3.3182    
Current (lb-rhs): -0.20861613750457764
85002 domains visited
Cumulative time: 55.27717351913452

BaB round 15
batch: 18021
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 531] [/input-8, 682] [/input-8, 533] [/input-8, 682] [/input-8, 1886] [/input-8, 532] [/input-8, 682] [/input-8, 531] [/input-8, 533] [/input-8, 1886] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21452397108078003
10 lb beta sum: 2.365462064743042, worst -0.20499944686889648
Time: prepare 0.9022    bound 2.0097    transfer 0.4066    finalize 0.3012    func 3.8637    
Accumulated time: func 20.9746    prepare 5.3280    bound 10.9813    transfer 1.7719    finalize 1.0745    
all_split False
======================Cut inference begins======================
max lb tensor(0.34087801) min lb tensor(-0.20496428)
Number of Verified Splits: 6733 of 36042
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 26
#cuts >= 20: 0
BICCOS time: 3.313800573348999 
BICCOS Cumulative time: 19.454950094223022
Preprocessing time: 1.9748928546905518 Inference time: 1.2435522079467773 Add cuts time: 0.09453916549682617 Cut analysis time: 0.00081634521484375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20496 (23), -0.20250 (23), -0.20209 (23), -0.19962 (23), -0.19575 (23), -0.19486 (23), -0.19467 (23), -0.19331 (23), -0.19308 (23), -0.19299 (23), -0.19287 (23), -0.19199 (23), -0.19180 (23), -0.19178 (23), -0.19147 (23), -0.19100 (23), -0.19088 (23), -0.19050 (23), -0.19044 (22), -0.19037 (23), 
Length of domains: 29309
Time: pickout 0.3555    decision 1.9413    set_bounds 2.9244    solve 3.8748    add 0.3000    
Accumulated time: pickout 1.8157    decision 8.9551    set_bounds 11.7340    solve 20.9599    add 3.6182    
Current (lb-rhs): -0.204964280128479
114311 domains visited
Cumulative time: 68.16793894767761

BaB round 16
batch: 29309
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1555] [/input-8, 1558] [/input-8, 1307] [/input-8, 1355] [/input-8, 1373] [/input-8, 1886] [/input-8, 532] [/input-8, 1883] [/input-8, 1558] [/input-8, 531] 
cut re-enabled after branching node selection
0 lb beta sum: 2.746061325073242, worst -0.20283985137939453
10 lb beta sum: 2.746061325073242, worst -0.20279204845428467
Time: prepare 2.9902    bound 3.2094    transfer 0.6919    finalize 0.9587    func 8.2447    
Accumulated time: func 29.2193    prepare 8.3188    bound 14.1907    transfer 2.4637    finalize 2.0332    
all_split False
======================Cut inference begins======================
max lb tensor(0.21772361) min lb tensor(-0.20277357)
Number of Verified Splits: 1003 of 58618
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 26
#cuts >= 20: 0
BICCOS time: 3.071491241455078 
BICCOS Cumulative time: 22.5264413356781
Preprocessing time: 2.118363380432129 Inference time: 0.922961950302124 Add cuts time: 0.029387950897216797 Cut analysis time: 0.0007779598236083984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20277 (24), -0.20020 (24), -0.19984 (24), -0.19727 (24), -0.19382 (24), -0.19225 (24), -0.19208 (24), -0.19098 (24), -0.19088 (24), -0.19071 (24), -0.19034 (23), -0.18961 (24), -0.18931 (24), -0.18915 (24), -0.18868 (24), -0.18815 (24), -0.18812 (24), -0.18806 (24), -0.18774 (23), -0.18732 (24), 
Length of domains: 57615
Time: pickout 0.6691    decision 3.0819    set_bounds 3.8311    solve 8.2573    add 0.3967    
Accumulated time: pickout 2.4848    decision 12.0371    set_bounds 15.5652    solve 29.2171    add 4.0149    
Current (lb-rhs): -0.2027735710144043
171926 domains visited
Cumulative time: 87.6243109703064

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 523] [/input-8, 1886] [/input-8, 1558] [/input-8, 523] [/input-8, 1548] [/input-8, 1558] [/input-8, 1373] [/input-8, 1878] [/input-8, 1886] [/input-8, 523] 
cut re-enabled after branching node selection
0 lb beta sum: 2.7188620567321777, worst -0.20174598693847656
10 lb beta sum: 2.7188620567321777, worst -0.2017498016357422
Time: prepare 2.9350    bound 8.7412    transfer 0.7814    finalize 0.4959    func 14.1399    
Accumulated time: func 43.3592    prepare 11.2545    bound 22.9318    transfer 3.2451    finalize 2.5291    
all_split False
======================Cut inference begins======================
max lb tensor(0.22498202) min lb tensor(-0.18535578)
Number of Verified Splits: 741 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 26
#cuts >= 20: 0
BICCOS time: 2.8368775844573975 
BICCOS Cumulative time: 25.363318920135498
Preprocessing time: 2.381812810897827 Inference time: 0.3531177043914795 Add cuts time: 0.10097336769104004 Cut analysis time: 0.0009737014770507812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20277 (24), -0.20020 (24), -0.19984 (24), -0.19727 (24), -0.19382 (24), -0.19225 (24), -0.19208 (24), -0.19098 (24), -0.19088 (24), -0.19071 (24), -0.19034 (23), -0.18961 (24), -0.18931 (24), -0.18915 (24), -0.18868 (24), -0.18815 (24), -0.18812 (24), -0.18806 (24), -0.18703 (24), -0.18645 (23), 
Length of domains: 89642
Time: pickout 0.5230    decision 3.3371    set_bounds 4.5785    solve 14.1532    add 0.6237    
Accumulated time: pickout 3.0078    decision 15.3741    set_bounds 20.1437    solve 43.3704    add 4.6386    
Current (lb-rhs): -0.2027735710144043
236721 domains visited
Cumulative time: 113.95042777061462

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1878] [/input-8, 1886] [/input-8, 1066] [/input-8, 1886] [/input-8, 1886] [/input-8, 1886] [/input-8, 1878] [/input-8, 1902] [/input-8, 1886] [/input-8, 1878] 
cut re-enabled after branching node selection
0 lb beta sum: 2.7415084838867188, worst -0.19978713989257812
10 lb beta sum: 2.7415084838867188, worst -0.19967150688171387
Time: prepare 2.9834    bound 8.7415    transfer 0.7828    finalize 1.5170    func 14.4664    
Accumulated time: func 57.8256    prepare 14.2383    bound 31.6734    transfer 4.0279    finalize 4.0461    
all_split False
======================Cut inference begins======================
max lb tensor(0.23339200) min lb tensor(-0.19963741)
Number of Verified Splits: 1697 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 26
#cuts >= 20: 0
BICCOS time: 2.9953203201293945 
BICCOS Cumulative time: 28.358639240264893
Preprocessing time: 2.4395358562469482 Inference time: 0.49253058433532715 Add cuts time: 0.06239819526672363 Cut analysis time: 0.0008556842803955078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19964 (25), -0.19707 (25), -0.19669 (25), -0.19412 (25), -0.19069 (25), -0.18907 (25), -0.18906 (25), -0.18787 (25), -0.18787 (24), -0.18777 (25), -0.18767 (25), -0.18648 (25), -0.18628 (25), -0.18613 (25), -0.18609 (25), -0.18558 (25), -0.18536 (24), -0.18510 (25), -0.18502 (25), -0.18492 (25), 
Length of domains: 120713
Time: pickout 0.6294    decision 4.4530    set_bounds 4.9737    solve 14.4779    add 0.7101    
Accumulated time: pickout 3.6373    decision 19.8272    set_bounds 25.1174    solve 57.8483    add 5.3487    
Current (lb-rhs): -0.19963741302490234
300560 domains visited
Cumulative time: 142.38771796226501

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1373] [/input-8, 1301] [/input-8, 1886] [/input-8, 1902] [/input-8, 1355] [/input-8, 1373] [/input-8, 1564] [/input-8, 1355] [/input-8, 1373] [/input-8, 531] 
cut re-enabled after branching node selection
0 lb beta sum: 2.7197787761688232, worst -0.19530487060546875
10 lb beta sum: 2.7197787761688232, worst -0.1954953670501709
Time: prepare 2.9905    bound 8.7449    transfer 0.7836    finalize 0.5060    func 13.4722    
Accumulated time: func 71.2978    prepare 17.2292    bound 40.4183    transfer 4.8115    finalize 4.5521    
all_split False
======================Cut inference begins======================
max lb tensor(0.24119067) min lb tensor(-0.17795670)
Number of Verified Splits: 4192 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 26
#cuts >= 20: 0
BICCOS time: 4.847117900848389 
BICCOS Cumulative time: 33.20575714111328
Preprocessing time: 3.6736948490142822 Inference time: 0.9982163906097412 Add cuts time: 0.17412066459655762 Cut analysis time: 0.0010859966278076172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19964 (25), -0.19707 (25), -0.19669 (25), -0.19412 (25), -0.19069 (25), -0.18907 (25), -0.18906 (25), -0.18787 (25), -0.18787 (24), -0.18777 (25), -0.18767 (25), -0.18648 (25), -0.18628 (25), -0.18613 (25), -0.18609 (25), -0.18558 (25), -0.18536 (24), -0.18510 (25), -0.18502 (25), -0.18492 (25), 
Length of domains: 149289
Time: pickout 0.5217    decision 4.4709    set_bounds 4.7170    solve 13.4842    add 0.7989    
Accumulated time: pickout 4.1590    decision 24.2981    set_bounds 29.8344    solve 71.3325    add 6.1476    
Current (lb-rhs): -0.19963741302490234
361904 domains visited
Cumulative time: 171.54051303863525

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1355] [/input-8, 1354] [/input-8, 1355] [/input-8, 1902] [/input-8, 1878] [/input-8, 1354] [/input-8, 1355] [/input-8, 1355] [/input-8, 1886] [/input-8, 1355] 
cut re-enabled after branching node selection
0 lb beta sum: 2.7509710788726807, worst -0.1878364086151123
10 lb beta sum: 2.7509710788726807, worst -0.1878650188446045
Time: prepare 3.1479    bound 8.7441    transfer 0.8182    finalize 0.5898    func 13.7443    
Accumulated time: func 85.0421    prepare 20.3777    bound 49.1624    transfer 5.6297    finalize 5.1420    
all_split False
======================Cut inference begins======================
max lb tensor(0.24358511) min lb tensor(-0.18233943)
Number of Verified Splits: 3996 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 26
#cuts >= 20: 0
BICCOS time: 5.356017112731934 
BICCOS Cumulative time: 38.561774253845215
Preprocessing time: 4.274608612060547 Inference time: 0.9222180843353271 Add cuts time: 0.15801668167114258 Cut analysis time: 0.0011737346649169922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19964 (25), -0.19707 (25), -0.19669 (25), -0.19412 (25), -0.19069 (25), -0.18907 (25), -0.18906 (25), -0.18787 (25), -0.18787 (24), -0.18777 (25), -0.18767 (25), -0.18648 (25), -0.18628 (25), -0.18613 (25), -0.18609 (25), -0.18558 (25), -0.18510 (25), -0.18502 (25), -0.18492 (25), -0.18401 (24), 
Length of domains: 178061
Time: pickout 0.5653    decision 3.3887    set_bounds 5.0266    solve 13.7583    add 0.6139    
Accumulated time: pickout 4.7243    decision 27.6868    set_bounds 34.8610    solve 85.0908    add 6.7614    
Current (lb-rhs): -0.19963741302490234
423444 domains visited
Time out!!!!!!!!
Result: unknown in 203.9881 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 184, vnnlib ID: 184 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.89069843,  -6.00872993,  -9.81441784,  -9.48617077,  -8.76289272,
         -10.92080116, -10.39973545,  -9.59434032,  -4.95132399,  -4.38216209]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [578]; unstable size 578; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 156, 1, 578] with unstable size 155 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 578] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 578] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [155]; unstable size 155; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 155] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 155] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.10634041,  0.71801627,  3.55015564,  3.86298323,  2.74121571,
          5.07143927,  4.74717522,  3.53826141, -1.04089165]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.89069843,  -6.00872993,  -9.81441784,  -9.48617077,  -8.76289272,
         -10.92080116, -10.39973545,  -9.59434032,  -4.95132399,  -4.38216209]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.24040604,  -6.51685905,  -9.96843529,  -9.76380062,  -9.11704445,
          -11.15218353, -10.71066093, -10.13462257,  -4.86371136,  -4.98990440]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12619305]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0070 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0786 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 185, vnnlib ID: 185 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.37633038, -6.56312561, -6.81894398, -6.27486277, -5.78229427,
         -6.83015299, -6.31567955, -6.65800142, -9.07024956, -5.04341173]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [539]; unstable size 539; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 221, 1, 539] with unstable size 220 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 539] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 539] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [220]; unstable size 220; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 220] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 220] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.97405291,  0.32927644,  0.17750072, -0.10494566, -0.85372543,
          0.32606602, -0.43116236, -0.31671810,  2.66897058]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.37633038, -6.56312561, -6.81894398, -6.27486277, -5.78229427,
         -6.83015299, -6.31567955, -6.65800142, -9.07024956, -5.04341173]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.12968159, -6.54487228, -6.24013519, -5.73320532, -5.06740761,
          -6.21982479, -5.72114992, -6.02204561, -8.81664181, -5.19222641],
         [-8.12968159, -6.54487228, -6.24013519, -5.73320532, -5.06740761,
          -6.21982479, -5.72114992, -6.02204561, -8.81664181, -5.19222641]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.54097891, -0.12481880,  0.52892351,  0.82981920]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0567 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 186, vnnlib ID: 186 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.47806835, -16.40879250, -15.09305000, -16.23484230, -16.50166130,
         -18.09269333, -17.71716118, -17.61732292,  -9.91329861, -15.71094036]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [596]; unstable size 596; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 596] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 596] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 596] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 184] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.06263399, 4.58382607, 3.51261258, 4.72654200, 4.75524044, 6.32470703,
         6.04849148, 5.57820654, 4.16677761]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0775 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 187, vnnlib ID: 187 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.08897448, -10.08986378,  -7.39640045,  -7.25407028,  -6.58082294,
          -7.96594858,  -7.83635616,  -8.88062477,  -5.43441010,  -7.92518377]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [737]; unstable size 737; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 236, 1, 737] with unstable size 235 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 737] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 737] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [235]; unstable size 235; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 235] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 235] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.51290536,  2.97313166,  0.25002098,  0.22753626, -0.42947221,
          0.68455637,  0.85951865,  1.57969642,  0.97213125]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.08897448, -10.08986378,  -7.39640045,  -7.25407028,  -6.58082294,
          -7.96594858,  -7.83635616,  -8.88062477,  -5.43441010,  -7.92518377]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.09it/s]100%|██████████| 1/1 [00:00<00:00,  9.08it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.76056576, -9.90643501, -7.24392986, -7.12848854, -6.38653946,
          -7.83770800, -7.66693401, -8.70800304, -5.73674393, -7.76976919],
         [-5.76056576, -9.90643501, -7.24392986, -7.12848854, -6.38653946,
          -7.83770800, -7.66693401, -8.70800304, -5.73674393, -7.76976919]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02382183, 0.64979553]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1128 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 7.152825355529785
alpha/beta optimization time: 1.179100513458252
initial alpha-crown bounds: tensor([[-0.46917939,  3.03084373,  0.32193255,  0.28774774, -0.37226689,
          0.75499475,  0.91308248,  1.66521382,  1.02045631]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.4691793918609619
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.63956904411316
Verifying property 0 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.46917939]], device='cuda:0') need to verify.
Model prediction is: tensor([ -6.08897448, -10.08986378,  -7.39640045,  -7.25407028,  -6.58082294,
         -7.96594858,  -7.83635616,  -8.88062477,  -5.43441010,  -7.92518377],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.46917939]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 737
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 228
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 983
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010848045349121094
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.46917617321014404
10 lb beta sum: 0.0, worst -0.4691808223724365
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0520    transfer 0.0001    finalize 0.0001    func 0.0525    
Accumulated time: func 0.0525    prepare 0.0002    bound 0.0520    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] 
split level 1: [/input-12, 58] 
split level 2: [/input-12, 10] 
split level 3: [/input-12, 1] 
split level 4: [/input-12, 92] 
split level 5: [/input-8, 1956] 
split level 6: [/input-8, 884] 
split level 7: [/input-12, 36] 
split level 8: [/input-8, 539] 
split level 9: [/input-8, 1884] 
split level 10: [/input-8, 875] 
split level 11: [/input-8, 1892] 
split level 12: [/input-8, 1052] 
split level 13: [/input-12, 61] 
split level 14: [/input, 3512] 
split level 15: [/input-12, 55] 
split level 16: [/input-8, 508] 
split level 17: [/input-8, 1881] 
split level 18: [/input-8, 684] 
split level 19: [/input-8, 538] 
split level 20: [/input, 2521] 
split level 21: [/input-8, 92] 
split level 22: [/input-8, 867] 
split level 23: [/input-12, 45] 
split level 24: [/input, 3513] 
split level 25: [/input-8, 556] 
split level 26: [/input-8, 1061] 
split level 27: [/input-8, 499] 
split level 28: [/input-8, 1876] 
split level 29: [/input, 2232] 
split level 30: [/input-8, 659] 
split level 31: [/input-8, 1900] 
split level 32: [/input-8, 1910] 
split level 33: [/input-8, 100] 
split level 34: [/input-8, 84] 
split level 35: [/input, 1463] 
split level 36: [/input-8, 988] 
split level 37: [/input-12, 37] 
split level 38: [/input-8, 1116] 
split level 39: [/input, 3529] 
split level 40: [/input-8, 1888] 
split level 41: [/input, 2248] 
split level 42: [/input-8, 1460] 
split level 43: [/input-8, 1049] 
split level 44: [/input-8, 90] 
split level 45: [/input-8, 996] 
split level 46: [/input, 2264] 
split level 47: [/input, 1497] 
split level 48: [/input-8, 1425] 
split level 49: [/input-8, 1909] 
split level 50: [/input-8, 1298] 
split level 51: [/input-8, 541] 
split level 52: [/input-8, 667] 
split level 53: [/input, 3272] 
split level 54: [/input-8, 1003] 
split level 55: [/input-8, 93] 
split level 56: [/input, 2494] 
split level 57: [/input-8, 1893] 
split level 58: [/input-8, 1866] 
split level 59: [/input, 2472] 
split level 60: [/input-8, 507] 
split level 61: [/input-8, 319] 
split level 62: [/input, 174] 
split level 63: [/input-8, 1361] 
split level 64: [/input, 1466] 
split level 65: [/input-8, 1107] 
split level 66: [/input, 3165] 
split level 67: [/input, 1482] 
split level 68: [/input-8, 1098] 
split level 69: [/input-8, 1369] 
split level 70: [/input-8, 642] 
split level 71: [/input, 2506] 
split level 72: [/input-8, 500] 
split level 73: [/input, 365] 
split level 74: [/input-8, 510] 
split level 75: [/input, 1736] 
split level 76: [/input-8, 1259] 
split level 77: [/input-8, 944] 
split level 78: [/input, 3274] 
split level 79: [/input, 395] 
split level 80: [/input-8, 1041] 
split level 81: [/input-8, 492] 
split level 82: [/input-8, 1353] 
split level 83: [/input, 3018] 
split level 84: [/input-8, 1583] 
split level 85: [/input, 3254] 
split level 86: [/input-8, 1249] 
split level 87: [/input, 3257] 
split level 88: [/input, 2433] 
split level 89: [/input, 3287] 
split level 90: [/input, 3258] 
split level 91: [/input, 2473] 
split level 92: [/input-8, 1867] 
split level 93: [/input-8, 1106] 
split level 94: [/input-8, 1908] 
split level 95: [/input-8, 1293] 
split level 96: [/input-8, 1941] 
split level 97: [/input, 103] 
split level 98: [/input, 3306] 
split level 99: [/input, 3271] 
split level 100: [/input, 2449] 
split level 101: [/input-8, 1461] 
split level 102: [/input-8, 2021] 
split level 103: [/input-12, 72] 
split level 104: [/input, 1717] 
split level 105: [/input-8, 1373] 
split level 106: [/input-8, 694] 
split level 107: [/input, 3278] 
split level 108: [/input-8, 1305] 
split level 109: [/input, 2470] 
split level 110: [/input, 2446] 
split level 111: [/input, 3215] 
split level 112: [/input, 2524] 
split level 113: [/input, 426] 
split level 114: [/input, 2474] 
split level 115: [/input, 2455] 
split level 116: [/input, 3289] 
split level 117: [/input, 2386] 
split level 118: [/input, 3229] 
split level 119: [/input, 1703] 
split level 120: [/input, 3277] 
split level 121: [/input-8, 801] 
split level 122: [/input, 3182] 
split level 123: [/input, 3998] 
split level 124: [/input, 3305] 
split level 125: [/input, 3186] 
split level 126: [/input, 2936] 
split level 127: [/input, 3290] 
split level 128: [/input, 3246] 
split level 129: [/input, 1357] 
split level 130: [/input, 2515] 
split level 131: [/input-8, 1767] 
split level 132: [/input, 3170] 
split level 133: [/input-8, 1887] 
split level 134: [/input, 3245] 
split level 135: [/input, 2510] 
split level 136: [/input, 3269] 
split level 137: [/input, 3688] 
split level 138: [/input, 104] 
split level 139: [/input, 1563] 
split level 140: [/input, 3672] 
split level 141: [/input, 91] 
split level 142: [/input, 366] 
split level 143: [/input-8, 1534] 
split level 144: [/input, 3299] 
split level 145: [/input, 2398] 
split level 146: [/input, 2397] 
split level 147: [/input-8, 394] 
split level 148: [/input-8, 1377] 
split level 149: [/input-8, 1001] 
split level 150: [/input-8, 1430] 
split level 151: [/input, 2076] 
split level 152: [/input, 2251] 
split level 153: [/input, 2413] 
split level 154: [/input, 1576] 
split level 155: [/input, 2463] 
split level 156: [/input, 2540] 
split level 157: [/input-8, 1803] 
split level 158: [/input, 3260] 
split level 159: [/input, 2478] 
split level 160: [/input, 1579] 
split level 161: [/input-8, 1121] 
split level 162: [/input-8, 1047] 
split level 163: [/input, 3054] 
split level 164: [/input, 3532] 
split level 165: [/input, 3786] 
split level 166: [/input, 2092] 
split level 167: [/input, 2696] 
split level 168: [/input, 1618] 
split level 169: [/input, 3202] 
split level 170: [/input-8, 1424] 
split level 171: [/input-8, 648] 
split level 172: [/input, 3915] 
split level 173: [/input, 394] 
split level 174: [/input, 1733] 
split level 175: [/input-8, 1422] 
split level 176: [/input, 3250] 
split level 177: [/input, 407] 
split level 178: [/input-8, 649] 
split level 179: [/input-8, 980] 
split level 180: [/input, 2401] 
split level 181: [/input, 1650] 
split level 182: [/input, 3153] 
split level 183: [/input, 3977] 
split level 184: [/input, 3195] 
split level 185: [/input, 1594] 
split level 186: [/input, 1560] 
split level 187: [/input, 3834] 
split level 188: [/input, 3475] 
split level 189: [/input, 3052] 
split level 190: [/input, 1558] 
split level 191: [/input, 1569] 
split level 192: [/input, 1438] 
split level 193: [/input, 3974] 
split level 194: [/input, 3833] 
split level 195: [/input, 2412] 
split level 196: [/input, 3917] 
split level 197: [/input, 392] 
split level 198: [/input, 3832] 
split level 199: [/input, 1592] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4691300392150879
10 lb beta sum: 0.0, worst -0.4691346287727356
Time: prepare 0.0114    bound 0.0967    transfer 0.0027    finalize 0.0027    func 0.1161    
Accumulated time: func 0.1686    prepare 0.0215    bound 0.1487    transfer 0.0028    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.20137405) min lb tensor(-0.46912974)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010564088821411133 
BICCOS Cumulative time: 0.010564088821411133
Preprocessing time: 0.009853601455688477 Inference time: 0.00015497207641601562 Add cuts time: 6.532669067382812e-05 Cut analysis time: 0.0004901885986328125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.45634 (1), -0.45630 (1), -0.45597 (1), -0.45538 (1), -0.45497 (1), -0.45487 (1), -0.45482 (1), -0.45451 (1), -0.45408 (1), -0.45407 (1), -0.45389 (1), -0.45371 (1), -0.45326 (1), -0.45284 (1), -0.45103 (1), -0.44987 (1), -0.44986 (1), -0.44821 (1), -0.44821 (1), -0.44776 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5064    set_bounds 0.0086    solve 0.1162    add 0.1979    
Accumulated time: pickout 0.0003    decision 0.5064    set_bounds 0.0086    solve 0.1162    add 0.1979    
Current (lb-rhs): -0.45633643865585327
50 domains visited
Cumulative time: 0.9150726795196533

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 10] [/input-12, 60] 
split level 1: [/input-12, 1] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 92] [/input-12, 10] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 92] 
split level 3: [/input-8, 100] [/input-8, 556] [/input-8, 1956] [/input-8, 1003] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-8, 1881] [/input-12, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4495862126350403
10 lb beta sum: 0.5860037207603455, worst -0.4427468776702881
Time: prepare 0.0077    bound 0.1168    transfer 0.0008    finalize 0.0024    func 0.1303    
Accumulated time: func 0.2989    prepare 0.0295    bound 0.2655    transfer 0.0036    finalize 0.0052    
all_split False
======================Cut inference begins======================
max lb tensor(0.30993539) min lb tensor(-0.44269663)
Number of Verified Splits: 19 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.013325691223144531 
BICCOS Cumulative time: 0.023889780044555664
Preprocessing time: 0.011838912963867188 Inference time: 0.0007903575897216797 Add cuts time: 0.0003337860107421875 Cut analysis time: 0.00036263465881347656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10252 (2), -0.10247 (2), -0.10241 (2), -0.10161 (2), -0.10134 (2), -0.10072 (2), -0.10035 (2), -0.10011 (2), -0.10000 (2), -0.09994 (2), -0.09977 (2), -0.09953 (2), -0.09698 (2), -0.09373 (2), -0.09236 (2), -0.09190 (2), -0.09110 (2), -0.09099 (2), -0.09088 (2), -0.09077 (2), 
Length of domains: 50
Time: pickout 0.0122    decision 0.0259    set_bounds 0.0117    solve 0.1304    add 0.2021    
Accumulated time: pickout 0.0125    decision 0.5323    set_bounds 0.0203    solve 0.2466    add 0.4000    
Current (lb-rhs): -0.10252112150192261
100 domains visited
Cumulative time: 1.3182947635650635

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 1] [/input-12, 1] [/input-12, 60] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
split level 1: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 61] [/input-8, 1956] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 3: [/input-8, 556] [/input-8, 556] [/input-8, 1003] [/input-12, 61] [/input-8, 556] [/input-8, 1900] [/input-8, 556] [/input-8, 556] [/input-8, 556] [/input-8, 556] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10245561599731445
10 lb beta sum: 0.9573817253112793, worst -0.07341207563877106
Time: prepare 0.0080    bound 0.1302    transfer 0.0008    finalize 0.0024    func 0.1440    
Accumulated time: func 0.4429    prepare 0.0378    bound 0.3956    transfer 0.0043    finalize 0.0076    
all_split False
======================Cut inference begins======================
max lb tensor(0.50508714) min lb tensor(-0.06730783)
Number of Verified Splits: 381 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.03633928298950195 
BICCOS Cumulative time: 0.06022906303405762
Preprocessing time: 0.01164555549621582 Inference time: 0.015167713165283203 Add cuts time: 0.009165763854980469 Cut analysis time: 0.00036025047302246094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06646 (3), -0.06646 (3), -0.06572 (3), -0.06571 (3), -0.05541 (3), -0.05527 (3), -0.04881 (3), -0.04314 (3), -0.03956 (3), -0.03896 (3), 
Length of domains: 10
Time: pickout 0.0080    decision 0.0189    set_bounds 0.0151    solve 0.1441    add 0.1989    
Accumulated time: pickout 0.0205    decision 0.5513    set_bounds 0.0354    solve 0.3907    add 0.5990    
Current (lb-rhs): -0.06646335124969482
110 domains visited
Cumulative time: 1.7469561100006104

Shallow-BaB round 4
batch: 10
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 10] [/input-12, 1] [/input-12, 10] 
split level 2: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 3: [/input-8, 884] [/input-8, 884] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] 
split level 4: [/input-8, 1052] [/input-8, 1052] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 1052] [/input-8, 1052] [/input-8, 1052] [/input-8, 1052] 
split level 5: [/input-8, 875] [/input-8, 875] [/input-8, 1052] [/input-8, 1052] [/input-8, 1892] [/input-8, 1052] [/input-8, 875] [/input-8, 875] [/input-8, 875] [/input-8, 875] 
split level 6: [/input-8, 1892] [/input-8, 1892] [/input-8, 875] [/input-8, 875] [/input-8, 1052] [/input-8, 875] [/input-8, 1892] [/input-8, 1892] [/input-8, 1892] [/input-8, 1892] 
split level 7: [/input-12, 61] [/input-12, 61] [/input-8, 1892] [/input-12, 55] [/input-8, 875] [/input-8, 1892] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 8: [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 61] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] 
split level 9: [/input-8, 1881] [/input-8, 1881] [/input-8, 1881] [/input-8, 1892] [/input-12, 61] [/input-8, 1881] [/input-8, 1881] [/input-8, 1881] [/input-8, 1881] [/input-8, 1881] 
split level 10: [/input-8, 1061] [/input-8, 1061] [/input-8, 538] [/input-8, 1881] [/input-8, 1881] [/input-8, 538] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] 
split level 11: [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 538] [/input-8, 538] [/input-8, 1900] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] 
split level 12: [/input-8, 538] [/input-8, 538] [/input-8, 1061] [/input-8, 867] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] 
split level 13: [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input, 1463] [/input-8, 867] [/input, 1463] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 867] 
split level 14: [/input, 1463] [/input, 1463] [/input-8, 1460] [/input-8, 1061] [/input, 1463] [/input-8, 867] [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] 
split level 15: [/input-8, 1460] [/input-8, 1460] [/input-12, 37] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] 
split level 16: [/input-8, 100] [/input-8, 100] [/input-8, 100] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
split level 17: [/input-12, 37] [/input-12, 37] [/input-8, 1909] [/input-8, 100] [/input-8, 100] [/input, 3529] [/input, 3529] [/input-8, 100] [/input, 3529] [/input-8, 100] 
split level 18: [/input, 3529] [/input, 3529] [/input-8, 1003] [/input, 3529] [/input, 3529] [/input-8, 100] [/input-8, 100] [/input, 3529] [/input-8, 100] [/input, 3529] 
split level 19: [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] 
cut re-enabled after branching node selection
0 lb beta sum: 1.078808069229126, worst -0.2880061864852905
10 lb beta sum: 1.3399643898010254, worst -0.03686642646789551
Time: prepare 0.0177    bound 0.1157    transfer 0.0008    finalize 0.0024    func 0.1397    
Accumulated time: func 0.5826    prepare 0.0566    bound 0.5114    transfer 0.0052    finalize 0.0101    
all_split False
======================Cut inference begins======================
max lb tensor(0.52903301) min lb tensor(-0.03303608)
Number of Verified Splits: 98 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 8
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.01866292953491211 
BICCOS Cumulative time: 0.07889199256896973
Preprocessing time: 0.01141500473022461 Inference time: 0.004105806350708008 Add cuts time: 0.0025615692138671875 Cut analysis time: 0.0005805492401123047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01300 (4), -0.01299 (4), -0.01299 (4), -0.01298 (4), -0.01298 (4), -0.01259 (4), -0.01244 (4), -0.01237 (4), -0.01233 (4), -0.01204 (4), -0.01193 (4), -0.01169 (4), -0.01169 (4), -0.01162 (4), -0.01109 (4), -0.01096 (4), -0.01087 (4), -0.01067 (4), -0.01004 (4), -0.01003 (4), 
Length of domains: 50
Time: pickout 0.0008    decision 0.0600    set_bounds 0.0151    solve 0.1398    add 0.2161    
Accumulated time: pickout 0.0212    decision 0.6112    set_bounds 0.0505    solve 0.5305    add 0.8150    
Current (lb-rhs): -0.013004288077354431
160 domains visited
Cumulative time: 2.204310417175293

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 58] [/input-12, 58] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 1: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 1] [/input-12, 1] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 10] [/input-12, 10] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 3: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 92] [/input-12, 92] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0747990608215332
10 lb beta sum: 0.8150581121444702, worst -0.026093661785125732
Time: prepare 0.0084    bound 0.1306    transfer 0.0008    finalize 0.0027    func 0.3277    
Accumulated time: func 0.9104    prepare 0.0652    bound 0.6420    transfer 0.0060    finalize 0.0128    
all_split False
======================Cut inference begins======================
max lb tensor(0.10634613) min lb tensor(-0.00696260)
Number of Verified Splits: 307 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.03655838966369629 
BICCOS Cumulative time: 0.11545038223266602
Preprocessing time: 0.012312889099121094 Inference time: 0.014330863952636719 Add cuts time: 0.00946950912475586 Cut analysis time: 0.0004451274871826172
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0081    decision 0.0194    set_bounds 0.0156    solve 0.3279    add 0.0273    
Accumulated time: pickout 0.0293    decision 0.6306    set_bounds 0.0662    solve 0.8584    add 0.8423    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
160 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] 
split level 1: [/input-12, 10] 
split level 2: [/input-12, 1] 
split level 3: [/input-12, 92] 
split level 4: [/input-8, 875] 
split level 5: [/input-8, 1052] 
split level 6: [/input-12, 61] 
split level 7: [/input-8, 1881] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3305903673171997
10 lb beta sum: 0.7875982522964478, worst -0.3235035538673401
Time: prepare 0.0051    bound 0.1278    transfer 0.0006    finalize 0.0013    func 0.1365    
Accumulated time: func 1.0469    prepare 0.0709    bound 0.7698    transfer 0.0065    finalize 0.0141    
all_split False
======================Cut inference begins======================
max lb tensor(0.88563460) min lb tensor(-0.32335466)
Number of Verified Splits: 208 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.409130334854126
10 lb beta sum: 1.2316913604736328, worst -0.36010420322418213
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.24468541145324707 
BICCOS Cumulative time: 0.3601357936859131
Preprocessing time: 0.007071971893310547 Inference time: 0.23149418830871582 Add cuts time: 0.005762577056884766 Cut analysis time: 0.0003566741943359375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.32335 (8), -0.31428 (8), -0.31194 (8), -0.31190 (8), -0.30286 (8), -0.30283 (8), -0.30116 (8), -0.29254 (8), -0.29208 (8), -0.28861 (8), -0.27668 (8), -0.27567 (8), -0.27301 (8), -0.27226 (8), -0.26005 (8), -0.25672 (8), -0.10372 (8), -0.10321 (8), -0.09425 (8), -0.09341 (8), 
Length of domains: 48
Time: pickout 0.0004    decision 0.0220    set_bounds 0.0209    solve 0.1366    add 0.0614    
Accumulated time: pickout 0.0298    decision 0.6527    set_bounds 0.0870    solve 0.9950    add 0.9037    
Current (lb-rhs): -0.32335466146469116
208 domains visited
Cumulative time: 3.1447322368621826

BaB round 2
batch: 48
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-8, 1956] [/input-12, 58] [/input-12, 58] [/input-8, 1956] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-8, 92] [/input-8, 1956] [/input-8, 988] [/input-8, 538] [/input-8, 1956] [/input-8, 988] [/input-8, 92] [/input-8, 1956] [/input-8, 84] [/input-8, 92] 
split level 2: [/input-8, 556] [/input-8, 1900] [/input-8, 1003] [/input-8, 556] [/input-8, 1900] [/input-8, 1003] [/input-8, 556] [/input-8, 1900] [/input-8, 1003] [/input-8, 556] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9406806826591492, worst -0.30986881256103516
10 lb beta sum: 0.9406806826591492, worst -0.3096853494644165
Time: prepare 0.0166    bound 0.1287    transfer 0.0008    finalize 0.0028    func 0.1514    
Accumulated time: func 1.1983    prepare 0.0877    bound 0.8985    transfer 0.0073    finalize 0.0170    
all_split False
======================Cut inference begins======================
max lb tensor(0.36963779) min lb tensor(-0.30961668)
Number of Verified Splits: 250 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.9715443849563599, worst -0.2979499101638794
10 lb beta sum: 1.226136326789856, worst -0.09531953930854797
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 9
#cuts 4-6: 1
#cuts 7-9: 20
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.3079063892364502 
BICCOS Cumulative time: 0.6680421829223633
Preprocessing time: 0.01101827621459961 Inference time: 0.28479504585266113 Add cuts time: 0.010437488555908203 Cut analysis time: 0.00165557861328125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30962 (11), -0.30817 (11), -0.30057 (11), -0.29912 (11), -0.29756 (11), -0.29715 (11), -0.29712 (11), -0.29703 (11), -0.29564 (11), -0.29548 (11), -0.28850 (11), -0.28807 (11), -0.28804 (11), -0.28796 (11), -0.28655 (11), -0.28640 (11), -0.28636 (11), -0.28611 (11), -0.28566 (11), -0.28550 (11), 
Length of domains: 134
Time: pickout 0.0064    decision 0.0143    set_bounds 0.0290    solve 0.1516    add 0.0763    
Accumulated time: pickout 0.0361    decision 0.6670    set_bounds 0.1161    solve 1.1465    add 0.9801    
Current (lb-rhs): -0.30961668491363525
342 domains visited
Cumulative time: 3.739445447921753

BaB round 3
batch: 134
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 1956] [/input-8, 884] [/input-8, 1956] [/input-8, 1956] [/input-8, 884] [/input-8, 1956] [/input-8, 1956] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3083096742630005
10 lb beta sum: 0.4294787049293518, worst -0.3065049648284912
Time: prepare 0.0054    bound 0.1302    transfer 0.0007    finalize 0.0013    func 0.1394    
Accumulated time: func 1.3377    prepare 0.0933    bound 1.0287    transfer 0.0080    finalize 0.0183    
all_split False
======================Cut inference begins======================
max lb tensor(0.13001800) min lb tensor(-0.30646086)
Number of Verified Splits: 68 of 268
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 8
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.017557621002197266 
BICCOS Cumulative time: 0.6855998039245605
Preprocessing time: 0.008018016815185547 Inference time: 0.0065326690673828125 Add cuts time: 0.002523183822631836 Cut analysis time: 0.0004837512969970703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30646 (12), -0.30528 (12), -0.29743 (12), -0.29625 (12), -0.29494 (12), -0.29458 (12), -0.29433 (12), -0.29341 (12), -0.29233 (12), -0.29224 (12), -0.28588 (12), -0.28554 (12), -0.28525 (12), -0.28431 (12), -0.28343 (12), -0.28324 (12), -0.28322 (12), -0.28314 (12), -0.28292 (12), -0.28258 (12), 
Length of domains: 200
Time: pickout 0.0138    decision 0.0185    set_bounds 0.0118    solve 0.1395    add 0.0767    
Accumulated time: pickout 0.0499    decision 0.6855    set_bounds 0.1279    solve 1.2860    add 1.0568    
Current (lb-rhs): -0.3064608573913574
542 domains visited
Cumulative time: 4.0247111320495605

BaB round 4
batch: 200
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1956] [/input-8, 1956] [/input-8, 1956] [/input-8, 988] [/input-8, 1956] [/input-8, 988] [/input-8, 92] [/input-8, 1956] [/input-8, 92] [/input-8, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3053756356239319
10 lb beta sum: 0.46529456973075867, worst -0.30360376834869385
Time: prepare 0.0079    bound 0.1303    transfer 0.0009    finalize 0.0017    func 0.1435    
Accumulated time: func 1.4812    prepare 0.1014    bound 1.1590    transfer 0.0088    finalize 0.0201    
all_split False
======================Cut inference begins======================
max lb tensor(0.29686832) min lb tensor(-0.30357188)
Number of Verified Splits: 77 of 400
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 8
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.021324634552001953 
BICCOS Cumulative time: 0.7069244384765625
Preprocessing time: 0.01147007942199707 Inference time: 0.007437467575073242 Add cuts time: 0.0019021034240722656 Cut analysis time: 0.000514984130859375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30357 (13), -0.30246 (13), -0.29455 (13), -0.29343 (13), -0.29171 (13), -0.29140 (13), -0.29111 (13), -0.29002 (13), -0.28964 (13), -0.28895 (13), -0.28268 (13), -0.28236 (13), -0.28203 (13), -0.28095 (13), -0.28056 (13), -0.28047 (13), -0.27993 (13), -0.27981 (13), -0.27952 (13), -0.27880 (13), 
Length of domains: 323
Time: pickout 0.0167    decision 0.0195    set_bounds 0.0176    solve 0.1436    add 0.0020    
Accumulated time: pickout 0.0665    decision 0.7050    set_bounds 0.1456    solve 1.4296    add 1.0588    
Current (lb-rhs): -0.303571879863739
865 domains visited
Cumulative time: 4.246287822723389

BaB round 5
batch: 323
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 538] [/input-8, 92] [/input-8, 538] [/input-8, 538] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] [/input-8, 556] [/input-8, 538] [/input-8, 538] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2983342409133911
10 lb beta sum: 0.4379863739013672, worst -0.2961946427822113
Time: prepare 0.0148    bound 0.1831    transfer 0.0059    finalize 0.0036    func 0.2118    
Accumulated time: func 1.6930    prepare 0.1163    bound 1.3422    transfer 0.0147    finalize 0.0236    
all_split False
======================Cut inference begins======================
max lb tensor(0.00621325) min lb tensor(-0.29597726)
Number of Verified Splits: 10 of 646
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 9
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.02303481101989746 
BICCOS Cumulative time: 0.72995924949646
Preprocessing time: 0.020885705947875977 Inference time: 0.0012581348419189453 Add cuts time: 0.00046896934509277344 Cut analysis time: 0.0004220008850097656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.29598 (14), -0.29485 (14), -0.28994 (14), -0.28918 (14), -0.28886 (14), -0.28804 (14), -0.28424 (14), -0.28386 (14), -0.28320 (14), -0.28215 (14), -0.28171 (14), -0.28106 (14), -0.28082 (14), -0.27970 (14), -0.27825 (14), -0.27788 (14), -0.27770 (14), -0.27740 (14), -0.27703 (14), -0.27629 (14), 
Length of domains: 636
Time: pickout 0.0041    decision 0.0276    set_bounds 0.0325    solve 0.2134    add 0.1152    
Accumulated time: pickout 0.0706    decision 0.7327    set_bounds 0.1780    solve 1.6430    add 1.1739    
Current (lb-rhs): -0.29597726464271545
1501 domains visited
Cumulative time: 4.672110319137573

BaB round 6
batch: 636
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 867] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] [/input-8, 867] [/input-8, 92] [/input-8, 556] [/input-8, 1061] [/input-8, 867] [/input-8, 1061] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.29173439741134644
10 lb beta sum: 0.4189685583114624, worst -0.28971996903419495
Time: prepare 0.0274    bound 0.1591    transfer 0.0055    finalize 0.0091    func 0.2096    
Accumulated time: func 1.9026    prepare 0.1439    bound 1.5013    transfer 0.0202    finalize 0.0327    
all_split False
======================Cut inference begins======================
max lb tensor(0.12598510) min lb tensor(-0.28963521)
Number of Verified Splits: 103 of 1272
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.05657052993774414 
BICCOS Cumulative time: 0.7865297794342041
Preprocessing time: 0.040407419204711914 Inference time: 0.013172388076782227 Add cuts time: 0.0023653507232666016 Cut analysis time: 0.0006253719329833984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.28964 (15), -0.28872 (15), -0.28450 (15), -0.28309 (15), -0.28296 (15), -0.28259 (15), -0.28218 (15), -0.28056 (15), -0.27791 (15), -0.27777 (15), -0.27704 (15), -0.27593 (15), -0.27588 (15), -0.27566 (15), -0.27532 (15), -0.27480 (15), -0.27432 (15), -0.27426 (15), -0.27389 (15), -0.27383 (15), 
Length of domains: 1169
Time: pickout 0.0731    decision 0.0507    set_bounds 0.0654    solve 0.2100    add 0.0834    
Accumulated time: pickout 0.1437    decision 0.7834    set_bounds 0.2434    solve 1.8530    add 1.2573    
Current (lb-rhs): -0.28963521122932434
2670 domains visited
Cumulative time: 5.214453220367432

BaB round 7
batch: 1169
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1061] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 556] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 1061] [/input-8, 867] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.28578078746795654
10 lb beta sum: 0.39630621671676636, worst -0.28388744592666626
Time: prepare 0.0567    bound 0.1918    transfer 0.0182    finalize 0.0157    func 0.2976    
Accumulated time: func 2.2002    prepare 0.2009    bound 1.6930    transfer 0.0384    finalize 0.0484    
all_split False
======================Cut inference begins======================
max lb tensor(0.14674087) min lb tensor(-0.28382349)
Number of Verified Splits: 104 of 2338
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.09452438354492188 
BICCOS Cumulative time: 0.881054162979126
Preprocessing time: 0.07409214973449707 Inference time: 0.016389131546020508 Add cuts time: 0.003215789794921875 Cut analysis time: 0.0008273124694824219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.28382 (16), -0.28305 (16), -0.27840 (16), -0.27769 (16), -0.27723 (16), -0.27675 (16), -0.27650 (16), -0.27495 (16), -0.27438 (16), -0.27338 (16), -0.27147 (16), -0.27147 (16), -0.27132 (16), -0.27090 (16), -0.27011 (16), -0.26973 (16), -0.26955 (16), -0.26921 (16), -0.26903 (16), -0.26846 (16), 
Length of domains: 2234
Time: pickout 0.0153    decision 0.3138    set_bounds 0.1159    solve 0.2981    add 0.0977    
Accumulated time: pickout 0.1590    decision 1.0972    set_bounds 0.3593    solve 2.1512    add 1.3550    
Current (lb-rhs): -0.28382349014282227
4904 domains visited
Cumulative time: 6.160852432250977

BaB round 8
batch: 2234
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-8, 1900] [/input-8, 556] [/input-8, 1900] [/input-8, 1900] [/input-12, 55] [/input-12, 55] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.28112250566482544
10 lb beta sum: 0.39000454545021057, worst -0.2793538570404053
Time: prepare 0.1060    bound 0.3095    transfer 0.0120    finalize 0.0277    func 0.4850    
Accumulated time: func 2.6852    prepare 0.3072    bound 2.0025    transfer 0.0504    finalize 0.0761    
all_split False
======================Cut inference begins======================
max lb tensor(0.10401458) min lb tensor(-0.27933848)
Number of Verified Splits: 215 of 4468
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 9
#cuts 4-6: 9
#cuts 7-9: 18
#cuts >= 20: 0
BICCOS time: 0.1775054931640625 
BICCOS Cumulative time: 1.0585596561431885
Preprocessing time: 0.13816237449645996 Inference time: 0.032299041748046875 Add cuts time: 0.005102872848510742 Cut analysis time: 0.0019412040710449219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27934 (17), -0.27861 (17), -0.27394 (17), -0.27325 (17), -0.27260 (17), -0.27210 (17), -0.27188 (17), -0.27043 (17), -0.26925 (17), -0.26828 (17), -0.26691 (17), -0.26677 (17), -0.26674 (17), -0.26637 (17), -0.26535 (17), -0.26521 (17), -0.26503 (17), -0.26471 (17), -0.26427 (17), -0.26399 (17), 
Length of domains: 4253
Time: pickout 0.0459    decision 0.1330    set_bounds 0.3715    solve 0.4865    add 0.1459    
Accumulated time: pickout 0.2049    decision 1.2302    set_bounds 0.7308    solve 2.6376    add 1.5009    
Current (lb-rhs): -0.2793384790420532
9157 domains visited
Cumulative time: 7.534186124801636

BaB round 9
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 100] [/input-8, 1900] [/input-8, 100] [/input-8, 100] [/input-8, 100] [/input-8, 1900] [/input-8, 100] [/input, 2472] [/input-8, 100] [/input-8, 1900] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.27737337350845337
10 lb beta sum: 0.3825492262840271, worst -0.27557748556137085
Time: prepare 0.1993    bound 0.5070    transfer 0.0529    finalize 0.0527    func 0.8672    
Accumulated time: func 3.5524    prepare 0.5068    bound 2.5096    transfer 0.1033    finalize 0.1288    
all_split False
======================Cut inference begins======================
max lb tensor(0.27564311) min lb tensor(-0.27555215)
Number of Verified Splits: 784 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 73.
#cuts 1-3: 9
#cuts 4-6: 25
#cuts 7-9: 37
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.6341891288757324 
BICCOS Cumulative time: 1.692748785018921
Preprocessing time: 0.25387120246887207 Inference time: 0.3480713367462158 Add cuts time: 0.02768421173095703 Cut analysis time: 0.0045623779296875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27555 (18), -0.27014 (18), -0.26918 (18), -0.26895 (18), -0.26874 (18), -0.26833 (18), -0.26794 (18), -0.26642 (18), -0.26380 (18), -0.26356 (18), -0.26260 (18), -0.26229 (18), -0.26145 (18), -0.26095 (18), -0.26087 (18), -0.26017 (18), -0.25992 (18), -0.25980 (18), -0.25811 (18), -0.25742 (18), 
Length of domains: 7565
Time: pickout 0.0680    decision 0.2314    set_bounds 0.5118    solve 0.8692    add 0.0391    
Accumulated time: pickout 0.2728    decision 1.4616    set_bounds 1.2426    solve 3.5068    add 1.5399    
Current (lb-rhs): -0.2755521535873413
16565 domains visited
current_vram/total_varm: 24.0GB/99.9GB, batch_size increase to 8192
Cumulative time: 9.90557599067688

BaB round 10
batch: 7565
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-8, 1892] [/input-12, 55] [/input-8, 1900] [/input-8, 1900] [/input-12, 37] [/input-8, 100] [/input-8, 1892] [/input-12, 55] [/input-8, 1892] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.27464210987091064
10 lb beta sum: 0.3832336664199829, worst -0.2728889584541321
Time: prepare 0.3659    bound 1.2520    transfer 0.1450    finalize 0.1255    func 1.9939    
Accumulated time: func 5.5463    prepare 0.8731    bound 3.7616    transfer 0.2483    finalize 0.2543    
all_split False
======================Cut inference begins======================
max lb tensor(0.27503014) min lb tensor(-0.27288055)
Number of Verified Splits: 2709 of 15130
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 130.
#cuts 1-3: 13
#cuts 4-6: 56
#cuts 7-9: 58
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 1.1885857582092285 
BICCOS Cumulative time: 2.8813345432281494
Preprocessing time: 0.5629913806915283 Inference time: 0.4942171573638916 Add cuts time: 0.12414956092834473 Cut analysis time: 0.007227659225463867
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27288 (19), -0.26745 (19), -0.26600 (19), -0.26552 (19), -0.26528 (19), -0.26522 (19), -0.25990 (19), -0.25988 (19), -0.25980 (19), -0.25865 (19), -0.25843 (19), -0.25833 (19), -0.25821 (19), -0.25819 (19), -0.25794 (19), -0.25714 (19), -0.25623 (19), -0.25605 (19), -0.25532 (19), -0.25530 (19), 
Length of domains: 12421
Time: pickout 0.1703    decision 0.4170    set_bounds 0.8562    solve 2.3981    add 0.1819    
Accumulated time: pickout 0.4431    decision 1.8786    set_bounds 2.0989    solve 5.9049    add 1.7219    
Current (lb-rhs): -0.27288055419921875
28986 domains visited
Cumulative time: 15.219700336456299

BaB round 11
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 100] [/input-8, 1900] [/input-8, 100] [/input-8, 1884] [/input-8, 100] [/input-8, 100] [/input-8, 100] [/input-12, 55] [/input-8, 100] [/input-12, 55] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2643652558326721
10 lb beta sum: 0.659709095954895, worst -0.2626274824142456
Time: prepare 0.4443    bound 1.4093    transfer 0.1528    finalize 0.1252    func 2.2404    
Accumulated time: func 7.7867    prepare 1.3178    bound 5.1709    transfer 0.4012    finalize 0.3795    
all_split False
======================Cut inference begins======================
max lb tensor(1.14649570) min lb tensor(-0.26262158)
Number of Verified Splits: 8755 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 20
#cuts 4-6: 11
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 2.5975544452667236 
BICCOS Cumulative time: 5.478888988494873
Preprocessing time: 0.553292989730835 Inference time: 1.806746006011963 Add cuts time: 0.23627996444702148 Cut analysis time: 0.0012354850769042969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27288 (19), -0.26745 (19), -0.26600 (19), -0.26552 (19), -0.26522 (19), -0.26262 (20), -0.25988 (19), -0.25980 (19), -0.25865 (19), -0.25833 (19), -0.25821 (19), -0.25819 (19), -0.25721 (20), -0.25623 (19), -0.25605 (19), -0.25574 (20), -0.25530 (19), -0.25527 (20), -0.25501 (19), -0.25419 (19), 
Length of domains: 11858
Time: pickout 0.1706    decision 0.9228    set_bounds 1.3228    solve 2.2459    add 0.2471    
Accumulated time: pickout 0.6138    decision 2.8014    set_bounds 3.4217    solve 8.1508    add 1.9689    
Current (lb-rhs): -0.27288055419921875
36615 domains visited
current_vram/total_varm: 34.8GB/99.9GB, batch_size increase to 16384
Cumulative time: 22.900792837142944

BaB round 12
batch: 11858
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-8, 1884] [/input-8, 1884] [/input-8, 1884] [/input-8, 1884] [/input-8, 1884] [/input-8, 1884] [/input-8, 100] [/input-8, 1884] [/input-8, 1884] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2710148096084595
10 lb beta sum: 1.1211390495300293, worst -0.2692500650882721
Time: prepare 0.6404    bound 1.8480    transfer 0.2561    finalize 0.1829    func 3.0887    
Accumulated time: func 10.8754    prepare 1.9586    bound 7.0189    transfer 0.6572    finalize 0.5624    
all_split False
======================Cut inference begins======================
max lb tensor(1.27855897) min lb tensor(-0.26922390)
Number of Verified Splits: 16350 of 23716
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 21
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 4.1924707889556885 
BICCOS Cumulative time: 9.671359777450562
Preprocessing time: 0.8234038352966309 Inference time: 3.0500855445861816 Add cuts time: 0.31803250312805176 Cut analysis time: 0.0009489059448242188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26922 (20), -0.26378 (20), -0.26258 (20), -0.26232 (20), -0.26138 (20), -0.25872 (21), -0.25716 (20), -0.25660 (20), -0.25568 (20), -0.25449 (20), -0.25440 (20), -0.25376 (20), -0.25339 (20), -0.25331 (21), -0.25260 (20), -0.25182 (21), -0.25180 (20), -0.25173 (20), -0.25106 (21), -0.25061 (20), 
Length of domains: 7366
Time: pickout 0.3415    decision 0.6685    set_bounds 1.8338    solve 3.1001    add 0.1612    
Accumulated time: pickout 0.9553    decision 3.4699    set_bounds 5.2555    solve 11.2509    add 2.1301    
Current (lb-rhs): -0.2692238986492157
43981 domains visited
Cumulative time: 33.45866322517395

BaB round 13
batch: 7366
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1892] [/input-8, 1892] [/input-8, 1892] [/input-8, 1892] [/input, 1463] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input, 2474] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.26183414459228516
10 lb beta sum: 1.3366907835006714, worst -0.27676522731781006
Time: prepare 0.4222    bound 1.1761    transfer 0.1227    finalize 0.5773    func 2.4016    
Accumulated time: func 13.2770    prepare 2.3812    bound 8.1950    transfer 0.7799    finalize 1.1397    
all_split False
======================Cut inference begins======================
max lb tensor(0.86157191) min lb tensor(-0.25596213)
Number of Verified Splits: 10466 of 14732
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 27
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 3.022657632827759 
BICCOS Cumulative time: 12.69401741027832
Preprocessing time: 0.6156315803527832 Inference time: 2.2366983890533447 Add cuts time: 0.16930437088012695 Cut analysis time: 0.0010232925415039062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25596 (21), -0.25583 (21), -0.25565 (21), -0.25353 (21), -0.25309 (21), -0.25287 (21), -0.24906 (21), -0.24892 (21), -0.24875 (21), -0.24823 (21), -0.24816 (22), -0.24730 (21), -0.24684 (21), -0.24653 (21), -0.24634 (21), -0.24585 (22), -0.24468 (22), -0.24437 (21), -0.24425 (21), -0.24388 (21), 
Length of domains: 4266
Time: pickout 0.1352    decision 0.7032    set_bounds 0.6678    solve 2.4074    add 0.1498    
Accumulated time: pickout 1.0904    decision 4.1731    set_bounds 5.9233    solve 13.6583    add 2.2799    
Current (lb-rhs): -0.2559621334075928
48247 domains visited
Cumulative time: 40.822352170944214

BaB round 14
batch: 4266
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 100] [/input-8, 84] [/input-8, 1892] [/input-8, 100] [/input-8, 84] [/input-8, 1892] [/input-12, 37] [/input-8, 1892] [/input-8, 1892] [/input-8, 1892] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2544078826904297
10 lb beta sum: 2.186105489730835, worst -0.25267696380615234
Time: prepare 0.2617    bound 0.7266    transfer 0.0749    finalize 0.0747    func 1.1969    
Accumulated time: func 14.4739    prepare 2.6433    bound 8.9215    transfer 0.8548    finalize 1.2143    
all_split False
======================Cut inference begins======================
max lb tensor(0.68443638) min lb tensor(-0.23258996)
Number of Verified Splits: 6839 of 8532
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 1.9673583507537842 
BICCOS Cumulative time: 14.661375761032104
Preprocessing time: 0.3434622287750244 Inference time: 1.5228228569030762 Add cuts time: 0.10050129890441895 Cut analysis time: 0.0005719661712646484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23259 (22), -0.23251 (22), -0.23009 (22), -0.22987 (22), -0.22767 (22), -0.22510 (22), -0.22475 (23), -0.22378 (23), -0.22370 (22), -0.22318 (22), -0.22311 (22), -0.22309 (22), -0.22294 (22), -0.22286 (22), -0.22258 (22), -0.22188 (22), -0.22168 (22), -0.22146 (22), -0.22048 (23), -0.21994 (22), 
Length of domains: 1693
Time: pickout 0.1038    decision 0.2674    set_bounds 0.4272    solve 1.2035    add 0.1330    
Accumulated time: pickout 1.1943    decision 4.4405    set_bounds 6.3506    solve 14.8618    add 2.4129    
Current (lb-rhs): -0.2325899600982666
49940 domains visited
Cumulative time: 45.085479736328125

BaB round 15
batch: 1693
splitting decisions: 
split level 0: [/input-8, 90] [/input, 1463] [/input-8, 1884] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 541] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2453078031539917
10 lb beta sum: 0.28967422246932983, worst -0.0031358301639556885

all verified at 18th iter
Time: prepare 0.1021    bound 0.1864    transfer 0.0112    finalize 0.0277    func 0.3502    
Accumulated time: func 14.8241    prepare 2.7457    bound 9.1080    transfer 0.8660    finalize 1.2421    
all_split False
======================Cut inference begins======================
max lb tensor(0.33332786) min lb tensor(0.00245404)
Number of Verified Splits: 3386 of 3386
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.12065315246582031 
BICCOS Cumulative time: 14.782028913497925
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.1133    decision 0.1143    set_bounds 0.1640    solve 0.3515    add 0.0011    
Accumulated time: pickout 1.3076    decision 4.5548    set_bounds 6.5146    solve 15.2133    add 2.4140    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
49940 domains visited
Cumulative time: 45.98861289024353


Properties batch 1, size 1
Remaining timeout: 152.3928074836731
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 152.3926956653595
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 152.39266777038574
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 152.392644405365
Verifying property 4 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.37226689]], device='cuda:0') need to verify.
Model prediction is: tensor([ -6.08897448, -10.08986378,  -7.39640045,  -7.25407028,  -6.58082294,
         -7.96594858,  -7.83635616,  -8.88062477,  -5.43441010,  -7.92518377],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.37226689]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 737
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 228
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 983
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001010894775390625
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3722628355026245
10 lb beta sum: 0.0, worst -0.37226736545562744
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0542    transfer 0.0001    finalize 0.0001    func 0.0546    
Accumulated time: func 0.0546    prepare 0.0002    bound 0.0542    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] 
split level 1: [/input-12, 58] 
split level 2: [/input-12, 92] 
split level 3: [/input-12, 31] 
split level 4: [/input-12, 60] 
split level 5: [/input-12, 1] 
split level 6: [/input-12, 37] 
split level 7: [/input-12, 26] 
split level 8: [/input-8, 884] 
split level 9: [/input-8, 667] 
split level 10: [/input-8, 539] 
split level 11: [/input, 2232] 
split level 12: [/input, 3512] 
split level 13: [/input-8, 875] 
split level 14: [/input-8, 1956] 
split level 15: [/input, 3513] 
split level 16: [/input-8, 556] 
split level 17: [/input-8, 684] 
split level 18: [/input-8, 867] 
split level 19: [/input-8, 1884] 
split level 20: [/input-8, 659] 
split level 21: [/input, 2248] 
split level 22: [/input-8, 996] 
split level 23: [/input, 3529] 
split level 24: [/input, 1463] 
split level 25: [/input-8, 1876] 
split level 26: [/input-8, 93] 
split level 27: [/input-8, 1052] 
split level 28: [/input-8, 538] 
split level 29: [/input-8, 541] 
split level 30: [/input-8, 1460] 
split level 31: [/input-8, 1061] 
split level 32: [/input, 2521] 
split level 33: [/input, 1736] 
split level 34: [/input-8, 1892] 
split level 35: [/input, 1482] 
split level 36: [/input-8, 1003] 
split level 37: [/input-8, 508] 
split level 38: [/input-8, 92] 
split level 39: [/input-8, 988] 
split level 40: [/input-8, 1867] 
split level 41: [/input-8, 1866] 
split level 42: [/input-8, 1461] 
split level 43: [/input, 2264] 
split level 44: [/input-8, 860] 
split level 45: [/input, 1466] 
split level 46: [/input, 3272] 
split level 47: [/input-8, 801] 
split level 48: [/input-8, 1881] 
split level 49: [/input-8, 2044] 
split level 50: [/input-8, 1893] 
split level 51: [/input-8, 806] 
split level 52: [/input, 3018] 
split level 53: [/input, 3254] 
split level 54: [/input-8, 406] 
split level 55: [/input-8, 394] 
split level 56: [/input-8, 1305] 
split level 57: [/input, 3271] 
split level 58: [/input-8, 431] 
split level 59: [/input-8, 319] 
split level 60: [/input, 3704] 
split level 61: [/input, 2227] 
split level 62: [/input, 3306] 
split level 63: [/input, 3688] 
split level 64: [/input, 2251] 
split level 65: [/input-8, 90] 
split level 66: [/input, 2376] 
split level 67: [/input, 1357] 
split level 68: [/input, 2533] 
split level 69: [/input-8, 419] 
split level 70: [/input, 1717] 
split level 71: [/input, 1703] 
split level 72: [/input, 3287] 
split level 73: [/input-8, 1885] 
split level 74: [/input, 1300] 
split level 75: [/input, 3786] 
split level 76: [/input, 2332] 
split level 77: [/input, 3299] 
split level 78: [/input, 2472] 
split level 79: [/input-8, 1259] 
split level 80: [/input-8, 1123] 
split level 81: [/input, 2524] 
split level 82: [/input-8, 1910] 
split level 83: [/input, 3289] 
split level 84: [/input-8, 2016] 
split level 85: [/input-8, 395] 
split level 86: [/input-8, 507] 
split level 87: [/input, 1756] 
split level 88: [/input-8, 1048] 
split level 89: [/input-8, 1121] 
split level 90: [/input, 3305] 
split level 91: [/input-8, 2045] 
split level 92: [/input, 2515] 
split level 93: [/input-8, 2043] 
split level 94: [/input, 2506] 
split level 95: [/input-8, 1900] 
split level 96: [/input, 3290] 
split level 97: [/input-8, 1443] 
split level 98: [/input, 3310] 
split level 99: [/input, 3301] 
split level 100: [/input, 2514] 
split level 101: [/input, 2381] 
split level 102: [/input, 2076] 
split level 103: [/input-8, 1308] 
split level 104: [/input, 3548] 
split level 105: [/input, 3274] 
split level 106: [/input, 2092] 
split level 107: [/input, 1733] 
split level 108: [/input, 3269] 
split level 109: [/input-8, 1249] 
split level 110: [/input, 2379] 
split level 111: [/input, 3532] 
split level 112: [/input-8, 1909] 
split level 113: [/input-8, 1253] 
split level 114: [/input, 3282] 
split level 115: [/input, 3186] 
split level 116: [/input, 2920] 
split level 117: [/input, 2386] 
split level 118: [/input, 2534] 
split level 119: [/input, 2252] 
split level 120: [/input, 2433] 
split level 121: [/input, 3363] 
split level 122: [/input, 3783] 
split level 123: [/input, 3257] 
split level 124: [/input, 2382] 
split level 125: [/input, 3143] 
split level 126: [/input, 3297] 
split level 127: [/input, 2557] 
split level 128: [/input, 2936] 
split level 129: [/input-8, 2047] 
split level 130: [/input, 1754] 
split level 131: [/input-8, 397] 
split level 132: [/input, 2083] 
split level 133: [/input, 2540] 
split level 134: [/input-8, 1449] 
split level 135: [/input, 3128] 
split level 136: [/input, 1768] 
split level 137: [/input, 2397] 
split level 138: [/input, 2967] 
split level 139: [/input-8, 1583] 
split level 140: [/input, 2267] 
split level 141: [/input, 423] 
split level 142: [/input, 3475] 
split level 143: [/input, 3106] 
split level 144: [/input, 2363] 
split level 145: [/input, 2982] 
split level 146: [/input-8, 551] 
split level 147: [/input, 1751] 
split level 148: [/input, 2364] 
split level 149: [/input-8, 945] 
split level 150: [/input, 3116] 
split level 151: [/input, 2470] 
split level 152: [/input-8, 1021] 
split level 153: [/input-8, 84] 
split level 154: [/input, 2398] 
split level 155: [/input-8, 980] 
split level 156: [/input, 2353] 
split level 157: [/input, 1500] 
split level 158: [/input, 3672] 
split level 159: [/input, 273] 
split level 160: [/input, 1771] 
split level 161: [/input, 3754] 
split level 162: [/input, 2510] 
split level 163: [/input, 2455] 
split level 164: [/input, 3687] 
split level 165: [/input, 3734] 
split level 166: [/input, 3703] 
split level 167: [/input, 3102] 
split level 168: [/input, 2345] 
split level 169: [/input, 3134] 
split level 170: [/input, 2473] 
split level 171: [/input-8, 2042] 
split level 172: [/input, 3278] 
split level 173: [/input, 3822] 
split level 174: [/input, 3105] 
split level 175: [/input, 3833] 
split level 176: [/input, 2089] 
split level 177: [/input, 3131] 
split level 178: [/input, 2952] 
split level 179: [/input, 2346] 
split level 180: [/input, 3356] 
split level 181: [/input, 3182] 
split level 182: [/input, 2369] 
split level 183: [/input-8, 267] 
split level 184: [/input, 3174] 
split level 185: [/input-8, 1422] 
split level 186: [/input, 3719] 
split level 187: [/input, 2330] 
split level 188: [/input, 3820] 
split level 189: [/input, 3834] 
split level 190: [/input, 3054] 
split level 191: [/input, 3153] 
split level 192: [/input-8, 1887] 
split level 193: [/input, 3832] 
split level 194: [/input, 1560] 
split level 195: [/input, 3821] 
split level 196: [/input, 2413] 
split level 197: [/input, 2374] 
split level 198: [/input, 3388] 
split level 199: [/input, 3091] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3721960783004761
10 lb beta sum: 0.0, worst -0.3721959590911865
Time: prepare 0.0115    bound 0.0978    transfer 0.0009    finalize 0.0030    func 0.1158    
Accumulated time: func 0.1705    prepare 0.0217    bound 0.1519    transfer 0.0010    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.36779571) min lb tensor(-0.37219298)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010895490646362305 
BICCOS Cumulative time: 0.010895490646362305
Preprocessing time: 0.010392189025878906 Inference time: 0.00015997886657714844 Add cuts time: 9.131431579589844e-05 Cut analysis time: 0.00025200843811035156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.35942 (1), -0.35940 (1), -0.35908 (1), -0.35830 (1), -0.35790 (1), -0.35784 (1), -0.35783 (1), -0.35736 (1), -0.35681 (1), -0.35570 (1), -0.35426 (1), -0.35413 (1), -0.35333 (1), -0.35273 (1), -0.35246 (1), -0.35137 (1), -0.35134 (1), -0.35101 (1), -0.35090 (1), -0.34999 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5119    set_bounds 0.0095    solve 0.1160    add 0.2032    
Accumulated time: pickout 0.0003    decision 0.5119    set_bounds 0.0095    solve 0.1160    add 0.2032    
Current (lb-rhs): -0.35942327976226807
50 domains visited
Cumulative time: 0.9286308288574219

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 1: [/input-12, 31] [/input-12, 60] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 60] [/input-12, 31] [/input-12, 31] [/input-12, 60] [/input-12, 31] 
split level 2: [/input-12, 1] [/input-12, 37] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 31] [/input-12, 60] [/input-12, 60] [/input-12, 31] [/input-12, 60] 
split level 3: [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3526493310928345
10 lb beta sum: 0.5643506646156311, worst -0.33969202637672424
Time: prepare 0.0077    bound 0.1182    transfer 0.0008    finalize 0.0026    func 0.1318    
Accumulated time: func 0.3023    prepare 0.0296    bound 0.2701    transfer 0.0018    finalize 0.0057    
all_split False
======================Cut inference begins======================
max lb tensor(0.72321606) min lb tensor(-0.33943397)
Number of Verified Splits: 54 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.016083240509033203 
BICCOS Cumulative time: 0.026978731155395508
Preprocessing time: 0.012332916259765625 Inference time: 0.001997709274291992 Add cuts time: 0.001461029052734375 Cut analysis time: 0.00029158592224121094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21029 (2), -0.20994 (2), -0.20761 (2), -0.20678 (2), -0.20601 (2), -0.20457 (2), -0.20285 (2), -0.20250 (2), -0.20185 (2), -0.20177 (2), -0.20170 (2), -0.20130 (2), -0.20098 (2), -0.19993 (2), -0.19957 (2), -0.19841 (2), -0.19781 (2), -0.19734 (2), -0.19729 (2), -0.19595 (2), 
Length of domains: 50
Time: pickout 0.0079    decision 0.0251    set_bounds 0.0123    solve 0.1319    add 0.2064    
Accumulated time: pickout 0.0083    decision 0.5370    set_bounds 0.0218    solve 0.2479    add 0.4095    
Current (lb-rhs): -0.21029455959796906
100 domains visited
Cumulative time: 1.3354377746582031

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 31] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 31] [/input-12, 31] [/input-12, 60] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 60] [/input-12, 60] 
split level 2: [/input-12, 26] [/input-12, 26] [/input-12, 1] [/input-12, 1] [/input-12, 37] [/input-12, 37] [/input-12, 1] [/input-12, 1] [/input-12, 37] [/input-12, 37] 
split level 3: [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6980790495872498, worst -0.21029455959796906
10 lb beta sum: 0.6980790495872498, worst -0.20820647478103638
Time: prepare 0.0170    bound 0.1177    transfer 0.0008    finalize 0.0024    func 0.1405    
Accumulated time: func 0.4428    prepare 0.0469    bound 0.3878    transfer 0.0026    finalize 0.0080    
all_split False
======================Cut inference begins======================
max lb tensor(0.42944163) min lb tensor(-0.20763475)
Number of Verified Splits: 74 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.01718282699584961 
BICCOS Cumulative time: 0.04416155815124512
Preprocessing time: 0.01192164421081543 Inference time: 0.0029609203338623047 Add cuts time: 0.001976490020751953 Cut analysis time: 0.0003237724304199219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08857 (3), -0.08850 (3), -0.08690 (3), -0.08676 (3), -0.08634 (3), -0.08619 (3), -0.08615 (3), -0.08609 (3), -0.08597 (3), -0.08474 (3), -0.08473 (3), -0.08456 (3), -0.08372 (3), -0.08363 (3), -0.08221 (3), -0.08218 (3), -0.08210 (3), -0.08126 (3), -0.08095 (3), -0.07994 (3), 
Length of domains: 50
Time: pickout 0.0079    decision 0.0196    set_bounds 0.0157    solve 0.1406    add 0.2157    
Accumulated time: pickout 0.0162    decision 0.5566    set_bounds 0.0376    solve 0.3885    add 0.6253    
Current (lb-rhs): -0.0885726809501648
150 domains visited
Cumulative time: 1.759498119354248

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-8, 556] [/input-8, 556] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-8, 556] [/input-8, 556] [/input-8, 556] [/input-8, 556] 
split level 3: [/input-8, 1003] [/input-8, 1003] [/input-8, 875] [/input-8, 875] [/input-8, 875] [/input-8, 875] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1033318042755127
10 lb beta sum: 0.5456057190895081, worst -0.0874117910861969
Time: prepare 0.0078    bound 0.1177    transfer 0.0008    finalize 0.0031    func 0.1320    
Accumulated time: func 0.5749    prepare 0.0550    bound 0.5055    transfer 0.0034    finalize 0.0111    
all_split False
======================Cut inference begins======================
max lb tensor(0.64688587) min lb tensor(-0.08471373)
Number of Verified Splits: 209 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 5
#cuts 4-6: 17
#cuts >= 20: 0
BICCOS time: 0.026803970336914062 
BICCOS Cumulative time: 0.07096552848815918
Preprocessing time: 0.011962413787841797 Inference time: 0.009804725646972656 Add cuts time: 0.004219532012939453 Cut analysis time: 0.0008172988891601562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02610 (4), -0.02608 (4), -0.02606 (4), -0.02605 (4), -0.02600 (4), -0.02500 (4), -0.02473 (4), -0.02472 (4), -0.02456 (4), -0.02431 (4), -0.02424 (4), -0.02415 (4), -0.02399 (4), -0.02395 (4), -0.02394 (4), -0.02380 (4), -0.02373 (4), -0.02244 (4), -0.02244 (4), -0.02184 (4), 
Length of domains: 50
Time: pickout 0.0078    decision 0.0199    set_bounds 0.0152    solve 0.1321    add 0.2298    
Accumulated time: pickout 0.0240    decision 0.5764    set_bounds 0.0528    solve 0.5207    add 0.8550    
Current (lb-rhs): -0.02609953284263611
200 domains visited
Cumulative time: 2.198021173477173

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 1: [/input-12, 31] [/input-12, 31] [/input-12, 1] [/input-12, 1] [/input-12, 31] [/input-12, 1] [/input-12, 1] [/input-12, 31] [/input-12, 31] [/input-12, 1] 
split level 2: [/input-12, 60] [/input-12, 1] [/input-12, 26] [/input-12, 26] [/input-12, 60] [/input-8, 875] [/input-8, 875] [/input-12, 60] [/input-12, 60] [/input-8, 875] 
split level 3: [/input-12, 37] [/input-8, 988] [/input-8, 867] [/input-8, 867] [/input-12, 37] [/input-8, 867] [/input-8, 867] [/input-12, 37] [/input-12, 37] [/input-8, 867] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08739805221557617
10 lb beta sum: 0.9522861838340759, worst -0.017089366912841797
Time: prepare 0.0083    bound 0.1480    transfer 0.0009    finalize 0.0025    func 0.1623    
Accumulated time: func 0.7372    prepare 0.0636    bound 0.6535    transfer 0.0042    finalize 0.0136    
all_split False
======================Cut inference begins======================
max lb tensor(0.67924082) min lb tensor(-0.01332736)
Number of Verified Splits: 377 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 4
#cuts 4-6: 15
#cuts >= 20: 0
BICCOS time: 0.2387256622314453 
BICCOS Cumulative time: 0.3096911907196045
Preprocessing time: 0.011542081832885742 Inference time: 0.2147693634033203 Add cuts time: 0.01161050796508789 Cut analysis time: 0.0008037090301513672
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0078    decision 0.0197    set_bounds 0.0156    solve 0.1624    add 0.0288    
Accumulated time: pickout 0.0318    decision 0.5961    set_bounds 0.0683    solve 0.6831    add 0.8838    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] 
split level 1: [/input-12, 92] 
split level 2: [/input-12, 31] 
split level 3: [/input-12, 60] 
split level 4: [/input-12, 37] 
split level 5: [/input-12, 26] 
split level 6: [/input-8, 875] 
split level 7: [/input-8, 556] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11212301254272461
10 lb beta sum: 0.25752532482147217, worst -0.0985807478427887
Time: prepare 0.0051    bound 0.1466    transfer 0.0007    finalize 0.0017    func 0.1559    
Accumulated time: func 0.8931    prepare 0.0692    bound 0.8001    transfer 0.0049    finalize 0.0154    
all_split False
======================Cut inference begins======================
max lb tensor(0.29884952) min lb tensor(-0.09846275)
Number of Verified Splits: 207 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2762770652770996
10 lb beta sum: 0.7798986434936523, worst -0.2560952305793762
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 4
#cuts 4-6: 17
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.2764620780944824 
BICCOS Cumulative time: 0.5861532688140869
Preprocessing time: 0.007294416427612305 Inference time: 0.26272106170654297 Add cuts time: 0.0053865909576416016 Cut analysis time: 0.0010600090026855469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09846 (8), -0.09634 (8), -0.09440 (8), -0.09080 (8), -0.09017 (8), -0.08796 (8), -0.08733 (8), -0.08361 (8), -0.07756 (8), -0.07685 (8), -0.07548 (8), -0.07475 (8), -0.07467 (8), -0.07394 (8), -0.07141 (8), -0.07037 (8), -0.06449 (8), -0.06032 (8), -0.06023 (8), -0.05797 (8), 
Length of domains: 49
Time: pickout 0.0004    decision 0.0222    set_bounds 0.0207    solve 0.1559    add 0.0659    
Accumulated time: pickout 0.0322    decision 0.6183    set_bounds 0.0890    solve 0.8390    add 0.9497    
Current (lb-rhs): -0.09846274554729462
249 domains visited
Cumulative time: 3.2296273708343506

BaB round 2
batch: 49
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-8, 867] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-8, 867] [/input-12, 1] 
split level 2: [/input-8, 867] [/input-8, 867] [/input-8, 1460] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 1460] [/input-8, 867] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08602166175842285
10 lb beta sum: 0.031227178871631622, worst -0.0858234167098999
Time: prepare 0.0081    bound 0.1497    transfer 0.0008    finalize 0.0021    func 0.1633    
Accumulated time: func 1.0564    prepare 0.0777    bound 0.9498    transfer 0.0058    finalize 0.0174    
all_split False
======================Cut inference begins======================
max lb tensor(0.61335945) min lb tensor(-0.08576059)
Number of Verified Splits: 296 of 392
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.300309419631958
10 lb beta sum: 0.2762296199798584, worst -0.20151546597480774
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 4
#cuts 4-6: 17
#cuts 7-9: 8
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 0.3417072296142578 
BICCOS Cumulative time: 0.9278604984283447
Preprocessing time: 0.011757612228393555 Inference time: 0.31861305236816406 Add cuts time: 0.009885787963867188 Cut analysis time: 0.0014507770538330078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08576 (11), -0.08397 (11), -0.08271 (11), -0.07939 (11), -0.07641 (11), -0.07617 (11), -0.07517 (11), -0.07486 (11), -0.07449 (11), -0.07439 (11), -0.07172 (11), -0.07132 (11), -0.06961 (11), -0.06944 (11), -0.06771 (11), -0.06613 (11), -0.06245 (11), -0.06161 (11), -0.06139 (11), -0.06080 (11), 
Length of domains: 96
Time: pickout 0.0071    decision 0.0246    set_bounds 0.0340    solve 0.1640    add 0.0761    
Accumulated time: pickout 0.0393    decision 0.6429    set_bounds 0.1230    solve 1.0030    add 1.0258    
Current (lb-rhs): -0.08576059341430664
345 domains visited
Cumulative time: 3.8890392780303955

BaB round 3
batch: 96
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1061] [/input-8, 659] [/input-12, 1] [/input-8, 659] [/input-8, 659] [/input-8, 659] [/input-8, 1061] [/input-8, 1061] [/input-12, 1] [/input-8, 659] 
split level 1: [/input-8, 538] [/input-8, 538] [/input-8, 1061] [/input-8, 538] [/input-8, 541] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 1061] [/input, 1463] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07200682163238525
10 lb beta sum: 0.012861430644989014, worst -0.07188081741333008
Time: prepare 0.0090    bound 0.1672    transfer 0.0015    finalize 0.0027    func 0.1830    
Accumulated time: func 1.2394    prepare 0.0869    bound 1.1170    transfer 0.0073    finalize 0.0201    
all_split False
======================Cut inference begins======================
max lb tensor(0.07644153) min lb tensor(-0.07183361)
Number of Verified Splits: 107 of 384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 6
#cuts 4-6: 18
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.027463912963867188 
BICCOS Cumulative time: 0.9553244113922119
Preprocessing time: 0.011889219284057617 Inference time: 0.010881662368774414 Add cuts time: 0.003457784652709961 Cut analysis time: 0.0012352466583251953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07183 (13), -0.06772 (13), -0.06531 (13), -0.06400 (13), -0.06320 (13), -0.06313 (13), -0.06235 (13), -0.06226 (13), -0.06214 (13), -0.06048 (13), -0.06046 (13), -0.05931 (13), -0.05910 (13), -0.05885 (13), -0.05873 (13), -0.05843 (13), -0.05768 (13), -0.05723 (13), -0.05660 (13), -0.05614 (13), 
Length of domains: 277
Time: pickout 0.0172    decision 0.0202    set_bounds 0.0238    solve 0.1831    add 0.0776    
Accumulated time: pickout 0.0565    decision 0.6631    set_bounds 0.1468    solve 1.1861    add 1.1034    
Current (lb-rhs): -0.07183361053466797
622 domains visited
Cumulative time: 4.246959209442139

BaB round 4
batch: 277
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 659] [/input-8, 1061] [/input, 3529] [/input, 3529] [/input, 3529] [/input-8, 659] [/input, 3529] [/input, 3529] [/input, 1463] [/input-8, 659] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06809210777282715
10 lb beta sum: 0.012330682016909122, worst -0.06804966926574707
Time: prepare 0.0140    bound 0.1756    transfer 0.0021    finalize 0.0036    func 0.1990    
Accumulated time: func 1.4384    prepare 0.1012    bound 1.2926    transfer 0.0094    finalize 0.0237    
all_split False
======================Cut inference begins======================
max lb tensor(0.05676007) min lb tensor(-0.06803274)
Number of Verified Splits: 186 of 554
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 11
#cuts 4-6: 18
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.04059576988220215 
BICCOS Cumulative time: 0.9959201812744141
Preprocessing time: 0.016769886016845703 Inference time: 0.01969742774963379 Add cuts time: 0.0029954910278320312 Cut analysis time: 0.001132965087890625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06803 (14), -0.06380 (14), -0.06007 (14), -0.05942 (14), -0.05832 (14), -0.05780 (14), -0.05772 (14), -0.05522 (14), -0.05483 (14), -0.05445 (14), -0.05267 (14), -0.05173 (14), -0.05153 (14), -0.05134 (14), -0.05099 (14), -0.05093 (14), -0.05089 (14), -0.05083 (14), -0.05020 (14), -0.05014 (14), 
Length of domains: 368
Time: pickout 0.0168    decision 0.0297    set_bounds 0.0211    solve 0.2002    add 0.0837    
Accumulated time: pickout 0.0733    decision 0.6928    set_bounds 0.1679    solve 1.3863    add 1.1871    
Current (lb-rhs): -0.06803274154663086
990 domains visited
Cumulative time: 4.6479291915893555

BaB round 5
batch: 368
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3529] [/input, 1463] [/input-8, 884] [/input, 3529] [/input-8, 1052] [/input-8, 538] [/input-8, 538] [/input, 1463] [/input, 3529] [/input-8, 659] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05946636199951172
10 lb beta sum: 0.013806371949613094, worst -0.05934596061706543
Time: prepare 0.0190    bound 0.1767    transfer 0.0089    finalize 0.0050    func 0.2145    
Accumulated time: func 1.6529    prepare 0.1204    bound 1.4693    transfer 0.0183    finalize 0.0287    
all_split False
======================Cut inference begins======================
max lb tensor(0.32346621) min lb tensor(-0.05929434)
Number of Verified Splits: 194 of 736
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 8
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.047435760498046875 
BICCOS Cumulative time: 1.043355941772461
Preprocessing time: 0.022858619689941406 Inference time: 0.02164316177368164 Add cuts time: 0.0024814605712890625 Cut analysis time: 0.0004525184631347656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05929 (15), -0.05790 (15), -0.05632 (15), -0.05413 (15), -0.05407 (15), -0.05076 (15), -0.05065 (15), -0.05024 (15), -0.04961 (15), -0.04916 (15), -0.04881 (15), -0.04798 (15), -0.04782 (15), -0.04772 (15), -0.04713 (15), -0.04650 (15), -0.04604 (15), -0.04541 (15), -0.04525 (15), -0.04523 (15), 
Length of domains: 542
Time: pickout 0.0175    decision 0.0325    set_bounds 0.0312    solve 0.2147    add 0.1060    
Accumulated time: pickout 0.0908    decision 0.7253    set_bounds 0.1991    solve 1.6010    add 1.2931    
Current (lb-rhs): -0.05929434299468994
1532 domains visited
Cumulative time: 5.10652756690979

BaB round 6
batch: 542
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1463] [/input-8, 1003] [/input, 1463] [/input, 1463] [/input, 1463] [/input-8, 1003] [/input, 3529] [/input, 1736] [/input, 3529] [/input-8, 1003] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05175435543060303
10 lb beta sum: 0.12160137295722961, worst -0.05150628089904785
Time: prepare 0.0281    bound 0.1649    transfer 0.0031    finalize 0.0059    func 0.2098    
Accumulated time: func 1.8627    prepare 0.1487    bound 1.6341    transfer 0.0214    finalize 0.0346    
all_split False
======================Cut inference begins======================
max lb tensor(0.41682744) min lb tensor(-0.05148530)
Number of Verified Splits: 719 of 1084
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.11354541778564453 
BICCOS Cumulative time: 1.1569013595581055
Preprocessing time: 0.03327226638793945 Inference time: 0.07325267791748047 Add cuts time: 0.00651097297668457 Cut analysis time: 0.0005095005035400391
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05149 (16), -0.04949 (16), -0.04853 (16), -0.04831 (16), -0.04828 (16), -0.04808 (16), -0.04652 (16), -0.04595 (16), -0.04497 (16), -0.04443 (16), -0.04421 (16), -0.04229 (16), -0.04226 (16), -0.04196 (16), -0.04154 (16), -0.04118 (16), -0.04109 (16), -0.04046 (16), -0.04002 (16), -0.03969 (16), 
Length of domains: 365
Time: pickout 0.0633    decision 0.0440    set_bounds 0.0503    solve 0.2102    add 0.0848    
Accumulated time: pickout 0.1541    decision 0.7693    set_bounds 0.2494    solve 1.8112    add 1.3779    
Current (lb-rhs): -0.051485300064086914
1897 domains visited
Cumulative time: 5.683517932891846

BaB round 7
batch: 365
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1460] [/input-8, 884] [/input-8, 884] [/input, 3512] [/input-8, 884] [/input, 1736] [/input, 3512] [/input-8, 1460] [/input-8, 884] [/input-8, 884] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04664921760559082
10 lb beta sum: 0.4672870635986328, worst -0.03836624324321747
Time: prepare 0.0184    bound 0.1545    transfer 0.0013    finalize 0.0042    func 0.1831    
Accumulated time: func 2.0459    prepare 0.1674    bound 1.7887    transfer 0.0227    finalize 0.0388    
all_split False
======================Cut inference begins======================
max lb tensor(0.48571372) min lb tensor(-0.03834146)
Number of Verified Splits: 606 of 730
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.09251785278320312 
BICCOS Cumulative time: 1.2494192123413086
Preprocessing time: 0.021489620208740234 Inference time: 0.0656735897064209 Add cuts time: 0.004906415939331055 Cut analysis time: 0.0004482269287109375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03834 (17), -0.03583 (17), -0.03499 (17), -0.03344 (17), -0.03173 (17), -0.03139 (17), -0.03132 (17), -0.03086 (17), -0.03065 (17), -0.02994 (17), -0.02969 (17), -0.02962 (17), -0.02875 (17), -0.02829 (17), -0.02704 (17), -0.02698 (17), -0.02683 (17), -0.02675 (17), -0.02664 (17), -0.02634 (17), 
Length of domains: 124
Time: pickout 0.0219    decision 0.0330    set_bounds 0.0308    solve 0.1833    add 0.0774    
Accumulated time: pickout 0.1760    decision 0.8022    set_bounds 0.2803    solve 1.9945    add 1.4553    
Current (lb-rhs): -0.0383414626121521
2021 domains visited
Cumulative time: 6.131861448287964

BaB round 8
batch: 124
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 541] [/input-8, 884] [/input-8, 541] [/input-8, 884] [/input-8, 541] [/input-8, 884] [/input-8, 541] [/input-8, 884] [/input-8, 1460] [/input-8, 541] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04134690761566162
10 lb beta sum: 0.7279698848724365, worst -0.027131378650665283
Time: prepare 0.0064    bound 0.1426    transfer 0.0007    finalize 0.0014    func 0.1528    
Accumulated time: func 2.1987    prepare 0.1740    bound 1.9313    transfer 0.0234    finalize 0.0402    
all_split False
======================Cut inference begins======================
max lb tensor(0.03378677) min lb tensor(-0.02707681)
Number of Verified Splits: 89 of 248
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 18
#cuts >= 20: 0
BICCOS time: 0.019489288330078125 
BICCOS Cumulative time: 1.2689085006713867
Preprocessing time: 0.007623195648193359 Inference time: 0.009776592254638672 Add cuts time: 0.0015559196472167969 Cut analysis time: 0.0005335807800292969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02708 (18), -0.02624 (18), -0.02538 (18), -0.02416 (18), -0.02394 (18), -0.02359 (18), -0.02326 (18), -0.02287 (18), -0.02245 (18), -0.02241 (18), -0.02231 (18), -0.02146 (18), -0.02076 (18), -0.02047 (18), -0.02040 (18), -0.02021 (18), -0.02015 (18), -0.02001 (18), -0.01955 (18), -0.01951 (18), 
Length of domains: 159
Time: pickout 0.0138    decision 0.0160    set_bounds 0.0105    solve 0.1529    add 0.0981    
Accumulated time: pickout 0.1898    decision 0.8182    set_bounds 0.2908    solve 2.1474    add 1.5533    
Current (lb-rhs): -0.027076810598373413
2180 domains visited
Cumulative time: 6.45003604888916

BaB round 9
batch: 159
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1736] [/input-8, 1460] [/input, 1736] [/input, 3512] [/input, 1736] [/input, 3512] [/input, 1736] [/input, 3512] [/input-8, 541] [/input-8, 1460] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03646528720855713
10 lb beta sum: 0.6325022578239441, worst -0.023950517177581787
Time: prepare 0.0081    bound 0.1439    transfer 0.0010    finalize 0.0018    func 0.1569    
Accumulated time: func 2.3556    prepare 0.1823    bound 2.0752    transfer 0.0244    finalize 0.0419    
all_split False
======================Cut inference begins======================
max lb tensor(0.05290447) min lb tensor(-0.02393539)
Number of Verified Splits: 179 of 318
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 20
#cuts >= 20: 0
BICCOS time: 0.0330500602722168 
BICCOS Cumulative time: 1.3019585609436035
Preprocessing time: 0.009401798248291016 Inference time: 0.02157306671142578 Add cuts time: 0.0016236305236816406 Cut analysis time: 0.0004515647888183594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02394 (19), -0.02149 (19), -0.02108 (19), -0.02090 (19), -0.02004 (19), -0.01999 (19), -0.01852 (19), -0.01819 (19), -0.01792 (19), -0.01792 (19), -0.01788 (19), -0.01775 (19), -0.01720 (19), -0.01715 (19), -0.01713 (19), -0.01645 (19), -0.01601 (19), -0.01581 (19), -0.01494 (19), -0.01484 (19), 
Length of domains: 139
Time: pickout 0.0527    decision 0.0172    set_bounds 0.0136    solve 0.1570    add 0.0768    
Accumulated time: pickout 0.2425    decision 0.8354    set_bounds 0.3044    solve 2.3043    add 1.6301    
Current (lb-rhs): -0.023935392498970032
2319 domains visited
Cumulative time: 6.8082616329193115

BaB round 10
batch: 139
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3512] [/input, 3512] [/input-8, 541] [/input, 3512] [/input-8, 541] [/input, 3512] [/input-8, 541] [/input, 3512] [/input, 3512] [/input, 3512] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.029908418655395508
10 lb beta sum: 0.5152710676193237, worst -0.021500617265701294
Time: prepare 0.0071    bound 0.1516    transfer 0.0006    finalize 0.0016    func 0.1627    
Accumulated time: func 2.5183    prepare 0.1896    bound 2.2268    transfer 0.0250    finalize 0.0435    
all_split False
======================Cut inference begins======================
max lb tensor(0.11606908) min lb tensor(-0.02148992)
Number of Verified Splits: 223 of 278
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 21
#cuts >= 20: 0
BICCOS time: 0.03736519813537598 
BICCOS Cumulative time: 1.3393237590789795
Preprocessing time: 0.008336067199707031 Inference time: 0.026567697525024414 Add cuts time: 0.001951456069946289 Cut analysis time: 0.0005099773406982422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02149 (20), -0.02090 (20), -0.01974 (20), -0.01851 (20), -0.01845 (20), -0.01792 (20), -0.01792 (20), -0.01771 (20), -0.01674 (20), -0.01549 (20), -0.01494 (20), -0.01489 (20), -0.01475 (20), -0.01325 (20), -0.01260 (20), -0.01228 (20), -0.01192 (20), -0.01025 (20), -0.01001 (20), -0.00963 (20), 
Length of domains: 55
Time: pickout 0.0155    decision 0.0186    set_bounds 0.0118    solve 0.1629    add 0.0617    
Accumulated time: pickout 0.2580    decision 0.8540    set_bounds 0.3161    solve 2.4672    add 1.6918    
Current (lb-rhs): -0.02148991823196411
2374 domains visited
Cumulative time: 7.123834133148193

BaB round 11
batch: 55
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2248] [/input, 2248] [/input, 2248] [/input, 2248] [/input, 2248] [/input, 2248] [/input, 2248] [/input, 2248] [/input, 2248] [/input, 2248] 
split level 1: [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input, 1736] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1460] [/input-8, 1061] [/input-8, 1061] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.019099950790405273
10 lb beta sum: 0.24215032160282135, worst -0.011910438537597656
Time: prepare 0.0057    bound 0.1470    transfer 0.0006    finalize 0.0014    func 0.1567    
Accumulated time: func 2.6750    prepare 0.1957    bound 2.3738    transfer 0.0257    finalize 0.0450    
all_split False
======================Cut inference begins======================
max lb tensor(0.25572905) min lb tensor(-0.01189721)
Number of Verified Splits: 181 of 220
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.20501446723937988 
BICCOS Cumulative time: 1.5443382263183594
Preprocessing time: 0.006804704666137695 Inference time: 0.19557762145996094 Add cuts time: 0.0015652179718017578 Cut analysis time: 0.0010669231414794922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01190 (22), -0.01069 (22), -0.01065 (22), -0.00929 (22), -0.00892 (22), -0.00871 (22), -0.00809 (22), -0.00771 (22), -0.00765 (22), -0.00759 (22), -0.00737 (22), -0.00631 (22), -0.00615 (22), -0.00612 (22), -0.00574 (22), -0.00507 (22), -0.00463 (22), -0.00456 (22), -0.00439 (22), -0.00427 (22), 
Length of domains: 39
Time: pickout 0.0077    decision 0.0155    set_bounds 0.0169    solve 0.1567    add 0.0623    
Accumulated time: pickout 0.2657    decision 0.8695    set_bounds 0.3331    solve 2.6239    add 1.7541    
Current (lb-rhs): -0.01189720630645752
2413 domains visited
Cumulative time: 7.596222639083862

BaB round 12
batch: 39
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 801] [/input-8, 801] [/input-8, 860] [/input-8, 860] [/input-8, 801] [/input-8, 801] [/input-8, 801] [/input-8, 801] [/input-8, 1061] [/input-8, 1061] 
split level 1: [/input-8, 860] [/input-8, 860] [/input-8, 1461] [/input-8, 1461] [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input-8, 1461] [/input-8, 1461] 
split level 2: [/input, 3272] [/input, 3272] [/input, 3272] [/input, 3272] [/input, 3272] [/input, 3272] [/input, 3272] [/input, 3272] [/input-8, 860] [/input-8, 860] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.0022749900817871094

all verified at 0th iter
Time: prepare 0.0079    bound 0.0058    transfer 0.0007    finalize 0.0015    func 0.0179    
Accumulated time: func 2.6929    prepare 0.2037    bound 2.3796    transfer 0.0264    finalize 0.0465    
all_split False
======================Cut inference begins======================
max lb tensor(0.02486968) min lb tensor(0.00227499)
Number of Verified Splits: 312 of 312
No cut inferred: All or none verified.
Total number of valid cuts: 22.
#cuts 1-3: 22
#cuts >= 20: 0
BICCOS time: 0.009327411651611328 
BICCOS Cumulative time: 1.5536656379699707
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0069    decision 0.0139    set_bounds 0.0237    solve 0.0180    add 0.0001    
Accumulated time: pickout 0.2726    decision 0.8834    set_bounds 0.3568    solve 2.6419    add 1.7541    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
2413 domains visited
Cumulative time: 7.6696789264678955


Properties batch 5, size 1
Remaining timeout: 144.4738564491272
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 144.4737672805786
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 144.47374320030212
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 144.4735291004181
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 55.5266 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 188, vnnlib ID: 188 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.91176009, -6.98036766, -2.84487700, -4.53986120, -3.38612461,
         -4.94995880, -5.20888853, -6.30824423, -4.65725613, -6.36737871]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [467]; unstable size 467; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 229, 1, 467] with unstable size 228 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 467] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 467] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [228]; unstable size 228; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 228] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 228] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.97516203,  1.98761415,  0.85461819, -0.25794768,  1.12561297,
          1.30599165,  2.30291891, -0.37233752,  1.60615540]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.91176009, -6.98036766, -2.84487700, -4.53986120, -3.38612461,
         -4.94995880, -5.20888853, -6.30824423, -4.65725613, -6.36737871]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.63235426, -6.99965382, -3.16620398, -4.74267912, -3.64146614,
          -5.16480732, -5.39866543, -6.50665092, -4.55494928, -6.46017027],
         [-2.63235426, -6.99965382, -3.16620398, -4.74267912, -3.64146614,
          -5.16480732, -5.39866543, -6.50665092, -4.55494928, -6.46017027]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.53384972,  0.47526217,  1.38874531]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0075 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0854 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 189, vnnlib ID: 189 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.48303747, -10.29648781,  -4.77946949,  -6.41142654,  -3.71523380,
          -6.92542839,  -5.50940371,  -7.37353468,  -9.88126087,  -9.47254848]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [427]; unstable size 427; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 239, 1, 427] with unstable size 238 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 427] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 427] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [238]; unstable size 238; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 238] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 238] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.48654842, 5.05169964, 0.07906604, 1.63433266, 2.04545832, 0.66316962,
         2.76845431, 4.94088602, 4.35907745]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0663 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 190, vnnlib ID: 190 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.12282085,  -8.68214226, -10.30647087, -10.71084213,  -9.83157253,
         -12.23327827, -10.64780331, -11.54215813,  -3.88245940,  -8.45811939]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [654]; unstable size 654; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 194, 1, 654] with unstable size 193 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 654] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 654] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [193]; unstable size 193; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 193] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 193] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.77125776, 3.34607601, 4.68589306, 5.31103945, 4.23434162, 6.53741407,
         5.22720814, 5.57845974, 3.04642582]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0735 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 191, vnnlib ID: 191 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.91402149, -10.96457195,  -4.60119486,  -3.07470465,  -3.85695314,
          -3.09889174,  -5.81089735,  -5.97126102,  -9.49198723, -10.05299187]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [611]; unstable size 611; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 278, 1, 611] with unstable size 277 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 611] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 611] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [277]; unstable size 277; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 277] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 277] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.15812969,  6.06970549,  0.46179652, -0.24430558, -0.42243251,
          1.52134788,  1.26745129,  4.78580809,  5.02399063]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.91402149, -10.96457195,  -4.60119486,  -3.07470465,  -3.85695314,
          -3.09889174,  -5.81089735,  -5.97126102,  -9.49198723, -10.05299187]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.09659863, -11.14431095,  -4.78569984,  -3.24227643,  -4.00490522,
           -3.02182770,  -6.23932791,  -5.82052755,  -9.75665855, -10.23669529],
         [ -9.09659863, -11.14431095,  -4.78569984,  -3.24227643,  -4.00490522,
           -3.02182770,  -6.23932791,  -5.82052755,  -9.75665855, -10.23669529]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.76262879, -0.22044873]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0061 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0792 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 192, vnnlib ID: 192 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.02367878, -16.68686485,  -9.24556446, -13.41522598, -11.11723232,
         -13.42477131, -11.50259304, -13.30918312, -17.15509415, -16.44651794]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [639]; unstable size 639; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 297, 1, 639] with unstable size 296 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 639] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 639] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [296]; unstable size 296; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 296] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 296] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.69086027, 5.29207325, 2.62997866, 0.65836817, 2.47528219, 0.66326284,
         2.12296391, 6.32425117, 5.31157398]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0728 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 193, vnnlib ID: 193 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.20210648,  -8.82046795, -12.04976559, -10.42980194, -10.17031384,
         -10.70486259, -10.72393131,  -9.02217484, -12.87825584,  -7.13908768]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [635]; unstable size 635; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 211, 1, 635] with unstable size 210 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 635] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 635] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [210]; unstable size 210; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 210] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 210] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.61224699, 0.46522069, 2.92189741, 1.71166277, 1.48281288, 1.75262117,
         1.73563385, 0.26523352, 4.10882807]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0644 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 194, vnnlib ID: 194 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.03137493, -14.28631020,  -6.88360214, -10.38493061,  -7.40738487,
         -10.63051796,  -9.41903210, -11.08277416, -12.21933270, -13.69361401]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [568]; unstable size 568; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 232, 1, 568] with unstable size 231 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 568] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 568] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [231]; unstable size 231; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 231] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 231] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.97099996,  5.75294304,  2.62268925, -0.44995347,  2.71119261,
          1.17250800,  2.60135603,  3.52469110,  4.91072893]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.03137493, -14.28631020,  -6.88360214, -10.38493061,  -7.40738487,
         -10.63051796,  -9.41903210, -11.08277416, -12.21933270, -13.69361401]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.13951874, -14.36657238,  -7.07374001, -10.33502197,  -7.07293224,
          -10.55265427,  -9.27702045, -10.69626236, -12.32909775, -13.79920959]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00080776]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0066 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0807 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 195, vnnlib ID: 195 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.98067474, -6.32652664, -2.95507026, -3.61686778, -3.40175915,
         -3.97366190, -4.56966162, -4.09664774, -7.20802689, -7.00610399]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [544]; unstable size 544; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 205, 1, 544] with unstable size 204 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 544] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 544] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [204]; unstable size 204; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 204] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 204] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.09186649,  1.89036942,  0.01000309, -0.14229447,  0.23984718,
          0.71584237,  0.47055030,  3.11726618,  2.74282694]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.98067474, -6.32652664, -2.95507026, -3.61686778, -3.40175915,
         -3.97366190, -4.56966162, -4.09664774, -7.20802689, -7.00610399]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.11it/s]100%|██████████| 1/1 [00:00<00:00,  9.10it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.00582647, -6.23171902, -3.06578517, -3.62733269, -3.13952780,
          -3.98571920, -4.44840622, -4.01183987, -7.31225204, -6.86313581]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.07374263]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1123 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 11.540647506713867
alpha/beta optimization time: 1.203113317489624
initial alpha-crown bounds: tensor([[ 2.13471961,  1.94881153,  0.04223752, -0.12571049,  0.27321005,
          0.80250478,  0.49562001,  3.17971468,  2.78953934]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.12571048736572266
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.61822819709778
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6181902885437
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.61816787719727
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.61814856529236
Verifying property 3 with 1 instances.
##### Instance 195 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.12571049]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.98067474, -6.32652664, -2.95507026, -3.61686778, -3.40175915,
        -3.97366190, -4.56966162, -4.09664774, -7.20802689, -7.00610399],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.12571049]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is less than 3, enable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 544
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 200
Node /15 input 0: size torch.Size([100]) unstable 13
-----------------
# of unstable neurons: 757
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010395050048828125
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1257106065750122
10 lb beta sum: 0.0, worst -0.1257157325744629
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0523    transfer 0.0001    finalize 0.0001    func 0.0527    
Accumulated time: func 0.0527    prepare 0.0002    bound 0.0523    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] 
split level 1: [/input-12, 58] 
split level 2: [/input-12, 33] 
split level 3: [/input-12, 40] 
split level 4: [/input-8, 179] 
split level 5: [/input-8, 2044] 
split level 6: [/input, 1448] 
split level 7: [/input-8, 296] 
split level 8: [/input-8, 1028] 
split level 9: [/input-8, 2016] 
split level 10: [/input, 1689] 
split level 11: [/input, 1688] 
split level 12: [/input-8, 493] 
split level 13: [/input, 454] 
split level 14: [/input, 1705] 
split level 15: [/input, 2121] 
split level 16: [/input-8, 2042] 
split level 17: [/input, 2105] 
split level 18: [/input-8, 1733] 
split level 19: [/input, 453] 
split level 20: [/input, 298] 
split level 21: [/input, 1321] 
split level 22: [/input, 1305] 
split level 23: [/input-8, 259] 
split level 24: [/input, 3524] 
split level 25: [/input-8, 138] 
split level 26: [/input, 2244] 
split level 27: [/input-8, 2036] 
split level 28: [/input, 362] 
split level 29: [/input-8, 494] 
split level 30: [/input-8, 469] 
split level 31: [/input, 2485] 
split level 32: [/input-8, 787] 
split level 33: [/input-8, 598] 
split level 34: [/input, 1703] 
split level 35: [/input, 3555] 
split level 36: [/input-8, 1053] 
split level 37: [/input-8, 501] 
split level 38: [/input-8, 597] 
split level 39: [/input, 2155] 
split level 40: [/input, 1337] 
split level 41: [/input-8, 477] 
split level 42: [/input, 2578] 
split level 43: [/input-8, 140] 
split level 44: [/input-8, 439] 
split level 45: [/input, 3237] 
split level 46: [/input-8, 452] 
split level 47: [/input-8, 423] 
split level 48: [/input, 77] 
split level 49: [/input-8, 2045] 
split level 50: [/input, 2215] 
split level 51: [/input-8, 2031] 
split level 52: [/input, 312] 
split level 53: [/input-8, 2035] 
split level 54: [/input, 435] 
split level 55: [/input-8, 921] 
split level 56: [/input-8, 2034] 
split level 57: [/input, 2137] 
split level 58: [/input-8, 473] 
split level 59: [/input-8, 2037] 
split level 60: [/input-8, 980] 
split level 61: [/input, 469] 
split level 62: [/input, 3401] 
split level 63: [/input, 2453] 
split level 64: [/input-8, 925] 
split level 65: [/input, 3385] 
split level 66: [/input-8, 1947] 
split level 67: [/input, 2625] 
split level 68: [/input, 3239] 
split level 69: [/input-8, 872] 
split level 70: [/input-8, 431] 
split level 71: [/input-8, 500] 
split level 72: [/input, 2211] 
split level 73: [/input, 3163] 
split level 74: [/input-8, 2023] 
split level 75: [/input-8, 2025] 
split level 76: [/input-8, 1970] 
split level 77: [/input-8, 1977] 
split level 78: [/input, 3222] 
split level 79: [/input, 438] 
split level 80: [/input, 282] 
split level 81: [/input, 2580] 
split level 82: [/input, 2214] 
split level 83: [/input, 2195] 
split level 84: [/input-8, 924] 
split level 85: [/input, 214] 
split level 86: [/input-8, 478] 
split level 87: [/input, 2473] 
split level 88: [/input-8, 429] 
split level 89: [/input, 3560] 
split level 90: [/input, 213] 
split level 91: [/input, 379] 
split level 92: [/input-8, 486] 
split level 93: [/input, 378] 
split level 94: [/input, 1720] 
split level 95: [/input, 2610] 
split level 96: [/input, 4037] 
split level 97: [/input, 296] 
split level 98: [/input, 3954] 
split level 99: [/input, 3211] 
split level 100: [/input-8, 794] 
split level 101: [/input, 193] 
split level 102: [/input-8, 1925] 
split level 103: [/input-8, 124] 
split level 104: [/input, 2189] 
split level 105: [/input-8, 590] 
split level 106: [/input-8, 2032] 
split level 107: [/input, 401] 
split level 108: [/input, 179] 
split level 109: [/input, 2153] 
split level 110: [/input, 2261] 
split level 111: [/input, 3511] 
split level 112: [/input-8, 1994] 
split level 113: [/input, 197] 
split level 114: [/input, 1355] 
split level 115: [/input, 3220] 
split level 116: [/input-8, 454] 
split level 117: [/input, 1371] 
split level 118: [/input, 2082] 
split level 119: [/input, 2474] 
split level 120: [/input, 2212] 
split level 121: [/input-8, 392] 
split level 122: [/input, 3876] 
split level 123: [/input-8, 398] 
split level 124: [/input, 2196] 
split level 125: [/input-8, 1452] 
split level 126: [/input, 4038] 
split level 127: [/input-8, 1990] 
split level 128: [/input, 102] 
split level 129: [/input, 1339] 
split level 130: [/input, 4020] 
split level 131: [/input, 2089] 
split level 132: [/input, 3801] 
split level 133: [/input, 103] 
split level 134: [/input, 1323] 
split level 135: [/input, 3414] 
split level 136: [/input-8, 2046] 
split level 137: [/input, 2182] 
split level 138: [/input, 199] 
split level 139: [/input, 3196] 
split level 140: [/input-8, 1390] 
split level 141: [/input, 98] 
split level 142: [/input, 3180] 
split level 143: [/input, 68] 
split level 144: [/input, 129] 
split level 145: [/input, 2190] 
split level 146: [/input, 3145] 
split level 147: [/input-8, 449] 
split level 148: [/input-8, 397] 
split level 149: [/input, 196] 
split level 150: [/input, 3161] 
split level 151: [/input, 472] 
split level 152: [/input-8, 1610] 
split level 153: [/input, 1381] 
split level 154: [/input, 3111] 
split level 155: [/input-8, 1989] 
split level 156: [/input, 2075] 
split level 157: [/input, 3226] 
split level 158: [/input-8, 1979] 
split level 159: [/input, 3750] 
split level 160: [/input, 3114] 
split level 161: [/input, 1913] 
split level 162: [/input, 3800] 
split level 163: [/input, 3755] 
split level 164: [/input, 3112] 
split level 165: [/input-8, 1124] 
split level 166: [/input, 111] 
split level 167: [/input, 3047] 
split level 168: [/input, 3081] 
split level 169: [/input, 3429] 
split level 170: [/input, 1576] 
split level 171: [/input, 1592] 
split level 172: [/input, 2280] 
split level 173: [/input-8, 412] 
split level 174: [/input, 3785] 
split level 175: [/input-8, 395] 
split level 176: [/input, 2341] 
split level 177: [/input, 2059] 
split level 178: [/input, 3048] 
split level 179: [/input, 3173] 
split level 180: [/input, 58] 
split level 181: [/input-8, 2022] 
split level 182: [/input, 89] 
split level 183: [/input, 2081] 
split level 184: [/input, 265] 
split level 185: [/input-8, 2006] 
split level 186: [/input-8, 1993] 
split level 187: [/input, 2052] 
split level 188: [/input, 3967] 
split level 189: [/input, 3452] 
split level 190: [/input, 1865] 
split level 191: [/input, 3337] 
split level 192: [/input, 72] 
split level 193: [/input, 3019] 
split level 194: [/input, 3098] 
split level 195: [/input, 2314] 
split level 196: [/input, 464] 
split level 197: [/input, 156] 
split level 198: [/input, 3300] 
split level 199: [/input, 2352] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12571048736572266
10 lb beta sum: 0.0, worst -0.12571024894714355
Time: prepare 0.0114    bound 0.0967    transfer 0.0009    finalize 0.0028    func 0.1144    
Accumulated time: func 0.1672    prepare 0.0213    bound 0.1490    transfer 0.0010    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.02029556) min lb tensor(-0.12570655)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010543584823608398 
BICCOS Cumulative time: 0.010543584823608398
Preprocessing time: 0.010076761245727539 Inference time: 0.00016164779663085938 Add cuts time: 7.605552673339844e-05 Cut analysis time: 0.00022912025451660156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12096 (1), -0.12093 (1), -0.12088 (1), -0.12064 (1), -0.12043 (1), -0.12023 (1), -0.12020 (1), -0.12015 (1), -0.12013 (1), -0.12004 (1), -0.11999 (1), -0.11969 (1), -0.11949 (1), -0.11942 (1), -0.11908 (1), -0.11907 (1), -0.11889 (1), -0.11885 (1), -0.11871 (1), -0.11832 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5035    set_bounds 0.0090    solve 0.1145    add 0.1322    
Accumulated time: pickout 0.0003    decision 0.5035    set_bounds 0.0090    solve 0.1145    add 0.1322    
Current (lb-rhs): -0.12095940113067627
50 domains visited
Cumulative time: 0.8382453918457031

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 33] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 2: [/input-12, 40] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 3: [/input-8, 1028] [/input-12, 40] [/input-8, 1028] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-8, 1028] [/input-12, 40] [/input-12, 40] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11638414859771729
10 lb beta sum: 0.5046915411949158, worst -0.07250544428825378
Time: prepare 0.0079    bound 0.1164    transfer 0.0008    finalize 0.0024    func 0.1302    
Accumulated time: func 0.2973    prepare 0.0295    bound 0.2654    transfer 0.0018    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(0.35519651) min lb tensor(-0.07245600)
Number of Verified Splits: 148 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.0196840763092041 
BICCOS Cumulative time: 0.0302276611328125
Preprocessing time: 0.011965274810791016 Inference time: 0.0054607391357421875 Add cuts time: 0.0020096302032470703 Cut analysis time: 0.0002484321594238281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04607 (2), -0.04596 (2), -0.04589 (2), -0.04579 (2), -0.04568 (2), -0.04561 (2), -0.04554 (2), -0.04540 (2), -0.04534 (2), -0.04534 (2), -0.04508 (2), -0.04505 (2), -0.04491 (2), -0.04477 (2), -0.04465 (2), -0.04457 (2), -0.04434 (2), -0.04421 (2), -0.04383 (2), -0.04373 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0195    set_bounds 0.0112    solve 0.1302    add 0.2083    
Accumulated time: pickout 0.0015    decision 0.5230    set_bounds 0.0202    solve 0.2447    add 0.3405    
Current (lb-rhs): -0.04607148468494415
100 domains visited
Cumulative time: 1.2355151176452637

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 2: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 3: [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8368811011314392, worst -0.04607139527797699
10 lb beta sum: 0.8368811011314392, worst -0.04742388427257538
Time: prepare 0.0177    bound 0.1164    transfer 0.0009    finalize 0.0022    func 0.1402    
Accumulated time: func 0.4375    prepare 0.0475    bound 0.3818    transfer 0.0026    finalize 0.0075    
all_split False
======================Cut inference begins======================
max lb tensor(0.46004456) min lb tensor(-0.04584755)
Number of Verified Splits: 150 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.0210878849029541 
BICCOS Cumulative time: 0.0513155460357666
Preprocessing time: 0.011792182922363281 Inference time: 0.006148099899291992 Add cuts time: 0.0028963088989257812 Cut analysis time: 0.0002512931823730469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03640 (3), -0.03631 (3), -0.03631 (3), -0.03631 (3), -0.03631 (3), -0.03612 (3), -0.03595 (3), -0.03588 (3), -0.03588 (3), -0.03557 (3), -0.03550 (3), -0.03497 (3), -0.03484 (3), -0.03445 (3), -0.03436 (3), -0.03398 (3), -0.03395 (3), -0.03394 (3), -0.03394 (3), -0.03394 (3), 
Length of domains: 50
Time: pickout 0.0083    decision 0.0190    set_bounds 0.0153    solve 0.1403    add 0.2531    
Accumulated time: pickout 0.0098    decision 0.5421    set_bounds 0.0355    solve 0.3850    add 0.5936    
Current (lb-rhs): -0.03640046715736389
150 domains visited
Cumulative time: 1.6998839378356934

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 2: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-8, 2044] 
split level 3: [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 1028] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8377211093902588, worst -0.036400288343429565
10 lb beta sum: 0.8377211093902588, worst -0.03755645453929901
Time: prepare 0.0193    bound 0.1350    transfer 0.0016    finalize 0.0029    func 0.1615    
Accumulated time: func 0.5991    prepare 0.0670    bound 0.5167    transfer 0.0043    finalize 0.0104    
all_split False
======================Cut inference begins======================
max lb tensor(0.46546501) min lb tensor(-0.03631869)
Number of Verified Splits: 135 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.02240443229675293 
BICCOS Cumulative time: 0.07371997833251953
Preprocessing time: 0.01264643669128418 Inference time: 0.006434202194213867 Add cuts time: 0.0030488967895507812 Cut analysis time: 0.00027489662170410156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02527 (4), -0.02527 (4), -0.02527 (4), -0.02520 (4), -0.02519 (4), -0.02519 (4), -0.02519 (4), -0.02517 (4), -0.02511 (4), -0.02511 (4), -0.02511 (4), -0.02508 (4), -0.02508 (4), -0.02508 (4), -0.02508 (4), -0.02484 (4), -0.02418 (4), -0.02415 (4), -0.02400 (4), -0.02387 (4), 
Length of domains: 50
Time: pickout 0.0080    decision 0.0217    set_bounds 0.0182    solve 0.1617    add 0.4891    
Accumulated time: pickout 0.0178    decision 0.5638    set_bounds 0.0536    solve 0.5467    add 1.0827    
Current (lb-rhs): -0.02527274191379547
200 domains visited
Cumulative time: 2.4283032417297363

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 2: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 3: [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input, 89] [/input-8, 2042] [/input-8, 2042] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8371503949165344, worst -0.025272831320762634
10 lb beta sum: 0.8371503949165344, worst -0.027121320366859436
Time: prepare 0.0179    bound 0.1183    transfer 0.0008    finalize 0.0026    func 0.1425    
Accumulated time: func 0.7416    prepare 0.0852    bound 0.6350    transfer 0.0051    finalize 0.0130    
all_split False
======================Cut inference begins======================
max lb tensor(0.47148389) min lb tensor(-0.02527274)
Number of Verified Splits: 126 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.02173471450805664 
BICCOS Cumulative time: 0.09545469284057617
Preprocessing time: 0.011910200119018555 Inference time: 0.006582021713256836 Add cuts time: 0.0029501914978027344 Cut analysis time: 0.0002923011779785156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01814 (5), -0.01809 (5), -0.01792 (5), -0.01787 (5), -0.01785 (5), -0.01768 (5), -0.01724 (5), -0.01724 (5), -0.01724 (5), -0.01717 (5), -0.01717 (5), -0.01717 (5), -0.01708 (5), -0.01708 (5), -0.01708 (5), -0.01702 (5), -0.01702 (5), -0.01702 (5), -0.01699 (5), -0.01699 (5), 
Length of domains: 50
Time: pickout 0.0082    decision 0.0211    set_bounds 0.0184    solve 0.1426    add 0.2235    
Accumulated time: pickout 0.0259    decision 0.5849    set_bounds 0.0720    solve 0.6893    add 1.3062    
Current (lb-rhs): -0.01813550293445587
250 domains visited
Cumulative time: 2.8710877895355225


Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] 
split level 1: [/input-12, 58] 
split level 2: [/input-12, 33] 
split level 3: [/input-12, 40] 
split level 4: [/input-8, 179] 
split level 5: [/input-8, 2044] 
split level 6: [/input-8, 1028] 
split level 7: [/input-8, 2042] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.049907952547073364
10 lb beta sum: 0.02466345950961113, worst -0.04980170726776123
Time: prepare 0.0051    bound 0.1153    transfer 0.0010    finalize 0.0014    func 0.1245    
Accumulated time: func 0.8661    prepare 0.0908    bound 0.7503    transfer 0.0061    finalize 0.0145    
all_split False
======================Cut inference begins======================
max lb tensor(0.16640282) min lb tensor(-0.04976082)
Number of Verified Splits: 224 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10642290115356445
10 lb beta sum: 0.32336103916168213, worst -0.06531909108161926
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.24492406845092773 
BICCOS Cumulative time: 0.3403787612915039
Preprocessing time: 0.007299661636352539 Inference time: 0.23292279243469238 Add cuts time: 0.0044515132904052734 Cut analysis time: 0.00025010108947753906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04976 (8), -0.04845 (8), -0.04646 (8), -0.04517 (8), -0.04274 (8), -0.04196 (8), -0.04119 (8), -0.04078 (8), -0.03964 (8), -0.03866 (8), -0.03811 (8), -0.03748 (8), -0.03605 (8), -0.03466 (8), -0.03288 (8), -0.03153 (8), -0.02760 (8), -0.02622 (8), -0.02411 (8), -0.02367 (8), 
Length of domains: 32
Time: pickout 0.0003    decision 0.0226    set_bounds 0.0206    solve 0.1246    add 0.0616    
Accumulated time: pickout 0.0262    decision 0.6075    set_bounds 0.0926    solve 0.8139    add 1.3678    
Current (lb-rhs): -0.04976081848144531
282 domains visited
Cumulative time: 3.3701701164245605

BaB round 2
batch: 32
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1053] [/input-8, 787] [/input-8, 1053] [/input-8, 477] [/input-8, 787] [/input-8, 787] [/input-8, 1053] [/input-8, 477] [/input-8, 1053] [/input-8, 787] 
split level 1: [/input, 214] [/input, 1719] [/input-8, 787] [/input-8, 787] [/input, 1719] [/input, 1719] [/input-8, 787] [/input-8, 787] [/input, 214] [/input, 1719] 
split level 2: [/input, 1719] [/input, 472] [/input, 1703] [/input, 1703] [/input, 472] [/input, 472] [/input, 1703] [/input, 1703] [/input, 1719] [/input, 472] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04357561469078064
10 lb beta sum: 0.0, worst -0.04348793625831604
Time: prepare 0.0125    bound 0.1149    transfer 0.0010    finalize 0.0015    func 0.1316    
Accumulated time: func 0.9976    prepare 0.1035    bound 0.8652    transfer 0.0071    finalize 0.0159    
all_split False
======================Cut inference begins======================
max lb tensor(0.00094962) min lb tensor(-0.04346049)
Number of Verified Splits: 3 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06686753034591675
10 lb beta sum: 0.27789002656936646, worst -0.014245003461837769
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.13050055503845215 
BICCOS Cumulative time: 0.47087931632995605
Preprocessing time: 0.007543802261352539 Inference time: 0.12288045883178711 Add cuts time: 6.29425048828125e-05 Cut analysis time: 1.33514404296875e-05
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04346 (11), -0.04291 (11), -0.04275 (11), -0.04219 (11), -0.04216 (11), -0.04200 (11), -0.04162 (11), -0.04145 (11), -0.04145 (11), -0.04129 (11), -0.04090 (11), -0.04074 (11), -0.04070 (11), -0.04017 (11), -0.04003 (11), -0.03999 (11), -0.03952 (11), -0.03945 (11), -0.03933 (11), -0.03881 (11), 
Length of domains: 253
Time: pickout 0.0063    decision 0.0130    set_bounds 0.0179    solve 0.1316    add 0.0775    
Accumulated time: pickout 0.0325    decision 0.6205    set_bounds 0.1105    solve 0.9456    add 1.4453    
Current (lb-rhs): -0.04346048831939697
535 domains visited
Cumulative time: 3.7542572021484375

BaB round 3
batch: 253
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 787] [/input, 1689] [/input, 1689] [/input-8, 1053] [/input, 214] [/input, 1689] [/input, 1689] [/input-8, 787] [/input, 213] [/input, 1689] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.043203264474868774
10 lb beta sum: 0.0, worst -0.043172746896743774
Time: prepare 0.0251    bound 0.1246    transfer 0.0026    finalize 0.0027    func 0.1604    
Accumulated time: func 1.1580    prepare 0.1288    bound 0.9898    transfer 0.0097    finalize 0.0187    
all_split False
======================Cut inference begins======================
max lb tensor(0.00611973) min lb tensor(-0.04314709)
Number of Verified Splits: 37 of 506
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 3
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.020572900772094727 
BICCOS Cumulative time: 0.4914522171020508
Preprocessing time: 0.014843225479125977 Inference time: 0.003620624542236328 Add cuts time: 0.0007157325744628906 Cut analysis time: 0.0013933181762695312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04315 (12), -0.04260 (12), -0.04242 (12), -0.04186 (12), -0.04185 (12), -0.04167 (12), -0.04132 (12), -0.04114 (12), -0.04112 (12), -0.04094 (12), -0.04057 (12), -0.04039 (12), -0.04038 (12), -0.03985 (12), -0.03968 (12), -0.03964 (12), -0.03918 (12), -0.03911 (12), -0.03893 (12), -0.03844 (12), 
Length of domains: 469
Time: pickout 0.0209    decision 0.0274    set_bounds 0.0222    solve 0.1606    add 0.0840    
Accumulated time: pickout 0.0534    decision 0.6479    set_bounds 0.1327    solve 1.1062    add 1.5293    
Current (lb-rhs): -0.04314708709716797
1004 domains visited
Cumulative time: 4.09769344329834

BaB round 4
batch: 469
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 213] [/input-8, 494] [/input-8, 473] [/input, 214] [/input-8, 469] [/input-8, 501] [/input, 213] [/input-8, 1053] [/input-8, 494] [/input-8, 473] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0413820743560791
10 lb beta sum: 0.00015198257460724562, worst -0.04132956266403198
Time: prepare 0.0239    bound 0.1580    transfer 0.0016    finalize 0.0051    func 0.1948    
Accumulated time: func 1.3528    prepare 0.1530    bound 1.1478    transfer 0.0114    finalize 0.0237    
all_split False
======================Cut inference begins======================
max lb tensor(0.00802600) min lb tensor(-0.04131454)
Number of Verified Splits: 124 of 938
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 3
#cuts 4-6: 20
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.04544639587402344 
BICCOS Cumulative time: 0.5368986129760742
Preprocessing time: 0.028193950653076172 Inference time: 0.013675451278686523 Add cuts time: 0.002343416213989258 Cut analysis time: 0.0012335777282714844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04131 (13), -0.04082 (13), -0.04035 (13), -0.04001 (13), -0.03983 (13), -0.03981 (13), -0.03952 (13), -0.03934 (13), -0.03905 (13), -0.03887 (13), -0.03853 (13), -0.03852 (13), -0.03834 (13), -0.03805 (13), -0.03799 (13), -0.03785 (13), -0.03758 (13), -0.03740 (13), -0.03729 (13), -0.03705 (13), 
Length of domains: 814
Time: pickout 0.0236    decision 0.0383    set_bounds 0.0395    solve 0.1952    add 0.1003    
Accumulated time: pickout 0.0770    decision 0.6862    set_bounds 0.1722    solve 1.3014    add 1.6296    
Current (lb-rhs): -0.041314542293548584
1818 domains visited
Cumulative time: 4.546510457992554

BaB round 5
batch: 814
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 469] [/input-8, 2034] [/input, 362] [/input-8, 494] [/input-8, 473] [/input, 1703] [/input-8, 469] [/input-8, 2034] [/input, 362] [/input-8, 597] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0397639274597168
10 lb beta sum: 0.00014357510372065008, worst -0.03975176811218262
Time: prepare 0.0410    bound 0.1933    transfer 0.0043    finalize 0.0091    func 0.2583    
Accumulated time: func 1.6111    prepare 0.1942    bound 1.3411    transfer 0.0156    finalize 0.0328    
all_split False
======================Cut inference begins======================
max lb tensor(0.00615478) min lb tensor(-0.03973794)
Number of Verified Splits: 229 of 1628
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 3
#cuts 4-6: 25
#cuts >= 20: 0
BICCOS time: 0.07973456382751465 
BICCOS Cumulative time: 0.6166331768035889
Preprocessing time: 0.050653696060180664 Inference time: 0.0237886905670166 Add cuts time: 0.0041120052337646484 Cut analysis time: 0.0011801719665527344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03974 (14), -0.03924 (14), -0.03875 (14), -0.03844 (14), -0.03825 (14), -0.03820 (14), -0.03795 (14), -0.03776 (14), -0.03769 (14), -0.03721 (14), -0.03721 (14), -0.03703 (14), -0.03695 (14), -0.03692 (14), -0.03683 (14), -0.03673 (14), -0.03646 (14), -0.03639 (14), -0.03632 (14), -0.03628 (14), 
Length of domains: 1399
Time: pickout 0.0177    decision 0.0590    set_bounds 0.0698    solve 0.2588    add 0.0968    
Accumulated time: pickout 0.0948    decision 0.7452    set_bounds 0.2420    solve 1.5602    add 1.7264    
Current (lb-rhs): -0.03973793983459473
3217 domains visited
Cumulative time: 5.137639045715332

BaB round 6
batch: 1399
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 597] [/input-8, 501] [/input-8, 597] [/input-8, 2034] [/input-8, 597] [/input-8, 501] [/input, 1703] [/input-8, 494] [/input-8, 501] [/input-8, 597] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.038335978984832764
10 lb beta sum: 0.00026919986703433096, worst -0.038315415382385254
Time: prepare 0.0729    bound 0.2951    transfer 0.0155    finalize 0.0159    func 0.4175    
Accumulated time: func 2.0286    prepare 0.2674    bound 1.6363    transfer 0.0311    finalize 0.0487    
all_split False
======================Cut inference begins======================
max lb tensor(0.00567687) min lb tensor(-0.03830510)
Number of Verified Splits: 336 of 2798
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 5
#cuts 4-6: 24
#cuts >= 20: 0
BICCOS time: 0.12884020805358887 
BICCOS Cumulative time: 0.7454733848571777
Preprocessing time: 0.08566713333129883 Inference time: 0.03680610656738281 Add cuts time: 0.00515294075012207 Cut analysis time: 0.0012140274047851562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03831 (15), -0.03783 (15), -0.03699 (15), -0.03692 (15), -0.03681 (15), -0.03667 (15), -0.03653 (15), -0.03642 (15), -0.03634 (15), -0.03625 (15), -0.03615 (15), -0.03579 (15), -0.03563 (15), -0.03549 (15), -0.03544 (15), -0.03537 (15), -0.03519 (15), -0.03513 (15), -0.03504 (15), -0.03499 (15), 
Length of domains: 2462
Time: pickout 0.0499    decision 0.3008    set_bounds 0.1235    solve 0.4183    add 0.1011    
Accumulated time: pickout 0.1447    decision 1.0460    set_bounds 0.3655    solve 1.9784    add 1.8275    
Current (lb-rhs): -0.03830510377883911
5679 domains visited
Cumulative time: 6.271064043045044

BaB round 7
batch: 2462
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2016] [/input-8, 1053] [/input, 435] [/input-8, 494] [/input-8, 2016] [/input, 3385] [/input, 1689] [/input-8, 2034] [/input, 3385] [/input-8, 2016] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.037309885025024414
10 lb beta sum: 0.00026646535843610764, worst -0.03730589151382446
Time: prepare 0.1328    bound 0.4464    transfer 0.0431    finalize 0.2559    func 0.9116    
Accumulated time: func 2.9402    prepare 0.4005    bound 2.0827    transfer 0.0742    finalize 0.3045    
all_split False
======================Cut inference begins======================
max lb tensor(0.00651526) min lb tensor(-0.03730011)
Number of Verified Splits: 495 of 4924
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 6
#cuts 4-6: 17
#cuts 7-9: 4
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.21991539001464844 
BICCOS Cumulative time: 0.9653887748718262
Preprocessing time: 0.15304350852966309 Inference time: 0.058475494384765625 Add cuts time: 0.006851911544799805 Cut analysis time: 0.0015444755554199219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03730 (16), -0.03682 (16), -0.03598 (16), -0.03580 (16), -0.03563 (16), -0.03552 (16), -0.03533 (16), -0.03527 (16), -0.03524 (16), -0.03509 (16), -0.03478 (16), -0.03477 (16), -0.03447 (16), -0.03433 (16), -0.03414 (16), -0.03402 (16), -0.03398 (16), -0.03397 (16), -0.03392 (16), -0.03379 (16), 
Length of domains: 4429
Time: pickout 0.0520    decision 0.1488    set_bounds 0.2112    solve 0.9131    add 0.1549    
Accumulated time: pickout 0.1967    decision 1.1947    set_bounds 0.5766    solve 2.8916    add 1.9823    
Current (lb-rhs): -0.03730010986328125
10108 domains visited
Cumulative time: 7.991309404373169

BaB round 8
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 435] [/input, 362] [/input-8, 2016] [/input, 3385] [/input, 435] [/input-8, 494] [/input-8, 2016] [/input-8, 494] [/input-8, 2034] [/input-8, 597] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00017442277749069035, worst -0.03534644842147827
10 lb beta sum: 0.000220858768443577, worst -0.035345882177352905
Time: prepare 0.4762    bound 0.7010    transfer 0.1053    finalize 0.0621    func 1.4008    
Accumulated time: func 4.3410    prepare 0.8771    bound 2.7837    transfer 0.1795    finalize 0.3666    
all_split False
======================Cut inference begins======================
max lb tensor(0.00866160) min lb tensor(-0.03534281)
Number of Verified Splits: 524 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 7
#cuts 4-6: 17
#cuts 7-9: 18
#cuts >= 20: 0
BICCOS time: 0.39339137077331543 
BICCOS Cumulative time: 1.3587801456451416
Preprocessing time: 0.2928617000579834 Inference time: 0.08097243309020996 Add cuts time: 0.017046689987182617 Cut analysis time: 0.002510547637939453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03534 (17), -0.03489 (17), -0.03487 (17), -0.03470 (17), -0.03444 (17), -0.03427 (17), -0.03422 (17), -0.03384 (17), -0.03377 (17), -0.03368 (17), -0.03355 (17), -0.03338 (17), -0.03337 (17), -0.03328 (17), -0.03324 (17), -0.03320 (17), -0.03314 (17), -0.03311 (17), -0.03303 (17), -0.03298 (17), 
Length of domains: 8001
Time: pickout 0.0834    decision 0.2618    set_bounds 0.7031    solve 1.4046    add 0.1955    
Accumulated time: pickout 0.2801    decision 1.4566    set_bounds 1.2798    solve 4.2962    add 2.1778    
Current (lb-rhs): -0.03534281253814697
17776 domains visited
current_vram/total_varm: 12.7GB/99.9GB, batch_size increase to 8192
Cumulative time: 11.070184707641602

BaB round 9
batch: 8001
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 473] [/input-8, 2016] [/input-8, 500] [/input-8, 2016] [/input-8, 494] [/input-8, 2016] [/input-8, 2035] [/input-8, 2016] [/input-8, 2034] [/input-8, 2016] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03423810005187988
10 lb beta sum: 0.0001450494019081816, worst -0.03423541784286499
Time: prepare 0.4686    bound 1.2915    transfer 0.1487    finalize 0.3751    func 2.3899    
Accumulated time: func 6.7310    prepare 1.3462    bound 4.0753    transfer 0.3282    finalize 0.7417    
all_split False
======================Cut inference begins======================
max lb tensor(0.00595078) min lb tensor(-0.03423145)
Number of Verified Splits: 1179 of 16002
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 77.
#cuts 1-3: 8
#cuts 4-6: 18
#cuts 7-9: 43
#cuts 10-12: 8
#cuts >= 20: 0
BICCOS time: 1.025702953338623 
BICCOS Cumulative time: 2.3844830989837646
Preprocessing time: 0.5276515483856201 Inference time: 0.46190500259399414 Add cuts time: 0.03197216987609863 Cut analysis time: 0.004174232482910156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03423 (18), -0.03375 (18), -0.03361 (18), -0.03313 (18), -0.03278 (18), -0.03273 (18), -0.03256 (18), -0.03253 (18), -0.03248 (18), -0.03232 (18), -0.03232 (18), -0.03227 (18), -0.03226 (18), -0.03220 (18), -0.03218 (18), -0.03215 (18), -0.03213 (18), -0.03211 (18), -0.03207 (18), -0.03200 (18), 
Length of domains: 14823
Time: pickout 0.2470    decision 0.8191    set_bounds 0.8200    solve 2.3943    add 0.1847    
Accumulated time: pickout 0.5271    decision 2.2757    set_bounds 2.0997    solve 6.6905    add 2.3625    
Current (lb-rhs): -0.03423145413398743
32599 domains visited
Cumulative time: 16.608088493347168

BaB round 10
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2034] [/input, 435] [/input-8, 2034] [/input, 435] [/input-8, 500] [/input-8, 2034] [/input-8, 473] [/input-8, 2034] [/input-8, 501] [/input-8, 2034] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03312566876411438
10 lb beta sum: 0.0002745247329585254, worst -0.035236842930316925
Time: prepare 0.4815    bound 1.3391    transfer 0.1586    finalize 0.4252    func 2.5109    
Accumulated time: func 9.2418    prepare 1.8281    bound 5.4143    transfer 0.4868    finalize 1.1670    
all_split False
======================Cut inference begins======================
max lb tensor(0.00601497) min lb tensor(-0.03312567)
Number of Verified Splits: 1674 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 125.
#cuts 1-3: 10
#cuts 4-6: 21
#cuts 7-9: 84
#cuts 10-12: 10
#cuts >= 20: 0
BICCOS time: 0.8899359703063965 
BICCOS Cumulative time: 3.274419069290161
Preprocessing time: 0.5307304859161377 Inference time: 0.27167820930480957 Add cuts time: 0.08066654205322266 Cut analysis time: 0.0068607330322265625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03313 (19), -0.03278 (18), -0.03264 (19), -0.03250 (19), -0.03248 (18), -0.03232 (18), -0.03227 (18), -0.03220 (18), -0.03201 (19), -0.03184 (19), -0.03174 (18), -0.03168 (18), -0.03162 (19), -0.03143 (18), -0.03120 (19), -0.03118 (18), -0.03114 (19), -0.03112 (19), -0.03108 (19), -0.03107 (19), 
Length of domains: 21341
Time: pickout 0.1348    decision 0.4517    set_bounds 0.7669    solve 2.5156    add 0.2445    
Accumulated time: pickout 0.6618    decision 2.7273    set_bounds 2.8667    solve 9.2061    add 2.6070    
Current (lb-rhs): -0.03312566876411438
47309 domains visited
current_vram/total_varm: 27.1GB/99.9GB, batch_size increase to 16384
Cumulative time: 21.664443492889404

BaB round 11
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2016] [/input, 435] [/input-8, 2034] [/input-8, 2016] [/input, 435] [/input, 3163] [/input-8, 2035] [/input-8, 1053] [/input-8, 477] [/input-8, 2035] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.031738221645355225
10 lb beta sum: 0.00036837009247392416, worst -0.04611959308385849
Time: prepare 0.9135    bound 2.6957    transfer 0.3795    finalize 0.5711    func 4.7775    
Accumulated time: func 14.0193    prepare 2.7420    bound 8.1100    transfer 0.8663    finalize 1.7381    
all_split False
======================Cut inference begins======================
max lb tensor(0.00667508) min lb tensor(-0.03172719)
Number of Verified Splits: 3953 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 189.
#cuts 1-3: 13
#cuts 4-6: 18
#cuts 7-9: 148
#cuts 10-12: 10
#cuts >= 20: 0
BICCOS time: 2.2994282245635986 
BICCOS Cumulative time: 5.57384729385376
Preprocessing time: 1.0653355121612549 Inference time: 1.0577049255371094 Add cuts time: 0.1659374237060547 Cut analysis time: 0.010450363159179688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03173 (20), -0.03138 (19), -0.03136 (19), -0.03126 (20), -0.03121 (19), -0.03116 (19), -0.03111 (20), -0.03110 (19), -0.03063 (20), -0.03062 (19), -0.03060 (19), -0.03055 (19), -0.03044 (20), -0.03034 (19), -0.03022 (20), -0.03010 (19), -0.03009 (20), -0.03009 (19), -0.03002 (20), -0.02999 (19), 
Length of domains: 33772
Time: pickout 0.2576    decision 1.9486    set_bounds 1.8320    solve 4.7835    add 0.4108    
Accumulated time: pickout 0.9194    decision 4.6759    set_bounds 4.6987    solve 13.9896    add 3.0178    
Current (lb-rhs): -0.03172719478607178
76124 domains visited
current_vram/total_varm: 41.6GB/99.9GB, batch_size increase to 32768
Cumulative time: 33.350080490112305

BaB round 12
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 597] [/input-8, 2045] [/input-8, 494] [/input-8, 2045] [/input-8, 473] [/input-8, 2045] [/input-8, 2035] [/input, 3385] [/input-8, 597] [/input-8, 2045] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.030273079872131348
10 lb beta sum: 0.0007078702328726649, worst -0.05186120420694351
Time: prepare 1.8150    bound 10.7396    transfer 0.7795    finalize 0.9734    func 14.7402    
Accumulated time: func 28.7595    prepare 4.5575    bound 18.8496    transfer 1.6458    finalize 2.7114    
all_split False
======================Cut inference begins======================
max lb tensor(0.00918981) min lb tensor(-0.03026929)
Number of Verified Splits: 9752 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 247.
#cuts 1-3: 13
#cuts 4-6: 60
#cuts 7-9: 168
#cuts 10-12: 6
#cuts >= 20: 0
BICCOS time: 4.866579055786133 
BICCOS Cumulative time: 10.440426349639893
Preprocessing time: 2.809087038040161 Inference time: 1.6472711563110352 Add cuts time: 0.39691662788391113 Cut analysis time: 0.01330423355102539
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03027 (20), -0.03021 (21), -0.02998 (20), -0.02982 (20), -0.02976 (20), -0.02975 (21), -0.02969 (20), -0.02960 (21), -0.02948 (20), -0.02923 (20), -0.02915 (20), -0.02912 (21), -0.02897 (20), -0.02893 (20), -0.02891 (21), -0.02889 (20), -0.02870 (20), -0.02870 (21), -0.02867 (20), -0.02863 (21), 
Length of domains: 56788
Time: pickout 0.5142    decision 3.3501    set_bounds 3.6656    solve 14.7513    add 0.6959    
Accumulated time: pickout 1.4337    decision 8.0260    set_bounds 8.3643    solve 28.7410    add 3.7137    
Current (lb-rhs): -0.03026929497718811
131908 domains visited
Cumulative time: 61.50027823448181

BaB round 13
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 478] [/input-8, 2045] [/input, 3385] [/input, 435] [/input-8, 2045] [/input, 435] [/input-8, 501] [/input-8, 2035] [/input-8, 477] [/input, 3401] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028759688138961792
10 lb beta sum: 0.004090975970029831, worst -0.03523532301187515
Time: prepare 1.8522    bound 10.9288    transfer 0.7905    finalize 1.2861    func 15.2984    
Accumulated time: func 44.0579    prepare 6.4101    bound 29.7784    transfer 2.4363    finalize 3.9975    
all_split False
======================Cut inference begins======================
max lb tensor(0.01000219) min lb tensor(-0.02874923)
Number of Verified Splits: 11760 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 319.
#cuts 1-3: 14
#cuts 4-6: 105
#cuts 7-9: 190
#cuts 10-12: 10
#cuts >= 20: 0
BICCOS time: 6.169519424438477 
BICCOS Cumulative time: 16.60994577407837
Preprocessing time: 2.300154209136963 Inference time: 3.0063672065734863 Add cuts time: 0.8461012840270996 Cut analysis time: 0.016896724700927734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03021 (21), -0.02975 (21), -0.02960 (21), -0.02912 (21), -0.02891 (21), -0.02875 (21), -0.02870 (21), -0.02850 (21), -0.02846 (21), -0.02830 (21), -0.02830 (20), -0.02825 (21), -0.02825 (21), -0.02824 (21), -0.02817 (21), -0.02809 (21), -0.02808 (21), -0.02805 (21), -0.02800 (21), -0.02781 (21), 
Length of domains: 77796
Time: pickout 0.5457    decision 3.9719    set_bounds 3.9712    solve 15.3123    add 0.6459    
Accumulated time: pickout 1.9794    decision 11.9979    set_bounds 12.3355    solve 44.0532    add 4.3596    
Current (lb-rhs): -0.030205607414245605
185684 domains visited
Cumulative time: 92.58207106590271

BaB round 14
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 477] [/input-8, 500] [/input-8, 501] [/input-8, 501] [/input-8, 500] [/input-8, 501] [/input-8, 501] [/input, 3385] [/input-8, 501] [/input-8, 500] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02890530228614807
10 lb beta sum: 0.023681867867708206, worst -0.054937414824962616
Time: prepare 1.9735    bound 11.2318    transfer 0.8010    finalize 1.5929    func 16.0388    
Accumulated time: func 60.0967    prepare 8.3848    bound 41.0102    transfer 3.2373    finalize 5.5904    
all_split False
======================Cut inference begins======================
max lb tensor(0.01019656) min lb tensor(-0.02890259)
Number of Verified Splits: 15180 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 349.
#cuts 1-3: 4
#cuts 4-6: 137
#cuts 7-9: 203
#cuts 10-12: 5
#cuts >= 20: 0
BICCOS time: 7.535319805145264 
BICCOS Cumulative time: 24.145265579223633
Preprocessing time: 2.4457573890686035 Inference time: 3.9319441318511963 Add cuts time: 1.1395201683044434 Cut analysis time: 0.018098115921020508
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02890 (22), -0.02875 (21), -0.02846 (21), -0.02830 (21), -0.02828 (22), -0.02825 (21), -0.02817 (21), -0.02772 (21), -0.02769 (22), -0.02767 (22), -0.02764 (21), -0.02761 (22), -0.02741 (21), -0.02740 (22), -0.02737 (21), -0.02727 (22), -0.02724 (22), -0.02720 (22), -0.02719 (21), -0.02711 (22), 
Length of domains: 95384
Time: pickout 0.7265    decision 3.6014    set_bounds 5.3641    solve 16.0659    add 0.4851    
Accumulated time: pickout 2.7059    decision 15.5993    set_bounds 17.6997    solve 60.1191    add 4.8447    
Current (lb-rhs): -0.02890259027481079
236040 domains visited
Cumulative time: 126.7342803478241

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2035] [/input-8, 2035] [/input-8, 500] [/input-8, 1970] [/input-8, 2035] [/input-8, 478] [/input-8, 2035] [/input-8, 2035] [/input-8, 2045] [/input, 362] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027448832988739014
10 lb beta sum: 0.04115945100784302, worst -0.042938485741615295
Time: prepare 1.9498    bound 11.3260    transfer 0.7975    finalize 0.5558    func 16.3533    
Accumulated time: func 76.4500    prepare 10.3351    bound 52.3362    transfer 4.0349    finalize 6.1462    
all_split False
======================Cut inference begins======================
max lb tensor(0.01133269) min lb tensor(-0.02744627)
Number of Verified Splits: 17290 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 410.
#cuts 1-3: 5
#cuts 4-6: 170
#cuts 7-9: 227
#cuts 10-12: 8
#cuts >= 20: 0
BICCOS time: 7.133601665496826 
BICCOS Cumulative time: 31.27886724472046
Preprocessing time: 2.5930304527282715 Inference time: 3.3015265464782715 Add cuts time: 1.2184491157531738 Cut analysis time: 0.020595550537109375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02890 (22), -0.02828 (22), -0.02769 (22), -0.02767 (22), -0.02761 (22), -0.02745 (22), -0.02740 (22), -0.02724 (22), -0.02720 (22), -0.02696 (21), -0.02695 (22), -0.02695 (22), -0.02687 (22), -0.02687 (22), -0.02679 (21), -0.02678 (22), -0.02662 (22), -0.02652 (21), -0.02650 (22), -0.02643 (21), 
Length of domains: 110862
Time: pickout 0.6020    decision 3.3665    set_bounds 4.6820    solve 16.3667    add 0.4704    
Accumulated time: pickout 3.3079    decision 18.9658    set_bounds 22.3816    solve 76.4857    add 5.3152    
Current (lb-rhs): -0.02890259027481079
284286 domains visited
Cumulative time: 159.7730450630188

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2034] [/input-8, 501] [/input-8, 2045] [/input-8, 2045] [/input-8, 500] [/input, 435] [/input, 3163] [/input-8, 2045] [/input, 3385] [/input-8, 501] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02687305212020874
10 lb beta sum: 0.07395502179861069, worst -0.0563703291118145
Time: prepare 2.0163    bound 11.6068    transfer 0.8055    finalize 0.6002    func 15.4734    
Accumulated time: func 91.9234    prepare 12.3524    bound 63.9430    transfer 4.8404    finalize 6.7464    
all_split False
======================Cut inference begins======================
max lb tensor(0.01221743) min lb tensor(-0.02686656)
Number of Verified Splits: 16343 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 406.
#cuts 1-3: 8
#cuts 4-6: 166
#cuts 7-9: 222
#cuts 10-12: 10
#cuts >= 20: 0
BICCOS time: 8.615787267684937 
BICCOS Cumulative time: 39.894654512405396
Preprocessing time: 2.4914629459381104 Inference time: 5.025911808013916 Add cuts time: 1.0770502090454102 Cut analysis time: 0.0213623046875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02767 (22), -0.02745 (22), -0.02724 (22), -0.02695 (22), -0.02687 (22), -0.02687 (23), -0.02684 (23), -0.02679 (21), -0.02650 (22), -0.02642 (22), -0.02641 (23), -0.02639 (22), -0.02639 (23), -0.02634 (22), -0.02618 (22), -0.02612 (22), -0.02610 (22), -0.02607 (22), -0.02607 (22), -0.02603 (23), 
Length of domains: 127287
Time: pickout 0.6232    decision 4.7669    set_bounds 5.1519    solve 15.4962    add 0.4840    
Accumulated time: pickout 3.9311    decision 23.7327    set_bounds 27.5335    solve 91.9819    add 5.7992    
Current (lb-rhs): -0.027670562267303467
333479 domains visited
Cumulative time: 195.4666666984558

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2035] [/input, 298] [/input-8, 2035] [/input-8, 2035] [/input-8, 2045] [/input-8, 501] [/input-8, 2045] [/input-8, 501] [/input-8, 1053] [/input-8, 2035] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026369363069534302
10 lb beta sum: 0.14598716795444489, worst -0.05231421813368797
Time: prepare 2.0149    bound 11.5959    transfer 0.8219    finalize 0.6326    func 15.5102    
Accumulated time: func 107.4336    prepare 14.3679    bound 75.5389    transfer 5.6623    finalize 7.3789    
all_split False
======================Cut inference begins======================
max lb tensor(0.01103959) min lb tensor(-0.02636936)
Number of Verified Splits: 18601 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 391.
#cuts 1-3: 10
#cuts 4-6: 165
#cuts 7-9: 205
#cuts 10-12: 11
#cuts >= 20: 0
BICCOS time: 9.549115657806396 
BICCOS Cumulative time: 49.44377017021179
Preprocessing time: 2.7374114990234375 Inference time: 5.525663375854492 Add cuts time: 1.2648813724517822 Cut analysis time: 0.02115941047668457
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02745 (22), -0.02695 (22), -0.02687 (22), -0.02687 (23), -0.02684 (23), -0.02650 (22), -0.02642 (22), -0.02641 (23), -0.02639 (22), -0.02639 (23), -0.02637 (23), -0.02634 (22), -0.02610 (22), -0.02607 (22), -0.02603 (23), -0.02593 (23), -0.02584 (22), -0.02580 (22), -0.02566 (22), -0.02566 (22), 
Length of domains: 141454
Time: pickout 0.6457    decision 3.6027    set_bounds 5.5597    solve 15.5389    add 0.5773    
Accumulated time: pickout 4.5768    decision 27.3354    set_bounds 33.0932    solve 107.5208    add 6.3765    
Current (lb-rhs): -0.027446269989013672
380414 domains visited
Time out!!!!!!!!
Result: unknown in 236.1790 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 196, vnnlib ID: 196 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.34187508, -9.73769855, -4.95557117, -4.07531166, -5.10799456,
         -4.86587954, -4.00358391, -5.81644583, -6.91936016, -7.77230597]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [641]; unstable size 641; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 325, 1, 641] with unstable size 324 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 641] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 641] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [324]; unstable size 324; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 324] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 324] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.40970612,  2.98208570, -0.34637272, -0.05800247,  0.34521291,
         -1.21884394,  0.55216157,  0.57143259,  1.41924047]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.34187508, -9.73769855, -4.95557117, -4.07531166, -5.10799456,
         -4.86587954, -4.00358391, -5.81644583, -6.91936016, -7.77230597]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.34187365, -9.73769760, -4.95557117, -4.07531118, -5.10799408,
          -4.86587954, -4.00358343, -5.81644535, -6.91935921, -7.77230597],
         [-7.34187365, -9.73769760, -4.95557117, -4.07531118, -5.10799408,
          -4.86587954, -4.00358343, -5.81644535, -6.91935921, -7.77230597]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.88025999,  1.03268290, -0.07172775]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]],


         [[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]],


         [[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0997 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 197, vnnlib ID: 197 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.18270683, -12.47354031,  -6.10897255, -10.00190735,  -9.06741428,
         -10.42314816, -10.68535328, -12.50943470,  -6.97327232, -13.13700008]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [464]; unstable size 464; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 147, 1, 464] with unstable size 146 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 464] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 464] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [146]; unstable size 146; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 146] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 146] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.42324018, 0.28036872, 3.85285234, 3.13763332, 4.20778561, 4.47631168,
         6.43918324, 0.91171360, 6.93784571]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0708 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 198, vnnlib ID: 198 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.51362133, -15.75713921, -11.03450871, -11.39007473, -12.12888622,
         -11.76603127, -13.25793362, -13.95927143, -13.38565063, -14.89714527]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [766]; unstable size 766; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 174, 1, 766] with unstable size 173 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 766] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 766] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [173]; unstable size 173; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 173] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 173] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.95912123, -0.24805665, -0.27043319,  0.63014328, -0.09771198,
          1.73836124,  2.00863838,  1.75885797,  3.03999758]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.51362133, -15.75713921, -11.03450871, -11.39007473, -12.12888622,
         -11.76603127, -13.25793362, -13.95927143, -13.38565063, -14.89714527]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.64it/s]100%|██████████| 1/1 [00:00<00:00,  7.63it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.10750008, -16.42879486, -11.24630737, -11.71199989, -12.43719864,
          -12.07831478, -13.57210922, -14.31756973, -13.90190697, -15.47457600],
         [-11.10750008, -16.42879486, -11.24630737, -11.71199989, -12.43719864,
          -12.07831478, -13.57210922, -14.31756973, -13.90190697, -15.47457600]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.13880730, 0.60449982, 0.97081470]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1344 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.115754127502441
alpha/beta optimization time: 1.3811464309692383
initial alpha-crown bounds: tensor([[ 4.07125282, -0.22706449, -0.22163069,  0.67958450, -0.04805142,
          1.79753518,  2.07503772,  1.87824130,  3.11084938]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 3 ; Worst class: (+ rhs) -0.22706449031829834
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.4027693271637
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.40271711349487
Verifying property 1 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.22706449]], device='cuda:0') need to verify.
Model prediction is: tensor([-10.51362133, -15.75713921, -11.03450871, -11.39007473, -12.12888622,
        -11.76603127, -13.25793362, -13.95927143, -13.38565063, -14.89714527],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.22706449]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is more than 2, disable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 766
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 172
Node /15 input 0: size torch.Size([100]) unstable 14
-----------------
# of unstable neurons: 952
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010943412780761719
======================Cut verification ends======================
BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 26] 
split level 1: [/input-12, 41] 
split level 2: [/input-12, 25] 
split level 3: [/input-12, 11] 
split level 4: [/input-8, 1628] 
split level 5: [/input-8, 1437] 
split level 6: [/input-8, 1619] 
split level 7: [/input-8, 1357] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09544587135314941
10 lb beta sum: 0.0, worst -0.09510588645935059
Time: prepare 0.0032    bound 0.0941    transfer 0.0006    finalize 0.0016    func 0.1013    
Accumulated time: func 0.1013    prepare 0.0036    bound 0.0941    transfer 0.0006    finalize 0.0016    
all_split False
======================Cut inference begins======================
max lb tensor(0.18476129) min lb tensor(-0.09500694)
Number of Verified Splits: 179 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1792687177658081
10 lb beta sum: 0.0, worst -0.1786670684814453
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 2
#cuts 4-6: 16
#cuts 7-9: 14
#cuts >= 20: 0
BICCOS time: 0.19414114952087402 
BICCOS Cumulative time: 0.19414114952087402
Preprocessing time: 0.007687568664550781 Inference time: 0.17869806289672852 Add cuts time: 0.0061435699462890625 Cut analysis time: 0.001611948013305664
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09501 (8), -0.09289 (8), -0.09093 (8), -0.08883 (8), -0.08481 (8), -0.08309 (8), -0.08245 (8), -0.08098 (8), -0.08031 (8), -0.07899 (8), -0.07789 (8), -0.07691 (8), -0.07261 (8), -0.07024 (8), -0.06813 (8), -0.06811 (8), -0.06601 (8), -0.06574 (8), -0.06448 (8), -0.06237 (8), 
Length of domains: 77
Time: pickout 0.0004    decision 0.0221    set_bounds 0.0182    solve 0.1014    add 0.0012    
Accumulated time: pickout 0.0004    decision 0.0221    set_bounds 0.0182    solve 0.1014    add 0.0012    
Current (lb-rhs): -0.09500694274902344
77 domains visited
Cumulative time: 0.3422985076904297

BaB round 2
batch: 77
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] 
split level 1: [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1500] [/input-8, 1366] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09075307846069336
10 lb beta sum: 0.0, worst -0.0906301736831665
Time: prepare 0.0062    bound 0.1296    transfer 0.0009    finalize 0.0016    func 0.1404    
Accumulated time: func 0.2416    prepare 0.0100    bound 0.2237    transfer 0.0015    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.29887211) min lb tensor(-0.09059715)
Number of Verified Splits: 172 of 308
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1697009801864624
10 lb beta sum: 0.10404364764690399, worst -0.15218138694763184
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 61.
#cuts 1-3: 2
#cuts 4-6: 31
#cuts 7-9: 28
#cuts >= 20: 0
BICCOS time: 0.2510843276977539 
BICCOS Cumulative time: 0.44522547721862793
Preprocessing time: 0.008819341659545898 Inference time: 0.2265329360961914 Add cuts time: 0.012791156768798828 Cut analysis time: 0.0029408931732177734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09060 (10), -0.08797 (10), -0.08632 (10), -0.08385 (10), -0.08158 (10), -0.07917 (10), -0.07822 (10), -0.07753 (10), -0.07728 (10), -0.07654 (10), -0.07613 (10), -0.07481 (10), -0.07370 (10), -0.07368 (10), -0.07292 (10), -0.07261 (10), -0.07201 (10), -0.06999 (10), -0.06937 (10), -0.06877 (10), 
Length of domains: 136
Time: pickout 0.0017    decision 0.0150    set_bounds 0.0136    solve 0.1404    add 0.0015    
Accumulated time: pickout 0.0021    decision 0.0371    set_bounds 0.0318    solve 0.2418    add 0.0027    
Current (lb-rhs): -0.09059715270996094
213 domains visited
Cumulative time: 0.7671847343444824

BaB round 3
batch: 136
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1500] [/input-8, 1500] [/input-8, 1044] [/input-8, 1500] [/input-8, 1500] [/input-8, 1500] [/input-8, 1044] [/input-8, 1500] [/input-8, 1500] [/input-8, 1500] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08836102485656738
10 lb beta sum: 0.0, worst -0.08833920955657959
Time: prepare 0.0054    bound 0.1387    transfer 0.0007    finalize 0.0014    func 0.1480    
Accumulated time: func 0.3896    prepare 0.0156    bound 0.3624    transfer 0.0022    finalize 0.0046    
all_split False
======================Cut inference begins======================
max lb tensor(0.04670918) min lb tensor(-0.08832335)
Number of Verified Splits: 16 of 272
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 3
#cuts 4-6: 23
#cuts 7-9: 14
#cuts >= 20: 0
BICCOS time: 0.014738798141479492 
BICCOS Cumulative time: 0.4599642753601074
Preprocessing time: 0.008097410202026367 Inference time: 0.0015268325805664062 Add cuts time: 0.00322723388671875 Cut analysis time: 0.0018873214721679688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08832 (11), -0.08567 (11), -0.08398 (11), -0.08148 (11), -0.07924 (11), -0.07716 (11), -0.07595 (11), -0.07525 (11), -0.07511 (11), -0.07400 (11), -0.07387 (11), -0.07273 (11), -0.07150 (11), -0.07124 (11), -0.07100 (11), -0.07087 (11), -0.06993 (11), -0.06966 (11), -0.06887 (11), -0.06774 (11), 
Length of domains: 256
Time: pickout 0.0025    decision 0.0207    set_bounds 0.0073    solve 0.1481    add 0.0016    
Accumulated time: pickout 0.0046    decision 0.0578    set_bounds 0.0391    solve 0.3899    add 0.0043    
Current (lb-rhs): -0.08832335472106934
469 domains visited
Cumulative time: 0.9625146389007568

BaB round 4
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 802] [/input-8, 1500] [/input-8, 1618] [/input-8, 802] [/input-8, 1347] [/input-8, 1500] [/input-8, 1618] [/input-8, 802] [/input-8, 1347] [/input-8, 1500] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08538699150085449
10 lb beta sum: 0.004373438656330109, worst -0.08537673950195312
Time: prepare 0.0099    bound 0.1411    transfer 0.0017    finalize 0.0024    func 0.1599    
Accumulated time: func 0.5495    prepare 0.0257    bound 0.5035    transfer 0.0039    finalize 0.0070    
all_split False
======================Cut inference begins======================
max lb tensor(0.30473661) min lb tensor(-0.08536232)
Number of Verified Splits: 46 of 512
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 6
#cuts 4-6: 23
#cuts 7-9: 14
#cuts >= 20: 0
BICCOS time: 0.025058984756469727 
BICCOS Cumulative time: 0.48502326011657715
Preprocessing time: 0.014905929565429688 Inference time: 0.0046062469482421875 Add cuts time: 0.003584623336791992 Cut analysis time: 0.0019621849060058594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08536 (12), -0.08367 (12), -0.08102 (12), -0.08015 (12), -0.07936 (12), -0.07718 (12), -0.07585 (12), -0.07496 (12), -0.07328 (12), -0.07311 (12), -0.07291 (12), -0.07146 (12), -0.07095 (12), -0.07085 (12), -0.07060 (12), -0.06962 (12), -0.06899 (12), -0.06874 (12), -0.06798 (12), -0.06767 (12), 
Length of domains: 466
Time: pickout 0.0032    decision 0.0224    set_bounds 0.0133    solve 0.1600    add 0.0085    
Accumulated time: pickout 0.0079    decision 0.0801    set_bounds 0.0524    solve 0.5499    add 0.0128    
Current (lb-rhs): -0.08536231517791748
935 domains visited
Cumulative time: 1.1968967914581299

BaB round 5
batch: 466
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1610] [/input-8, 1610] [/input-8, 1347] [/input-8, 86] [/input-8, 1610] [/input-8, 1610] [/input-8, 1610] [/input-8, 1610] [/input-8, 1347] [/input-8, 1625] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08516919612884521
10 lb beta sum: 0.35665085911750793, worst -0.08516216278076172
Time: prepare 0.0207    bound 0.1677    transfer 0.0115    finalize 0.0075    func 0.2140    
Accumulated time: func 0.7635    prepare 0.0466    bound 0.6712    transfer 0.0155    finalize 0.0146    
all_split False
======================Cut inference begins======================
max lb tensor(0.40263778) min lb tensor(-0.08515191)
Number of Verified Splits: 470 of 932
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 7
#cuts 4-6: 12
#cuts 7-9: 11
#cuts >= 20: 0
BICCOS time: 0.08941793441772461 
BICCOS Cumulative time: 0.5744411945343018
Preprocessing time: 0.03197622299194336 Inference time: 0.0488283634185791 Add cuts time: 0.006975650787353516 Cut analysis time: 0.0016376972198486328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08515 (13), -0.08004 (13), -0.08003 (13), -0.07854 (13), -0.07759 (13), -0.07727 (13), -0.07663 (13), -0.07640 (13), -0.07535 (13), -0.07350 (13), -0.07350 (13), -0.07332 (13), -0.07206 (13), -0.07160 (13), -0.07059 (13), -0.07015 (13), -0.06968 (13), -0.06937 (13), -0.06885 (13), -0.06797 (13), 
Length of domains: 462
Time: pickout 0.0075    decision 0.0457    set_bounds 0.0274    solve 0.2143    add 0.0053    
Accumulated time: pickout 0.0154    decision 0.1258    set_bounds 0.0798    solve 0.7642    add 0.0180    
Current (lb-rhs): -0.08515191078186035
1397 domains visited
Cumulative time: 1.593489646911621

BaB round 6
batch: 462
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1610] [/input-8, 1347] [/input-8, 1618] [/input-8, 802] [/input-8, 1044] [/input, 2503] [/input-8, 1625] [/input-8, 1044] [/input-8, 802] [/input-8, 1044] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0826646089553833
10 lb beta sum: 0.323507696390152, worst -0.0826575756072998
Time: prepare 0.0204    bound 0.1436    transfer 0.0017    finalize 0.0054    func 0.1779    
Accumulated time: func 0.9414    prepare 0.0673    bound 0.8148    transfer 0.0172    finalize 0.0200    
all_split False
======================Cut inference begins======================
max lb tensor(0.08748421) min lb tensor(-0.08265054)
Number of Verified Splits: 98 of 924
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 7
#cuts 4-6: 13
#cuts 7-9: 11
#cuts >= 20: 0
BICCOS time: 0.04429030418395996 
BICCOS Cumulative time: 0.6187314987182617
Preprocessing time: 0.029610157012939453 Inference time: 0.01042318344116211 Add cuts time: 0.002771139144897461 Cut analysis time: 0.0014858245849609375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08265 (14), -0.08145 (14), -0.07983 (14), -0.07710 (14), -0.07615 (14), -0.07583 (14), -0.07457 (14), -0.07452 (14), -0.07400 (14), -0.07384 (14), -0.07328 (14), -0.07326 (14), -0.07301 (14), -0.07294 (14), -0.07285 (14), -0.07263 (14), -0.07207 (14), -0.07119 (14), -0.07057 (14), -0.07056 (14), 
Length of domains: 826
Time: pickout 0.0273    decision 0.0417    set_bounds 0.0243    solve 0.1782    add 0.1184    
Accumulated time: pickout 0.0427    decision 0.1675    set_bounds 0.1040    solve 0.9424    add 0.1364    
Current (lb-rhs): -0.08265054225921631
2223 domains visited
Cumulative time: 2.036043643951416

BaB round 7
batch: 826
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-8, 1610] [/input-12, 45] [/input-8, 1625] [/input, 2504] [/input-8, 1610] [/input-8, 1625] [/input-8, 1625] [/input, 2504] [/input-8, 1610] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07919478416442871
10 lb beta sum: 0.2976929247379303, worst -0.07913863658905029
Time: prepare 0.0363    bound 0.1614    transfer 0.0116    finalize 0.0102    func 0.2305    
Accumulated time: func 1.1719    prepare 0.1039    bound 0.9762    transfer 0.0287    finalize 0.0301    
all_split False
======================Cut inference begins======================
max lb tensor(0.10412128) min lb tensor(-0.07911611)
Number of Verified Splits: 220 of 1652
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 8
#cuts 4-6: 15
#cuts 7-9: 11
#cuts >= 20: 0
BICCOS time: 0.08360934257507324 
BICCOS Cumulative time: 0.702340841293335
Preprocessing time: 0.050920724868774414 Inference time: 0.024883270263671875 Add cuts time: 0.004358530044555664 Cut analysis time: 0.003446817398071289
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07912 (15), -0.07893 (15), -0.07792 (15), -0.07773 (15), -0.07738 (15), -0.07630 (15), -0.07512 (15), -0.07415 (15), -0.07386 (15), -0.07261 (15), -0.07254 (15), -0.07203 (15), -0.07188 (15), -0.07131 (15), -0.07106 (15), -0.07099 (15), -0.07088 (15), -0.07076 (15), -0.07067 (15), -0.07012 (15), 
Length of domains: 1432
Time: pickout 0.0781    decision 0.0603    set_bounds 0.0442    solve 0.2308    add 0.0994    
Accumulated time: pickout 0.1207    decision 0.2277    set_bounds 0.1482    solve 1.1732    add 0.2358    
Current (lb-rhs): -0.0791161060333252
3655 domains visited
Cumulative time: 2.6442251205444336

BaB round 8
batch: 1432
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 680] [/input-8, 641] [/input-8, 1609] [/input-8, 680] [/input-8, 667] [/input-8, 641] [/input-8, 1609] [/input-8, 641] [/input-8, 1625] [/input-8, 680] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07718312740325928
10 lb beta sum: 0.42345985770225525, worst -0.07717466354370117
Time: prepare 0.0716    bound 0.2386    transfer 0.0231    finalize 0.0191    func 0.3714    
Accumulated time: func 1.5433    prepare 0.1758    bound 1.2148    transfer 0.0519    finalize 0.0492    
all_split False
======================Cut inference begins======================
max lb tensor(0.32880962) min lb tensor(-0.07717025)
Number of Verified Splits: 771 of 2864
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 8
#cuts 4-6: 15
#cuts 7-9: 12
#cuts >= 20: 0
BICCOS time: 0.196075439453125 
BICCOS Cumulative time: 0.89841628074646
Preprocessing time: 0.08994293212890625 Inference time: 0.09253382682800293 Add cuts time: 0.011951208114624023 Cut analysis time: 0.0016474723815917969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07717 (16), -0.07699 (16), -0.07597 (16), -0.07577 (16), -0.07544 (16), -0.07493 (16), -0.07435 (16), -0.07396 (16), -0.07183 (16), -0.07159 (16), -0.07087 (16), -0.07080 (16), -0.07047 (16), -0.07019 (16), -0.06993 (16), -0.06934 (16), -0.06905 (16), -0.06904 (16), -0.06896 (16), -0.06884 (16), 
Length of domains: 2093
Time: pickout 0.0471    decision 0.1053    set_bounds 0.4648    solve 0.3726    add 0.1001    
Accumulated time: pickout 0.1678    decision 0.3330    set_bounds 0.6130    solve 1.5458    add 0.3359    
Current (lb-rhs): -0.07717025279998779
5748 domains visited
Cumulative time: 3.9456965923309326

BaB round 9
batch: 2093
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-8, 86] [/input-8, 86] [/input-8, 1609] [/input-12, 45] [/input-8, 86] [/input-8, 641] [/input-8, 86] [/input-8, 86] [/input-8, 86] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07494449615478516
10 lb beta sum: 0.3976389467716217, worst -0.0749276876449585
Time: prepare 0.2494    bound 0.2973    transfer 0.0270    finalize 0.0263    func 0.6280    
Accumulated time: func 2.1713    prepare 0.4255    bound 1.5121    transfer 0.0789    finalize 0.0755    
all_split False
======================Cut inference begins======================
max lb tensor(0.28792801) min lb tensor(-0.07492042)
Number of Verified Splits: 607 of 4186
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 8
#cuts 4-6: 16
#cuts 7-9: 13
#cuts >= 20: 0
BICCOS time: 0.22493338584899902 
BICCOS Cumulative time: 1.123349666595459
Preprocessing time: 0.1344621181488037 Inference time: 0.0786750316619873 Add cuts time: 0.01005697250366211 Cut analysis time: 0.0017392635345458984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07492 (17), -0.07407 (17), -0.07352 (17), -0.07351 (17), -0.07320 (17), -0.07313 (17), -0.07305 (17), -0.07268 (17), -0.07211 (17), -0.07211 (17), -0.07210 (17), -0.07179 (17), -0.07171 (17), -0.07128 (17), -0.07070 (17), -0.07031 (17), -0.06977 (17), -0.06967 (17), -0.06860 (17), -0.06853 (17), 
Length of domains: 3579
Time: pickout 0.0504    decision 0.1248    set_bounds 0.1097    solve 0.6292    add 0.1880    
Accumulated time: pickout 0.2183    decision 0.4578    set_bounds 0.7228    solve 2.1750    add 0.5239    
Current (lb-rhs): -0.0749204158782959
9327 domains visited
Cumulative time: 5.290704965591431

BaB round 10
batch: 3579
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1134] [/input-8, 641] [/input-8, 1134] [/input-8, 86] [/input-8, 641] [/input-8, 1134] [/input-8, 86] [/input-8, 1134] [/input-8, 641] [/input-8, 641] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07311153411865234
10 lb beta sum: 0.37765368819236755, worst -0.07311201095581055
Time: prepare 0.1825    bound 0.4611    transfer 0.0463    finalize 0.0481    func 0.7856    
Accumulated time: func 2.9569    prepare 0.6084    bound 1.9732    transfer 0.1252    finalize 0.1237    
all_split False
======================Cut inference begins======================
max lb tensor(0.28115904) min lb tensor(-0.07310414)
Number of Verified Splits: 961 of 7158
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 8
#cuts 4-6: 17
#cuts 7-9: 12
#cuts >= 20: 0
BICCOS time: 0.5689370632171631 
BICCOS Cumulative time: 1.692286729812622
Preprocessing time: 0.22527098655700684 Inference time: 0.3246638774871826 Add cuts time: 0.017226696014404297 Cut analysis time: 0.001775503158569336
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07310 (18), -0.07226 (18), -0.07170 (18), -0.07169 (18), -0.07138 (18), -0.07130 (18), -0.07123 (18), -0.07086 (18), -0.07029 (18), -0.07029 (18), -0.07025 (18), -0.07013 (18), -0.06997 (18), -0.06989 (18), -0.06945 (18), -0.06929 (18), -0.06888 (18), -0.06873 (18), -0.06872 (18), -0.06849 (18), 
Length of domains: 6197
Time: pickout 0.1391    decision 0.2105    set_bounds 0.3530    solve 0.7882    add 0.1537    
Accumulated time: pickout 0.3573    decision 0.6683    set_bounds 1.0758    solve 2.9632    add 0.6775    
Current (lb-rhs): -0.0731041431427002
15524 domains visited
Cumulative time: 7.524203300476074

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input, 2503] [/input-8, 680] [/input-12, 45] [/input, 2503] [/input-12, 45] [/input-12, 45] [/input, 2503] [/input-12, 45] [/input-12, 45] 
cut re-enabled after branching node selection
0 lb beta sum: 0.435741662979126, worst -0.07002806663513184
10 lb beta sum: 0.4395063519477844, worst -0.07001674175262451
Time: prepare 0.4099    bound 0.5070    transfer 0.0425    finalize 0.0524    func 1.0656    
Accumulated time: func 4.0225    prepare 1.0186    bound 2.4802    transfer 0.1676    finalize 0.1761    
all_split False
======================Cut inference begins======================
max lb tensor(0.24324897) min lb tensor(-0.07000756)
Number of Verified Splits: 1977 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 9
#cuts 4-6: 15
#cuts 7-9: 9
#cuts >= 20: 0
BICCOS time: 0.5798163414001465 
BICCOS Cumulative time: 2.2721030712127686
Preprocessing time: 0.26058435440063477 Inference time: 0.28409266471862793 Add cuts time: 0.03361201286315918 Cut analysis time: 0.0015273094177246094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07310 (18), -0.07170 (18), -0.07169 (18), -0.07138 (18), -0.07130 (18), -0.07086 (18), -0.07029 (18), -0.07025 (18), -0.07001 (19), -0.06997 (18), -0.06989 (18), -0.06897 (19), -0.06860 (19), -0.06849 (18), -0.06784 (18), -0.06762 (19), -0.06757 (19), -0.06735 (18), -0.06711 (19), -0.06705 (18), 
Length of domains: 8316
Time: pickout 0.0744    decision 0.2255    set_bounds 0.2082    solve 1.2700    add 0.0710    
Accumulated time: pickout 0.4317    decision 0.8939    set_bounds 1.2840    solve 4.2332    add 0.7485    
Current (lb-rhs): -0.0731041431427002
21739 domains visited
current_vram/total_varm: 25.5GB/99.9GB, batch_size increase to 8192
Cumulative time: 9.984707593917847

BaB round 12
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-8, 1346] [/input, 2504] [/input-8, 680] [/input-8, 1618] [/input-8, 680] [/input-12, 45] [/input-8, 1618] [/input, 2504] [/input, 2503] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06998634338378906
10 lb beta sum: 0.4414448142051697, worst -0.06991720199584961
Time: prepare 0.4279    bound 1.3106    transfer 0.1538    finalize 0.3107    func 2.3099    
Accumulated time: func 6.3324    prepare 1.4470    bound 3.7908    transfer 0.3215    finalize 0.4868    
all_split False
======================Cut inference begins======================
max lb tensor(0.67803991) min lb tensor(-0.06989980)
Number of Verified Splits: 10527 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 22
#cuts 4-6: 1
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 2.406693935394287 
BICCOS Cumulative time: 4.678797006607056
Preprocessing time: 0.5290124416351318 Inference time: 1.746246576309204 Add cuts time: 0.1305384635925293 Cut analysis time: 0.000896453857421875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06990 (19), -0.06973 (19), -0.06914 (20), -0.06905 (19), -0.06853 (19), -0.06848 (19), -0.06832 (19), -0.06830 (19), -0.06827 (19), -0.06818 (19), -0.06800 (19), -0.06800 (19), -0.06772 (20), -0.06765 (19), -0.06754 (19), -0.06730 (19), -0.06710 (19), -0.06688 (19), -0.06687 (19), -0.06685 (19), 
Length of domains: 5981
Time: pickout 0.1247    decision 0.6622    set_bounds 0.4229    solve 2.3140    add 0.0696    
Accumulated time: pickout 0.5565    decision 1.5561    set_bounds 1.7069    solve 6.5472    add 0.8181    
Current (lb-rhs): -0.0698997974395752
27596 domains visited
current_vram/total_varm: 25.5GB/99.9GB, batch_size increase to 16384
Cumulative time: 16.10355234146118

BaB round 13
batch: 5981
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2504] [/input-8, 1134] [/input, 2503] [/input-8, 641] [/input, 2504] [/input-8, 1134] [/input, 2503] [/input, 2504] [/input, 2504] [/input-8, 1617] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06903707981109619
10 lb beta sum: 1.758365511894226, worst -0.06295859813690186
Time: prepare 0.3232    bound 0.9696    transfer 0.1229    finalize 0.0789    func 1.5757    
Accumulated time: func 7.9081    prepare 1.7705    bound 4.7604    transfer 0.4444    finalize 0.5657    
all_split False
======================Cut inference begins======================
max lb tensor(1.00778997) min lb tensor(-0.06294227)
Number of Verified Splits: 10847 of 11962
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 2.1547229290008545 
BICCOS Cumulative time: 6.83351993560791
Preprocessing time: 0.399625301361084 Inference time: 1.669907569885254 Add cuts time: 0.08470416069030762 Cut analysis time: 0.0004858970642089844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06294 (20), -0.06290 (20), -0.06247 (20), -0.06152 (20), -0.06148 (20), -0.06106 (20), -0.06029 (21), -0.06015 (21), -0.06000 (20), -0.05997 (20), -0.05954 (20), -0.05945 (20), -0.05930 (20), -0.05915 (20), -0.05910 (20), -0.05900 (20), -0.05896 (20), -0.05888 (21), -0.05874 (21), -0.05866 (20), 
Length of domains: 1115
Time: pickout 0.0990    decision 0.3331    set_bounds 0.5029    solve 1.5785    add 0.0602    
Accumulated time: pickout 0.6555    decision 1.8891    set_bounds 2.2098    solve 8.1257    add 0.8783    
Current (lb-rhs): -0.0629422664642334
28711 domains visited
Cumulative time: 20.930351734161377

BaB round 14
batch: 1115
splitting decisions: 
split level 0: [/input, 3511] [/input-8, 1347] [/input, 3511] [/input-8, 1347] [/input, 3511] [/input-8, 1347] [/input, 3511] [/input, 3509] [/input, 3511] [/input, 3511] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0661778450012207

all verified at 2th iter
Time: prepare 0.0582    bound 0.0311    transfer 0.0034    finalize 0.0130    func 0.1211    
Accumulated time: func 8.0292    prepare 1.8289    bound 4.7915    transfer 0.4478    finalize 0.5788    
all_split False
======================Cut inference begins======================
max lb tensor(0.08099798) min lb tensor(0.01953135)
Number of Verified Splits: 2230 of 2230
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.07111907005310059 
BICCOS Cumulative time: 6.904639005661011
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0219    decision 0.0750    set_bounds 0.0566    solve 0.1215    add 0.0012    
Accumulated time: pickout 0.6774    decision 1.9641    set_bounds 2.2664    solve 8.2472    add 0.8795    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
28711 domains visited
Cumulative time: 21.291812419891357


Properties batch 2, size 1
Remaining timeout: 176.85513997077942
Verifying property 2 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.22163069]], device='cuda:0') need to verify.
Model prediction is: tensor([-10.51362133, -15.75713921, -11.03450871, -11.39007473, -12.12888622,
        -11.76603127, -13.25793362, -13.95927143, -13.38565063, -14.89714527],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.22163069]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is more than 2, disable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 766
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 172
Node /15 input 0: size torch.Size([100]) unstable 14
-----------------
# of unstable neurons: 952
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.703636169433594e-05
======================Cut verification ends======================
BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 78] 
split level 1: [/input-12, 26] 
split level 2: [/input-12, 41] 
split level 3: [/input-12, 25] 
split level 4: [/input-12, 45] 
split level 5: [/input-8, 1628] 
split level 6: [/input-8, 1366] 
split level 7: [/input-8, 1357] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01781553030014038
10 lb beta sum: 0.0, worst -0.016498804092407227
Time: prepare 0.0031    bound 0.0927    transfer 0.0006    finalize 0.0014    func 0.0996    
Accumulated time: func 0.0996    prepare 0.0035    bound 0.0927    transfer 0.0006    finalize 0.0014    
all_split False
======================Cut inference begins======================
max lb tensor(0.45193201) min lb tensor(-0.01607937)
Number of Verified Splits: 254 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22162961959838867
10 lb beta sum: 0.0, worst -0.22164124250411987
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 4
#cuts 4-6: 22
#cuts >= 20: 0
BICCOS time: 0.22038602828979492 
BICCOS Cumulative time: 0.22038602828979492
Preprocessing time: 0.0074405670166015625 Inference time: 0.20468568801879883 Add cuts time: 0.007143735885620117 Cut analysis time: 0.001116037368774414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01608 (8), -0.00846 (8), 
Length of domains: 2
Time: pickout 0.0003    decision 0.0216    set_bounds 0.0175    solve 0.0997    add 0.0294    
Accumulated time: pickout 0.0003    decision 0.0216    set_bounds 0.0175    solve 0.0997    add 0.0294    
Current (lb-rhs): -0.016079366207122803
2 domains visited
Cumulative time: 0.4013030529022217

BaB round 2
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1404] [/input-8, 1404] 
split level 1: [/input-8, 1393] [/input-8, 1393] 
split level 2: [/input-8, 1396] [/input-8, 1396] 
split level 3: [/input-8, 1405] [/input-8, 1405] 
split level 4: [/input-8, 402] [/input-8, 641] 
split level 5: [/input-8, 641] [/input-8, 402] 
split level 6: [/input-8, 1325] [/input-8, 1325] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.013977646827697754

all verified at 0th iter
Time: prepare 0.0049    bound 0.0077    transfer 0.0006    finalize 0.0012    func 0.0162    
Accumulated time: func 0.1157    prepare 0.0088    bound 0.1005    transfer 0.0012    finalize 0.0025    
all_split False
======================Cut inference begins======================
max lb tensor(0.05626059) min lb tensor(0.01397765)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 26.
#cuts 1-3: 4
#cuts 4-6: 22
#cuts >= 20: 0
BICCOS time: 0.007569551467895508 
BICCOS Cumulative time: 0.22795557975769043
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0215    set_bounds 0.0161    solve 0.0162    add 0.0003    
Accumulated time: pickout 0.0014    decision 0.0431    set_bounds 0.0337    solve 0.1159    add 0.0297    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
2 domains visited
Cumulative time: 0.4649178981781006


Properties batch 3, size 1
Remaining timeout: 176.18178176879883
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 176.18170738220215
Verifying property 4 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04805142]], device='cuda:0') need to verify.
Model prediction is: tensor([-10.51362133, -15.75713921, -11.03450871, -11.39007473, -12.12888622,
        -11.76603127, -13.25793362, -13.95927143, -13.38565063, -14.89714527],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04805142]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Warning: The number of verified candidates is more than 2, disable MTS.
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 766
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 172
Node /15 input 0: size torch.Size([100]) unstable 14
-----------------
# of unstable neurons: 952
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001251697540283203
======================Cut verification ends======================
BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 26] 
split level 1: [/input-12, 41] 
split level 2: [/input-12, 25] 
split level 3: [/input-12, 78] 
split level 4: [/input-12, 45] 
split level 5: [/input-8, 1396] 
split level 6: [/input-8, 1357] 
split level 7: [/input-8, 641] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.2171386480331421

all verified at 0th iter
Time: prepare 0.0034    bound 0.0046    transfer 0.0011    finalize 0.0018    func 0.0126    
Accumulated time: func 0.0126    prepare 0.0038    bound 0.0046    transfer 0.0011    finalize 0.0018    
all_split False
======================Cut inference begins======================
max lb tensor(0.64313811) min lb tensor(0.21713865)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.007943153381347656 
BICCOS Cumulative time: 0.007943153381347656
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.0242    set_bounds 0.0188    solve 0.0127    add 0.0003    
Accumulated time: pickout 0.0004    decision 0.0242    set_bounds 0.0188    solve 0.0127    add 0.0003    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
Cumulative time: 0.07020068168640137


Properties batch 5, size 1
Remaining timeout: 175.91485047340393
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 175.91477751731873
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 175.91475296020508
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 175.91473078727722
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 24.0854 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 199, vnnlib ID: 199 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.87905216, -4.83922100, -4.88939095, -3.64813495, -4.49923706,
         -4.07969141, -3.29299521, -4.57696962, -6.84988213, -3.62618971]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [599]; unstable size 599; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 271, 1, 599] with unstable size 270 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 599] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 599] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [270]; unstable size 270; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 270] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 270] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.17035961, -1.17387700, -0.10739517, -1.19881487, -0.49474192,
         -1.09854031, -0.81328833,  0.67185235, -1.93993306]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.87905216, -4.83922100, -4.88939095, -3.64813495, -4.49923706,
         -4.07969141, -3.29299521, -4.57696962, -6.84988213, -3.62618971]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.36140919, -4.46472359, -4.55021334, -3.14537120, -4.19085550,
          -3.51219034, -3.41958308, -4.05005741, -6.27771091, -3.11072206],
         [-5.36140919, -4.46472359, -4.55021334, -3.14537120, -4.19085550,
          -3.51219034, -3.41958308, -4.05005741, -6.27771091, -3.11072206]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.04514050,  1.13063025, -0.27421188,  0.77127242,  0.09260726,
           0.63047433, -0.30886102]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0168 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0920 seconds
############# Summary #############
Final verified acc: 47.5% (total 200 examples)
Problem instances count: 200 , total verified (safe/unsat): 95 , total falsified (unsafe/sat): 100 , timeout: 5
mean time for ALL instances (total 200):7.658301546320381, max time: 236.1790051460266
mean time for verified SAFE instances(total 95): 4.883367814515767, max time: 106.20644235610962
mean time for verified (SAFE + UNSAFE) instances (total 195): 2.4520912476075, max time: [5.350918292999268, 1.130420207977295, 0.0657658576965332, 0.060773372650146484, 0.08826518058776855, 0.07588672637939453, 0.07430696487426758, 0.08658313751220703, 0.08275747299194336, 0.07918763160705566, 0.07876229286193848, 0.07814908027648926, 0.06835365295410156, 0.07792305946350098, 0.07705473899841309, 0.09577465057373047, 0.06700634956359863, 0.08537435531616211, 0.09433388710021973, 0.08271408081054688, 0.05613565444946289, 0.10189199447631836, 0.07612800598144531, 0.09268522262573242, 0.08466243743896484, 0.09391283988952637, 0.08590435981750488, 0.04498004913330078, 0.08317303657531738, 0.07877278327941895, 0.0785670280456543, 0.08542060852050781, 0.0779263973236084, 0.0754690170288086, 0.07776093482971191, 0.0811767578125, 0.0800771713256836, 0.07483863830566406, 0.0744621753692627, 0.07930707931518555, 0.07518482208251953, 0.08681464195251465, 0.08908247947692871, 0.0829768180847168, 0.08032679557800293, 0.07416224479675293, 0.0940704345703125, 0.07314324378967285, 0.07919669151306152, 0.08487391471862793, 0.08774399757385254, 0.0751183032989502, 0.08114886283874512, 0.08418560028076172, 0.07018208503723145, 0.08280134201049805, 0.0775601863861084, 0.07355499267578125, 0.09058046340942383, 0.09326386451721191, 0.07988238334655762, 0.08427834510803223, 0.0675661563873291, 0.07827234268188477, 0.07602381706237793, 0.0867776870727539, 0.07833361625671387, 0.08286237716674805, 0.08078336715698242, 0.06770896911621094, 0.07546687126159668, 0.07713866233825684, 0.05478024482727051, 0.08696460723876953, 0.0798487663269043, 0.08618998527526855, 0.07471132278442383, 0.07712221145629883, 0.07371664047241211, 0.07515120506286621, 0.07132649421691895, 0.07180404663085938, 0.069976806640625, 0.07948541641235352, 0.0737152099609375, 0.07426857948303223, 0.0819859504699707, 0.08435249328613281, 0.07878947257995605, 0.08844995498657227, 0.07603955268859863, 0.07627487182617188, 0.0761110782623291, 0.0785679817199707, 0.056671142578125, 0.08538603782653809, 0.07916808128356934, 0.08072304725646973, 0.09965920448303223, 0.0919809341430664]
mean time for verified SAFE + TIMEOUT instances (total 100): 15.174225349426269, max time: [201.0825846195221, 205.7681074142456, 206.48476600646973, 203.9881293773651, 236.1790051460266] 
mean time for verified UNSAFE instances (total 100): 0.14237850904464722, max time: 5.350918292999268
unsafe-pgd (total 100), index: [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 18, 19, 25, 29, 32, 34, 35, 36, 43, 44, 45, 46, 50, 53, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 69, 72, 75, 77, 78, 80, 82, 87, 88, 90, 91, 92, 94, 96, 98, 99, 100, 101, 102, 105, 106, 108, 113, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 137, 138, 141, 143, 145, 149, 150, 151, 152, 154, 155, 156, 163, 165, 170, 173, 174, 175, 176, 181, 184, 185, 188, 191, 194, 196, 199]
safe-incomplete (total 73), index: [2, 8, 14, 17, 20, 21, 22, 23, 26, 27, 28, 30, 31, 33, 37, 39, 40, 41, 47, 48, 49, 51, 52, 62, 68, 71, 73, 74, 76, 79, 81, 83, 85, 86, 93, 104, 109, 110, 111, 114, 115, 117, 118, 121, 131, 133, 136, 140, 142, 144, 146, 147, 148, 153, 157, 159, 161, 162, 164, 166, 168, 171, 177, 178, 179, 180, 182, 186, 189, 190, 192, 193, 197]
safe (total 22), index: [11, 38, 42, 54, 60, 70, 84, 89, 95, 103, 107, 112, 116, 132, 139, 158, 160, 167, 169, 172, 187, 198]
unknown (total 5), index: [24, 55, 97, 183, 195]
