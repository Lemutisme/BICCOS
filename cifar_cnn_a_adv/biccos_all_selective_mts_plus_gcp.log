Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  verify_onnxruntime_output: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  prepare_only: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: ablation_results/cifar_cnn_a_adv/biccos_all_selective_mts_plus_gcp.out
  root_path: ''
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  buffer_has_batchdim: false
  save_output: false
  output_file: out.pkl
  return_optimized_model: false
model:
  name: cnn_4layer_adv
  path: models/sdp/cifar_cnn_a_adv.model
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: []
  onnx_vnnlib_joint_optimization_flags: none
  check_optimized: false
  flatten_final_output: false
  optimize_graph: null
  with_jacobian: false
data:
  start: 0
  end: 10000
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR_SDP
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.00784313725
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 4096
  auto_enlarge_batch_size: true
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  optimize_disjuncts_separately: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
    relu_option: adaptive
    compare_crown_with_ibp: false
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    disable_optimization: []
    max_time: 1.0
  invprop:
    apply_output_constraints_to: []
    tighten_input_bounds: false
    best_of_oc_and_no_oc: false
    directly_optimize: []
    oc_lr: 0.1
    share_gammas: false
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    max_dim: 10000
    reset_threshold: 1.0
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    unstable_neuron_threshold: 0
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
    topk_filter: 1.0
    sliding_window: -1
    extra_constraint: false
    refine_neuron_timeout_increasement: 0
    timeout_neuron_percentage: 0.3
    remaining_timeout_threshold: 1
    remove_unstable_neurons: false
    lp_solver: mip
    output_cut: false
bab:
  initial_max_domains: 1
  backing_up_max_domain: null
  max_domains: .inf
  decision_thresh: 0
  timeout: 200
  timeout_scale: 1
  max_iterations: -1
  override_timeout: null
  get_upper_bound: false
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: false
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  tree_traversal: breadth_first
  cut:
    enabled: true
    cuts_path: /tmp/abcrown_cuts_29014
    implication: false
    bab_cut: true
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 0.99
    iteration: 200
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.05
    number_cuts: 500
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: true
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
    biccos:
      enabled: true
      auto_param: false
      constraint_strengthening: true
      recursively_strengthening: false
      merge_cut_enabled: false
      fast_inference_enabled: false
      drop_ratio: 0.5
      max_infer_iter: 40
      heuristic: neuron_influence_score
      save_cuts: false
      multi_tree_branching:
        enabled: true
        restore_best_tree: true
        keep_n_best_domains: 50
        target_batch_size: 200
        iterations: 5
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    nonlinear_split:
      method: shortcut
      branching_point_method: uniform
      num_branches: 2
      filter: false
      filter_beta: false
      filter_clamp: false
      filter_batch_size: 10000
      filter_iterations: 25
      relu_only: false
      loose_tanh_threshold: null
      dynamic_bbps: false
      dynamic_options: [uniform, three_left, three_right]
      branching_point_node: ''
      branching_point_db: []
    input_split:
      enable_clip_domains: false
      split_hint: null
      reorder_bab: false
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_sum: false
      sb_primary_spec: null
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_iters: 1000000000.0
      bf_batch_size: 100000
      bf_zero_crossing_score: false
      touch_zero_score: 0
      ibp_enhancement: false
      catch_assertion: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
      sb_coeff_thresh: 0.001
      sort_index: null
      sort_descending: true
      show_progress: false
      presplit_domains: null
      skip_getting_worst_domain: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: middle
  pgd_steps: 100
  pgd_restarts: 50
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_alpha_scale: false
  pgd_loss_mode: null
  pgd_restart_when_stuck: false
  enable_mip_attack: false
  adv_saver: default_adv_saver
  adv_verifier: default_adv_verifier
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    enabled: auto
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0
  print_verbose_decisions: false
  biccos_mip_sanity_check: false
  sanity_check: 0
  z_split_enabled: false

Experiments at Wed Oct 30 06:07:51 2024 on r23g0004.hpc.itc.rwth-aachen.de
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten(start_dim=1, end_dim=-1)
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
Parameters:
  0.weight: shape torch.Size([16, 3, 4, 4])
  0.bias: shape torch.Size([16])
  2.weight: shape torch.Size([32, 16, 4, 4])
  2.bias: shape torch.Size([32])
  5.weight: shape torch.Size([100, 2048])
  5.bias: shape torch.Size([100])
  7.weight: shape torch.Size([10, 100])
  7.bias: shape torch.Size([10])
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.12560368) tensor(-1.98888886) tensor(-0.01308715)
############################
Internal results will be saved to ablation_results/cifar_cnn_a_adv/biccos_all_selective_mts_plus_gcp.out.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.60389853, -4.03890705, -0.96637481, -1.08776557, -1.28065956,
         -1.57759106, -2.01748729, -1.63907158, -4.69097900, -3.85279989]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [218]; unstable size 218; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 98, 1, 218] with unstable size 97 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 218] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 218] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [97]; unstable size 97; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 97] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 97] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.15867960,  2.57397437, -0.32336390, -0.12450504,  0.40432665,
          0.56075490,  0.24401055,  3.10249186,  2.30172944]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.60389853, -4.03890705, -0.96637481, -1.08776557, -1.28065956,
         -1.57759106, -2.01748729, -1.63907158, -4.69097900, -3.85279989]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.60389853, -4.03890657, -0.96637493, -1.08776581, -1.28065979,
          -1.57759106, -2.01748776, -1.63907230, -4.69097900, -3.85279989],
         [-2.60389853, -4.03890657, -0.96637493, -1.08776581, -1.28065979,
          -1.57759106, -2.01748776, -1.63907230, -4.69097900, -3.85279989]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12139088,  0.19289398]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.97301579, -1.96507931, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.96507931],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.94126987,
            -1.96507931, -1.97301579],
           ...,
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.93236721,
            -1.93236721, -1.96457338],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.95652175,
            -1.95652175, -1.96457338],
           [-1.96457338, -1.95652175, -1.94847023,  ..., -1.96457338,
            -1.96457338, -1.95652175],
           ...,
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.66266882, -1.64767623],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.68515754,
            -1.68515754, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           ...,
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.96507931, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.96507931],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.94126987,
            -1.96507931, -1.97301579],
           ...,
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.93236721,
            -1.93236721, -1.96457338],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.95652175,
            -1.95652175, -1.96457338],
           [-1.96457338, -1.95652175, -1.94847023,  ..., -1.96457338,
            -1.96457338, -1.95652175],
           ...,
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.66266882, -1.64767623],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.68515754,
            -1.68515754, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           ...,
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 2.1149 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 1, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.91239977,  1.30044675, -7.26831532, -7.87342548, -7.74763012,
         -8.46835899, -6.64607763, -8.08242130, -6.15906239,  1.63948882]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [567]; unstable size 567; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 163, 1, 567] with unstable size 162 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 567] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 567] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [162]; unstable size 162; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 162] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 162] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.13653469, -0.81675273,  7.20471859,  7.60528660,  7.75195980,
          8.15055752,  6.22120619,  7.95112562,  6.37312317]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.91239977,  1.30044675, -7.26831532, -7.87342548, -7.74763012,
         -8.46835899, -6.64607763, -8.08242130, -6.15906239,  1.63948882]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.29230642,  1.39088631, -7.69417095, -8.36273766, -8.14110756,
          -8.96644974, -7.15948677, -8.63516712, -6.20971012,  1.18852425]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.20236206]]], device='cuda:0')
number of violation:  1
Attack finished in 0.4020 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.4637 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 2, vnnlib ID: 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.38900280,  -6.91815758, -13.39404202, -12.50848293, -12.34240627,
         -13.34833145, -12.47480679, -13.81170845, -10.09896183,  -8.65394974]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [799]; unstable size 799; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 220, 1, 799] with unstable size 219 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 799] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 799] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [219]; unstable size 219; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 219] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 219] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.81504011, 4.21952724, 3.42958927, 3.38334274, 4.03887367, 3.68367100,
         4.85273266, 1.66043282, 0.65433002]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0486 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 3, vnnlib ID: 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.38513088, -15.12822247,  -7.38964939,  -7.50558901,  -6.26222038,
          -6.85573816, -10.31254101,  -5.30293274, -15.13275623, -13.36650562]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [471]; unstable size 471; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 471] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 471] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 471] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 208] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.96806812,  7.51881886,  0.34542727,  0.43789989, -0.23603070,
          3.05391550, -1.87563026,  7.75412464,  5.88287973]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.38513088, -15.12822247,  -7.38964939,  -7.50558901,  -6.26222038,
          -6.85573816, -10.31254101,  -5.30293274, -15.13275623, -13.36650562]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.38513088, -15.12822247,  -7.38964939,  -7.50558901,  -6.26222038,
           -6.85573816, -10.31254101,  -5.30293274, -15.13275719, -13.36650467],
         [-12.38513088, -15.12822247,  -7.38964939,  -7.50558901,  -6.26222038,
           -6.85573816, -10.31254101,  -5.30293274, -15.13275719, -13.36650467]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.59351778, -0.95928764]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.28095245, -0.35396814, -0.21111101,  ..., -0.43333322,
            -0.76666665,  0.32857150],
           [-1.11587298, -0.44920623, -0.59206349,  ..., -0.41746020,
            -1.09999990, -1.02063489],
           [-1.30634916, -0.59206349, -0.86190474,  ..., -0.06825387,
            -0.81428570, -1.17936504],
           ...,
           [ 0.94761908,  1.24920666,  1.42380977,  ...,  1.45555580,
             1.15396857,  0.80476195],
           [ 0.77301592,  0.97936511,  1.23333359,  ...,  1.18571460,
             1.13809550,  0.86825401],
           [ 0.85238099,  0.24920642,  0.50317466,  ...,  0.86825401,
             0.86825401,  0.99523818]],

          [[ 0.28985518, -0.33816412, -0.19323659,  ..., -0.46698871,
            -0.78904986,  0.33816436],
           [-1.11111104, -0.41867942, -0.54750401,  ..., -0.48309177,
            -1.12721407, -1.03059578],
           [-1.28824472, -0.54750401, -0.80515295,  ..., -0.17713353,
            -0.86956519, -1.17552328],
           ...,
           [ 0.93397754,  1.06280196,  1.20772982,  ...,  1.33655429,
             1.14331758,  0.83735919],
           [ 0.78904998,  0.85346222,  1.04669893,  ...,  1.14331758,
             1.19162667,  0.98228669],
           [ 0.88566834,  0.17713377,  0.35426742,  ...,  0.83735919,
             0.90177143,  1.07890511]],

          [[ 0.40629703, -0.26836565, -0.22338814,  ..., -0.35832080,
            -0.55322337,  0.48125952],
           [-0.92803597, -0.37331331, -0.56821585,  ..., -0.41829082,
            -0.91304344, -0.80809593],
           [-1.10794616, -0.53823084, -0.85307342,  ..., -0.19340314,
            -0.74812591, -1.01799107],
           ...,
           [ 0.28635699,  0.34632701,  0.52623707,  ...,  0.51124454,
             0.31634200,  0.09145443],
           [ 0.36131951,  0.34632701,  0.55622208,  ...,  0.27136448,
             0.34632701,  0.24137947],
           [ 0.69115460, -0.01349309,  0.18140946,  ...,  0.37631202,
             0.48125952,  0.75112462]]],


         [[[ 0.28095245, -0.35396814, -0.21111101,  ..., -0.43333322,
            -0.76666665,  0.32857150],
           [-1.11587298, -0.44920623, -0.59206349,  ..., -0.41746020,
            -1.09999990, -1.02063489],
           [-1.30634916, -0.59206349, -0.86190474,  ..., -0.06825387,
            -0.81428570, -1.17936504],
           ...,
           [ 0.94761908,  1.24920666,  1.42380977,  ...,  1.45555580,
             1.15396857,  0.80476195],
           [ 0.77301592,  0.97936511,  1.23333359,  ...,  1.18571460,
             1.13809550,  0.86825401],
           [ 0.85238099,  0.24920642,  0.50317466,  ...,  0.86825401,
             0.86825401,  0.99523818]],

          [[ 0.28985518, -0.33816412, -0.19323659,  ..., -0.46698871,
            -0.78904986,  0.33816436],
           [-1.11111104, -0.41867942, -0.54750401,  ..., -0.48309177,
            -1.12721407, -1.03059578],
           [-1.28824472, -0.54750401, -0.80515295,  ..., -0.17713353,
            -0.86956519, -1.17552328],
           ...,
           [ 0.93397754,  1.06280196,  1.20772982,  ...,  1.33655429,
             1.14331758,  0.83735919],
           [ 0.78904998,  0.85346222,  1.04669893,  ...,  1.14331758,
             1.19162667,  0.98228669],
           [ 0.88566834,  0.17713377,  0.35426742,  ...,  0.83735919,
             0.90177143,  1.07890511]],

          [[ 0.40629703, -0.26836565, -0.22338814,  ..., -0.35832080,
            -0.55322337,  0.48125952],
           [-0.92803597, -0.37331331, -0.56821585,  ..., -0.41829082,
            -0.91304344, -0.80809593],
           [-1.10794616, -0.53823084, -0.85307342,  ..., -0.19340314,
            -0.74812591, -1.01799107],
           ...,
           [ 0.28635699,  0.34632701,  0.52623707,  ...,  0.51124454,
             0.31634200,  0.09145443],
           [ 0.36131951,  0.34632701,  0.55622208,  ...,  0.27136448,
             0.34632701,  0.24137947],
           [ 0.69115460, -0.01349309,  0.18140946,  ...,  0.37631202,
             0.48125952,  0.75112462]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0390 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 4, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.68809223, -12.13025570,  -6.63767338,  -9.10205269,  -6.98852253,
          -8.95999241,  -8.94991684,  -9.34213543, -12.00477028, -11.17362881]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [543]; unstable size 543; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 225, 1, 543] with unstable size 224 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 543] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 543] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [224]; unstable size 224; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 224] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 224] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.20494175,  3.45831966, -1.40828764,  1.23128510,  0.91528082,
          0.49897814,  1.02173901,  3.54240799,  2.59704590]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.68809223, -12.13025570,  -6.63767338,  -9.10205269,  -6.98852253,
          -8.95999241,  -8.94991684,  -9.34213543, -12.00477028, -11.17362881]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.68809223, -12.13025570,  -6.63767338,  -9.10205269,  -6.98852253,
           -8.95999241,  -8.94991684,  -9.34213543, -12.00477028, -11.17362881]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.35084915]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.45555562,  0.47142863,  0.50317466,  ...,  0.23333341,
             0.16984135, -0.06825387],
           [ 0.37619054,  0.55079371,  0.91587305,  ...,  0.39206356,
             0.59841275,  0.21746039],
           [ 0.47142863,  0.64603180,  0.70952386,  ...,  0.58253974,
             0.85238099,  0.82063496],
           ...,
           [ 0.32857150,  0.55079371,  0.18571436,  ..., -0.67142856,
            -1.22698402, -1.06825387],
           [ 0.47142863,  0.47142863,  0.21746039,  ..., -0.00476181,
            -1.14761901, -1.44920623],
           [ 0.45555562,  0.15396833, -0.11587292,  ...,  1.04285717,
             0.34444451, -0.54444444]],

          [[ 1.03059590,  1.09500813,  1.19162667,  ...,  1.12721443,
             0.96618366,  0.70853472],
           [ 1.03059590,  1.14331758,  1.28824508,  ...,  1.27214205,
             1.36876035,  0.98228669],
           [ 1.15942061,  1.22383285,  1.23993587,  ...,  1.38486338,
             1.54589403,  1.44927561],
           ...,
           [ 1.07890511,  1.28824508,  0.86956531,  ..., -0.70853460,
            -1.20772946, -0.96618354],
           [ 1.15942061,  1.22383285,  1.03059590,  ..., -0.19323659,
            -1.12721407, -1.33655393],
           [ 1.07890511,  0.93397754,  0.85346222,  ...,  0.99838978,
             0.28985518, -0.43478248]],

          [[ 0.10644694,  0.19640197,  0.42128953,  ..., -0.01349309,
             0.09145443, -0.31334329],
           [ 0.16641696,  0.45127454,  0.94602716,  ...,  0.19640197,
             0.75112462,  0.28635699],
           [ 0.16641696,  0.39130452,  0.48125952,  ...,  0.36131951,
             0.91604215,  1.03598225],
           ...,
           [ 0.06146942,  0.37631202,  0.07646193,  ..., -0.83808094,
            -1.27286363, -1.09295356],
           [ 0.19640197,  0.37631202, -0.11844061,  ..., -0.43328333,
            -1.27286363, -1.42278874],
           [ 0.25637197, -0.14842562, -0.73313338,  ...,  0.82608712,
            -0.02848560, -0.82308841]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0507 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 5, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.08061361, -7.35808754, -1.52466714, -0.79548538, -0.38909817,
         -1.03977191, -3.36049914, -3.42065954, -6.66970348, -6.69352865]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [658]; unstable size 658; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 201, 1, 658] with unstable size 200 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 658] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 658] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 200] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.36226153,  5.20612240,  0.11421609, -0.45663396, -0.35881886,
          1.67416477,  1.85006618,  4.62576962,  5.01755571]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.08061361, -7.35808754, -1.52466714, -0.79548538, -0.38909817,
         -1.03977191, -3.36049914, -3.42065954, -6.66970348, -6.69352865]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.72007203, -6.67509556, -1.02529848, -0.02632031, -0.06467843,
          -0.23389345, -2.63078475, -2.87741232, -6.08596230, -5.98822784],
         [-1.72007203, -6.67509556, -1.02529848, -0.02632031, -0.06467843,
          -0.23389345, -2.63078475, -2.87741232, -6.08596230, -5.98822784]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.03835812,  0.16921502]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0120 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0638 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 6, vnnlib ID: 6 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.40164280,  -8.37019825, -13.00969315, -14.79013634, -13.45650959,
         -15.46328926, -15.14051628, -13.42083931,  -9.22426891, -11.21731853]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [529]; unstable size 529; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 529] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 529] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 529] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 192] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.41059232,  2.25627089,  3.81135988,  2.82651472,  4.25359440,
          4.02583885,  2.31334567, -1.35637224,  0.51038694]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.40164280,  -8.37019825, -13.00969315, -14.79013634, -13.45650959,
         -15.46328926, -15.14051628, -13.42083931,  -9.22426891, -11.21731853]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.40164471,  -8.37019730, -13.00969315, -14.79013538, -13.45650864,
          -15.46328926, -15.14051723, -13.42084026,  -9.22426891, -11.21731758],
         [ -9.40164471,  -8.37019730, -13.00969315, -14.79013538, -13.45650864,
          -15.46328926, -15.14051723, -13.42084026,  -9.22426891, -11.21731758]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.03144741, -0.17737579]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]],


         [[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0625 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 7, vnnlib ID: 7 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.00835705, -8.96086788, -3.69912124, -5.03624153, -2.68869019,
         -5.63221502, -2.51778221, -6.42361641, -8.76600933, -9.71107197]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [503]; unstable size 503; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 254, 1, 503] with unstable size 253 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 503] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 503] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [253]; unstable size 253; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 253] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 253] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.85433102,  4.63593197,  0.09867120,  1.33992839, -1.07176208,
          1.69816673,  1.94883537,  4.31601524,  5.46722841]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.00835705, -8.96086788, -3.69912124, -5.03624153, -2.68869019,
         -5.63221502, -2.51778221, -6.42361641, -8.76600933, -9.71107197]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.24038744,  -9.28610897,  -3.84454465,  -5.20589828,  -2.66719246,
           -5.68954802,  -3.06507778,  -6.37724495,  -8.96725273, -10.02994823]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.39788532]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0054 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0681 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 8, vnnlib ID: 8 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.93469334, -20.12154388, -17.33457947, -19.86049843, -20.21372986,
         -21.25618935, -22.65778542, -22.05707359, -17.64817047, -20.80877304]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1012]; unstable size 1012; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 127, 1, 1012] with unstable size 126 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 1012] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1012] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [126]; unstable size 126; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 126] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 126] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.23773289, 2.69126439, 5.14333248, 5.34886694, 6.31123447, 7.75378323,
         7.14196920, 2.92753410, 5.99536991]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0660 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 9, vnnlib ID: 9 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.80179358, -12.46501255,  -6.57853985,  -6.68956470,  -7.61111355,
          -7.23589230,  -7.87289953,  -9.75897789,  -7.54242992, -11.49101162]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [483]; unstable size 483; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 224, 1, 483] with unstable size 223 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 483] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 483] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [223]; unstable size 223; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 223] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 223] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.44218934,  3.89411855, -1.74409604, -0.80226833, -0.57978725,
         -0.20545268,  1.59700751, -1.08158219,  2.85933113]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.80179358, -12.46501255,  -6.57853985,  -6.68956470,  -7.61111355,
          -7.23589230,  -7.87289953,  -9.75897789,  -7.54242992, -11.49101162]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.80179310, -12.46501160,  -6.57853985,  -6.68956327,  -7.61111259,
           -7.23589230,  -7.87289858,  -9.75897694,  -7.54242992, -11.49100971],
         [ -7.80179310, -12.46501160,  -6.57853985,  -6.68956327,  -7.61111259,
           -7.23589230,  -7.87289858,  -9.75897694,  -7.54242992, -11.49100971]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.56590080, -0.65735245, -0.54632902,  0.37522030,  0.63700628,
           0.30653763]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0865 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 10, vnnlib ID: 10 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.70068169, -10.68916798,  -4.80894661,  -4.48129988,  -7.59597015,
          -3.34438372,  -9.78639984,  -5.25471544,  -8.97214031,  -9.17322254]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [326]; unstable size 326; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 99, 1, 326] with unstable size 98 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 326] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 326] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [98]; unstable size 98; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 98] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 98] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.76745224,  4.58752918, -0.99277151, -1.30379021,  1.80976844,
         -2.48497868,  3.87898993,  2.81910610,  3.04527569]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.70068169, -10.68916798,  -4.80894661,  -4.48129988,  -7.59597015,
          -3.34438372,  -9.78639984,  -5.25471544,  -8.97214031,  -9.17322254]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.70068073, -10.68916893,  -4.80894661,  -4.48130035,  -7.59597015,
           -3.34438372,  -9.78640079,  -5.25471544,  -8.97214031,  -9.17322254],
         [ -8.70068073, -10.68916893,  -4.80894661,  -4.48130035,  -7.59597015,
           -3.34438372,  -9.78640079,  -5.25471544,  -8.97214031,  -9.17322254]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44576883, -0.77341509, -1.91033173]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0684 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 11, vnnlib ID: 11 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.63478470, -9.97276974, -2.42177224, -5.98180294, -3.01294947,
         -6.49992609, -5.35868835, -6.09445810, -8.49534416, -9.48241520]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [507]; unstable size 507; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 253, 1, 507] with unstable size 252 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 507] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 507] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [252]; unstable size 252; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 252] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 252] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.93055713,  5.50861263,  2.43715620, -0.28564250,  2.95803738,
          1.64144301,  2.49058819,  4.06993961,  5.13847589]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.63478470, -9.97276974, -2.42177224, -5.98180294, -3.01294947,
         -6.49992609, -5.35868835, -6.09445810, -8.49534416, -9.48241520]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.26it/s]100%|██████████| 1/1 [00:00<00:00,  9.24it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.85260201, -9.94958401, -2.69204354, -5.95113659, -2.83771229,
          -6.45710039, -5.35251665, -5.97749758, -8.52292919, -9.41183758]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.14566875]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1107 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 26.60955238342285
alpha/beta optimization time: 3.698681354522705
initial alpha-crown bounds: tensor([[ 2.00031948,  5.62875319,  2.49428248, -0.20550334,  3.01036453,
          1.72182679,  2.55286455,  4.16995525,  5.23668909]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.20550334453582764
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.5982 seconds.
lower bounds for all target labels: [2.000319480895996, 5.628753185272217, 2.4942824840545654, -0.20550334453582764, 3.0103609561920166, 1.7218267917633057, 2.5528645515441895, 4.169955253601074, 5.23668909072876]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [3]
start creating model mps for candidates: ['lay/16_3']
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=11_spec=3_26487993.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=11_spec=3_26487993.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 226643 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/cuts/infered_cuts.py:406: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(history[3]),
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 196.02269315719604
Verifying property 0 with 1 instances.
##### Instance 11 first 10 spec matrices: 
tensor([[[ 0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.628753185272217.

Properties batch 1, size 1
Remaining timeout: 195.85647559165955
Verifying property 1 with 1 instances.
##### Instance 11 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.23668909072876.

Properties batch 2, size 1
Remaining timeout: 195.76380133628845
Verifying property 2 with 1 instances.
##### Instance 11 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.169955253601074.

Properties batch 3, size 1
Remaining timeout: 195.67200875282288
Verifying property 3 with 1 instances.
##### Instance 11 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.010364532470703.

Properties batch 4, size 1
Remaining timeout: 195.58166337013245
Verifying property 4 with 1 instances.
##### Instance 11 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.5528645515441895.

Properties batch 5, size 1
Remaining timeout: 195.4904601573944
Verifying property 5 with 1 instances.
##### Instance 11 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.4942824840545654.

Properties batch 6, size 1
Remaining timeout: 195.40157318115234
Verifying property 6 with 1 instances.
##### Instance 11 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.000319480895996.

Properties batch 7, size 1
Remaining timeout: 195.31295442581177
Verifying property 7 with 1 instances.
##### Instance 11 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.7218267917633057.

Properties batch 8, size 1
Remaining timeout: 195.22324132919312
Verifying property 8 with 1 instances.
##### Instance 11 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.20550334]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.63478470, -9.97276974, -2.42177224, -5.98180294, -3.01294947,
        -6.49992609, -5.35868835, -6.09445810, -8.49534416, -9.48241520],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.20550334]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 507
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 252
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 782
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0008883476257324219
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.5810    transfer 0.0001    finalize 0.0003    func 0.5816    
Accumulated time: func 0.5816    prepare 0.0002    bound 0.5810    transfer 0.0001    finalize 0.0003    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 41] 
split level 1: [/input-12, 35] 
split level 2: [/input-12, 45] 
split level 3: [/input-12, 58] 
split level 4: [/input-12, 61] 
split level 5: [/input-12, 80] 
split level 6: [/input-12, 4] 
split level 7: [/input-12, 40] 
split level 8: [/input, 377] 
split level 9: [/input, 392] 
split level 10: [/input, 393] 
split level 11: [/input-8, 443] 
split level 12: [/input, 444] 
split level 13: [/input-12, 60] 
split level 14: [/input-8, 1749] 
split level 15: [/input-8, 1443] 
split level 16: [/input-8, 2042] 
split level 17: [/input-8, 1411] 
split level 18: [/input-8, 1323] 
split level 19: [/input-8, 1260] 
split level 20: [/input, 344] 
split level 21: [/input-8, 881] 
split level 22: [/input-8, 1964] 
split level 23: [/input, 343] 
split level 24: [/input-8, 1436] 
split level 25: [/input-8, 465] 
split level 26: [/input-8, 1388] 
split level 27: [/input-8, 818] 
split level 28: [/input-8, 2043] 
split level 29: [/input-8, 585] 
split level 30: [/input-8, 1251] 
split level 31: [/input-8, 2044] 
split level 32: [/input-8, 265] 
split level 33: [/input, 428] 
split level 34: [/input-8, 273] 
split level 35: [/input-8, 1389] 
split level 36: [/input, 378] 
split level 37: [/input-8, 497] 
split level 38: [/input-12, 99] 
split level 39: [/input-8, 292] 
split level 40: [/input-8, 423] 
split level 41: [/input-8, 115] 
split level 42: [/input-8, 1747] 
split level 43: [/input, 327] 
split level 44: [/input-8, 2032] 
split level 45: [/input-8, 848] 
split level 46: [/input-8, 610] 
split level 47: [/input-8, 849] 
split level 48: [/input, 425] 
split level 49: [/input, 380] 
split level 50: [/input-8, 1410] 
split level 51: [/input, 3161] 
split level 52: [/input, 3493] 
split level 53: [/input-8, 1493] 
split level 54: [/input-8, 1865] 
split level 55: [/input-8, 282] 
split level 56: [/input-8, 1428] 
split level 57: [/input, 3163] 
split level 58: [/input-8, 1873] 
split level 59: [/input-8, 288] 
split level 60: [/input-8, 2040] 
split level 61: [/input-8, 83] 
split level 62: [/input-8, 1741] 
split level 63: [/input-8, 469] 
split level 64: [/input, 87] 
split level 65: [/input, 2412] 
split level 66: [/input, 2166] 
split level 67: [/input, 3178] 
split level 68: [/input-8, 1386] 
split level 69: [/input, 1602] 
split level 70: [/input, 3400] 
split level 71: [/input, 1612] 
split level 72: [/input-8, 1739] 
split level 73: [/input, 329] 
split level 74: [/input, 3479] 
split level 75: [/input-8, 1437] 
split level 76: [/input, 3130] 
split level 77: [/input, 1318] 
split level 78: [/input, 3158] 
split level 79: [/input, 2164] 
split level 80: [/input, 2236] 
split level 81: [/input, 2180] 
split level 82: [/input-8, 407] 
split level 83: [/input, 3461] 
split level 84: [/input, 2181] 
split level 85: [/input, 3157] 
split level 86: [/input-8, 1442] 
split level 87: [/input-8, 883] 
split level 88: [/input-8, 278] 
split level 89: [/input, 3172] 
split level 90: [/input, 103] 
split level 91: [/input, 3927] 
split level 92: [/input, 1302] 
split level 93: [/input, 1460] 
split level 94: [/input-8, 518] 
split level 95: [/input-8, 1014] 
split level 96: [/input-8, 1772] 
split level 97: [/input, 119] 
split level 98: [/input, 1448] 
split level 99: [/input, 139] 
split level 100: [/input, 1579] 
split level 101: [/input-8, 1758] 
split level 102: [/input, 3181] 
split level 103: [/input-8, 1119] 
split level 104: [/input-8, 2041] 
split level 105: [/input, 2091] 
split level 106: [/input, 364] 
split level 107: [/input, 1370] 
split level 108: [/input, 3528] 
split level 109: [/input, 1462] 
split level 110: [/input-8, 1731] 
split level 111: [/input, 3475] 
split level 112: [/input, 3148] 
split level 113: [/input-8, 1132] 
split level 114: [/input-8, 1730] 
split level 115: [/input, 373] 
split level 116: [/input-8, 398] 
split level 117: [/input, 2134] 
split level 118: [/input, 3114] 
split level 119: [/input, 3971] 
split level 120: [/input-8, 1979] 
split level 121: [/input-8, 521] 
split level 122: [/input-8, 1334] 
split level 123: [/input, 1561] 
split level 124: [/input, 1562] 
split level 125: [/input, 3507] 
split level 126: [/input, 3367] 
split level 127: [/input, 1578] 
split level 128: [/input, 3384] 
split level 129: [/input, 385] 
split level 130: [/input, 1336] 
split level 131: [/input, 132] 
split level 132: [/input, 2397] 
split level 133: [/input, 3398] 
split level 134: [/input, 1396] 
split level 135: [/input, 1586] 
split level 136: [/input, 3972] 
split level 137: [/input, 2302] 
split level 138: [/input, 3508] 
split level 139: [/input, 3383] 
split level 140: [/input, 2331] 
split level 141: [/input, 442] 
split level 142: [/input, 1386] 
split level 143: [/input-8, 1006] 
split level 144: [/input, 3145] 
split level 145: [/input, 1563] 
split level 146: [/input, 2385] 
split level 147: [/input-8, 1732] 
split level 148: [/input, 3351] 
split level 149: [/input, 547] 
split level 150: [/input, 2347] 
split level 151: [/input, 2136] 
split level 152: [/input, 3143] 
split level 153: [/input, 1335] 
split level 154: [/input, 3196] 
split level 155: [/input-8, 912] 
split level 156: [/input, 1485] 
split level 157: [/input, 2137] 
split level 158: [/input, 3205] 
split level 159: [/input, 695] 
split level 160: [/input, 325] 
split level 161: [/input, 3214] 
split level 162: [/input, 1354] 
split level 163: [/input, 1413] 
split level 164: [/input, 3397] 
split level 165: [/input, 2364] 
split level 166: [/input, 1596] 
split level 167: [/input, 1421] 
split level 168: [/input, 3142] 
split level 169: [/input, 2981] 
split level 170: [/input, 2163] 
split level 171: [/input, 2627] 
split level 172: [/input, 3940] 
split level 173: [/input-8, 485] 
split level 174: [/input, 71] 
split level 175: [/input, 2227] 
split level 176: [/input, 3529] 
split level 177: [/input, 2245] 
split level 178: [/input, 1342] 
split level 179: [/input, 1746] 
split level 180: [/input, 570] 
split level 181: [/input, 2286] 
split level 182: [/input, 633] 
split level 183: [/input, 569] 
split level 184: [/input, 1720] 
split level 185: [/input, 3190] 
split level 186: [/input, 3221] 
split level 187: [/input, 3156] 
split level 188: [/input-8, 2047] 
split level 189: [/input, 553] 
split level 190: [/input, 1382] 
split level 191: [/input, 3490] 
split level 192: [/input, 2382] 
split level 193: [/input, 1326] 
split level 194: [/input, 370] 
split level 195: [/input, 3334] 
split level 196: [/input, 3222] 
split level 197: [/input, 3364] 
split level 198: [/input, 2299] 
split level 199: [/input, 3339] 
Time: prepare 0.0059    bound 0.2098    transfer 0.0034    finalize 0.0030    func 0.2222    
Accumulated time: func 0.8038    prepare 0.0161    bound 0.7908    transfer 0.0035    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.14420843) min lb tensor(-0.20535755)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=11_spec=3_26487993.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0014
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.014121294021606445 
BICCOS Cumulative time: 0.014121294021606445
Preprocessing time: 0.010178089141845703 Inference time: 0.002157449722290039 Add cuts time: 0.00010561943054199219 Cut analysis time: 0.001680135726928711
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19871 (1), -0.19860 (1), -0.19856 (1), -0.19850 (1), -0.19802 (1), -0.19793 (1), -0.19790 (1), -0.19784 (1), -0.19784 (1), -0.19732 (1), -0.19726 (1), -0.19718 (1), -0.19706 (1), -0.19678 (1), -0.19572 (1), -0.19522 (1), -0.19506 (1), -0.19442 (1), -0.19420 (1), -0.19400 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5473    set_bounds 0.0084    solve 0.2223    add 0.2146    
Accumulated time: pickout 0.0004    decision 0.5473    set_bounds 0.0084    solve 0.2223    add 0.2146    
Current (lb-rhs): -0.1987079381942749
50 domains visited
Cumulative time: 1.6416983604431152

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 45] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 45] [/input-12, 41] 
split level 1: [/input-12, 45] [/input-12, 58] [/input-12, 58] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 58] [/input-12, 45] 
split level 2: [/input-12, 58] [/input-12, 61] [/input-12, 61] [/input-12, 58] [/input-12, 61] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 61] [/input-12, 61] 
split level 3: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 61] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18420100212097168
10 lb beta sum: 0.3620595335960388, worst -0.18056637048721313
Time: prepare 0.0072    bound 1.2179    transfer 0.0018    finalize 0.0026    func 1.2322    
Accumulated time: func 2.0360    prepare 0.0235    bound 2.0087    transfer 0.0054    finalize 0.0059    
all_split False
======================Cut inference begins======================
max lb tensor(0.19709599) min lb tensor(-0.18055815)
Number of Verified Splits: 62 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=11_spec=3_26487993.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.017308712005615234 
BICCOS Cumulative time: 0.03143000602722168
Preprocessing time: 0.011954069137573242 Inference time: 0.0024406909942626953 Add cuts time: 0.0012698173522949219 Cut analysis time: 0.001644134521484375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07107 (2), -0.07020 (2), -0.07010 (2), -0.06970 (2), -0.06961 (2), -0.06954 (2), -0.06947 (2), -0.06936 (2), -0.06896 (2), -0.06886 (2), -0.06861 (2), -0.06836 (2), -0.06817 (2), -0.06790 (2), -0.06783 (2), -0.06765 (2), -0.06741 (2), -0.06646 (2), -0.06587 (2), -0.06522 (2), 
Length of domains: 50
Time: pickout 0.0076    decision 0.0218    set_bounds 0.0119    solve 1.2324    add 0.2153    
Accumulated time: pickout 0.0080    decision 0.5691    set_bounds 0.0203    solve 1.4547    add 0.4299    
Current (lb-rhs): -0.07107169926166534
100 domains visited
Cumulative time: 3.155385971069336

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 35] [/input-12, 41] [/input-12, 41] [/input-12, 45] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 45] [/input-12, 41] 
split level 1: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 58] [/input-12, 45] [/input-12, 45] [/input-12, 35] [/input-12, 58] [/input-12, 35] 
split level 2: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 58] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 3: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 61] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07283651828765869
10 lb beta sum: 0.7891349792480469, worst -0.01132112741470337
Time: prepare 0.0072    bound 0.1155    transfer 0.0017    finalize 0.0022    func 0.1292    
Accumulated time: func 2.1652    prepare 0.0310    bound 2.1242    transfer 0.0070    finalize 0.0081    
all_split False
======================Cut inference begins======================
max lb tensor(0.60021621) min lb tensor(0.00030112)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=11_spec=3_26487993.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.03810930252075195 
BICCOS Cumulative time: 0.06953930854797363
Preprocessing time: 0.011574268341064453 Inference time: 0.0170443058013916 Add cuts time: 0.008324146270751953 Cut analysis time: 0.0011665821075439453
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0076    decision 0.0197    set_bounds 0.0154    solve 0.1293    add 0.0196    
Accumulated time: pickout 0.0157    decision 0.5888    set_bounds 0.0357    solve 1.5839    add 0.4494    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58, 41, 35]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([3.48758830e-32, 6.79242462e-02, 1.18855223e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58, 41, 35]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([3.48758830e-32, 6.79242462e-02, 4.85810265e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58, 41]), tensor([-1.,  1.]), tensor([0, 0]), tensor([3.48758830e-32, 1.73319742e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  4, 41]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([3.30047194e+32, 9.56285298e-02, 1.06057167e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  4, 41]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([3.30047194e+32, 9.56285298e-02, 1.73188746e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  4]), tensor([1., 1.]), tensor([0, 0]), tensor([3.30047194e+32, 2.47694422e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1509077548980713
10 lb beta sum: 0.8215807676315308, worst -0.03139743208885193
Time: prepare 0.0004    bound 0.1158    transfer 0.0001    finalize 0.0002    func 0.1166    
Accumulated time: func 2.2818    prepare 0.0314    bound 2.2400    transfer 0.0071    finalize 0.0083    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] 
split level 1: [/input-12, 35] 
split level 2: [/input-12, 45] 
split level 3: [/input-12, 61] 
split level 4: [/input-12, 80] 
split level 5: [/input-12, 40] 
split level 6: [/input, 393] 
split level 7: [/input-8, 1411] 
cut re-enabled after branching node selection
0 lb beta sum: 2.149303913116455, worst -0.024674683809280396
10 lb beta sum: 2.149303913116455, worst -0.024505823850631714
Time: prepare 0.0124    bound 0.1178    transfer 0.0008    finalize 0.0012    func 0.1339    
Accumulated time: func 2.4157    prepare 0.0442    bound 2.3579    transfer 0.0079    finalize 0.0095    
all_split False
======================Cut inference begins======================
max lb tensor(1.91298115) min lb tensor(-0.02444008)
Number of Verified Splits: 252 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 2.149303913116455, worst -0.08635380864143372
10 lb beta sum: 2.181211471557617, worst -0.031162738800048828
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=11_spec=3_26487993.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.2917156219482422 
BICCOS Cumulative time: 0.3612549304962158
Preprocessing time: 0.007767438888549805 Inference time: 0.2747819423675537 Add cuts time: 0.008031845092773438 Cut analysis time: 0.0011343955993652344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02444 (8), -0.02071 (8), -0.01977 (8), -0.01604 (8), 
Length of domains: 4
Time: pickout 0.0004    decision 0.0215    set_bounds 0.0303    solve 0.1340    add 0.0256    
Accumulated time: pickout 0.0161    decision 0.6103    set_bounds 0.0661    solve 1.7179    add 0.4751    
Current (lb-rhs): -0.024440079927444458
104 domains visited
Cumulative time: 4.063882112503052

BaB round 2
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 392] [/input, 377] [/input, 392] [/input, 377] 
split level 1: [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] 
split level 2: [/input-8, 1251] [/input-8, 1251] [/input-8, 1251] [/input-8, 1251] 
split level 3: [/input-8, 2043] [/input-8, 2043] [/input-8, 2043] [/input-8, 2043] 
split level 4: [/input, 428] [/input, 378] [/input, 428] [/input, 378] 
split level 5: [/input, 378] [/input, 428] [/input, 378] [/input, 428] 
cut re-enabled after branching node selection
0 lb beta sum: 2.149303913116455, worst -0.009554833173751831
10 lb beta sum: 2.149303913116455, worst -0.009326010942459106
Time: prepare 0.0123    bound 0.1120    transfer 0.0008    finalize 0.0012    func 0.1280    
Accumulated time: func 2.5437    prepare 0.0569    bound 2.4699    transfer 0.0087    finalize 0.0106    
all_split False
======================Cut inference begins======================
max lb tensor(0.01326969) min lb tensor(-0.00924566)
Number of Verified Splits: 207 of 256
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=11_spec=3_26487993.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0007
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.029720544815063477 
BICCOS Cumulative time: 0.3909754753112793
Preprocessing time: 0.0076296329498291016 Inference time: 0.02000737190246582 Add cuts time: 0.0010018348693847656 Cut analysis time: 0.001081705093383789
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00925 (14), -0.00907 (14), -0.00883 (14), -0.00865 (14), -0.00808 (14), -0.00790 (14), -0.00784 (14), -0.00767 (14), -0.00766 (14), -0.00748 (14), -0.00742 (14), -0.00725 (14), -0.00668 (14), -0.00650 (14), -0.00626 (14), -0.00608 (14), -0.00468 (14), -0.00462 (14), -0.00452 (14), -0.00450 (14), 
Length of domains: 49
Time: pickout 0.0007    decision 0.0195    set_bounds 0.0264    solve 0.1281    add 0.0615    
Accumulated time: pickout 0.0168    decision 0.6297    set_bounds 0.0925    solve 1.8460    add 0.5366    
Current (lb-rhs): -0.00924566388130188
153 domains visited
Cumulative time: 4.337720155715942

BaB round 3
batch: 49
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 392] [/input, 377] [/input, 392] [/input, 392] [/input, 377] [/input, 392] [/input, 377] [/input, 392] [/input, 377] [/input, 392] 
split level 1: [/input-8, 610] [/input-8, 1389] [/input-8, 610] [/input-8, 292] [/input-8, 1389] [/input-8, 292] [/input-8, 1389] [/input-8, 610] [/input-8, 1389] [/input-8, 610] 
split level 2: [/input-8, 292] [/input-8, 610] [/input-8, 292] [/input-8, 610] [/input-8, 610] [/input-8, 610] [/input-8, 610] [/input-8, 292] [/input-8, 610] [/input-8, 292] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.004562556743621826
10 lb beta sum: 0.06593699753284454, worst -0.001486063003540039
Time: prepare 0.0095    bound 1.3760    transfer 0.0017    finalize 0.0019    func 1.3917    
Accumulated time: func 3.9353    prepare 0.0666    bound 3.8459    transfer 0.0104    finalize 0.0125    
all_split False
======================Cut inference begins======================
max lb tensor(0.01357895) min lb tensor(-0.00144118)
Number of Verified Splits: 376 of 392
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=11_spec=3_26487993.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.05471158027648926 
BICCOS Cumulative time: 0.44568705558776855
Preprocessing time: 0.01164698600769043 Inference time: 0.04083871841430664 Add cuts time: 0.0007367134094238281 Cut analysis time: 0.0014891624450683594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00144 (17), -0.00126 (17), -0.00091 (17), -0.00081 (17), -0.00074 (17), -0.00066 (17), -0.00064 (17), -0.00053 (17), -0.00048 (17), -0.00035 (17), -0.00029 (17), -0.00024 (17), -0.00011 (17), -0.00006 (17), -0.00006 (17), -0.00003 (17), 
Length of domains: 16
Time: pickout 0.0076    decision 0.0164    set_bounds 0.0320    solve 1.3918    add 0.0398    
Accumulated time: pickout 0.0244    decision 0.6462    set_bounds 0.1245    solve 3.2378    add 0.5764    
Current (lb-rhs): -0.00144118070602417
169 domains visited
Cumulative time: 5.888707160949707

BaB round 4
batch: 16
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] 
split level 1: [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] 
split level 2: [/input, 327] [/input, 327] [/input, 327] [/input, 327] [/input, 327] [/input, 327] [/input, 327] [/input, 327] [/input, 327] [/input, 327] 
split level 3: [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.003063201904296875

all verified at 0th iter
Time: prepare 0.0064    bound 0.0055    transfer 0.0007    finalize 0.0012    func 0.0157    
Accumulated time: func 3.9511    prepare 0.0732    bound 3.8513    transfer 0.0111    finalize 0.0137    
all_split False
======================Cut inference begins======================
max lb tensor(0.01491714) min lb tensor(0.00306320)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=11_spec=3_26487993.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.008603096008300781 
BICCOS Cumulative time: 0.45429015159606934
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0014    decision 0.0145    set_bounds 0.0226    solve 0.0158    add 0.0001    
Accumulated time: pickout 0.0258    decision 0.6606    set_bounds 0.1472    solve 3.2535    add 0.5765    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
169 domains visited
Cumulative time: 5.952541828155518

found process to kill: terminal indx = 3
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=11_spec=3_26487993.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=11_spec=3_26487993.indx
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=11_spec=3_26487993.log
found process for pidx=3
kill process for pidx=3
Result: safe in 11.0908 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 12, vnnlib ID: 12 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.60971117, -6.54356766, -3.77449369, -4.58758783, -5.85971212,
         -3.70617151, -9.49713802, -3.95379829, -6.54922104, -5.37819719]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [436]; unstable size 436; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 114, 1, 436] with unstable size 113 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 436] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 436] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [113]; unstable size 113; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 113] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 113] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 6.80846572e-01,  1.01449513e+00, -8.60394955e-01,  3.58936191e-03,
          1.15603149e+00, -9.08453882e-01,  4.73845673e+00,  1.30274653e+00,
          2.83696294e-01]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.60971117, -6.54356766, -3.77449369, -4.58758783, -5.85971212,
         -3.70617151, -9.49713802, -3.95379829, -6.54922104, -5.37819719]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.60971117, -6.54356766, -3.77449417, -4.58758783, -5.85971165,
          -3.70617199, -9.49713802, -3.95379782, -6.54922009, -5.37819719],
         [-5.60971117, -6.54356766, -3.77449417, -4.58758783, -5.85971165,
          -3.70617199, -9.49713802, -3.95379782, -6.54922009, -5.37819719]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.17930365, -0.24762583]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.56666672,  0.66190481,  0.64603180,  ...,  0.24920642,
             0.26507944,  0.21746039],
           [ 0.43968260,  0.53492069,  0.51904768,  ...,  0.29682547,
             0.29682547,  0.24920642],
           [ 0.34444451,  0.39206356,  0.39206356,  ...,  0.32857150,
             0.34444451,  0.29682547],
           ...,
           [-1.83015871, -1.73492062, -1.73492062,  ..., -0.51269841,
            -0.52857143, -0.60793650],
           [-1.87777781, -1.81428576, -1.81428576,  ..., -0.52857143,
            -0.51269841, -0.52857143],
           [-1.90952384, -1.89365077, -1.87777781,  ..., -0.56031746,
            -0.59206349, -0.54444444]],

          [[ 1.15942061,  1.20772982,  1.19162667,  ...,  0.95008057,
             0.96618366,  0.91787446],
           [ 1.09500813,  1.12721443,  1.09500813,  ...,  0.98228669,
             0.99838978,  0.93397754],
           [ 0.99838978,  1.03059590,  1.01449287,  ...,  0.98228669,
             0.99838978,  0.95008057],
           ...,
           [-1.72302747, -1.57809973, -1.61030602,  ..., -0.06441211,
            -0.01610294, -0.09661824],
           [-1.80354273, -1.72302747, -1.73913050,  ..., -0.03220600,
            -0.01610294, -0.04830906],
           [-1.83574879, -1.81964576, -1.80354273,  ..., -0.06441211,
            -0.08051517, -0.04830906]],

          [[ 1.62069011,  1.62069011,  1.60569763,  ...,  1.50075006,
             1.51574254,  1.47076499],
           [ 1.59070504,  1.59070504,  1.56072009,  ...,  1.53073502,
             1.54572761,  1.48575759],
           [ 1.51574254,  1.51574254,  1.50075006,  ...,  1.50075006,
             1.51574254,  1.47076499],
           ...,
           [-1.49775124, -1.37781119, -1.39280367,  ..., -0.55322337,
            -0.61319339, -0.70314842],
           [-1.55772126, -1.49775124, -1.49775124,  ..., -0.56821585,
            -0.61319339, -0.58320838],
           [-1.58770621, -1.57271373, -1.55772126,  ..., -0.65817088,
            -0.71814090, -0.61319339]]],


         [[[ 0.56666672,  0.66190481,  0.64603180,  ...,  0.24920642,
             0.26507944,  0.21746039],
           [ 0.43968260,  0.53492069,  0.51904768,  ...,  0.29682547,
             0.29682547,  0.24920642],
           [ 0.34444451,  0.39206356,  0.39206356,  ...,  0.32857150,
             0.34444451,  0.29682547],
           ...,
           [-1.83015871, -1.73492062, -1.73492062,  ..., -0.51269841,
            -0.52857143, -0.60793650],
           [-1.87777781, -1.81428576, -1.81428576,  ..., -0.52857143,
            -0.51269841, -0.52857143],
           [-1.90952384, -1.89365077, -1.87777781,  ..., -0.56031746,
            -0.59206349, -0.54444444]],

          [[ 1.15942061,  1.20772982,  1.19162667,  ...,  0.95008057,
             0.96618366,  0.91787446],
           [ 1.09500813,  1.12721443,  1.09500813,  ...,  0.98228669,
             0.99838978,  0.93397754],
           [ 0.99838978,  1.03059590,  1.01449287,  ...,  0.98228669,
             0.99838978,  0.95008057],
           ...,
           [-1.72302747, -1.57809973, -1.61030602,  ..., -0.06441211,
            -0.01610294, -0.09661824],
           [-1.80354273, -1.72302747, -1.73913050,  ..., -0.03220600,
            -0.01610294, -0.04830906],
           [-1.83574879, -1.81964576, -1.80354273,  ..., -0.06441211,
            -0.08051517, -0.04830906]],

          [[ 1.62069011,  1.62069011,  1.60569763,  ...,  1.50075006,
             1.51574254,  1.47076499],
           [ 1.59070504,  1.59070504,  1.56072009,  ...,  1.53073502,
             1.54572761,  1.48575759],
           [ 1.51574254,  1.51574254,  1.50075006,  ...,  1.50075006,
             1.51574254,  1.47076499],
           ...,
           [-1.49775124, -1.37781119, -1.39280367,  ..., -0.55322337,
            -0.61319339, -0.70314842],
           [-1.55772126, -1.49775124, -1.49775124,  ..., -0.56821585,
            -0.61319339, -0.58320838],
           [-1.58770621, -1.57271373, -1.55772126,  ..., -0.65817088,
            -0.71814090, -0.61319339]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0745 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 13, vnnlib ID: 13 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.31652355, -10.39834499, -14.53281593, -16.07817841, -15.67444897,
         -18.01647186, -16.02903366, -17.28762436, -10.97990608, -12.63942242]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [677]; unstable size 677; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 677] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 677] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 677] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 164] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.35580730,  2.29579544,  4.09076548,  3.52531242,  5.89760590,
          4.21795750,  5.18644428, -0.70376444,  1.22269106]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.31652355, -10.39834499, -14.53281593, -16.07817841, -15.67444897,
         -18.01647186, -16.02903366, -17.28762436, -10.97990608, -12.63942242]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.31652260, -10.39834595, -14.53281403, -16.07817841, -15.67444897,
          -18.01647186, -16.02903175, -17.28762627, -10.97990513, -12.63942051],
         [-10.31652260, -10.39834595, -14.53281403, -16.07817841, -15.67444897,
          -18.01647186, -16.02903175, -17.28762627, -10.97990513, -12.63942051]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.08182335,  0.58155918]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[0.45555562, 0.40793657, 0.42380959,  ..., 0.75714290,
            0.74126989, 0.70952386],
           [0.47142863, 0.42380959, 0.43968260,  ..., 0.72539687,
            0.69365084, 0.66190481],
           [0.53492069, 0.50317466, 0.55079371,  ..., 0.70952386,
            0.69365084, 0.66190481],
           ...,
           [0.63015878, 0.64603180, 0.66190481,  ..., 0.64603180,
            0.67777783, 0.66190481],
           [0.64603180, 0.61428577, 0.59841275,  ..., 0.63015878,
            0.64603180, 0.66190481],
           [0.72539687, 0.66190481, 0.63015878,  ..., 0.63015878,
            0.59841275, 0.64603180]],

          [[0.48309189, 0.43478271, 0.45088577,  ..., 0.75684386,
            0.72463775, 0.69243163],
           [0.49919492, 0.45088577, 0.46698883,  ..., 0.70853472,
            0.67632860, 0.64412248],
           [0.56360716, 0.53140104, 0.57971025,  ..., 0.69243163,
            0.67632860, 0.64412248],
           ...,
           [0.61191636, 0.62801939, 0.64412248,  ..., 0.62801939,
            0.66022551, 0.64412248],
           [0.62801939, 0.59581327, 0.57971025,  ..., 0.61191636,
            0.62801939, 0.64412248],
           [0.70853472, 0.64412248, 0.61191636,  ..., 0.61191636,
            0.57971025, 0.62801939]],

          [[0.66116959, 0.61619210, 0.63118458,  ..., 0.76611710,
            0.81109464, 0.79610211],
           [0.67616212, 0.63118458, 0.64617711,  ..., 0.76611710,
            0.78110963, 0.75112462],
           [0.73613209, 0.70614707, 0.75112462,  ..., 0.79610211,
            0.78110963, 0.75112462],
           ...,
           [0.66116959, 0.67616212, 0.72113961,  ..., 0.73613209,
            0.76611710, 0.75112462],
           [0.67616212, 0.64617711, 0.66116959,  ..., 0.72113961,
            0.73613209, 0.75112462],
           [0.75112462, 0.69115460, 0.69115460,  ..., 0.72113961,
            0.69115460, 0.73613209]]],


         [[[0.45555562, 0.40793657, 0.42380959,  ..., 0.75714290,
            0.74126989, 0.70952386],
           [0.47142863, 0.42380959, 0.43968260,  ..., 0.72539687,
            0.69365084, 0.66190481],
           [0.53492069, 0.50317466, 0.55079371,  ..., 0.70952386,
            0.69365084, 0.66190481],
           ...,
           [0.63015878, 0.64603180, 0.66190481,  ..., 0.64603180,
            0.67777783, 0.66190481],
           [0.64603180, 0.61428577, 0.59841275,  ..., 0.63015878,
            0.64603180, 0.66190481],
           [0.72539687, 0.66190481, 0.63015878,  ..., 0.63015878,
            0.59841275, 0.64603180]],

          [[0.48309189, 0.43478271, 0.45088577,  ..., 0.75684386,
            0.72463775, 0.69243163],
           [0.49919492, 0.45088577, 0.46698883,  ..., 0.70853472,
            0.67632860, 0.64412248],
           [0.56360716, 0.53140104, 0.57971025,  ..., 0.69243163,
            0.67632860, 0.64412248],
           ...,
           [0.61191636, 0.62801939, 0.64412248,  ..., 0.62801939,
            0.66022551, 0.64412248],
           [0.62801939, 0.59581327, 0.57971025,  ..., 0.61191636,
            0.62801939, 0.64412248],
           [0.70853472, 0.64412248, 0.61191636,  ..., 0.61191636,
            0.57971025, 0.62801939]],

          [[0.66116959, 0.61619210, 0.63118458,  ..., 0.76611710,
            0.81109464, 0.79610211],
           [0.67616212, 0.63118458, 0.64617711,  ..., 0.76611710,
            0.78110963, 0.75112462],
           [0.73613209, 0.70614707, 0.75112462,  ..., 0.79610211,
            0.78110963, 0.75112462],
           ...,
           [0.66116959, 0.67616212, 0.72113961,  ..., 0.73613209,
            0.76611710, 0.75112462],
           [0.67616212, 0.64617711, 0.66116959,  ..., 0.72113961,
            0.73613209, 0.75112462],
           [0.75112462, 0.69115460, 0.69115460,  ..., 0.72113961,
            0.69115460, 0.73613209]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0765 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 14, vnnlib ID: 14 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.58788013, -3.57877111, -7.49758530, -6.42473507, -6.46546555,
         -7.68810511, -6.21870279, -6.45115232, -5.74132729, -1.41073096]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [534]; unstable size 534; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 534] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 534] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 534] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 185] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.82803488, 1.00371790, 4.58163738, 3.52479601, 3.45554614, 4.66323185,
         3.15355444, 3.39953947, 2.80839324]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0339 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 15, vnnlib ID: 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.55321646, -5.81442928, -1.99641812,  0.06207272, -0.82771432,
          0.04142630, -2.41349435, -1.42710316, -5.66043377, -4.60286999]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [492]; unstable size 492; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 188, 1, 492] with unstable size 187 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 492] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 492] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [187]; unstable size 187; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 187] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 187] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.35873795,  4.47410536,  0.94619107,  0.06511045, -0.33263910,
          1.83395362,  0.21094561,  4.77025223,  3.27124643]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.55321646, -5.81442928, -1.99641812,  0.06207272, -0.82771432,
          0.04142630, -2.41349435, -1.42710316, -5.66043377, -4.60286999]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.96010399, -6.20732403, -2.32285213, -0.28913876, -1.16081107,
          -0.13703477, -2.92448115, -1.63956416, -6.15403843, -4.97522259]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.15210399]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0060 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0689 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 16, vnnlib ID: 16 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.37839031, -13.42577553,  -6.48252678,  -7.11965179,  -6.67908382,
          -7.55561876,  -7.39423037,  -8.94825554, -12.10931110, -13.00597000]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [788]; unstable size 788; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 362, 1, 788] with unstable size 361 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 788] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 788] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [361]; unstable size 361; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 361] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 361] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.24375129,  3.81155205, -1.93120444, -1.85189080, -0.03242284,
         -1.13493097,  0.07367361,  2.53733826,  3.71830487]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.37839031, -13.42577553,  -6.48252678,  -7.11965179,  -6.67908382,
          -7.55561876,  -7.39423037,  -8.94825554, -12.10931110, -13.00597000]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.37839031, -13.42577457,  -6.48252583,  -7.11965132,  -6.67908287,
           -7.55561876,  -7.39422894,  -8.94825554, -12.10931206, -13.00597095],
         [-10.37839031, -13.42577457,  -6.48252583,  -7.11965132,  -6.67908287,
           -7.55561876,  -7.39422894,  -8.94825554, -12.10931206, -13.00597095]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.63712549, -0.44056845,  0.43596745,  0.27457762]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0759 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 17, vnnlib ID: 17 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.48207045,  -2.39753056,  -9.58371258, -10.52106094,  -9.25177765,
         -11.82708836, -10.46574306, -11.05204582,  -6.78091049,  -5.65733051]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [502]; unstable size 502; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 254, 1, 502] with unstable size 253 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 502] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 502] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [253]; unstable size 253; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 253] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 253] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.89075279, 4.35961151, 5.77320862, 4.46269083, 6.95126200, 5.95177650,
         6.24258280, 2.54485846, 2.28885174]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0575 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 18, vnnlib ID: 18 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.97675323, -17.08073425,  -8.92278004, -11.53713417,  -9.34353065,
         -11.19538307,  -8.12182331, -11.58376312, -17.60232544, -15.83768177]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [512]; unstable size 512; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 512] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 512] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 512] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 259] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.63812351,  6.80160284, -0.75694132,  2.17035437, -0.29967833,
          1.59824896,  1.65513277,  7.41604853,  5.91091537]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.97675323, -17.08073425,  -8.92278004, -11.53713417,  -9.34353065,
         -11.19538307,  -8.12182331, -11.58376312, -17.60232544, -15.83768177]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.56005764, -18.10161591,  -9.57238865, -12.55412483, -10.26584530,
          -12.21403694,  -9.57373428, -12.60732460, -18.38806343, -16.88108253],
         [-14.56005764, -18.10161591,  -9.57238865, -12.55412483, -10.26584530,
          -12.21403694,  -9.57373428, -12.60732460, -18.38806343, -16.88108253]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00134563,  0.69211102]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0057 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0549 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 19, vnnlib ID: 19 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.67748737, -15.99068165,  -8.99268341,  -7.79347992,  -8.35536575,
          -8.22471714,  -9.16943359, -11.52655983, -13.26644325, -15.81279469]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [547]; unstable size 547; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 547] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 547] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 547] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 259] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.43207645,  6.44367456,  0.19957781, -0.46666598,  0.09526157,
          0.46659338,  2.60346079,  3.93457651,  6.28853226]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.67748737, -15.99068165,  -8.99268341,  -7.79347992,  -8.35536575,
          -8.22471714,  -9.16943359, -11.52655983, -13.26644325, -15.81279469]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.68204021, -16.05737877,  -8.96092319,  -8.17651176,  -8.15779305,
           -8.62596226,  -9.30371189, -11.61334324, -13.34238148, -16.04029083]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01871872]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0053 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0404 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 20, vnnlib ID: 20 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.99751091, -10.60476208,  -5.80764198,  -6.15668106,  -6.26862431,
          -6.07673597,  -4.08238983,  -8.79667854,  -9.22789669, -10.72688580]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [601]; unstable size 601; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 287, 1, 601] with unstable size 286 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 601] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 601] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [286]; unstable size 286; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 286] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 286] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.22418547, 4.25854826, 0.62012935, 0.93473363, 0.88097048, 0.60569572,
         2.78608966, 3.20536184, 4.78958321]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0482 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 21, vnnlib ID: 21 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.39633656, -10.81733418,  -8.14680481,  -7.67903614,  -8.47020626,
          -6.77577496, -10.40852451,  -8.02430439, -10.83304310,  -9.56988335]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [512]; unstable size 512; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 512] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 512] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 512] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 171] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.18678737, 2.55919075, 0.31564903, 0.61779261, 0.64823699, 2.52021646,
         0.37382305, 2.55972385, 1.61684656]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0341 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 22, vnnlib ID: 22 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.61524105, -12.71203899, -11.56439686, -11.98183823, -11.60697556,
         -12.97468090, -12.19276619, -14.18572140,  -5.67168808, -12.38231468]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [599]; unstable size 599; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 173, 1, 599] with unstable size 172 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 599] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 599] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [172]; unstable size 172; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 172] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 172] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.42892647, 5.35214663, 4.30808020, 4.89422417, 4.33142662, 5.69092655,
         5.16717815, 6.89458704, 4.89000034]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0240 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 23, vnnlib ID: 23 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.84393740, -7.84841537, -4.07208776, -2.13655066, -4.59707069,
         -1.22025633, -5.05424547, -3.93261433, -4.29843807, -6.48314619]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [499]; unstable size 499; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 499] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 499] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 499] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 184] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.94525385, 4.37971783, 1.50863910, 0.51084447, 2.10668564, 2.74752975,
         1.74771547, 1.16706753, 3.61705422]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0639 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 24, vnnlib ID: 24 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.95971680,  -7.97020435, -11.66736698, -13.97354507, -12.17215443,
         -15.07821083, -12.78244114, -14.01900578, -10.50253868, -10.70786572]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [778]; unstable size 778; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 305, 1, 778] with unstable size 304 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 778] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 778] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [304]; unstable size 304; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 304] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 304] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.83722687,  1.20715618,  3.54842615,  1.72621822,  4.45857096,
          2.37408352,  3.37172985,  0.75684643,  1.53906155]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.95971680,  -7.97020435, -11.66736698, -13.97354507, -12.17215443,
         -15.07821083, -12.78244114, -14.01900578, -10.50253868, -10.70786572]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.23it/s]100%|██████████| 1/1 [00:00<00:00,  9.23it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.18222904,  -8.04493713, -10.81180954, -13.20889759, -11.28295040,
          -14.31022644, -12.04443455, -13.26400185,  -9.93011951, -10.47806263]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.13729191]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1108 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.560544967651367
alpha/beta optimization time: 1.1993110179901123
initial alpha-crown bounds: tensor([[-0.67048168,  1.36126328,  3.71649837,  1.91702461,  4.64379501,
          2.51711655,  3.56975985,  0.87808943,  1.62748003]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.6704816818237305
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.7784 seconds.
lower bounds for all target labels: [-0.6704816818237305, 1.361262321472168, 3.716498374938965, 1.9170246124267578, 4.643792152404785, 2.5171127319335938, 3.5697598457336426, 0.878089427947998, 1.6274800300598145]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [0]
start creating model mps for candidates: ['lay/16_0']
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 227468 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.59223532676697
Verifying property 0 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.643795013427734.

Properties batch 1, size 1
Remaining timeout: 198.35978817939758
Verifying property 1 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.716498374938965.

Properties batch 2, size 1
Remaining timeout: 198.26681923866272
Verifying property 2 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.5697598457336426.

Properties batch 3, size 1
Remaining timeout: 198.1720530986786
Verifying property 3 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.5171165466308594.

Properties batch 4, size 1
Remaining timeout: 198.0705189704895
Verifying property 4 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.9170246124267578.

Properties batch 5, size 1
Remaining timeout: 197.97613906860352
Verifying property 5 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.6274800300598145.

Properties batch 6, size 1
Remaining timeout: 197.88484573364258
Verifying property 6 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.3612632751464844.

Properties batch 7, size 1
Remaining timeout: 197.7941107749939
Verifying property 7 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.878089427947998.

Properties batch 8, size 1
Remaining timeout: 197.69710659980774
Verifying property 8 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.67048168]], device='cuda:0') need to verify.
Model prediction is: tensor([ -8.95971680,  -7.97020435, -11.66736698, -13.97354507, -12.17215443,
        -15.07821083, -12.78244114, -14.01900578, -10.50253868, -10.70786572],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.67048168]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 778
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 300
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 1101
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0006325244903564453
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0637    transfer 0.0001    finalize 0.0002    func 0.0644    
Accumulated time: func 0.0644    prepare 0.0003    bound 0.0637    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 51] 
split level 2: [/input-12, 60] 
split level 3: [/input-12, 13] 
split level 4: [/input-12, 1] 
split level 5: [/input-12, 4] 
split level 6: [/input-12, 36] 
split level 7: [/input-12, 92] 
split level 8: [/input-12, 45] 
split level 9: [/input-12, 33] 
split level 10: [/input-12, 93] 
split level 11: [/input-12, 37] 
split level 12: [/input-8, 1511] 
split level 13: [/input-8, 683] 
split level 14: [/input-8, 670] 
split level 15: [/input-8, 1880] 
split level 16: [/input-12, 90] 
split level 17: [/input-8, 1045] 
split level 18: [/input-8, 1503] 
split level 19: [/input-8, 1446] 
split level 20: [/input-8, 1875] 
split level 21: [/input-8, 677] 
split level 22: [/input-8, 603] 
split level 23: [/input-8, 1883] 
split level 24: [/input-8, 1964] 
split level 25: [/input-8, 1509] 
split level 26: [/input-8, 986] 
split level 27: [/input-8, 158] 
split level 28: [/input-8, 1018] 
split level 29: [/input-12, 80] 
split level 30: [/input-8, 1626] 
split level 31: [/input-8, 987] 
split level 32: [/input-8, 811] 
split level 33: [/input-8, 988] 
split level 34: [/input-8, 1750] 
split level 35: [/input-8, 989] 
split level 36: [/input-8, 1315] 
split level 37: [/input-8, 1069] 
split level 38: [/input-8, 1425] 
split level 39: [/input-8, 1738] 
split level 40: [/input-8, 1055] 
split level 41: [/input-8, 981] 
split level 42: [/input, 363] 
split level 43: [/input-8, 1020] 
split level 44: [/input-8, 1737] 
split level 45: [/input-8, 1017] 
split level 46: [/input-8, 1447] 
split level 47: [/input, 3468] 
split level 48: [/input-8, 1019] 
split level 49: [/input, 396] 
split level 50: [/input-8, 102] 
split level 51: [/input-8, 1375] 
split level 52: [/input-8, 82] 
split level 53: [/input-8, 1251] 
split level 54: [/input, 2518] 
split level 55: [/input, 1767] 
split level 56: [/input-8, 633] 
split level 57: [/input, 1733] 
split level 58: [/input, 2531] 
split level 59: [/input, 2440] 
split level 60: [/input-8, 1745] 
split level 61: [/input, 332] 
split level 62: [/input-8, 1494] 
split level 63: [/input, 3271] 
split level 64: [/input-8, 944] 
split level 65: [/input, 1418] 
split level 66: [/input, 3483] 
split level 67: [/input, 3306] 
split level 68: [/input-8, 1985] 
split level 69: [/input-8, 1052] 
split level 70: [/input-8, 1062] 
split level 71: [/input, 1766] 
split level 72: [/input, 2504] 
split level 73: [/input-8, 1421] 
split level 74: [/input, 1420] 
split level 75: [/input-8, 81] 
split level 76: [/input, 3304] 
split level 77: [/input, 1750] 
split level 78: [/input-8, 1132] 
split level 79: [/input, 2519] 
split level 80: [/input, 395] 
split level 81: [/input, 390] 
split level 82: [/input-8, 952] 
split level 83: [/input, 854] 
split level 84: [/input-8, 1279] 
split level 85: [/input, 2538] 
split level 86: [/input-8, 1454] 
split level 87: [/input, 3256] 
split level 88: [/input, 2517] 
split level 89: [/input-8, 1419] 
split level 90: [/input-8, 937] 
split level 91: [/input, 1749] 
split level 92: [/input, 1436] 
split level 93: [/input, 3704] 
split level 94: [/input-8, 969] 
split level 95: [/input-8, 1021] 
split level 96: [/input, 2185] 
split level 97: [/input-8, 1331] 
split level 98: [/input, 2530] 
split level 99: [/input-8, 1867] 
split level 100: [/input-8, 1322] 
split level 101: [/input, 1809] 
split level 102: [/input, 3302] 
split level 103: [/input, 3688] 
split level 104: [/input, 2539] 
split level 105: [/input-8, 950] 
split level 106: [/input, 2182] 
split level 107: [/input-8, 1986] 
split level 108: [/input, 1754] 
split level 109: [/input, 3669] 
split level 110: [/input, 2198] 
split level 111: [/input, 1753] 
split level 112: [/input, 3222] 
split level 113: [/input, 162] 
split level 114: [/input-8, 454] 
split level 115: [/input-8, 1477] 
split level 116: [/input, 3305] 
split level 117: [/input, 3577] 
split level 118: [/input-8, 1739] 
split level 119: [/input, 1768] 
split level 120: [/input, 4003] 
split level 121: [/input, 3026] 
split level 122: [/input, 3283] 
split level 123: [/input, 2454] 
split level 124: [/input-8, 1987] 
split level 125: [/input, 1405] 
split level 126: [/input-8, 1984] 
split level 127: [/input, 2536] 
split level 128: [/input, 1778] 
split level 129: [/input-8, 1131] 
split level 130: [/input, 2400] 
split level 131: [/input, 3308] 
split level 132: [/input-8, 1559] 
split level 133: [/input, 1779] 
split level 134: [/input, 1670] 
split level 135: [/input, 2515] 
split level 136: [/input, 3226] 
split level 137: [/input-8, 455] 
split level 138: [/input, 2166] 
split level 139: [/input, 3281] 
split level 140: [/input, 3765] 
split level 141: [/input, 3284] 
split level 142: [/input-8, 1988] 
split level 143: [/input, 3275] 
split level 144: [/input, 1780] 
split level 145: [/input, 1746] 
split level 146: [/input, 1827] 
split level 147: [/input-8, 945] 
split level 148: [/input, 1769] 
split level 149: [/input, 1841] 
split level 150: [/input, 1771] 
split level 151: [/input, 1842] 
split level 152: [/input, 1745] 
split level 153: [/input, 3689] 
split level 154: [/input, 1748] 
split level 155: [/input, 1747] 
split level 156: [/input, 3784] 
split level 157: [/input-8, 1935] 
split level 158: [/input, 3708] 
split level 159: [/input-8, 1361] 
split level 160: [/input, 3707] 
split level 161: [/input, 3723] 
split level 162: [/input, 3274] 
split level 163: [/input, 1858] 
split level 164: [/input, 654] 
split level 165: [/input, 376] 
split level 166: [/input, 1770] 
split level 167: [/input-8, 970] 
split level 168: [/input, 242] 
split level 169: [/input, 3042] 
split level 170: [/input, 3257] 
split level 171: [/input, 3685] 
split level 172: [/input, 2206] 
split level 173: [/input-8, 1934] 
split level 174: [/input, 3796] 
split level 175: [/input-8, 905] 
split level 176: [/input, 1099] 
split level 177: [/input-8, 1241] 
split level 178: [/input, 3028] 
split level 179: [/input, 3455] 
split level 180: [/input, 1810] 
split level 181: [/input, 3280] 
split level 182: [/input, 1857] 
split level 183: [/input, 2673] 
split level 184: [/input, 2124] 
split level 185: [/input, 1811] 
split level 186: [/input, 3794] 
split level 187: [/input-8, 1271] 
split level 188: [/input-8, 1332] 
split level 189: [/input, 4032] 
split level 190: [/input, 282] 
split level 191: [/input, 2550] 
split level 192: [/input, 3795] 
split level 193: [/input, 1083] 
split level 194: [/input, 1781] 
split level 195: [/input, 2497] 
split level 196: [/input, 1773] 
split level 197: [/input, 3190] 
split level 198: [/input, 399] 
split level 199: [/input, 3044] 
Time: prepare 0.0073    bound 0.1157    transfer 0.0148    finalize 0.0049    func 0.1428    
Accumulated time: func 0.2072    prepare 0.0184    bound 0.1794    transfer 0.0149    finalize 0.0052    
all_split False
======================Cut inference begins======================
max lb tensor(0.11171150) min lb tensor(-0.67030239)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.012681722640991211 
BICCOS Cumulative time: 0.012681722640991211
Preprocessing time: 0.011292457580566406 Inference time: 0.00013637542724609375 Add cuts time: 6.937980651855469e-05 Cut analysis time: 0.0011835098266601562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.65138 (1), -0.65053 (1), -0.65006 (1), -0.64936 (1), -0.64912 (1), -0.64888 (1), -0.64859 (1), -0.64808 (1), -0.64770 (1), -0.64756 (1), -0.64748 (1), -0.64668 (1), -0.64646 (1), -0.64573 (1), -0.64559 (1), -0.64383 (1), -0.64296 (1), -0.64216 (1), -0.64027 (1), -0.63982 (1), 
Length of domains: 50
Time: pickout 0.0005    decision 0.5556    set_bounds 0.0113    solve 0.1429    add 0.2200    
Accumulated time: pickout 0.0005    decision 0.5556    set_bounds 0.0113    solve 0.1429    add 0.2200    
Current (lb-rhs): -0.6513786315917969
50 domains visited
Cumulative time: 1.0337624549865723

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 60] [/input-12, 10] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 1] [/input-12, 60] 
split level 2: [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 92] [/input-12, 36] [/input-12, 36] [/input-12, 1] 
split level 3: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.61199951171875
10 lb beta sum: 0.45639896392822266, worst -0.6018962860107422
Time: prepare 0.0068    bound 0.1625    transfer 0.0009    finalize 0.0025    func 0.1755    
Accumulated time: func 0.3827    prepare 0.0255    bound 0.3419    transfer 0.0158    finalize 0.0077    
all_split False
======================Cut inference begins======================
max lb tensor(0.58942407) min lb tensor(-0.60187340)
Number of Verified Splits: 15 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.014793872833251953 
BICCOS Cumulative time: 0.027475595474243164
Preprocessing time: 0.012643575668334961 Inference time: 0.0006937980651855469 Add cuts time: 0.0002865791320800781 Cut analysis time: 0.0011699199676513672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.35763 (2), -0.35666 (2), -0.35611 (2), -0.35602 (2), -0.35299 (2), -0.34874 (2), -0.34847 (2), -0.34840 (2), -0.34404 (2), -0.34063 (2), -0.33976 (2), -0.33913 (2), -0.33787 (2), -0.33388 (2), -0.33297 (2), -0.33294 (2), -0.32865 (2), -0.32160 (2), -0.30974 (2), -0.30421 (2), 
Length of domains: 50
Time: pickout 0.0079    decision 0.0215    set_bounds 0.0133    solve 0.1756    add 0.2120    
Accumulated time: pickout 0.0084    decision 0.5771    set_bounds 0.0246    solve 0.3185    add 0.4320    
Current (lb-rhs): -0.3576255738735199
100 domains visited
Cumulative time: 1.4860074520111084

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 60] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
split level 2: [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 1] [/input-12, 36] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 36] 
split level 3: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3670225143432617
10 lb beta sum: 0.661647617816925, worst -0.33885324001312256
Time: prepare 0.0063    bound 0.1323    transfer 0.0020    finalize 0.0021    func 0.1453    
Accumulated time: func 0.5280    prepare 0.0321    bound 0.4742    transfer 0.0178    finalize 0.0098    
all_split False
======================Cut inference begins======================
max lb tensor(0.51649916) min lb tensor(-0.33487195)
Number of Verified Splits: 146 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0017
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.023314714431762695 
BICCOS Cumulative time: 0.05079030990600586
Preprocessing time: 0.011677980422973633 Inference time: 0.007460117340087891 Add cuts time: 0.002176046371459961 Cut analysis time: 0.002000570297241211
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19697 (3), -0.19667 (3), -0.19636 (3), -0.19635 (3), -0.19625 (3), -0.19428 (3), -0.19424 (3), -0.19410 (3), -0.19377 (3), -0.19357 (3), -0.19044 (3), -0.18988 (3), -0.18653 (3), -0.18547 (3), -0.18482 (3), -0.18461 (3), -0.18269 (3), -0.18233 (3), -0.18158 (3), -0.18075 (3), 
Length of domains: 50
Time: pickout 0.0077    decision 0.0205    set_bounds 0.0154    solve 0.1454    add 0.2275    
Accumulated time: pickout 0.0161    decision 0.5975    set_bounds 0.0401    solve 0.4639    add 0.6595    
Current (lb-rhs): -0.19697436690330505
150 domains visited
Cumulative time: 1.932882308959961

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 36] [/input-12, 1] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 92] [/input-12, 36] [/input-12, 1] [/input-12, 13] [/input-12, 13] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 3: [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2262592315673828
10 lb beta sum: 1.0351241827011108, worst -0.175377756357193
Time: prepare 0.0067    bound 0.1337    transfer 0.0017    finalize 0.0023    func 0.1471    
Accumulated time: func 0.6751    prepare 0.0390    bound 0.6079    transfer 0.0195    finalize 0.0121    
all_split False
======================Cut inference begins======================
max lb tensor(0.38970846) min lb tensor(-0.16945764)
Number of Verified Splits: 82 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 6
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.02362203598022461 
BICCOS Cumulative time: 0.07441234588623047
Preprocessing time: 0.01500391960144043 Inference time: 0.004705905914306641 Add cuts time: 0.002450704574584961 Cut analysis time: 0.0014615058898925781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04860 (4), -0.04824 (4), -0.04777 (4), -0.04772 (4), -0.04707 (4), -0.04556 (4), -0.04218 (4), -0.04197 (4), -0.04031 (4), -0.03967 (4), -0.03787 (4), -0.03712 (4), -0.03559 (4), -0.03503 (4), -0.03460 (4), -0.03321 (4), -0.03256 (4), -0.03061 (4), -0.03031 (4), -0.02997 (4), 
Length of domains: 50
Time: pickout 0.0080    decision 0.0199    set_bounds 0.0160    solve 0.1472    add 0.3912    
Accumulated time: pickout 0.0241    decision 0.6175    set_bounds 0.0560    solve 0.6111    add 1.0507    
Current (lb-rhs): -0.04860341548919678
200 domains visited
Cumulative time: 2.5460121631622314

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 36] 
split level 3: [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11337757110595703
10 lb beta sum: 0.9311116337776184, worst -0.045058757066726685
Time: prepare 0.0070    bound 0.1534    transfer 0.0023    finalize 0.0026    func 0.1680    
Accumulated time: func 0.8430    prepare 0.0464    bound 0.7613    transfer 0.0218    finalize 0.0146    
all_split False
======================Cut inference begins======================
max lb tensor(0.27553582) min lb tensor(-0.03832096)
Number of Verified Splits: 322 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 6
#cuts 4-6: 16
#cuts >= 20: 0
BICCOS time: 0.03804183006286621 
BICCOS Cumulative time: 0.11245417594909668
Preprocessing time: 0.011739730834960938 Inference time: 0.016556501388549805 Add cuts time: 0.007801532745361328 Cut analysis time: 0.0019440650939941406
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0114    decision 0.0213    set_bounds 0.0155    solve 0.1680    add 0.0284    
Accumulated time: pickout 0.0355    decision 0.6388    set_bounds 0.0716    solve 0.7792    add 1.0791    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 92, 10]), tensor([-1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([3.68416964e-11, 1.51890531e-01, 7.37550706e-02, 2.81058878e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 92, 10]), tensor([-1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.68416964e-11, 1.51890531e-01, 7.37550706e-02, 2.75602359e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 92, 36]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.68416964e-11, 1.51890531e-01, 9.20300037e-02, 6.47510737e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 92, 36, 10]), tensor([-1., -1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([3.68416964e-11, 1.51890531e-01, 9.20300037e-02, 1.51065156e-01,
        2.50302970e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 92, 36, 10]), tensor([-1., -1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([3.68416964e-11, 1.51890531e-01, 9.20300037e-02, 1.51065156e-01,
        1.17592532e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 36]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([3.68416964e-11, 1.22691497e-01, 5.78694791e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 36, 10]), tensor([-1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.68416964e-11, 1.22691497e-01, 1.52838990e-01, 2.84567356e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 36, 10]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.68416964e-11, 1.22691497e-01, 1.52838990e-01, 2.99124140e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60, 10]), tensor([ 1., -1.]), tensor([0, 0]), tensor([3.68416964e-11, 7.32270002e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60, 10]), tensor([1., 1.]), tensor([0, 0]), tensor([3.68416964e-11, 2.96383370e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  10
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.518305778503418
10 lb beta sum: 0.8194499015808105, worst -0.46315088868141174
Time: prepare 0.0005    bound 0.1569    transfer 0.0002    finalize 0.0002    func 0.1579    
Accumulated time: func 1.0010    prepare 0.0469    bound 0.9183    transfer 0.0220    finalize 0.0148    
After pruning, left:  5

Back to Regular BaB

BaB round 1
batch: 5
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 51] [/input-12, 10] [/input-12, 10] [/input-12, 51] [/input-12, 13] 
split level 1: [/input-12, 13] [/input-12, 51] [/input-12, 51] [/input-12, 13] [/input-12, 1] 
split level 2: [/input-12, 36] [/input-12, 13] [/input-12, 13] [/input-12, 93] [/input-12, 36] 
split level 3: [/input-12, 93] [/input-12, 93] [/input-12, 92] [/input-12, 37] [/input-12, 92] 
split level 4: [/input-12, 37] [/input-12, 37] [/input-12, 93] [/input-8, 677] [/input-12, 93] 
split level 5: [/input-8, 677] [/input-8, 677] [/input-12, 37] [/input-8, 603] [/input-12, 37] 
cut re-enabled after branching node selection
0 lb beta sum: 1.3591203689575195, worst -0.19939330220222473
10 lb beta sum: 1.3590930700302124, worst -0.1982269585132599
Time: prepare 0.0138    bound 0.1638    transfer 0.0006    finalize 0.0020    func 0.1823    
Accumulated time: func 1.1833    prepare 0.0610    bound 1.0821    transfer 0.0226    finalize 0.0168    
all_split False
======================Cut inference begins======================
max lb tensor(1.23103571) min lb tensor(-0.19771579)
Number of Verified Splits: 270 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.3739879131317139, worst -0.28045690059661865
10 lb beta sum: 1.4267019033432007, worst -0.22300058603286743
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 6
#cuts 4-6: 16
#cuts 7-9: 4
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.33170413970947266 
BICCOS Cumulative time: 0.44415831565856934
Preprocessing time: 0.008903264999389648 Inference time: 0.313190221786499 Add cuts time: 0.007525205612182617 Cut analysis time: 0.002085447311401367
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19772 (6), -0.19589 (6), -0.18773 (6), -0.18753 (6), -0.18650 (6), -0.18613 (6), -0.18500 (6), -0.18371 (6), -0.16511 (6), -0.16413 (6), -0.16103 (6), -0.16070 (6), -0.15853 (6), -0.15755 (6), -0.15750 (6), -0.15617 (6), -0.15554 (6), -0.15256 (6), -0.14612 (6), -0.14537 (6), 
Length of domains: 50
Time: pickout 0.0005    decision 0.0226    set_bounds 0.0245    solve 0.1824    add 0.0611    
Accumulated time: pickout 0.0361    decision 0.6613    set_bounds 0.0961    solve 0.9616    add 1.1402    
Current (lb-rhs): -0.19771578907966614
250 domains visited
Cumulative time: 3.721013307571411

BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 4] [/input-12, 51] [/input-12, 4] [/input-12, 4] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 4] [/input-12, 51] [/input-12, 4] 
split level 1: [/input-12, 45] [/input-12, 4] [/input-12, 45] [/input-8, 677] [/input-12, 4] [/input-12, 4] [/input-8, 1045] [/input-12, 45] [/input-12, 4] [/input-12, 45] 
split level 2: [/input-8, 603] [/input-8, 1045] [/input-8, 603] [/input-8, 603] [/input-8, 1045] [/input-8, 1045] [/input-8, 603] [/input-8, 603] [/input-8, 1045] [/input-8, 603] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1990795135498047
10 lb beta sum: 0.22713349759578705, worst -0.18514156341552734
Time: prepare 0.0078    bound 0.1517    transfer 0.0011    finalize 0.0032    func 0.1665    
Accumulated time: func 1.3498    prepare 0.0690    bound 1.2338    transfer 0.0238    finalize 0.0199    
all_split False
======================Cut inference begins======================
max lb tensor(0.50235844) min lb tensor(-0.18464470)
Number of Verified Splits: 287 of 400
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.04117298126220703 
BICCOS Cumulative time: 0.48533129692077637
Preprocessing time: 0.011736631393432617 Inference time: 0.025911808013916016 Add cuts time: 0.0022950172424316406 Cut analysis time: 0.0012295246124267578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18464 (9), -0.18274 (9), -0.17880 (9), -0.17688 (9), -0.17566 (9), -0.17561 (9), -0.17433 (9), -0.17414 (9), -0.17248 (9), -0.17121 (9), -0.16976 (9), -0.16970 (9), -0.16818 (9), -0.16808 (9), -0.16660 (9), -0.16498 (9), -0.15130 (9), -0.15041 (9), -0.14670 (9), -0.14631 (9), 
Length of domains: 113
Time: pickout 0.0058    decision 0.0154    set_bounds 0.0268    solve 0.1666    add 0.0799    
Accumulated time: pickout 0.0419    decision 0.6767    set_bounds 0.1229    solve 1.1282    add 1.2201    
Current (lb-rhs): -0.1846446990966797
363 domains visited
Cumulative time: 4.065541982650757

BaB round 3
batch: 113
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 45] [/input-8, 1880] [/input-12, 45] [/input-8, 670] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1889963150024414
10 lb beta sum: 0.6171833276748657, worst -0.18425846099853516
Time: prepare 0.0046    bound 0.1383    transfer 0.0005    finalize 0.0014    func 0.1462    
Accumulated time: func 1.4960    prepare 0.0738    bound 1.3721    transfer 0.0242    finalize 0.0213    
all_split False
======================Cut inference begins======================
max lb tensor(1.16910553) min lb tensor(-0.18408108)
Number of Verified Splits: 218 of 226
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.030210018157958984 
BICCOS Cumulative time: 0.5155413150787354
Preprocessing time: 0.0069997310638427734 Inference time: 0.020264625549316406 Add cuts time: 0.0015854835510253906 Cut analysis time: 0.001360177993774414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18408 (10), -0.18238 (10), -0.17819 (10), -0.17630 (10), -0.17549 (10), -0.17538 (10), -0.16942 (10), -0.16941 (10), 
Length of domains: 8
Time: pickout 0.0165    decision 0.0216    set_bounds 0.0096    solve 0.1463    add 0.0324    
Accumulated time: pickout 0.0584    decision 0.6983    set_bounds 0.1325    solve 1.2745    add 1.2525    
Current (lb-rhs): -0.1840810775756836
371 domains visited
Cumulative time: 4.330308198928833

BaB round 4
batch: 8
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 90] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-8, 1880] [/input-8, 670] [/input-8, 1880] [/input-8, 670] [/input-8, 1880] [/input-8, 670] [/input-8, 1880] [/input-8, 670] 
split level 2: [/input-8, 670] [/input-12, 90] [/input-12, 90] [/input-8, 1880] [/input-8, 670] [/input-12, 90] [/input-12, 90] [/input-8, 1880] 
split level 3: [/input-8, 603] [/input-8, 1880] [/input-8, 670] [/input-12, 90] [/input-8, 603] [/input-8, 1880] [/input-8, 670] [/input-12, 90] 
split level 4: [/input-8, 1315] [/input-8, 603] [/input-8, 603] [/input-8, 603] [/input-8, 1315] [/input-8, 603] [/input-8, 603] [/input-8, 603] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15771961212158203
10 lb beta sum: 0.657987654209137, worst -0.1528891772031784
Time: prepare 0.0051    bound 0.1479    transfer 0.0005    finalize 0.0015    func 0.1569    
Accumulated time: func 1.6529    prepare 0.0792    bound 1.5200    transfer 0.0248    finalize 0.0228    
all_split False
======================Cut inference begins======================
max lb tensor(0.87821949) min lb tensor(-0.15284352)
Number of Verified Splits: 181 of 256
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 0.03358101844787598 
BICCOS Cumulative time: 0.5491223335266113
Preprocessing time: 0.008033275604248047 Inference time: 0.022139787673950195 Add cuts time: 0.0020008087158203125 Cut analysis time: 0.0014071464538574219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15284 (15), -0.14700 (15), -0.14653 (15), -0.14071 (15), -0.13449 (15), -0.12849 (15), -0.12818 (15), -0.12705 (15), -0.12220 (15), -0.12077 (15), -0.11997 (15), -0.11396 (15), -0.10898 (15), -0.10266 (15), -0.10157 (15), -0.09576 (15), -0.09556 (15), -0.09504 (15), -0.09271 (15), -0.08987 (15), 
Length of domains: 75
Time: pickout 0.0010    decision 0.0190    set_bounds 0.0238    solve 0.1569    add 0.0797    
Accumulated time: pickout 0.0594    decision 0.7173    set_bounds 0.1563    solve 1.4314    add 1.3321    
Current (lb-rhs): -0.15284352004528046
446 domains visited
Cumulative time: 4.652604103088379

BaB round 5
batch: 75
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-8, 677] [/input-8, 811] [/input-12, 80] [/input-12, 33] [/input-8, 677] [/input-8, 811] [/input-12, 80] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-8, 677] [/input-8, 987] [/input-8, 677] [/input-8, 677] [/input-8, 677] [/input-8, 987] [/input-8, 677] [/input-8, 677] [/input-8, 1069] [/input-8, 1069] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14916610717773438
10 lb beta sum: 0.5042360424995422, worst -0.14453212916851044
Time: prepare 0.0060    bound 0.1519    transfer 0.0006    finalize 0.0017    func 0.1622    
Accumulated time: func 1.8151    prepare 0.0854    bound 1.6720    transfer 0.0253    finalize 0.0245    
all_split False
======================Cut inference begins======================
max lb tensor(0.57824206) min lb tensor(-0.14451128)
Number of Verified Splits: 153 of 300
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.033086299896240234 
BICCOS Cumulative time: 0.5822086334228516
Preprocessing time: 0.008897542953491211 Inference time: 0.020615100860595703 Add cuts time: 0.002249002456665039 Cut analysis time: 0.0013246536254882812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14451 (17), -0.14061 (17), -0.13814 (17), -0.13415 (17), -0.12620 (17), -0.12609 (17), -0.12464 (17), -0.12210 (17), -0.11882 (17), -0.11863 (17), -0.11820 (17), -0.11564 (17), -0.11509 (17), -0.11343 (17), -0.11274 (17), -0.11242 (17), -0.11002 (17), -0.10734 (17), -0.10680 (17), -0.10637 (17), 
Length of domains: 147
Time: pickout 0.0161    decision 0.0181    set_bounds 0.0211    solve 0.1623    add 0.0757    
Accumulated time: pickout 0.0755    decision 0.7354    set_bounds 0.1773    solve 1.5937    add 1.4079    
Current (lb-rhs): -0.14451128244400024
593 domains visited
Cumulative time: 4.986706972122192

BaB round 6
batch: 147
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1069] [/input-12, 80] [/input-12, 80] [/input-8, 811] [/input-8, 1069] [/input-12, 80] [/input-12, 80] [/input-8, 811] [/input-8, 1069] [/input-12, 80] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14653491973876953
10 lb beta sum: 0.5341832041740417, worst -0.1419314593076706
Time: prepare 0.0058    bound 0.1536    transfer 0.0006    finalize 0.0017    func 0.1636    
Accumulated time: func 1.9787    prepare 0.0914    bound 1.8256    transfer 0.0259    finalize 0.0262    
all_split False
======================Cut inference begins======================
max lb tensor(0.32241994) min lb tensor(-0.14191157)
Number of Verified Splits: 56 of 294
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.018935441970825195 
BICCOS Cumulative time: 0.6011440753936768
Preprocessing time: 0.008696317672729492 Inference time: 0.007409572601318359 Add cuts time: 0.0015790462493896484 Cut analysis time: 0.0012505054473876953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14191 (18), -0.13941 (18), -0.13552 (18), -0.13292 (18), -0.12351 (18), -0.12343 (18), -0.12307 (18), -0.12090 (18), -0.11664 (18), -0.11525 (18), -0.11514 (18), -0.11445 (18), -0.11427 (18), -0.11211 (18), -0.11058 (18), -0.10736 (18), -0.10644 (18), -0.10598 (18), -0.10574 (18), -0.10457 (18), 
Length of domains: 238
Time: pickout 0.0154    decision 0.0194    set_bounds 0.0128    solve 0.1637    add 0.0759    
Accumulated time: pickout 0.0910    decision 0.7548    set_bounds 0.1901    solve 1.7574    add 1.4838    
Current (lb-rhs): -0.1419115662574768
831 domains visited
Cumulative time: 5.300445079803467

BaB round 7
batch: 238
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 811] [/input-8, 1069] [/input-8, 158] [/input-8, 811] [/input-8, 1069] [/input-8, 158] [/input-8, 811] [/input-8, 811] [/input-8, 1069] [/input-8, 987] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14191150665283203
10 lb beta sum: 0.7617404460906982, worst -0.1396189033985138
Time: prepare 0.0092    bound 0.1602    transfer 0.0024    finalize 0.0031    func 0.1780    
Accumulated time: func 2.1567    prepare 0.1009    bound 1.9858    transfer 0.0282    finalize 0.0293    
all_split False
======================Cut inference begins======================
max lb tensor(0.31334853) min lb tensor(-0.13885054)
Number of Verified Splits: 255 of 476
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.055475473403930664 
BICCOS Cumulative time: 0.6566195487976074
Preprocessing time: 0.014267444610595703 Inference time: 0.03641986846923828 Add cuts time: 0.0035321712493896484 Cut analysis time: 0.0012559890747070312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13885 (19), -0.13448 (19), -0.13239 (19), -0.12794 (19), -0.12515 (19), -0.12035 (19), -0.11882 (19), -0.11598 (19), -0.11515 (19), -0.11392 (19), -0.11213 (19), -0.11016 (19), -0.11001 (19), -0.10947 (19), -0.10879 (19), -0.10692 (19), -0.10669 (19), -0.10613 (19), -0.10541 (19), -0.10435 (19), 
Length of domains: 221
Time: pickout 0.0169    decision 0.0239    set_bounds 0.0207    solve 0.1781    add 0.1011    
Accumulated time: pickout 0.1079    decision 0.7788    set_bounds 0.2108    solve 1.9355    add 1.5849    
Current (lb-rhs): -0.13885053992271423
1052 domains visited
Cumulative time: 5.705670595169067

BaB round 8
batch: 221
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1315] [/input-8, 1315] [/input-8, 1069] [/input-8, 1315] [/input-8, 1069] [/input-8, 1069] [/input-8, 1069] [/input-8, 1315] [/input-8, 1069] [/input-8, 1069] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7830602526664734, worst -0.13885053992271423
10 lb beta sum: 0.7830602526664734, worst -0.13883528113365173
Time: prepare 0.0197    bound 0.1576    transfer 0.0010    finalize 0.0025    func 0.1837    
Accumulated time: func 2.3404    prepare 0.1208    bound 2.1434    transfer 0.0293    finalize 0.0317    
all_split False
======================Cut inference begins======================
max lb tensor(0.01050138) min lb tensor(-0.13881239)
Number of Verified Splits: 4 of 442
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.01571822166442871 
BICCOS Cumulative time: 0.6723377704620361
Preprocessing time: 0.012841463088989258 Inference time: 0.0011489391326904297 Add cuts time: 0.0004227161407470703 Cut analysis time: 0.0013051033020019531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13881 (20), -0.13231 (20), -0.12813 (20), -0.12504 (20), -0.12412 (20), -0.12154 (20), -0.12030 (20), -0.11872 (20), -0.11743 (20), -0.11381 (20), -0.11209 (20), -0.10965 (20), -0.10929 (20), -0.10916 (20), -0.10675 (20), -0.10653 (20), -0.10599 (20), -0.10563 (20), -0.10531 (20), -0.10349 (20), 
Length of domains: 438
Time: pickout 0.0510    decision 0.0230    set_bounds 0.0192    solve 0.1838    add 0.0840    
Accumulated time: pickout 0.1588    decision 0.8018    set_bounds 0.2300    solve 2.1193    add 1.6689    
Current (lb-rhs): -0.13881239295005798
1490 domains visited
Cumulative time: 6.089604616165161

BaB round 9
batch: 438
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 987] [/input-8, 987] [/input-8, 1315] [/input-8, 987] [/input-8, 1315] [/input-8, 1315] [/input-8, 1315] [/input-8, 987] [/input-8, 1315] [/input-8, 1315] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7790557742118835, worst -0.13122686743736267
10 lb beta sum: 0.7790557742118835, worst -0.13114961981773376
Time: prepare 0.0386    bound 0.1575    transfer 0.0034    finalize 0.0042    func 0.2094    
Accumulated time: func 2.5498    prepare 0.1596    bound 2.3008    transfer 0.0327    finalize 0.0359    
all_split False
======================Cut inference begins======================
max lb tensor(0.01705980) min lb tensor(-0.13113436)
Number of Verified Splits: 30 of 876
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.03340888023376465 
BICCOS Cumulative time: 0.7057466506958008
Preprocessing time: 0.025462865829467773 Inference time: 0.00472259521484375 Add cuts time: 0.001893758773803711 Cut analysis time: 0.001329660415649414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13113 (21), -0.12905 (21), -0.12460 (21), -0.12257 (21), -0.12225 (21), -0.11928 (21), -0.11771 (21), -0.11759 (21), -0.11602 (21), -0.11566 (21), -0.11465 (21), -0.11273 (21), -0.11262 (21), -0.11137 (21), -0.11087 (21), -0.11053 (21), -0.10936 (21), -0.10832 (21), -0.10611 (21), -0.10609 (21), 
Length of domains: 846
Time: pickout 0.0195    decision 0.0362    set_bounds 0.0367    solve 0.2097    add 0.1141    
Accumulated time: pickout 0.1783    decision 0.8380    set_bounds 0.2667    solve 2.3290    add 1.7830    
Current (lb-rhs): -0.13113436102867126
2336 domains visited
Cumulative time: 6.547059059143066

BaB round 10
batch: 846
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 810] [/input-8, 1055] [/input-8, 987] [/input-8, 1055] [/input-8, 987] [/input-8, 987] [/input-8, 987] [/input-8, 810] [/input-8, 987] [/input-8, 987] 
cut re-enabled after branching node selection
0 lb beta sum: 0.770908534526825, worst -0.12509474158287048
10 lb beta sum: 0.770908534526825, worst -0.12506040930747986
Time: prepare 0.0754    bound 0.1703    transfer 0.0053    finalize 0.0080    func 0.2706    
Accumulated time: func 2.8204    prepare 0.2353    bound 2.4711    transfer 0.0380    finalize 0.0438    
all_split False
======================Cut inference begins======================
max lb tensor(0.01412857) min lb tensor(-0.12504610)
Number of Verified Splits: 87 of 1692
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.06873035430908203 
BICCOS Cumulative time: 0.7744770050048828
Preprocessing time: 0.05084061622619629 Inference time: 0.014003753662109375 Add cuts time: 0.0025119781494140625 Cut analysis time: 0.0013740062713623047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12505 (22), -0.12270 (22), -0.12008 (22), -0.11992 (22), -0.11922 (22), -0.11847 (22), -0.11694 (22), -0.11623 (22), -0.11525 (22), -0.11367 (22), -0.11354 (22), -0.11328 (22), -0.11274 (22), -0.11187 (22), -0.11170 (22), -0.11037 (22), -0.10871 (22), -0.10856 (22), -0.10847 (22), -0.10705 (22), 
Length of domains: 1605
Time: pickout 0.0768    decision 0.2091    set_bounds 0.0717    solve 0.2709    add 0.0997    
Accumulated time: pickout 0.2551    decision 1.0470    set_bounds 0.3384    solve 2.5999    add 1.8827    
Current (lb-rhs): -0.12504610419273376
3941 domains visited
Cumulative time: 7.353091239929199

BaB round 11
batch: 1605
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 810] [/input-8, 810] [/input-8, 810] [/input-8, 1055] [/input-8, 1055] [/input-8, 1055] [/input-8, 810] [/input-8, 1055] [/input-8, 810] [/input-8, 1055] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7651672959327698, worst -0.1220763623714447
10 lb beta sum: 0.7651672959327698, worst -0.12208017706871033
Time: prepare 0.1518    bound 0.2450    transfer 0.0123    finalize 0.0166    func 0.4471    
Accumulated time: func 3.2675    prepare 0.3874    bound 2.7161    transfer 0.0503    finalize 0.0604    
all_split False
======================Cut inference begins======================
max lb tensor(0.02673864) min lb tensor(-0.12206873)
Number of Verified Splits: 346 of 3210
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 19
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.30751609802246094 
BICCOS Cumulative time: 1.0819931030273438
Preprocessing time: 0.09808993339538574 Inference time: 0.06301593780517578 Add cuts time: 0.14484000205993652 Cut analysis time: 0.0015702247619628906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12207 (23), -0.11972 (23), -0.11709 (23), -0.11622 (23), -0.11622 (23), -0.11546 (23), -0.11492 (23), -0.11324 (23), -0.11323 (23), -0.11259 (23), -0.11228 (23), -0.11154 (23), -0.11049 (23), -0.10996 (23), -0.10995 (23), -0.10965 (23), -0.10957 (23), -0.10929 (23), -0.10907 (23), -0.10875 (23), 
Length of domains: 2864
Time: pickout 0.0403    decision 0.0996    set_bounds 0.1327    solve 0.4476    add 0.1171    
Accumulated time: pickout 0.2954    decision 1.1466    set_bounds 0.4711    solve 3.0475    add 1.9998    
Current (lb-rhs): -0.12206873297691345
6805 domains visited
Cumulative time: 8.510293960571289

BaB round 12
batch: 2864
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1062] [/input-8, 1055] [/input-8, 988] [/input-8, 988] [/input-8, 988] [/input-8, 1055] [/input-8, 810] [/input-8, 1062] [/input-8, 810] [/input-8, 1062] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11900615692138672
10 lb beta sum: 0.5794373750686646, worst -0.11901187896728516
Time: prepare 0.1277    bound 0.3809    transfer 0.0295    finalize 0.0310    func 0.6070    
Accumulated time: func 3.8744    prepare 0.5153    bound 3.0970    transfer 0.0798    finalize 0.0914    
all_split False
======================Cut inference begins======================
max lb tensor(0.10066716) min lb tensor(-0.11900330)
Number of Verified Splits: 2020 of 5728
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 20
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.7503082752227783 
BICCOS Cumulative time: 1.832301378250122
Preprocessing time: 0.17819476127624512 Inference time: 0.535240650177002 Add cuts time: 0.035166025161743164 Cut analysis time: 0.001706838607788086
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11900 (24), -0.11665 (24), -0.11620 (24), -0.11376 (24), -0.11323 (24), -0.11293 (24), -0.11238 (24), -0.11210 (24), -0.11184 (24), -0.11151 (24), -0.11011 (24), -0.10992 (24), -0.10956 (24), -0.10949 (24), -0.10910 (24), -0.10784 (24), -0.10741 (24), -0.10706 (24), -0.10661 (24), -0.10660 (24), 
Length of domains: 3708
Time: pickout 0.0597    decision 0.1700    set_bounds 0.2464    solve 0.6085    add 0.1839    
Accumulated time: pickout 0.3550    decision 1.3166    set_bounds 0.7175    solve 3.6559    add 2.1837    
Current (lb-rhs): -0.1190032958984375
10513 domains visited
Cumulative time: 10.557308673858643

BaB round 13
batch: 3708
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 988] [/input-8, 810] [/input-8, 810] [/input-8, 810] [/input-8, 988] [/input, 396] [/input, 396] [/input-8, 988] [/input-8, 82] [/input-8, 988] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11898422241210938
10 lb beta sum: 0.5752272605895996, worst -0.11898231506347656
Time: prepare 0.1678    bound 0.4728    transfer 0.0391    finalize 0.2147    func 0.9436    
Accumulated time: func 4.8181    prepare 0.6833    bound 3.5698    transfer 0.1190    finalize 0.3062    
all_split False
======================Cut inference begins======================
max lb tensor(0.06518114) min lb tensor(-0.11897850)
Number of Verified Splits: 1588 of 7416
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 22
#cuts 4-6: 7
#cuts >= 20: 0
BICCOS time: 0.5851476192474365 
BICCOS Cumulative time: 2.4174489974975586
Preprocessing time: 0.23616480827331543 Inference time: 0.3158082962036133 Add cuts time: 0.031241416931152344 Cut analysis time: 0.0019330978393554688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11898 (25), -0.11663 (25), -0.11374 (25), -0.11349 (25), -0.11291 (25), -0.11230 (25), -0.11182 (25), -0.11047 (25), -0.11002 (25), -0.10947 (25), -0.10930 (25), -0.10845 (25), -0.10701 (25), -0.10689 (25), -0.10685 (25), -0.10657 (25), -0.10625 (25), -0.10615 (25), -0.10605 (25), -0.10576 (25), 
Length of domains: 5828
Time: pickout 0.1424    decision 0.2140    set_bounds 0.3302    solve 0.9455    add 0.1907    
Accumulated time: pickout 0.4975    decision 1.5306    set_bounds 1.0477    solve 4.6014    add 2.3744    
Current (lb-rhs): -0.11897850036621094
16341 domains visited
Cumulative time: 12.991695642471313

BaB round 14
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 633] [/input-8, 633] [/input-8, 633] [/input, 1418] [/input-8, 633] [/input-8, 1883] [/input-8, 633] [/input-8, 1494] [/input-8, 1494] [/input-8, 1494] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11524677276611328
10 lb beta sum: 0.5679434537887573, worst -0.11524298787117004
Time: prepare 0.1932    bound 0.6938    transfer 0.0393    finalize 0.0451    func 1.0264    
Accumulated time: func 5.8445    prepare 0.8768    bound 4.2637    transfer 0.1583    finalize 0.3513    
all_split False
======================Cut inference begins======================
max lb tensor(0.31354094) min lb tensor(-0.10781105)
Number of Verified Splits: 1945 of 8192
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts: total 492 constraints, 33115 nonzero elements
cuts preparing time: 0.0139
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 522.
#cuts 1-3: 121
#cuts 4-6: 6
#cuts 7-9: 1
#cuts 10-12: 7
#cuts 13-15: 12
#cuts 16-18: 26
#cuts 19-21: 34
#cuts >= 20: 315
BICCOS time: 1.1949894428253174 
BICCOS Cumulative time: 3.612438440322876
Preprocessing time: 0.26819825172424316 Inference time: 0.5924458503723145 Add cuts time: 0.04308438301086426 Cut analysis time: 0.2912609577178955
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11898 (25), -0.11663 (25), -0.11374 (25), -0.11291 (25), -0.11230 (25), -0.11182 (25), -0.11002 (25), -0.10947 (25), -0.10781 (26), -0.10739 (26), -0.10701 (25), -0.10657 (25), -0.10615 (25), -0.10605 (25), -0.10576 (25), -0.10542 (25), -0.10537 (25), -0.10479 (26), -0.10437 (26), -0.10359 (26), 
Length of domains: 7979
Time: pickout 0.0792    decision 0.2335    set_bounds 0.5163    solve 1.0284    add 0.1940    
Accumulated time: pickout 0.5767    decision 1.7641    set_bounds 1.5640    solve 5.6298    add 2.5684    
Current (lb-rhs): -0.11897850036621094
22588 domains visited
current_vram/total_varm: 12.7GB/99.9GB, batch_size increase to 8192
Cumulative time: 16.273309469223022

BaB round 15
batch: 7979
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 810] [/input-8, 1494] [/input-8, 633] [/input-8, 633] [/input-8, 633] [/input-8, 633] [/input-8, 633] [/input-8, 633] [/input-8, 633] [/input-8, 633] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11595726013183594
10 lb beta sum: 5.906582355499268, worst -0.04917582869529724
Time: prepare 0.3923    bound 3.3045    transfer 0.0837    finalize 0.3213    func 4.2089    
Accumulated time: func 10.0534    prepare 1.2694    bound 7.5681    transfer 0.2420    finalize 0.6725    
all_split False
======================Cut inference begins======================
max lb tensor(0.40599930) min lb tensor(-0.03585035)
Number of Verified Splits: 15060 of 15958
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts: total 988 constraints, 50255 nonzero elements
cuts preparing time: 0.0193
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1015.
#cuts 1-3: 207
#cuts 4-6: 4
#cuts 7-9: 3
#cuts 10-12: 17
#cuts 13-15: 27
#cuts 16-18: 57
#cuts 19-21: 59
#cuts >= 20: 641
BICCOS time: 4.256578207015991 
BICCOS Cumulative time: 7.869016647338867
Preprocessing time: 0.5201106071472168 Inference time: 3.092707395553589 Add cuts time: 0.2039799690246582 Cut analysis time: 0.43978023529052734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03585 (26), -0.03252 (26), -0.03249 (27), -0.03140 (26), -0.03085 (26), -0.03059 (26), -0.03044 (26), -0.03041 (26), -0.03014 (26), -0.02991 (27), -0.02919 (26), -0.02808 (27), -0.02799 (26), -0.02786 (26), -0.02764 (26), -0.02729 (27), -0.02689 (26), -0.02648 (26), -0.02648 (26), -0.02625 (27), 
Length of domains: 898
Time: pickout 0.2436    decision 0.4465    set_bounds 0.9127    solve 4.2123    add 0.0931    
Accumulated time: pickout 0.8202    decision 2.2106    set_bounds 2.4767    solve 9.8422    add 2.6616    
Current (lb-rhs): -0.035850346088409424
23486 domains visited
Cumulative time: 26.58629584312439

BaB round 16
batch: 898
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 82] [/input-8, 82] [/input-8, 82] [/input-8, 82] [/input-8, 82] [/input-8, 82] [/input-8, 82] [/input-8, 981] [/input, 332] [/input, 332] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1163930892944336
10 lb beta sum: 10.898594856262207, worst -0.04037272930145264
Time: prepare 0.0407    bound 0.5301    transfer 0.0054    finalize 0.0103    func 0.5981    
Accumulated time: func 10.6515    prepare 1.3104    bound 8.0982    transfer 0.2474    finalize 0.6828    
all_split False
======================Cut inference begins======================
max lb tensor(0.67731184) min lb tensor(-0.01683676)
Number of Verified Splits: 1705 of 1796
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 32
#cuts >= 20: 0
BICCOS time: 0.5461454391479492 
BICCOS Cumulative time: 8.415162086486816
Preprocessing time: 0.057462453842163086 Inference time: 0.4671642780303955 Add cuts time: 0.018380165100097656 Cut analysis time: 0.0031385421752929688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01684 (27), -0.01514 (27), -0.01488 (27), -0.01419 (27), -0.01390 (27), -0.01240 (27), -0.00978 (27), -0.00908 (28), -0.00883 (27), -0.00869 (27), -0.00750 (27), -0.00738 (28), -0.00706 (27), -0.00670 (27), -0.00642 (27), -0.00636 (28), -0.00620 (27), -0.00612 (28), -0.00598 (27), -0.00592 (27), 
Length of domains: 91
Time: pickout 0.0364    decision 0.0624    set_bounds 0.0724    solve 0.5989    add 0.0799    
Accumulated time: pickout 0.8567    decision 2.2730    set_bounds 2.5491    solve 10.4410    add 2.7414    
Current (lb-rhs): -0.01683676242828369
23577 domains visited
Cumulative time: 28.00943422317505

BaB round 17
batch: 91
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1454] [/input-8, 1454] [/input-8, 1454] [/input-8, 1494] [/input-8, 1454] [/input-8, 981] [/input-8, 981] [/input-8, 1454] [/input-8, 1494] [/input-8, 1454] 
split level 1: [/input-8, 1494] [/input-8, 1494] [/input-8, 1494] [/input-8, 82] [/input-8, 1494] [/input-8, 633] [/input-8, 633] [/input-8, 1494] [/input-8, 82] [/input-8, 1494] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10909748077392578
10 lb beta sum: 1.2492356300354004, worst -0.09683504700660706
Time: prepare 0.0087    bound 0.1713    transfer 0.0007    finalize 0.0022    func 0.1859    
Accumulated time: func 10.8374    prepare 1.3193    bound 8.2696    transfer 0.2481    finalize 0.6851    
all_split False
======================Cut inference begins======================
max lb tensor(0.40997195) min lb tensor(-0.01683676)
Number of Verified Splits: 228 of 364
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 32
#cuts >= 20: 0
BICCOS time: 0.05911660194396973 
BICCOS Cumulative time: 8.474278688430786
Preprocessing time: 0.011321306228637695 Inference time: 0.04308724403381348 Add cuts time: 0.003215312957763672 Cut analysis time: 0.0014927387237548828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01684 (29), -0.01684 (29), -0.01684 (29), -0.01684 (29), -0.01488 (29), -0.01488 (29), -0.01488 (29), -0.01488 (29), -0.01240 (29), -0.01240 (29), -0.01240 (29), -0.01240 (29), -0.00908 (30), -0.00908 (30), -0.00908 (30), -0.00908 (30), -0.00883 (29), -0.00883 (29), -0.00883 (29), -0.00883 (29), 
Length of domains: 136
Time: pickout 0.0142    decision 0.0207    set_bounds 0.0183    solve 0.1860    add 0.0756    
Accumulated time: pickout 0.8709    decision 2.2936    set_bounds 2.5674    solve 10.6270    add 2.8170    
Current (lb-rhs): -0.01683676242828369
23713 domains visited
Cumulative time: 28.391988039016724

BaB round 18
batch: 136
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1446] [/input-8, 1251] [/input-8, 1446] [/input-8, 986] [/input-8, 1251] [/input-8, 1446] [/input-8, 981] [/input, 332] [/input-8, 1251] [/input-8, 988] 
cut re-enabled after branching node selection
0 lb beta sum: 1.291021466255188, worst -0.09484231472015381
10 lb beta sum: 1.291021466255188, worst -0.09477269649505615
Time: prepare 0.0135    bound 0.1712    transfer 0.0008    finalize 0.0016    func 0.1888    
Accumulated time: func 11.0261    prepare 1.3330    bound 8.4407    transfer 0.2489    finalize 0.6867    
all_split False
======================Cut inference begins======================
max lb tensor(0.16139007) min lb tensor(-0.01683676)
Number of Verified Splits: 8 of 272
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts: total 1117 constraints, 60935 nonzero elements
cuts preparing time: 0.0213
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1149.
#cuts 1-3: 224
#cuts 4-6: 1
#cuts 7-9: 8
#cuts 10-12: 24
#cuts 13-15: 50
#cuts 16-18: 89
#cuts 19-21: 66
#cuts >= 20: 687
BICCOS time: 0.5413885116577148 
BICCOS Cumulative time: 9.015667200088501
Preprocessing time: 0.008435964584350586 Inference time: 0.0015215873718261719 Add cuts time: 0.0006852149963378906 Cut analysis time: 0.5307457447052002
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01684 (30), -0.01684 (30), -0.01684 (30), -0.01684 (30), -0.01684 (30), -0.01684 (30), -0.01684 (30), -0.01684 (30), -0.01488 (30), -0.01488 (30), -0.01488 (30), -0.01488 (30), -0.01488 (30), -0.01488 (30), -0.01488 (30), -0.01488 (30), -0.01240 (30), -0.01240 (30), -0.01240 (30), -0.01240 (30), 
Length of domains: 264
Time: pickout 0.0158    decision 0.0191    set_bounds 0.0112    solve 0.1889    add 0.0757    
Accumulated time: pickout 0.8867    decision 2.3127    set_bounds 2.5787    solve 10.8159    add 2.8927    
Current (lb-rhs): -0.01683676242828369
23977 domains visited
Cumulative time: 29.251425981521606

BaB round 19
batch: 264
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1019] [/input-8, 1446] [/input-8, 1019] [/input-8, 988] [/input-8, 1446] [/input-8, 1019] [/input-8, 1019] [/input-8, 981] [/input-8, 1446] [/input-8, 1019] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10357379913330078
10 lb beta sum: 9.81732177734375, worst -0.02060568332672119
Time: prepare 0.0129    bound 0.2488    transfer 0.0009    finalize 0.0035    func 0.2696    
Accumulated time: func 11.2957    prepare 1.3461    bound 8.6895    transfer 0.2498    finalize 0.6902    
all_split False
======================Cut inference begins======================
max lb tensor(0.35297012) min lb tensor(0.00207579)
Number of Verified Splits: 528 of 528
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0016
Total number of valid cuts: 1149.
#cuts 1-3: 224
#cuts 4-6: 1
#cuts 7-9: 8
#cuts 10-12: 24
#cuts 13-15: 50
#cuts 16-18: 89
#cuts 19-21: 66
#cuts >= 20: 687
BICCOS time: 0.018261194229125977 
BICCOS Cumulative time: 9.033928394317627
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0189    decision 0.0261    set_bounds 0.0226    solve 0.2697    add 0.0001    
Accumulated time: pickout 0.9057    decision 2.3388    set_bounds 2.6013    solve 11.0856    add 2.8928    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
23977 domains visited
Cumulative time: 29.60968255996704

found process to kill: terminal indx = 0
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.cuts
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.indx
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=24_spec=0_26488899.log
found process for pidx=0
kill process for pidx=0
Result: safe in 32.2906 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 25, vnnlib ID: 25 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.14924717, -7.20264626, -3.62566066, -3.26617622, -3.26720905,
         -3.86512804, -2.64753652, -4.15916395, -7.16723728, -5.27643299]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [704]; unstable size 704; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 299, 1, 704] with unstable size 298 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 704] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 704] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [298]; unstable size 298; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 298] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 298] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.08241999, -2.05952263, -2.42161846, -2.46702027, -2.20508480,
         -3.01655006, -2.22386408,  1.33762670, -0.76212597]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.14924717, -7.20264626, -3.62566066, -3.26617622, -3.26720905,
         -3.86512804, -2.64753652, -4.15916395, -7.16723728, -5.27643299]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.14924717, -7.20264530, -3.62566042, -3.26617575, -3.26720858,
          -3.86512756, -2.64753628, -4.15916443, -7.16723728, -5.27643251],
         [-4.14924717, -7.20264530, -3.62566042, -3.26617575, -3.26720858,
          -3.86512756, -2.64753628, -4.15916443, -7.16723728, -5.27643251]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.52358675, -0.88307142, -0.88203859, -0.28411961, -1.50171089,
           0.00991726,  1.12718534]]], device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         ...,


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0677 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 26, vnnlib ID: 26 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.82686090, -6.41171074, -7.68403912, -6.35791826, -7.00407124,
         -6.85788012, -7.81835127, -6.72433424, -6.81869602, -4.52237940]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [573]; unstable size 573; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 573] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 573] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 573] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 164] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.93261290, 0.64227378, 1.35773563, 0.14541221, 0.77890742, 0.42941642,
         1.61863780, 0.36068958, 0.89056194]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0643 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 27, vnnlib ID: 27 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.06539822, -17.73662376, -13.52726841, -13.91146278, -10.88764858,
         -13.52410698, -16.07256508,  -5.87544203, -16.85854721, -15.41843987]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [650]; unstable size 650; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 650] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 650] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 650] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 191] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.35606575, 9.58715820, 6.00918579, 6.42040968, 3.78135014, 6.19913769,
         8.01423836, 8.93800354, 7.41418457]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0630 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 28, vnnlib ID: 28 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.62422132, -12.83205509, -10.86794376, -11.14358330, -11.48577309,
         -12.18943787, -11.86716270, -14.63631248, -10.53621006, -12.42279720]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [928]; unstable size 928; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 124, 1, 928] with unstable size 123 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 928] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 928] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [123]; unstable size 123; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 123] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 123] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.12223816, 2.45312405, 2.49229145, 2.85657835, 3.25084162, 3.41792560,
         5.43004036, 2.01518416, 3.76126552]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0665 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 29, vnnlib ID: 29 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.71822071, -11.80851841,  -6.85466003,  -5.36537838,  -5.07366467,
          -5.51355600,  -5.88568926,  -6.49064875, -10.61816978, -10.64415073]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [574]; unstable size 574; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 216, 1, 574] with unstable size 215 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 574] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 574] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [215]; unstable size 215; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 215] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 215] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.72788811,  3.64086890, -0.86040449, -2.15425539, -2.38526535,
         -1.95328188, -1.94343710,  2.43316627,  2.66482782]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.71822071, -11.80851841,  -6.85466003,  -5.36537838,  -5.07366467,
          -5.51355600,  -5.88568926,  -6.49064875, -10.61816978, -10.64415073]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.71822071, -11.80851841,  -6.85466003,  -5.36537838,  -5.07366467,
           -5.51355553,  -5.88568926,  -6.49064827, -10.61816883, -10.64415073],
         [-10.71822071, -11.80851841,  -6.85466003,  -5.36537838,  -5.07366467,
           -5.51355553,  -5.88568926,  -6.49064827, -10.61816883, -10.64415073]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.36401176, -1.12526989, -1.41698360, -0.97709274, -0.60495901]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0475 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 30, vnnlib ID: 30 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.18480682, -14.47258854, -11.18161869, -14.32627869, -12.30105877,
         -15.18956566, -14.34846020, -16.43445969, -12.35407734, -15.00505161]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [778]; unstable size 778; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 155, 1, 778] with unstable size 154 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 778] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 778] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [154]; unstable size 154; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 154] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 154] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.25004578, 2.19217992, 5.06827354, 3.28106451, 5.71236038, 5.22400093,
         7.04772663, 3.23776221, 5.66314220]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0648 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 31, vnnlib ID: 31 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.54959202, -14.93725681,  -9.59988976, -11.64203358,  -7.25195312,
         -11.52101326, -11.52331543,  -9.14212132, -13.16885757, -13.51460266]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [559]; unstable size 559; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 280, 1, 559] with unstable size 279 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 559] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 559] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [279]; unstable size 279; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 279] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 279] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.93221831, 5.50633144, 1.10160077, 3.24869013, 3.06275225, 2.55501723,
         0.80379391, 3.91150212, 4.20123196]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0627 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 32, vnnlib ID: 32 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.27112675, -12.63512135,  -8.63367748,  -9.42183304,  -7.46700573,
          -9.92411232,  -9.37480068,  -7.93249464, -10.13228416, -10.65295982]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [673]; unstable size 673; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 673] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 673] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 673] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 249] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.22755623,  2.35429430, -1.18080187, -0.14742780, -1.67962360,
          0.47270060, -0.58272338, -0.47875643,  1.04633427]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.27112675, -12.63512135,  -8.63367748,  -9.42183304,  -7.46700573,
          -9.92411232,  -9.37480068,  -7.93249464, -10.13228416, -10.65295982]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.27112770, -12.63512135,  -8.63367748,  -9.42183399,  -7.46700478,
           -9.92411232,  -9.37480068,  -7.93249464, -10.13228512, -10.65296173],
         [-10.27112770, -12.63512135,  -8.63367748,  -9.42183399,  -7.46700478,
           -9.92411232,  -9.37480068,  -7.93249464, -10.13228512, -10.65296173]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.70118284,  1.48933935, -0.46548986,  1.44230604,  2.19979048]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0763 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 33, vnnlib ID: 33 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.97903728, -15.47458935, -14.82082081, -16.93464851, -16.98804283,
         -18.22283363, -17.40720367, -19.39607430, -13.83522511, -16.04048157]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [961]; unstable size 961; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 147, 1, 961] with unstable size 146 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 961] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 961] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [146]; unstable size 146; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 146] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 146] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.36850715, 2.85024285, 4.83520412, 4.84200573, 5.83572006, 5.30677128,
         7.12614632, 1.81439674, 4.14064789]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0680 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 34, vnnlib ID: 34 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.24514103, -9.31445694, -4.68999958, -4.27805805, -4.32876205,
         -4.84132576, -4.94563007, -5.30884266, -9.89639282, -8.35261440]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [576]; unstable size 576; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 271, 1, 576] with unstable size 270 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 576] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 576] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [270]; unstable size 270; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 270] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 270] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.30363131,  2.67125320, -0.65277314, -0.97995400,  0.21614310,
         -0.59253997,  0.02449504,  3.50285625,  2.09800720]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.24514103, -9.31445694, -4.68999958, -4.27805805, -4.32876205,
         -4.84132576, -4.94563007, -5.30884266, -9.89639282, -8.35261440]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.15455532, -10.60125256,  -5.41358471,  -5.43196726,  -5.26921654,
           -5.97929192,  -6.01046705,  -6.31621122, -10.86349106,  -9.62036419],
         [ -9.15455532, -10.60125256,  -5.41358471,  -5.43196726,  -5.26921654,
           -5.97929192,  -6.01046705,  -6.31621122, -10.86349106,  -9.62036419]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01838255, -0.16275072,  0.57849979]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0124 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0777 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 35, vnnlib ID: 35 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.70502281, -7.45960903, -2.49920797, -1.05304623, -3.13333511,
         -1.90231669, -1.12411547, -2.32658529, -5.78024006, -5.08773088]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 256, 1, 540] with unstable size 255 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 540] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [255]; unstable size 255; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 255] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 255] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.87189984,  3.69729757,  0.41519809,  1.04059923,  0.46059477,
         -1.19380605,  0.21724126,  2.69666696,  1.93056870]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.70502281, -7.45960903, -2.49920797, -1.05304623, -3.13333511,
         -1.90231669, -1.12411547, -2.32658529, -5.78024006, -5.08773088]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.05819893, -7.58267593, -2.72234511, -1.43960345, -3.43121195,
          -2.28614616, -0.89729089, -2.77882195, -6.09740543, -5.29890108]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.54231256]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0059 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0724 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 36, vnnlib ID: 36 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.26436710, -5.76788616, -1.08416247,  0.26655820, -2.02816391,
         -0.65419853, -1.94119561, -0.85351741, -4.12531948, -3.61707258]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [746]; unstable size 746; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 148, 1, 746] with unstable size 147 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 746] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 746] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [147]; unstable size 147; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 147] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 147] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.37818551,  3.92298722, -0.56011510, -1.79689848,  0.44506025,
         -0.89399886,  0.06454611,  2.27980351,  1.70670199]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.26436710, -5.76788616, -1.08416247,  0.26655820, -2.02816391,
         -0.65419853, -1.94119561, -0.85351741, -4.12531948, -3.61707258]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.26436663, -5.76788521, -1.08416212,  0.26655802, -2.02816391,
          -0.65419877, -1.94119525, -0.85351765, -4.12531900, -3.61707306],
         [-2.26436663, -5.76788521, -1.08416212,  0.26655802, -2.02816391,
          -0.65419877, -1.94119525, -0.85351765, -4.12531900, -3.61707306]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.23064446, -1.12007570, -0.19931889]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0725 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 37, vnnlib ID: 37 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.01291561, -12.13928890, -12.98730183, -15.90724564, -13.82077122,
         -17.84158707, -17.88521957, -16.36121368, -11.50735950, -12.93546104]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [566]; unstable size 566; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 566] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 566] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 566] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 180] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.04726791, 2.13469315, 4.88873672, 2.78446746, 6.62359476, 6.58985090,
         4.87536192, 0.22735906, 1.88157845]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0654 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 38, vnnlib ID: 38 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.67120075, -8.34336758, -2.96194768, -3.20485783, -2.59110832,
         -3.43676805, -1.38701296, -4.13833094, -8.45190620, -6.74960279]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [421]; unstable size 421; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 421] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 421] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 421] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 249] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.48716164,  5.17507648,  0.09683537,  0.57209575, -0.21805716,
          0.58378124,  1.18988407,  5.01148224,  3.44507074]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.67120075, -8.34336758, -2.96194768, -3.20485783, -2.59110832,
         -3.43676805, -1.38701296, -4.13833094, -8.45190620, -6.74960279]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.66it/s]100%|██████████| 1/1 [00:00<00:00,  7.66it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.36143351, -8.27827263, -2.67933655, -3.03170109, -2.11203384,
          -3.19349098, -1.59651995, -3.84145784, -8.13518906, -6.71451759]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.51551390]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1333 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 20.927520751953125
alpha/beta optimization time: 1.3619191646575928
initial alpha-crown bounds: tensor([[ 4.54304838,  5.26645231,  0.14525437,  0.62454093, -0.16246271,
          0.64612162,  1.25837016,  5.08361435,  3.52258205]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.16246271133422852
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6035 seconds.
lower bounds for all target labels: [4.543047904968262, 5.266452789306641, 0.14525365829467773, 0.6245384216308594, -0.16246318817138672, 0.646122395992279, 1.2583706378936768, 5.083612442016602, 3.522582530975342]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [4]
start creating model mps for candidates: ['lay/16_4']
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=38_spec=4_26492226.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=38_spec=4_26492226.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 228352 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.38731360435486
Verifying property 0 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.266452312469482.

Properties batch 1, size 1
Remaining timeout: 198.19522356987
Verifying property 1 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.083614349365234.

Properties batch 2, size 1
Remaining timeout: 198.07921862602234
Verifying property 2 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.54304838180542.

Properties batch 3, size 1
Remaining timeout: 197.96564507484436
Verifying property 3 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.5225820541381836.

Properties batch 4, size 1
Remaining timeout: 197.8500702381134
Verifying property 4 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.2583701610565186.

Properties batch 5, size 1
Remaining timeout: 197.73499059677124
Verifying property 5 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.646121621131897.

Properties batch 6, size 1
Remaining timeout: 197.61756825447083
Verifying property 6 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6245409250259399.

Properties batch 7, size 1
Remaining timeout: 197.48150324821472
Verifying property 7 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.14525437355041504.

Properties batch 8, size 1
Remaining timeout: 197.3651990890503
Verifying property 8 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.16246271]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.67120075, -8.34336758, -2.96194768, -3.20485783, -2.59110832,
        -3.43676805, -1.38701296, -4.13833094, -8.45190620, -6.74960279],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.16246271]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 421
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 246
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 688
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0007665157318115234
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0534    transfer 0.0001    finalize 0.0001    func 0.0538    
Accumulated time: func 0.0538    prepare 0.0002    bound 0.0534    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 51] 
split level 1: [/input-12, 41] 
split level 2: [/input-12, 60] 
split level 3: [/input-12, 35] 
split level 4: [/input-12, 92] 
split level 5: [/input-12, 29] 
split level 6: [/input-12, 11] 
split level 7: [/input-12, 6] 
split level 8: [/input-12, 38] 
split level 9: [/input-12, 37] 
split level 10: [/input-12, 17] 
split level 11: [/input-12, 33] 
split level 12: [/input-12, 46] 
split level 13: [/input-12, 26] 
split level 14: [/input-12, 54] 
split level 15: [/input-8, 299] 
split level 16: [/input-8, 1874] 
split level 17: [/input-8, 859] 
split level 18: [/input-8, 485] 
split level 19: [/input-8, 300] 
split level 20: [/input-8, 188] 
split level 21: [/input-8, 971] 
split level 22: [/input-8, 1114] 
split level 23: [/input-8, 921] 
split level 24: [/input-8, 809] 
split level 25: [/input-8, 89] 
split level 26: [/input-8, 429] 
split level 27: [/input-8, 1429] 
split level 28: [/input-8, 97] 
split level 29: [/input-8, 828] 
split level 30: [/input-8, 85] 
split level 31: [/input-8, 82] 
split level 32: [/input-8, 571] 
split level 33: [/input-8, 659] 
split level 34: [/input-8, 1426] 
split level 35: [/input-8, 187] 
split level 36: [/input-8, 481] 
split level 37: [/input-8, 994] 
split level 38: [/input-8, 964] 
split level 39: [/input-8, 1427] 
split level 40: [/input-8, 107] 
split level 41: [/input-8, 1978] 
split level 42: [/input-8, 938] 
split level 43: [/input-8, 1819] 
split level 44: [/input-8, 1150] 
split level 45: [/input-8, 1395] 
split level 46: [/input-8, 1130] 
split level 47: [/input-8, 1007] 
split level 48: [/input-8, 1865] 
split level 49: [/input-8, 282] 
split level 50: [/input-8, 1521] 
split level 51: [/input-8, 435] 
split level 52: [/input-8, 668] 
split level 53: [/input-8, 1010] 
split level 54: [/input-8, 1324] 
split level 55: [/input-8, 1388] 
split level 56: [/input-8, 1857] 
split level 57: [/input-8, 970] 
split level 58: [/input-8, 800] 
split level 59: [/input-8, 2024] 
split level 60: [/input-8, 1411] 
split level 61: [/input, 2280] 
split level 62: [/input-8, 842] 
split level 63: [/input-8, 1250] 
split level 64: [/input-8, 1866] 
split level 65: [/input-8, 1980] 
split level 66: [/input-8, 934] 
split level 67: [/input-8, 1947] 
split level 68: [/input-8, 1380] 
split level 69: [/input-8, 937] 
split level 70: [/input-8, 1030] 
split level 71: [/input-8, 2025] 
split level 72: [/input-8, 926] 
split level 73: [/input-8, 841] 
split level 74: [/input-8, 65] 
split level 75: [/input-8, 1837] 
split level 76: [/input, 484] 
split level 77: [/input-8, 494] 
split level 78: [/input-8, 688] 
split level 79: [/input-8, 963] 
split level 80: [/input-8, 544] 
split level 81: [/input-8, 522] 
split level 82: [/input-8, 505] 
split level 83: [/input-8, 1931] 
split level 84: [/input-8, 1417] 
split level 85: [/input, 1587] 
split level 86: [/input-8, 414] 
split level 87: [/input-8, 1983] 
split level 88: [/input-8, 310] 
split level 89: [/input-8, 493] 
split level 90: [/input-8, 99] 
split level 91: [/input-8, 1834] 
split level 92: [/input, 1638] 
split level 93: [/input-8, 1575] 
split level 94: [/input-8, 496] 
split level 95: [/input-8, 2004] 
split level 96: [/input-8, 1018] 
split level 97: [/input-8, 407] 
split level 98: [/input-8, 984] 
split level 99: [/input-8, 419] 
split level 100: [/input, 483] 
split level 101: [/input-8, 1582] 
split level 102: [/input-8, 2003] 
split level 103: [/input-8, 2021] 
split level 104: [/input-8, 1469] 
split level 105: [/input-8, 1434] 
split level 106: [/input-8, 119] 
split level 107: [/input-8, 514] 
split level 108: [/input, 1719] 
split level 109: [/input-8, 1996] 
split level 110: [/input, 2136] 
split level 111: [/input-8, 816] 
split level 112: [/input, 1718] 
split level 113: [/input-8, 1486] 
split level 114: [/input-8, 2045] 
split level 115: [/input-8, 1443] 
split level 116: [/input-8, 1795] 
split level 117: [/input-8, 1240] 
split level 118: [/input-8, 1533] 
split level 119: [/input-8, 503] 
split level 120: [/input, 1653] 
split level 121: [/input, 1575] 
split level 122: [/input-8, 479] 
split level 123: [/input, 3545] 
split level 124: [/input, 174] 
split level 125: [/input, 1702] 
split level 126: [/input-8, 508] 
split level 127: [/input-8, 638] 
split level 128: [/input-8, 2029] 
split level 129: [/input-8, 1363] 
split level 130: [/input, 2296] 
split level 131: [/input-8, 1242] 
split level 132: [/input-8, 914] 
split level 133: [/input-8, 1302] 
split level 134: [/input, 1669] 
split level 135: [/input, 2602] 
split level 136: [/input-8, 1354] 
split level 137: [/input-8, 1012] 
split level 138: [/input, 2374] 
split level 139: [/input, 431] 
split level 140: [/input, 2121] 
split level 141: [/input-8, 504] 
split level 142: [/input, 739] 
split level 143: [/input-8, 689] 
split level 144: [/input, 709] 
split level 145: [/input, 1610] 
split level 146: [/input, 1130] 
split level 147: [/input, 1743] 
split level 148: [/input, 1570] 
split level 149: [/input, 1468] 
split level 150: [/input, 1705] 
split level 151: [/input-8, 2023] 
split level 152: [/input, 3539] 
split level 153: [/input, 2008] 
split level 154: [/input, 1948] 
split level 155: [/input, 3517] 
split level 156: [/input, 2261] 
split level 157: [/input, 1756] 
split level 158: [/input, 1589] 
split level 159: [/input-8, 1529] 
split level 160: [/input-8, 1381] 
split level 161: [/input-8, 467] 
split level 162: [/input-8, 1823] 
split level 163: [/input, 3357] 
split level 164: [/input, 1469] 
split level 165: [/input, 1164] 
split level 166: [/input, 2322] 
split level 167: [/input-8, 577] 
split level 168: [/input, 3513] 
split level 169: [/input, 3533] 
split level 170: [/input-8, 76] 
split level 171: [/input, 1888] 
split level 172: [/input, 1302] 
split level 173: [/input, 1499] 
split level 174: [/input, 1105] 
split level 175: [/input-8, 951] 
split level 176: [/input, 1956] 
split level 177: [/input-8, 1398] 
split level 178: [/input-8, 1995] 
split level 179: [/input-8, 406] 
split level 180: [/input, 3561] 
split level 181: [/input, 1685] 
split level 182: [/input, 1937] 
split level 183: [/input, 1159] 
split level 184: [/input, 3069] 
split level 185: [/input, 1826] 
split level 186: [/input, 2341] 
split level 187: [/input-8, 1955] 
split level 188: [/input, 3350] 
split level 189: [/input, 3349] 
split level 190: [/input-8, 1442] 
split level 191: [/input-8, 1402] 
split level 192: [/input, 3869] 
split level 193: [/input, 1933] 
split level 194: [/input, 1196] 
split level 195: [/input, 376] 
split level 196: [/input, 2219] 
split level 197: [/input, 162] 
split level 198: [/input-8, 1047] 
split level 199: [/input, 2259] 
Time: prepare 0.0059    bound 0.0930    transfer 0.0148    finalize 0.0038    func 0.1175    
Accumulated time: func 0.1714    prepare 0.0157    bound 0.1463    transfer 0.0149    finalize 0.0039    
all_split False
======================Cut inference begins======================
max lb tensor(0.25878191) min lb tensor(-0.16238046)
Number of Verified Splits: 8 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.012637853622436523 
BICCOS Cumulative time: 0.012637853622436523
Preprocessing time: 0.010954856872558594 Inference time: 0.00034880638122558594 Add cuts time: 0.00012946128845214844 Cut analysis time: 0.0012047290802001953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14719 (1), -0.14710 (1), -0.14692 (1), -0.14686 (1), -0.14672 (1), -0.14623 (1), -0.14620 (1), -0.14517 (1), -0.14508 (1), -0.14418 (1), -0.14325 (1), -0.14313 (1), -0.14312 (1), -0.14254 (1), -0.14196 (1), -0.14144 (1), -0.14034 (1), -0.13998 (1), -0.13795 (1), -0.13717 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5126    set_bounds 0.0102    solve 0.1176    add 0.3328    
Accumulated time: pickout 0.0004    decision 0.5126    set_bounds 0.0102    solve 0.1176    add 0.3328    
Current (lb-rhs): -0.14719367027282715
50 domains visited
Cumulative time: 1.0669877529144287

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 35] [/input-12, 35] [/input-12, 92] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 29] [/input-12, 92] [/input-12, 92] [/input-12, 29] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 29] 
split level 2: [/input-12, 11] [/input-12, 29] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 11] 
split level 3: [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 17] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1085367202758789
10 lb beta sum: 1.057102084159851, worst -0.04209434986114502
Time: prepare 0.0071    bound 0.1354    transfer 0.0010    finalize 0.0027    func 0.1489    
Accumulated time: func 0.3203    prepare 0.0231    bound 0.2817    transfer 0.0159    finalize 0.0067    
all_split False
======================Cut inference begins======================
max lb tensor(0.17490923) min lb tensor(-0.04197049)
Number of Verified Splits: 359 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=38_spec=4_26492226.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0017
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.037915945053100586 
BICCOS Cumulative time: 0.05055379867553711
Preprocessing time: 0.013305187225341797 Inference time: 0.014437675476074219 Add cuts time: 0.00821542739868164 Cut analysis time: 0.0019576549530029297
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0080    decision 0.0243    set_bounds 0.0148    solve 0.1490    add 0.0164    
Accumulated time: pickout 0.0084    decision 0.5369    set_bounds 0.0250    solve 0.2666    add 0.3492    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 92]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.05967101e-13, 4.78027314e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 92]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.05967101e-13, 1.53439328e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 92]), tensor([ 1., -1.]), tensor([0, 0]), tensor([3.04094378e-40, 1.21087000e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 92]), tensor([1., 1.]), tensor([0, 0]), tensor([3.04094378e-40, 1.51233241e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.024697303771972656

all verified at 1th iter
Time: prepare 0.0004    bound 0.0157    transfer 0.0001    finalize 0.0002    func 0.0164    
Accumulated time: func 0.3366    prepare 0.0234    bound 0.2974    transfer 0.0160    finalize 0.0068    
After pruning, left:  0

Back to Regular BaB

found process to kill: terminal indx = 4
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=38_spec=4_26492226.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=38_spec=4_26492226.log
found process for pidx=4
Result: safe in 4.2012 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 39, vnnlib ID: 39 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.08262920, -10.85117626,  -6.26876736,  -6.31408882,  -5.73352718,
          -6.74807501,  -3.77881598,  -7.22824049, -11.69428158, -10.35355473]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [375]; unstable size 375; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 375] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 375] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 375] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 208] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.36300087, 4.89374256, 1.18320346, 1.43400931, 0.60667586, 1.79556406,
         1.70379806, 5.56933117, 4.72802114]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0686 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 40, vnnlib ID: 40 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.55409622,  -9.96810532,  -6.92626286,  -8.56464005,  -8.43423653,
          -9.26128197, -10.86567974,  -8.56524467,  -8.85235691, -11.04646587]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [508]; unstable size 508; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 169, 1, 508] with unstable size 168 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 508] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 508] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [168]; unstable size 168; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 168] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 168] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.94185495, 0.70694852, 2.04573965, 1.92763674, 2.63131189, 4.18971395,
         1.79439855, 2.23234749, 4.28507805]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0579 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 41, vnnlib ID: 41 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.03971958, -11.64941406, -10.00275898,  -8.47386932,  -9.92812920,
          -8.93652153, -10.23073101, -10.63002968,  -4.10415173,  -9.58254910]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [504]; unstable size 504; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 504] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 504] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 504] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 206] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.82665873, 6.09783649, 4.47349691, 3.14197659, 4.34114552, 3.46894121,
         4.61985540, 4.88829088, 4.12811422]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0664 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 42, vnnlib ID: 42 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.23514986, -9.22857761, -3.75808716, -3.27435327, -4.29405165,
         -3.58545446, -2.41056466, -6.29414511, -6.66572762, -8.34386063]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [590]; unstable size 590; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 245, 1, 590] with unstable size 244 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 590] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 590] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [244]; unstable size 244; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 244] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 244] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.87620568,  4.30693817, -0.06645775, -0.26148725,  0.30728078,
         -0.24854958,  2.13002586,  1.88156366,  3.71216321]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.23514986, -9.22857761, -3.75808716, -3.27435327, -4.29405165,
         -3.58545446, -2.41056466, -6.29414511, -6.66572762, -8.34386063]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.35it/s]100%|██████████| 1/1 [00:00<00:00,  7.35it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.03449631, -9.09223366, -3.54179525, -2.84015751, -4.05080748,
          -3.00110483, -2.64081597, -5.93490744, -6.32542515, -8.11971188],
         [-6.03449631, -9.09223366, -3.54179525, -2.84015751, -4.05080748,
          -3.00110483, -2.64081597, -5.93490744, -6.32542515, -8.11971188]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.90097928, 0.19934154, 0.36028886]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1394 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.594411849975586
alpha/beta optimization time: 1.3925998210906982
initial alpha-crown bounds: tensor([[ 1.98166215,  4.46373272,  0.01902914, -0.21573001,  0.40181994,
         -0.18405628,  2.22683048,  2.03213978,  3.86898375]], device='cuda:0')
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.21573001146316528
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6092 seconds.
lower bounds for all target labels: [1.9816621541976929, 4.463732719421387, 0.019028186798095703, -0.21573001146316528, 0.40181994438171387, -0.18405717611312866, 2.22683048248291, 2.032139778137207, 3.8689827919006348]
Number of cpus: 96  Number of subproblems: 2
Reassign each subproblems with number of thread: 48
Starting MIP solver for these labels: [3, 5]
start creating model mps for candidates: ['lay/16_3', 'lay/16_5']
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.mps
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=5_26492671.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=5_26492671.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 229012 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 229015 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.34971833229065
Verifying property 0 with 1 instances.
##### Instance 42 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.463732719421387.

Properties batch 1, size 1
Remaining timeout: 198.13946986198425
Verifying property 1 with 1 instances.
##### Instance 42 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.868983745574951.

Properties batch 2, size 1
Remaining timeout: 198.01457381248474
Verifying property 2 with 1 instances.
##### Instance 42 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.22683048248291.

Properties batch 3, size 1
Remaining timeout: 197.92995882034302
Verifying property 3 with 1 instances.
##### Instance 42 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.032139778137207.

Properties batch 4, size 1
Remaining timeout: 197.8476333618164
Verifying property 4 with 1 instances.
##### Instance 42 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.9816621541976929.

Properties batch 5, size 1
Remaining timeout: 197.76533102989197
Verifying property 5 with 1 instances.
##### Instance 42 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.40181994438171387.

Properties batch 6, size 1
Remaining timeout: 197.6829113960266
Verifying property 6 with 1 instances.
##### Instance 42 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.01902914047241211.

Properties batch 7, size 1
Remaining timeout: 197.59977293014526
Verifying property 7 with 1 instances.
##### Instance 42 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.18405628]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.23514986, -9.22857761, -3.75808716, -3.27435327, -4.29405165,
        -3.58545446, -2.41056466, -6.29414511, -6.66572762, -8.34386063],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.18405628]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 590
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 242
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 853
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0004892349243164062
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0538    transfer 0.0001    finalize 0.0001    func 0.0543    
Accumulated time: func 0.0543    prepare 0.0002    bound 0.0538    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 33] 
split level 1: [/input-12, 41] 
split level 2: [/input-12, 51] 
split level 3: [/input-12, 11] 
split level 4: [/input-12, 13] 
split level 5: [/input-8, 109] 
split level 6: [/input-12, 45] 
split level 7: [/input-8, 476] 
split level 8: [/input-12, 1] 
split level 9: [/input-8, 1940] 
split level 10: [/input-8, 483] 
split level 11: [/input-8, 92] 
split level 12: [/input-8, 850] 
split level 13: [/input-8, 540] 
split level 14: [/input-8, 1308] 
split level 15: [/input-8, 1939] 
split level 16: [/input-8, 525] 
split level 17: [/input-8, 1909] 
split level 18: [/input-8, 475] 
split level 19: [/input-8, 869] 
split level 20: [/input-8, 1461] 
split level 21: [/input-8, 1453] 
split level 22: [/input, 325] 
split level 23: [/input-8, 1389] 
split level 24: [/input-8, 91] 
split level 25: [/input, 3432] 
split level 26: [/input-8, 484] 
split level 27: [/input-8, 971] 
split level 28: [/input-8, 307] 
split level 29: [/input-8, 981] 
split level 30: [/input-8, 485] 
split level 31: [/input-8, 1828] 
split level 32: [/input-8, 1298] 
split level 33: [/input-8, 117] 
split level 34: [/input-8, 1345] 
split level 35: [/input-8, 989] 
split level 36: [/input-8, 530] 
split level 37: [/input-8, 309] 
split level 38: [/input, 3399] 
split level 39: [/input-8, 1468] 
split level 40: [/input-8, 428] 
split level 41: [/input-8, 878] 
split level 42: [/input-8, 427] 
split level 43: [/input-8, 94] 
split level 44: [/input-8, 977] 
split level 45: [/input, 1366] 
split level 46: [/input-8, 826] 
split level 47: [/input-8, 923] 
split level 48: [/input-8, 1142] 
split level 49: [/input-8, 1527] 
split level 50: [/input-8, 486] 
split level 51: [/input-8, 654] 
split level 52: [/input-8, 1390] 
split level 53: [/input, 2135] 
split level 54: [/input-8, 985] 
split level 55: [/input-8, 867] 
split level 56: [/input-8, 1523] 
split level 57: [/input-8, 979] 
split level 58: [/input-8, 103] 
split level 59: [/input-8, 828] 
split level 60: [/input-8, 507] 
split level 61: [/input-8, 624] 
split level 62: [/input-8, 310] 
split level 63: [/input, 3417] 
split level 64: [/input-8, 1237] 
split level 65: [/input-8, 1467] 
split level 66: [/input, 391] 
split level 67: [/input-8, 620] 
split level 68: [/input-8, 1903] 
split level 69: [/input, 2117] 
split level 70: [/input-8, 1247] 
split level 71: [/input-8, 522] 
split level 72: [/input-8, 1446] 
split level 73: [/input-8, 1381] 
split level 74: [/input-8, 1771] 
split level 75: [/input-8, 1324] 
split level 76: [/input-8, 1835] 
split level 77: [/input-8, 1254] 
split level 78: [/input-8, 997] 
split level 79: [/input-8, 1457] 
split level 80: [/input-8, 998] 
split level 81: [/input-8, 124] 
split level 82: [/input-8, 75] 
split level 83: [/input-8, 1348] 
split level 84: [/input-8, 1421] 
split level 85: [/input, 369] 
split level 86: [/input-8, 1433] 
split level 87: [/input-8, 506] 
split level 88: [/input, 355] 
split level 89: [/input-8, 86] 
split level 90: [/input-8, 1246] 
split level 91: [/input, 1382] 
split level 92: [/input-8, 1837] 
split level 93: [/input-8, 1071] 
split level 94: [/input-8, 1255] 
split level 95: [/input-8, 922] 
split level 96: [/input, 1334] 
split level 97: [/input-8, 113] 
split level 98: [/input-8, 487] 
split level 99: [/input-8, 827] 
split level 100: [/input-8, 1347] 
split level 101: [/input, 1352] 
split level 102: [/input-8, 541] 
split level 103: [/input-8, 1844] 
split level 104: [/input, 1350] 
split level 105: [/input-8, 435] 
split level 106: [/input-8, 2035] 
split level 107: [/input, 406] 
split level 108: [/input-8, 524] 
split level 109: [/input, 3510] 
split level 110: [/input-8, 2036] 
split level 111: [/input, 3960] 
split level 112: [/input-8, 862] 
split level 113: [/input-8, 1437] 
split level 114: [/input, 1333] 
split level 115: [/input-8, 1904] 
split level 116: [/input, 316] 
split level 117: [/input-8, 1323] 
split level 118: [/input-8, 1838] 
split level 119: [/input-8, 887] 
split level 120: [/input, 32] 
split level 121: [/input, 3127] 
split level 122: [/input, 309] 
split level 123: [/input-8, 1816] 
split level 124: [/input, 2802] 
split level 125: [/input-8, 1009] 
split level 126: [/input-8, 505] 
split level 127: [/input-8, 1076] 
split level 128: [/input-8, 415] 
split level 129: [/input-8, 477] 
split level 130: [/input-8, 1440] 
split level 131: [/input-8, 602] 
split level 132: [/input, 1751] 
split level 133: [/input-8, 1736] 
split level 134: [/input, 4045] 
split level 135: [/input, 1960] 
split level 136: [/input, 2376] 
split level 137: [/input, 1093] 
split level 138: [/input-8, 83] 
split level 139: [/input, 2098] 
split level 140: [/input, 1396] 
split level 141: [/input-8, 1936] 
split level 142: [/input-8, 125] 
split level 143: [/input-8, 74] 
split level 144: [/input, 2840] 
split level 145: [/input-8, 1551] 
split level 146: [/input, 3329] 
split level 147: [/input, 1401] 
split level 148: [/input-8, 1406] 
split level 149: [/input, 439] 
split level 150: [/input, 1603] 
split level 151: [/input, 3493] 
split level 152: [/input, 3913] 
split level 153: [/input-8, 1442] 
split level 154: [/input, 1708] 
split level 155: [/input, 404] 
split level 156: [/input-8, 1983] 
split level 157: [/input-8, 1023] 
split level 158: [/input, 2103] 
split level 159: [/input, 3368] 
split level 160: [/input-8, 2044] 
split level 161: [/input-8, 573] 
split level 162: [/input, 2342] 
split level 163: [/input, 3474] 
split level 164: [/input, 2857] 
split level 165: [/input, 3330] 
split level 166: [/input, 1949] 
split level 167: [/input, 2091] 
split level 168: [/input, 1963] 
split level 169: [/input, 1725] 
split level 170: [/input, 3607] 
split level 171: [/input, 4090] 
split level 172: [/input, 1961] 
split level 173: [/input-8, 1754] 
split level 174: [/input-8, 840] 
split level 175: [/input, 1371] 
split level 176: [/input, 3371] 
split level 177: [/input, 506] 
split level 178: [/input, 1347] 
split level 179: [/input, 1416] 
split level 180: [/input, 3356] 
split level 181: [/input, 4013] 
split level 182: [/input-8, 876] 
split level 183: [/input, 174] 
split level 184: [/input-8, 2038] 
split level 185: [/input, 3345] 
split level 186: [/input, 595] 
split level 187: [/input-8, 1235] 
split level 188: [/input, 1964] 
split level 189: [/input, 3908] 
split level 190: [/input-8, 958] 
split level 191: [/input, 3022] 
split level 192: [/input, 2962] 
split level 193: [/input, 3927] 
split level 194: [/input, 3642] 
split level 195: [/input, 3677] 
split level 196: [/input-8, 1427] 
split level 197: [/input, 2360] 
split level 198: [/input, 2024] 
split level 199: [/input, 2841] 
Time: prepare 0.0059    bound 0.0938    transfer 0.0056    finalize 0.0037    func 0.1092    
Accumulated time: func 0.1635    prepare 0.0159    bound 0.1476    transfer 0.0058    finalize 0.0038    
all_split False
======================Cut inference begins======================
max lb tensor(0.32173502) min lb tensor(-0.18399471)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.012401342391967773 
BICCOS Cumulative time: 0.012401342391967773
Preprocessing time: 0.011055231094360352 Inference time: 0.00016641616821289062 Add cuts time: 7.295608520507812e-05 Cut analysis time: 0.0011067390441894531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16754 (1), -0.16742 (1), -0.16696 (1), -0.16672 (1), -0.16660 (1), -0.16613 (1), -0.16595 (1), -0.16589 (1), -0.16554 (1), -0.16499 (1), -0.16486 (1), -0.16401 (1), -0.16268 (1), -0.16203 (1), -0.16174 (1), -0.16147 (1), -0.16054 (1), -0.16009 (1), -0.15985 (1), -0.15934 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5113    set_bounds 0.0102    solve 0.1093    add 0.2142    
Accumulated time: pickout 0.0003    decision 0.5113    set_bounds 0.0102    solve 0.1093    add 0.2142    
Current (lb-rhs): -0.16753530502319336
50 domains visited
Cumulative time: 0.9317507743835449

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 51] [/input-12, 11] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 11] 
split level 3: [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 11] [/input-12, 13] [/input-12, 13] [/input-12, 51] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1565735936164856
10 lb beta sum: 0.5283015966415405, worst -0.14285169541835785
Time: prepare 0.0074    bound 0.1199    transfer 0.0014    finalize 0.0030    func 0.1345    
Accumulated time: func 0.2980    prepare 0.0236    bound 0.2675    transfer 0.0071    finalize 0.0068    
all_split False
======================Cut inference begins======================
max lb tensor(0.44221675) min lb tensor(-0.14283645)
Number of Verified Splits: 154 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.023839473724365234 
BICCOS Cumulative time: 0.03624081611633301
Preprocessing time: 0.013670206069946289 Inference time: 0.007223606109619141 Add cuts time: 0.002273082733154297 Cut analysis time: 0.0006725788116455078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05342 (2), -0.05327 (2), -0.05314 (2), -0.05306 (2), -0.05295 (2), -0.05278 (2), -0.05260 (2), -0.05229 (2), -0.05154 (2), -0.05150 (2), -0.05149 (2), -0.05139 (2), -0.05123 (2), -0.05060 (2), -0.05019 (2), -0.05009 (2), -0.05004 (2), -0.04968 (2), -0.04888 (2), -0.04886 (2), 
Length of domains: 50
Time: pickout 0.0083    decision 0.0198    set_bounds 0.0121    solve 0.1346    add 0.2576    
Accumulated time: pickout 0.0086    decision 0.5311    set_bounds 0.0223    solve 0.2439    add 0.4718    
Current (lb-rhs): -0.05342179536819458
100 domains visited
Cumulative time: 1.3956577777862549

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 51] [/input-12, 11] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 11] [/input-12, 51] [/input-12, 51] 
split level 3: [/input-12, 11] [/input-12, 51] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 51] [/input-12, 11] [/input-12, 11] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08483541011810303
10 lb beta sum: 0.9796273112297058, worst -0.03001987934112549
Time: prepare 0.0079    bound 0.1578    transfer 0.0010    finalize 0.0027    func 0.1731    
Accumulated time: func 0.4711    prepare 0.0318    bound 0.4253    transfer 0.0082    finalize 0.0095    
all_split False
======================Cut inference begins======================
max lb tensor(0.45058966) min lb tensor(-0.02982467)
Number of Verified Splits: 363 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=5_26492671.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0017
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 34
#cuts >= 20: 0
BICCOS time: 0.04228997230529785 
BICCOS Cumulative time: 0.07853078842163086
Preprocessing time: 0.013304948806762695 Inference time: 0.015774965286254883 Add cuts time: 0.010674715042114258 Cut analysis time: 0.0025353431701660156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02776 (3), -0.02776 (3), -0.02776 (3), -0.02775 (3), -0.02775 (3), -0.02775 (3), -0.01185 (3), -0.01185 (3), -0.00451 (3), -0.00451 (3), -0.00449 (3), -0.00449 (3), -0.00447 (3), -0.00445 (3), -0.00444 (3), -0.00443 (3), 
Length of domains: 16
Time: pickout 0.0089    decision 0.0220    set_bounds 0.0189    solve 0.1733    add 0.2235    
Accumulated time: pickout 0.0175    decision 0.5531    set_bounds 0.0412    solve 0.4172    add 0.6953    
Current (lb-rhs): -0.027763843536376953
116 domains visited
Cumulative time: 1.891627311706543

Shallow-BaB round 4
batch: 16
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 41] [/input-12, 33] [/input-12, 33] [/input-12, 41] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 41] [/input-12, 11] [/input-12, 41] [/input-12, 11] [/input-12, 11] [/input-12, 41] [/input-12, 41] [/input-12, 11] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 11] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 11] [/input-12, 45] [/input-12, 45] [/input-12, 11] [/input-12, 11] 
split level 3: [/input-8, 850] [/input-8, 1940] [/input-8, 850] [/input-8, 850] [/input-8, 1940] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 1940] [/input-8, 1940] 
split level 4: [/input-8, 1940] [/input-8, 92] [/input-8, 1940] [/input-8, 1940] [/input-8, 92] [/input-8, 1940] [/input-8, 1940] [/input-8, 1940] [/input-8, 483] [/input-8, 483] 
split level 5: [/input-8, 483] [/input-8, 850] [/input-8, 483] [/input-8, 483] [/input-8, 850] [/input-8, 483] [/input-8, 483] [/input-8, 483] [/input-8, 850] [/input-8, 850] 
split level 6: [/input-8, 92] [/input-8, 483] [/input-8, 92] [/input-8, 92] [/input-8, 483] [/input-8, 92] [/input-8, 92] [/input-8, 92] [/input-8, 92] [/input-8, 92] 
split level 7: [/input-8, 475] [/input-8, 475] [/input-8, 475] [/input-8, 1939] [/input-8, 475] [/input-8, 475] [/input-8, 475] [/input-8, 1939] [/input-8, 1939] [/input-8, 1939] 
split level 8: [/input-8, 1939] [/input-8, 1939] [/input-8, 1939] [/input-8, 475] [/input-8, 1939] [/input-8, 1939] [/input-8, 1939] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] 
split level 9: [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 475] [/input-8, 475] [/input-8, 475] 
split level 10: [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] 
split level 11: [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07590329647064209
10 lb beta sum: 3.4928183555603027, worst -1.1801719665527344e-05
Time: prepare 0.0072    bound 0.1733    transfer 0.0023    finalize 0.0060    func 0.1918    
Accumulated time: func 0.6628    prepare 0.0397    bound 0.5987    transfer 0.0105    finalize 0.0155    
all_split False
======================Cut inference begins======================
max lb tensor(0.47491574) min lb tensor(3.33786011e-06)
Number of Verified Splits: 384 of 384
Original cuts are inferred.
Matched cut cplex process, internal label idx = 5
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=5_26492671.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 38
#cuts >= 20: 0
BICCOS time: 0.045662641525268555 
BICCOS Cumulative time: 0.12419342994689941
Preprocessing time: 0.013742685317993164 Inference time: 0.020983457565307617 Add cuts time: 0.008942365646362305 Cut analysis time: 0.0019941329956054688
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0435    set_bounds 0.0131    solve 0.1920    add 0.0301    
Accumulated time: pickout 0.0184    decision 0.5966    set_bounds 0.0543    solve 0.6092    add 0.7254    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
116 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 33]), tensor([-1., -1.]), tensor([0, 0]), tensor([3.73969373e-28, 4.83850271e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 33]), tensor([-1.,  1.]), tensor([0, 0]), tensor([3.73969373e-28, 4.42262143e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 13, 33]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([2.71001314e-40, 1.05694160e-01, 4.63035345e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 13, 33, 41]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.71001314e-40, 1.05694160e-01, 3.92379612e-02, 1.72501672e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 13, 33, 41]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([2.71001314e-40, 1.05694160e-01, 3.92379612e-02, 3.91352028e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 13, 33]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.71001314e-40, 9.92283076e-02, 4.67704177e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 13, 33, 41]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.71001314e-40, 9.92283076e-02, 2.24345792e-02, 2.77681816e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 13, 33, 41]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([2.71001314e-40, 9.92283076e-02, 2.24345792e-02, 5.39586991e-02]), tensor([0, 1, 2, 3]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10113948583602905

all verified at 3th iter
Time: prepare 0.0006    bound 0.0396    transfer 0.0003    finalize 0.0003    func 0.0408    
Accumulated time: func 0.7037    prepare 0.0403    bound 0.6383    transfer 0.0108    finalize 0.0158    
After pruning, left:  0

Back to Regular BaB

found process to kill: terminal indx = 5
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=5_26492671.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=5_26492671.log

Properties batch 8, size 1
Remaining timeout: 195.07536363601685
Verifying property 8 with 1 instances.
##### Instance 42 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.21573001]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.23514986, -9.22857761, -3.75808716, -3.27435327, -4.29405165,
        -3.58545446, -2.41056466, -6.29414511, -6.66572762, -8.34386063],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.21573001]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 590
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 242
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 853
-----------------

======================Cut verification begins======================
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0015
Cut time: 0.00153350830078125
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0584    transfer 0.0001    finalize 0.0002    func 0.0589    
Accumulated time: func 0.0589    prepare 0.0002    bound 0.0584    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 33] 
split level 1: [/input-12, 1] 
split level 2: [/input-12, 11] 
split level 3: [/input-12, 51] 
split level 4: [/input-12, 41] 
split level 5: [/input-12, 10] 
split level 6: [/input-8, 109] 
split level 7: [/input-12, 13] 
split level 8: [/input-12, 45] 
split level 9: [/input-12, 82] 
split level 10: [/input-8, 540] 
split level 11: [/input-8, 850] 
split level 12: [/input-8, 1308] 
split level 13: [/input-8, 971] 
split level 14: [/input-8, 525] 
split level 15: [/input-8, 307] 
split level 16: [/input-8, 92] 
split level 17: [/input-8, 117] 
split level 18: [/input-8, 981] 
split level 19: [/input-8, 1909] 
split level 20: [/input-8, 483] 
split level 21: [/input-8, 1298] 
split level 22: [/input-8, 869] 
split level 23: [/input-8, 485] 
split level 24: [/input-12, 42] 
split level 25: [/input-8, 1389] 
split level 26: [/input-8, 1453] 
split level 27: [/input-8, 989] 
split level 28: [/input-8, 1461] 
split level 29: [/input-8, 94] 
split level 30: [/input, 3432] 
split level 31: [/input-8, 977] 
split level 32: [/input-8, 309] 
split level 33: [/input-8, 654] 
split level 34: [/input-8, 484] 
split level 35: [/input-8, 979] 
split level 36: [/input, 325] 
split level 37: [/input-8, 1940] 
split level 38: [/input-8, 486] 
split level 39: [/input-8, 530] 
split level 40: [/input-8, 1421] 
split level 41: [/input-8, 1523] 
split level 42: [/input-8, 1345] 
split level 43: [/input-8, 475] 
split level 44: [/input-8, 878] 
split level 45: [/input-8, 1828] 
split level 46: [/input-8, 985] 
split level 47: [/input-8, 1939] 
split level 48: [/input-8, 620] 
split level 49: [/input-8, 1247] 
split level 50: [/input-8, 1468] 
split level 51: [/input-8, 1142] 
split level 52: [/input-8, 828] 
split level 53: [/input-8, 1527] 
split level 54: [/input-8, 103] 
split level 55: [/input-8, 507] 
split level 56: [/input, 1366] 
split level 57: [/input-8, 541] 
split level 58: [/input-8, 124] 
split level 59: [/input-8, 86] 
split level 60: [/input-8, 91] 
split level 61: [/input, 3399] 
split level 62: [/input-8, 1254] 
split level 63: [/input-8, 998] 
split level 64: [/input-8, 506] 
split level 65: [/input-8, 113] 
split level 66: [/input-8, 1771] 
split level 67: [/input-8, 1390] 
split level 68: [/input, 391] 
split level 69: [/input-8, 1433] 
split level 70: [/input-8, 1903] 
split level 71: [/input-8, 1324] 
split level 72: [/input-8, 524] 
split level 73: [/input-8, 1255] 
split level 74: [/input-8, 997] 
split level 75: [/input-8, 310] 
split level 76: [/input-8, 1457] 
split level 77: [/input-8, 1348] 
split level 78: [/input-8, 428] 
split level 79: [/input-8, 522] 
split level 80: [/input-8, 1381] 
split level 81: [/input-8, 1904] 
split level 82: [/input-8, 1446] 
split level 83: [/input-8, 75] 
split level 84: [/input-8, 1467] 
split level 85: [/input-8, 1437] 
split level 86: [/input, 3417] 
split level 87: [/input, 316] 
split level 88: [/input, 2135] 
split level 89: [/input-8, 1246] 
split level 90: [/input-8, 1835] 
split level 91: [/input-8, 1076] 
split level 92: [/input-8, 1837] 
split level 93: [/input-8, 867] 
split level 94: [/input, 386] 
split level 95: [/input-8, 1754] 
split level 96: [/input-8, 624] 
split level 97: [/input-8, 1762] 
split level 98: [/input, 369] 
split level 99: [/input-8, 1844] 
split level 100: [/input-8, 923] 
split level 101: [/input-8, 487] 
split level 102: [/input, 406] 
split level 103: [/input-8, 1071] 
split level 104: [/input, 1382] 
split level 105: [/input-8, 1838] 
split level 106: [/input-8, 1347] 
split level 107: [/input, 355] 
split level 108: [/input-8, 827] 
split level 109: [/input-8, 1237] 
split level 110: [/input, 3960] 
split level 111: [/input-8, 573] 
split level 112: [/input-8, 602] 
split level 113: [/input-8, 501] 
split level 114: [/input-8, 505] 
split level 115: [/input, 309] 
split level 116: [/input-8, 125] 
split level 117: [/input, 1603] 
split level 118: [/input-8, 1009] 
split level 119: [/input-8, 415] 
split level 120: [/input-8, 83] 
split level 121: [/input, 1352] 
split level 122: [/input, 220] 
split level 123: [/input, 4045] 
split level 124: [/input-8, 1936] 
split level 125: [/input-8, 1736] 
split level 126: [/input, 404] 
split level 127: [/input-8, 862] 
split level 128: [/input-8, 922] 
split level 129: [/input, 2802] 
split level 130: [/input-8, 1440] 
split level 131: [/input-8, 887] 
split level 132: [/input-8, 1816] 
split level 133: [/input, 2098] 
split level 134: [/input, 1350] 
split level 135: [/input, 4013] 
split level 136: [/input, 1396] 
split level 137: [/input-8, 1235] 
split level 138: [/input, 1401] 
split level 139: [/input, 3510] 
split level 140: [/input-8, 840] 
split level 141: [/input-8, 958] 
split level 142: [/input, 3493] 
split level 143: [/input, 1333] 
split level 144: [/input, 174] 
split level 145: [/input-8, 1023] 
split level 146: [/input-8, 1406] 
split level 147: [/input-8, 435] 
split level 148: [/input, 3127] 
split level 149: [/input-8, 1551] 
split level 150: [/input-8, 2036] 
split level 151: [/input, 32] 
split level 152: [/input, 1416] 
split level 153: [/input-8, 1983] 
split level 154: [/input, 1960] 
split level 155: [/input, 3913] 
split level 156: [/input-8, 477] 
split level 157: [/input-8, 1744] 
split level 158: [/input, 1949] 
split level 159: [/input-8, 1323] 
split level 160: [/input, 2704] 
split level 161: [/input-8, 1770] 
split level 162: [/input-8, 74] 
split level 163: [/input, 2091] 
split level 164: [/input-8, 1787] 
split level 165: [/input-8, 563] 
split level 166: [/input-8, 786] 
split level 167: [/input, 1093] 
split level 168: [/input, 1347] 
split level 169: [/input, 2857] 
split level 170: [/input-8, 1442] 
split level 171: [/input, 300] 
split level 172: [/input, 4090] 
split level 173: [/input, 3329] 
split level 174: [/input, 1963] 
split level 175: [/input, 3908] 
split level 176: [/input-8, 1126] 
split level 177: [/input, 3371] 
split level 178: [/input, 4043] 
split level 179: [/input, 1964] 
split level 180: [/input, 1708] 
split level 181: [/input-8, 1477] 
split level 182: [/input, 3356] 
split level 183: [/input-8, 1919] 
split level 184: [/input, 3022] 
split level 185: [/input, 1725] 
split level 186: [/input-8, 1427] 
split level 187: [/input, 3694] 
split level 188: [/input, 506] 
split level 189: [/input, 3330] 
split level 190: [/input, 1371] 
split level 191: [/input, 3607] 
split level 192: [/input, 2962] 
split level 193: [/input, 3968] 
split level 194: [/input, 2916] 
split level 195: [/input-8, 876] 
split level 196: [/input, 3677] 
split level 197: [/input, 4052] 
split level 198: [/input, 4030] 
split level 199: [/input, 2841] 
Time: prepare 0.0061    bound 0.1089    transfer 0.0080    finalize 0.0036    func 0.1267    
Accumulated time: func 0.1856    prepare 0.0166    bound 0.1673    transfer 0.0082    finalize 0.0037    
all_split False
======================Cut inference begins======================
max lb tensor(0.23370647) min lb tensor(-0.21564734)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0016
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01344442367553711 
BICCOS Cumulative time: 0.01344442367553711
Preprocessing time: 0.011200428009033203 Inference time: 0.00017499923706054688 Add cuts time: 0.0001010894775390625 Cut analysis time: 0.001967906951904297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20197 (1), -0.20187 (1), -0.20132 (1), -0.20050 (1), -0.20030 (1), -0.20022 (1), -0.20021 (1), -0.19973 (1), -0.19950 (1), -0.19921 (1), -0.19912 (1), -0.19872 (1), -0.19870 (1), -0.19763 (1), -0.19665 (1), -0.19640 (1), -0.19613 (1), -0.19596 (1), -0.19552 (1), -0.19497 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5476    set_bounds 0.0100    solve 0.1268    add 0.2122    
Accumulated time: pickout 0.0004    decision 0.5476    set_bounds 0.0100    solve 0.1268    add 0.2122    
Current (lb-rhs): -0.2019716501235962
50 domains visited
Cumulative time: 0.9936964511871338

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 11] [/input-12, 11] [/input-12, 33] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 11] [/input-12, 41] [/input-12, 41] [/input-12, 51] [/input-12, 11] [/input-12, 51] [/input-12, 51] [/input-12, 41] [/input-12, 51] [/input-12, 51] 
split level 2: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 51] [/input-12, 41] [/input-12, 41] 
split level 3: [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1938004493713379
10 lb beta sum: 0.5672595500946045, worst -0.18613767623901367
Time: prepare 0.0078    bound 0.1409    transfer 0.0008    finalize 0.0031    func 0.1553    
Accumulated time: func 0.3409    prepare 0.0247    bound 0.3081    transfer 0.0089    finalize 0.0069    
all_split False
======================Cut inference begins======================
max lb tensor(0.22112489) min lb tensor(-0.18612123)
Number of Verified Splits: 75 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.02057027816772461 
BICCOS Cumulative time: 0.03401470184326172
Preprocessing time: 0.01354527473449707 Inference time: 0.003081798553466797 Add cuts time: 0.002493143081665039 Cut analysis time: 0.0014500617980957031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04529 (2), -0.04510 (2), -0.04461 (2), -0.04389 (2), -0.04372 (2), -0.04220 (2), -0.04216 (2), -0.04171 (2), -0.04116 (2), -0.04091 (2), -0.04036 (2), -0.03993 (2), -0.03971 (2), -0.03957 (2), -0.03933 (2), -0.03910 (2), -0.03808 (2), -0.03698 (2), -0.03679 (2), -0.03637 (2), 
Length of domains: 50
Time: pickout 0.0081    decision 0.0221    set_bounds 0.0157    solve 0.1554    add 0.2277    
Accumulated time: pickout 0.0086    decision 0.5697    set_bounds 0.0257    solve 0.2823    add 0.4399    
Current (lb-rhs): -0.045288681983947754
100 domains visited
Cumulative time: 1.4504973888397217

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 41] [/input-12, 51] [/input-12, 41] 
split level 2: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 51] [/input-12, 41] [/input-12, 13] 
split level 3: [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 45] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05325800180435181
10 lb beta sum: 1.2031506299972534, worst -0.08399289846420288
Time: prepare 0.0078    bound 0.1623    transfer 0.0008    finalize 0.0029    func 0.1766    
Accumulated time: func 0.5175    prepare 0.0327    bound 0.4705    transfer 0.0097    finalize 0.0098    
all_split False
======================Cut inference begins======================
max lb tensor(0.50066936) min lb tensor(-0.02560931)
Number of Verified Splits: 383 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.04288983345031738 
BICCOS Cumulative time: 0.0769045352935791
Preprocessing time: 0.012913942337036133 Inference time: 0.018685340881347656 Add cuts time: 0.009962320327758789 Cut analysis time: 0.0013282299041748047
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0079    decision 0.0208    set_bounds 0.0182    solve 0.1767    add 0.0216    
Accumulated time: pickout 0.0165    decision 0.5905    set_bounds 0.0439    solve 0.4590    add 0.4615    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 33]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.68745800e-14, 2.32524619e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 33]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.68745800e-14, 1.39964987e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 13, 33]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([2.68745800e-14, 4.61619943e-02, 1.88429937e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 13, 33]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.68745800e-14, 4.61619943e-02, 6.21945933e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 13, 33]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([2.68745800e-14, 4.11802381e-02, 1.91049799e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 13, 33]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([2.68745800e-14, 4.11802381e-02, 7.28513151e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18854987621307373
10 lb beta sum: 0.4847224950790405, worst -0.16318708658218384
Time: prepare 0.0005    bound 0.1531    transfer 0.0002    finalize 0.0002    func 0.1541    
Accumulated time: func 0.6716    prepare 0.0332    bound 0.6235    transfer 0.0099    finalize 0.0100    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] 
split level 1: [/input-12, 51] 
split level 2: [/input-12, 41] 
split level 3: [/input-12, 13] 
split level 4: [/input-12, 45] 
split level 5: [/input-12, 82] 
split level 6: [/input-8, 1909] 
split level 7: [/input-8, 483] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9470596313476562, worst -0.09480035305023193
10 lb beta sum: 0.955050528049469, worst -0.08700239658355713
Time: prepare 0.0118    bound 0.1531    transfer 0.0038    finalize 0.0017    func 0.1729    
Accumulated time: func 0.8444    prepare 0.0455    bound 0.7766    transfer 0.0137    finalize 0.0117    
all_split False
======================Cut inference begins======================
max lb tensor(0.36417043) min lb tensor(-0.07476819)
Number of Verified Splits: 226 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.9470595717430115, worst -0.15398454666137695
10 lb beta sum: 1.222761631011963, worst -0.143133282661438
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 14
#cuts 4-6: 3
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.314100980758667 
BICCOS Cumulative time: 0.3910055160522461
Preprocessing time: 0.007943391799926758 Inference time: 0.2980363368988037 Add cuts time: 0.006369829177856445 Cut analysis time: 0.0017514228820800781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07477 (8), -0.07202 (8), -0.07157 (8), -0.07037 (8), -0.06903 (8), -0.06820 (8), -0.06710 (8), -0.06513 (8), -0.03317 (8), -0.03226 (8), -0.02972 (8), -0.02852 (8), -0.02500 (8), -0.02394 (8), -0.02323 (8), -0.02176 (8), -0.02075 (8), -0.02025 (8), -0.01975 (8), -0.01766 (8), 
Length of domains: 30
Time: pickout 0.0006    decision 0.0238    set_bounds 0.0267    solve 0.1730    add 0.0580    
Accumulated time: pickout 0.0171    decision 0.6144    set_bounds 0.0706    solve 0.6319    add 0.5195    
Current (lb-rhs): -0.07476818561553955
130 domains visited
Cumulative time: 2.553828239440918

BaB round 2
batch: 30
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 850] [/input-8, 1308] [/input-8, 1308] [/input-8, 92] [/input-8, 92] [/input-8, 1308] [/input-8, 1308] 
split level 1: [/input-8, 92] [/input-8, 92] [/input-8, 117] [/input-8, 1308] [/input-8, 92] [/input-8, 94] [/input-8, 484] [/input-8, 654] [/input-8, 92] [/input-8, 92] 
split level 2: [/input-8, 94] [/input-8, 94] [/input-8, 92] [/input-8, 94] [/input-8, 620] [/input-8, 654] [/input-8, 654] [/input-8, 484] [/input-8, 94] [/input-8, 94] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.062447309494018555
10 lb beta sum: 0.1808653622865677, worst -0.0589866042137146
Time: prepare 0.0050    bound 0.1611    transfer 0.0005    finalize 0.0014    func 0.1698    
Accumulated time: func 1.0142    prepare 0.0507    bound 0.9377    transfer 0.0143    finalize 0.0131    
all_split False
======================Cut inference begins======================
max lb tensor(0.04003280) min lb tensor(-0.05894420)
Number of Verified Splits: 159 of 240
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.028122663497924805 
BICCOS Cumulative time: 0.4191281795501709
Preprocessing time: 0.008103132247924805 Inference time: 0.017060041427612305 Add cuts time: 0.0016758441925048828 Cut analysis time: 0.0012836456298828125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05894 (11), -0.05798 (11), -0.05703 (11), -0.05698 (11), -0.05561 (11), -0.05473 (11), -0.05436 (11), -0.05400 (11), -0.05382 (11), -0.05339 (11), -0.05332 (11), -0.05312 (11), -0.05237 (11), -0.05100 (11), -0.05038 (11), -0.05015 (11), -0.05001 (11), -0.04949 (11), -0.04916 (11), -0.04681 (11), 
Length of domains: 81
Time: pickout 0.0055    decision 0.0176    set_bounds 0.0140    solve 0.1698    add 0.0765    
Accumulated time: pickout 0.0226    decision 0.6320    set_bounds 0.0845    solve 0.8018    add 0.5960    
Current (lb-rhs): -0.05894419550895691
211 domains visited
Cumulative time: 2.873507261276245

BaB round 3
batch: 81
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 92] [/input-8, 850] [/input-8, 92] [/input-8, 850] [/input-8, 92] [/input-8, 92] [/input-8, 92] [/input-8, 92] [/input-8, 92] [/input-8, 850] 
split level 1: [/input-8, 484] [/input-8, 92] [/input-8, 484] [/input-8, 92] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05301463603973389
10 lb beta sum: 0.3264102339744568, worst -0.04962453246116638
Time: prepare 0.0067    bound 0.1378    transfer 0.0010    finalize 0.0021    func 0.1498    
Accumulated time: func 1.1640    prepare 0.0576    bound 1.0755    transfer 0.0152    finalize 0.0153    
all_split False
======================Cut inference begins======================
max lb tensor(0.01270652) min lb tensor(-0.04954231)
Number of Verified Splits: 92 of 324
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0019
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 9
#cuts 4-6: 3
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.024616479873657227 
BICCOS Cumulative time: 0.4437446594238281
Preprocessing time: 0.010557889938354492 Inference time: 0.01044154167175293 Add cuts time: 0.0011026859283447266 Cut analysis time: 0.002514362335205078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04954 (13), -0.04881 (13), -0.04731 (13), -0.04605 (13), -0.04598 (13), -0.04536 (13), -0.04512 (13), -0.04494 (13), -0.04421 (13), -0.04398 (13), -0.04391 (13), -0.04254 (13), -0.04240 (13), -0.04238 (13), -0.04213 (13), -0.04139 (13), -0.04139 (13), -0.04136 (13), -0.04076 (13), -0.04018 (13), 
Length of domains: 232
Time: pickout 0.0147    decision 0.0205    set_bounds 0.0172    solve 0.1499    add 0.0803    
Accumulated time: pickout 0.0373    decision 0.6525    set_bounds 0.1018    solve 0.9516    add 0.6763    
Current (lb-rhs): -0.04954230785369873
443 domains visited
Cumulative time: 3.188589096069336

BaB round 4
batch: 232
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 654] [/input-8, 979] [/input-8, 654] [/input-8, 979] [/input-8, 654] [/input-8, 979] [/input-8, 654] [/input-8, 979] [/input-8, 654] [/input-8, 979] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04744774103164673
10 lb beta sum: 0.37058553099632263, worst -0.044064462184906006
Time: prepare 0.0094    bound 0.1616    transfer 0.0049    finalize 0.1554    func 0.3345    
Accumulated time: func 1.4985    prepare 0.0673    bound 1.2371    transfer 0.0201    finalize 0.1707    
all_split False
======================Cut inference begins======================
max lb tensor(0.01129353) min lb tensor(-0.04402182)
Number of Verified Splits: 61 of 464
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 9
#cuts 4-6: 7
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.02728414535522461 
BICCOS Cumulative time: 0.47102880477905273
Preprocessing time: 0.015054702758789062 Inference time: 0.007858991622924805 Add cuts time: 0.0026700496673583984 Cut analysis time: 0.0017004013061523438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04402 (14), -0.04353 (14), -0.04199 (14), -0.04131 (14), -0.04090 (14), -0.04050 (14), -0.04035 (14), -0.03987 (14), -0.03949 (14), -0.03940 (14), -0.03936 (14), -0.03931 (14), -0.03894 (14), -0.03846 (14), -0.03830 (14), -0.03823 (14), -0.03765 (14), -0.03726 (14), -0.03716 (14), -0.03710 (14), 
Length of domains: 403
Time: pickout 0.0169    decision 0.0263    set_bounds 0.0221    solve 0.3347    add 0.0871    
Accumulated time: pickout 0.0542    decision 0.6788    set_bounds 0.1239    solve 1.2863    add 0.7633    
Current (lb-rhs): -0.044021815061569214
846 domains visited
Cumulative time: 3.7110259532928467

BaB round 5
batch: 403
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 979] [/input-8, 484] [/input-8, 979] [/input-8, 484] [/input-8, 475] [/input-8, 475] [/input-8, 475] [/input-8, 654] [/input-8, 475] [/input-8, 654] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04148876667022705
10 lb beta sum: 0.37894824147224426, worst -0.038208842277526855
Time: prepare 0.0167    bound 0.1647    transfer 0.0042    finalize 0.0042    func 0.1952    
Accumulated time: func 1.6936    prepare 0.0842    bound 1.4018    transfer 0.0243    finalize 0.1748    
all_split False
======================Cut inference begins======================
max lb tensor(0.01033771) min lb tensor(-0.03819254)
Number of Verified Splits: 118 of 806
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 9
#cuts 4-6: 16
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.05074357986450195 
BICCOS Cumulative time: 0.5217723846435547
Preprocessing time: 0.02559638023376465 Inference time: 0.020096540451049805 Add cuts time: 0.0030438899993896484 Cut analysis time: 0.0020067691802978516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03819 (15), -0.03765 (15), -0.03727 (15), -0.03689 (15), -0.03576 (15), -0.03559 (15), -0.03538 (15), -0.03520 (15), -0.03499 (15), -0.03454 (15), -0.03453 (15), -0.03428 (15), -0.03409 (15), -0.03402 (15), -0.03365 (15), -0.03364 (15), -0.03352 (15), -0.03314 (15), -0.03303 (15), -0.03302 (15), 
Length of domains: 688
Time: pickout 0.0194    decision 0.0372    set_bounds 0.0392    solve 0.1954    add 0.1292    
Accumulated time: pickout 0.0736    decision 0.7160    set_bounds 0.1631    solve 1.4817    add 0.8925    
Current (lb-rhs): -0.038192540407180786
1534 domains visited
Cumulative time: 4.193829298019409

BaB round 6
batch: 688
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 475] [/input-8, 475] [/input-8, 979] [/input-8, 979] [/input-8, 979] [/input-8, 475] [/input-8, 979] [/input-8, 475] [/input-8, 475] [/input-8, 475] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03588789701461792
10 lb beta sum: 0.350359171628952, worst -0.03250575065612793
Time: prepare 0.0301    bound 0.1695    transfer 0.0130    finalize 0.0083    func 0.2299    
Accumulated time: func 1.9235    prepare 0.1145    bound 1.5712    transfer 0.0373    finalize 0.1831    
all_split False
======================Cut inference begins======================
max lb tensor(0.01079011) min lb tensor(-0.03242442)
Number of Verified Splits: 392 of 1376
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 12
#cuts 4-6: 11
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.11582708358764648 
BICCOS Cumulative time: 0.6375994682312012
Preprocessing time: 0.04806041717529297 Inference time: 0.0552217960357666 Add cuts time: 0.010597467422485352 Cut analysis time: 0.0019474029541015625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03242 (16), -0.03198 (16), -0.03168 (16), -0.03163 (16), -0.03122 (16), -0.03122 (16), -0.03052 (16), -0.03008 (16), -0.02955 (16), -0.02953 (16), -0.02937 (16), -0.02927 (16), -0.02927 (16), -0.02918 (16), -0.02894 (16), -0.02889 (16), -0.02887 (16), -0.02875 (16), -0.02859 (16), -0.02848 (16), 
Length of domains: 984
Time: pickout 0.0767    decision 0.0546    set_bounds 0.0644    solve 0.2303    add 0.1218    
Accumulated time: pickout 0.1503    decision 0.7706    set_bounds 0.2275    solve 1.7121    add 1.0144    
Current (lb-rhs): -0.03242442011833191
2518 domains visited
Cumulative time: 4.868823289871216

BaB round 7
batch: 984
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 878] [/input-8, 878] [/input-8, 878] [/input-8, 117] [/input-8, 878] [/input-8, 878] [/input-8, 878] [/input-8, 878] [/input-8, 878] [/input-8, 1468] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.032370805740356445
10 lb beta sum: 0.3631801903247833, worst -0.0355105996131897
Time: prepare 0.0422    bound 0.1901    transfer 0.0085    finalize 0.0113    func 0.2652    
Accumulated time: func 2.1887    prepare 0.1570    bound 1.7614    transfer 0.0458    finalize 0.1944    
all_split False
======================Cut inference begins======================
max lb tensor(0.01189455) min lb tensor(-0.02895415)
Number of Verified Splits: 525 of 1968
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 11
#cuts 4-6: 13
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.3023262023925781 
BICCOS Cumulative time: 0.9399256706237793
Preprocessing time: 0.06861376762390137 Inference time: 0.2248227596282959 Add cuts time: 0.006865262985229492 Cut analysis time: 0.002024412155151367
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02895 (17), -0.02837 (17), -0.02821 (17), -0.02812 (17), -0.02770 (17), -0.02760 (17), -0.02696 (17), -0.02672 (17), -0.02654 (17), -0.02633 (17), -0.02603 (17), -0.02598 (17), -0.02591 (17), -0.02587 (17), -0.02582 (17), -0.02576 (17), -0.02558 (17), -0.02556 (17), -0.02553 (17), -0.02536 (17), 
Length of domains: 1443
Time: pickout 0.0825    decision 0.0681    set_bounds 0.0923    solve 0.2657    add 0.0949    
Accumulated time: pickout 0.2328    decision 0.8387    set_bounds 0.3198    solve 1.9778    add 1.1093    
Current (lb-rhs): -0.028954148292541504
3961 domains visited
Cumulative time: 5.788415908813477

BaB round 8
batch: 1443
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 117] [/input-8, 878] [/input-8, 117] [/input-8, 1468] [/input-8, 117] [/input-8, 117] [/input-8, 878] [/input-8, 117] [/input-8, 878] [/input-8, 117] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.030353128910064697
10 lb beta sum: 0.3471045196056366, worst -0.03821486234664917
Time: prepare 0.0669    bound 0.2319    transfer 0.0125    finalize 0.0202    func 0.3513    
Accumulated time: func 2.5400    prepare 0.2242    bound 1.9933    transfer 0.0583    finalize 0.2146    
all_split False
======================Cut inference begins======================
max lb tensor(0.02235019) min lb tensor(-0.02688786)
Number of Verified Splits: 1624 of 2886
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 12
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.38098597526550293 
BICCOS Cumulative time: 1.3209116458892822
Preprocessing time: 0.11774921417236328 Inference time: 0.2472243309020996 Add cuts time: 0.014020442962646484 Cut analysis time: 0.0019919872283935547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02689 (18), -0.02629 (18), -0.02614 (18), -0.02610 (18), -0.02564 (18), -0.02553 (18), -0.02492 (18), -0.02473 (18), -0.02449 (18), -0.02432 (18), -0.02397 (18), -0.02395 (18), -0.02393 (18), -0.02382 (18), -0.02374 (18), -0.02369 (18), -0.02357 (18), -0.02356 (18), -0.02345 (18), -0.02325 (18), 
Length of domains: 1262
Time: pickout 0.0394    decision 0.0969    set_bounds 0.1374    solve 0.3529    add 0.1299    
Accumulated time: pickout 0.2722    decision 0.9356    set_bounds 0.4573    solve 2.3307    add 1.2391    
Current (lb-rhs): -0.026887863874435425
5223 domains visited
Cumulative time: 6.949359655380249

BaB round 9
batch: 1262
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 620] [/input-8, 878] [/input-8, 485] [/input-8, 485] [/input-8, 485] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026483893394470215
10 lb beta sum: 0.38928478956222534, worst -0.03800708055496216
Time: prepare 0.0603    bound 0.2057    transfer 0.0120    finalize 0.0154    func 0.3102    
Accumulated time: func 2.8503    prepare 0.2848    bound 2.1990    transfer 0.0703    finalize 0.2300    
all_split False
======================Cut inference begins======================
max lb tensor(0.32103771) min lb tensor(-0.02312830)
Number of Verified Splits: 1448 of 2524
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 14
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.32199525833129883 
BICCOS Cumulative time: 1.642906904220581
Preprocessing time: 0.08771085739135742 Inference time: 0.21904969215393066 Add cuts time: 0.013482093811035156 Cut analysis time: 0.001752614974975586
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02313 (19), -0.02259 (19), -0.02245 (19), -0.02235 (19), -0.02203 (19), -0.02170 (19), -0.02144 (19), -0.02098 (19), -0.02092 (19), -0.02051 (19), -0.02043 (19), -0.02020 (19), -0.02018 (19), -0.02008 (19), -0.02005 (19), -0.01998 (19), -0.01995 (19), -0.01975 (19), -0.01957 (19), -0.01944 (19), 
Length of domains: 1076
Time: pickout 0.0919    decision 0.0843    set_bounds 0.3175    solve 0.3116    add 0.0924    
Accumulated time: pickout 0.3641    decision 1.0199    set_bounds 0.7748    solve 2.6423    add 1.3315    
Current (lb-rhs): -0.02312830090522766
6299 domains visited
Cumulative time: 8.190922975540161

BaB round 10
batch: 1076
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 620] [/input-8, 485] [/input-8, 878] [/input-8, 878] [/input-8, 485] [/input-8, 485] [/input-8, 878] [/input-8, 878] [/input-8, 878] [/input-8, 620] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023760974407196045
10 lb beta sum: 0.4382913410663605, worst -0.020446956157684326
Time: prepare 0.0441    bound 0.1786    transfer 0.0103    finalize 0.0131    func 0.2603    
Accumulated time: func 3.1106    prepare 0.3292    bound 2.3776    transfer 0.0806    finalize 0.2431    
all_split False
======================Cut inference begins======================
max lb tensor(0.32163849) min lb tensor(-0.02042660)
Number of Verified Splits: 1106 of 2152
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.24582552909851074 
BICCOS Cumulative time: 1.8887324333190918
Preprocessing time: 0.07079339027404785 Inference time: 0.16520333290100098 Add cuts time: 0.008624553680419922 Cut analysis time: 0.0012042522430419922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02043 (20), -0.01994 (20), -0.01964 (20), -0.01957 (20), -0.01882 (20), -0.01881 (20), -0.01879 (20), -0.01808 (20), -0.01751 (20), -0.01751 (20), -0.01738 (20), -0.01728 (20), -0.01726 (20), -0.01699 (20), -0.01688 (20), -0.01680 (20), -0.01676 (20), -0.01676 (20), -0.01669 (20), -0.01653 (20), 
Length of domains: 1046
Time: pickout 0.0350    decision 0.0705    set_bounds 0.0972    solve 0.2609    add 0.1137    
Accumulated time: pickout 0.3992    decision 1.0904    set_bounds 0.8720    solve 2.9032    add 1.4452    
Current (lb-rhs): -0.02042660117149353
7345 domains visited
Cumulative time: 9.031611680984497

BaB round 11
batch: 1046
splitting decisions: 
split level 0: [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018529653549194336

all verified at 1th iter
Time: prepare 0.0429    bound 0.0199    transfer 0.0112    finalize 0.0123    func 0.0995    
Accumulated time: func 3.2101    prepare 0.3723    bound 2.3975    transfer 0.0918    finalize 0.2554    
all_split False
======================Cut inference begins======================
max lb tensor(0.05360321) min lb tensor(3.57627869e-07)
Number of Verified Splits: 2092 of 2092
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.cuts: total 385 constraints, 30507 nonzero elements
cuts preparing time: 0.0176
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 386.
#cuts 1-3: 59
#cuts 10-12: 7
#cuts 13-15: 7
#cuts 16-18: 16
#cuts 19-21: 20
#cuts >= 20: 277
BICCOS time: 0.32848072052001953 
BICCOS Cumulative time: 2.2172131538391113
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0773    decision 0.0681    set_bounds 0.2252    solve 0.1000    add 0.0001    
Accumulated time: pickout 0.4765    decision 1.1585    set_bounds 1.0972    solve 3.0033    add 1.4453    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
7345 domains visited
Cumulative time: 9.843104600906372

found process to kill: terminal indx = 3
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.cuts
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.indx
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=42_spec=3_26492671.log
found process to kill: terminal indx = 5
found process for pidx=3
kill process for pidx=3
found process for pidx=5
Result: safe in 15.2334 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 43, vnnlib ID: 43 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.89999580, -8.55049229, -2.24591589, -3.50618315, -2.26213169,
         -3.34141207, -2.12596679, -3.44707155, -7.70838165, -6.43066359]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [559]; unstable size 559; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 276, 1, 559] with unstable size 275 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 559] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 559] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [275]; unstable size 275; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 275] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 275] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.40751833,  2.20469332, -2.32451940, -0.32005554, -2.33795691,
         -2.70371628, -1.07307494,  1.97626233,  0.69333458]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.89999580, -8.55049229, -2.24591589, -3.50618315, -2.26213169,
         -3.34141207, -2.12596679, -3.44707155, -7.70838165, -6.43066359]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.89999676, -8.55049229, -2.24591589, -3.50618315, -2.26213217,
          -3.34141254, -2.12596703, -3.44707155, -7.70838165, -6.43066359],
         [-5.89999676, -8.55049229, -2.24591589, -3.50618315, -2.26213217,
          -3.34141254, -2.12596703, -3.44707155, -7.70838165, -6.43066359]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.09549665,  0.16477060, -1.07928038, -1.21544552,  0.10565901]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0731 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 44, vnnlib ID: 44 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.03364277, -19.56793976, -11.80023479, -14.44734001, -11.96190071,
         -15.16267776, -13.56670475, -14.41914845, -17.25975418, -18.72661972]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [579]; unstable size 579; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 366, 1, 579] with unstable size 365 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 579] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 579] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [365]; unstable size 365; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 365] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 365] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.44665408,  4.78386021,  1.24888515, -0.92591417,  1.73357105,
          0.40172052,  0.80255318,  3.31306267,  4.20044708]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.03364277, -19.56793976, -11.80023479, -14.44734001, -11.96190071,
         -15.16267776, -13.56670475, -14.41914845, -17.25975418, -18.72661972]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.04666615, -19.50651550, -11.78564644, -14.38106823, -11.57203579,
          -15.05305195, -13.48137379, -14.08794785, -17.24640465, -18.64059067]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.21361065]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0062 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0653 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 45, vnnlib ID: 45 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.78477669, -6.78171825, -6.26888752, -6.35238361, -6.19891071,
         -6.76594496, -7.28494310, -7.20223379, -6.12016869, -6.41277218]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [523]; unstable size 523; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 523] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 523] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 523] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 203] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.61079025, -2.42233181, -2.06717396, -2.44244099, -1.87546539,
         -1.27228260, -1.18069935, -2.12183666, -1.19985151]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.78477669, -6.78171825, -6.26888752, -6.35238361, -6.19891071,
         -6.76594496, -7.28494310, -7.20223379, -6.12016869, -6.41277218]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.78477764, -6.78171730, -6.26888752, -6.35238314, -6.19891167,
          -6.76594448, -7.28494167, -7.20223379, -6.12016869, -6.41277170],
         [-6.78477764, -6.78171730, -6.26888752, -6.35238314, -6.19891167,
          -6.76594448, -7.28494167, -7.20223379, -6.12016869, -6.41277170]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.00306034, -0.51282978, -0.42933416, -0.58280563, -0.01577282,
           0.50322437,  0.42051649, -0.66154861, -0.36894560]]],
       device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         ...,


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0629 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 46, vnnlib ID: 46 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.35317993, -10.05822277,  -5.70741463,  -5.30954361,  -5.77602005,
          -5.75247955,  -5.90963793,  -7.28197336,  -9.95428562,  -8.67804050]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [767]; unstable size 767; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 280, 1, 767] with unstable size 279 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 767] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 767] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [279]; unstable size 279; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 279] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 279] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.12624156,  2.47288227, -1.31481600, -0.78547335, -1.26456189,
         -0.82690167,  0.44953939,  2.35486031,  1.43794298]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.35317993, -10.05822277,  -5.70741463,  -5.30954361,  -5.77602005,
          -5.75247955,  -5.90963793,  -7.28197336,  -9.95428562,  -8.67804050]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.35317993, -10.05822277,  -5.70741367,  -5.30954361,  -5.77602053,
           -5.75248098,  -5.90963840,  -7.28197336,  -9.95428562,  -8.67804050],
         [ -7.35317993, -10.05822277,  -5.70741367,  -5.30954361,  -5.77602053,
           -5.75248098,  -5.90963840,  -7.28197336,  -9.95428562,  -8.67804050]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04506731, -0.44293737,  0.02353954,  0.15715742]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]]]],
       device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0441 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 47, vnnlib ID: 47 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.96445751, -13.95264721, -11.88872242, -12.43732738, -11.28103065,
         -13.65725136, -13.27398205, -14.68500137,  -4.78945637, -13.98094654]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [407]; unstable size 407; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 136, 1, 407] with unstable size 135 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 407] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 407] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [135]; unstable size 135; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 135] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 135] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.02164268, 7.83872032, 5.93336439, 6.63180161, 5.40730762, 7.70184708,
         7.39634657, 8.62479019, 8.04601097]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0628 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 48, vnnlib ID: 48 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.38742971, -8.09583473, -4.17398930, -2.21849561, -4.56612682,
         -1.60451329, -3.84133196, -3.18707657, -8.22775269, -6.31927729]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [525]; unstable size 525; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 227, 1, 525] with unstable size 226 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 525] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 525] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [226]; unstable size 226; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 226] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 226] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.95492125, 4.49830723, 1.13714695, 0.18978089, 1.74934673, 0.88679516,
         0.59362930, 4.57968712, 2.70802188]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0509 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 49, vnnlib ID: 49 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.61658096,  -4.85169363, -11.21480465, -12.01975822, -10.98789406,
         -12.65254879, -10.85314465, -10.63402939,  -8.40850830,  -8.61452770]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [603]; unstable size 603; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 215, 1, 603] with unstable size 214 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 603] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 603] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [214]; unstable size 214; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 214] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 214] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.89015722, 3.85943222, 4.84163761, 3.92532969, 5.16841841, 3.74945831,
         3.27850199, 1.93241048, 2.38752627]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0741 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 50, vnnlib ID: 50 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.94205475, -17.04773521, -14.67247200, -15.90819740, -14.60353470,
         -15.82103157, -16.25810432, -18.06786919, -16.98810387, -17.41020012]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [822]; unstable size 822; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 822] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 822] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 822] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 272] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.36523724, -0.94602108, -2.17604709, -0.24087632, -2.33651733,
         -0.49621749,  0.76373547, -0.90574384, -0.11942005]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-14.94205475, -17.04773521, -14.67247200, -15.90819740, -14.60353470,
         -15.82103157, -16.25810432, -18.06786919, -16.98810387, -17.41020012]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.94205666, -17.04773521, -14.67247486, -15.90820122, -14.60353661,
          -15.82103348, -16.25810814, -18.06787491, -16.98810387, -17.41019821],
         [-14.94205666, -17.04773521, -14.67247486, -15.90820122, -14.60353661,
          -15.82103348, -16.25810814, -18.06787491, -16.98810387, -17.41019821]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.87897682,  1.22670174, -1.14855862,  0.08716774, -1.21749687,
           0.43707466,  1.16707039,  1.58916473]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         ...,


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0848 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 51, vnnlib ID: 51 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.99211121, -14.04107761,  -7.31353474,  -9.89678955,  -8.41009998,
         -10.75332451, -10.63476658, -14.15501976,  -8.49472427, -14.58970451]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [584]; unstable size 584; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 141, 1, 584] with unstable size 140 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 584] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 584] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [140]; unstable size 140; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 140] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 140] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.93474388, 0.60455751, 3.06741548, 1.66697371, 3.81925988, 3.66227579,
         7.25833130, 1.59742713, 7.46314812]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0540 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 52, vnnlib ID: 52 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.61421394, -9.33402538, -5.16767883, -2.64045858, -3.99503326,
         -2.02855682, -4.62166262, -4.60086203, -9.98200893, -8.04814816]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [560]; unstable size 560; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 560] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 560] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 560] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 249] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.83084655, 5.06325197, 1.78347611, 0.29397511, 0.66198254, 1.20087147,
         1.58306265, 5.80479670, 4.18816042]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0310 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 53, vnnlib ID: 53 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.78492880, -7.88765907, -5.16387463, -4.98481178, -5.33830261,
         -5.60749578, -4.95262003, -5.78874540, -8.26618099, -6.25775003]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [600]; unstable size 600; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 170, 1, 600] with unstable size 169 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 600] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 600] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [169]; unstable size 169; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 169] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 169] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.27218688,  1.68873811, -0.96977496, -0.89153779, -0.69919348,
         -0.37939462, -0.73812258,  2.16678596,  0.28935528]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.78492880, -7.88765907, -5.16387463, -4.98481178, -5.33830261,
         -5.60749578, -4.95262003, -5.78874540, -8.26618099, -6.25775003]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.78492785, -7.88765907, -5.16387367, -4.98481131, -5.33830214,
          -5.60749578, -4.95261955, -5.78874445, -8.26618099, -6.25774956],
         [-4.78492785, -7.88765907, -5.16387367, -4.98481131, -5.33830214,
          -5.60749578, -4.95261955, -5.78874445, -8.26618099, -6.25774956]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16769171,  0.21125412,  0.03219175,  0.38568258,  0.65487623,
           0.83612490]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0779 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 54, vnnlib ID: 54 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.60030365, -9.18505859, -6.79131508, -6.88497829, -7.22082901,
         -7.05521584, -7.65325308, -6.61295652, -4.71676254, -8.33832359]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [638]; unstable size 638; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 201, 1, 638] with unstable size 200 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 638] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 638] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 200] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.26122451,  2.70693922, -0.04236603,  0.30218863,  0.55265045,
          0.28326583,  0.97746348, -0.14264786,  2.10263586]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.60030365, -9.18505859, -6.79131508, -6.88497829, -7.22082901,
         -7.05521584, -7.65325308, -6.61295652, -4.71676254, -8.33832359]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.77it/s]100%|██████████| 1/1 [00:00<00:00,  8.76it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.18685913, -9.02146721, -6.04399967, -6.18254805, -6.46242762,
          -6.28525734, -6.96298456, -5.72760868, -4.99939823, -8.02779961],
         [-8.18685913, -9.02146721, -6.04399967, -6.18254805, -6.46242762,
          -6.28525734, -6.96298456, -5.72760868, -4.99939823, -8.02779961]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[1.04460144, 0.72821045]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1169 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 9.889852523803711
alpha/beta optimization time: 1.2198569774627686
initial alpha-crown bounds: tensor([[ 2.37168860,  2.83057547,  0.08211279,  0.37143373,  0.65308738,
          0.37245870,  1.04918551, -0.03270328,  2.19201326]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.032703280448913574
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6163 seconds.
lower bounds for all target labels: [2.371689558029175, 2.8305764198303223, 0.08211278915405273, 0.3714330196380615, 0.6530845165252686, 0.37245655059814453, 1.049185037612915, -0.03270375728607178, 2.1920135021209717]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [7]
start creating model mps for candidates: ['lay/16_7']
Process 229404 received signal 15. Terminate pool <multiprocessing.pool.Pool state=RUN pool_size=96>
Process 229404 received signal 15. Terminate pool <multiprocessing.pool.Pool state=TERMINATE pool_size=96>
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.54655814170837
Verifying property 0 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.830575466156006.

Properties batch 1, size 1
Remaining timeout: 198.37990140914917
Verifying property 1 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.3716886043548584.

Properties batch 2, size 1
Remaining timeout: 198.27001881599426
Verifying property 2 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.1920132637023926.

Properties batch 3, size 1
Remaining timeout: 198.16129112243652
Verifying property 3 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0491855144500732.

Properties batch 4, size 1
Remaining timeout: 198.0529944896698
Verifying property 4 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6530873775482178.

Properties batch 5, size 1
Remaining timeout: 197.9447739124298
Verifying property 5 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.37245869636535645.

Properties batch 6, size 1
Remaining timeout: 197.83613204956055
Verifying property 6 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.37143373489379883.

Properties batch 7, size 1
Remaining timeout: 197.72656774520874
Verifying property 7 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.08211278915405273.

Properties batch 8, size 1
Remaining timeout: 197.6172969341278
Verifying property 8 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03270328]], device='cuda:0') need to verify.
Model prediction is: tensor([-8.60030365, -9.18505859, -6.79131508, -6.88497829, -7.22082901,
        -7.05521584, -7.65325308, -6.61295652, -4.71676254, -8.33832359],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03270328]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 638
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 196
Node /15 input 0: size torch.Size([100]) unstable 20
-----------------
# of unstable neurons: 854
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0009267330169677734
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0548    transfer 0.0001    finalize 0.0001    func 0.0553    
Accumulated time: func 0.0553    prepare 0.0003    bound 0.0548    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 31] 
split level 1: [/input-12, 18] 
split level 2: [/input-12, 36] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 51] 
split level 5: [/input-12, 26] 
split level 6: [/input-8, 1891] 
split level 7: [/input-8, 860] 
split level 8: [/input-8, 1910] 
split level 9: [/input-8, 548] 
split level 10: [/input-8, 1884] 
split level 11: [/input-8, 1902] 
split level 12: [/input-8, 1892] 
split level 13: [/input-8, 875] 
split level 14: [/input-8, 876] 
split level 15: [/input-12, 1] 
split level 16: [/input, 2525] 
split level 17: [/input-8, 667] 
split level 18: [/input-8, 666] 
split level 19: [/input-8, 1879] 
split level 20: [/input, 2426] 
split level 21: [/input, 2422] 
split level 22: [/input, 2409] 
split level 23: [/input, 2442] 
split level 24: [/input-8, 1874] 
split level 25: [/input, 3511] 
split level 26: [/input, 2765] 
split level 27: [/input, 2526] 
split level 28: [/input-8, 649] 
split level 29: [/input-8, 1918] 
split level 30: [/input-8, 859] 
split level 31: [/input-8, 1861] 
split level 32: [/input, 1479] 
split level 33: [/input-8, 1057] 
split level 34: [/input, 2407] 
split level 35: [/input-8, 506] 
split level 36: [/input, 2518] 
split level 37: [/input-8, 1469] 
split level 38: [/input-8, 556] 
split level 39: [/input-8, 1890] 
split level 40: [/input, 2503] 
split level 41: [/input, 2519] 
split level 42: [/input-8, 1350] 
split level 43: [/input, 1480] 
split level 44: [/input-8, 690] 
split level 45: [/input, 2541] 
split level 46: [/input-8, 1648] 
split level 47: [/input-8, 1307] 
split level 48: [/input, 2540] 
split level 49: [/input, 1478] 
split level 50: [/input, 2472] 
split level 51: [/input, 2377] 
split level 52: [/input, 3302] 
split level 53: [/input, 2517] 
split level 54: [/input-8, 410] 
split level 55: [/input, 2536] 
split level 56: [/input, 2331] 
split level 57: [/input-8, 812] 
split level 58: [/input-8, 949] 
split level 59: [/input-8, 1656] 
split level 60: [/input-8, 1065] 
split level 61: [/input, 2247] 
split level 62: [/input, 1742] 
split level 63: [/input, 2521] 
split level 64: [/input-8, 1970] 
split level 65: [/input, 2348] 
split level 66: [/input, 3156] 
split level 67: [/input-8, 421] 
split level 68: [/input, 3300] 
split level 69: [/input-8, 964] 
split level 70: [/input, 2493] 
split level 71: [/input, 2263] 
split level 72: [/input-8, 147] 
split level 73: [/input, 3578] 
split level 74: [/input, 2343] 
split level 75: [/input, 2332] 
split level 76: [/input-8, 849] 
split level 77: [/input, 2902] 
split level 78: [/input, 102] 
split level 79: [/input-8, 388] 
split level 80: [/input, 2349] 
split level 81: [/input, 2952] 
split level 82: [/input-8, 1081] 
split level 83: [/input, 2510] 
split level 84: [/input, 3304] 
split level 85: [/input-8, 1862] 
split level 86: [/input-8, 420] 
split level 87: [/input, 2354] 
split level 88: [/input, 2370] 
split level 89: [/input, 2460] 
split level 90: [/input-8, 564] 
split level 91: [/input, 1758] 
split level 92: [/input, 2361] 
split level 93: [/input, 2365] 
split level 94: [/input, 2489] 
split level 95: [/input, 3384] 
split level 96: [/input, 2380] 
split level 97: [/input-8, 1984] 
split level 98: [/input-8, 1390] 
split level 99: [/input, 3386] 
split level 100: [/input, 1710] 
split level 101: [/input-12, 33] 
split level 102: [/input, 2389] 
split level 103: [/input, 2477] 
split level 104: [/input, 3224] 
split level 105: [/input-8, 944] 
split level 106: [/input-8, 1353] 
split level 107: [/input, 3576] 
split level 108: [/input, 3283] 
split level 109: [/input, 2443] 
split level 110: [/input, 3286] 
split level 111: [/input, 2363] 
split level 112: [/input-8, 463] 
split level 113: [/input, 1726] 
split level 114: [/input, 3126] 
split level 115: [/input-8, 1926] 
split level 116: [/input, 3139] 
split level 117: [/input, 4062] 
split level 118: [/input, 2444] 
split level 119: [/input, 3124] 
split level 120: [/input, 1355] 
split level 121: [/input, 3122] 
split level 122: [/input, 2398] 
split level 123: [/input, 1356] 
split level 124: [/input, 2397] 
split level 125: [/input, 1514] 
split level 126: [/input, 3208] 
split level 127: [/input, 3268] 
split level 128: [/input, 3128] 
split level 129: [/input, 2436] 
split level 130: [/input, 3113] 
split level 131: [/input-8, 1932] 
split level 132: [/input, 1345] 
split level 133: [/input, 2985] 
split level 134: [/input, 614] 
split level 135: [/input, 1669] 
split level 136: [/input, 3150] 
split level 137: [/input, 1678] 
split level 138: [/input, 2538] 
split level 139: [/input, 3356] 
split level 140: [/input, 1646] 
split level 141: [/input, 2922] 
split level 142: [/input, 2473] 
split level 143: [/input, 3171] 
split level 144: [/input-8, 1860] 
split level 145: [/input-8, 1925] 
split level 146: [/input, 1358] 
split level 147: [/input, 3272] 
split level 148: [/input, 1347] 
split level 149: [/input, 3299] 
split level 150: [/input, 356] 
split level 151: [/input-8, 1624] 
split level 152: [/input, 3137] 
split level 153: [/input, 2327] 
split level 154: [/input, 2552] 
split level 155: [/input, 3130] 
split level 156: [/input, 3106] 
split level 157: [/input-8, 1251] 
split level 158: [/input, 3404] 
split level 159: [/input, 2965] 
split level 160: [/input, 2347] 
split level 161: [/input, 3669] 
split level 162: [/input, 2554] 
split level 163: [/input, 3204] 
split level 164: [/input, 2921] 
split level 165: [/input, 3267] 
split level 166: [/input, 3374] 
split level 167: [/input, 3390] 
split level 168: [/input, 324] 
split level 169: [/input, 3403] 
split level 170: [/input, 3217] 
split level 171: [/input, 3364] 
split level 172: [/input-8, 1314] 
split level 173: [/input, 3289] 
split level 174: [/input, 1323] 
split level 175: [/input, 3117] 
split level 176: [/input-8, 1796] 
split level 177: [/input, 2340] 
split level 178: [/input, 1305] 
split level 179: [/input, 3574] 
split level 180: [/input, 3186] 
split level 181: [/input, 3575] 
split level 182: [/input, 2259] 
split level 183: [/input, 3170] 
split level 184: [/input, 2553] 
split level 185: [/input, 3133] 
split level 186: [/input, 1557] 
split level 187: [/input, 3815] 
split level 188: [/input, 3293] 
split level 189: [/input, 3529] 
split level 190: [/input, 3938] 
split level 191: [/input-8, 389] 
split level 192: [/input, 369] 
split level 193: [/input, 2089] 
split level 194: [/input, 3281] 
split level 195: [/input, 3817] 
split level 196: [/input-8, 1856] 
split level 197: [/input, 1367] 
split level 198: [/input, 2931] 
split level 199: [/input, 3816] 
Time: prepare 0.0059    bound 0.0995    transfer 0.0066    finalize 0.0038    func 0.1160    
Accumulated time: func 0.1713    prepare 0.0162    bound 0.1543    transfer 0.0067    finalize 0.0039    
all_split False
======================Cut inference begins======================
max lb tensor(0.17216086) min lb tensor(-0.03265858)
Number of Verified Splits: 26 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01349639892578125 
BICCOS Cumulative time: 0.01349639892578125
Preprocessing time: 0.011023759841918945 Inference time: 0.001096487045288086 Add cuts time: 0.0003380775451660156 Cut analysis time: 0.0010380744934082031
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5401    set_bounds 0.0121    solve 0.1161    add 0.0101    
Accumulated time: pickout 0.0004    decision 0.5401    set_bounds 0.0121    solve 0.1161    add 0.0101    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31]), tensor([-1.]), tensor([0]), tensor([1.05352142e-13]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31]), tensor([1.]), tensor([0]), tensor([1.05352142e-13]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.00780034065246582

all verified at 1th iter
Time: prepare 0.0004    bound 0.0189    transfer 0.0001    finalize 0.0001    func 0.0196    
Accumulated time: func 0.1909    prepare 0.0166    bound 0.1732    transfer 0.0068    finalize 0.0041    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
the mip building process is not terminated yet, kill it
Result: safe in 3.7584 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 55, vnnlib ID: 55 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.89316845, -11.06601906,  -5.14806175,  -6.90553761,  -5.56315517,
          -7.37682629,  -4.56512213,  -8.62777042, -10.82919407, -11.60672951]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [553]; unstable size 553; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 289, 1, 553] with unstable size 288 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 553] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 553] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [288]; unstable size 288; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 288] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 288] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.69566989,  4.02234983, -0.46736044,  1.18290865, -0.48098493,
          1.44691157,  2.02048230,  4.17298079,  4.86422586]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.89316845, -11.06601906,  -5.14806175,  -6.90553761,  -5.56315517,
          -7.37682629,  -4.56512213,  -8.62777042, -10.82919407, -11.60672951]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.29it/s]100%|██████████| 1/1 [00:00<00:00,  7.28it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.66092777, -10.91280365,  -4.69080067,  -6.58803511,  -5.26302862,
           -6.99822426,  -4.68125200,  -8.21521473, -10.48723888, -11.44526005],
         [ -8.66092777, -10.91280365,  -4.69080067,  -6.58803511,  -5.26302862,
           -6.99822426,  -4.68125200,  -8.21521473, -10.48723888, -11.44526005]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.00954866, 0.58177662]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1408 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 20.363889694213867
alpha/beta optimization time: 1.4013848304748535
initial alpha-crown bounds: tensor([[ 2.79173684,  4.12782097, -0.40548539,  1.27908814, -0.38319314,
          1.54761767,  2.13196921,  4.29718590,  4.97714853]], device='cuda:0')
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.4054853916168213
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6156 seconds.
lower bounds for all target labels: [2.7917368412017822, 4.1278204917907715, -0.4054853916168213, 1.2790881395339966, -0.38319313526153564, 1.5476173162460327, 2.1319682598114014, 4.297184944152832, 4.977147579193115]
Number of cpus: 96  Number of subproblems: 2
Reassign each subproblems with number of thread: 48
Starting MIP solver for these labels: [2, 4]
start creating model mps for candidates: ['lay/16_2', 'lay/16_4']
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.mps
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=4_26494646.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=4_26494646.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 230493 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 230496 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.32897114753723
Verifying property 0 with 1 instances.
##### Instance 55 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.977148532867432.

Properties batch 1, size 1
Remaining timeout: 198.0972867012024
Verifying property 1 with 1 instances.
##### Instance 55 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.297185897827148.

Properties batch 2, size 1
Remaining timeout: 197.98516511917114
Verifying property 2 with 1 instances.
##### Instance 55 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.12782096862793.

Properties batch 3, size 1
Remaining timeout: 197.8878140449524
Verifying property 3 with 1 instances.
##### Instance 55 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.7917368412017822.

Properties batch 4, size 1
Remaining timeout: 197.78919768333435
Verifying property 4 with 1 instances.
##### Instance 55 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.1319692134857178.

Properties batch 5, size 1
Remaining timeout: 197.679838180542
Verifying property 5 with 1 instances.
##### Instance 55 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.5476176738739014.

Properties batch 6, size 1
Remaining timeout: 197.58343720436096
Verifying property 6 with 1 instances.
##### Instance 55 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.2790881395339966.

Properties batch 7, size 1
Remaining timeout: 197.48546957969666
Verifying property 7 with 1 instances.
##### Instance 55 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.38319314]], device='cuda:0') need to verify.
Model prediction is: tensor([ -8.89316845, -11.06601906,  -5.14806175,  -6.90553761,  -5.56315517,
         -7.37682629,  -4.56512213,  -8.62777042, -10.82919407, -11.60672951],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.38319314]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 553
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 283
Node /15 input 0: size torch.Size([100]) unstable 20
-----------------
# of unstable neurons: 856
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0006282329559326172
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0536    transfer 0.0001    finalize 0.0001    func 0.0540    
Accumulated time: func 0.0540    prepare 0.0002    bound 0.0536    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 65] 
split level 1: [/input-12, 58] 
split level 2: [/input-12, 35] 
split level 3: [/input-12, 60] 
split level 4: [/input-12, 41] 
split level 5: [/input-12, 11] 
split level 6: [/input-12, 46] 
split level 7: [/input-12, 32] 
split level 8: [/input-8, 626] 
split level 9: [/input-8, 180] 
split level 10: [/input-8, 1019] 
split level 11: [/input-8, 565] 
split level 12: [/input-8, 162] 
split level 13: [/input-8, 1002] 
split level 14: [/input-8, 942] 
split level 15: [/input-8, 290] 
split level 16: [/input-8, 933] 
split level 17: [/input-8, 924] 
split level 18: [/input-8, 1436] 
split level 19: [/input-8, 1018] 
split level 20: [/input-8, 84] 
split level 21: [/input-8, 485] 
split level 22: [/input-8, 1428] 
split level 23: [/input-8, 1020] 
split level 24: [/input-12, 40] 
split level 25: [/input-8, 2043] 
split level 26: [/input-8, 1131] 
split level 27: [/input, 361] 
split level 28: [/input-8, 981] 
split level 29: [/input-8, 841] 
split level 30: [/input-8, 477] 
split level 31: [/input-8, 1420] 
split level 32: [/input-8, 1001] 
split level 33: [/input-8, 147] 
split level 34: [/input-8, 1325] 
split level 35: [/input-8, 486] 
split level 36: [/input-8, 1756] 
split level 37: [/input-8, 923] 
split level 38: [/input-8, 1012] 
split level 39: [/input-8, 1444] 
split level 40: [/input-8, 795] 
split level 41: [/input-8, 2004] 
split level 42: [/input-8, 1588] 
split level 43: [/input, 346] 
split level 44: [/input-8, 1454] 
split level 45: [/input-8, 2036] 
split level 46: [/input-8, 2037] 
split level 47: [/input-8, 1141] 
split level 48: [/input-8, 1589] 
split level 49: [/input-8, 2044] 
split level 50: [/input-8, 1418] 
split level 51: [/input, 1509] 
split level 52: [/input-8, 1828] 
split level 53: [/input-8, 1149] 
split level 54: [/input-8, 1419] 
split level 55: [/input-8, 77] 
split level 56: [/input-8, 1014] 
split level 57: [/input-8, 937] 
split level 58: [/input-8, 972] 
split level 59: [/input, 391] 
split level 60: [/input, 470] 
split level 61: [/input-8, 105] 
split level 62: [/input-8, 920] 
split level 63: [/input-8, 1250] 
split level 64: [/input-8, 2003] 
split level 65: [/input-8, 1490] 
split level 66: [/input-8, 989] 
split level 67: [/input-8, 1562] 
split level 68: [/input-8, 1421] 
split level 69: [/input, 1754] 
split level 70: [/input-8, 1337] 
split level 71: [/input-8, 445] 
split level 72: [/input-8, 2016] 
split level 73: [/input, 330] 
split level 74: [/input-8, 480] 
split level 75: [/input, 359] 
split level 76: [/input, 422] 
split level 77: [/input, 424] 
split level 78: [/input-8, 2013] 
split level 79: [/input-8, 2038] 
split level 80: [/input-8, 1582] 
split level 81: [/input-8, 1292] 
split level 82: [/input, 2170] 
split level 83: [/input-8, 1386] 
split level 84: [/input-8, 976] 
split level 85: [/input, 423] 
split level 86: [/input, 209] 
split level 87: [/input-8, 426] 
split level 88: [/input-8, 963] 
split level 89: [/input-8, 2030] 
split level 90: [/input-8, 585] 
split level 91: [/input, 438] 
split level 92: [/input-8, 432] 
split level 93: [/input-8, 2045] 
split level 94: [/input-8, 2035] 
split level 95: [/input-8, 2008] 
split level 96: [/input, 1400] 
split level 97: [/input-8, 1291] 
split level 98: [/input, 1740] 
split level 99: [/input-8, 2022] 
split level 100: [/input, 2153] 
split level 101: [/input-8, 2042] 
split level 102: [/input-8, 984] 
split level 103: [/input-8, 465] 
split level 104: [/input, 1429] 
split level 105: [/input-8, 442] 
split level 106: [/input-8, 1821] 
split level 107: [/input-8, 76] 
split level 108: [/input, 394] 
split level 109: [/input-8, 1755] 
split level 110: [/input-8, 481] 
split level 111: [/input-8, 113] 
split level 112: [/input-8, 2034] 
split level 113: [/input, 315] 
split level 114: [/input, 1773] 
split level 115: [/input-8, 1449] 
split level 116: [/input-8, 878] 
split level 117: [/input, 485] 
split level 118: [/input-8, 877] 
split level 119: [/input, 3495] 
split level 120: [/input-8, 1458] 
split level 121: [/input-8, 1563] 
split level 122: [/input, 3558] 
split level 123: [/input-8, 2002] 
split level 124: [/input, 343] 
split level 125: [/input-8, 167] 
split level 126: [/input-8, 1022] 
split level 127: [/input-8, 945] 
split level 128: [/input, 2171] 
split level 129: [/input, 465] 
split level 130: [/input-8, 281] 
split level 131: [/input-8, 67] 
split level 132: [/input, 3544] 
split level 133: [/input-8, 1028] 
split level 134: [/input-8, 2000] 
split level 135: [/input-8, 1902] 
split level 136: [/input-8, 803] 
split level 137: [/input-8, 2032] 
split level 138: [/input, 2151] 
split level 139: [/input, 299] 
split level 140: [/input-8, 962] 
split level 141: [/input, 1724] 
split level 142: [/input-8, 2040] 
split level 143: [/input-8, 964] 
split level 144: [/input, 1175] 
split level 145: [/input-8, 1422] 
split level 146: [/input, 2269] 
split level 147: [/input-8, 2033] 
split level 148: [/input-8, 1590] 
split level 149: [/input, 1498] 
split level 150: [/input-8, 1992] 
split level 151: [/input-8, 1560] 
split level 152: [/input, 2267] 
split level 153: [/input, 2164] 
split level 154: [/input, 1926] 
split level 155: [/input-8, 1865] 
split level 156: [/input, 1942] 
split level 157: [/input, 1948] 
split level 158: [/input, 4016] 
split level 159: [/input-8, 1996] 
split level 160: [/input-8, 1982] 
split level 161: [/input, 2251] 
split level 162: [/input-8, 953] 
split level 163: [/input, 471] 
split level 164: [/input, 1354] 
split level 165: [/input, 1622] 
split level 166: [/input, 363] 
split level 167: [/input-8, 493] 
split level 168: [/input, 2984] 
split level 169: [/input, 1448] 
split level 170: [/input, 1830] 
split level 171: [/input-8, 969] 
split level 172: [/input-8, 1340] 
split level 173: [/input-8, 2026] 
split level 174: [/input, 3404] 
split level 175: [/input, 1946] 
split level 176: [/input, 2152] 
split level 177: [/input-8, 2041] 
split level 178: [/input, 3505] 
split level 179: [/input-8, 1903] 
split level 180: [/input, 3467] 
split level 181: [/input-8, 1838] 
split level 182: [/input, 4030] 
split level 183: [/input, 1725] 
split level 184: [/input-8, 2012] 
split level 185: [/input-8, 1823] 
split level 186: [/input, 1530] 
split level 187: [/input-8, 559] 
split level 188: [/input, 3067] 
split level 189: [/input, 1833] 
split level 190: [/input, 1815] 
split level 191: [/input-8, 910] 
split level 192: [/input, 4034] 
split level 193: [/input, 1589] 
split level 194: [/input-8, 1998] 
split level 195: [/input, 1829] 
split level 196: [/input, 3016] 
split level 197: [/input-8, 893] 
split level 198: [/input, 175] 
split level 199: [/input, 498] 
Time: prepare 0.0059    bound 0.0934    transfer 0.0058    finalize 0.0037    func 0.1089    
Accumulated time: func 0.1629    prepare 0.0157    bound 0.1470    transfer 0.0059    finalize 0.0038    
all_split False
======================Cut inference begins======================
max lb tensor(0.15635967) min lb tensor(-0.38312018)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.012087106704711914 
BICCOS Cumulative time: 0.012087106704711914
Preprocessing time: 0.010997533798217773 Inference time: 7.915496826171875e-05 Add cuts time: 4.744529724121094e-05 Cut analysis time: 0.0009629726409912109
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.36773 (1), -0.36715 (1), -0.36705 (1), -0.36630 (1), -0.36560 (1), -0.36534 (1), -0.36499 (1), -0.36475 (1), -0.36463 (1), -0.36353 (1), -0.36287 (1), -0.36187 (1), -0.36178 (1), -0.36076 (1), -0.36016 (1), -0.35992 (1), -0.35953 (1), -0.35886 (1), -0.35878 (1), -0.35667 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5083    set_bounds 0.0102    solve 0.1090    add 0.2068    
Accumulated time: pickout 0.0004    decision 0.5083    set_bounds 0.0102    solve 0.1090    add 0.2068    
Current (lb-rhs): -0.36772775650024414
50 domains visited
Cumulative time: 0.9281163215637207

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 65] [/input-12, 65] [/input-12, 65] [/input-12, 65] [/input-12, 65] [/input-12, 65] [/input-12, 65] [/input-12, 65] [/input-12, 65] 
split level 1: [/input-12, 41] [/input-12, 35] [/input-12, 58] [/input-12, 58] [/input-12, 35] [/input-12, 35] [/input-12, 58] [/input-12, 58] [/input-12, 35] [/input-12, 58] 
split level 2: [/input-12, 35] [/input-12, 41] [/input-12, 41] [/input-12, 35] [/input-12, 41] [/input-12, 41] [/input-12, 35] [/input-12, 41] [/input-12, 41] [/input-12, 35] 
split level 3: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 41] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3216733932495117
10 lb beta sum: 0.25073081254959106, worst -0.3176082372665405
Time: prepare 0.0072    bound 0.1204    transfer 0.0012    finalize 0.0036    func 0.1353    
Accumulated time: func 0.2982    prepare 0.0232    bound 0.2674    transfer 0.0071    finalize 0.0075    
all_split False
======================Cut inference begins======================
max lb tensor(0.29134911) min lb tensor(-0.31754839)
Number of Verified Splits: 62 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.01892995834350586 
BICCOS Cumulative time: 0.031017065048217773
Preprocessing time: 0.013660192489624023 Inference time: 0.0027017593383789062 Add cuts time: 0.0016624927520751953 Cut analysis time: 0.0009055137634277344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19127 (2), -0.18729 (2), -0.18686 (2), -0.18637 (2), -0.18479 (2), -0.18405 (2), -0.18373 (2), -0.18360 (2), -0.18347 (2), -0.18235 (2), -0.18174 (2), -0.18107 (2), -0.18097 (2), -0.18077 (2), -0.18063 (2), -0.17991 (2), -0.17561 (2), -0.17544 (2), -0.17525 (2), -0.17510 (2), 
Length of domains: 50
Time: pickout 0.0080    decision 0.0199    set_bounds 0.0126    solve 0.1354    add 0.2838    
Accumulated time: pickout 0.0084    decision 0.5281    set_bounds 0.0229    solve 0.2444    add 0.4906    
Current (lb-rhs): -0.19126588106155396
100 domains visited
Cumulative time: 1.4140021800994873

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 65] [/input-12, 65] [/input-12, 65] [/input-12, 65] [/input-12, 65] [/input-12, 65] [/input-12, 65] [/input-12, 58] [/input-12, 65] [/input-12, 65] 
split level 1: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 35] [/input-12, 58] [/input-12, 58] 
split level 2: [/input-12, 41] [/input-12, 35] [/input-12, 35] [/input-12, 41] [/input-12, 35] [/input-12, 35] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 60] 
split level 3: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 41] [/input-12, 41] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19126582145690918
10 lb beta sum: 0.3193984031677246, worst -0.1408521831035614
Time: prepare 0.0066    bound 0.1187    transfer 0.0011    finalize 0.0023    func 0.1316    
Accumulated time: func 0.4297    prepare 0.0301    bound 0.3861    transfer 0.0083    finalize 0.0098    
all_split False
======================Cut inference begins======================
max lb tensor(0.20326185) min lb tensor(-0.14054888)
Number of Verified Splits: 178 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=4_26494646.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0019
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 5
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.027816295623779297 
BICCOS Cumulative time: 0.05883336067199707
Preprocessing time: 0.01281428337097168 Inference time: 0.010168075561523438 Add cuts time: 0.0026106834411621094 Cut analysis time: 0.0022232532501220703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04013 (3), -0.04003 (3), -0.03999 (3), -0.03996 (3), -0.03978 (3), -0.03470 (3), -0.03218 (3), -0.03132 (3), -0.02859 (3), -0.02743 (3), -0.02718 (3), -0.02485 (3), -0.02461 (3), -0.02407 (3), -0.01983 (3), -0.01973 (3), -0.01969 (3), -0.01956 (3), -0.01815 (3), -0.01691 (3), 
Length of domains: 50
Time: pickout 0.0077    decision 0.0206    set_bounds 0.0175    solve 0.1317    add 0.2409    
Accumulated time: pickout 0.0161    decision 0.5487    set_bounds 0.0403    solve 0.3761    add 0.7315    
Current (lb-rhs): -0.040133655071258545
150 domains visited
Cumulative time: 1.8672456741333008

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 65] [/input-12, 65] [/input-12, 65] [/input-12, 65] [/input-12, 65] [/input-12, 65] 
split level 1: [/input-12, 65] [/input-12, 65] [/input-12, 65] [/input-12, 65] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 2: [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
split level 3: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 46] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09393644332885742

all verified at 8th iter
Time: prepare 0.0069    bound 0.0630    transfer 0.0011    finalize 0.0022    func 0.0761    
Accumulated time: func 0.5058    prepare 0.0373    bound 0.4492    transfer 0.0094    finalize 0.0120    
all_split False
======================Cut inference begins======================
max lb tensor(0.38031948) min lb tensor(0.00675058)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=4_26494646.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 18
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.04412722587585449 
BICCOS Cumulative time: 0.10296058654785156
Preprocessing time: 0.013487577438354492 Inference time: 0.020473480224609375 Add cuts time: 0.008516073226928711 Cut analysis time: 0.001650094985961914
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0079    decision 0.0200    set_bounds 0.0175    solve 0.0762    add 0.0248    
Accumulated time: pickout 0.0240    decision 0.5687    set_bounds 0.0578    solve 0.4523    add 0.7563    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 41, 11, 65]), tensor([-1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([3.30031720e+32, 1.37871310e-01, 1.11946329e-01, 1.96143910e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 41, 11, 65]), tensor([-1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.30031720e+32, 1.37871310e-01, 1.11946329e-01, 6.66711628e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 41, 11]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([3.30031720e+32, 1.37871310e-01, 1.10070333e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 41, 65]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([3.30031720e+32, 1.23416796e-01, 2.29276821e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 41, 65]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([3.30031720e+32, 1.23416796e-01, 5.09713739e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 41, 11, 65]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([3.30031720e+32, 1.37299165e-01, 1.12938628e-01, 1.85589239e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 41, 11, 65]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.30031720e+32, 1.37299165e-01, 1.12938628e-01, 6.51287660e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 41, 11, 65]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.30031720e+32, 1.37299165e-01, 1.10150918e-01, 1.81904778e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 41, 11, 65]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.30031720e+32, 1.37299165e-01, 1.10150918e-01, 6.48301691e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 41, 11, 58]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([3.30031720e+32, 1.24968305e-01, 1.14510193e-01, 1.69931635e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 41, 11, 58]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.30031720e+32, 1.24968305e-01, 1.14510193e-01, 6.40756190e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 41, 11, 65]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.30031720e+32, 1.24968305e-01, 1.18082836e-01, 1.63704917e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 41, 11, 65]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([3.30031720e+32, 1.24968305e-01, 1.18082836e-01, 6.37522489e-02]), tensor([0, 1, 2, 3]))}
Shallow branching resets to n domains:  13
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13486868143081665
10 lb beta sum: 1.3188955783843994, worst -0.04898726940155029
Time: prepare 0.0005    bound 0.1361    transfer 0.0002    finalize 0.0003    func 0.1371    
Accumulated time: func 0.6429    prepare 0.0378    bound 0.5853    transfer 0.0096    finalize 0.0123    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 60] 
split level 2: [/input-12, 11] 
split level 3: [/input-12, 46] 
split level 4: [/input-12, 32] 
split level 5: [/input-8, 84] 
split level 6: [/input-8, 924] 
split level 7: [/input-8, 933] 
cut re-enabled after branching node selection
0 lb beta sum: 1.5157806873321533, worst 0.036141037940979004

all verified at 0th iter
Time: prepare 0.0113    bound 0.0053    transfer 0.0008    finalize 0.0014    func 0.0204    
Accumulated time: func 0.6633    prepare 0.0495    bound 0.5906    transfer 0.0104    finalize 0.0136    
all_split False
======================Cut inference begins======================
max lb tensor(1.12425458) min lb tensor(0.03614104)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=4_26494646.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
Total number of valid cuts: 23.
#cuts 1-3: 18
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.008722066879272461 
BICCOS Cumulative time: 0.11168265342712402
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0005    decision 0.0219    set_bounds 0.0261    solve 0.0204    add 0.0001    
Accumulated time: pickout 0.0245    decision 0.5907    set_bounds 0.0839    solve 0.4727    add 0.7563    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
Cumulative time: 2.4070611000061035

found process to kill: terminal indx = 4
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=4_26494646.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=4_26494646.log

Properties batch 8, size 1
Remaining timeout: 194.89534950256348
Verifying property 8 with 1 instances.
##### Instance 55 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.40548539]], device='cuda:0') need to verify.
Model prediction is: tensor([ -8.89316845, -11.06601906,  -5.14806175,  -6.90553761,  -5.56315517,
         -7.37682629,  -4.56512213,  -8.62777042, -10.82919407, -11.60672951],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.40548539]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 553
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 283
Node /15 input 0: size torch.Size([100]) unstable 20
-----------------
# of unstable neurons: 856
-----------------

======================Cut verification begins======================
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
Cut time: 0.0008392333984375
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0493    transfer 0.0001    finalize 0.0001    func 0.0497    
Accumulated time: func 0.0497    prepare 0.0002    bound 0.0493    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 60] 
split level 1: [/input-12, 11] 
split level 2: [/input-12, 58] 
split level 3: [/input-12, 65] 
split level 4: [/input-12, 35] 
split level 5: [/input-8, 1894] 
split level 6: [/input-8, 626] 
split level 7: [/input-8, 1337] 
split level 8: [/input-8, 565] 
split level 9: [/input-8, 1370] 
split level 10: [/input-8, 1902] 
split level 11: [/input-8, 1563] 
split level 12: [/input-8, 1828] 
split level 13: [/input-8, 1371] 
split level 14: [/input-8, 1019] 
split level 15: [/input-8, 147] 
split level 16: [/input-8, 1386] 
split level 17: [/input-8, 1018] 
split level 18: [/input-8, 1436] 
split level 19: [/input-8, 1562] 
split level 20: [/input-8, 1564] 
split level 21: [/input-8, 1020] 
split level 22: [/input-8, 942] 
split level 23: [/input-8, 841] 
split level 24: [/input-8, 77] 
split level 25: [/input-8, 1292] 
split level 26: [/input-8, 933] 
split level 27: [/input-8, 650] 
split level 28: [/input-8, 1339] 
split level 29: [/input-8, 1903] 
split level 30: [/input-8, 485] 
split level 31: [/input-8, 1420] 
split level 32: [/input-8, 1428] 
split level 33: [/input-8, 1042] 
split level 34: [/input-8, 180] 
split level 35: [/input-8, 1340] 
split level 36: [/input-8, 84] 
split level 37: [/input-8, 1402] 
split level 38: [/input-8, 890] 
split level 39: [/input-8, 2004] 
split level 40: [/input-8, 1444] 
split level 41: [/input-8, 1821] 
split level 42: [/input-8, 2013] 
split level 43: [/input-8, 1131] 
split level 44: [/input-8, 105] 
split level 45: [/input-8, 162] 
split level 46: [/input-8, 1001] 
split level 47: [/input-8, 893] 
split level 48: [/input-8, 1291] 
split level 49: [/input-8, 795] 
split level 50: [/input-8, 1588] 
split level 51: [/input-8, 1404] 
split level 52: [/input-8, 981] 
split level 53: [/input-8, 989] 
split level 54: [/input-8, 924] 
split level 55: [/input-8, 1421] 
split level 56: [/input-8, 1886] 
split level 57: [/input-8, 1589] 
split level 58: [/input-8, 1149] 
split level 59: [/input-8, 937] 
split level 60: [/input-8, 1868] 
split level 61: [/input-8, 1422] 
split level 62: [/input-8, 1002] 
split level 63: [/input-8, 923] 
split level 64: [/input-8, 984] 
split level 65: [/input, 1675] 
split level 66: [/input-8, 76] 
split level 67: [/input-8, 573] 
split level 68: [/input-8, 2037] 
split level 69: [/input, 2732] 
split level 70: [/input-8, 878] 
split level 71: [/input-8, 1876] 
split level 72: [/input-8, 1022] 
split level 73: [/input, 1724] 
split level 74: [/input, 1942] 
split level 75: [/input, 1926] 
split level 76: [/input-8, 486] 
split level 77: [/input-8, 976] 
split level 78: [/input-8, 1811] 
split level 79: [/input-8, 803] 
split level 80: [/input-8, 1325] 
split level 81: [/input-8, 290] 
split level 82: [/input-8, 1590] 
split level 83: [/input-8, 1449] 
split level 84: [/input-8, 1582] 
split level 85: [/input-8, 1916] 
split level 86: [/input-8, 67] 
split level 87: [/input-8, 1012] 
split level 88: [/input-8, 1141] 
split level 89: [/input, 3416] 
split level 90: [/input-8, 1092] 
split level 91: [/input-8, 972] 
split level 92: [/input-8, 2038] 
split level 93: [/input-8, 432] 
split level 94: [/input, 2492] 
split level 95: [/input-8, 1419] 
split level 96: [/input-8, 1755] 
split level 97: [/input-8, 1014] 
split level 98: [/input-8, 1458] 
split level 99: [/input-8, 2030] 
split level 100: [/input, 1740] 
split level 101: [/input-8, 953] 
split level 102: [/input-8, 1960] 
split level 103: [/input-8, 1788] 
split level 104: [/input, 1400] 
split level 105: [/input, 1773] 
split level 106: [/input-8, 1764] 
split level 107: [/input, 359] 
split level 108: [/input-8, 113] 
split level 109: [/input-8, 945] 
split level 110: [/input, 2170] 
split level 111: [/input-8, 2045] 
split level 112: [/input, 2733] 
split level 113: [/input-8, 877] 
split level 114: [/input-8, 559] 
split level 115: [/input-8, 1982] 
split level 116: [/input-8, 1869] 
split level 117: [/input, 209] 
split level 118: [/input-8, 2008] 
split level 119: [/input-8, 167] 
split level 120: [/input-8, 1784] 
split level 121: [/input, 2153] 
split level 122: [/input, 1948] 
split level 123: [/input, 1946] 
split level 124: [/input, 3558] 
split level 125: [/input-8, 910] 
split level 126: [/input-8, 2044] 
split level 127: [/input-8, 2022] 
split level 128: [/input, 1622] 
split level 129: [/input-8, 1996] 
split level 130: [/input-8, 1906] 
split level 131: [/input, 1725] 
split level 132: [/input-8, 2012] 
split level 133: [/input, 2745] 
split level 134: [/input, 1606] 
split level 135: [/input, 3380] 
split level 136: [/input, 4044] 
split level 137: [/input, 470] 
split level 138: [/input, 2616] 
split level 139: [/input, 2995] 
split level 140: [/input, 1238] 
split level 141: [/input, 4045] 
split level 142: [/input-8, 1838] 
split level 143: [/input, 3779] 
split level 144: [/input-8, 1786] 
split level 145: [/input-8, 118] 
split level 146: [/input, 4048] 
split level 147: [/input, 2788] 
split level 148: [/input-8, 1035] 
split level 149: [/input-8, 393] 
split level 150: [/input-8, 1595] 
split level 151: [/input, 3016] 
split level 152: [/input-8, 1998] 
split level 153: [/input-8, 1547] 
split level 154: [/input, 3763] 
split level 155: [/input, 2286] 
split level 156: [/input-8, 1992] 
split level 157: [/input, 1577] 
split level 158: [/input-8, 1418] 
split level 159: [/input, 2989] 
split level 160: [/input-8, 1552] 
split level 161: [/input, 2151] 
split level 162: [/input, 485] 
split level 163: [/input, 1830] 
split level 164: [/input-8, 1093] 
split level 165: [/input-8, 1560] 
split level 166: [/input, 2302] 
split level 167: [/input-8, 477] 
split level 168: [/input, 3780] 
split level 169: [/input-8, 1753] 
split level 170: [/input, 1530] 
split level 171: [/input, 3608] 
split level 172: [/input, 4043] 
split level 173: [/input, 3764] 
split level 174: [/input, 1578] 
split level 175: [/input, 1589] 
split level 176: [/input, 2908] 
split level 177: [/input, 1925] 
split level 178: [/input, 465] 
split level 179: [/input-8, 1776] 
split level 180: [/input, 3677] 
split level 181: [/input, 2842] 
split level 182: [/input-8, 1877] 
split level 183: [/input, 1833] 
split level 184: [/input, 1816] 
split level 185: [/input, 498] 
split level 186: [/input, 2925] 
split level 187: [/input, 3600] 
split level 188: [/input, 4034] 
split level 189: [/input, 2825] 
split level 190: [/input, 3610] 
split level 191: [/input, 1719] 
split level 192: [/input, 2834] 
split level 193: [/input, 1648] 
split level 194: [/input, 1570] 
split level 195: [/input, 1829] 
split level 196: [/input, 1815] 
split level 197: [/input, 3601] 
split level 198: [/input, 3693] 
split level 199: [/input, 4016] 
Time: prepare 0.0058    bound 0.0918    transfer 0.0012    finalize 0.0026    func 0.1014    
Accumulated time: func 0.1511    prepare 0.0160    bound 0.1411    transfer 0.0013    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(-0.13681173) min lb tensor(-0.40541804)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.01122426986694336 
BICCOS Cumulative time: 0.01122426986694336
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.39308 (1), -0.39294 (1), -0.39272 (1), -0.39245 (1), -0.39200 (1), -0.39192 (1), -0.39170 (1), -0.39119 (1), -0.39084 (1), -0.39037 (1), -0.38998 (1), -0.38977 (1), -0.38922 (1), -0.38900 (1), -0.38843 (1), -0.38783 (1), -0.38305 (1), -0.38249 (1), -0.38196 (1), -0.38162 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5248    set_bounds 0.0085    solve 0.1015    add 0.1882    
Accumulated time: pickout 0.0003    decision 0.5248    set_bounds 0.0085    solve 0.1015    add 0.1882    
Current (lb-rhs): -0.3930778503417969
50 domains visited
Cumulative time: 0.9076414108276367

Shallow-BaB round 2
batch: 50
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 11] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
split level 1: [/input-12, 11] [/input-12, 35] [/input-12, 11] [/input-12, 58] [/input-12, 58] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 2: [/input-12, 35] [/input-8, 1563] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 3: [/input-8, 812] [/input-8, 1902] [/input-8, 1563] [/input-8, 1902] [/input-8, 1902] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
Time: prepare 0.0071    bound 0.0912    transfer 0.0011    finalize 0.0021    func 0.1017    
Accumulated time: func 0.2529    prepare 0.0233    bound 0.2323    transfer 0.0024    finalize 0.0049    
all_split False
======================Cut inference begins======================
max lb tensor(0.08059669) min lb tensor(-0.38437527)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0014
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.013805627822875977 
BICCOS Cumulative time: 0.025029897689819336
Preprocessing time: 0.011968851089477539 Inference time: 0.0001285076141357422 Add cuts time: 6.031990051269531e-05 Cut analysis time: 0.00164794921875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10451 (2), -0.10401 (2), -0.10218 (2), -0.10157 (2), -0.10156 (2), -0.10108 (2), -0.10046 (2), -0.09948 (2), -0.09885 (2), -0.09738 (2), -0.09704 (2), -0.09685 (2), -0.09643 (2), -0.09639 (2), -0.09634 (2), -0.09587 (2), -0.09500 (2), -0.09342 (2), -0.09308 (2), -0.09307 (2), 
Length of domains: 50
Time: pickout 0.0078    decision 0.0193    set_bounds 0.0117    solve 0.1018    add 0.1968    
Accumulated time: pickout 0.0081    decision 0.5441    set_bounds 0.0202    solve 0.2033    add 0.3851    
Current (lb-rhs): -0.10451078414916992
100 domains visited
Cumulative time: 1.265932559967041

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 11] [/input-12, 58] [/input-12, 58] [/input-12, 11] [/input-12, 60] [/input-12, 58] [/input-12, 60] 
split level 1: [/input-12, 35] [/input-12, 35] [/input-12, 11] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 11] 
split level 2: [/input-8, 650] [/input-8, 650] [/input-12, 35] [/input-8, 1563] [/input-8, 1563] [/input-8, 1563] [/input-8, 1563] [/input-8, 1902] [/input-8, 1902] [/input-12, 35] 
split level 3: [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 812] [/input-8, 1563] [/input-8, 812] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09654569625854492
10 lb beta sum: 0.1514928936958313, worst -0.10402929782867432
Time: prepare 0.0075    bound 0.1161    transfer 0.0012    finalize 0.0022    func 0.1296    
Accumulated time: func 0.3825    prepare 0.0311    bound 0.3485    transfer 0.0036    finalize 0.0071    
all_split False
======================Cut inference begins======================
max lb tensor(0.41009045) min lb tensor(-0.08283055)
Number of Verified Splits: 154 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 35
#cuts >= 20: 0
BICCOS time: 0.023740291595458984 
BICCOS Cumulative time: 0.04877018928527832
Preprocessing time: 0.0120086669921875 Inference time: 0.00676417350769043 Add cuts time: 0.0033295154571533203 Cut analysis time: 0.0016379356384277344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05495 (3), -0.05454 (3), -0.05433 (3), -0.05272 (3), -0.05203 (3), -0.05152 (3), -0.05076 (3), -0.05005 (3), -0.04726 (3), -0.04697 (3), -0.04666 (3), -0.04593 (3), -0.04226 (3), -0.04213 (3), -0.04127 (3), -0.03596 (3), -0.03197 (3), -0.02993 (3), -0.02793 (3), -0.02765 (3), 
Length of domains: 50
Time: pickout 0.0078    decision 0.0191    set_bounds 0.0155    solve 0.1297    add 0.2199    
Accumulated time: pickout 0.0159    decision 0.5633    set_bounds 0.0356    solve 0.3330    add 0.6050    
Current (lb-rhs): -0.05494797229766846
150 domains visited
Cumulative time: 1.6887857913970947

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 58] [/input-12, 58] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
split level 1: [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-8, 1902] [/input-8, 1902] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 2: [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1563] [/input-8, 1563] [/input-8, 650] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] 
split level 3: [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05274844169616699
10 lb beta sum: 0.6744557023048401, worst -0.0835203155875206
Time: prepare 0.0078    bound 0.1326    transfer 0.0012    finalize 0.0023    func 0.1470    
Accumulated time: func 0.5295    prepare 0.0391    bound 0.4811    transfer 0.0048    finalize 0.0093    
all_split False
======================Cut inference begins======================
max lb tensor(0.35750341) min lb tensor(-0.03637075)
Number of Verified Splits: 276 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.033428192138671875 
BICCOS Cumulative time: 0.0821983814239502
Preprocessing time: 0.011894702911376953 Inference time: 0.012653350830078125 Add cuts time: 0.007856607437133789 Cut analysis time: 0.0010235309600830078
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0077    decision 0.0194    set_bounds 0.0147    solve 0.1471    add 0.0231    
Accumulated time: pickout 0.0236    decision 0.5826    set_bounds 0.0503    solve 0.4801    add 0.6281    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 60]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.01365314e-13, 2.39851344e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 60, 58]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.01365314e-13, 2.70437747e-01, 6.72466010e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 60, 58]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([1.01365314e-13, 2.70437747e-01, 2.55405176e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 58, 35, 60]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([1.01365314e-13, 2.57663190e-01, 4.24402207e-02, 2.40269601e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 58, 35, 60]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.01365314e-13, 2.57663190e-01, 4.24402207e-02, 1.55166194e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 58, 35, 60]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.01365314e-13, 2.57663190e-01, 4.89922017e-02, 1.83852185e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 58, 35, 60]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.01365314e-13, 2.57663190e-01, 4.89922017e-02, 1.56114385e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 58]), tensor([1., 1.]), tensor([0, 0]), tensor([1.01365314e-13, 9.16026719e-03]), tensor([0, 1]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.31500667333602905
10 lb beta sum: 0.2803649604320526, worst -0.28980159759521484
Time: prepare 0.0004    bound 0.1117    transfer 0.0002    finalize 0.0002    func 0.1125    
Accumulated time: func 0.6421    prepare 0.0395    bound 0.5928    transfer 0.0050    finalize 0.0095    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-8, 1902] [/input-8, 1902] [/input-12, 60] 
split level 1: [/input-12, 65] [/input-8, 1404] [/input-8, 1404] [/input-12, 65] 
split level 2: [/input-12, 35] [/input-8, 1340] [/input-8, 1340] [/input-12, 35] 
split level 3: [/input-8, 1902] [/input-8, 650] [/input-8, 650] [/input-8, 1902] 
split level 4: [/input-8, 1563] [/input-8, 1877] [/input-8, 1877] [/input-8, 1563] 
split level 5: [/input-8, 1371] [/input-8, 812] [/input-8, 812] [/input-8, 1903] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23732657730579376, worst -0.23657190799713135
10 lb beta sum: 0.23732657730579376, worst -0.23600804805755615
Time: prepare 0.0111    bound 0.1137    transfer 0.0008    finalize 0.0015    func 0.1293    
Accumulated time: func 0.7714    prepare 0.0509    bound 0.7065    transfer 0.0057    finalize 0.0110    
all_split False
======================Cut inference begins======================
max lb tensor(0.30407459) min lb tensor(-0.23580933)
Number of Verified Splits: 192 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.23732659220695496, worst -0.34237509965896606
10 lb beta sum: 0.37811383605003357, worst -0.12403611838817596
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.24593639373779297 
BICCOS Cumulative time: 0.32813477516174316
Preprocessing time: 0.007202625274658203 Inference time: 0.23540997505187988 Add cuts time: 0.0023190975189208984 Cut analysis time: 0.0010046958923339844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23581 (6), -0.23473 (6), -0.23197 (6), -0.23101 (6), -0.23087 (6), -0.23030 (6), -0.22717 (6), -0.22644 (6), -0.22340 (6), -0.22320 (6), -0.22213 (6), -0.22209 (6), -0.22178 (6), -0.21989 (6), -0.21956 (6), -0.21934 (6), -0.21904 (6), -0.21832 (6), -0.21790 (6), -0.21690 (6), 
Length of domains: 64
Time: pickout 0.0006    decision 0.0174    set_bounds 0.0178    solve 0.1294    add 0.0700    
Accumulated time: pickout 0.0242    decision 0.6000    set_bounds 0.0681    solve 0.6096    add 0.6981    
Current (lb-rhs): -0.235809326171875
214 domains visited
Cumulative time: 2.6130824089050293

BaB round 2
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1371] [/input-8, 147] [/input-8, 1371] [/input-8, 1370] [/input-8, 147] [/input-8, 147] [/input-8, 1371] [/input-8, 1370] [/input-8, 1371] [/input-8, 147] 
split level 1: [/input-8, 924] [/input-8, 924] [/input-8, 1020] [/input-8, 933] [/input-8, 923] [/input-8, 924] [/input-8, 1020] [/input-8, 933] [/input-8, 924] [/input-8, 924] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23732657730579376, worst -0.22546494007110596
10 lb beta sum: 0.23732657730579376, worst -0.22522908449172974
Time: prepare 0.0111    bound 0.1139    transfer 0.0008    finalize 0.1182    func 0.2457    
Accumulated time: func 1.0171    prepare 0.0623    bound 0.8204    transfer 0.0065    finalize 0.1291    
all_split False
======================Cut inference begins======================
max lb tensor(0.02943273) min lb tensor(-0.22509593)
Number of Verified Splits: 75 of 256
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0015
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.017650604248046875 
BICCOS Cumulative time: 0.34578537940979004
Preprocessing time: 0.008330106735229492 Inference time: 0.006862163543701172 Add cuts time: 0.0006282329559326172 Cut analysis time: 0.0018301010131835938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22510 (8), -0.22394 (8), -0.22126 (8), -0.22042 (8), -0.22004 (8), -0.21959 (8), -0.21819 (8), -0.21749 (8), -0.21657 (8), -0.21569 (8), -0.21432 (8), -0.21421 (8), -0.21359 (8), -0.21351 (8), -0.21348 (8), -0.21325 (8), -0.21314 (8), -0.21270 (8), -0.21238 (8), -0.21155 (8), 
Length of domains: 181
Time: pickout 0.0141    decision 0.0143    set_bounds 0.0123    solve 0.2458    add 0.0776    
Accumulated time: pickout 0.0383    decision 0.6143    set_bounds 0.0804    solve 0.8554    add 0.7757    
Current (lb-rhs): -0.2250959277153015
395 domains visited
Cumulative time: 3.0022685527801514

BaB round 3
batch: 181
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1370] [/input-8, 1436] [/input-8, 1370] [/input-8, 650] [/input-8, 1370] [/input-8, 1436] [/input-8, 1370] [/input-8, 650] [/input-8, 1370] [/input-8, 1436] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22115719318389893
10 lb beta sum: 0.0019854651764035225, worst -0.22105807065963745
Time: prepare 0.0073    bound 0.1368    transfer 0.0012    finalize 0.0023    func 0.1500    
Accumulated time: func 1.1671    prepare 0.0698    bound 0.9572    transfer 0.0077    finalize 0.1315    
all_split False
======================Cut inference begins======================
max lb tensor(0.02990260) min lb tensor(-0.22101933)
Number of Verified Splits: 89 of 362
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0015
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.021426916122436523 
BICCOS Cumulative time: 0.36721229553222656
Preprocessing time: 0.010997772216796875 Inference time: 0.008063077926635742 Add cuts time: 0.0006632804870605469 Cut analysis time: 0.0017027854919433594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22102 (9), -0.22017 (9), -0.21725 (9), -0.21637 (9), -0.21622 (9), -0.21583 (9), -0.21411 (9), -0.21372 (9), -0.21260 (9), -0.21189 (9), -0.21045 (9), -0.21031 (9), -0.20992 (9), -0.20979 (9), -0.20946 (9), -0.20938 (9), -0.20872 (9), -0.20856 (9), -0.20850 (9), -0.20753 (9), 
Length of domains: 273
Time: pickout 0.0161    decision 0.0219    set_bounds 0.0158    solve 0.1502    add 0.0824    
Accumulated time: pickout 0.0543    decision 0.6362    set_bounds 0.0963    solve 1.0055    add 0.8581    
Current (lb-rhs): -0.22101932764053345
668 domains visited
Cumulative time: 3.3180184364318848

BaB round 4
batch: 273
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 933] [/input-8, 1020] [/input-8, 933] [/input-8, 1436] [/input-8, 1436] [/input-8, 933] [/input-8, 933] [/input-8, 1436] [/input-8, 1436] [/input-8, 1020] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2171282172203064
10 lb beta sum: 0.0061432793736457825, worst -0.21710169315338135
Time: prepare 0.0106    bound 0.1241    transfer 0.0063    finalize 0.0025    func 0.1471    
Accumulated time: func 1.3143    prepare 0.0806    bound 1.0813    transfer 0.0140    finalize 0.1340    
all_split False
======================Cut inference begins======================
max lb tensor(0.00906837) min lb tensor(-0.21708804)
Number of Verified Splits: 22 of 546
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0016
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.020638465881347656 
BICCOS Cumulative time: 0.3878507614135742
Preprocessing time: 0.01633596420288086 Inference time: 0.0021626949310302734 Add cuts time: 0.0002474784851074219 Cut analysis time: 0.0018923282623291016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21709 (10), -0.21315 (10), -0.21285 (10), -0.21243 (10), -0.21157 (10), -0.21016 (10), -0.20918 (10), -0.20879 (10), -0.20820 (10), -0.20768 (10), -0.20723 (10), -0.20670 (10), -0.20597 (10), -0.20584 (10), -0.20562 (10), -0.20551 (10), -0.20512 (10), -0.20479 (10), -0.20452 (10), -0.20361 (10), 
Length of domains: 524
Time: pickout 0.0167    decision 0.0259    set_bounds 0.0242    solve 0.1473    add 0.1241    
Accumulated time: pickout 0.0711    decision 0.6621    set_bounds 0.1204    solve 1.1528    add 0.9821    
Current (lb-rhs): -0.21708804368972778
1192 domains visited
Cumulative time: 3.6876211166381836

BaB round 5
batch: 524
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1436] [/input-8, 650] [/input-8, 1436] [/input-8, 1020] [/input-8, 933] [/input-8, 650] [/input-8, 1436] [/input-8, 933] [/input-8, 933] [/input-8, 650] 
cut re-enabled after branching node selection
0 lb beta sum: 0.005376463755965233, worst -0.2101418375968933
10 lb beta sum: 0.005376463755965233, worst -0.21012216806411743
Time: prepare 0.0454    bound 0.1310    transfer 0.0087    finalize 0.0062    func 0.1982    
Accumulated time: func 1.5125    prepare 0.1262    bound 1.2123    transfer 0.0227    finalize 0.1401    
all_split False
======================Cut inference begins======================
max lb tensor(0.03199860) min lb tensor(-0.21011227)
Number of Verified Splits: 23 of 1048
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.03765439987182617 
BICCOS Cumulative time: 0.4255051612854004
Preprocessing time: 0.0341038703918457 Inference time: 0.002223491668701172 Add cuts time: 0.00019049644470214844 Cut analysis time: 0.0011365413665771484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21011 (11), -0.20930 (11), -0.20843 (11), -0.20750 (11), -0.20583 (11), -0.20544 (11), -0.20492 (11), -0.20483 (11), -0.20422 (11), -0.20378 (11), -0.20316 (11), -0.20316 (11), -0.20313 (11), -0.20284 (11), -0.20150 (11), -0.20116 (11), -0.20105 (11), -0.20046 (11), -0.19958 (11), -0.19892 (11), 
Length of domains: 1025
Time: pickout 0.0743    decision 0.0444    set_bounds 0.0470    solve 0.1986    add 0.1010    
Accumulated time: pickout 0.1454    decision 0.7066    set_bounds 0.1674    solve 1.3514    add 1.0832    
Current (lb-rhs): -0.21011227369308472
2217 domains visited
Cumulative time: 4.1986799240112305

BaB round 6
batch: 1025
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1018] [/input-8, 1903] [/input-8, 1018] [/input-8, 1903] [/input-8, 1018] [/input-8, 1020] [/input-8, 1018] [/input-8, 1020] [/input-8, 1018] [/input-8, 1903] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00023153812799137086, worst -0.20811450481414795
10 lb beta sum: 0.00023153812799137086, worst -0.20810842514038086
Time: prepare 0.0905    bound 0.1512    transfer 0.0101    finalize 0.0105    func 0.2760    
Accumulated time: func 1.7885    prepare 0.2170    bound 1.3635    transfer 0.0329    finalize 0.1507    
all_split False
======================Cut inference begins======================
max lb tensor(0.00986816) min lb tensor(-0.20809901)
Number of Verified Splits: 2 of 2050
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0016
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.0687861442565918 
BICCOS Cumulative time: 0.4942913055419922
Preprocessing time: 0.06667041778564453 Inference time: 0.0002875328063964844 Add cuts time: 0.00014972686767578125 Cut analysis time: 0.001678466796875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20810 (12), -0.20715 (12), -0.20642 (12), -0.20536 (12), -0.20381 (12), -0.20341 (12), -0.20277 (12), -0.20268 (12), -0.20218 (12), -0.20176 (12), -0.20101 (12), -0.20100 (12), -0.20095 (12), -0.20048 (12), -0.19928 (12), -0.19914 (12), -0.19868 (12), -0.19830 (12), -0.19754 (12), -0.19676 (12), 
Length of domains: 2048
Time: pickout 0.0320    decision 0.0701    set_bounds 0.0886    solve 0.2765    add 0.1390    
Accumulated time: pickout 0.1774    decision 0.7766    set_bounds 0.2561    solve 1.6279    add 1.2221    
Current (lb-rhs): -0.20809900760650635
4265 domains visited
Cumulative time: 4.882375001907349

BaB round 7
batch: 2048
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1340] [/input-8, 1292] [/input-8, 650] [/input-8, 1340] [/input-8, 1340] [/input-8, 1292] [/input-8, 650] [/input-8, 1131] [/input-8, 1340] [/input-8, 1292] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20146995782852173
10 lb beta sum: 0.0, worst -0.20146745443344116
Time: prepare 0.1824    bound 0.2327    transfer 0.0243    finalize 0.0214    func 0.4877    
Accumulated time: func 2.2762    prepare 0.3997    bound 1.5962    transfer 0.0571    finalize 0.1721    
all_split False
======================Cut inference begins======================
max lb tensor(-0.10681802) min lb tensor(-0.20145601)
Number of Verified Splits: 0 of 4096
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0020
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.13770675659179688 
BICCOS Cumulative time: 0.6319980621337891
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20146 (13), -0.20053 (13), -0.19978 (13), -0.19952 (13), -0.19874 (13), -0.19855 (13), -0.19784 (13), -0.19718 (13), -0.19677 (13), -0.19676 (13), -0.19615 (13), -0.19607 (13), -0.19554 (13), -0.19524 (13), -0.19512 (13), -0.19484 (13), -0.19439 (13), -0.19438 (13), -0.19424 (13), -0.19417 (13), 
Length of domains: 4096
Time: pickout 0.1090    decision 0.2861    set_bounds 0.1782    solve 0.4886    add 0.1413    
Accumulated time: pickout 0.2864    decision 1.0627    set_bounds 0.4342    solve 2.1165    add 1.3635    
Current (lb-rhs): -0.2014560103416443
8361 domains visited
Cumulative time: 6.234011888504028

BaB round 8
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 650] [/input-8, 84] [/input-8, 1340] [/input-8, 1018] [/input-8, 650] [/input-8, 84] [/input-8, 1340] [/input-8, 1340] [/input-8, 650] [/input-8, 84] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19638830423355103
10 lb beta sum: 0.0, worst -0.1963602900505066
Time: prepare 0.3737    bound 0.3975    transfer 0.0495    finalize 0.0408    func 1.0721    
Accumulated time: func 3.3483    prepare 0.7736    bound 1.9938    transfer 0.1067    finalize 0.2129    
all_split False
======================Cut inference begins======================
max lb tensor(-0.07737350) min lb tensor(-0.19635439)
Number of Verified Splits: 0 of 8192
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0040
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.2745187282562256 
BICCOS Cumulative time: 0.9065167903900146
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19635 (14), -0.19501 (14), -0.19469 (14), -0.19440 (14), -0.19424 (14), -0.19321 (14), -0.19306 (14), -0.19303 (14), -0.19273 (14), -0.19253 (14), -0.19230 (14), -0.19204 (14), -0.19167 (14), -0.19125 (14), -0.19123 (14), -0.19106 (14), -0.19062 (14), -0.19057 (14), -0.19057 (14), -0.19047 (14), 
Length of domains: 8192
Time: pickout 0.0430    decision 0.3779    set_bounds 0.3674    solve 1.0740    add 0.1537    
Accumulated time: pickout 0.3294    decision 1.4406    set_bounds 0.8016    solve 3.1905    add 1.5172    
Current (lb-rhs): -0.19635438919067383
16553 domains visited
current_vram/total_varm: 9.6GB/99.9GB, batch_size increase to 8192
Cumulative time: 8.539398431777954

BaB round 9
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 795] [/input-8, 1291] [/input-8, 795] [/input-8, 1292] [/input-8, 795] [/input-8, 1291] [/input-8, 795] [/input-8, 1018] [/input-8, 795] [/input-8, 1291] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1911594271659851
10 lb beta sum: 0.0, worst -0.19114768505096436
Time: prepare 0.7312    bound 0.7376    transfer 0.0969    finalize 0.0959    func 1.7705    
Accumulated time: func 5.1188    prepare 1.5052    bound 2.7314    transfer 0.2036    finalize 0.3089    
all_split False
======================Cut inference begins======================
max lb tensor(-0.06412268) min lb tensor(-0.19113660)
Number of Verified Splits: 0 of 16384
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts: total 327 constraints, 28682 nonzero elements
cuts preparing time: 0.2664
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 330.
#cuts 1-3: 46
#cuts 7-9: 1
#cuts 10-12: 3
#cuts 13-15: 6
#cuts 16-18: 13
#cuts 19-21: 11
#cuts >= 20: 250
BICCOS time: 1.0446696281433105 
BICCOS Cumulative time: 1.9511864185333252
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19114 (15), -0.18983 (15), -0.18960 (15), -0.18947 (15), -0.18918 (15), -0.18895 (15), -0.18818 (15), -0.18788 (15), -0.18783 (15), -0.18761 (15), -0.18755 (15), -0.18752 (15), -0.18744 (15), -0.18744 (15), -0.18720 (15), -0.18699 (15), -0.18698 (15), -0.18646 (15), -0.18622 (15), -0.18585 (15), 
Length of domains: 16384
Time: pickout 0.0835    decision 0.4633    set_bounds 1.0979    solve 1.7732    add 0.2758    
Accumulated time: pickout 0.4129    decision 1.9039    set_bounds 1.8995    solve 4.9637    add 1.7930    
Current (lb-rhs): -0.19113659858703613
32937 domains visited
current_vram/total_varm: 18.5GB/99.9GB, batch_size increase to 16384
Cumulative time: 13.299298763275146

BaB round 10
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1131] [/input-8, 1018] [/input-8, 1131] [/input-8, 989] [/input-8, 1131] [/input-8, 1018] [/input-8, 1131] [/input-8, 1292] [/input-8, 1131] [/input-8, 1018] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18859165906906128
10 lb beta sum: 3.3500471115112305, worst -0.15162603557109833
Time: prepare 0.6660    bound 4.6354    transfer 0.1918    finalize 0.4376    func 6.1439    
Accumulated time: func 11.2627    prepare 2.1716    bound 7.3668    transfer 0.3954    finalize 0.7464    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02036540) min lb tensor(-0.14379627)
Number of Verified Splits: 0 of 32768
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts: total 553 constraints, 45518 nonzero elements
cuts preparing time: 0.3604
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 556.
#cuts 1-3: 73
#cuts 7-9: 1
#cuts 10-12: 6
#cuts 13-15: 8
#cuts 16-18: 21
#cuts 19-21: 24
#cuts >= 20: 423
BICCOS time: 1.722287893295288 
BICCOS Cumulative time: 3.6734743118286133
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14380 (16), -0.14352 (16), -0.14272 (16), -0.14250 (16), -0.14235 (16), -0.14204 (16), -0.14125 (16), -0.14095 (16), -0.14068 (16), -0.14053 (16), -0.14012 (16), -0.14005 (16), -0.13999 (16), -0.13981 (16), -0.13974 (16), -0.13962 (16), -0.13961 (16), -0.13959 (16), -0.13955 (16), -0.13926 (16), 
Length of domains: 32768
Time: pickout 0.1712    decision 1.9134    set_bounds 1.8049    solve 6.1488    add 0.4231    
Accumulated time: pickout 0.5841    decision 3.8173    set_bounds 3.7044    solve 11.1125    add 2.2161    
Current (lb-rhs): -0.14379626512527466
65705 domains visited
Cumulative time: 25.541826009750366

BaB round 11
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1291] [/input-8, 1340] [/input-8, 1886] [/input-8, 893] [/input-8, 1291] [/input-8, 1340] [/input-8, 1886] [/input-8, 989] [/input-8, 1291] [/input-8, 1340] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18306124210357666
10 lb beta sum: 4.5858354568481445, worst -0.1398715376853943
Time: prepare 1.0309    bound 6.0102    transfer 0.1992    finalize 0.2013    func 7.6565    
Accumulated time: func 18.9192    prepare 3.2028    bound 13.3769    transfer 0.5946    finalize 0.9478    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00629587) min lb tensor(-0.13103719)
Number of Verified Splits: 0 of 32768
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts: total 682 constraints, 49658 nonzero elements
cuts preparing time: 0.5092
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 685.
#cuts 1-3: 111
#cuts 7-9: 1
#cuts 10-12: 6
#cuts 13-15: 13
#cuts 16-18: 29
#cuts 19-21: 33
#cuts >= 20: 492
BICCOS time: 1.924619197845459 
BICCOS Cumulative time: 5.598093509674072
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14380 (16), -0.14352 (16), -0.14272 (16), -0.14250 (16), -0.14235 (16), -0.14204 (16), -0.14095 (16), -0.14068 (16), -0.14053 (16), -0.14005 (16), -0.13999 (16), -0.13981 (16), -0.13974 (16), -0.13962 (16), -0.13955 (16), -0.13888 (16), -0.13845 (16), -0.13829 (16), -0.13824 (16), -0.13822 (16), 
Length of domains: 49152
Time: pickout 0.2182    decision 1.6503    set_bounds 1.9021    solve 7.6620    add 0.7303    
Accumulated time: pickout 0.8023    decision 5.4675    set_bounds 5.6065    solve 18.7744    add 2.9465    
Current (lb-rhs): -0.14379626512527466
98473 domains visited
Cumulative time: 39.704381227493286

BaB round 12
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1291] [/input-8, 893] [/input-8, 1886] [/input-8, 893] [/input-8, 1291] [/input-8, 893] [/input-8, 1886] [/input-8, 989] [/input-8, 1291] [/input-8, 893] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18594151735305786
10 lb beta sum: 4.831437587738037, worst -0.145987868309021
Time: prepare 0.6852    bound 6.7483    transfer 0.1995    finalize 0.1874    func 8.0326    
Accumulated time: func 26.9518    prepare 3.8884    bound 20.1252    transfer 0.7941    finalize 1.1352    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00292487) min lb tensor(-0.13874286)
Number of Verified Splits: 0 of 32768
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts: total 737 constraints, 55515 nonzero elements
cuts preparing time: 0.0562
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 740.
#cuts 1-3: 138
#cuts 7-9: 2
#cuts 10-12: 8
#cuts 13-15: 13
#cuts 16-18: 36
#cuts 19-21: 32
#cuts >= 20: 511
BICCOS time: 1.5055887699127197 
BICCOS Cumulative time: 7.103682279586792
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13874 (17), -0.13499 (17), -0.13408 (17), -0.13370 (17), -0.13366 (17), -0.13331 (17), -0.13312 (17), -0.13298 (17), -0.13216 (17), -0.13188 (17), -0.13188 (17), -0.13172 (17), -0.13167 (17), -0.13166 (17), -0.13155 (17), -0.13131 (17), -0.13104 (17), -0.13076 (17), -0.13074 (17), -0.13066 (17), 
Length of domains: 65536
Time: pickout 0.2095    decision 1.6474    set_bounds 2.0436    solve 8.5826    add 0.3357    
Accumulated time: pickout 1.0118    decision 7.1149    set_bounds 7.6501    solve 27.3570    add 3.2822    
Current (lb-rhs): -0.1387428641319275
131241 domains visited
Cumulative time: 54.09159302711487

BaB round 13
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1292] [/input-8, 893] [/input-8, 893] [/input-8, 84] [/input-8, 1292] [/input-8, 893] [/input-8, 893] [/input-8, 893] [/input-8, 1292] [/input-8, 893] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17323726415634155
10 lb beta sum: 4.94975471496582, worst -0.13827677071094513
Time: prepare 0.6906    bound 7.0301    transfer 0.1954    finalize 0.2045    func 8.9588    
Accumulated time: func 35.9106    prepare 4.5794    bound 27.1553    transfer 0.9895    finalize 1.3397    
all_split False
======================Cut inference begins======================
max lb tensor(0.00766955) min lb tensor(-0.12259282)
Number of Verified Splits: 33 of 32768
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts: total 805 constraints, 64112 nonzero elements
cuts preparing time: 0.0438
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 812.
#cuts 1-3: 139
#cuts 4-6: 2
#cuts 7-9: 4
#cuts 10-12: 9
#cuts 13-15: 15
#cuts 16-18: 42
#cuts 19-21: 35
#cuts >= 20: 566
BICCOS time: 1.5937426090240479 
BICCOS Cumulative time: 8.69742488861084
Preprocessing time: 1.0205707550048828 Inference time: 0.023511886596679688 Add cuts time: 0.0010080337524414062 Cut analysis time: 0.548651933670044
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13874 (17), -0.13499 (17), -0.13408 (17), -0.13370 (17), -0.13366 (17), -0.13331 (17), -0.13312 (17), -0.13298 (17), -0.13216 (17), -0.13188 (17), -0.13188 (17), -0.13172 (17), -0.13167 (17), -0.13166 (17), -0.13155 (17), -0.13131 (17), -0.13104 (17), -0.13076 (17), -0.13074 (17), -0.13066 (17), 
Length of domains: 81887
Time: pickout 0.2201    decision 1.6417    set_bounds 2.0559    solve 8.9639    add 16.0597    
Accumulated time: pickout 1.2319    decision 8.7566    set_bounds 9.7060    solve 36.3209    add 19.3419    
Current (lb-rhs): -0.1387428641319275
163976 domains visited
Cumulative time: 84.7069718837738

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1292] [/input-8, 893] [/input-8, 893] [/input-8, 84] [/input-8, 1292] [/input-8, 893] [/input-8, 893] [/input-8, 795] [/input-8, 1292] [/input-8, 893] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.179981529712677
10 lb beta sum: 5.258738040924072, worst -0.1420341581106186
Time: prepare 0.6974    bound 7.4735    transfer 0.1978    finalize 0.2091    func 8.7915    
Accumulated time: func 44.7021    prepare 5.2772    bound 34.6288    transfer 1.1873    finalize 1.5488    
all_split False
======================Cut inference begins======================
max lb tensor(0.00457069) min lb tensor(-0.12581700)
Number of Verified Splits: 36 of 32768
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts: total 838 constraints, 87000 nonzero elements
cuts preparing time: 0.0531
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 848.
#cuts 1-3: 140
#cuts 4-6: 3
#cuts 7-9: 7
#cuts 10-12: 10
#cuts 13-15: 27
#cuts 16-18: 47
#cuts 19-21: 41
#cuts >= 20: 573
BICCOS time: 1.7868964672088623 
BICCOS Cumulative time: 10.484321355819702
Preprocessing time: 1.0226914882659912 Inference time: 0.006151437759399414 Add cuts time: 0.02219700813293457 Cut analysis time: 0.7358565330505371
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13874 (17), -0.13499 (17), -0.13408 (17), -0.13370 (17), -0.13366 (17), -0.13331 (17), -0.13312 (17), -0.13298 (17), -0.13216 (17), -0.13188 (17), -0.13188 (17), -0.13172 (17), -0.13167 (17), -0.13166 (17), -0.13155 (17), -0.13131 (17), -0.13076 (17), -0.13040 (17), -0.13038 (17), -0.13025 (17), 
Length of domains: 98235
Time: pickout 0.2164    decision 1.6663    set_bounds 2.1919    solve 9.5817    add 0.2825    
Accumulated time: pickout 1.4484    decision 10.4229    set_bounds 11.8979    solve 45.9026    add 19.6245    
Current (lb-rhs): -0.1387428641319275
196708 domains visited
Cumulative time: 100.5107159614563

BaB round 15
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1292] [/input-8, 1340] [/input-8, 893] [/input-8, 84] [/input-8, 1292] [/input-8, 1131] [/input-8, 893] [/input-8, 893] [/input-8, 1292] [/input-8, 1340] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18274390697479248
10 lb beta sum: 5.974607467651367, worst -0.13612541556358337
Time: prepare 0.6935    bound 7.6328    transfer 0.1943    finalize 0.2382    func 8.9715    
Accumulated time: func 53.6736    prepare 5.9712    bound 42.2616    transfer 1.3817    finalize 1.7870    
all_split False
======================Cut inference begins======================
max lb tensor(0.01104417) min lb tensor(-0.12092353)
Number of Verified Splits: 93 of 32768
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts: total 958 constraints, 92952 nonzero elements
cuts preparing time: 0.9881
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 970.
#cuts 1-3: 139
#cuts 4-6: 3
#cuts 7-9: 10
#cuts 10-12: 14
#cuts 13-15: 32
#cuts 16-18: 60
#cuts 19-21: 46
#cuts >= 20: 666
BICCOS time: 2.842656135559082 
BICCOS Cumulative time: 13.326977491378784
Preprocessing time: 1.0694432258605957 Inference time: 0.03418278694152832 Add cuts time: 0.0019495487213134766 Cut analysis time: 1.7370805740356445
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13331 (17), -0.13188 (17), -0.13188 (17), -0.13076 (17), -0.13025 (17), -0.13021 (17), -0.12970 (17), -0.12923 (17), -0.12904 (17), -0.12875 (17), -0.12866 (17), -0.12793 (17), -0.12791 (17), -0.12787 (17), -0.12785 (17), -0.12783 (17), -0.12780 (17), -0.12772 (17), -0.12726 (17), -0.12726 (17), 
Length of domains: 114526
Time: pickout 0.2375    decision 1.6725    set_bounds 2.4351    solve 8.9774    add 0.3122    
Accumulated time: pickout 1.6859    decision 12.0954    set_bounds 14.3330    solve 54.8800    add 19.9367    
Current (lb-rhs): -0.13331212103366852
229383 domains visited
Cumulative time: 117.11801600456238

BaB round 16
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1292] [/input-8, 1131] [/input-8, 893] [/input-8, 84] [/input-8, 1292] [/input-8, 1131] [/input-8, 893] [/input-8, 893] [/input-8, 1292] [/input-8, 1131] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1798599362373352
10 lb beta sum: 6.0454301834106445, worst -0.13708731532096863
Time: prepare 0.6899    bound 8.3752    transfer 0.2042    finalize 0.2385    func 10.7620    
Accumulated time: func 64.4356    prepare 6.6616    bound 50.6368    transfer 1.5858    finalize 2.0255    
all_split False
======================Cut inference begins======================
max lb tensor(0.01168904) min lb tensor(-0.11431947)
Number of Verified Splits: 105 of 32768
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts: total 1013 constraints, 97371 nonzero elements
cuts preparing time: 0.0595
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1029.
#cuts 1-3: 138
#cuts 4-6: 6
#cuts 7-9: 13
#cuts 10-12: 16
#cuts 13-15: 44
#cuts 16-18: 70
#cuts 19-21: 58
#cuts >= 20: 684
BICCOS time: 1.8985469341278076 
BICCOS Cumulative time: 15.225524425506592
Preprocessing time: 1.0319066047668457 Inference time: 0.03767991065979004 Add cuts time: 0.002051115036010742 Cut analysis time: 0.8269093036651611
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12582 (18), -0.12515 (18), -0.12504 (18), -0.12454 (18), -0.12433 (18), -0.12339 (18), -0.12292 (18), -0.12291 (18), -0.12285 (18), -0.12265 (18), -0.12259 (18), -0.12257 (18), -0.12255 (18), -0.12254 (18), -0.12225 (18), -0.12223 (18), -0.12213 (18), -0.12202 (18), -0.12163 (18), -0.12128 (18), 
Length of domains: 130805
Time: pickout 0.2346    decision 1.6781    set_bounds 1.6446    solve 10.7664    add 0.3661    
Accumulated time: pickout 1.9205    decision 13.7735    set_bounds 15.9775    solve 65.6464    add 20.3028    
Current (lb-rhs): -0.12581700086593628
262046 domains visited
Cumulative time: 133.82060861587524

BaB round 17
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 84] [/input-8, 485] [/input-8, 924] [/input-8, 1131] [/input-8, 84] [/input-8, 485] [/input-8, 924] [/input-8, 84] [/input-8, 84] [/input-8, 485] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1667863428592682
10 lb beta sum: 6.1714043617248535, worst -0.1365627944469452
Time: prepare 0.6809    bound 8.8563    transfer 0.2443    finalize 0.2299    func 10.2237    
Accumulated time: func 74.6593    prepare 7.3429    bound 59.4931    transfer 1.8301    finalize 2.2554    
all_split False
======================Cut inference begins======================
max lb tensor(0.01358846) min lb tensor(-0.10434524)
Number of Verified Splits: 162 of 32768
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts: total 1067 constraints, 98152 nonzero elements
cuts preparing time: 0.0611
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1088.
#cuts 1-3: 137
#cuts 4-6: 5
#cuts 7-9: 21
#cuts 10-12: 18
#cuts 13-15: 53
#cuts 16-18: 81
#cuts 19-21: 65
#cuts >= 20: 708
BICCOS time: 1.9632461071014404 
BICCOS Cumulative time: 17.188770532608032
Preprocessing time: 1.0761668682098389 Inference time: 0.04741501808166504 Add cuts time: 0.004065990447998047 Cut analysis time: 0.8355982303619385
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12582 (18), -0.12515 (18), -0.12504 (18), -0.12454 (18), -0.12433 (18), -0.12339 (18), -0.12292 (18), -0.12291 (18), -0.12285 (18), -0.12265 (18), -0.12259 (18), -0.12257 (18), -0.12255 (18), -0.12254 (18), -0.12225 (18), -0.12223 (18), -0.12213 (18), -0.12202 (18), -0.12128 (18), -0.12114 (18), 
Length of domains: 147027
Time: pickout 0.2329    decision 1.6713    set_bounds 2.7664    solve 10.2292    add 0.3102    
Accumulated time: pickout 2.1534    decision 15.4447    set_bounds 18.7440    solve 75.8756    add 20.6129    
Current (lb-rhs): -0.12581700086593628
294652 domains visited
Cumulative time: 151.10371685028076

BaB round 18
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 84] [/input-8, 485] [/input-8, 924] [/input-8, 1131] [/input-8, 84] [/input-8, 485] [/input-8, 924] [/input-8, 84] [/input-8, 84] [/input-8, 485] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17134439945220947
10 lb beta sum: 6.0711870193481445, worst -0.13124990463256836
Time: prepare 0.6917    bound 9.0464    transfer 0.2710    finalize 0.2338    func 10.4587    
Accumulated time: func 85.1180    prepare 8.0350    bound 68.5395    transfer 2.1011    finalize 2.4891    
all_split False
======================Cut inference begins======================
max lb tensor(0.01664038) min lb tensor(-0.10856375)
Number of Verified Splits: 584 of 32768
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts: total 1079 constraints, 98088 nonzero elements
cuts preparing time: 0.0392
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1107.
#cuts 1-3: 136
#cuts 4-6: 8
#cuts 7-9: 23
#cuts 10-12: 17
#cuts 13-15: 53
#cuts 16-18: 87
#cuts 19-21: 65
#cuts >= 20: 718
BICCOS time: 2.032672643661499 
BICCOS Cumulative time: 19.22144317626953
Preprocessing time: 1.0706205368041992 Inference time: 0.13670802116394043 Add cuts time: 0.010191917419433594 Cut analysis time: 0.8151521682739258
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12582 (18), -0.12515 (18), -0.12504 (18), -0.12454 (18), -0.12433 (18), -0.12339 (18), -0.12292 (18), -0.12291 (18), -0.12285 (18), -0.12265 (18), -0.12257 (18), -0.12255 (18), -0.12225 (18), -0.12213 (18), -0.12202 (18), -0.12128 (18), -0.12114 (18), -0.12105 (18), -0.12092 (18), -0.12076 (18), 
Length of domains: 162827
Time: pickout 0.2307    decision 1.6802    set_bounds 2.8138    solve 10.4634    add 0.3310    
Accumulated time: pickout 2.3840    decision 17.1249    set_bounds 21.5578    solve 86.3390    add 20.9439    
Current (lb-rhs): -0.12581700086593628
326836 domains visited
Cumulative time: 168.76625037193298

BaB round 19
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1340] [/input-8, 924] [/input-8, 893] [/input-8, 84] [/input-8, 989] [/input-8, 924] [/input-8, 1340] [/input-8, 84] [/input-8, 1340] [/input-8, 1868] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17358410358428955
10 lb beta sum: 6.094024658203125, worst -0.13369999825954437
Time: prepare 0.7083    bound 9.1997    transfer 0.2975    finalize 0.2394    func 10.6580    
Accumulated time: func 95.7760    prepare 8.7438    bound 77.7392    transfer 2.3986    finalize 2.7286    
all_split False
======================Cut inference begins======================
max lb tensor(0.01814474) min lb tensor(-0.10922001)
Number of Verified Splits: 413 of 32768
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts: total 1122 constraints, 99301 nonzero elements
cuts preparing time: 0.0411
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1145.
#cuts 1-3: 136
#cuts 4-6: 4
#cuts 7-9: 23
#cuts 10-12: 18
#cuts 13-15: 55
#cuts 16-18: 97
#cuts 19-21: 73
#cuts >= 20: 739
BICCOS time: 2.009413242340088 
BICCOS Cumulative time: 21.23085641860962
Preprocessing time: 1.0716276168823242 Inference time: 0.08761811256408691 Add cuts time: 0.024763107299804688 Cut analysis time: 0.8254044055938721
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12582 (18), -0.12515 (18), -0.12504 (18), -0.12433 (18), -0.12292 (18), -0.12285 (18), -0.12265 (18), -0.12255 (18), -0.12225 (18), -0.12213 (18), -0.12202 (18), -0.12092 (18), -0.12076 (18), -0.11994 (18), -0.11977 (18), -0.11973 (18), -0.11969 (18), -0.11959 (18), -0.11951 (18), -0.11947 (18), 
Length of domains: 178798
Time: pickout 0.2406    decision 2.8092    set_bounds 1.6521    solve 10.6645    add 0.2670    
Accumulated time: pickout 2.6246    decision 19.9341    set_bounds 23.2099    solve 97.0036    add 21.2110    
Current (lb-rhs): -0.12581700086593628
359191 domains visited
Cumulative time: 186.56943678855896

BaB round 20
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1868] [/input-8, 1131] [/input-8, 84] [/input-8, 1340] [/input-8, 1868] [/input-8, 893] [/input-8, 1131] [/input-8, 485] [/input-8, 924] [/input-8, 84] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1776113510131836
10 lb beta sum: 6.1172261238098145, worst -0.13245831429958344
Time: prepare 0.6979    bound 9.3669    transfer 0.3280    finalize 0.2489    func 10.8559    
Accumulated time: func 106.6319    prepare 9.4421    bound 87.1061    transfer 2.7265    finalize 2.9775    
all_split False
======================Cut inference begins======================
max lb tensor(0.01785296) min lb tensor(-0.11082335)
Number of Verified Splits: 478 of 32768
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts: total 1123 constraints, 99098 nonzero elements
cuts preparing time: 0.0611
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1149.
#cuts 1-3: 136
#cuts 4-6: 5
#cuts 7-9: 25
#cuts 10-12: 18
#cuts 13-15: 62
#cuts 16-18: 103
#cuts 19-21: 72
#cuts >= 20: 728
BICCOS time: 2.031416893005371 
BICCOS Cumulative time: 23.26227331161499
Preprocessing time: 1.0727782249450684 Inference time: 0.09957194328308105 Add cuts time: 0.007826805114746094 Cut analysis time: 0.8512399196624756
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12092 (18), -0.11901 (18), -0.11891 (18), -0.11747 (18), -0.11520 (18), -0.11474 (18), -0.11470 (18), -0.11456 (18), -0.11443 (18), -0.11432 (18), -0.11419 (18), -0.11403 (18), -0.11400 (18), -0.11387 (18), -0.11350 (18), -0.11349 (18), -0.11347 (18), -0.11345 (18), -0.11328 (18), -0.11290 (18), 
Length of domains: 194704
Time: pickout 0.2418    decision 3.0545    set_bounds 1.6948    solve 10.8611    add 0.3865    
Accumulated time: pickout 2.8665    decision 22.9886    set_bounds 24.9047    solve 107.8646    add 21.5975    
Current (lb-rhs): -0.12092353403568268
391481 domains visited
Time out!!!!!!!!
found process to kill: terminal indx = 2
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.cuts
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.indx
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=55_spec=2_26494646.log
found process to kill: terminal indx = 4
found process for pidx=2
kill process for pidx=2
found process for pidx=4
Result: unknown in 212.1398 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 56, vnnlib ID: 56 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.88202381, -15.77611637, -13.39399529, -17.09332085, -13.82697010,
         -18.11546516, -17.38292885, -15.74606514,  -9.08050442, -14.54284763]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [579]; unstable size 579; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 579] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 579] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 579] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 191] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.80924940,  2.66314483,  6.04740000,  2.98685741,  6.92152977,
          6.10498953,  4.46677589, -1.73226333,  3.55088139]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.88202381, -15.77611637, -13.39399529, -17.09332085, -13.82697010,
         -18.11546516, -17.38292885, -15.74606514,  -9.08050442, -14.54284763]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.88202381, -15.77611637, -13.39399529, -17.09332085, -13.82697010,
          -18.11546516, -17.38292885, -15.74606514,  -9.08050442, -14.54284763]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.80151939]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.24920666e+00,  1.67777801e+00,  1.32857168e+00,  ...,
             2.80952454e-01,  1.06349289e-01, -5.23808524e-02],
           [ 9.79365110e-01,  1.39206374e+00,  1.24920666e+00,  ...,
            -1.95237994e-01, -1.79364979e-01, -1.31745934e-01],
           [ 1.28095269e+00,  1.39206374e+00,  9.15873051e-01,  ...,
            -2.06348225e-02,  1.11112073e-02,  2.17460394e-01],
           ...,
           [-4.96825397e-01, -4.80952382e-01, -4.33333218e-01,  ...,
            -4.80952382e-01, -4.96825397e-01, -4.96825397e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.80952382e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.96825397e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01]],

          [[ 1.91626441e+00,  2.06119204e+00,  1.70692456e+00,  ...,
             1.27214205e+00,  1.15942061e+00,  1.06280196e+00],
           [ 1.72302771e+00,  1.88405824e+00,  1.83574903e+00,  ...,
             1.07890511e+00,  1.06280196e+00,  1.04669893e+00],
           [ 1.94847047e+00,  1.91626441e+00,  1.69082153e+00,  ...,
             1.19162667e+00,  1.20772982e+00,  1.30434811e+00],
           ...,
           [-3.22059989e-02, -4.83090580e-02, -3.22059989e-02,  ...,
            -6.44121096e-02, -8.05151686e-02, -8.05151686e-02],
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -3.22059989e-02],
           [-6.44121096e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -1.61029361e-02]],

          [[ 2.10045004e+00,  2.08545780e+00,  1.81559265e+00,  ...,
             1.84557760e+00,  1.80060017e+00,  1.74063015e+00],
           [ 1.96551764e+00,  1.92054021e+00,  1.96551764e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.81559265e+00],
           [ 2.08545780e+00,  1.96551764e+00,  1.96551764e+00,  ...,
             1.95052516e+00,  1.95052516e+00,  1.96551764e+00],
           ...,
           [ 2.11394474e-01,  1.21439442e-01,  1.81409463e-01,  ...,
             2.11394474e-01,  2.11394474e-01,  2.11394474e-01],
           [ 2.26386964e-01,  1.51424453e-01,  1.81409463e-01,  ...,
             2.26386964e-01,  2.26386964e-01,  2.41379470e-01],
           [ 1.81409463e-01,  1.66416958e-01,  1.96401969e-01,  ...,
             1.96401969e-01,  2.11394474e-01,  2.26386964e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0491 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 57, vnnlib ID: 57 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.99673080, -8.42243385, -3.26751232, -2.50442123, -3.13881588,
         -2.46149969, -4.81901884, -3.50631714, -8.64563560, -7.38313150]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [561]; unstable size 561; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 561] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 561] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 561] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 249] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.82033324,  4.02014875, -0.46752262, -0.34412283, -0.36842299,
          1.16381502, -0.08054876,  4.18153334,  2.90686488]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.99673080, -8.42243385, -3.26751232, -2.50442123, -3.13881588,
         -2.46149969, -4.81901884, -3.50631714, -8.64563560, -7.38313150]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.70134592, -8.23771763, -3.13766503, -2.45283818, -3.00211191,
          -2.61360407, -4.50399113, -3.52637243, -8.28448200, -7.23547888],
         [-6.70134592, -8.23771763, -3.13766503, -2.45283818, -3.00211191,
          -2.61360407, -4.50399113, -3.52637243, -8.28448200, -7.23547888]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.52406096, -0.16076589,  0.38850784,  0.91276836]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0166 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0841 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 58, vnnlib ID: 58 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.83774090, -5.62437820, -5.73738670, -5.16293812, -7.36110210,
         -6.22037792, -5.42629576, -7.85859919, -5.66585159, -6.29455137]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [486]; unstable size 486; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 486] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 486] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 486] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 197] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.56799030, -1.02534294, -0.31647953,  1.51819468,  0.67600739,
         -0.32146615,  2.05102563, -1.13650227, -0.20026422]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.83774090, -5.62437820, -5.73738670, -5.16293812, -7.36110210,
         -6.22037792, -5.42629576, -7.85859919, -5.66585159, -6.29455137]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.01980782, -5.32583332, -6.20267487, -5.75788021, -7.85785675,
          -6.85762787, -5.91456890, -8.37323284, -5.61990356, -6.29581690],
         [-6.01980782, -5.32583332, -6.20267487, -5.75788021, -7.85785675,
          -6.85762787, -5.91456890, -8.37323284, -5.61990356, -6.29581690]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.26192760, -0.43204689,  0.44479465,  0.15668869, -0.13797665,
           0.53793669]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0131 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0805 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 59, vnnlib ID: 59 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.93982983, -9.67457962, -3.81645751, -4.62450838, -3.47099352,
         -5.53091383, -3.97788739, -6.31543112, -7.47973061, -9.39750957]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [610]; unstable size 610; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 203, 1, 610] with unstable size 202 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 610] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 610] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [202]; unstable size 202; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 202] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 202] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.79685688,  4.36240864, -0.97976089, -0.08943760, -1.19198728,
          0.69136405,  1.47140503,  2.15872216,  4.19818258]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.93982983, -9.67457962, -3.81645751, -4.62450838, -3.47099352,
         -5.53091383, -3.97788739, -6.31543112, -7.47973061, -9.39750957]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.93982983, -9.67457867, -3.81645751, -4.62450838, -3.47099352,
          -5.53091431, -3.97788668, -6.31543159, -7.47973061, -9.39750862],
         [-6.93982983, -9.67457867, -3.81645751, -4.62450838, -3.47099352,
          -5.53091431, -3.97788668, -6.31543159, -7.47973061, -9.39750862]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16142917,  0.64662170, -0.50689316]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.44920623, -1.36984122, -1.52857137,  ..., -1.43333328,
            -1.35396814, -1.33809519],
           [-1.41746020, -1.40158725, -1.51269829,  ..., -1.38571417,
            -1.44920623, -1.33809519],
           [-1.57619035, -1.46507931, -1.48095226,  ..., -1.46507931,
            -1.51269829, -1.30634916],
           ...,
           [-1.78253973, -1.83015871, -1.84603179,  ..., -1.41746020,
            -1.33809519, -1.35396814],
           [-1.83015871, -1.86190474, -1.86190474,  ..., -1.65555561,
            -1.43333328, -1.46507931],
           [-1.87777781, -1.84603179, -1.83015871,  ..., -1.73492062,
            -1.43333328, -1.48095226]],

          [[-1.49758446, -1.41706920, -1.54589367,  ..., -1.49758446,
            -1.38486302, -1.32045078],
           [-1.43317223, -1.41706920, -1.49758446,  ..., -1.46537840,
            -1.49758446, -1.30434775],
           [-1.59420288, -1.48148143, -1.48148143,  ..., -1.54589367,
            -1.54589367, -1.23993552],
           ...,
           [-1.75523353, -1.81964576, -1.81964576,  ..., -1.41706920,
            -1.38486302, -1.36875999],
           [-1.78743970, -1.81964576, -1.83574879,  ..., -1.62640905,
            -1.46537840, -1.46537840],
           [-1.80354273, -1.78743970, -1.80354273,  ..., -1.69082129,
            -1.48148143, -1.46537840]],

          [[-1.31784117, -1.42278874, -1.40779614,  ..., -1.36281872,
            -1.21289361, -1.07796109],
           [-1.21289361, -1.33283365, -1.37781119,  ..., -1.39280367,
            -1.27286363, -1.06296861],
           [-1.36281872, -1.34782624, -1.39280367,  ..., -1.45277369,
            -1.31784117, -1.04797614],
           ...,
           [-1.42278874, -1.48275876, -1.46776617,  ..., -1.18290865,
            -1.30284870, -1.31784117],
           [-1.40779614, -1.43778121, -1.45277369,  ..., -1.27286363,
            -1.33283365, -1.36281872],
           [-1.42278874, -1.39280367, -1.45277369,  ..., -1.30284870,
            -1.30284870, -1.37781119]]],


         [[[-1.44920623, -1.36984122, -1.52857137,  ..., -1.43333328,
            -1.35396814, -1.33809519],
           [-1.41746020, -1.40158725, -1.51269829,  ..., -1.38571417,
            -1.44920623, -1.33809519],
           [-1.57619035, -1.46507931, -1.48095226,  ..., -1.46507931,
            -1.51269829, -1.30634916],
           ...,
           [-1.78253973, -1.83015871, -1.84603179,  ..., -1.41746020,
            -1.33809519, -1.35396814],
           [-1.83015871, -1.86190474, -1.86190474,  ..., -1.65555561,
            -1.43333328, -1.46507931],
           [-1.87777781, -1.84603179, -1.83015871,  ..., -1.73492062,
            -1.43333328, -1.48095226]],

          [[-1.49758446, -1.41706920, -1.54589367,  ..., -1.49758446,
            -1.38486302, -1.32045078],
           [-1.43317223, -1.41706920, -1.49758446,  ..., -1.46537840,
            -1.49758446, -1.30434775],
           [-1.59420288, -1.48148143, -1.48148143,  ..., -1.54589367,
            -1.54589367, -1.23993552],
           ...,
           [-1.75523353, -1.81964576, -1.81964576,  ..., -1.41706920,
            -1.38486302, -1.36875999],
           [-1.78743970, -1.81964576, -1.83574879,  ..., -1.62640905,
            -1.46537840, -1.46537840],
           [-1.80354273, -1.78743970, -1.80354273,  ..., -1.69082129,
            -1.48148143, -1.46537840]],

          [[-1.31784117, -1.42278874, -1.40779614,  ..., -1.36281872,
            -1.21289361, -1.07796109],
           [-1.21289361, -1.33283365, -1.37781119,  ..., -1.39280367,
            -1.27286363, -1.06296861],
           [-1.36281872, -1.34782624, -1.39280367,  ..., -1.45277369,
            -1.31784117, -1.04797614],
           ...,
           [-1.42278874, -1.48275876, -1.46776617,  ..., -1.18290865,
            -1.30284870, -1.31784117],
           [-1.40779614, -1.43778121, -1.45277369,  ..., -1.27286363,
            -1.33283365, -1.36281872],
           [-1.42278874, -1.39280367, -1.45277369,  ..., -1.30284870,
            -1.30284870, -1.37781119]]],


         [[[-1.44920623, -1.36984122, -1.52857137,  ..., -1.43333328,
            -1.35396814, -1.33809519],
           [-1.41746020, -1.40158725, -1.51269829,  ..., -1.38571417,
            -1.44920623, -1.33809519],
           [-1.57619035, -1.46507931, -1.48095226,  ..., -1.46507931,
            -1.51269829, -1.30634916],
           ...,
           [-1.78253973, -1.83015871, -1.84603179,  ..., -1.41746020,
            -1.33809519, -1.35396814],
           [-1.83015871, -1.86190474, -1.86190474,  ..., -1.65555561,
            -1.43333328, -1.46507931],
           [-1.87777781, -1.84603179, -1.83015871,  ..., -1.73492062,
            -1.43333328, -1.48095226]],

          [[-1.49758446, -1.41706920, -1.54589367,  ..., -1.49758446,
            -1.38486302, -1.32045078],
           [-1.43317223, -1.41706920, -1.49758446,  ..., -1.46537840,
            -1.49758446, -1.30434775],
           [-1.59420288, -1.48148143, -1.48148143,  ..., -1.54589367,
            -1.54589367, -1.23993552],
           ...,
           [-1.75523353, -1.81964576, -1.81964576,  ..., -1.41706920,
            -1.38486302, -1.36875999],
           [-1.78743970, -1.81964576, -1.83574879,  ..., -1.62640905,
            -1.46537840, -1.46537840],
           [-1.80354273, -1.78743970, -1.80354273,  ..., -1.69082129,
            -1.48148143, -1.46537840]],

          [[-1.31784117, -1.42278874, -1.40779614,  ..., -1.36281872,
            -1.21289361, -1.07796109],
           [-1.21289361, -1.33283365, -1.37781119,  ..., -1.39280367,
            -1.27286363, -1.06296861],
           [-1.36281872, -1.34782624, -1.39280367,  ..., -1.45277369,
            -1.31784117, -1.04797614],
           ...,
           [-1.42278874, -1.48275876, -1.46776617,  ..., -1.18290865,
            -1.30284870, -1.31784117],
           [-1.40779614, -1.43778121, -1.45277369,  ..., -1.27286363,
            -1.33283365, -1.36281872],
           [-1.42278874, -1.39280367, -1.45277369,  ..., -1.30284870,
            -1.30284870, -1.37781119]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.2941 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 60, vnnlib ID: 60 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.75205898, -10.95473385, -15.05265713, -14.31469154, -16.47543526,
         -15.42162323, -16.59076691, -16.32046509, -12.06099701, -12.79094601]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [842]; unstable size 842; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 125, 1, 842] with unstable size 124 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 842] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 842] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [124]; unstable size 124; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 124] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 124] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.70171213,  2.55571461,  1.94688368,  4.01660681,  2.85764170,
          4.14926863,  3.74387693, -0.07238388,  1.06150937]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.75205898, -10.95473385, -15.05265713, -14.31469154, -16.47543526,
         -15.42162323, -16.59076691, -16.32046509, -12.06099701, -12.79094601]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.19it/s]100%|██████████| 1/1 [00:00<00:00,  7.18it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.24313164, -10.83115482, -14.41390800, -13.75766754, -15.91440678,
          -14.81871986, -15.97586060, -15.75201797, -11.26198959, -12.42057705]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.43083477]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1425 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 22.353845596313477
alpha/beta optimization time: 1.3843441009521484
initial alpha-crown bounds: tensor([[ 1.73520589,  2.60585117,  1.99403620,  4.06510067,  2.91426277,
          4.19390965,  3.79336452, -0.03199434,  1.08410811]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.03199434280395508
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6274 seconds.
lower bounds for all target labels: [1.7352066040039062, 2.60585355758667, 1.9940366744995117, 4.065102577209473, 2.914261817932129, 4.193909645080566, 3.793363571166992, -0.0319972038269043, 1.084108591079712]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [7]
start creating model mps for candidates: ['lay/16_7']
Process 231347 received signal 15. Terminate pool <multiprocessing.pool.Pool state=RUN pool_size=96>
Process 231347 received signal 15. Terminate pool <multiprocessing.pool.Pool state=TERMINATE pool_size=96>
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.32600855827332
Verifying property 0 with 1 instances.
##### Instance 60 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.193909645080566.

Properties batch 1, size 1
Remaining timeout: 198.09373426437378
Verifying property 1 with 1 instances.
##### Instance 60 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.06510066986084.

Properties batch 2, size 1
Remaining timeout: 197.97920560836792
Verifying property 2 with 1 instances.
##### Instance 60 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.7933645248413086.

Properties batch 3, size 1
Remaining timeout: 197.86858582496643
Verifying property 3 with 1 instances.
##### Instance 60 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.9142627716064453.

Properties batch 4, size 1
Remaining timeout: 197.75627660751343
Verifying property 4 with 1 instances.
##### Instance 60 first 10 spec matrices: 
tensor([[[ 0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.605851173400879.

Properties batch 5, size 1
Remaining timeout: 197.6450333595276
Verifying property 5 with 1 instances.
##### Instance 60 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.9940361976623535.

Properties batch 6, size 1
Remaining timeout: 197.53081846237183
Verifying property 6 with 1 instances.
##### Instance 60 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.735205888748169.

Properties batch 7, size 1
Remaining timeout: 197.4193229675293
Verifying property 7 with 1 instances.
##### Instance 60 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0841081142425537.

Properties batch 8, size 1
Remaining timeout: 197.30770611763
Verifying property 8 with 1 instances.
##### Instance 60 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03199434]], device='cuda:0') need to verify.
Model prediction is: tensor([-13.75205898, -10.95473385, -15.05265713, -14.31469154, -16.47543526,
        -15.42162323, -16.59076691, -16.32046509, -12.06099701, -12.79094601],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03199434]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 842
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 121
Node /15 input 0: size torch.Size([100]) unstable 11
-----------------
# of unstable neurons: 974
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0008928775787353516
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0633    transfer 0.0001    finalize 0.0002    func 0.0639    
Accumulated time: func 0.0639    prepare 0.0002    bound 0.0633    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 82] 
split level 1: [/input-12, 35] 
split level 2: [/input-12, 11] 
split level 3: [/input-12, 54] 
split level 4: [/input-12, 51] 
split level 5: [/input-12, 37] 
split level 6: [/input-8, 564] 
split level 7: [/input-8, 1445] 
split level 8: [/input-8, 1890] 
split level 9: [/input-8, 170] 
split level 10: [/input-12, 4] 
split level 11: [/input-8, 817] 
split level 12: [/input-8, 865] 
split level 13: [/input-8, 686] 
split level 14: [/input-8, 1404] 
split level 15: [/input-8, 162] 
split level 16: [/input, 2728] 
split level 17: [/input-8, 1427] 
split level 18: [/input-8, 678] 
split level 19: [/input-8, 1072] 
split level 20: [/input, 1684] 
split level 21: [/input, 2299] 
split level 22: [/input, 1668] 
split level 23: [/input-8, 1337] 
split level 24: [/input, 1788] 
split level 25: [/input-8, 1637] 
split level 26: [/input, 3769] 
split level 27: [/input, 3786] 
split level 28: [/input-8, 1914] 
split level 29: [/input-8, 1499] 
split level 30: [/input, 3737] 
split level 31: [/input, 1532] 
split level 32: [/input, 3401] 
split level 33: [/input-8, 1889] 
split level 34: [/input-8, 1085] 
split level 35: [/input-8, 996] 
split level 36: [/input-8, 1751] 
split level 37: [/input-8, 825] 
split level 38: [/input, 2293] 
split level 39: [/input-8, 1500] 
split level 40: [/input-8, 1297] 
split level 41: [/input, 1670] 
split level 42: [/input, 3764] 
split level 43: [/input-8, 1759] 
split level 44: [/input, 1531] 
split level 45: [/input-8, 849] 
split level 46: [/input, 3011] 
split level 47: [/input-8, 1834] 
split level 48: [/input, 4010] 
split level 49: [/input, 1530] 
split level 50: [/input-8, 1252] 
split level 51: [/input-8, 1743] 
split level 52: [/input, 3765] 
split level 53: [/input-8, 915] 
split level 54: [/input, 3143] 
split level 55: [/input-8, 1470] 
split level 56: [/input, 3749] 
split level 57: [/input-8, 986] 
split level 58: [/input-8, 916] 
split level 59: [/input, 3384] 
split level 60: [/input, 3994] 
split level 61: [/input, 1634] 
split level 62: [/input, 3559] 
split level 63: [/input-8, 1379] 
split level 64: [/input-8, 697] 
split level 65: [/input-8, 1105] 
split level 66: [/input-8, 1588] 
split level 67: [/input, 1666] 
split level 68: [/input-8, 1447] 
split level 69: [/input, 2359] 
split level 70: [/input, 3385] 
split level 71: [/input, 3735] 
split level 72: [/input, 2184] 
split level 73: [/input, 1789] 
split level 74: [/input-8, 436] 
split level 75: [/input, 3782] 
split level 76: [/input, 3738] 
split level 77: [/input, 3781] 
split level 78: [/input, 2362] 
split level 79: [/input, 3703] 
split level 80: [/input, 1595] 
split level 81: [/input, 2995] 
split level 82: [/input, 2301] 
split level 83: [/input-8, 1868] 
split level 84: [/input, 3324] 
split level 85: [/input, 2662] 
split level 86: [/input, 2028] 
split level 87: [/input, 1671] 
split level 88: [/input, 1512] 
split level 89: [/input, 1594] 
split level 90: [/input, 2556] 
split level 91: [/input, 1604] 
split level 92: [/input, 3453] 
split level 93: [/input-8, 641] 
split level 94: [/input, 3128] 
split level 95: [/input, 2121] 
split level 96: [/input-8, 1361] 
split level 97: [/input, 2969] 
split level 98: [/input, 3420] 
split level 99: [/input, 3705] 
split level 100: [/input, 2344] 
split level 101: [/input, 1353] 
split level 102: [/input, 2027] 
split level 103: [/input, 1529] 
split level 104: [/input, 3787] 
split level 105: [/input, 3747] 
split level 106: [/input, 3129] 
split level 107: [/input, 2357] 
split level 108: [/input, 1418] 
split level 109: [/input, 3387] 
split level 110: [/input, 348] 
split level 111: [/input, 2374] 
split level 112: [/input, 3688] 
split level 113: [/input, 3368] 
split level 114: [/input, 1528] 
split level 115: [/input, 2345] 
split level 116: [/input, 2358] 
split level 117: [/input, 3704] 
split level 118: [/input, 1759] 
split level 119: [/input-8, 593] 
split level 120: [/input, 2693] 
split level 121: [/input, 2332] 
split level 122: [/input, 2659] 
split level 123: [/input, 3687] 
split level 124: [/input, 2887] 
split level 125: [/input, 2363] 
split level 126: [/input-8, 866] 
split level 127: [/input, 3868] 
split level 128: [/input, 1417] 
split level 129: [/input, 3380] 
split level 130: [/input, 3861] 
split level 131: [/input-8, 2013] 
split level 132: [/input, 2330] 
split level 133: [/input, 3381] 
split level 134: [/input, 2325] 
split level 135: [/input, 3789] 
split level 136: [/input, 2346] 
split level 137: [/input, 3863] 
split level 138: [/input, 1524] 
split level 139: [/input, 1348] 
split level 140: [/input, 2328] 
split level 141: [/input, 76] 
split level 142: [/input, 2342] 
split level 143: [/input, 3367] 
split level 144: [/input, 3352] 
split level 145: [/input, 2356] 
split level 146: [/input, 3862] 
split level 147: [/input, 3866] 
split level 148: [/input, 2331] 
split level 149: [/input, 3948] 
split level 150: [/input, 3139] 
split level 151: [/input, 2364] 
split level 152: [/input, 1778] 
split level 153: [/input, 2341] 
split level 154: [/input, 3867] 
split level 155: [/input, 3395] 
split level 156: [/input, 2026] 
split level 157: [/input, 3110] 
split level 158: [/input, 110] 
split level 159: [/input, 2347] 
split level 160: [/input, 2329] 
split level 161: [/input, 126] 
split level 162: [/input, 3021] 
split level 163: [/input, 3379] 
split level 164: [/input, 3113] 
split level 165: [/input, 3864] 
split level 166: [/input, 1596] 
split level 167: [/input, 3394] 
split level 168: [/input, 2343] 
split level 169: [/input, 3865] 
split level 170: [/input, 3351] 
split level 171: [/input, 1777] 
split level 172: [/input, 3706] 
split level 173: [/input, 2323] 
split level 174: [/input, 2326] 
split level 175: [/input, 2386] 
split level 176: [/input, 2398] 
split level 177: [/input, 83] 
split level 178: [/input, 3755] 
split level 179: [/input-8, 2029] 
split level 180: [/input, 3330] 
split level 181: [/input, 2021] 
split level 182: [/input, 3020] 
split level 183: [/input, 3336] 
split level 184: [/input, 2385] 
split level 185: [/input-8, 1792] 
split level 186: [/input, 3702] 
split level 187: [/input-8, 79] 
split level 188: [/input, 17] 
split level 189: [/input, 3365] 
split level 190: [/input, 2348] 
split level 191: [/input, 77] 
split level 192: [/input, 3334] 
split level 193: [/input, 94] 
split level 194: [/input, 3719] 
split level 195: [/input, 3340] 
split level 196: [/input, 3333] 
split level 197: [/input, 3335] 
split level 198: [/input, 1288] 
split level 199: [/input, 1289] 
Time: prepare 0.0135    bound 0.2802    transfer 0.0370    finalize 0.0267    func 0.3576    
Accumulated time: func 0.4215    prepare 0.0276    bound 0.3435    transfer 0.0371    finalize 0.0269    
all_split False
======================Cut inference begins======================
max lb tensor(0.23546362) min lb tensor(-0.03194904)
Number of Verified Splits: 12 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.04869842529296875 
BICCOS Cumulative time: 0.04869842529296875
Preprocessing time: 0.0402681827545166 Inference time: 0.001260519027709961 Add cuts time: 0.0013232231140136719 Cut analysis time: 0.005846500396728516
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.7287    set_bounds 0.0348    solve 0.3586    add 0.0152    
Accumulated time: pickout 0.0004    decision 0.7287    set_bounds 0.0348    solve 0.3586    add 0.0152    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([82]), tensor([-1.]), tensor([0]), tensor([1.53259308e-10]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([82]), tensor([1.]), tensor([0]), tensor([3.30031720e+32]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.12754535675048828

all verified at 0th iter
Time: prepare 0.0005    bound 0.0126    transfer 0.0001    finalize 0.0002    func 0.0134    
Accumulated time: func 0.4349    prepare 0.0281    bound 0.3561    transfer 0.0372    finalize 0.0271    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
the mip building process is not terminated yet, kill it
Result: safe in 4.6124 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 61, vnnlib ID: 61 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.10208607, -11.41786957, -13.13540363, -14.61515522, -12.72880554,
         -15.42352676, -14.81626129, -14.02141857, -10.58820438, -11.90863419]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [689]; unstable size 689; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 287, 1, 689] with unstable size 286 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 689] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 689] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [286]; unstable size 286; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 286] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 286] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.29984093, -0.42210984,  0.77767390, -0.92977893,  1.27496123,
          0.91095710, -0.04363620, -2.54635906, -1.79969788]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.10208607, -11.41786957, -13.13540363, -14.61515522, -12.72880554,
         -15.42352676, -14.81626129, -14.02141857, -10.58820438, -11.90863419]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.10208607, -11.41786957, -13.13540268, -14.61515522, -12.72880459,
          -15.42352581, -14.81626034, -14.02141666, -10.58820248, -11.90863228],
         [-12.10208607, -11.41786957, -13.13540268, -14.61515522, -12.72880459,
          -15.42352581, -14.81626034, -14.02141666, -10.58820248, -11.90863228]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.68421650,  1.03331661,  0.62671852,  1.91933060, -1.51388359,
          -0.19345379]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1867 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 62, vnnlib ID: 62 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.22134018, -15.56860352, -14.70451355, -17.13485336, -15.30204296,
         -19.28796387, -19.05625916, -17.42904091,  -7.39751339, -15.77822590]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [638]; unstable size 638; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 143, 1, 638] with unstable size 142 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 638] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 638] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [142]; unstable size 142; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 142] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 142] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.70733380,  6.82938194,  6.02555275,  8.45529366,  6.40188885,
         10.40295410, 10.22137833,  8.17284584,  6.93548489]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0393 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 63, vnnlib ID: 63 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.89003658, -14.52937984,  -8.65657139, -11.09509850,  -9.84154129,
         -10.49578381, -11.10558414, -12.61307526, -14.24301243, -14.45481777]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [532]; unstable size 532; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 158, 1, 532] with unstable size 157 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 532] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 532] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [157]; unstable size 157; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 157] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 157] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.66265535,  2.43688107, -3.43360949, -0.71080697, -2.08376074,
         -1.43809283,  0.69530237,  2.01353717,  2.55464029]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.89003658, -14.52937984,  -8.65657139, -11.09509850,  -9.84154129,
         -10.49578381, -11.10558414, -12.61307526, -14.24301243, -14.45481777]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.89003754, -14.52938080,  -8.65657139, -11.09509850,  -9.84154224,
          -10.49578571, -11.10558605, -12.61307430, -14.24301243, -14.45481777],
         [-12.89003754, -14.52938080,  -8.65657139, -11.09509850,  -9.84154224,
          -10.49578571, -11.10558605, -12.61307430, -14.24301243, -14.45481777]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-2.44901466, -0.01048756, -1.26404381, -0.60980034]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]]]],
       device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0515 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 64, vnnlib ID: 64 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.45442581, -10.84073353,  -2.11443281,  -5.11572742,  -2.45199776,
          -5.34400368,  -5.73184919,  -6.24624300,  -8.44986820, -10.21909809]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 540] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 540] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 216] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.34607935,  7.68123960,  1.94801569, -0.41767788,  2.08386636,
          2.53074312,  2.96769238,  4.98291540,  6.93700123]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.45442581, -10.84073353,  -2.11443281,  -5.11572742,  -2.45199776,
          -5.34400368,  -5.73184919,  -6.24624300,  -8.44986820, -10.21909809]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.49234295, -10.80588436,  -2.29469967,  -5.01693249,  -2.21906614,
           -5.26282883,  -5.61701155,  -6.03597450,  -8.41149426, -10.12084866]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.07563353]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0128 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0746 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 65, vnnlib ID: 65 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.03724480, -11.18434811,  -9.06159973,  -6.82672215,  -8.31060886,
          -7.42542219,  -7.49326038,  -8.39577389,  -8.11735439,  -9.31811810]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 166, 1, 540] with unstable size 165 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 540] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [165]; unstable size 165; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 165] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 165] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.06153691,  2.03039932,  0.34189326, -1.49903512, -0.37442613,
         -0.95892531, -0.33255005, -0.89728755,  0.12400341]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.03724480, -11.18434811,  -9.06159973,  -6.82672215,  -8.31060886,
          -7.42542219,  -7.49326038,  -8.39577389,  -8.11735439,  -9.31811810]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.03724575, -11.18434811,  -9.06159973,  -6.82672262,  -8.31061077,
           -7.42542219,  -7.49326038,  -8.39577389,  -8.11735439,  -9.31811714],
         [ -9.03724575, -11.18434811,  -9.06159973,  -6.82672262,  -8.31061077,
           -7.42542219,  -7.49326038,  -8.39577389,  -8.11735439,  -9.31811714]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.66653776,  0.81735039, -0.06783819,  0.90251350,  0.62409401]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0636 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 66, vnnlib ID: 66 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.38867235, -7.83663368, -1.97538805, -3.76285219, -1.67582381,
         -3.71006250, -2.32488132, -4.60400915, -6.09743786, -7.12869167]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [547]; unstable size 547; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 271, 1, 547] with unstable size 270 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 547] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 547] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [270]; unstable size 270; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 270] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 270] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.79902220,  3.61575890, -1.01848137,  0.80863714,  0.56699324,
         -0.88418770,  1.54361463,  1.63250852,  3.27348566]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.38867235, -7.83663368, -1.97538805, -3.76285219, -1.67582381,
         -3.71006250, -2.32488132, -4.60400915, -6.09743786, -7.12869167]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.27879572, -7.94890785, -1.78546190, -3.82703066, -2.03851891,
          -3.82423735, -2.29042339, -4.81013393, -6.21499157, -7.37135839],
         [-4.27879572, -7.94890785, -1.78546190, -3.82703066, -2.03851891,
          -3.82423735, -2.29042339, -4.81013393, -6.21499157, -7.37135839]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.25305700,  0.25190449]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0062 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0678 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 67, vnnlib ID: 67 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.84932995, -17.33446884,  -8.64849091, -12.04424667,  -9.06044197,
         -11.72052956, -11.48574638, -12.39857960, -14.52266598, -15.66392040]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [629]; unstable size 629; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 205, 1, 629] with unstable size 204 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 629] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 629] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [204]; unstable size 204; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 204] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 204] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.34933949,  7.33656406,  2.46383572, -0.40431595,  2.07216501,
          1.93970621,  2.30366516,  4.55638123,  5.68612194]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.84932995, -17.33446884,  -8.64849091, -12.04424667,  -9.06044197,
         -11.72052956, -11.48574638, -12.39857960, -14.52266598, -15.66392040]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.16704941, -17.55948639,  -9.04862404, -12.28578377,  -9.04834080,
          -11.96090889, -11.69873047, -12.37973595, -14.72574997, -15.88174343]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00028324]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0089 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0672 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 68, vnnlib ID: 68 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.69871712, -20.69267273, -15.76616573, -14.43220711, -12.67657566,
         -14.10208035, -15.81092930,  -9.57836342, -21.12655640, -18.97427750]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [565]; unstable size 565; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 220, 1, 565] with unstable size 219 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 565] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 565] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [219]; unstable size 219; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 219] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 219] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.13234711, 8.93222618, 4.50618649, 3.55561566, 1.94738817, 3.30281520,
         4.49555874, 9.35066795, 7.40655804]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0669 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 69, vnnlib ID: 69 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.06598377, -12.28655052, -10.90278053, -11.53813744,  -9.47263813,
         -13.18623543, -12.00863743, -11.38340187,  -8.27437782, -11.53199673]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [870]; unstable size 870; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 870] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 870] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 870] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 184] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.42442560,  2.45793104,  1.12414610,  1.64930153, -0.25776583,
          3.05331612,  2.07846880,  1.21149373,  1.63006783]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.06598377, -12.28655052, -10.90278053, -11.53813744,  -9.47263813,
         -13.18623543, -12.00863743, -11.38340187,  -8.27437782, -11.53199673]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.06598473, -12.28655148, -10.90278149, -11.53813839,  -9.47263718,
          -13.18623447, -12.00863838, -11.38340282,  -8.27437973, -11.53199673],
         [ -8.06598473, -12.28655148, -10.90278149, -11.53813839,  -9.47263718,
          -13.18623447, -12.00863838, -11.38340282,  -8.27437973, -11.53199673]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.20839500,  1.19825745]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           [ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           [ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           ...,
           [-0.29047608, -0.46507925, -0.11587292,  ...,  0.13809532,
             0.02698422, -0.13174593],
           [ 0.97936511,  0.94761908,  0.99523818,  ...,  0.67777783,
             0.63015878,  0.67777783],
           [ 1.31269872,  1.29682565,  1.26507962,  ..., -0.09999990,
             0.01111121,  0.02698422]],

          [[ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           [ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           [ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           ...,
           [-0.27375188, -0.46698871, -0.12882435,  ..., -0.27375188,
            -0.32206106, -0.53140092],
           [ 0.95008057,  0.88566834,  0.91787446,  ...,  0.12882459,
             0.12882459,  0.11272153],
           [ 1.20772982,  1.17552364,  1.14331758,  ..., -0.40257636,
            -0.25764883, -0.30595800]],

          [[ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           [ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           [ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           ...,
           [-0.26836565, -0.44827583, -0.11844061,  ..., -0.64317840,
            -0.68815589, -0.85307342],
           [ 0.82608712,  0.79610211,  0.82608712,  ..., -0.46326834,
            -0.44827583, -0.44827583],
           [ 1.09595215,  1.06596720,  1.03598225,  ..., -0.73313338,
            -0.61319339, -0.65817088]]],


         [[[ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           [ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           [ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           ...,
           [-0.29047608, -0.46507925, -0.11587292,  ...,  0.13809532,
             0.02698422, -0.13174593],
           [ 0.97936511,  0.94761908,  0.99523818,  ...,  0.67777783,
             0.63015878,  0.67777783],
           [ 1.31269872,  1.29682565,  1.26507962,  ..., -0.09999990,
             0.01111121,  0.02698422]],

          [[ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           [ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           [ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           ...,
           [-0.27375188, -0.46698871, -0.12882435,  ..., -0.27375188,
            -0.32206106, -0.53140092],
           [ 0.95008057,  0.88566834,  0.91787446,  ...,  0.12882459,
             0.12882459,  0.11272153],
           [ 1.20772982,  1.17552364,  1.14331758,  ..., -0.40257636,
            -0.25764883, -0.30595800]],

          [[ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           [ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           [ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           ...,
           [-0.26836565, -0.44827583, -0.11844061,  ..., -0.64317840,
            -0.68815589, -0.85307342],
           [ 0.82608712,  0.79610211,  0.82608712,  ..., -0.46326834,
            -0.44827583, -0.44827583],
           [ 1.09595215,  1.06596720,  1.03598225,  ..., -0.73313338,
            -0.61319339, -0.65817088]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0704 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 70, vnnlib ID: 70 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.38531876,  -9.15226841,  -4.51170063,  -6.71956348,  -3.59781837,
          -7.57347631,  -2.96594071,  -8.17208290,  -9.44402599, -10.74759960]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [479]; unstable size 479; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 479] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 479] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 479] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 180] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.27840710,  4.92119694,  0.44459987,  2.50914335, -0.39846063,
          3.07961321,  3.62197137,  4.85315418,  6.55421734]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.38531876,  -9.15226841,  -4.51170063,  -6.71956348,  -3.59781837,
          -7.57347631,  -2.96594071,  -8.17208290,  -9.44402599, -10.74759960]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.66it/s]100%|██████████| 1/1 [00:00<00:00,  8.65it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.24029589,  -9.04307461,  -4.27071857,  -6.51712275,  -3.25431824,
           -7.24005508,  -3.20525861,  -7.73866796,  -9.34815121, -10.61236477]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04905963]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1182 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 29.355348587036133
alpha/beta optimization time: 1.3013370037078857
initial alpha-crown bounds: tensor([[ 3.32722855,  4.96578026,  0.48747277,  2.55623031, -0.35164094,
          3.13634539,  3.69880438,  4.92325401,  6.61187363]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.3516409397125244
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6821 seconds.
lower bounds for all target labels: [3.3272273540496826, 4.9657793045043945, 0.4874722957611084, 2.556227922439575, -0.3516421318054199, 3.1363444328308105, 3.6988043785095215, 4.923250198364258, 6.611872673034668]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [4]
start creating model mps for candidates: ['lay/16_4']
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=70_spec=4_26516445.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=70_spec=4_26516445.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 232583 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.45255970954895
Verifying property 0 with 1 instances.
##### Instance 70 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.611873626708984.

Properties batch 1, size 1
Remaining timeout: 198.1008496284485
Verifying property 1 with 1 instances.
##### Instance 70 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.965780258178711.

Properties batch 2, size 1
Remaining timeout: 197.9908332824707
Verifying property 2 with 1 instances.
##### Instance 70 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.923254013061523.

Properties batch 3, size 1
Remaining timeout: 197.91183638572693
Verifying property 3 with 1 instances.
##### Instance 70 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.6988043785095215.

Properties batch 4, size 1
Remaining timeout: 197.83568906784058
Verifying property 4 with 1 instances.
##### Instance 70 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.327228546142578.

Properties batch 5, size 1
Remaining timeout: 197.75972747802734
Verifying property 5 with 1 instances.
##### Instance 70 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.136345386505127.

Properties batch 6, size 1
Remaining timeout: 197.68219757080078
Verifying property 6 with 1 instances.
##### Instance 70 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.556230306625366.

Properties batch 7, size 1
Remaining timeout: 197.60537767410278
Verifying property 7 with 1 instances.
##### Instance 70 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.4874727725982666.

Properties batch 8, size 1
Remaining timeout: 197.4648928642273
Verifying property 8 with 1 instances.
##### Instance 70 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.35164094]], device='cuda:0') need to verify.
Model prediction is: tensor([ -7.38531876,  -9.15226841,  -4.51170063,  -6.71956348,  -3.59781837,
         -7.57347631,  -2.96594071,  -8.17208290,  -9.44402599, -10.74759960],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.35164094]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 479
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 180
Node /15 input 0: size torch.Size([100]) unstable 14
-----------------
# of unstable neurons: 673
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0006778240203857422
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0603    transfer 0.0001    finalize 0.0002    func 0.0608    
Accumulated time: func 0.0608    prepare 0.0002    bound 0.0603    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 51] 
split level 2: [/input-12, 11] 
split level 3: [/input-12, 45] 
split level 4: [/input-12, 46] 
split level 5: [/input-12, 26] 
split level 6: [/input-12, 37] 
split level 7: [/input-12, 33] 
split level 8: [/input-8, 101] 
split level 9: [/input-8, 475] 
split level 10: [/input-8, 931] 
split level 11: [/input-8, 100] 
split level 12: [/input-8, 106] 
split level 13: [/input-8, 614] 
split level 14: [/input-8, 867] 
split level 15: [/input-8, 859] 
split level 16: [/input-8, 1902] 
split level 17: [/input-8, 613] 
split level 18: [/input-8, 604] 
split level 19: [/input-8, 490] 
split level 20: [/input-8, 792] 
split level 21: [/input-8, 980] 
split level 22: [/input-8, 820] 
split level 23: [/input-8, 435] 
split level 24: [/input-8, 1819] 
split level 25: [/input-8, 876] 
split level 26: [/input-8, 102] 
split level 27: [/input-8, 821] 
split level 28: [/input-8, 987] 
split level 29: [/input-8, 426] 
split level 30: [/input-8, 290] 
split level 31: [/input-8, 114] 
split level 32: [/input-8, 1001] 
split level 33: [/input-8, 1282] 
split level 34: [/input-8, 1827] 
split level 35: [/input-8, 878] 
split level 36: [/input-8, 1449] 
split level 37: [/input-8, 1828] 
split level 38: [/input-8, 596] 
split level 39: [/input-8, 979] 
split level 40: [/input-8, 439] 
split level 41: [/input-8, 801] 
split level 42: [/input-8, 1291] 
split level 43: [/input-8, 308] 
split level 44: [/input-8, 486] 
split level 45: [/input-8, 1389] 
split level 46: [/input, 157] 
split level 47: [/input-8, 1444] 
split level 48: [/input-8, 1289] 
split level 49: [/input-8, 1299] 
split level 50: [/input-8, 1467] 
split level 51: [/input-8, 851] 
split level 52: [/input-8, 1908] 
split level 53: [/input-8, 988] 
split level 54: [/input-8, 1378] 
split level 55: [/input-8, 938] 
split level 56: [/input-8, 1818] 
split level 57: [/input-8, 1910] 
split level 58: [/input, 354] 
split level 59: [/input-8, 1007] 
split level 60: [/input-8, 1461] 
split level 61: [/input-8, 1301] 
split level 62: [/input, 3940] 
split level 63: [/input-8, 473] 
split level 64: [/input-8, 1756] 
split level 65: [/input-8, 82] 
split level 66: [/input-8, 497] 
split level 67: [/input-8, 1014] 
split level 68: [/input-8, 1300] 
split level 69: [/input-8, 419] 
split level 70: [/input-8, 1425] 
split level 71: [/input, 3543] 
split level 72: [/input, 119] 
split level 73: [/input-8, 418] 
split level 74: [/input, 3477] 
split level 75: [/input, 3945] 
split level 76: [/input, 1753] 
split level 77: [/input, 3413] 
split level 78: [/input, 3938] 
split level 79: [/input, 1431] 
split level 80: [/input, 1368] 
split level 81: [/input-8, 998] 
split level 82: [/input, 2151] 
split level 83: [/input, 679] 
split level 84: [/input-8, 407] 
split level 85: [/input, 1195] 
split level 86: [/input-8, 1820] 
split level 87: [/input-8, 425] 
split level 88: [/input, 173] 
split level 89: [/input-8, 1302] 
split level 90: [/input-8, 1450] 
split level 91: [/input, 2281] 
split level 92: [/input-8, 526] 
split level 93: [/input, 2135] 
split level 94: [/input-8, 2022] 
split level 95: [/input-8, 962] 
split level 96: [/input-8, 2039] 
split level 97: [/input, 3561] 
split level 98: [/input-8, 995] 
split level 99: [/input, 3957] 
split level 100: [/input, 408] 
split level 101: [/input-8, 120] 
split level 102: [/input-8, 1893] 
split level 103: [/input, 99] 
split level 104: [/input, 3975] 
split level 105: [/input, 3527] 
split level 106: [/input-8, 993] 
split level 107: [/input-8, 1258] 
split level 108: [/input, 98] 
split level 109: [/input, 2394] 
split level 110: [/input-8, 104] 
split level 111: [/input-8, 504] 
split level 112: [/input, 1432] 
split level 113: [/input, 3787] 
split level 114: [/input-8, 466] 
split level 115: [/input-8, 1398] 
split level 116: [/input, 137] 
split level 117: [/input-8, 1437] 
split level 118: [/input, 1510] 
split level 119: [/input-8, 399] 
split level 120: [/input-8, 592] 
split level 121: [/input, 3925] 
split level 122: [/input, 1526] 
split level 123: [/input, 2393] 
split level 124: [/input-8, 1293] 
split level 125: [/input, 2391] 
split level 126: [/input, 1847] 
split level 127: [/input, 3786] 
split level 128: [/input-8, 1925] 
split level 129: [/input-8, 521] 
split level 130: [/input-8, 2015] 
split level 131: [/input, 1848] 
split level 132: [/input-8, 1441] 
split level 133: [/input, 2183] 
split level 134: [/input, 1382] 
split level 135: [/input-8, 1433] 
split level 136: [/input, 2010] 
split level 137: [/input, 2167] 
split level 138: [/input, 2009] 
split level 139: [/input-8, 1277] 
split level 140: [/input-8, 510] 
split level 141: [/input-8, 507] 
split level 142: [/input, 3021] 
split level 143: [/input, 4011] 
split level 144: [/input, 1865] 
split level 145: [/input, 3513] 
split level 146: [/input-8, 1137] 
split level 147: [/input-8, 305] 
split level 148: [/input, 1726] 
split level 149: [/input, 1864] 
split level 150: [/input, 3475] 
split level 151: [/input, 2013] 
split level 152: [/input, 1850] 
split level 153: [/input, 2997] 
split level 154: [/input, 2363] 
split level 155: [/input-8, 1799] 
split level 156: [/input, 1907] 
split level 157: [/input, 1802] 
split level 158: [/input, 1863] 
split level 159: [/input-8, 532] 
split level 160: [/input, 1121] 
split level 161: [/input, 2028] 
split level 162: [/input, 1478] 
split level 163: [/input-8, 513] 
split level 164: [/input, 1995] 
split level 165: [/input, 3953] 
split level 166: [/input-8, 1027] 
split level 167: [/input, 1917] 
split level 168: [/input, 2266] 
split level 169: [/input, 3921] 
split level 170: [/input, 1845] 
split level 171: [/input, 1934] 
split level 172: [/input, 3132] 
split level 173: [/input, 3006] 
split level 174: [/input, 1604] 
split level 175: [/input, 1829] 
split level 176: [/input, 1882] 
split level 177: [/input-8, 1405] 
split level 178: [/input, 1957] 
split level 179: [/input, 1884] 
split level 180: [/input, 111] 
split level 181: [/input, 1827] 
split level 182: [/input-8, 1307] 
split level 183: [/input, 3159] 
split level 184: [/input, 378] 
split level 185: [/input, 1552] 
split level 186: [/input, 1862] 
split level 187: [/input, 1900] 
split level 188: [/input, 1994] 
split level 189: [/input, 1977] 
split level 190: [/input, 1587] 
split level 191: [/input, 1866] 
split level 192: [/input, 3709] 
split level 193: [/input-8, 127] 
split level 194: [/input-8, 698] 
split level 195: [/input, 1857] 
split level 196: [/input-8, 65] 
split level 197: [/input, 2051] 
split level 198: [/input, 1852] 
split level 199: [/input, 2179] 
Time: prepare 0.0059    bound 0.1114    transfer 0.0072    finalize 0.0069    func 0.1316    
Accumulated time: func 0.1923    prepare 0.0162    bound 0.1716    transfer 0.0073    finalize 0.0071    
all_split False
======================Cut inference begins======================
max lb tensor(0.19680476) min lb tensor(-0.35160947)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.012537479400634766 
BICCOS Cumulative time: 0.012537479400634766
Preprocessing time: 0.01131129264831543 Inference time: 9.036064147949219e-05 Add cuts time: 5.9604644775390625e-05 Cut analysis time: 0.0010762214660644531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.33828 (1), -0.33714 (1), -0.33633 (1), -0.33631 (1), -0.33497 (1), -0.33488 (1), -0.33476 (1), -0.33452 (1), -0.33412 (1), -0.33336 (1), -0.33330 (1), -0.33305 (1), -0.33254 (1), -0.33238 (1), -0.33208 (1), -0.33159 (1), -0.33035 (1), -0.32817 (1), -0.32742 (1), -0.32737 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5451    set_bounds 0.0135    solve 0.1317    add 0.1988    
Accumulated time: pickout 0.0004    decision 0.5451    set_bounds 0.0135    solve 0.1317    add 0.1988    
Current (lb-rhs): -0.3382835388183594
50 domains visited
Cumulative time: 0.9915318489074707

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] 
split level 1: [/input-12, 45] [/input-12, 45] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 2: [/input-12, 46] [/input-12, 46] [/input-12, 45] [/input-12, 46] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 3: [/input-12, 37] [/input-12, 37] [/input-12, 46] [/input-12, 37] [/input-12, 37] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3121302127838135
10 lb beta sum: 0.19730766117572784, worst -0.3110792636871338
Time: prepare 0.0115    bound 0.1932    transfer 0.0037    finalize 0.0042    func 0.2162    
Accumulated time: func 0.4086    prepare 0.0281    bound 0.3648    transfer 0.0110    finalize 0.0113    
all_split False
======================Cut inference begins======================
max lb tensor(0.04133797) min lb tensor(-0.31076717)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.02083587646484375 
BICCOS Cumulative time: 0.033373355865478516
Preprocessing time: 0.01902174949645996 Inference time: 0.00019550323486328125 Add cuts time: 9.226799011230469e-05 Cut analysis time: 0.0015263557434082031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10088 (2), -0.10078 (2), -0.09641 (2), -0.09584 (2), -0.09546 (2), -0.09450 (2), -0.09404 (2), -0.09332 (2), -0.09284 (2), -0.09239 (2), -0.09177 (2), -0.09103 (2), -0.09062 (2), -0.08928 (2), -0.08913 (2), -0.08721 (2), -0.08646 (2), -0.08589 (2), -0.08552 (2), -0.08480 (2), 
Length of domains: 50
Time: pickout 0.0088    decision 0.0296    set_bounds 0.0190    solve 0.2164    add 0.2032    
Accumulated time: pickout 0.0092    decision 0.5747    set_bounds 0.0326    solve 0.3480    add 0.4020    
Current (lb-rhs): -0.10087823867797852
100 domains visited
Cumulative time: 1.4897491931915283

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 45] [/input-12, 46] [/input-12, 46] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 2: [/input-12, 46] [/input-12, 26] [/input-12, 26] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 26] 
split level 3: [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07438063621520996
10 lb beta sum: 0.346515953540802, worst -0.10821533203125
Time: prepare 0.0073    bound 0.1364    transfer 0.0008    finalize 0.0029    func 0.1501    
Accumulated time: func 0.5587    prepare 0.0357    bound 0.5013    transfer 0.0118    finalize 0.0142    
all_split False
======================Cut inference begins======================
max lb tensor(0.12412524) min lb tensor(-0.06654501)
Number of Verified Splits: 163 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 14
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.033956050872802734 
BICCOS Cumulative time: 0.06732940673828125
Preprocessing time: 0.017806291580200195 Inference time: 0.011440038681030273 Add cuts time: 0.0033478736877441406 Cut analysis time: 0.001361846923828125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01684 (3), -0.01681 (3), -0.01667 (3), -0.01664 (3), -0.01642 (3), -0.01591 (3), -0.01562 (3), -0.01458 (3), -0.01399 (3), -0.01384 (3), -0.01360 (3), -0.01353 (3), -0.01337 (3), -0.01314 (3), -0.01311 (3), -0.01273 (3), -0.01261 (3), -0.01261 (3), -0.01258 (3), -0.01245 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0205    set_bounds 0.0163    solve 0.1503    add 0.2911    
Accumulated time: pickout 0.0103    decision 0.5952    set_bounds 0.0488    solve 0.4983    add 0.6931    
Current (lb-rhs): -0.01683521270751953
150 domains visited
Cumulative time: 2.0097947120666504

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 51] [/input-12, 51] [/input-12, 11] [/input-12, 51] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 46] [/input-12, 45] [/input-12, 45] 
split level 2: [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 46] [/input-12, 26] [/input-12, 26] [/input-12, 46] 
split level 3: [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 26] [/input-12, 37] [/input-12, 37] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027164697647094727
10 lb beta sum: 1.732183814048767, worst -0.08836352825164795
Time: prepare 0.0076    bound 0.1837    transfer 0.0013    finalize 0.0026    func 0.1979    
Accumulated time: func 0.7566    prepare 0.0437    bound 0.6850    transfer 0.0130    finalize 0.0168    
all_split False
======================Cut inference begins======================
max lb tensor(0.35872352) min lb tensor(-0.00743032)
Number of Verified Splits: 394 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=70_spec=4_26516445.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0018
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.04621243476867676 
BICCOS Cumulative time: 0.11354184150695801
Preprocessing time: 0.01410222053527832 Inference time: 0.02064371109008789 Add cuts time: 0.00934910774230957 Cut analysis time: 0.0021173954010009766
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0082    decision 0.0239    set_bounds 0.0180    solve 0.1981    add 0.0247    
Accumulated time: pickout 0.0184    decision 0.6191    set_bounds 0.0668    solve 0.6964    add 0.7178    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 11]), tensor([-1., -1.]), tensor([0, 0]), tensor([3.30031720e+32, 1.81847379e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 11]), tensor([-1.,  1.]), tensor([0, 0]), tensor([3.30031720e+32, 2.68207062e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 45, 26, 11]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([3.30031720e+32, 4.25184220e-02, 6.31800145e-02, 6.53777570e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 45, 26, 11]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.30031720e+32, 4.25184220e-02, 6.31800145e-02, 3.81782502e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 45, 26, 11]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.30031720e+32, 4.25184220e-02, 5.91724366e-02, 6.37393445e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 45, 26, 11]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.30031720e+32, 4.25184220e-02, 5.91724366e-02, 3.77482623e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 45, 11]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([3.30031720e+32, 8.51440877e-02, 8.90262574e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 45, 11]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([3.30031720e+32, 8.51440877e-02, 3.09653748e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2871999740600586
10 lb beta sum: 0.4049525260925293, worst -0.2863955497741699
Time: prepare 0.0005    bound 0.1320    transfer 0.0003    finalize 0.0002    func 0.1331    
Accumulated time: func 0.8897    prepare 0.0442    bound 0.8170    transfer 0.0133    finalize 0.0170    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-12, 45] 
split level 1: [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 26] [/input-12, 26] 
split level 3: [/input-12, 37] [/input-12, 37] 
split level 4: [/input-8, 101] [/input-8, 101] 
split level 5: [/input-12, 33] [/input-12, 33] 
split level 6: [/input-8, 859] [/input-8, 100] 
cut re-enabled after branching node selection
0 lb beta sum: 0.26962050795555115, worst -0.13820266723632812
10 lb beta sum: 0.26962050795555115, worst -0.1377243995666504
Time: prepare 0.0113    bound 0.1382    transfer 0.0047    finalize 0.0017    func 0.1576    
Accumulated time: func 1.0473    prepare 0.0558    bound 0.9552    transfer 0.0180    finalize 0.0188    
all_split False
======================Cut inference begins======================
max lb tensor(0.09364647) min lb tensor(-0.13750744)
Number of Verified Splits: 132 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.2999572157859802, worst -0.14202648401260376
10 lb beta sum: 0.2999572157859802, worst -0.06601196527481079
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=70_spec=4_26516445.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 4
#cuts 4-6: 10
#cuts 7-9: 28
#cuts >= 20: 0
BICCOS time: 0.27068185806274414 
BICCOS Cumulative time: 0.38422369956970215
Preprocessing time: 0.007878303527832031 Inference time: 0.25368833541870117 Add cuts time: 0.005619049072265625 Cut analysis time: 0.0034961700439453125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13751 (7), -0.13348 (7), -0.12868 (7), -0.12706 (7), -0.12465 (7), -0.12374 (7), -0.12080 (7), -0.12073 (7), -0.11757 (7), -0.11636 (7), -0.11148 (7), -0.10981 (7), -0.10613 (7), -0.10544 (7), -0.10537 (7), -0.10201 (7), -0.10141 (7), -0.09969 (7), -0.09961 (7), -0.09828 (7), 
Length of domains: 124
Time: pickout 0.0006    decision 0.0199    set_bounds 0.0243    solve 0.1577    add 0.0841    
Accumulated time: pickout 0.0190    decision 0.6390    set_bounds 0.0911    solve 0.8541    add 0.8019    
Current (lb-rhs): -0.13750743865966797
274 domains visited
Cumulative time: 3.103933095932007

BaB round 2
batch: 124
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 106] [/input-8, 613] [/input-8, 106] [/input-8, 106] [/input-8, 614] [/input-8, 613] [/input-8, 859] [/input-8, 613] [/input-8, 614] [/input-8, 604] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1327524185180664
10 lb beta sum: 0.18776053190231323, worst -0.1320962905883789
Time: prepare 0.0053    bound 0.1599    transfer 0.0022    finalize 0.0016    func 0.1707    
Accumulated time: func 1.2180    prepare 0.0614    bound 1.1151    transfer 0.0202    finalize 0.0203    
all_split False
======================Cut inference begins======================
max lb tensor(0.01704073) min lb tensor(-0.13193655)
Number of Verified Splits: 20 of 248
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13448691368103027
10 lb beta sum: 0.278160035610199, worst -0.10274402797222137
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=70_spec=4_26516445.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 4
#cuts 4-6: 10
#cuts 7-9: 29
#cuts >= 20: 0
BICCOS time: 0.17496514320373535 
BICCOS Cumulative time: 0.5591888427734375
Preprocessing time: 0.007908821105957031 Inference time: 0.16223669052124023 Add cuts time: 0.0015730857849121094 Cut analysis time: 0.0032465457916259766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13194 (8), -0.12797 (8), -0.12296 (8), -0.12113 (8), -0.12043 (8), -0.11907 (8), -0.11730 (8), -0.11706 (8), -0.11536 (8), -0.11411 (8), -0.11382 (8), -0.11300 (8), -0.11103 (8), -0.11089 (8), -0.10985 (8), -0.10943 (8), -0.10766 (8), -0.10638 (8), -0.10518 (8), -0.10469 (8), 
Length of domains: 228
Time: pickout 0.0145    decision 0.0223    set_bounds 0.0119    solve 0.1708    add 0.0849    
Accumulated time: pickout 0.0335    decision 0.6613    set_bounds 0.1030    solve 1.0249    add 0.8868    
Current (lb-rhs): -0.13193655014038086
502 domains visited
Cumulative time: 3.5909624099731445

BaB round 3
batch: 228
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 614] [/input-8, 106] [/input-8, 614] [/input-8, 613] [/input-8, 820] [/input-8, 614] [/input-8, 859] [/input-8, 613] [/input-8, 614] [/input-8, 614] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12386322021484375
10 lb beta sum: 0.1834615021944046, worst -0.12324953079223633
Time: prepare 0.0096    bound 0.1606    transfer 0.0053    finalize 0.0027    func 0.1812    
Accumulated time: func 1.3992    prepare 0.0713    bound 1.2757    transfer 0.0255    finalize 0.0230    
all_split False
======================Cut inference begins======================
max lb tensor(0.01292419) min lb tensor(-0.12313604)
Number of Verified Splits: 44 of 456
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=70_spec=4_26516445.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 49.
#cuts 1-3: 4
#cuts 4-6: 16
#cuts 7-9: 29
#cuts >= 20: 0
BICCOS time: 0.02679896354675293 
BICCOS Cumulative time: 0.5859878063201904
Preprocessing time: 0.01417684555053711 Inference time: 0.004484653472900391 Add cuts time: 0.004643678665161133 Cut analysis time: 0.003493785858154297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12314 (9), -0.12243 (9), -0.11961 (9), -0.11797 (9), -0.11657 (9), -0.11300 (9), -0.11261 (9), -0.11153 (9), -0.11082 (9), -0.11014 (9), -0.10865 (9), -0.10835 (9), -0.10812 (9), -0.10776 (9), -0.10767 (9), -0.10748 (9), -0.10703 (9), -0.10568 (9), -0.10525 (9), -0.10496 (9), 
Length of domains: 412
Time: pickout 0.0171    decision 0.0246    set_bounds 0.2232    solve 0.1813    add 0.0979    
Accumulated time: pickout 0.0506    decision 0.6858    set_bounds 0.3262    solve 1.2062    add 0.9847    
Current (lb-rhs): -0.12313604354858398
914 domains visited
Cumulative time: 4.16912055015564

BaB round 4
batch: 412
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 613] [/input-8, 613] [/input-8, 102] [/input-8, 614] [/input-8, 102] [/input-8, 820] [/input-8, 102] [/input-8, 613] [/input-8, 613] [/input-8, 859] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11776566505432129
10 lb beta sum: 0.18392743170261383, worst -0.11734914779663086
Time: prepare 0.0162    bound 0.1568    transfer 0.0142    finalize 0.0043    func 0.1971    
Accumulated time: func 1.5963    prepare 0.0877    bound 1.4326    transfer 0.0397    finalize 0.0273    
all_split False
======================Cut inference begins======================
max lb tensor(0.04260327) min lb tensor(-0.11733580)
Number of Verified Splits: 108 of 824
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=70_spec=4_26516445.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 61.
#cuts 1-3: 4
#cuts 4-6: 25
#cuts 7-9: 32
#cuts >= 20: 0
BICCOS time: 0.05071306228637695 
BICCOS Cumulative time: 0.6367008686065674
Preprocessing time: 0.026520490646362305 Inference time: 0.012463808059692383 Add cuts time: 0.007674694061279297 Cut analysis time: 0.004054069519042969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11734 (10), -0.11665 (10), -0.11360 (10), -0.11341 (10), -0.11198 (10), -0.11198 (10), -0.11022 (10), -0.10801 (10), -0.10793 (10), -0.10742 (10), -0.10721 (10), -0.10586 (10), -0.10493 (10), -0.10384 (10), -0.10374 (10), -0.10337 (10), -0.10255 (10), -0.10226 (10), -0.10226 (10), -0.10174 (10), 
Length of domains: 716
Time: pickout 0.0199    decision 0.0367    set_bounds 0.0364    solve 0.1980    add 0.1272    
Accumulated time: pickout 0.0706    decision 0.7225    set_bounds 0.3626    solve 1.4043    add 1.1119    
Current (lb-rhs): -0.11733579635620117
1630 domains visited
Cumulative time: 4.646725177764893

BaB round 5
batch: 716
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 102] [/input-8, 102] [/input-8, 859] [/input-8, 859] [/input-8, 613] [/input-8, 604] [/input-8, 820] [/input-8, 859] [/input-8, 102] [/input-8, 859] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11259651184082031
10 lb beta sum: 0.18962956964969635, worst -0.11205863952636719
Time: prepare 0.0283    bound 0.1721    transfer 0.0266    finalize 0.0075    func 0.2439    
Accumulated time: func 1.8402    prepare 0.1162    bound 1.6047    transfer 0.0662    finalize 0.0348    
all_split False
======================Cut inference begins======================
max lb tensor(0.05014277) min lb tensor(-0.11200929)
Number of Verified Splits: 277 of 1432
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=70_spec=4_26516445.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 64.
#cuts 1-3: 6
#cuts 4-6: 23
#cuts 7-9: 35
#cuts >= 20: 0
BICCOS time: 0.09808588027954102 
BICCOS Cumulative time: 0.7347867488861084
Preprocessing time: 0.0482935905456543 Inference time: 0.03574252128601074 Add cuts time: 0.00969076156616211 Cut analysis time: 0.004359006881713867
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11201 (11), -0.11127 (11), -0.10911 (11), -0.10839 (11), -0.10822 (11), -0.10791 (11), -0.10646 (11), -0.10629 (11), -0.10534 (11), -0.10489 (11), -0.10473 (11), -0.10347 (11), -0.10314 (11), -0.10251 (11), -0.10247 (11), -0.10212 (11), -0.10175 (11), -0.10023 (11), -0.09962 (11), -0.09948 (11), 
Length of domains: 1155
Time: pickout 0.0731    decision 0.0537    set_bounds 0.0630    solve 0.2443    add 0.1147    
Accumulated time: pickout 0.1437    decision 0.7763    set_bounds 0.4256    solve 1.6486    add 1.2266    
Current (lb-rhs): -0.11200928688049316
2785 domains visited
Cumulative time: 5.312060832977295

BaB round 6
batch: 1155
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 820] [/input-8, 820] [/input-8, 821] [/input-8, 820] [/input-8, 820] [/input-8, 106] [/input-8, 820] [/input-8, 820] [/input-8, 613] [/input-8, 820] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10633993148803711
10 lb beta sum: 0.18985608220100403, worst -0.1058344841003418
Time: prepare 0.0459    bound 0.1964    transfer 0.0406    finalize 0.0149    func 0.3138    
Accumulated time: func 2.1540    prepare 0.1623    bound 1.8011    transfer 0.1069    finalize 0.0497    
all_split False
======================Cut inference begins======================
max lb tensor(0.28602952) min lb tensor(-0.10579348)
Number of Verified Splits: 372 of 2310
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=70_spec=4_26516445.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 10
#cuts 7-9: 9
#cuts >= 20: 0
BICCOS time: 0.2865910530090332 
BICCOS Cumulative time: 1.0213778018951416
Preprocessing time: 0.23228144645690918 Inference time: 0.04467964172363281 Add cuts time: 0.007721662521362305 Cut analysis time: 0.0019083023071289062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10579 (12), -0.10535 (12), -0.10353 (12), -0.10293 (12), -0.10259 (12), -0.10249 (12), -0.10157 (12), -0.10107 (12), -0.10089 (12), -0.10066 (12), -0.09977 (12), -0.09970 (12), -0.09956 (12), -0.09908 (12), -0.09871 (12), -0.09801 (12), -0.09801 (12), -0.09800 (12), -0.09791 (12), -0.09783 (12), 
Length of domains: 1938
Time: pickout 0.0397    decision 0.0861    set_bounds 0.1078    solve 0.3152    add 0.1440    
Accumulated time: pickout 0.1834    decision 0.8624    set_bounds 0.5334    solve 1.9637    add 1.3706    
Current (lb-rhs): -0.10579347610473633
4723 domains visited
Cumulative time: 6.30348014831543

BaB round 7
batch: 1938
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 290] [/input-8, 821] [/input-8, 604] [/input-8, 821] [/input-8, 106] [/input-8, 821] [/input-8, 821] [/input-8, 820] [/input-8, 1819] [/input-8, 821] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10467314720153809
10 lb beta sum: 0.6730877757072449, worst -0.10414266586303711
Time: prepare 0.0772    bound 0.2786    transfer 0.0514    finalize 0.0191    func 0.4523    
Accumulated time: func 2.6063    prepare 0.2398    bound 2.0798    transfer 0.1583    finalize 0.0688    
all_split False
======================Cut inference begins======================
max lb tensor(0.54779851) min lb tensor(-0.10411263)
Number of Verified Splits: 2904 of 3876
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=70_spec=4_26516445.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 21
#cuts >= 20: 0
BICCOS time: 0.6806883811950684 
BICCOS Cumulative time: 1.70206618309021
Preprocessing time: 0.1299881935119629 Inference time: 0.5075109004974365 Add cuts time: 0.041594743728637695 Cut analysis time: 0.00159454345703125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10411 (13), -0.10093 (13), -0.09918 (13), -0.09702 (13), -0.09616 (13), -0.09616 (13), -0.09508 (13), -0.09470 (13), -0.09352 (13), -0.09343 (13), -0.09319 (13), -0.09297 (13), -0.09273 (13), -0.09162 (13), -0.09154 (13), -0.09148 (13), -0.09148 (13), -0.09125 (13), -0.09124 (13), -0.09120 (13), 
Length of domains: 972
Time: pickout 0.0994    decision 0.1217    set_bounds 0.1714    solve 0.4532    add 0.0923    
Accumulated time: pickout 0.2828    decision 0.9841    set_bounds 0.7048    solve 2.4170    add 1.4630    
Current (lb-rhs): -0.10411262512207031
5695 domains visited
Cumulative time: 7.956101655960083

BaB round 8
batch: 972
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 604] [/input-8, 290] [/input-8, 867] [/input-8, 859] [/input-8, 290] [/input-8, 859] [/input-8, 867] [/input-8, 290] [/input-8, 867] [/input-8, 290] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10157275199890137
10 lb beta sum: 1.8467838764190674, worst -0.08915320038795471
Time: prepare 0.0381    bound 0.1779    transfer 0.0088    finalize 0.0100    func 0.2478    
Accumulated time: func 2.8541    prepare 0.2781    bound 2.2577    transfer 0.1671    finalize 0.0788    
all_split False
======================Cut inference begins======================
max lb tensor(1.16967416) min lb tensor(-0.08908942)
Number of Verified Splits: 1855 of 1944
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=70_spec=4_26516445.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.311751127243042 
BICCOS Cumulative time: 2.013817310333252
Preprocessing time: 0.06145286560058594 Inference time: 0.22584247589111328 Add cuts time: 0.023333072662353516 Cut analysis time: 0.0011227130889892578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08909 (14), -0.08595 (14), -0.08547 (14), -0.08236 (14), -0.08034 (14), -0.07888 (14), -0.07677 (14), -0.07534 (14), -0.07236 (14), -0.07048 (14), -0.06881 (14), -0.06730 (14), -0.06726 (14), -0.06414 (14), -0.06374 (14), -0.06062 (14), -0.06033 (14), -0.05998 (14), -0.05883 (14), -0.05673 (14), 
Length of domains: 89
Time: pickout 0.0277    decision 0.0648    set_bounds 0.0853    solve 0.2482    add 0.0800    
Accumulated time: pickout 0.3105    decision 1.0490    set_bounds 0.7902    solve 2.6651    add 1.5430    
Current (lb-rhs): -0.08908942341804504
5784 domains visited
Cumulative time: 8.793641328811646

BaB round 9
batch: 89
splitting decisions: 
split level 0: [/input-8, 426] [/input-8, 604] [/input-8, 821] [/input-8, 290] [/input-8, 821] [/input-8, 604] [/input-8, 290] [/input-8, 426] [/input-8, 821] [/input-8, 290] 
split level 1: [/input-8, 102] [/input-8, 1827] [/input-8, 426] [/input-8, 1827] [/input-8, 426] [/input-8, 1827] [/input-8, 1827] [/input-8, 102] [/input-8, 426] [/input-8, 1827] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09213924407958984

all verified at 4th iter
Time: prepare 0.0072    bound 0.0343    transfer 0.0037    finalize 0.0022    func 0.0503    
Accumulated time: func 2.9043    prepare 0.2855    bound 2.2920    transfer 0.1708    finalize 0.0810    
all_split False
======================Cut inference begins======================
max lb tensor(0.12754887) min lb tensor(0.03510040)
Number of Verified Splits: 356 of 356
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=70_spec=4_26516445.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0014
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.012130975723266602 
BICCOS Cumulative time: 2.0259482860565186
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0343    decision 0.0211    set_bounds 0.0171    solve 0.0504    add 0.0001    
Accumulated time: pickout 0.3448    decision 1.0701    set_bounds 0.8072    solve 2.7155    add 1.5430    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
5784 domains visited
Cumulative time: 8.93000340461731

found process to kill: terminal indx = 4
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=70_spec=4_26516445.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=70_spec=4_26516445.indx
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=70_spec=4_26516445.log
found process for pidx=4
kill process for pidx=4
Result: safe in 11.8538 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 71, vnnlib ID: 71 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.23181081, -6.13865471, -5.08255959, -5.81894684, -5.10377789,
         -6.43214750, -5.88667679, -5.84751606, -6.03846073, -6.48124504]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [600]; unstable size 600; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 134, 1, 600] with unstable size 133 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 600] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 600] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [133]; unstable size 133; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 133] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 133] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.68216181, 2.01670480, 2.51456165, 1.81788015, 2.98190951, 2.39753675,
         2.20995593, 2.77434349, 3.16959429]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0662 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 72, vnnlib ID: 72 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.04805279, -11.81328869,  -6.59518147,  -6.36475563,  -7.03116512,
          -6.60425329,  -7.20965433,  -8.31397438,  -8.97400188, -10.04430199]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [644]; unstable size 644; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 218, 1, 644] with unstable size 217 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 644] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 644] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [217]; unstable size 217; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 217] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 217] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.59573537,  3.84289050, -0.66203916, -0.35017097, -0.20632473,
          0.11054754,  0.49438119,  0.95489419,  1.85776734]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.04805279, -11.81328869,  -6.59518147,  -6.36475563,  -7.03116512,
          -6.60425329,  -7.20965433,  -8.31397438,  -8.97400188, -10.04430199]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.36461830, -12.41466999,  -6.69172573,  -6.96715069,  -7.39786720,
           -7.23974705,  -7.79054642,  -8.72789097,  -9.53622437, -10.75177860],
         [ -7.36461830, -12.41466999,  -6.69172573,  -6.96715069,  -7.39786720,
           -7.23974705,  -7.79054642,  -8.72789097,  -9.53622437, -10.75177860]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.39746761, -0.27542496,  0.43071651,  0.27259636]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0074 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0758 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 73, vnnlib ID: 73 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.91584206, -11.23733044,  -4.95584011,  -5.17609406,  -4.67090321,
          -5.68216658,  -2.94505668,  -7.65497255, -10.49558067, -10.30911922]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [530]; unstable size 530; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 286, 1, 530] with unstable size 285 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 530] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 530] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [285]; unstable size 285; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 285] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 285] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.01592350, 5.78018856, 0.67337513, 0.94681978, 0.40892124, 1.18366778,
         2.78911209, 4.93772984, 4.91414595]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0624 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 74, vnnlib ID: 74 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.75821781, -13.33421040,  -9.89368343,  -9.90017796,  -8.64980602,
          -9.78042221,  -9.99710751,  -4.75752258, -13.64687443, -11.43529987]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [557]; unstable size 557; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 557] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 557] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 557] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 216] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.65111065, 6.98895788, 3.93457890, 3.96870160, 2.90565753, 3.92689180,
         3.80601048, 7.22786236, 5.19847059]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0640 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 75, vnnlib ID: 75 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.29954243, -11.45261860, -13.34986973, -13.67515564, -13.40554333,
         -14.42231846, -13.27403164, -13.71299839, -10.82265949, -11.58751392]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [682]; unstable size 682; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 682] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 682] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 682] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 184] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.10945797,  1.98779726,  2.28032899,  1.90550256,  2.75677061,
          1.69960511,  1.94380963, -0.60779333, -0.09704113]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.29954243, -11.45261860, -13.34986973, -13.67515564, -13.40554333,
         -14.42231846, -13.27403164, -13.71299839, -10.82265949, -11.58751392]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.56004143, -11.40791702, -13.46516991, -13.67159748, -13.50708389,
          -14.36042309, -13.32153130, -13.76793098, -10.36413670, -11.49154568],
         [-10.56004143, -11.40791702, -13.46516991, -13.67159748, -13.50708389,
          -14.36042309, -13.32153130, -13.76793098, -10.36413670, -11.49154568]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.84787560, -0.19590473,  0.93150425]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0063 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0552 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 76, vnnlib ID: 76 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.85307121, -8.24333668, -2.96728778, -1.66786790, -3.85206652,
         -1.00410879, -4.09244967, -4.12650394, -7.75833988, -6.65997744]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [554]; unstable size 554; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 227, 1, 554] with unstable size 226 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 554] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 554] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [226]; unstable size 226; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 226] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 226] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.37778568, 5.08529711, 0.43795514, 0.25316507, 1.50299811, 1.94422328,
         2.22069502, 4.52716494, 3.75112343]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0512 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 77, vnnlib ID: 77 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.27097034, -11.59263897, -13.77681637, -13.17456245, -13.49902725,
         -13.92919827, -14.42542553, -14.19969749,  -9.72965145,  -9.57371902]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [484]; unstable size 484; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 175, 1, 484] with unstable size 174 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 484] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 484] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [174]; unstable size 174; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 174] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.28471565,  1.18307257,  2.52050495,  2.22602797,  2.26000166,
          2.91944218,  3.25191402,  3.06435537, -1.13768911]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.27097034, -11.59263897, -13.77681637, -13.17456245, -13.49902725,
         -13.92919827, -14.42542553, -14.19969749,  -9.72965145,  -9.57371902]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.00795650, -11.61491489, -13.44652462, -12.92903709, -13.19156456,
          -13.75599670, -14.05601978, -14.12758446,  -9.19895077,  -9.85582066]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.65686989]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0061 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0718 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 78, vnnlib ID: 78 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.73918152, -8.53411102, -3.85345960, -3.82583189, -3.55089569,
         -4.12887335, -4.16478586, -5.91378498, -8.29353142, -8.77650642]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [613]; unstable size 613; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 281, 1, 613] with unstable size 280 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 613] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 613] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [280]; unstable size 280; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 280] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 280] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.07348084,  1.60172272, -1.32437325, -1.43540144, -0.22906235,
         -0.94617903,  0.48511839,  2.09677744,  2.21030140]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.73918152, -8.53411102, -3.85345960, -3.82583189, -3.55089569,
         -4.12887335, -4.16478586, -5.91378498, -8.29353142, -8.77650642]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.73918104, -8.53411007, -3.85345936, -3.82583237, -3.55089521,
          -4.12887335, -4.16478539, -5.91378498, -8.29353142, -8.77650642],
         [-5.73918104, -8.53411007, -3.85345936, -3.82583237, -3.55089521,
          -4.12887335, -4.16478539, -5.91378498, -8.29353142, -8.77650642]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.91334867,  0.02762699, -0.27493715,  0.30304098,  0.33895302]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0767 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 79, vnnlib ID: 79 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.05248165, -11.65894604, -12.25777149, -10.95008183,  -9.94209957,
         -10.12332249, -11.05361462,  -6.32633877, -14.71703625, -10.15004635]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [432]; unstable size 432; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 201, 1, 432] with unstable size 200 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 432] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 432] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 200] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.82437634, 2.96819687, 4.11948109, 3.11231136, 2.39884830, 2.32052040,
         2.91186976, 6.36293125, 1.88987517]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0627 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 80, vnnlib ID: 80 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.44930172, -15.25463963,  -9.82252502, -12.00500107,  -9.42480278,
         -12.67968750, -10.39871120, -11.85678768, -11.46559906, -13.09015942]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [742]; unstable size 742; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 301, 1, 742] with unstable size 300 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 742] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 742] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [300]; unstable size 300; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 300] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 300] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.98650265, -1.78932333,  0.26673231, -2.52717876,  0.69541496,
         -1.41547823, -0.58254147, -0.39011693,  1.13849401]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.44930172, -15.25463963,  -9.82252502, -12.00500107,  -9.42480278,
         -12.67968750, -10.39871120, -11.85678768, -11.46559906, -13.09015942]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.44930172, -15.25463867,  -9.82252502, -12.00500011,  -9.42480087,
          -12.67968464, -10.39871025, -11.85678864, -11.46559906, -13.09015942],
         [-10.44930172, -15.25463867,  -9.82252502, -12.00500011,  -9.42480087,
          -12.67968464, -10.39871025, -11.85678864, -11.46559906, -13.09015942]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.62677670, -1.02450085, -0.05059147,  1.40748692,  1.01629734]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0805 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 81, vnnlib ID: 81 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.10813904, -15.89954853,  -7.31516552, -10.82333755,  -8.54076099,
         -10.33981800, -11.38731098, -12.22146320, -14.46312428, -15.25714493]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [595]; unstable size 595; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 191, 1, 595] with unstable size 190 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 595] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 595] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [190]; unstable size 190; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 190] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 190] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.01580000, 7.21389246, 2.88120961, 0.47409198, 2.25944805, 3.19084311,
         3.74374294, 5.93748760, 6.55921412]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0631 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 82, vnnlib ID: 82 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.24675894, -8.88183308, -4.39334679, -3.84514856, -4.41373539,
         -4.05639076, -4.91783571, -6.25871420, -9.17700768, -7.08661222]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [586]; unstable size 586; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 303, 1, 586] with unstable size 302 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 586] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 586] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [302]; unstable size 302; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 302] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 302] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.48434615,  2.69666815, -0.88318038, -0.67275059, -1.05266643,
         -0.60235155,  1.16763556,  2.82550097,  1.08651662]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.24675894, -8.88183308, -4.39334679, -3.84514856, -4.41373539,
         -4.05639076, -4.91783571, -6.25871420, -9.17700768, -7.08661222]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.24675846, -8.88183308, -4.39334631, -3.84514809, -4.41373491,
          -4.05638981, -4.91783571, -6.25871420, -9.17700863, -7.08661318],
         [-6.24675846, -8.88183308, -4.39334631, -3.84514809, -4.41373491,
          -4.05638981, -4.91783571, -6.25871420, -9.17700863, -7.08661318]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.33695650, -0.21124172,  0.35734510,  0.86144590]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0767 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 83, vnnlib ID: 83 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.36881924, -3.89865160, -7.93544197, -6.23400021, -6.74230671,
         -6.96568727, -8.17397594, -6.56449556, -5.37149715, -2.30208302]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [592]; unstable size 592; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 220, 1, 592] with unstable size 219 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 592] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 592] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [219]; unstable size 219; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 219] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 219] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.89441252, 0.29969537, 2.93555880, 1.68636417, 1.92623091, 2.15194607,
         3.21918106, 1.75679541, 0.56472874]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0621 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 84, vnnlib ID: 84 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.80086327, -15.88022327,  -7.39093113,  -9.48237228,  -6.51979351,
          -9.19186211,  -7.76570368, -10.53886223, -14.64324093, -15.33413029]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [570]; unstable size 570; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 179, 1, 570] with unstable size 178 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 570] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 570] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [178]; unstable size 178; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 178] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 178] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.99768186,  7.91173935, -0.14131743,  2.21972251,  1.75214720,
          0.21274042,  3.05064726,  6.73370552,  7.60544586]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.80086327, -15.88022327,  -7.39093113,  -9.48237228,  -6.51979351,
          -9.19186211,  -7.76570368, -10.53886223, -14.64324093, -15.33413029]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.62it/s]100%|██████████| 1/1 [00:00<00:00,  7.62it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.14279652, -15.40082264,  -6.68534565,  -9.07696342,  -6.41399288,
           -8.82852745,  -7.32211304, -10.51490021, -14.15589237, -15.02890968]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.27135277]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1340 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 33.62461471557617
alpha/beta optimization time: 1.3770837783813477
initial alpha-crown bounds: tensor([[ 4.04458427,  7.94689751, -0.11414796,  2.23972178,  1.77452922,
          0.24281144,  3.07658243,  6.77713490,  7.63649988]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.11414796113967896
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6273 seconds.
lower bounds for all target labels: [4.044583320617676, 7.946896553039551, -0.11414670944213867, 2.2397212982177734, 1.7745294570922852, 0.2428112030029297, 3.0765836238861084, 6.777133941650391, 7.636497974395752]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [2]
start creating model mps for candidates: ['lay/16_2']
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.34163761138916
Verifying property 0 with 1 instances.
##### Instance 84 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 7.946897506713867.

Properties batch 1, size 1
Remaining timeout: 198.17015671730042
Verifying property 1 with 1 instances.
##### Instance 84 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 7.636499881744385.

Properties batch 2, size 1
Remaining timeout: 198.07080841064453
Verifying property 2 with 1 instances.
##### Instance 84 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.777134895324707.

Properties batch 3, size 1
Remaining timeout: 197.97434878349304
Verifying property 3 with 1 instances.
##### Instance 84 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.044584274291992.

Properties batch 4, size 1
Remaining timeout: 197.87978720664978
Verifying property 4 with 1 instances.
##### Instance 84 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.076582431793213.

Properties batch 5, size 1
Remaining timeout: 197.78552198410034
Verifying property 5 with 1 instances.
##### Instance 84 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.2397217750549316.

Properties batch 6, size 1
Remaining timeout: 197.68805265426636
Verifying property 6 with 1 instances.
##### Instance 84 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.774529218673706.

Properties batch 7, size 1
Remaining timeout: 197.58677434921265
Verifying property 7 with 1 instances.
##### Instance 84 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2428114414215088.

Properties batch 8, size 1
Remaining timeout: 197.46775817871094
Verifying property 8 with 1 instances.
##### Instance 84 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.11414796]], device='cuda:0') need to verify.
Model prediction is: tensor([-11.80086327, -15.88022327,  -7.39093113,  -9.48237228,  -6.51979351,
         -9.19186211,  -7.76570368, -10.53886223, -14.64324093, -15.33413029],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.11414796]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 570
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 175
Node /15 input 0: size torch.Size([100]) unstable 11
-----------------
# of unstable neurons: 756
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0007958412170410156
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0570    transfer 0.0001    finalize 0.0002    func 0.0576    
Accumulated time: func 0.0576    prepare 0.0003    bound 0.0570    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 1] 
split level 1: [/input-12, 93] 
split level 2: [/input-12, 15] 
split level 3: [/input-12, 26] 
split level 4: [/input-12, 6] 
split level 5: [/input-8, 1892] 
split level 6: [/input-12, 11] 
split level 7: [/input-12, 68] 
split level 8: [/input-8, 1908] 
split level 9: [/input-8, 1919] 
split level 10: [/input-12, 9] 
split level 11: [/input-8, 1081] 
split level 12: [/input-8, 1884] 
split level 13: [/input, 2780] 
split level 14: [/input-8, 1878] 
split level 15: [/input-8, 1877] 
split level 16: [/input-8, 1917] 
split level 17: [/input-8, 1915] 
split level 18: [/input-8, 1895] 
split level 19: [/input-8, 1057] 
split level 20: [/input-8, 1893] 
split level 21: [/input-8, 1354] 
split level 22: [/input-8, 101] 
split level 23: [/input-8, 1083] 
split level 24: [/input-8, 1901] 
split level 25: [/input-8, 1918] 
split level 26: [/input-8, 1138] 
split level 27: [/input-8, 1365] 
split level 28: [/input-8, 1366] 
split level 29: [/input-8, 699] 
split level 30: [/input, 2747] 
split level 31: [/input, 1758] 
split level 32: [/input-8, 1870] 
split level 33: [/input-8, 1316] 
split level 34: [/input-8, 1074] 
split level 35: [/input-8, 1869] 
split level 36: [/input-8, 689] 
split level 37: [/input-8, 1076] 
split level 38: [/input-8, 1358] 
split level 39: [/input-8, 1369] 
split level 40: [/input-8, 1337] 
split level 41: [/input, 2520] 
split level 42: [/input-8, 94] 
split level 43: [/input, 2456] 
split level 44: [/input, 2440] 
split level 45: [/input-8, 1025] 
split level 46: [/input, 2796] 
split level 47: [/input-8, 553] 
split level 48: [/input-8, 524] 
split level 49: [/input-8, 674] 
split level 50: [/input-8, 573] 
split level 51: [/input-8, 1913] 
split level 52: [/input-8, 1516] 
split level 53: [/input-8, 642] 
split level 54: [/input-8, 532] 
split level 55: [/input, 1773] 
split level 56: [/input-8, 1150] 
split level 57: [/input, 2505] 
split level 58: [/input, 1703] 
split level 59: [/input-8, 516] 
split level 60: [/input-8, 651] 
split level 61: [/input-8, 1881] 
split level 62: [/input, 1739] 
split level 63: [/input, 2745] 
split level 64: [/input-8, 474] 
split level 65: [/input-8, 147] 
split level 66: [/input, 2491] 
split level 67: [/input-8, 1897] 
split level 68: [/input-8, 1904] 
split level 69: [/input, 2409] 
split level 70: [/input, 2414] 
split level 71: [/input, 2535] 
split level 72: [/input, 2518] 
split level 73: [/input-8, 1889] 
split level 74: [/input, 2510] 
split level 75: [/input-8, 1914] 
split level 76: [/input, 3314] 
split level 77: [/input, 2490] 
split level 78: [/input-8, 1342] 
split level 79: [/input, 2439] 
split level 80: [/input-8, 969] 
split level 81: [/input-8, 1114] 
split level 82: [/input, 2458] 
split level 83: [/input, 2812] 
split level 84: [/input-8, 1377] 
split level 85: [/input, 2489] 
split level 86: [/input-8, 122] 
split level 87: [/input, 2684] 
split level 88: [/input, 2468] 
split level 89: [/input-8, 693] 
split level 90: [/input-8, 1374] 
split level 91: [/input-8, 886] 
split level 92: [/input, 2533] 
split level 93: [/input, 1767] 
split level 94: [/input-8, 974] 
split level 95: [/input, 1656] 
split level 96: [/input, 220] 
split level 97: [/input, 2493] 
split level 98: [/input, 1752] 
split level 99: [/input, 1626] 
split level 100: [/input-8, 1880] 
split level 101: [/input-8, 1888] 
split level 102: [/input, 2445] 
split level 103: [/input-8, 1027] 
split level 104: [/input, 3576] 
split level 105: [/input, 4072] 
split level 106: [/input, 2897] 
split level 107: [/input-8, 889] 
split level 108: [/input-8, 1293] 
split level 109: [/input, 2463] 
split level 110: [/input, 1641] 
split level 111: [/input, 757] 
split level 112: [/input, 1642] 
split level 113: [/input, 3283] 
split level 114: [/input-12, 53] 
split level 115: [/input-8, 1803] 
split level 116: [/input, 1522] 
split level 117: [/input, 498] 
split level 118: [/input-8, 1468] 
split level 119: [/input, 1743] 
split level 120: [/input-8, 1424] 
split level 121: [/input, 2546] 
split level 122: [/input-8, 1106] 
split level 123: [/input-8, 1015] 
split level 124: [/input-8, 953] 
split level 125: [/input, 2993] 
split level 126: [/input-8, 1023] 
split level 127: [/input-8, 1079] 
split level 128: [/input, 2363] 
split level 129: [/input, 2444] 
split level 130: [/input, 1700] 
split level 131: [/input-8, 74] 
split level 132: [/input, 1784] 
split level 133: [/input, 2184] 
split level 134: [/input, 2881] 
split level 135: [/input, 2707] 
split level 136: [/input, 3262] 
split level 137: [/input-8, 907] 
split level 138: [/input, 4060] 
split level 139: [/input, 3538] 
split level 140: [/input-8, 1302] 
split level 141: [/input, 3293] 
split level 142: [/input, 2715] 
split level 143: [/input, 1596] 
split level 144: [/input, 1189] 
split level 145: [/input, 2930] 
split level 146: [/input, 226] 
split level 147: [/input, 2898] 
split level 148: [/input, 4027] 
split level 149: [/input, 4075] 
split level 150: [/input, 3397] 
split level 151: [/input, 2977] 
split level 152: [/input, 2475] 
split level 153: [/input, 690] 
split level 154: [/input, 2913] 
split level 155: [/input, 3297] 
split level 156: [/input, 3266] 
split level 157: [/input-8, 1448] 
split level 158: [/input, 3310] 
split level 159: [/input, 1367] 
split level 160: [/input, 292] 
split level 161: [/input-8, 1400] 
split level 162: [/input, 2464] 
split level 163: [/input, 1088] 
split level 164: [/input-8, 913] 
split level 165: [/input, 1595] 
split level 166: [/input, 1441] 
split level 167: [/input, 2553] 
split level 168: [/input, 2945] 
split level 169: [/input, 2515] 
split level 170: [/input-8, 856] 
split level 171: [/input, 2928] 
split level 172: [/input, 673] 
split level 173: [/input, 3308] 
split level 174: [/input, 2216] 
split level 175: [/input, 1682] 
split level 176: [/input-8, 1912] 
split level 177: [/input-8, 579] 
split level 178: [/input-8, 1137] 
split level 179: [/input, 2183] 
split level 180: [/input, 3232] 
split level 181: [/input, 4026] 
split level 182: [/input, 2994] 
split level 183: [/input-8, 1974] 
split level 184: [/input, 2480] 
split level 185: [/input, 3319] 
split level 186: [/input, 22] 
split level 187: [/input, 2843] 
split level 188: [/input, 1489] 
split level 189: [/input, 3216] 
split level 190: [/input, 2192] 
split level 191: [/input, 3506] 
split level 192: [/input, 3076] 
split level 193: [/input, 1648] 
split level 194: [/input, 2961] 
split level 195: [/input, 2453] 
split level 196: [/input, 2400] 
split level 197: [/input, 2946] 
split level 198: [/input, 2975] 
split level 199: [/input, 2944] 
Time: prepare 0.0066    bound 0.0989    transfer 0.0080    finalize 0.0069    func 0.1204    
Accumulated time: func 0.1781    prepare 0.0169    bound 0.1558    transfer 0.0081    finalize 0.0071    
all_split False
======================Cut inference begins======================
max lb tensor(0.25377703) min lb tensor(-0.11412340)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.015997886657714844 
BICCOS Cumulative time: 0.015997886657714844
Preprocessing time: 0.014225006103515625 Inference time: 0.0002789497375488281 Add cuts time: 0.00012302398681640625 Cut analysis time: 0.0013709068298339844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10323 (1), -0.10322 (1), -0.10258 (1), -0.10253 (1), -0.10239 (1), -0.10214 (1), -0.10202 (1), -0.10190 (1), -0.10184 (1), -0.10125 (1), -0.10074 (1), -0.09905 (1), -0.09812 (1), -0.09754 (1), -0.09714 (1), -0.09656 (1), -0.09614 (1), -0.09574 (1), -0.09571 (1), -0.09492 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5242    set_bounds 0.0181    solve 0.1206    add 0.1933    
Accumulated time: pickout 0.0004    decision 0.5242    set_bounds 0.0181    solve 0.1206    add 0.1933    
Current (lb-rhs): -0.1032288670539856
50 domains visited
Cumulative time: 0.9473371505737305

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 1] [/input-12, 15] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 1: [/input-12, 15] [/input-12, 15] [/input-12, 26] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] 
split level 2: [/input-12, 26] [/input-12, 26] [/input-12, 6] [/input-12, 26] [/input-12, 26] [/input-12, 6] [/input-12, 6] [/input-12, 26] [/input-12, 26] [/input-12, 26] 
split level 3: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 6] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08700886368751526

all verified at 4th iter
Time: prepare 0.0078    bound 0.0327    transfer 0.0013    finalize 0.0053    func 0.0498    
Accumulated time: func 0.2278    prepare 0.0249    bound 0.1885    transfer 0.0094    finalize 0.0124    
all_split False
======================Cut inference begins======================
max lb tensor(0.19232976) min lb tensor(0.00054699)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.044341087341308594 
BICCOS Cumulative time: 0.06033897399902344
Preprocessing time: 0.0172269344329834 Inference time: 0.018350839614868164 Add cuts time: 0.008118867874145508 Cut analysis time: 0.0006444454193115234
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0025    decision 0.0216    set_bounds 0.0147    solve 0.0499    add 0.0197    
Accumulated time: pickout 0.0029    decision 0.5457    set_bounds 0.0327    solve 0.1705    add 0.2130    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26,  1]), tensor([-1., -1.]), tensor([0, 0]), tensor([3.30031720e+32, 7.87377805e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26,  1]), tensor([-1.,  1.]), tensor([0, 0]), tensor([3.30031720e+32, 1.28914878e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26,  1]), tensor([ 1., -1.]), tensor([0, 0]), tensor([3.30031720e+32, 7.73042291e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26,  1]), tensor([1., 1.]), tensor([0, 0]), tensor([3.30031720e+32, 1.30506411e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.005819380283355713

all verified at 0th iter
Time: prepare 0.0004    bound 0.0049    transfer 0.0002    finalize 0.0002    func 0.0057    
Accumulated time: func 0.2335    prepare 0.0253    bound 0.1934    transfer 0.0096    finalize 0.0125    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
Result: safe in 4.0450 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 85, vnnlib ID: 85 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.42035007, -11.01566029, -16.78618240, -17.08073235, -15.94405842,
         -18.31308746, -16.60547638, -16.45758438, -12.49265862, -13.06334209]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [534]; unstable size 534; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 534] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 534] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 534] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 197] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.66741276, 3.53291893, 4.23365259, 2.83012867, 5.27459478, 3.79739332,
         3.37451935, 0.14124155, 1.17811871]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.1195 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 86, vnnlib ID: 86 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.28128910, -17.14933395, -11.40331554, -14.08204365, -14.06262875,
         -13.41378117, -16.03304672, -13.62230492, -16.91720581, -17.59583473]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [674]; unstable size 674; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 194, 1, 674] with unstable size 193 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 674] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 674] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [193]; unstable size 193; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 193] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 193] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.10949564, 4.45415878, 2.07507992, 2.01375389, 1.43745148, 3.63756847,
         1.59498572, 4.70254755, 5.05546284]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0688 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 87, vnnlib ID: 87 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.75811863, -7.24076557, -3.96754313, -3.75479078, -2.71305084,
         -3.64833927, -3.95274568, -3.04537916, -8.23825359, -5.63892746]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [434]; unstable size 434; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 222, 1, 434] with unstable size 221 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 434] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 434] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [221]; unstable size 221; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 221] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 221] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.55352449,  1.36358547, -0.76676714, -0.70900589, -1.60512829,
         -0.78009832, -1.31760657,  2.84528255,  0.56516743]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.75811863, -7.24076557, -3.96754313, -3.75479078, -2.71305084,
         -3.64833927, -3.95274568, -3.04537916, -8.23825359, -5.63892746]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.75811815, -7.24076557, -3.96754289, -3.75479031, -2.71305084,
          -3.64833879, -3.95274591, -3.04537868, -8.23825359, -5.63892746],
         [-7.75811815, -7.24076557, -3.96754289, -3.75479031, -2.71305084,
          -3.64833879, -3.95274591, -3.04537868, -8.23825359, -5.63892746]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.92216420,  0.70941162, -0.33232784,  0.60296011,  0.90736723]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0805 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 88, vnnlib ID: 88 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.13618565, -7.95294571, -3.64413977, -3.37936306, -3.17752457,
         -3.15863037, -5.09549570, -2.59429359, -6.38139343, -5.47579718]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [416]; unstable size 416; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 168, 1, 416] with unstable size 167 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 416] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 416] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [167]; unstable size 167; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 167] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 167] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.65106130,  3.34274721, -0.95804226, -1.22589183, -1.23296714,
          0.48913801, -2.05695343,  1.96782136,  0.53511143]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.13618565, -7.95294571, -3.64413977, -3.37936306, -3.17752457,
         -3.15863037, -5.09549570, -2.59429359, -6.38139343, -5.47579718]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.13618565, -7.95294476, -3.64413953, -3.37936282, -3.17752457,
          -3.15863037, -5.09549522, -2.59429312, -6.38139343, -5.47579718],
         [-6.13618565, -7.95294476, -3.64413953, -3.37936282, -3.17752457,
          -3.15863037, -5.09549522, -2.59429312, -6.38139343, -5.47579718]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.26477671, -0.46661496, -0.48550916, -1.04984641]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0830 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 89, vnnlib ID: 89 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.58886576, -2.20369244, -8.07431412, -7.83337307, -7.94223309,
         -9.24308968, -8.43767738, -8.89227295, -3.14519000, -4.67166090]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [472]; unstable size 472; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 211, 1, 472] with unstable size 210 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 472] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 472] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [210]; unstable size 210; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 210] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 210] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.69297743,  3.94914913,  3.92555046,  4.07342148,  5.17004442,
          4.61111021,  4.71607924, -0.48206663,  1.52207375]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.58886576, -2.20369244, -8.07431412, -7.83337307, -7.94223309,
         -9.24308968, -8.43767738, -8.89227295, -3.14519000, -4.67166090]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.67it/s]100%|██████████| 1/1 [00:00<00:00,  7.67it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.60679770, -2.84526992, -8.02832699, -7.76222277, -7.95738125,
          -9.17969418, -8.46947193, -8.89546585, -2.92605209, -5.02369881]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.08078218]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1334 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 29.900592803955078
alpha/beta optimization time: 1.3844802379608154
initial alpha-crown bounds: tensor([[ 1.81915188,  4.04639530,  4.01018667,  4.15022802,  5.26251125,
          4.67265892,  4.80006552, -0.42642927,  1.56582546]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.42642927169799805
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6103 seconds.
lower bounds for all target labels: [1.8191499710083008, 4.046395301818848, 4.010186672210693, 4.150228023529053, 5.262511253356934, 4.672658920288086, 4.800065517425537, -0.42642927169799805, 1.5658254623413086]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [7]
start creating model mps for candidates: ['lay/16_7']
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 234118 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.33800959587097
Verifying property 0 with 1 instances.
##### Instance 89 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.262511253356934.

Properties batch 1, size 1
Remaining timeout: 198.09265613555908
Verifying property 1 with 1 instances.
##### Instance 89 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.800065517425537.

Properties batch 2, size 1
Remaining timeout: 197.96474289894104
Verifying property 2 with 1 instances.
##### Instance 89 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.672658920288086.

Properties batch 3, size 1
Remaining timeout: 197.8576214313507
Verifying property 3 with 1 instances.
##### Instance 89 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.150228023529053.

Properties batch 4, size 1
Remaining timeout: 197.771071434021
Verifying property 4 with 1 instances.
##### Instance 89 first 10 spec matrices: 
tensor([[[ 0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.046395301818848.

Properties batch 5, size 1
Remaining timeout: 197.6872181892395
Verifying property 5 with 1 instances.
##### Instance 89 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.010186672210693.

Properties batch 6, size 1
Remaining timeout: 197.6035943031311
Verifying property 6 with 1 instances.
##### Instance 89 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.8191518783569336.

Properties batch 7, size 1
Remaining timeout: 197.48958945274353
Verifying property 7 with 1 instances.
##### Instance 89 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.5658254623413086.

Properties batch 8, size 1
Remaining timeout: 197.40507888793945
Verifying property 8 with 1 instances.
##### Instance 89 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.42642927]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.58886576, -2.20369244, -8.07431412, -7.83337307, -7.94223309,
        -9.24308968, -8.43767738, -8.89227295, -3.14519000, -4.67166090],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.42642927]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 472
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 206
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 696
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0008008480072021484
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0536    transfer 0.0001    finalize 0.0003    func 0.0542    
Accumulated time: func 0.0542    prepare 0.0002    bound 0.0536    transfer 0.0001    finalize 0.0003    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 21] 
split level 1: [/input-12, 35] 
split level 2: [/input-12, 80] 
split level 3: [/input-12, 74] 
split level 4: [/input-12, 10] 
split level 5: [/input-12, 11] 
split level 6: [/input-12, 60] 
split level 7: [/input-12, 54] 
split level 8: [/input-12, 1] 
split level 9: [/input-12, 6] 
split level 10: [/input-12, 93] 
split level 11: [/input-8, 827] 
split level 12: [/input-8, 1075] 
split level 13: [/input-8, 684] 
split level 14: [/input-8, 812] 
split level 15: [/input-8, 106] 
split level 16: [/input-8, 1126] 
split level 17: [/input-8, 1074] 
split level 18: [/input-8, 1611] 
split level 19: [/input, 2725] 
split level 20: [/input-8, 66] 
split level 21: [/input-8, 844] 
split level 22: [/input-8, 852] 
split level 23: [/input-8, 1331] 
split level 24: [/input-8, 1077] 
split level 25: [/input-8, 65] 
split level 26: [/input-8, 678] 
split level 27: [/input, 226] 
split level 28: [/input, 1790] 
split level 29: [/input-8, 64] 
split level 30: [/input-8, 403] 
split level 31: [/input, 2726] 
split level 32: [/input-8, 270] 
split level 33: [/input-8, 793] 
split level 34: [/input-8, 1026] 
split level 35: [/input-8, 861] 
split level 36: [/input-8, 1332] 
split level 37: [/input-8, 817] 
split level 38: [/input, 481] 
split level 39: [/input-8, 75] 
split level 40: [/input-8, 85] 
split level 41: [/input, 3190] 
split level 42: [/input, 2135] 
split level 43: [/input-8, 108] 
split level 44: [/input, 3994] 
split level 45: [/input, 2422] 
split level 46: [/input, 3191] 
split level 47: [/input, 800] 
split level 48: [/input, 435] 
split level 49: [/input, 3158] 
split level 50: [/input-8, 87] 
split level 51: [/input-8, 1629] 
split level 52: [/input, 2133] 
split level 53: [/input-8, 1838] 
split level 54: [/input, 2421] 
split level 55: [/input, 635] 
split level 56: [/input, 436] 
split level 57: [/input, 2392] 
split level 58: [/input, 2137] 
split level 59: [/input-8, 1734] 
split level 60: [/input, 3160] 
split level 61: [/input, 2423] 
split level 62: [/input, 3173] 
split level 63: [/input, 1651] 
split level 64: [/input, 2425] 
split level 65: [/input-8, 72] 
split level 66: [/input, 2410] 
split level 67: [/input, 3192] 
split level 68: [/input, 784] 
split level 69: [/input-8, 1618] 
split level 70: [/input-8, 1943] 
split level 71: [/input-8, 1847] 
split level 72: [/input-8, 1521] 
split level 73: [/input, 449] 
split level 74: [/input-8, 970] 
split level 75: [/input-8, 110] 
split level 76: [/input-8, 1392] 
split level 77: [/input-8, 1870] 
split level 78: [/input-8, 1935] 
split level 79: [/input, 3976] 
split level 80: [/input-8, 67] 
split level 81: [/input, 2028] 
split level 82: [/input, 225] 
split level 83: [/input, 2393] 
split level 84: [/input, 1655] 
split level 85: [/input-8, 432] 
split level 86: [/input, 3418] 
split level 87: [/input, 2027] 
split level 88: [/input, 3995] 
split level 89: [/input, 3161] 
split level 90: [/input, 1756] 
split level 91: [/input, 1653] 
split level 92: [/input-8, 1027] 
split level 93: [/input, 2420] 
split level 94: [/input, 4051] 
split level 95: [/input-8, 846] 
split level 96: [/input-8, 86] 
split level 97: [/input, 1192] 
split level 98: [/input-8, 1046] 
split level 99: [/input, 832] 
split level 100: [/input, 2030] 
split level 101: [/input, 1657] 
split level 102: [/input, 2388] 
split level 103: [/input, 2394] 
split level 104: [/input, 1652] 
split level 105: [/input, 1654] 
split level 106: [/input-8, 961] 
split level 107: [/input-8, 1445] 
split level 108: [/input, 2131] 
split level 109: [/input, 3207] 
split level 110: [/input-8, 1642] 
split level 111: [/input-8, 1861] 
split level 112: [/input, 163] 
split level 113: [/input, 843] 
split level 114: [/input, 2013] 
split level 115: [/input, 1656] 
split level 116: [/input-8, 600] 
split level 117: [/input, 3188] 
split level 118: [/input-8, 452] 
split level 119: [/input-8, 445] 
split level 120: [/input-8, 439] 
split level 121: [/input, 1055] 
split level 122: [/input-8, 1937] 
split level 123: [/input, 3746] 
split level 124: [/input-8, 1034] 
split level 125: [/input, 2014] 
split level 126: [/input, 4016] 
split level 127: [/input, 1619] 
split level 128: [/input, 424] 
split level 129: [/input, 3203] 
split level 130: [/input, 2225] 
split level 131: [/input-8, 1454] 
split level 132: [/input-8, 1035] 
split level 133: [/input, 1770] 
split level 134: [/input, 544] 
split level 135: [/input, 3143] 
split level 136: [/input-8, 615] 
split level 137: [/input, 2268] 
split level 138: [/input, 2292] 
split level 139: [/input-8, 1588] 
split level 140: [/input-8, 962] 
split level 141: [/input, 4002] 
split level 142: [/input, 2047] 
split level 143: [/input, 950] 
split level 144: [/input-8, 408] 
split level 145: [/input, 3144] 
split level 146: [/input-8, 504] 
split level 147: [/input, 2183] 
split level 148: [/input, 1288] 
split level 149: [/input, 2156] 
split level 150: [/input, 2877] 
split level 151: [/input-8, 1090] 
split level 152: [/input, 3810] 
split level 153: [/input, 1800] 
split level 154: [/input, 810] 
split level 155: [/input, 2122] 
split level 156: [/input, 2841] 
split level 157: [/input, 1934] 
split level 158: [/input-8, 394] 
split level 159: [/input-8, 1493] 
split level 160: [/input, 1853] 
split level 161: [/input-8, 971] 
split level 162: [/input, 3458] 
split level 163: [/input-8, 983] 
split level 164: [/input-8, 258] 
split level 165: [/input, 179] 
split level 166: [/input-8, 1644] 
split level 167: [/input, 517] 
split level 168: [/input-8, 1831] 
split level 169: [/input, 1997] 
split level 170: [/input, 2140] 
split level 171: [/input-8, 1729] 
split level 172: [/input, 2359] 
split level 173: [/input-8, 81] 
split level 174: [/input, 1950] 
split level 175: [/input, 1111] 
split level 176: [/input, 1533] 
split level 177: [/input, 2700] 
split level 178: [/input, 2172] 
split level 179: [/input, 1981] 
split level 180: [/input, 3828] 
split level 181: [/input, 2143] 
split level 182: [/input-8, 1852] 
split level 183: [/input-8, 833] 
split level 184: [/input, 3613] 
split level 185: [/input, 2177] 
split level 186: [/input, 2344] 
split level 187: [/input, 2435] 
split level 188: [/input, 1966] 
split level 189: [/input, 3745] 
split level 190: [/input-8, 692] 
split level 191: [/input, 2328] 
split level 192: [/input, 2556] 
split level 193: [/input, 3646] 
split level 194: [/input, 3080] 
split level 195: [/input, 3255] 
split level 196: [/input, 849] 
split level 197: [/input, 1982] 
split level 198: [/input, 1998] 
split level 199: [/input-8, 1227] 
Time: prepare 0.0061    bound 0.0973    transfer 0.0073    finalize 0.0058    func 0.1167    
Accumulated time: func 0.1709    prepare 0.0162    bound 0.1509    transfer 0.0074    finalize 0.0061    
all_split False
======================Cut inference begins======================
max lb tensor(0.19878817) min lb tensor(-0.42640734)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.013612985610961914 
BICCOS Cumulative time: 0.013612985610961914
Preprocessing time: 0.012189388275146484 Inference time: 0.00016164779663085938 Add cuts time: 7.557868957519531e-05 Cut analysis time: 0.001186370849609375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.41315 (1), -0.41290 (1), -0.41276 (1), -0.41251 (1), -0.41246 (1), -0.41178 (1), -0.41119 (1), -0.41097 (1), -0.41088 (1), -0.41057 (1), -0.41010 (1), -0.40992 (1), -0.40988 (1), -0.40921 (1), -0.40902 (1), -0.40865 (1), -0.40837 (1), -0.40821 (1), -0.40723 (1), -0.40678 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5245    set_bounds 0.0147    solve 0.1169    add 0.2400    
Accumulated time: pickout 0.0004    decision 0.5245    set_bounds 0.0147    solve 0.1169    add 0.2400    
Current (lb-rhs): -0.4131460189819336
50 domains visited
Cumulative time: 0.9877979755401611

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 35] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] 
split level 1: [/input-12, 60] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 11] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 2: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 60] [/input-12, 60] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 3: [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.41123485565185547
10 lb beta sum: 0.5693191885948181, worst -0.3877304792404175
Time: prepare 0.0079    bound 0.1465    transfer 0.0014    finalize 0.0051    func 0.1638    
Accumulated time: func 0.3347    prepare 0.0243    bound 0.2974    transfer 0.0089    finalize 0.0112    
all_split False
======================Cut inference begins======================
max lb tensor(0.58580768) min lb tensor(-0.38760775)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.02864670753479004 
BICCOS Cumulative time: 0.04225969314575195
Preprocessing time: 0.021193265914916992 Inference time: 0.004323005676269531 Add cuts time: 0.002229452133178711 Cut analysis time: 0.0009009838104248047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10933 (2), -0.10824 (2), -0.10767 (2), -0.10732 (2), -0.10568 (2), -0.10527 (2), -0.10461 (2), -0.10427 (2), -0.10356 (2), -0.10321 (2), -0.10083 (2), -0.10051 (2), -0.09945 (2), -0.09928 (2), -0.09746 (2), -0.09685 (2), -0.09679 (2), -0.09650 (2), -0.09623 (2), -0.09375 (2), 
Length of domains: 50
Time: pickout 0.0089    decision 0.0249    set_bounds 0.0167    solve 0.1641    add 0.2393    
Accumulated time: pickout 0.0092    decision 0.5493    set_bounds 0.0314    solve 0.2810    add 0.4793    
Current (lb-rhs): -0.10933175683021545
100 domains visited
Cumulative time: 1.4773287773132324

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 21] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 10] [/input-12, 60] [/input-12, 11] [/input-12, 11] [/input-12, 10] [/input-12, 60] [/input-12, 10] [/input-12, 60] [/input-12, 10] [/input-12, 60] 
split level 2: [/input-12, 11] [/input-12, 11] [/input-12, 1] [/input-12, 60] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 3: [/input-12, 1] [/input-12, 1] [/input-12, 6] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1339864730834961
10 lb beta sum: 1.2089718580245972, worst -0.07511550188064575
Time: prepare 0.0076    bound 0.1480    transfer 0.0008    finalize 0.0048    func 0.1640    
Accumulated time: func 0.4988    prepare 0.0323    bound 0.4455    transfer 0.0097    finalize 0.0160    
all_split False
======================Cut inference begins======================
max lb tensor(0.34411538) min lb tensor(-0.07275003)
Number of Verified Splits: 387 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 7
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.04667019844055176 
BICCOS Cumulative time: 0.08892989158630371
Preprocessing time: 0.01614975929260254 Inference time: 0.02016162872314453 Add cuts time: 0.009641647338867188 Cut analysis time: 0.0007171630859375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07275 (3), -0.04744 (3), -0.03880 (3), -0.03626 (3), 
Length of domains: 4
Time: pickout 0.0081    decision 0.0215    set_bounds 0.0169    solve 0.1642    add 0.2847    
Accumulated time: pickout 0.0173    decision 0.5708    set_bounds 0.0483    solve 0.4452    add 0.7640    
Current (lb-rhs): -0.0727500319480896
104 domains visited
Cumulative time: 2.02657151222229

Shallow-BaB round 4
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 80] 
split level 1: [/input-12, 80] [/input-12, 80] [/input-12, 80] [/input-12, 74] 
split level 2: [/input-12, 74] [/input-12, 74] [/input-12, 74] [/input-12, 10] 
split level 3: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 11] 
split level 4: [/input-12, 60] [/input-12, 11] [/input-12, 11] [/input-12, 60] 
split level 5: [/input-12, 1] [/input-12, 1] [/input-12, 60] [/input-12, 1] 
split level 6: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 7: [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
split level 8: [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] 
split level 9: [/input-8, 1075] [/input-8, 1075] [/input-8, 1075] [/input-8, 1075] 
split level 10: [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] 
split level 11: [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] 
split level 12: [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] 
split level 13: [/input-8, 106] [/input-8, 106] [/input-8, 106] [/input-8, 106] 
split level 14: [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] 
split level 15: [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] 
split level 16: [/input-8, 678] [/input-8, 678] [/input, 1790] [/input-8, 678] 
split level 17: [/input, 1790] [/input, 1790] [/input, 2726] [/input, 1790] 
split level 18: [/input, 2726] [/input, 2726] [/input-8, 403] [/input, 2726] 
split level 19: [/input-8, 1332] [/input-8, 403] [/input-8, 1332] [/input-8, 403] 
split level 20: [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 1332] 
split level 21: [/input-8, 403] [/input-8, 1332] [/input, 481] [/input-8, 270] 
split level 22: [/input, 481] [/input, 481] [/input, 3158] [/input, 481] 
split level 23: [/input, 3158] [/input, 3158] [/input, 2133] [/input, 3158] 
split level 24: [/input-8, 1734] [/input, 2133] [/input-8, 1734] [/input, 2133] 
split level 25: [/input, 2422] [/input-8, 1734] [/input, 2392] [/input-8, 1734] 
split level 26: [/input, 2133] [/input, 635] [/input, 449] [/input, 449] 
split level 27: [/input, 449] [/input, 449] [/input, 635] [/input, 635] 
split level 28: [/input-8, 1618] [/input-8, 1618] [/input, 3173] [/input, 3173] 
split level 29: [/input, 3173] [/input-8, 1629] [/input-8, 1618] [/input-8, 1618] 
split level 30: [/input, 635] [/input, 3173] [/input-8, 1629] [/input-8, 1629] 
split level 31: [/input-8, 1629] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] 
split level 32: [/input-8, 1861] [/input-8, 1046] [/input-8, 1046] [/input-8, 1046] 
split level 33: [/input-8, 1046] [/input, 2388] [/input-8, 846] [/input, 2388] 
split level 34: [/input, 2388] [/input-8, 1445] [/input-8, 1445] [/input-8, 846] 
split level 35: [/input-8, 846] [/input, 163] [/input, 2388] [/input-8, 1937] 
split level 36: [/input-8, 1445] [/input-8, 846] [/input-8, 1937] [/input, 2131] 
split level 37: [/input-8, 1937] [/input-8, 1937] [/input, 2131] [/input, 163] 
split level 38: [/input, 163] [/input, 2131] [/input, 163] [/input, 1653] 
split level 39: [/input, 2131] [/input, 1653] [/input, 1655] [/input-8, 1445] 
split level 40: [/input, 1653] [/input, 1756] [/input, 1653] [/input, 1655] 
split level 41: [/input, 1655] [/input, 1655] [/input, 1756] [/input, 1756] 
split level 42: [/input, 1756] [/input, 1619] [/input, 1619] [/input, 1619] 
split level 43: [/input, 1619] [/input, 1654] [/input, 1654] [/input, 1654] 
split level 44: [/input, 1654] [/input-8, 394] [/input, 2268] [/input, 2268] 
split level 45: [/input, 2268] [/input, 2268] [/input, 2359] [/input, 2359] 
split level 46: [/input, 2359] [/input, 2359] [/input, 2115] [/input, 2115] 
split level 47: [/input, 2115] [/input, 3255] [/input, 3255] [/input, 3255] 
split level 48: [/input, 3255] [/input, 2115] [/input, 2386] [/input, 2386] 
split level 49: [/input, 2386] [/input, 2386] [/input, 1604] [/input, 1604] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0956125259399414

all verified at 7th iter
Time: prepare 0.0079    bound 0.0548    transfer 0.0008    finalize 0.0034    func 0.0696    
Accumulated time: func 0.5684    prepare 0.0430    bound 0.5003    transfer 0.0105    finalize 0.0194    
all_split False
======================Cut inference begins======================
max lb tensor(0.39963239) min lb tensor(0.00250149)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0018
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.04191923141479492 
BICCOS Cumulative time: 0.13084912300109863
Preprocessing time: 0.01251673698425293 Inference time: 0.019058942794799805 Add cuts time: 0.0080413818359375 Cut analysis time: 0.0023021697998046875
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0012    decision 0.1511    set_bounds 0.0131    solve 0.0697    add 0.0248    
Accumulated time: pickout 0.0185    decision 0.7220    set_bounds 0.0614    solve 0.5149    add 0.7887    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
104 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([93]), tensor([-1.]), tensor([0]), tensor([1.06293555e-07]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([93, 21, 35, 80]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([3.44013706e-11, 1.52637526e-01, 2.14539631e-03, 1.33355126e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([93, 21, 35, 80]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.44013706e-11, 1.52637526e-01, 2.14539631e-03, 1.06362000e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([93, 21, 35]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([3.44013706e-11, 1.52637526e-01, 1.45336673e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([93, 21]), tensor([1., 1.]), tensor([0, 0]), tensor([3.44013706e-11, 2.89272845e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  5
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4164609909057617
10 lb beta sum: 1.2698872089385986, worst -0.25039371848106384
Time: prepare 0.0005    bound 0.1409    transfer 0.0002    finalize 0.0002    func 0.1419    
Accumulated time: func 0.7103    prepare 0.0434    bound 0.6412    transfer 0.0108    finalize 0.0196    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] 
split level 1: [/input-12, 35] 
split level 2: [/input-12, 74] 
split level 3: [/input-12, 10] 
split level 4: [/input-12, 11] 
split level 5: [/input-12, 60] 
split level 6: [/input-12, 1] 
split level 7: [/input-12, 6] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4877684116363525, worst -0.09554588794708252
10 lb beta sum: 1.4877684116363525, worst -0.0947943925857544
Time: prepare 0.0103    bound 0.1358    transfer 0.0053    finalize 0.0022    func 0.1554    
Accumulated time: func 0.8656    prepare 0.0542    bound 0.7770    transfer 0.0161    finalize 0.0218    
all_split False
======================Cut inference begins======================
max lb tensor(1.24170291) min lb tensor(-0.09456456)
Number of Verified Splits: 251 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.4877684116363525, worst -0.19520294666290283
10 lb beta sum: 1.5495867729187012, worst -0.19472944736480713
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 8
#cuts 4-6: 6
#cuts 7-9: 6
#cuts >= 20: 0
BICCOS time: 0.5356719493865967 
BICCOS Cumulative time: 0.6665210723876953
Preprocessing time: 0.007440805435180664 Inference time: 0.5194575786590576 Add cuts time: 0.006832122802734375 Cut analysis time: 0.0019414424896240234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09456 (8), -0.05377 (8), -0.03191 (8), -0.01184 (8), -0.00286 (8), 
Length of domains: 5
Time: pickout 0.0005    decision 0.0256    set_bounds 0.0220    solve 0.1555    add 0.0257    
Accumulated time: pickout 0.0191    decision 0.7476    set_bounds 0.0835    solve 0.6704    add 0.8144    
Current (lb-rhs): -0.09456455707550049
109 domains visited
Cumulative time: 3.2904391288757324

BaB round 2
batch: 5
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 80] [/input-12, 80] [/input-12, 80] [/input-12, 80] [/input-12, 80] 
split level 1: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 2: [/input-8, 1075] [/input-8, 827] [/input-8, 1075] [/input-8, 1075] [/input-8, 827] 
split level 3: [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] 
split level 4: [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] 
split level 5: [/input-8, 106] [/input-8, 106] [/input-8, 106] [/input-8, 106] [/input-8, 1332] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.062107086181640625
10 lb beta sum: 0.004316105507314205, worst -0.061643123626708984
Time: prepare 0.0066    bound 0.1385    transfer 0.0075    finalize 0.0022    func 0.1581    
Accumulated time: func 1.0238    prepare 0.0611    bound 0.9154    transfer 0.0236    finalize 0.0240    
all_split False
======================Cut inference begins======================
max lb tensor(0.42137814) min lb tensor(-0.06143332)
Number of Verified Splits: 299 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1783161163330078
10 lb beta sum: 0.46577122807502747, worst -0.15544115006923676
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 49.
#cuts 1-3: 8
#cuts 4-6: 6
#cuts 7-9: 10
#cuts 10-12: 24
#cuts 13-15: 1
#cuts >= 20: 0
BICCOS time: 0.3953096866607666 
BICCOS Cumulative time: 1.061830759048462
Preprocessing time: 0.010364770889282227 Inference time: 0.3661386966705322 Add cuts time: 0.01444387435913086 Cut analysis time: 0.004362344741821289
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06143 (14), -0.05436 (14), -0.05301 (14), -0.05096 (14), -0.04840 (14), -0.04039 (14), -0.03973 (14), -0.03671 (14), -0.02143 (14), -0.01823 (14), -0.01770 (14), -0.01589 (14), -0.01557 (14), -0.01417 (14), -0.01089 (14), -0.00909 (14), -0.00788 (14), -0.00375 (14), -0.00201 (14), -0.00170 (14), 
Length of domains: 21
Time: pickout 0.0015    decision 0.0194    set_bounds 0.0296    solve 0.1583    add 0.0477    
Accumulated time: pickout 0.0205    decision 0.7670    set_bounds 0.1131    solve 0.8286    add 0.8621    
Current (lb-rhs): -0.06143331527709961
130 domains visited
Cumulative time: 3.9531819820404053

BaB round 3
batch: 21
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] 
split level 1: [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] 
split level 2: [/input-8, 108] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] 
split level 3: [/input-8, 1332] [/input-8, 861] [/input-8, 108] [/input-8, 108] [/input-8, 861] [/input-8, 108] [/input-8, 861] [/input-8, 108] [/input-8, 861] [/input-8, 108] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.047364234924316406
10 lb beta sum: 0.0, worst -0.0470738410949707
Time: prepare 0.0067    bound 0.1572    transfer 0.0029    finalize 0.0026    func 0.1717    
Accumulated time: func 1.1955    prepare 0.0681    bound 1.0726    transfer 0.0265    finalize 0.0266    
all_split False
======================Cut inference begins======================
max lb tensor(0.06534004) min lb tensor(-0.04691696)
Number of Verified Splits: 269 of 336
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 12
#cuts 4-6: 4
#cuts 7-9: 4
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.05246472358703613 
BICCOS Cumulative time: 1.114295482635498
Preprocessing time: 0.011042356491088867 Inference time: 0.03518366813659668 Add cuts time: 0.00413966178894043 Cut analysis time: 0.0020990371704101562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04692 (18), -0.04513 (18), -0.04314 (18), -0.04189 (18), -0.03987 (18), -0.03901 (18), -0.03822 (18), -0.03580 (18), -0.03567 (18), -0.03531 (18), -0.03516 (18), -0.03467 (18), -0.03432 (18), -0.03380 (18), -0.03340 (18), -0.03335 (18), -0.03258 (18), -0.03243 (18), -0.03229 (18), -0.03113 (18), 
Length of domains: 67
Time: pickout 0.0027    decision 0.0197    set_bounds 0.0211    solve 0.1718    add 0.0644    
Accumulated time: pickout 0.0232    decision 0.7867    set_bounds 0.1343    solve 1.0005    add 0.9266    
Current (lb-rhs): -0.046916961669921875
197 domains visited
Cumulative time: 4.294319152832031

BaB round 4
batch: 67
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 817] [/input-8, 817] 
split level 1: [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04107666015625
10 lb beta sum: 0.07951203733682632, worst -0.04090404510498047
Time: prepare 0.0054    bound 0.1523    transfer 0.0021    finalize 0.0024    func 0.1641    
Accumulated time: func 1.3596    prepare 0.0737    bound 1.2250    transfer 0.0286    finalize 0.0289    
all_split False
======================Cut inference begins======================
max lb tensor(0.01046228) min lb tensor(-0.04081249)
Number of Verified Splits: 73 of 268
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 12
#cuts 4-6: 4
#cuts 7-9: 4
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.022968769073486328 
BICCOS Cumulative time: 1.1372642517089844
Preprocessing time: 0.008315086364746094 Inference time: 0.010489463806152344 Add cuts time: 0.002360105514526367 Cut analysis time: 0.0018041133880615234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04081 (20), -0.03886 (20), -0.03832 (20), -0.03701 (20), -0.03637 (20), -0.03563 (20), -0.03452 (20), -0.03392 (20), -0.03390 (20), -0.03315 (20), -0.03293 (20), -0.03224 (20), -0.03197 (20), -0.03142 (20), -0.03141 (20), -0.03043 (20), -0.03013 (20), -0.02982 (20), -0.02975 (20), -0.02952 (20), 
Length of domains: 195
Time: pickout 0.0069    decision 0.0185    set_bounds 0.0129    solve 0.1642    add 0.0851    
Accumulated time: pickout 0.0301    decision 0.8052    set_bounds 0.1472    solve 1.1646    add 1.0117    
Current (lb-rhs): -0.04081249237060547
392 domains visited
Cumulative time: 4.612390995025635

BaB round 5
batch: 195
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 403] [/input-8, 64] [/input-8, 64] [/input-8, 64] [/input-8, 64] [/input-8, 64] [/input-8, 403] [/input-8, 64] [/input-8, 64] [/input-8, 64] 
cut re-enabled after branching node selection
0 lb beta sum: 0.08120144158601761, worst -0.03967857360839844
10 lb beta sum: 0.08120144158601761, worst -0.039557456970214844
Time: prepare 0.0176    bound 0.1602    transfer 0.0023    finalize 0.0033    func 0.1859    
Accumulated time: func 1.5455    prepare 0.0916    bound 1.3851    transfer 0.0309    finalize 0.0322    
all_split False
======================Cut inference begins======================
max lb tensor(0.00872421) min lb tensor(-0.03951454)
Number of Verified Splits: 111 of 390
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 14
#cuts 4-6: 5
#cuts 7-9: 4
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.03488421440124512 
BICCOS Cumulative time: 1.1721484661102295
Preprocessing time: 0.012460947036743164 Inference time: 0.0180509090423584 Add cuts time: 0.0022482872009277344 Cut analysis time: 0.0021240711212158203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03951 (21), -0.03746 (21), -0.03702 (21), -0.03571 (21), -0.03496 (21), -0.03420 (21), -0.03321 (21), -0.03271 (21), -0.03204 (21), -0.03171 (21), -0.03168 (21), -0.03103 (21), -0.03022 (21), -0.02999 (21), -0.02952 (21), -0.02918 (21), -0.02864 (21), -0.02854 (21), -0.02824 (21), -0.02823 (21), 
Length of domains: 279
Time: pickout 0.0169    decision 0.0236    set_bounds 0.0169    solve 0.1861    add 0.0813    
Accumulated time: pickout 0.0470    decision 0.8287    set_bounds 0.1641    solve 1.3507    add 1.0930    
Current (lb-rhs): -0.03951454162597656
671 domains visited
Cumulative time: 4.980304002761841

BaB round 6
batch: 279
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 403] [/input-8, 64] [/input-8, 403] [/input-8, 403] [/input-8, 817] [/input-8, 817] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.037689208984375
10 lb beta sum: 0.039560891687870026, worst -0.03763628005981445
Time: prepare 0.0115    bound 0.1590    transfer 0.0070    finalize 0.0036    func 0.1847    
Accumulated time: func 1.7302    prepare 0.1033    bound 1.5441    transfer 0.0379    finalize 0.0358    
all_split False
======================Cut inference begins======================
max lb tensor(0.01166487) min lb tensor(-0.03758955)
Number of Verified Splits: 230 of 558
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 17
#cuts 4-6: 5
#cuts 7-9: 4
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.06219744682312012 
BICCOS Cumulative time: 1.2343459129333496
Preprocessing time: 0.017490863800048828 Inference time: 0.03923916816711426 Add cuts time: 0.0033960342407226562 Cut analysis time: 0.002071380615234375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03759 (22), -0.03546 (22), -0.03508 (22), -0.03378 (22), -0.03296 (22), -0.03214 (22), -0.03128 (22), -0.03088 (22), -0.02991 (22), -0.02980 (22), -0.02964 (22), -0.02916 (22), -0.02837 (22), -0.02778 (22), -0.02737 (22), -0.02730 (22), -0.02680 (22), -0.02665 (22), -0.02628 (22), -0.02612 (22), 
Length of domains: 328
Time: pickout 0.0179    decision 0.0282    set_bounds 0.0307    solve 0.1849    add 0.0899    
Accumulated time: pickout 0.0648    decision 0.8570    set_bounds 0.1948    solve 1.5356    add 1.1829    
Current (lb-rhs): -0.03758955001831055
999 domains visited
Cumulative time: 5.4040069580078125

BaB round 7
batch: 328
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03457069396972656
10 lb beta sum: 0.04501756280660629, worst -0.03452587127685547
Time: prepare 0.0174    bound 0.1657    transfer 0.0092    finalize 0.0034    func 0.2001    
Accumulated time: func 1.9303    prepare 0.1209    bound 1.7098    transfer 0.0471    finalize 0.0392    
all_split False
======================Cut inference begins======================
max lb tensor(0.00774479) min lb tensor(-0.03450394)
Number of Verified Splits: 145 of 656
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 18
#cuts 4-6: 5
#cuts 7-9: 4
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.049430131912231445 
BICCOS Cumulative time: 1.283776044845581
Preprocessing time: 0.020720720291137695 Inference time: 0.02417898178100586 Add cuts time: 0.002483844757080078 Cut analysis time: 0.0020465850830078125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03450 (23), -0.03385 (23), -0.03228 (23), -0.03205 (23), -0.03163 (23), -0.03112 (23), -0.03069 (23), -0.03005 (23), -0.02983 (23), -0.02893 (23), -0.02890 (23), -0.02828 (23), -0.02824 (23), -0.02784 (23), -0.02731 (23), -0.02719 (23), -0.02674 (23), -0.02666 (23), -0.02648 (23), -0.02610 (23), 
Length of domains: 511
Time: pickout 0.0179    decision 0.0337    set_bounds 0.0180    solve 0.2017    add 0.1083    
Accumulated time: pickout 0.0828    decision 0.8906    set_bounds 0.2128    solve 1.7373    add 1.2912    
Current (lb-rhs): -0.034503936767578125
1510 domains visited
Cumulative time: 5.841521739959717

BaB round 8
batch: 511
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 424] [/input, 481] [/input, 424] [/input-8, 1331] [/input-8, 1618] [/input, 481] [/input-8, 1618] [/input-8, 1331] [/input-8, 1331] [/input, 481] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03219938278198242
10 lb beta sum: 0.04382363706827164, worst -0.03219175338745117
Time: prepare 0.0262    bound 0.1595    transfer 0.0124    finalize 0.0065    func 0.2127    
Accumulated time: func 2.1430    prepare 0.1473    bound 1.8693    transfer 0.0595    finalize 0.0457    
all_split False
======================Cut inference begins======================
max lb tensor(0.01592255) min lb tensor(-0.03217840)
Number of Verified Splits: 252 of 1022
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 20
#cuts 4-6: 5
#cuts 7-9: 4
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.07864975929260254 
BICCOS Cumulative time: 1.3624258041381836
Preprocessing time: 0.03427696228027344 Inference time: 0.0382540225982666 Add cuts time: 0.004036426544189453 Cut analysis time: 0.002082347869873047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03218 (24), -0.03154 (24), -0.02989 (24), -0.02973 (24), -0.02967 (24), -0.02926 (24), -0.02904 (24), -0.02881 (24), -0.02779 (24), -0.02745 (24), -0.02739 (24), -0.02723 (24), -0.02715 (24), -0.02675 (24), -0.02652 (24), -0.02631 (24), -0.02604 (24), -0.02552 (24), -0.02541 (24), -0.02535 (24), 
Length of domains: 770
Time: pickout 0.0579    decision 0.0407    set_bounds 0.0465    solve 0.2130    add 0.1275    
Accumulated time: pickout 0.1406    decision 0.9313    set_bounds 0.2593    solve 1.9504    add 1.4187    
Current (lb-rhs): -0.032178401947021484
2280 domains visited
Cumulative time: 6.4152305126190186

BaB round 9
batch: 770
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 481] [/input, 481] [/input-8, 861] [/input, 481] [/input-8, 1331] [/input-8, 861] [/input, 481] [/input-8, 861] [/input-8, 1331] [/input-8, 861] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02964925765991211
10 lb beta sum: 0.06986171752214432, worst -0.029645442962646484
Time: prepare 0.0402    bound 0.2066    transfer 0.0187    finalize 0.0085    func 0.4608    
Accumulated time: func 2.6038    prepare 0.1878    bound 2.0759    transfer 0.0782    finalize 0.0542    
all_split False
======================Cut inference begins======================
max lb tensor(0.24866295) min lb tensor(-0.02963352)
Number of Verified Splits: 548 of 1540
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 15
#cuts 4-6: 5
#cuts 7-9: 4
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.14708328247070312 
BICCOS Cumulative time: 1.5095090866088867
Preprocessing time: 0.053614139556884766 Inference time: 0.08597469329833984 Add cuts time: 0.005532979965209961 Cut analysis time: 0.0019614696502685547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02963 (25), -0.02901 (25), -0.02866 (25), -0.02804 (25), -0.02731 (25), -0.02720 (25), -0.02712 (25), -0.02669 (25), -0.02650 (25), -0.02634 (25), -0.02628 (25), -0.02623 (25), -0.02614 (25), -0.02572 (25), -0.02552 (25), -0.02539 (25), -0.02530 (25), -0.02488 (25), -0.02480 (25), -0.02477 (25), 
Length of domains: 992
Time: pickout 0.0774    decision 0.0578    set_bounds 0.0707    solve 0.4613    add 0.1213    
Accumulated time: pickout 0.2180    decision 0.9891    set_bounds 0.3301    solve 2.4117    add 1.5400    
Current (lb-rhs): -0.029633522033691406
3272 domains visited
Cumulative time: 7.362449645996094

BaB round 10
batch: 992
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 449] [/input, 449] [/input, 449] [/input, 2726] [/input, 449] [/input, 449] [/input, 2726] [/input, 2726] [/input, 449] [/input, 449] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028367042541503906
10 lb beta sum: 0.053671788424253464, worst -0.028346538543701172
Time: prepare 0.0535    bound 0.1899    transfer 0.0222    finalize 0.0151    func 0.2944    
Accumulated time: func 2.8982    prepare 0.2416    bound 2.2658    transfer 0.1004    finalize 0.0693    
all_split False
======================Cut inference begins======================
max lb tensor(0.01622868) min lb tensor(-0.02834320)
Number of Verified Splits: 968 of 1984
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 20
#cuts 4-6: 4
#cuts 7-9: 4
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.25176072120666504 
BICCOS Cumulative time: 1.7612698078155518
Preprocessing time: 0.07339024543762207 Inference time: 0.16703557968139648 Add cuts time: 0.009270668029785156 Cut analysis time: 0.002064228057861328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02834 (26), -0.02773 (26), -0.02738 (26), -0.02677 (26), -0.02592 (26), -0.02586 (26), -0.02582 (26), -0.02525 (26), -0.02521 (26), -0.02499 (26), -0.02495 (26), -0.02490 (26), -0.02486 (26), -0.02428 (26), -0.02425 (26), -0.02402 (26), -0.02343 (26), -0.02339 (26), -0.02333 (26), -0.02284 (26), 
Length of domains: 1016
Time: pickout 0.0825    decision 0.0695    set_bounds 0.0891    solve 0.2949    add 0.1224    
Accumulated time: pickout 0.3004    decision 1.0585    set_bounds 0.4192    solve 2.7066    add 1.6624    
Current (lb-rhs): -0.02834320068359375
4288 domains visited
Cumulative time: 8.286842584609985

BaB round 11
batch: 1016
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input-8, 861] [/input-8, 1331] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026735305786132812
10 lb beta sum: 0.17561937868595123, worst -0.026703357696533203
Time: prepare 0.0550    bound 0.2343    transfer 0.0102    finalize 0.0142    func 0.3287    
Accumulated time: func 3.2269    prepare 0.2969    bound 2.5001    transfer 0.1106    finalize 0.0836    
all_split False
======================Cut inference begins======================
max lb tensor(0.02326627) min lb tensor(-0.02669477)
Number of Verified Splits: 983 of 2032
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 20
#cuts 4-6: 5
#cuts 7-9: 4
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.2548649311065674 
BICCOS Cumulative time: 2.016134738922119
Preprocessing time: 0.06931948661804199 Inference time: 0.17343807220458984 Add cuts time: 0.009995698928833008 Cut analysis time: 0.002111673355102539
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02669 (27), -0.02608 (27), -0.02573 (27), -0.02513 (27), -0.02426 (27), -0.02416 (27), -0.02354 (27), -0.02333 (27), -0.02330 (27), -0.02320 (27), -0.02274 (27), -0.02265 (27), -0.02259 (27), -0.02239 (27), -0.02238 (27), -0.02200 (27), -0.02179 (27), -0.02172 (27), -0.02170 (27), -0.02144 (27), 
Length of domains: 1049
Time: pickout 0.0862    decision 0.0712    set_bounds 0.0935    solve 0.3294    add 0.0939    
Accumulated time: pickout 0.3866    decision 1.1297    set_bounds 0.5127    solve 3.0360    add 1.7563    
Current (lb-rhs): -0.026694774627685547
5337 domains visited
Cumulative time: 9.230695486068726

BaB round 12
batch: 1049
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2726] [/input-8, 861] [/input, 2726] [/input-8, 861] [/input-8, 75] [/input-8, 861] [/input-8, 1618] [/input-8, 75] [/input-8, 75] [/input-8, 75] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023598670959472656
10 lb beta sum: 0.15521691739559174, worst -0.02358865737915039
Time: prepare 0.0575    bound 0.2406    transfer 0.0046    finalize 0.1757    func 0.4933    
Accumulated time: func 3.7202    prepare 0.3546    bound 2.7406    transfer 0.1152    finalize 0.2593    
all_split False
======================Cut inference begins======================
max lb tensor(0.01759186) min lb tensor(-0.02358532)
Number of Verified Splits: 777 of 2098
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 19
#cuts 4-6: 4
#cuts 7-9: 4
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.2236640453338623 
BICCOS Cumulative time: 2.2397987842559814
Preprocessing time: 0.07181954383850098 Inference time: 0.14202356338500977 Add cuts time: 0.007813692092895508 Cut analysis time: 0.0020072460174560547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02359 (28), -0.02349 (28), -0.02323 (28), -0.02283 (28), -0.02262 (28), -0.02254 (28), -0.02227 (28), -0.02188 (28), -0.02123 (28), -0.02109 (28), -0.02105 (28), -0.02103 (28), -0.02099 (28), -0.02094 (28), -0.02073 (28), -0.02068 (28), -0.02063 (28), -0.02033 (28), -0.02028 (28), -0.02028 (28), 
Length of domains: 1321
Time: pickout 0.0389    decision 0.0730    set_bounds 0.0979    solve 0.4940    add 0.1261    
Accumulated time: pickout 0.4255    decision 1.2028    set_bounds 0.6106    solve 3.5300    add 1.8824    
Current (lb-rhs): -0.02358531951904297
6658 domains visited
Cumulative time: 10.297715187072754

BaB round 13
batch: 1321
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 75] [/input-8, 75] [/input-8, 1618] [/input-8, 75] [/input-8, 75] [/input-8, 1618] [/input-8, 1618] [/input-8, 1618] [/input-8, 75] [/input-8, 1618] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02158069610595703
10 lb beta sum: 0.13092374801635742, worst -0.02158355712890625
Time: prepare 0.0786    bound 0.2158    transfer 0.0303    finalize 0.0212    func 0.3644    
Accumulated time: func 4.0846    prepare 0.4335    bound 2.9564    transfer 0.1455    finalize 0.2805    
all_split False
======================Cut inference begins======================
max lb tensor(0.00714391) min lb tensor(-0.02157450)
Number of Verified Splits: 832 of 2642
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 19
#cuts 4-6: 4
#cuts 7-9: 5
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.2649855613708496 
BICCOS Cumulative time: 2.504784345626831
Preprocessing time: 0.0910177230834961 Inference time: 0.15906596183776855 Add cuts time: 0.012904644012451172 Cut analysis time: 0.001997232437133789
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02157 (29), -0.02149 (29), -0.02121 (29), -0.02081 (29), -0.02061 (29), -0.02053 (29), -0.02026 (29), -0.01986 (29), -0.01953 (29), -0.01945 (29), -0.01931 (29), -0.01906 (29), -0.01901 (29), -0.01898 (29), -0.01893 (29), -0.01870 (29), -0.01867 (29), -0.01865 (29), -0.01858 (29), -0.01849 (29), 
Length of domains: 1810
Time: pickout 0.0942    decision 0.0872    set_bounds 0.1223    solve 0.3651    add 0.1391    
Accumulated time: pickout 0.5197    decision 1.2900    set_bounds 0.7329    solve 3.8951    add 2.0215    
Current (lb-rhs): -0.02157449722290039
8468 domains visited
Cumulative time: 11.38614010810852

BaB round 14
batch: 1810
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2726] [/input, 3994] [/input, 2726] [/input-8, 1629] [/input, 2726] [/input, 3994] [/input-8, 1629] [/input, 2726] [/input, 3994] [/input-8, 970] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018711090087890625
10 lb beta sum: 0.09686044603586197, worst -0.018594741821289062
Time: prepare 0.2652    bound 0.3526    transfer 0.0296    finalize 0.0273    func 0.7007    
Accumulated time: func 4.7853    prepare 0.6990    bound 3.3090    transfer 0.1751    finalize 0.3078    
all_split False
======================Cut inference begins======================
max lb tensor(0.00880051) min lb tensor(-0.01858330)
Number of Verified Splits: 1349 of 3620
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0016
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 25
#cuts 4-6: 5
#cuts 7-9: 4
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.4083249568939209 
BICCOS Cumulative time: 2.913109302520752
Preprocessing time: 0.13462543487548828 Inference time: 0.2563343048095703 Add cuts time: 0.014236688613891602 Cut analysis time: 0.003128528594970703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01858 (30), -0.01849 (30), -0.01844 (30), -0.01836 (30), -0.01821 (30), -0.01807 (30), -0.01782 (30), -0.01768 (30), -0.01762 (30), -0.01754 (30), -0.01748 (30), -0.01740 (30), -0.01726 (30), -0.01711 (30), -0.01687 (30), -0.01678 (30), -0.01671 (30), -0.01648 (30), -0.01641 (30), -0.01636 (30), 
Length of domains: 2271
Time: pickout 0.1117    decision 0.1167    set_bounds 0.1686    solve 0.7029    add 0.1189    
Accumulated time: pickout 0.6315    decision 1.4066    set_bounds 0.9015    solve 4.5980    add 2.1404    
Current (lb-rhs): -0.018583297729492188
10739 domains visited
Cumulative time: 13.038819789886475

BaB round 15
batch: 2271
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 1618] [/input, 2726] [/input-8, 678] [/input-8, 1618] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.017380237579345703
10 lb beta sum: 0.3639028072357178, worst -0.016445159912109375
Time: prepare 0.1271    bound 0.4217    transfer 0.0550    finalize 0.0450    func 0.6808    
Accumulated time: func 5.4661    prepare 0.8265    bound 3.7307    transfer 0.2300    finalize 0.3528    
all_split False
======================Cut inference begins======================
max lb tensor(0.48583502) min lb tensor(-0.01643181)
Number of Verified Splits: 3692 of 4542
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.cuts: total 283 constraints, 19601 nonzero elements
cuts preparing time: 0.0114
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 321.
#cuts 1-3: 74
#cuts 4-6: 5
#cuts 7-9: 5
#cuts 10-12: 1
#cuts 13-15: 2
#cuts 16-18: 12
#cuts 19-21: 16
#cuts >= 20: 206
BICCOS time: 1.273878812789917 
BICCOS Cumulative time: 4.186988115310669
Preprocessing time: 0.37050485610961914 Inference time: 0.7043752670288086 Add cuts time: 0.030616044998168945 Cut analysis time: 0.1683826446533203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01643 (31), -0.01635 (31), -0.01634 (31), -0.01625 (31), -0.01607 (31), -0.01597 (31), -0.01567 (31), -0.01558 (31), -0.01548 (31), -0.01539 (31), -0.01538 (31), -0.01530 (31), -0.01511 (31), -0.01502 (31), -0.01472 (31), -0.01462 (31), -0.01430 (31), -0.01424 (31), -0.01423 (31), -0.01417 (31), 
Length of domains: 850
Time: pickout 0.0690    decision 0.1398    set_bounds 0.2067    solve 0.6821    add 0.0971    
Accumulated time: pickout 0.7005    decision 1.5464    set_bounds 1.1082    solve 5.2801    add 2.2375    
Current (lb-rhs): -0.016431808471679688
11589 domains visited
Cumulative time: 15.564708232879639

BaB round 16
batch: 850
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input-8, 678] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.016431331634521484

all verified at 3th iter
Time: prepare 0.0464    bound 0.0642    transfer 0.0100    finalize 0.0113    func 0.1429    
Accumulated time: func 5.6091    prepare 0.8732    bound 3.7949    transfer 0.2400    finalize 0.3641    
all_split False
======================Cut inference begins======================
max lb tensor(0.26945257) min lb tensor(3.33786011e-06)
Number of Verified Splits: 1700 of 1700
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0021
Total number of valid cuts: 321.
#cuts 1-3: 74
#cuts 4-6: 5
#cuts 7-9: 5
#cuts 10-12: 1
#cuts 13-15: 2
#cuts 16-18: 12
#cuts 19-21: 16
#cuts >= 20: 206
BICCOS time: 0.06372356414794922 
BICCOS Cumulative time: 4.250711679458618
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0346    decision 0.0638    set_bounds 0.0811    solve 0.1433    add 0.0001    
Accumulated time: pickout 0.7351    decision 1.6102    set_bounds 1.1894    solve 5.4234    add 2.2377    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
11589 domains visited
Cumulative time: 15.968451738357544

found process to kill: terminal indx = 7
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.cuts
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.indx
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=89_spec=7_26518168.log
found process for pidx=7
kill process for pidx=7
Result: safe in 18.9451 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 90, vnnlib ID: 90 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.92437601, -4.53821707, -1.81814766, -0.89523673, -2.18286943,
         -1.50445235, -2.81978679, -2.90949965, -4.78050327, -3.54446316]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [640]; unstable size 640; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 228, 1, 640] with unstable size 227 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 640] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 640] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [227]; unstable size 227; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 227] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 227] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.54901487, -0.55123138, -2.14694476, -2.65342474, -1.82377052,
         -2.15827680, -1.06202674,  0.01771575, -1.15435958]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.92437601, -4.53821707, -1.81814766, -0.89523673, -2.18286943,
         -1.50445235, -2.81978679, -2.90949965, -4.78050327, -3.54446316]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.92437601, -4.53821659, -1.81814742, -0.89523673, -2.18286896,
          -1.50445259, -2.81978631, -2.90949917, -4.78050327, -3.54446268],
         [-3.92437601, -4.53821659, -1.81814742, -0.89523673, -2.18286896,
          -1.50445259, -2.81978631, -2.90949917, -4.78050327, -3.54446268]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.10458970,  1.71843028, -1.00163889, -1.92454958, -0.63691735,
          -1.31533372,  0.08971286,  0.72467637]]], device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         ...,


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0860 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 91, vnnlib ID: 91 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.28595638,  -5.88002491, -13.45972347, -12.72046280, -11.91884041,
         -13.39254284, -13.69190216, -11.92345619, -11.07378769,  -5.33333635]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [628]; unstable size 628; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 195, 1, 628] with unstable size 194 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 628] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 628] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [194]; unstable size 194; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 194] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 194] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.77330256,  5.60239124,  4.83423853,  3.93323231,  5.32919025,
          5.82401514,  3.69637346,  3.85418415, -1.36576128]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.28595638,  -5.88002491, -13.45972347, -12.72046280, -11.91884041,
         -13.39254284, -13.69190216, -11.92345619, -11.07378769,  -5.33333635]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.28595638,  -5.88002491, -13.45972347, -12.72046280, -11.91884041,
          -13.39254284, -13.69190216, -11.92345619, -11.07378769,  -5.33333635]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.54668856]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.32222211, -1.24285710, -1.14761901,  ..., -1.32222211,
            -1.32222211, -1.21111107],
           [-1.25873005, -1.24285710, -1.16349196,  ..., -1.32222211,
            -1.32222211, -1.32222211],
           [-1.22698402, -1.22698402, -1.21111107,  ..., -1.33809519,
            -1.32222211, -1.21111107],
           ...,
           [ 0.97936511,  0.99523818,  0.99523818,  ...,  1.04285717,
             1.05873048,  1.04285717],
           [ 1.04285717,  1.04285717,  1.02698421,  ...,  1.05873048,
             1.10634947,  1.13809550],
           [ 1.04285717,  1.04285717,  1.04285717,  ...,  1.01111114,
             1.07460344,  1.07460344]],

          [[-1.56199670, -1.48148143, -1.38486302,  ..., -1.46537840,
            -1.46537840, -1.35265696],
           [-1.44927526, -1.43317223, -1.35265696,  ..., -1.46537840,
            -1.46537840, -1.46537840],
           [-1.40096617, -1.40096617, -1.38486302,  ..., -1.48148143,
            -1.46537840, -1.35265696],
           ...,
           [ 0.72463775,  0.74074084,  0.74074084,  ...,  0.86956531,
             0.88566834,  0.86956531],
           [ 0.78904998,  0.78904998,  0.77294695,  ...,  0.88566834,
             0.93397754,  0.96618366],
           [ 0.78904998,  0.78904998,  0.78904998,  ...,  0.83735919,
             0.90177143,  0.90177143]],

          [[-1.30284870, -1.22788620, -1.13793111,  ..., -1.25787115,
            -1.25787115, -1.15292358],
           [-1.21289361, -1.19790113, -1.12293863,  ..., -1.25787115,
            -1.25787115, -1.25787115],
           [-1.16791618, -1.16791618, -1.15292358,  ..., -1.27286363,
            -1.25787115, -1.15292358],
           ...,
           [ 0.84107965,  0.85607213,  0.85607213,  ...,  0.94602716,
             0.96101969,  0.94602716],
           [ 0.90104967,  0.90104967,  0.88605714,  ...,  0.96101969,
             1.00599718,  1.03598225],
           [ 0.90104967,  0.90104967,  0.90104967,  ...,  0.91604215,
             0.97601217,  0.97601217]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0692 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 92, vnnlib ID: 92 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.22173882,  -9.89736652,  -4.68373394,  -3.01329088,  -4.28179979,
          -2.86711979,  -5.53003645,  -5.05347300, -11.67127705,  -7.88633108]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [485]; unstable size 485; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 197, 1, 485] with unstable size 196 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 485] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 485] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [196]; unstable size 196; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 196] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 196] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.00222683,  5.24682665,  0.82175827, -0.20462835,  0.32712078,
          1.14493608,  1.33189166,  7.36666679,  3.64896464]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.22173882,  -9.89736652,  -4.68373394,  -3.01329088,  -4.28179979,
          -2.86711979,  -5.53003645,  -5.05347300, -11.67127705,  -7.88633108]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.09519005,  -9.82092476,  -4.60778522,  -3.10166645,  -4.19021606,
           -3.15565491,  -5.31743002,  -5.17958307, -11.51678562,  -7.83411169]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05398846]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0069 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0722 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 93, vnnlib ID: 93 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.15195465,  -9.58116150, -14.61256504, -15.32470417, -14.07134438,
         -16.02833176, -16.91090012, -13.49322128, -10.77580357, -11.62801266]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [531]; unstable size 531; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 531] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 531] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 531] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 184] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.31977201, 3.21350288, 3.97968650, 2.74568701, 4.38296270, 5.60134315,
         1.73482776, 0.05008936, 1.12907422]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0660 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 94, vnnlib ID: 94 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.19431782, -14.89802456,  -8.13741684,  -9.92391682,  -9.58477306,
          -9.65702534, -11.04900360, -13.72198963,  -7.17759037, -14.95812511]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [488]; unstable size 488; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 144, 1, 488] with unstable size 143 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 488] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 488] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [143]; unstable size 143; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 143] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 143] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.41919065,  6.05724716,  1.13111067,  0.98754263,  0.83572400,
          2.28893948,  4.95927286, -1.78601420,  6.10188103]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.19431782, -14.89802456,  -8.13741684,  -9.92391682,  -9.58477306,
          -9.65702534, -11.04900360, -13.72198963,  -7.17759037, -14.95812511]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.19431925, -14.89802551,  -8.13741779,  -9.92391777,  -9.58477402,
           -9.65702629, -11.04900360, -13.72199059,  -7.17759132, -14.95812702],
         [ -6.19431925, -14.89802551,  -8.13741779,  -9.92391777,  -9.58477402,
           -9.65702629, -11.04900360, -13.72199059,  -7.17759132, -14.95812702]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.94309855, -0.95982647]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]],


         [[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0773 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 95, vnnlib ID: 95 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.28730583,  -6.10024929,  -9.28009796,  -8.44915771,  -9.51987553,
          -8.47933578,  -8.97727776, -11.69865417,  -9.80428314,  -9.38548374]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [510]; unstable size 510; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 179, 1, 510] with unstable size 178 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 510] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 510] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [178]; unstable size 178; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 178] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 178] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.50108564,  1.35111094,  0.54155302,  1.42685080,  0.50430584,
          1.14256907,  3.30734301,  2.23950076,  2.31573248]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.28730583,  -6.10024929,  -9.28009796,  -8.44915771,  -9.51987553,
          -8.47933578,  -8.97727776, -11.69865417,  -9.80428314,  -9.38548374]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.55it/s]100%|██████████| 1/1 [00:00<00:00,  7.55it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.63824320,  -6.32747936,  -8.66589260,  -7.82633018,  -8.96054363,
           -7.87379408,  -8.57020855, -11.11642838,  -9.56104088,  -9.26757812]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.31076384]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1352 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 12.919252395629883
alpha/beta optimization time: 1.3635098934173584
initial alpha-crown bounds: tensor([[-0.44016099,  1.42102575,  0.61154747,  1.51243067,  0.57645893,
          1.21278524,  3.40189695,  2.28027153,  2.34299707]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.44016098976135254
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6226 seconds.
lower bounds for all target labels: [-0.440160870552063, 1.4210271835327148, 0.6115460395812988, 1.5124282836914062, 0.5764589309692383, 1.212784767150879, 3.4018959999084473, 2.280271053314209, 2.342996120452881]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [0]
start creating model mps for candidates: ['lay/16_0']
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=95_spec=0_26520105.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=95_spec=0_26520105.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 234822 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.3449113368988
Verifying property 0 with 1 instances.
##### Instance 95 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.4018969535827637.

Properties batch 1, size 1
Remaining timeout: 198.12337279319763
Verifying property 1 with 1 instances.
##### Instance 95 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.3429970741271973.

Properties batch 2, size 1
Remaining timeout: 198.01335740089417
Verifying property 2 with 1 instances.
##### Instance 95 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.280271530151367.

Properties batch 3, size 1
Remaining timeout: 197.90695810317993
Verifying property 3 with 1 instances.
##### Instance 95 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.5124306678771973.

Properties batch 4, size 1
Remaining timeout: 197.80060625076294
Verifying property 4 with 1 instances.
##### Instance 95 first 10 spec matrices: 
tensor([[[ 0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.4210257530212402.

Properties batch 5, size 1
Remaining timeout: 197.69125485420227
Verifying property 5 with 1 instances.
##### Instance 95 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.212785243988037.

Properties batch 6, size 1
Remaining timeout: 197.58190965652466
Verifying property 6 with 1 instances.
##### Instance 95 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6115474700927734.

Properties batch 7, size 1
Remaining timeout: 197.47371554374695
Verifying property 7 with 1 instances.
##### Instance 95 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.5764589309692383.

Properties batch 8, size 1
Remaining timeout: 197.36608171463013
Verifying property 8 with 1 instances.
##### Instance 95 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.44016099]], device='cuda:0') need to verify.
Model prediction is: tensor([ -7.28730583,  -6.10024929,  -9.28009796,  -8.44915771,  -9.51987553,
         -8.47933578,  -8.97727776, -11.69865417,  -9.80428314,  -9.38548374],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.44016099]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 510
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 175
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 703
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0008020401000976562
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0559    transfer 0.0001    finalize 0.0002    func 0.0565    
Accumulated time: func 0.0565    prepare 0.0003    bound 0.0559    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 28] 
split level 2: [/input-12, 6] 
split level 3: [/input-12, 15] 
split level 4: [/input-12, 58] 
split level 5: [/input-12, 29] 
split level 6: [/input-12, 35] 
split level 7: [/input-12, 82] 
split level 8: [/input-12, 45] 
split level 9: [/input-12, 93] 
split level 10: [/input-8, 1428] 
split level 11: [/input-12, 11] 
split level 12: [/input-8, 781] 
split level 13: [/input-8, 893] 
split level 14: [/input-8, 1422] 
split level 15: [/input-12, 90] 
split level 16: [/input-8, 162] 
split level 17: [/input-8, 173] 
split level 18: [/input-8, 1421] 
split level 19: [/input-8, 894] 
split level 20: [/input-8, 697] 
split level 21: [/input, 1771] 
split level 22: [/input-8, 1916] 
split level 23: [/input-8, 557] 
split level 24: [/input-8, 790] 
split level 25: [/input-8, 655] 
split level 26: [/input-8, 597] 
split level 27: [/input-8, 1019] 
split level 28: [/input-8, 130] 
split level 29: [/input-8, 938] 
split level 30: [/input-8, 797] 
split level 31: [/input-8, 1010] 
split level 32: [/input-8, 793] 
split level 33: [/input-8, 565] 
split level 34: [/input-8, 672] 
split level 35: [/input-8, 1938] 
split level 36: [/input-8, 661] 
split level 37: [/input-8, 618] 
split level 38: [/input-8, 1466] 
split level 39: [/input-8, 1875] 
split level 40: [/input, 2537] 
split level 41: [/input-8, 680] 
split level 42: [/input-8, 1868] 
split level 43: [/input, 995] 
split level 44: [/input-8, 1431] 
split level 45: [/input, 2131] 
split level 46: [/input-8, 1090] 
split level 47: [/input, 1772] 
split level 48: [/input-8, 129] 
split level 49: [/input, 1457] 
split level 50: [/input, 1640] 
split level 51: [/input-8, 1619] 
split level 52: [/input, 3523] 
split level 53: [/input-8, 68] 
split level 54: [/input-8, 936] 
split level 55: [/input, 3505] 
split level 56: [/input-8, 503] 
split level 57: [/input-8, 1135] 
split level 58: [/input, 1708] 
split level 59: [/input, 2541] 
split level 60: [/input, 404] 
split level 61: [/input, 2520] 
split level 62: [/input-8, 1576] 
split level 63: [/input-8, 591] 
split level 64: [/input, 2456] 
split level 65: [/input, 3254] 
split level 66: [/input, 2540] 
split level 67: [/input-8, 985] 
split level 68: [/input, 3255] 
split level 69: [/input, 916] 
split level 70: [/input, 3990] 
split level 71: [/input, 822] 
split level 72: [/input, 2750] 
split level 73: [/input-8, 944] 
split level 74: [/input, 3397] 
split level 75: [/input, 2510] 
split level 76: [/input, 1474] 
split level 77: [/input, 2726] 
split level 78: [/input-8, 1011] 
split level 79: [/input, 2150] 
split level 80: [/input, 2252] 
split level 81: [/input, 2766] 
split level 82: [/input, 1369] 
split level 83: [/input, 3489] 
split level 84: [/input, 1502] 
split level 85: [/input, 2536] 
split level 86: [/input, 238] 
split level 87: [/input-8, 1423] 
split level 88: [/input, 2747] 
split level 89: [/input, 3995] 
split level 90: [/input, 2524] 
split level 91: [/input, 2542] 
split level 92: [/input, 3550] 
split level 93: [/input, 2745] 
split level 94: [/input, 966] 
split level 95: [/input-8, 1631] 
split level 96: [/input, 2772] 
split level 97: [/input, 3504] 
split level 98: [/input, 2525] 
split level 99: [/input-8, 1478] 
split level 100: [/input, 1013] 
split level 101: [/input, 4051] 
split level 102: [/input, 3267] 
split level 103: [/input, 4025] 
split level 104: [/input, 227] 
split level 105: [/input, 242] 
split level 106: [/input-8, 1279] 
split level 107: [/input, 180] 
split level 108: [/input, 957] 
split level 109: [/input, 2538] 
split level 110: [/input, 830] 
split level 111: [/input, 3393] 
split level 112: [/input-8, 1623] 
split level 113: [/input, 2279] 
split level 114: [/input, 241] 
split level 115: [/input-8, 1474] 
split level 116: [/input, 197] 
split level 117: [/input-8, 1597] 
split level 118: [/input, 1575] 
split level 119: [/input-8, 835] 
split level 120: [/input, 3564] 
split level 121: [/input-8, 1446] 
split level 122: [/input, 2526] 
split level 123: [/input, 986] 
split level 124: [/input, 806] 
split level 125: [/input, 3249] 
split level 126: [/input, 4052] 
split level 127: [/input, 580] 
split level 128: [/input-8, 871] 
split level 129: [/input, 2509] 
split level 130: [/input, 3418] 
split level 131: [/input, 170] 
split level 132: [/input, 4059] 
split level 133: [/input, 228] 
split level 134: [/input-8, 510] 
split level 135: [/input, 1019] 
split level 136: [/input, 3553] 
split level 137: [/input, 3473] 
split level 138: [/input, 970] 
split level 139: [/input, 3434] 
split level 140: [/input, 499] 
split level 141: [/input, 3304] 
split level 142: [/input, 979] 
split level 143: [/input, 1401] 
split level 144: [/input, 933] 
split level 145: [/input, 229] 
split level 146: [/input, 950] 
split level 147: [/input, 4066] 
split level 148: [/input-8, 905] 
split level 149: [/input, 1516] 
split level 150: [/input, 3251] 
split level 151: [/input, 3306] 
split level 152: [/input-8, 934] 
split level 153: [/input, 1343] 
split level 154: [/input-8, 296] 
split level 155: [/input, 3265] 
split level 156: [/input, 1425] 
split level 157: [/input-8, 1947] 
split level 158: [/input, 2678] 
split level 159: [/input, 3270] 
split level 160: [/input, 4040] 
split level 161: [/input-8, 1617] 
split level 162: [/input, 1399] 
split level 163: [/input, 3268] 
split level 164: [/input, 2126] 
split level 165: [/input, 1014] 
split level 166: [/input, 1490] 
split level 167: [/input, 972] 
split level 168: [/input, 1137] 
split level 169: [/input-8, 973] 
split level 170: [/input, 815] 
split level 171: [/input-8, 1594] 
split level 172: [/input, 1501] 
split level 173: [/input, 2255] 
split level 174: [/input-8, 990] 
split level 175: [/input, 1154] 
split level 176: [/input-8, 511] 
split level 177: [/input, 2481] 
split level 178: [/input, 1008] 
split level 179: [/input, 4074] 
split level 180: [/input, 3172] 
split level 181: [/input-8, 1596] 
split level 182: [/input, 4065] 
split level 183: [/input, 2111] 
split level 184: [/input, 1770] 
split level 185: [/input, 3554] 
split level 186: [/input, 3281] 
split level 187: [/input, 2556] 
split level 188: [/input, 3305] 
split level 189: [/input-8, 1432] 
split level 190: [/input, 3520] 
split level 191: [/input, 1837] 
split level 192: [/input, 145] 
split level 193: [/input, 1500] 
split level 194: [/input-8, 1584] 
split level 195: [/input, 3974] 
split level 196: [/input, 3494] 
split level 197: [/input, 1051] 
split level 198: [/input, 2204] 
split level 199: [/input, 1788] 
Time: prepare 0.0063    bound 0.0976    transfer 0.0074    finalize 0.0064    func 0.1177    
Accumulated time: func 0.1742    prepare 0.0165    bound 0.1534    transfer 0.0075    finalize 0.0066    
all_split False
======================Cut inference begins======================
max lb tensor(0.35099947) min lb tensor(-0.44006371)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.0186767578125 
BICCOS Cumulative time: 0.0186767578125
Preprocessing time: 0.016940832138061523 Inference time: 0.0002617835998535156 Add cuts time: 7.62939453125e-05 Cut analysis time: 0.001397848129272461
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.42516 (1), -0.42421 (1), -0.42385 (1), -0.42276 (1), -0.42272 (1), -0.42075 (1), -0.42059 (1), -0.42047 (1), -0.42042 (1), -0.42035 (1), -0.41967 (1), -0.41944 (1), -0.41852 (1), -0.41801 (1), -0.41656 (1), -0.41579 (1), -0.41557 (1), -0.41538 (1), -0.41485 (1), -0.41405 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5179    set_bounds 0.0174    solve 0.1179    add 0.2098    
Accumulated time: pickout 0.0004    decision 0.5179    set_bounds 0.0174    solve 0.1179    add 0.2098    
Current (lb-rhs): -0.4251563549041748
50 domains visited
Cumulative time: 0.9651768207550049

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 6] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] 
split level 1: [/input-12, 15] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 15] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
split level 2: [/input-12, 35] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 35] [/input-12, 35] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] 
split level 3: [/input-12, 82] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 82] [/input-12, 82] [/input-12, 35] [/input-12, 82] [/input-12, 82] [/input-12, 35] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3753242492675781
10 lb beta sum: 0.6084467172622681, worst -0.3628416657447815
Time: prepare 0.0078    bound 0.1442    transfer 0.0011    finalize 0.0043    func 0.1605    
Accumulated time: func 0.3347    prepare 0.0249    bound 0.2976    transfer 0.0086    finalize 0.0109    
all_split False
======================Cut inference begins======================
max lb tensor(0.36318755) min lb tensor(-0.36278427)
Number of Verified Splits: 75 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 11
#cuts >= 20: 0
BICCOS time: 0.023166656494140625 
BICCOS Cumulative time: 0.041843414306640625
Preprocessing time: 0.014798879623413086 Inference time: 0.004048824310302734 Add cuts time: 0.002877473831176758 Cut analysis time: 0.0014414787292480469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14134 (2), -0.14122 (2), -0.14116 (2), -0.14066 (2), -0.14013 (2), -0.14010 (2), -0.13622 (2), -0.13579 (2), -0.13515 (2), -0.13378 (2), -0.12988 (2), -0.12915 (2), -0.12676 (2), -0.12662 (2), -0.12167 (2), -0.12055 (2), -0.11939 (2), -0.11931 (2), -0.11856 (2), -0.11746 (2), 
Length of domains: 50
Time: pickout 0.0093    decision 0.0281    set_bounds 0.0174    solve 0.1607    add 0.2108    
Accumulated time: pickout 0.0097    decision 0.5459    set_bounds 0.0347    solve 0.2785    add 0.4206    
Current (lb-rhs): -0.141340434551239
100 domains visited
Cumulative time: 1.421630620956421

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 28] [/input-12, 28] [/input-12, 6] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] 
split level 1: [/input-12, 6] [/input-12, 6] [/input-12, 15] [/input-12, 15] [/input-12, 6] [/input-12, 15] [/input-12, 15] [/input-12, 29] [/input-12, 6] [/input-12, 6] 
split level 2: [/input-12, 15] [/input-12, 15] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 15] [/input-12, 35] [/input-12, 29] 
split level 3: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13346648216247559
10 lb beta sum: 1.1941895484924316, worst -0.042931973934173584
Time: prepare 0.0069    bound 0.1365    transfer 0.0009    finalize 0.0024    func 0.1502    
Accumulated time: func 0.4849    prepare 0.0321    bound 0.4341    transfer 0.0095    finalize 0.0134    
all_split False
======================Cut inference begins======================
max lb tensor(0.56123209) min lb tensor(-0.00378573)
Number of Verified Splits: 399 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.04218173027038574 
BICCOS Cumulative time: 0.08402514457702637
Preprocessing time: 0.013754606246948242 Inference time: 0.019971609115600586 Add cuts time: 0.007635354995727539 Cut analysis time: 0.000820159912109375
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0078    decision 0.0237    set_bounds 0.0166    solve 0.1504    add 0.0217    
Accumulated time: pickout 0.0176    decision 0.5696    set_bounds 0.0514    solve 0.4289    add 0.4423    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 15]), tensor([-1., -1.]), tensor([0, 0]), tensor([3.30031101e+32, 7.73125738e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 15, 28]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([3.30031101e+32, 2.51376867e-01, 1.56401083e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 15, 28]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([3.30031101e+32, 2.51376867e-01, 2.63931632e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 35, 28]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.00936613e-13, 1.21966347e-01, 1.84667215e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 35, 28]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.00936613e-13, 1.21966347e-01, 2.85549760e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 35, 28]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.00936613e-13, 1.40125975e-01, 2.02273652e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 35, 28]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([1.00936613e-13, 1.40125975e-01, 2.94426322e-01]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  7
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3290783166885376
10 lb beta sum: 1.0122581720352173, worst -0.14498615264892578
Time: prepare 0.0005    bound 0.1797    transfer 0.0003    finalize 0.0003    func 0.1809    
Accumulated time: func 0.6658    prepare 0.0327    bound 0.6138    transfer 0.0098    finalize 0.0136    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 28] 
split level 2: [/input-12, 58] 
split level 3: [/input-12, 29] 
split level 4: [/input-12, 35] 
split level 5: [/input-12, 82] 
split level 6: [/input-12, 93] 
split level 7: [/input-8, 173] 
cut re-enabled after branching node selection
0 lb beta sum: 2.389011859893799, worst 0.0322955846786499

all verified at 0th iter
Time: prepare 0.0119    bound 0.0059    transfer 0.0053    finalize 0.0022    func 0.0270    
Accumulated time: func 0.6928    prepare 0.0451    bound 0.6197    transfer 0.0151    finalize 0.0158    
all_split False
======================Cut inference begins======================
max lb tensor(1.61311305) min lb tensor(0.03229558)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=95_spec=0_26520105.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0022
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.010130167007446289 
BICCOS Cumulative time: 0.09415531158447266
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0007    decision 0.0242    set_bounds 0.0378    solve 0.0271    add 0.0001    
Accumulated time: pickout 0.0182    decision 0.5939    set_bounds 0.0891    solve 0.4560    add 0.4424    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
Cumulative time: 2.1010501384735107

found process to kill: terminal indx = 0
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=95_spec=0_26520105.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=95_spec=0_26520105.log
found process for pidx=0
Result: safe in 4.9327 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 96, vnnlib ID: 96 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.44995165, -10.24393463,  -3.02499723,  -5.52738094,  -3.64600706,
          -4.67218781,  -4.64619398,  -5.73077822, -10.13163280,  -9.56945515]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [457]; unstable size 457; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 224, 1, 457] with unstable size 223 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 457] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 457] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [223]; unstable size 223; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 223] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 223] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.06982267,  3.56651187, -3.10427308, -0.30050802, -2.24185658,
         -1.43835664, -0.57025671,  3.45370197,  3.13693857]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.44995165, -10.24393463,  -3.02499723,  -5.52738094,  -3.64600706,
          -4.67218781,  -4.64619398,  -5.73077822, -10.13163280,  -9.56945515]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -5.44995213, -10.24393463,  -3.02499771,  -5.52738142,  -3.64600754,
           -4.67218828,  -4.64619493,  -5.73077869, -10.13163280,  -9.56945324],
         [ -5.44995213, -10.24393463,  -3.02499771,  -5.52738142,  -3.64600754,
           -4.67218828,  -4.64619493,  -5.73077869, -10.13163280,  -9.56945324]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.80375719, -1.62119722,  0.88118649, -1.00018740,  0.02599335,
           1.08458376]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0887 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 97, vnnlib ID: 97 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.42443323, -12.86629391,  -5.06406689,  -6.59175348,  -5.65273857,
          -7.37562561,  -6.97437239,  -7.97660685,  -9.45366764, -11.25179768]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [815]; unstable size 815; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 348, 1, 815] with unstable size 347 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 815] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 815] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [347]; unstable size 347; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 347] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 347] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.99483013,  5.88476849,  0.52514803, -0.25146767,  1.10866010,
          0.87214196,  1.88426137,  2.11473393,  4.06170130]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.42443323, -12.86629391,  -5.06406689,  -6.59175348,  -5.65273857,
          -7.37562561,  -6.97437239,  -7.97660685,  -9.45366764, -11.25179768]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.02it/s]100%|██████████| 1/1 [00:00<00:00,  8.01it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.93084669, -12.23502636,  -4.64208126,  -5.98504353,  -4.79462719,
           -6.75994825,  -6.29002666,  -7.30920172,  -8.82366848, -10.70865059]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.15254593]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1278 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 18.199153900146484
alpha/beta optimization time: 1.378676176071167
initial alpha-crown bounds: tensor([[ 1.10888278,  6.06384754,  0.59163463, -0.20346975,  1.20185614,
          0.91255474,  1.97026181,  2.29743671,  4.25615025]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.20346975326538086
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6458 seconds.
lower bounds for all target labels: [1.1088805198669434, 6.063847541809082, 0.5916341543197632, -0.2034706473350525, 1.2018561363220215, 0.9125547409057617, 1.970261812210083, 2.2974367141723633, 4.256150245666504]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [3]
start creating model mps for candidates: ['lay/16_3']
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=97_spec=3_26520615.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=97_spec=3_26520615.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 235442 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.33731412887573
Verifying property 0 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.063847541809082.

Properties batch 1, size 1
Remaining timeout: 198.05652976036072
Verifying property 1 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.256150245666504.

Properties batch 2, size 1
Remaining timeout: 197.94577169418335
Verifying property 2 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.2974367141723633.

Properties batch 3, size 1
Remaining timeout: 197.85171723365784
Verifying property 3 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.970261812210083.

Properties batch 4, size 1
Remaining timeout: 197.75947427749634
Verifying property 4 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.2018561363220215.

Properties batch 5, size 1
Remaining timeout: 197.66556453704834
Verifying property 5 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.1088827848434448.

Properties batch 6, size 1
Remaining timeout: 197.57123446464539
Verifying property 6 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9125547409057617.

Properties batch 7, size 1
Remaining timeout: 197.46943426132202
Verifying property 7 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.5916346311569214.

Properties batch 8, size 1
Remaining timeout: 197.34004974365234
Verifying property 8 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.20346975]], device='cuda:0') need to verify.
Model prediction is: tensor([ -7.42443323, -12.86629391,  -5.06406689,  -6.59175348,  -5.65273857,
         -7.37562561,  -6.97437239,  -7.97660685,  -9.45366764, -11.25179768],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.20346975]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 815
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 334
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 1167
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0007379055023193359
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0551    transfer 0.0001    finalize 0.0001    func 0.0557    
Accumulated time: func 0.0557    prepare 0.0002    bound 0.0551    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 41] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 32] 
split level 3: [/input-12, 33] 
split level 4: [/input-8, 289] 
split level 5: [/input-8, 457] 
split level 6: [/input-12, 60] 
split level 7: [/input-8, 290] 
split level 8: [/input-8, 843] 
split level 9: [/input-8, 1412] 
split level 10: [/input-8, 1003] 
split level 11: [/input, 2628] 
split level 12: [/input, 2629] 
split level 13: [/input-8, 116] 
split level 14: [/input-8, 421] 
split level 15: [/input-8, 866] 
split level 16: [/input-8, 1420] 
split level 17: [/input-8, 1749] 
split level 18: [/input-8, 1748] 
split level 19: [/input-8, 618] 
split level 20: [/input-8, 1756] 
split level 21: [/input, 476] 
split level 22: [/input-8, 1322] 
split level 23: [/input, 2630] 
split level 24: [/input-8, 2008] 
split level 25: [/input-8, 617] 
split level 26: [/input-8, 1490] 
split level 27: [/input-8, 310] 
split level 28: [/input-8, 619] 
split level 29: [/input-8, 1859] 
split level 30: [/input-8, 858] 
split level 31: [/input-8, 1443] 
split level 32: [/input, 2105] 
split level 33: [/input-8, 429] 
split level 34: [/input-8, 1747] 
split level 35: [/input, 3947] 
split level 36: [/input, 460] 
split level 37: [/input, 329] 
split level 38: [/input-8, 117] 
split level 39: [/input-8, 1004] 
split level 40: [/input, 475] 
split level 41: [/input-8, 1459] 
split level 42: [/input, 620] 
split level 43: [/input-8, 1966] 
split level 44: [/input, 330] 
split level 45: [/input-8, 489] 
split level 46: [/input-8, 2036] 
split level 47: [/input-8, 995] 
split level 48: [/input-8, 1482] 
split level 49: [/input-8, 932] 
split level 50: [/input, 2965] 
split level 51: [/input-8, 477] 
split level 52: [/input, 2326] 
split level 53: [/input-8, 456] 
split level 54: [/input-8, 473] 
split level 55: [/input-8, 928] 
split level 56: [/input, 3148] 
split level 57: [/input-8, 874] 
split level 58: [/input-8, 1331] 
split level 59: [/input, 2122] 
split level 60: [/input-8, 1460] 
split level 61: [/input, 3494] 
split level 62: [/input-8, 978] 
split level 63: [/input-8, 291] 
split level 64: [/input, 2642] 
split level 65: [/input, 3692] 
split level 66: [/input, 1097] 
split level 67: [/input, 236] 
split level 68: [/input, 458] 
split level 69: [/input-8, 1757] 
split level 70: [/input-8, 963] 
split level 71: [/input, 1302] 
split level 72: [/input-8, 1011] 
split level 73: [/input, 2137] 
split level 74: [/input-8, 481] 
split level 75: [/input-8, 414] 
split level 76: [/input, 1557] 
split level 77: [/input-8, 929] 
split level 78: [/input-8, 413] 
split level 79: [/input, 2981] 
split level 80: [/input, 1590] 
split level 81: [/input, 2359] 
split level 82: [/input, 426] 
split level 83: [/input, 3163] 
split level 84: [/input, 102] 
split level 85: [/input, 1370] 
split level 86: [/input, 3130] 
split level 87: [/input-8, 1427] 
split level 88: [/input-8, 264] 
split level 89: [/input, 3178] 
split level 90: [/input, 361] 
split level 91: [/input, 313] 
split level 92: [/input, 3515] 
split level 93: [/input, 2949] 
split level 94: [/input-8, 994] 
split level 95: [/input, 2155] 
split level 96: [/input-8, 2037] 
split level 97: [/input, 408] 
split level 98: [/input, 2087] 
split level 99: [/input-8, 1491] 
split level 100: [/input, 2236] 
split level 101: [/input-8, 1570] 
split level 102: [/input-8, 2033] 
split level 103: [/input-8, 940] 
split level 104: [/input, 132] 
split level 105: [/input, 252] 
split level 106: [/input, 2232] 
split level 107: [/input, 3195] 
split level 108: [/input, 1556] 
split level 109: [/input-8, 1323] 
split level 110: [/input-8, 2000] 
split level 111: [/input, 1368] 
split level 112: [/input, 3946] 
split level 113: [/input, 3096] 
split level 114: [/input-8, 474] 
split level 115: [/input-8, 948] 
split level 116: [/input-8, 620] 
split level 117: [/input-8, 2001] 
split level 118: [/input, 2392] 
split level 119: [/input-8, 586] 
split level 120: [/input, 2235] 
split level 121: [/input-8, 1483] 
split level 122: [/input, 3400] 
split level 123: [/input-8, 1489] 
split level 124: [/input-8, 859] 
split level 125: [/input, 2343] 
split level 126: [/input, 2342] 
split level 127: [/input-8, 1950] 
split level 128: [/input, 3180] 
split level 129: [/input, 3912] 
split level 130: [/input-8, 1765] 
split level 131: [/input-8, 1568] 
split level 132: [/input, 2357] 
split level 133: [/input, 134] 
split level 134: [/input-8, 1554] 
split level 135: [/input, 3177] 
split level 136: [/input, 2325] 
split level 137: [/input, 2071] 
split level 138: [/input-8, 1576] 
split level 139: [/input, 3131] 
split level 140: [/input-8, 1426] 
split level 141: [/input, 2154] 
split level 142: [/input, 3690] 
split level 143: [/input-8, 1986] 
split level 144: [/input, 3923] 
split level 145: [/input-8, 397] 
split level 146: [/input, 2361] 
split level 147: [/input, 1317] 
split level 148: [/input-8, 979] 
split level 149: [/input, 2268] 
split level 150: [/input, 2950] 
split level 151: [/input-8, 1006] 
split level 152: [/input, 2373] 
split level 153: [/input, 3655] 
split level 154: [/input-8, 126] 
split level 155: [/input, 2425] 
split level 156: [/input, 1446] 
split level 157: [/input, 3192] 
split level 158: [/input, 2067] 
split level 159: [/input-8, 450] 
split level 160: [/input-8, 1553] 
split level 161: [/input, 3658] 
split level 162: [/input-8, 1552] 
split level 163: [/input, 2262] 
split level 164: [/input, 2072] 
split level 165: [/input, 4009] 
split level 166: [/input, 2422] 
split level 167: [/input, 3095] 
split level 168: [/input, 2360] 
split level 169: [/input, 3113] 
split level 170: [/input, 3724] 
split level 171: [/input, 3708] 
split level 172: [/input, 2948] 
split level 173: [/input, 2982] 
split level 174: [/input-8, 495] 
split level 175: [/input, 2421] 
split level 176: [/input, 3189] 
split level 177: [/input, 3492] 
split level 178: [/input, 2243] 
split level 179: [/input-8, 867] 
split level 180: [/input, 2227] 
split level 181: [/input, 114] 
split level 182: [/input, 3660] 
split level 183: [/input, 2563] 
split level 184: [/input, 220] 
split level 185: [/input, 1338] 
split level 186: [/input, 2967] 
split level 187: [/input, 1572] 
split level 188: [/input, 116] 
split level 189: [/input, 2054] 
split level 190: [/input, 2375] 
split level 191: [/input, 360] 
split level 192: [/input, 3212] 
split level 193: [/input, 3350] 
split level 194: [/input-8, 1001] 
split level 195: [/input, 117] 
split level 196: [/input, 3642] 
split level 197: [/input, 1484] 
split level 198: [/input, 2884] 
split level 199: [/input, 2997] 
Time: prepare 0.0061    bound 0.1009    transfer 0.0072    finalize 0.0056    func 0.1199    
Accumulated time: func 0.1756    prepare 0.0162    bound 0.1560    transfer 0.0073    finalize 0.0058    
all_split False
======================Cut inference begins======================
max lb tensor(0.04398483) min lb tensor(-0.20346931)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.013732433319091797 
BICCOS Cumulative time: 0.013732433319091797
Preprocessing time: 0.012186765670776367 Inference time: 0.0001385211944580078 Add cuts time: 7.939338684082031e-05 Cut analysis time: 0.0013277530670166016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19579 (1), -0.19577 (1), -0.19563 (1), -0.19537 (1), -0.19524 (1), -0.19520 (1), -0.19499 (1), -0.19495 (1), -0.19479 (1), -0.19442 (1), -0.19434 (1), -0.19433 (1), -0.19426 (1), -0.19424 (1), -0.19423 (1), -0.19393 (1), -0.19365 (1), -0.19335 (1), -0.19321 (1), -0.19306 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5213    set_bounds 0.0119    solve 0.1201    add 0.2192    
Accumulated time: pickout 0.0004    decision 0.5213    set_bounds 0.0119    solve 0.1201    add 0.2192    
Current (lb-rhs): -0.19579464197158813
50 domains visited
Cumulative time: 0.9661452770233154

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 46] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 1: [/input-12, 46] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
split level 3: [/input-8, 429] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-8, 290] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19013461470603943
10 lb beta sum: 0.40796828269958496, worst -0.1628502607345581
Time: prepare 0.0076    bound 0.1233    transfer 0.0013    finalize 0.0036    func 0.1386    
Accumulated time: func 0.3142    prepare 0.0241    bound 0.2793    transfer 0.0087    finalize 0.0093    
all_split False
======================Cut inference begins======================
max lb tensor(0.22742066) min lb tensor(-0.16281135)
Number of Verified Splits: 99 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.020395517349243164 
BICCOS Cumulative time: 0.03412795066833496
Preprocessing time: 0.013544321060180664 Inference time: 0.004155158996582031 Add cuts time: 0.0022552013397216797 Cut analysis time: 0.00044083595275878906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04542 (2), -0.04449 (2), -0.04439 (2), -0.04424 (2), -0.04379 (2), -0.04361 (2), -0.04301 (2), -0.04264 (2), -0.04241 (2), -0.04182 (2), -0.04168 (2), -0.04151 (2), -0.04139 (2), -0.04121 (2), -0.04113 (2), -0.04091 (2), -0.04069 (2), -0.04058 (2), -0.04027 (2), -0.03996 (2), 
Length of domains: 50
Time: pickout 0.0148    decision 0.0200    set_bounds 0.0125    solve 0.1388    add 0.2372    
Accumulated time: pickout 0.0151    decision 0.5413    set_bounds 0.0245    solve 0.2589    add 0.4563    
Current (lb-rhs): -0.04542234539985657
100 domains visited
Cumulative time: 1.4155094623565674

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 1: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
split level 2: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-8, 289] [/input-12, 33] [/input-8, 289] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 3: [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input, 2072] [/input-8, 290] [/input-8, 290] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07779151201248169
10 lb beta sum: 0.5109068751335144, worst -0.047894999384880066
Time: prepare 0.0087    bound 0.1256    transfer 0.0013    finalize 0.0026    func 0.1410    
Accumulated time: func 0.4552    prepare 0.0336    bound 0.4049    transfer 0.0100    finalize 0.0119    
all_split False
======================Cut inference begins======================
max lb tensor(0.17879426) min lb tensor(-0.04343262)
Number of Verified Splits: 108 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 6
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.03301382064819336 
BICCOS Cumulative time: 0.06714177131652832
Preprocessing time: 0.021095991134643555 Inference time: 0.0071163177490234375 Add cuts time: 0.00313568115234375 Cut analysis time: 0.0016658306121826172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01233 (3), -0.01228 (3), -0.01217 (3), -0.01176 (3), -0.01173 (3), -0.01172 (3), -0.01160 (3), -0.01152 (3), -0.01137 (3), -0.01133 (3), -0.01128 (3), -0.01122 (3), -0.01106 (3), -0.01089 (3), -0.01088 (3), -0.01078 (3), -0.01067 (3), -0.01060 (3), -0.01049 (3), -0.01025 (3), 
Length of domains: 50
Time: pickout 0.0160    decision 0.0294    set_bounds 0.0165    solve 0.1411    add 0.1543    
Accumulated time: pickout 0.0311    decision 0.5707    set_bounds 0.0410    solve 0.4000    add 0.6106    
Current (lb-rhs): -0.012331157922744751
150 domains visited
Cumulative time: 1.8063445091247559

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 1: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
split level 2: [/input-8, 290] [/input-8, 289] [/input-8, 289] [/input-8, 290] [/input-8, 289] [/input-12, 33] [/input-8, 289] [/input-8, 289] [/input-8, 289] [/input-8, 289] 
split level 3: [/input, 2072] [/input-8, 290] [/input-8, 290] [/input, 2630] [/input-8, 290] [/input, 2071] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.051233768463134766
10 lb beta sum: 0.5603724718093872, worst -0.1045912504196167
Time: prepare 0.0087    bound 0.1610    transfer 0.0015    finalize 0.0114    func 0.1854    
Accumulated time: func 0.6406    prepare 0.0425    bound 0.5659    transfer 0.0115    finalize 0.0234    
all_split False
======================Cut inference begins======================
max lb tensor(0.20295915) min lb tensor(-0.00795177)
Number of Verified Splits: 316 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 45.
#cuts 1-3: 11
#cuts 4-6: 34
#cuts >= 20: 0
BICCOS time: 0.043457984924316406 
BICCOS Cumulative time: 0.11059975624084473
Preprocessing time: 0.015407085418701172 Inference time: 0.01643538475036621 Add cuts time: 0.009744644165039062 Cut analysis time: 0.001870870590209961
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00795 (4), -0.00793 (4), -0.00736 (4), -0.00732 (4), -0.00727 (4), -0.00722 (4), -0.00478 (4), -0.00461 (4), -0.00450 (4), -0.00258 (4), -0.00124 (4), -0.00124 (4), 
Length of domains: 12
Time: pickout 0.0014    decision 0.0203    set_bounds 0.0169    solve 0.1856    add 0.5424    
Accumulated time: pickout 0.0325    decision 0.5909    set_bounds 0.0579    solve 0.5856    add 1.1530    
Current (lb-rhs): -0.0079517662525177
162 domains visited
Cumulative time: 2.6238925457000732

Shallow-BaB round 5
batch: 12
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 32] [/input-12, 41] [/input-12, 32] 
split level 1: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] 
split level 2: [/input-8, 457] [/input-8, 289] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 289] [/input-8, 289] [/input-8, 289] [/input-8, 289] 
split level 3: [/input-8, 289] [/input-8, 457] [/input-8, 289] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 843] 
split level 4: [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 290] 
split level 5: [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] 
split level 6: [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] 
split level 7: [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] 
split level 8: [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 117] 
split level 9: [/input-8, 117] [/input-8, 117] [/input-8, 1490] [/input-8, 117] [/input-8, 117] [/input-8, 1490] [/input-8, 117] [/input-8, 117] [/input-8, 117] [/input-8, 1748] 
split level 10: [/input-8, 1331] [/input-8, 1490] [/input-8, 117] [/input-8, 1331] [/input-8, 1490] [/input-8, 117] [/input-8, 1331] [/input-8, 1331] [/input-8, 1490] [/input-8, 1490] 
split level 11: [/input-8, 995] [/input-8, 1331] [/input-8, 1331] [/input-8, 995] [/input-8, 1331] [/input-8, 1331] [/input-8, 995] [/input-8, 995] [/input-8, 1331] [/input-8, 1331] 
split level 12: [/input-8, 874] [/input-8, 1859] [/input-8, 874] [/input-8, 874] [/input-8, 1859] [/input-8, 874] [/input-8, 874] [/input-8, 874] [/input-8, 1859] [/input-8, 1859] 
split level 13: [/input, 2087] [/input-8, 995] [/input-8, 995] [/input, 2087] [/input-8, 995] [/input-8, 995] [/input, 2087] [/input-8, 1323] [/input-8, 995] [/input-8, 874] 
split level 14: [/input-8, 1323] [/input-8, 874] [/input-8, 1323] [/input-8, 1323] [/input-8, 874] [/input-8, 1323] [/input-8, 1323] [/input, 2087] [/input-8, 874] [/input-8, 995] 
split level 15: [/input, 3400] [/input-8, 1323] [/input, 3961] [/input, 3400] [/input-8, 1323] [/input, 3961] [/input, 3400] [/input, 3400] [/input-8, 1323] [/input-8, 1323] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04878711700439453
10 lb beta sum: 0.5863906145095825, worst -0.12579602003097534
Time: prepare 0.0083    bound 0.1876    transfer 0.0067    finalize 0.0043    func 0.2097    
Accumulated time: func 0.8503    prepare 0.0518    bound 0.7534    transfer 0.0181    finalize 0.0276    
all_split False
======================Cut inference begins======================
max lb tensor(0.19631258) min lb tensor(0.00010195)
Number of Verified Splits: 384 of 384
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=97_spec=3_26520615.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0018
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 57.
#cuts 1-3: 11
#cuts 4-6: 46
#cuts >= 20: 0
BICCOS time: 0.053241729736328125 
BICCOS Cumulative time: 0.16384148597717285
Preprocessing time: 0.013237714767456055 Inference time: 0.02203059196472168 Add cuts time: 0.014231681823730469 Cut analysis time: 0.003741741180419922
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0017    decision 0.0592    set_bounds 0.0184    solve 0.2099    add 0.0360    
Accumulated time: pickout 0.0342    decision 0.6501    set_bounds 0.0763    solve 0.7955    add 1.1890    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
162 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1420]), tensor([-1.]), tensor([0]), tensor([3.30031720e+32]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1420], [1.0], [0], [3.300317196233842e+32], [0]), '/input-12': (tensor([46, 33, 41, 32]), tensor([-1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([0.15441100, 0.02208455, 0.00444530, 0.02449326]), tensor([1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1420], [1.0], [0], [3.300317196233842e+32], [0]), '/input-12': (tensor([46, 33, 41, 32]), tensor([-1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([0.15441100, 0.02208455, 0.00444530, 0.00856754]), tensor([1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1420], [1.0], [0], [3.300317196233842e+32], [0]), '/input-12': (tensor([46, 33, 41]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([0.15441100, 0.02208455, 0.15461968]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1420], [1.0], [0], [3.300317196233842e+32], [0]), '/input-12': (tensor([46, 33, 41]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([0.15441100, 0.03193428, 0.00746809]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1420], [1.0], [0], [3.300317196233842e+32], [0]), '/input-12': (tensor([46, 33, 41]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([0.15441100, 0.03193428, 0.15660857]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1420], [1.0], [0], [3.300317196233842e+32], [0]), '/input-12': (tensor([46]), tensor([1.]), tensor([0]), tensor([3.30035433e+32]), tensor([1]))}
Shallow branching resets to n domains:  7
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20227038860321045
10 lb beta sum: 0.37241190671920776, worst -0.16113603115081787
Time: prepare 0.0005    bound 0.1807    transfer 0.0003    finalize 0.0003    func 0.1819    
Accumulated time: func 1.0322    prepare 0.0524    bound 0.9342    transfer 0.0184    finalize 0.0279    
After pruning, left:  3

Back to Regular BaB

BaB round 1
batch: 3
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 32] [/input-12, 41] 
split level 1: [/input-12, 46] [/input-8, 457] [/input-12, 32] 
split level 2: [/input-12, 32] [/input-8, 289] [/input-12, 33] 
split level 3: [/input-12, 33] [/input-8, 290] [/input-8, 289] 
split level 4: [/input-8, 289] [/input-8, 116] [/input-8, 290] 
split level 5: [/input-8, 290] [/input-8, 1749] [/input-8, 1748] 
split level 6: [/input-8, 1748] [/input-8, 1748] [/input-8, 429] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7602428197860718, worst -0.09997272491455078
10 lb beta sum: 0.762776255607605, worst -0.14715683460235596
Time: prepare 0.0182    bound 0.1807    transfer 0.0013    finalize 0.0029    func 0.2057    
Accumulated time: func 1.2379    prepare 0.0710    bound 1.1149    transfer 0.0197    finalize 0.0308    
all_split False
======================Cut inference begins======================
max lb tensor(0.47318977) min lb tensor(-0.09931511)
Number of Verified Splits: 332 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.7534724473953247, worst -0.12916862964630127
10 lb beta sum: 0.8410449624061584, worst -0.13800662755966187
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=97_spec=3_26520615.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 59.
#cuts 1-3: 11
#cuts 4-6: 48
#cuts >= 20: 0
BICCOS time: 0.3980233669281006 
BICCOS Cumulative time: 0.5618648529052734
Preprocessing time: 0.01196146011352539 Inference time: 0.3681514263153076 Add cuts time: 0.014857053756713867 Cut analysis time: 0.003053426742553711
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09932 (7), -0.09594 (7), -0.09544 (7), -0.09433 (7), -0.09310 (7), -0.09095 (7), -0.09040 (7), -0.08816 (7), -0.08244 (7), -0.08218 (7), -0.08161 (7), -0.08068 (7), -0.07908 (7), -0.07882 (7), -0.07863 (7), -0.07843 (7), -0.07834 (7), -0.07771 (7), -0.07715 (7), -0.07660 (7), 
Length of domains: 52
Time: pickout 0.0009    decision 0.0239    set_bounds 0.0463    solve 0.2059    add 0.0708    
Accumulated time: pickout 0.0351    decision 0.6740    set_bounds 0.1227    solve 1.0014    add 1.2597    
Current (lb-rhs): -0.0993151068687439
214 domains visited
Cumulative time: 4.019998788833618

BaB round 2
batch: 52
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] 
split level 1: [/input-8, 421] [/input-8, 421] [/input-8, 421] [/input-8, 421] [/input-8, 421] [/input-8, 421] [/input-8, 421] [/input-8, 1749] [/input-8, 421] [/input-8, 421] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09626969695091248
10 lb beta sum: 0.19171738624572754, worst -0.13815833628177643
Time: prepare 0.0043    bound 0.1505    transfer 0.0040    finalize 0.0018    func 0.1620    
Accumulated time: func 1.3999    prepare 0.0755    bound 1.2653    transfer 0.0238    finalize 0.0326    
all_split False
======================Cut inference begins======================
max lb tensor(0.01299280) min lb tensor(-0.09477448)
Number of Verified Splits: 13 of 208
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=97_spec=3_26520615.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.010392427444458008 
BICCOS Cumulative time: 0.5722572803497314
Preprocessing time: 0.006612062454223633 Inference time: 0.0013954639434814453 Add cuts time: 0.0013489723205566406 Cut analysis time: 0.001035928726196289
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09477 (9), -0.09134 (9), -0.09061 (9), -0.09034 (9), -0.08980 (9), -0.08801 (9), -0.08717 (9), -0.08637 (9), -0.08581 (9), -0.08559 (9), -0.08533 (9), -0.08357 (9), -0.08301 (9), -0.08216 (9), -0.08080 (9), -0.07855 (9), -0.07776 (9), -0.07747 (9), -0.07684 (9), -0.07633 (9), 
Length of domains: 195
Time: pickout 0.0132    decision 0.0168    set_bounds 0.0105    solve 0.1621    add 0.0806    
Accumulated time: pickout 0.0483    decision 0.6908    set_bounds 0.1331    solve 1.1635    add 1.3404    
Current (lb-rhs): -0.09477448463439941
409 domains visited
Cumulative time: 4.320893049240112

BaB round 3
batch: 195
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09414976835250854
10 lb beta sum: 0.1993313431739807, worst -0.09274335205554962
Time: prepare 0.0078    bound 0.1168    transfer 0.0024    finalize 0.0027    func 0.1323    
Accumulated time: func 1.5322    prepare 0.0835    bound 1.3821    transfer 0.0262    finalize 0.0353    
all_split False
======================Cut inference begins======================
max lb tensor(0.04909825) min lb tensor(-0.09268978)
Number of Verified Splits: 6 of 390
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=97_spec=3_26520615.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0015
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.014137506484985352 
BICCOS Cumulative time: 0.5863947868347168
Preprocessing time: 0.011733531951904297 Inference time: 0.0005702972412109375 Add cuts time: 0.00011730194091796875 Cut analysis time: 0.0017163753509521484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09269 (10), -0.08888 (10), -0.08846 (10), -0.08771 (10), -0.08592 (10), -0.08501 (10), -0.08464 (10), -0.08389 (10), -0.08364 (10), -0.08342 (10), -0.08268 (10), -0.08151 (10), -0.08101 (10), -0.08097 (10), -0.08056 (10), -0.08025 (10), -0.07999 (10), -0.07966 (10), -0.07932 (10), -0.07861 (10), 
Length of domains: 384
Time: pickout 0.0171    decision 0.0195    set_bounds 0.0174    solve 0.1324    add 0.0834    
Accumulated time: pickout 0.0654    decision 0.7103    set_bounds 0.1505    solve 1.2959    add 1.4238    
Current (lb-rhs): -0.09268978238105774
793 domains visited
Cumulative time: 4.612282991409302

BaB round 4
batch: 384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1003] [/input-8, 1003] [/input-8, 1859] [/input-8, 1003] [/input-8, 429] [/input-8, 1859] [/input-8, 1003] [/input-8, 1003] [/input-8, 1859] [/input-8, 1003] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23525431752204895, worst -0.0905512273311615
10 lb beta sum: 0.23525431752204895, worst -0.09047850966453552
Time: prepare 0.0338    bound 0.1365    transfer 0.0124    finalize 0.0068    func 0.1948    
Accumulated time: func 1.7270    prepare 0.1175    bound 1.5187    transfer 0.0386    finalize 0.0421    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00824171) min lb tensor(-0.09045076)
Number of Verified Splits: 0 of 768
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=97_spec=3_26520615.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0021
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.026233434677124023 
BICCOS Cumulative time: 0.6126282215118408
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09045 (11), -0.08662 (11), -0.08616 (11), -0.08557 (11), -0.08377 (11), -0.08301 (11), -0.08233 (11), -0.08176 (11), -0.08126 (11), -0.08110 (11), -0.08100 (11), -0.08025 (11), -0.07935 (11), -0.07898 (11), -0.07823 (11), -0.07818 (11), -0.07807 (11), -0.07802 (11), -0.07749 (11), -0.07733 (11), 
Length of domains: 768
Time: pickout 0.0221    decision 0.0337    set_bounds 0.0339    solve 0.1950    add 0.1269    
Accumulated time: pickout 0.0875    decision 0.7441    set_bounds 0.1844    solve 1.4909    add 1.5506    
Current (lb-rhs): -0.09045076370239258
1561 domains visited
Cumulative time: 5.061034440994263

BaB round 5
batch: 768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1859] [/input-8, 1859] [/input, 620] [/input-8, 1859] [/input-8, 1003] [/input, 620] [/input-8, 1859] [/input-8, 1859] [/input, 620] [/input-8, 1859] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23525431752204895, worst -0.08636754751205444
10 lb beta sum: 0.23525431752204895, worst -0.08628109097480774
Time: prepare 0.0745    bound 0.1594    transfer 0.0192    finalize 0.0139    func 0.2776    
Accumulated time: func 2.0046    prepare 0.1923    bound 1.6781    transfer 0.0578    finalize 0.0561    
all_split False
======================Cut inference begins======================
max lb tensor(0.01146415) min lb tensor(-0.08624032)
Number of Verified Splits: 15 of 1536
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=97_spec=3_26520615.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.06318211555480957 
BICCOS Cumulative time: 0.6758103370666504
Preprocessing time: 0.05857348442077637 Inference time: 0.0021576881408691406 Add cuts time: 0.0007729530334472656 Cut analysis time: 0.0016779899597167969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08624 (12), -0.08584 (12), -0.08379 (12), -0.08213 (12), -0.08185 (12), -0.08184 (12), -0.08134 (12), -0.08125 (12), -0.08093 (12), -0.08090 (12), -0.07926 (12), -0.07894 (12), -0.07841 (12), -0.07831 (12), -0.07740 (12), -0.07740 (12), -0.07719 (12), -0.07699 (12), -0.07678 (12), -0.07656 (12), 
Length of domains: 1521
Time: pickout 0.0830    decision 0.0634    set_bounds 0.0759    solve 0.2793    add 0.1105    
Accumulated time: pickout 0.1705    decision 0.8075    set_bounds 0.2603    solve 1.7702    add 1.6611    
Current (lb-rhs): -0.08624032139778137
3082 domains visited
Cumulative time: 5.74584174156189

BaB round 6
batch: 1521
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1490] [/input-8, 1490] [/input, 330] [/input-8, 1490] [/input-8, 843] [/input, 330] [/input-8, 1490] [/input-8, 1490] [/input, 330] [/input-8, 1490] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08567154407501221
10 lb beta sum: 0.19539766013622284, worst -0.08433231711387634
Time: prepare 0.0705    bound 0.2296    transfer 0.0561    finalize 0.0212    func 0.3979    
Accumulated time: func 2.4024    prepare 0.2631    bound 1.9077    transfer 0.1139    finalize 0.0772    
all_split False
======================Cut inference begins======================
max lb tensor(0.01459882) min lb tensor(-0.08430974)
Number of Verified Splits: 172 of 3042
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=97_spec=3_26520615.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 6
#cuts 7-9: 12
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.14124846458435059 
BICCOS Cumulative time: 0.817058801651001
Preprocessing time: 0.10278105735778809 Inference time: 0.031144142150878906 Add cuts time: 0.004932403564453125 Cut analysis time: 0.0023908615112304688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08431 (13), -0.08390 (13), -0.08183 (13), -0.08023 (13), -0.08001 (13), -0.07990 (13), -0.07958 (13), -0.07935 (13), -0.07934 (13), -0.07897 (13), -0.07892 (13), -0.07806 (13), -0.07774 (13), -0.07698 (13), -0.07685 (13), -0.07684 (13), -0.07633 (13), -0.07601 (13), -0.07589 (13), -0.07586 (13), 
Length of domains: 2870
Time: pickout 0.0460    decision 0.2620    set_bounds 0.1313    solve 0.3992    add 0.1241    
Accumulated time: pickout 0.2165    decision 1.0695    set_bounds 0.3916    solve 2.1694    add 1.7852    
Current (lb-rhs): -0.08430974185466766
5952 domains visited
Cumulative time: 6.865350246429443

BaB round 7
batch: 2870
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 620] [/input-8, 429] [/input-8, 843] [/input, 620] [/input-8, 1859] [/input-8, 1003] [/input, 620] [/input-8, 429] [/input-8, 843] [/input, 620] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08283212780952454
10 lb beta sum: 0.1945064216852188, worst -0.08151249587535858
Time: prepare 0.1446    bound 0.5068    transfer 0.0727    finalize 0.0409    func 0.8041    
Accumulated time: func 3.2066    prepare 0.4079    bound 2.4145    transfer 0.1866    finalize 0.1182    
all_split False
======================Cut inference begins======================
max lb tensor(0.01461658) min lb tensor(-0.08150294)
Number of Verified Splits: 381 of 5740
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=97_spec=3_26520615.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 4
#cuts 4-6: 9
#cuts 7-9: 20
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.26206207275390625 
BICCOS Cumulative time: 1.0791208744049072
Preprocessing time: 0.1928696632385254 Inference time: 0.05553841590881348 Add cuts time: 0.010473966598510742 Cut analysis time: 0.0031800270080566406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08150 (14), -0.08109 (14), -0.07965 (14), -0.07924 (14), -0.07763 (14), -0.07743 (14), -0.07723 (14), -0.07710 (14), -0.07676 (14), -0.07669 (14), -0.07654 (14), -0.07653 (14), -0.07612 (14), -0.07586 (14), -0.07569 (14), -0.07558 (14), -0.07531 (14), -0.07529 (14), -0.07488 (14), -0.07471 (14), 
Length of domains: 5359
Time: pickout 0.0671    decision 0.1747    set_bounds 0.3974    solve 0.8057    add 0.1593    
Accumulated time: pickout 0.2835    decision 1.2442    set_bounds 0.7890    solve 2.9751    add 1.9445    
Current (lb-rhs): -0.08150294423103333
11311 domains visited
Cumulative time: 8.746698141098022

BaB round 8
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 995] [/input, 620] [/input-8, 1003] [/input-8, 995] [/input, 620] [/input-8, 843] [/input, 330] [/input, 620] [/input-8, 1003] [/input, 330] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08250749111175537
10 lb beta sum: 0.19459125399589539, worst -0.0811917632818222
Time: prepare 0.2062    bound 0.6927    transfer 0.0616    finalize 0.0600    func 1.0750    
Accumulated time: func 4.2815    prepare 0.6144    bound 3.1072    transfer 0.2482    finalize 0.1782    
all_split False
======================Cut inference begins======================
max lb tensor(0.00669684) min lb tensor(-0.08118245)
Number of Verified Splits: 465 of 8192
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=97_spec=3_26520615.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=97_spec=3_26520615.cuts: total 655 constraints, 31075 nonzero elements
cuts preparing time: 0.0149
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 736.
#cuts 1-3: 131
#cuts 4-6: 14
#cuts 7-9: 56
#cuts 10-12: 14
#cuts 13-15: 12
#cuts 16-18: 31
#cuts 19-21: 25
#cuts >= 20: 453
BICCOS time: 0.6508567333221436 
BICCOS Cumulative time: 1.7299776077270508
Preprocessing time: 0.27677321434020996 Inference time: 0.08384275436401367 Add cuts time: 0.01903367042541504 Cut analysis time: 0.2712070941925049
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08118 (15), -0.08077 (15), -0.07932 (15), -0.07891 (15), -0.07729 (15), -0.07688 (15), -0.07678 (15), -0.07637 (15), -0.07621 (15), -0.07580 (15), -0.07537 (15), -0.07531 (14), -0.07496 (15), -0.07488 (14), -0.07463 (15), -0.07456 (15), -0.07436 (15), -0.07395 (15), -0.07372 (15), -0.07371 (15), 
Length of domains: 8990
Time: pickout 0.0795    decision 0.4149    set_bounds 0.3700    solve 1.2621    add 0.2256    
Accumulated time: pickout 0.3630    decision 1.6591    set_bounds 1.1591    solve 4.2372    add 2.1701    
Current (lb-rhs): -0.08118245005607605
19038 domains visited
current_vram/total_varm: 10.7GB/99.9GB, batch_size increase to 8192
Cumulative time: 11.770068407058716

BaB round 9
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 473] [/input-8, 477] [/input, 330] [/input-8, 477] [/input-8, 473] [/input-8, 116] [/input-8, 477] [/input-8, 995] [/input-8, 477] [/input, 330] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08028826117515564
10 lb beta sum: 4.645174503326416, worst -0.025764405727386475
Time: prepare 0.4210    bound 3.2920    transfer 0.1092    finalize 0.3878    func 4.3192    
Accumulated time: func 8.6007    prepare 1.0358    bound 6.3993    transfer 0.3574    finalize 0.5660    
all_split False
======================Cut inference begins======================
max lb tensor(0.04726273) min lb tensor(-0.01332065)
Number of Verified Splits: 16200 of 16384
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=97_spec=3_26520615.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=97_spec=3_26520615.cuts: total 1231 constraints, 56187 nonzero elements
cuts preparing time: 0.0226
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1254.
#cuts 1-3: 193
#cuts 4-6: 3
#cuts 7-9: 7
#cuts 10-12: 21
#cuts 13-15: 42
#cuts 16-18: 73
#cuts 19-21: 64
#cuts >= 20: 851
BICCOS time: 3.9116644859313965 
BICCOS Cumulative time: 5.641642093658447
Preprocessing time: 0.5647904872894287 Inference time: 2.5652177333831787 Add cuts time: 0.30502963066101074 Cut analysis time: 0.4766266345977783
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07272 (15), -0.06872 (15), -0.06770 (15), -0.06712 (15), -0.06371 (15), -0.06327 (15), -0.06312 (15), -0.06293 (15), -0.06275 (15), -0.06220 (15), -0.06183 (15), -0.06158 (15), -0.06123 (15), -0.06040 (15), -0.06021 (15), -0.06004 (15), -0.06002 (15), -0.05967 (15), -0.05957 (15), -0.05932 (15), 
Length of domains: 982
Time: pickout 0.1297    decision 0.6903    set_bounds 0.7563    solve 4.3227    add 0.0856    
Accumulated time: pickout 0.4927    decision 2.3494    set_bounds 1.9154    solve 8.5599    add 2.2557    
Current (lb-rhs): -0.07272276282310486
19222 domains visited
current_vram/total_varm: 22.4GB/99.9GB, batch_size increase to 16384
Cumulative time: 21.854013442993164

BaB round 10
batch: 982
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 995] [/input-8, 843] [/input-8, 473] [/input-8, 477] [/input-8, 617] [/input-8, 473] [/input-8, 477] [/input-8, 843] [/input-8, 995] [/input-8, 477] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07916364073753357
10 lb beta sum: 4.5381340980529785, worst -0.04266554117202759
Time: prepare 0.0497    bound 0.6540    transfer 0.0279    finalize 0.0128    func 0.7580    
Accumulated time: func 9.3587    prepare 1.0857    bound 7.0533    transfer 0.3853    finalize 0.5788    
all_split False
======================Cut inference begins======================
max lb tensor(1.18448293) min lb tensor(1.47819519e-05)
Number of Verified Splits: 1964 of 1964
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=97_spec=3_26520615.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0014
Total number of valid cuts: 1254.
#cuts 1-3: 193
#cuts 4-6: 3
#cuts 7-9: 7
#cuts 10-12: 21
#cuts 13-15: 42
#cuts 16-18: 73
#cuts 19-21: 64
#cuts >= 20: 851
BICCOS time: 0.06888890266418457 
BICCOS Cumulative time: 5.710530996322632
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0377    decision 0.0660    set_bounds 0.2715    solve 0.7584    add 0.0001    
Accumulated time: pickout 0.5304    decision 2.4155    set_bounds 2.1869    solve 9.3183    add 2.2558    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
19222 domains visited
Cumulative time: 23.070191383361816

found process to kill: terminal indx = 3
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=97_spec=3_26520615.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=97_spec=3_26520615.cuts
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=97_spec=3_26520615.indx
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=97_spec=3_26520615.log
found process for pidx=3
kill process for pidx=3
Result: safe in 26.0965 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 98, vnnlib ID: 98 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.97282171, -9.59043694, -6.44806576, -4.78952980, -4.97297287,
         -4.42642069, -6.68016386, -6.68106413, -7.70960140, -9.47742367]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [664]; unstable size 664; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 664] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 664] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 664] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 239] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.04075253,  2.86903524,  0.75436568,  0.06829169, -0.61994451,
          1.08730936,  0.85343802,  1.25660920,  3.10610676]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.97282171, -9.59043694, -6.44806576, -4.78952980, -4.97297287,
         -4.42642069, -6.68016386, -6.68106413, -7.70960140, -9.47742367]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.20676279, -9.77461338, -6.61068249, -5.31555939, -4.99939442,
          -5.00283194, -7.04889584, -6.94918585, -7.99256420, -9.84183598]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00343752]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0075 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0321 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 99, vnnlib ID: 99 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.23901796, -6.11622238, -0.89747995, -2.37960625, -1.48292530,
         -3.00284576, -1.44222963, -3.95331812, -5.41394901, -6.03653765]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [445]; unstable size 445; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 180, 1, 445] with unstable size 179 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 445] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 445] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [179]; unstable size 179; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 179] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 179] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.11019564,  3.76489186, -1.18024492,  0.25222450, -0.68485928,
          0.81499976,  1.69955862,  2.79094505,  3.59716272]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.23901796, -6.11622238, -0.89747995, -2.37960625, -1.48292530,
         -3.00284576, -1.44222963, -3.95331812, -5.41394901, -6.03653765]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.23901796, -6.11622334, -0.89747965, -2.37960601, -1.48292530,
          -3.00284576, -1.44222927, -3.95331812, -5.41394997, -6.03653717],
         [-4.23901796, -6.11622334, -0.89747965, -2.37960601, -1.48292530,
          -3.00284576, -1.44222927, -3.95331812, -5.41394997, -6.03653717]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.54474962,  0.04069602]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.05873025,  0.34444451,  0.05873025,  ..., -1.52857137,
            -1.48095226, -1.48095226],
           [ 0.04285724, -0.30634910, -0.44920623,  ..., -1.54444432,
            -1.56031740, -1.52857137],
           [-0.25873005, -0.63968253, -0.94126981,  ..., -1.54444432,
            -1.56031740, -1.54444432],
           ...,
           [-1.92539680, -1.92539680, -1.95714283,  ..., -1.73492062,
            -1.73492062, -1.75079370],
           [-1.90952384, -1.95714283, -1.96507931,  ..., -1.73492062,
            -1.75079370, -1.76666665],
           [-1.89365077, -1.90952384, -1.92539680,  ..., -1.76666665,
            -1.78253973, -1.78253973]],

          [[-0.16103047,  0.11272153, -0.20933965,  ..., -1.41706920,
            -1.36875999, -1.36875999],
           [-0.25764883, -0.56360704, -0.64412236,  ..., -1.43317223,
            -1.44927526, -1.41706920],
           [-0.51529789, -0.80515295, -1.03059578,  ..., -1.43317223,
            -1.44927526, -1.41706920],
           ...,
           [-1.88405800, -1.90016103, -1.91626418,  ..., -1.88405800,
            -1.90016103, -1.88405800],
           [-1.88405800, -1.93236721, -1.94847023,  ..., -1.90016103,
            -1.90016103, -1.90016103],
           [-1.91626418, -1.94847023, -1.95652175,  ..., -1.88405800,
            -1.91626418, -1.91626418]],

          [[-0.92803597, -0.65817088, -0.97301346,  ..., -1.68515754,
            -1.64767623, -1.64767623],
           [-1.00299859, -1.27286363, -1.34782624,  ..., -1.69265378,
            -1.68515754, -1.68515754],
           [-1.25787115, -1.48275876, -1.61769128,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.68515754, -1.68515754, -1.69265378,  ..., -1.64767623,
            -1.66266882, -1.67766130],
           [-1.68515754, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.67766130, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.66266882,
            -1.67766130, -1.68515754]]],


         [[[ 0.05873025,  0.34444451,  0.05873025,  ..., -1.52857137,
            -1.48095226, -1.48095226],
           [ 0.04285724, -0.30634910, -0.44920623,  ..., -1.54444432,
            -1.56031740, -1.52857137],
           [-0.25873005, -0.63968253, -0.94126981,  ..., -1.54444432,
            -1.56031740, -1.54444432],
           ...,
           [-1.92539680, -1.92539680, -1.95714283,  ..., -1.73492062,
            -1.73492062, -1.75079370],
           [-1.90952384, -1.95714283, -1.96507931,  ..., -1.73492062,
            -1.75079370, -1.76666665],
           [-1.89365077, -1.90952384, -1.92539680,  ..., -1.76666665,
            -1.78253973, -1.78253973]],

          [[-0.16103047,  0.11272153, -0.20933965,  ..., -1.41706920,
            -1.36875999, -1.36875999],
           [-0.25764883, -0.56360704, -0.64412236,  ..., -1.43317223,
            -1.44927526, -1.41706920],
           [-0.51529789, -0.80515295, -1.03059578,  ..., -1.43317223,
            -1.44927526, -1.41706920],
           ...,
           [-1.88405800, -1.90016103, -1.91626418,  ..., -1.88405800,
            -1.90016103, -1.88405800],
           [-1.88405800, -1.93236721, -1.94847023,  ..., -1.90016103,
            -1.90016103, -1.90016103],
           [-1.91626418, -1.94847023, -1.95652175,  ..., -1.88405800,
            -1.91626418, -1.91626418]],

          [[-0.92803597, -0.65817088, -0.97301346,  ..., -1.68515754,
            -1.64767623, -1.64767623],
           [-1.00299859, -1.27286363, -1.34782624,  ..., -1.69265378,
            -1.68515754, -1.68515754],
           [-1.25787115, -1.48275876, -1.61769128,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.68515754, -1.68515754, -1.69265378,  ..., -1.64767623,
            -1.66266882, -1.67766130],
           [-1.68515754, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.67766130, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.66266882,
            -1.67766130, -1.68515754]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0718 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 100, vnnlib ID: 100 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.53976345, -13.16501808,  -7.78616238,  -7.53348351,  -7.22956753,
          -7.13146210,  -9.51203918,  -8.66154480, -12.44145298, -11.93621635]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [583]; unstable size 583; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 279, 1, 583] with unstable size 278 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 583] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 583] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [278]; unstable size 278; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 278] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 278] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.95121813,  2.65530062, -1.12760592, -1.74681807, -0.90773940,
          0.75648606, -0.87717187,  2.33981323,  1.64043427]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.53976345, -13.16501808,  -7.78616238,  -7.53348351,  -7.22956753,
          -7.13146210,  -9.51203918,  -8.66154480, -12.44145298, -11.93621635]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.53976154, -13.16501617,  -7.78616142,  -7.53348160,  -7.22956657,
           -7.13146067,  -9.51203918,  -8.66154480, -12.44145107, -11.93621540],
         [-10.53976154, -13.16501617,  -7.78616142,  -7.53348160,  -7.22956657,
           -7.13146067,  -9.51203918,  -8.66154480, -12.44145107, -11.93621540]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.25267982, -0.30391502, -0.40202093,  1.12806320]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0612 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 101, vnnlib ID: 101 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.08083820, -14.74164295, -15.41894627, -16.35571480, -15.69711781,
         -17.93531990, -17.23896980, -18.14307785, -10.66590214, -14.52196217]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [682]; unstable size 682; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 682] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 682] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 682] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 177] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.62306958,  3.08736944,  3.49406004,  4.42359018,  3.72971249,
          5.79383564,  5.18702269,  5.91974640,  2.72902703]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.08083820, -14.74164295, -15.41894627, -16.35571480, -15.69711781,
         -17.93531990, -17.23896980, -18.14307785, -10.66590214, -14.52196217]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.87045002, -14.67684269, -15.32469082, -16.33616829, -15.64569569,
          -17.88966370, -17.18202591, -17.98422050, -10.99369526, -14.46965504]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12324524]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0053 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0545 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 102, vnnlib ID: 102 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.08662319, -10.92296124,  -4.84066486,  -5.63669729,  -5.64046621,
          -5.76534128,  -7.64309168,  -7.17506170,  -8.36095524,  -9.82923794]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [704]; unstable size 704; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 251, 1, 704] with unstable size 250 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 704] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 704] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [250]; unstable size 250; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 250] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 250] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.20884323,  3.62872219, -1.65299869, -0.98555779, -1.01563966,
          0.82072127,  0.33104575,  1.38739491,  2.34938645]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.08662319, -10.92296124,  -4.84066486,  -5.63669729,  -5.64046621,
          -5.76534128,  -7.64309168,  -7.17506170,  -8.36095524,  -9.82923794]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.08662319, -10.92296028,  -4.84066582,  -5.63669777,  -5.64046764,
           -5.76534081,  -7.64309168,  -7.17506170,  -8.36095524,  -9.82923794],
         [ -7.08662319, -10.92296028,  -4.84066582,  -5.63669777,  -5.64046764,
           -5.76534081,  -7.64309168,  -7.17506170,  -8.36095524,  -9.82923794]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.79980183, -0.00376987,  0.12487316]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0742 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 103, vnnlib ID: 103 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.82976532, -12.37597370,  -4.80148506,  -8.27321815,  -4.32335472,
          -8.39564705,  -7.14005709,  -8.87581921, -10.65055561, -11.85609341]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [682]; unstable size 682; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 682] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 682] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 682] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 256] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.48958635,  6.85282993, -0.38445073,  3.19247007,  3.10144305,
          1.89875424,  3.66963410,  5.16848564,  6.31332350]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.82976532, -12.37597370,  -4.80148506,  -8.27321815,  -4.32335472,
          -8.39564705,  -7.14005709,  -8.87581921, -10.65055561, -11.85609341]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.04it/s]100%|██████████| 1/1 [00:00<00:00,  9.04it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.09854698, -12.89455128,  -4.96760273,  -8.65318966,  -4.84691048,
           -8.76898766,  -7.63000536,  -9.29538918, -11.06066799, -12.34660625]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.12069225]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1131 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 32.90011978149414
alpha/beta optimization time: 1.2092304229736328
initial alpha-crown bounds: tensor([[ 2.57451010,  6.94005108, -0.32821164,  3.23324442,  3.14502001,
          1.95601845,  3.71171641,  5.26033640,  6.40743542]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.32821163535118103
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6337 seconds.
lower bounds for all target labels: [2.5745108127593994, 6.940052032470703, -0.32821083068847656, 3.2332448959350586, 3.1450185775756836, 1.9560166597366333, 3.7117161750793457, 5.260337829589844, 6.407434940338135]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [2]
start creating model mps for candidates: ['lay/16_2']
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 236160 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5656635761261
Verifying property 0 with 1 instances.
##### Instance 103 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.940051078796387.

Properties batch 1, size 1
Remaining timeout: 198.29982805252075
Verifying property 1 with 1 instances.
##### Instance 103 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.407435417175293.

Properties batch 2, size 1
Remaining timeout: 198.16633439064026
Verifying property 2 with 1 instances.
##### Instance 103 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.260336399078369.

Properties batch 3, size 1
Remaining timeout: 198.03979587554932
Verifying property 3 with 1 instances.
##### Instance 103 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.711716413497925.

Properties batch 4, size 1
Remaining timeout: 197.91347217559814
Verifying property 4 with 1 instances.
##### Instance 103 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.2332444190979004.

Properties batch 5, size 1
Remaining timeout: 197.78108501434326
Verifying property 5 with 1 instances.
##### Instance 103 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.145020008087158.

Properties batch 6, size 1
Remaining timeout: 197.65369296073914
Verifying property 6 with 1 instances.
##### Instance 103 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.574510097503662.

Properties batch 7, size 1
Remaining timeout: 197.5264277458191
Verifying property 7 with 1 instances.
##### Instance 103 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.9560184478759766.

Properties batch 8, size 1
Remaining timeout: 197.39891242980957
Verifying property 8 with 1 instances.
##### Instance 103 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.32821164]], device='cuda:0') need to verify.
Model prediction is: tensor([ -7.82976532, -12.37597370,  -4.80148506,  -8.27321815,  -4.32335472,
         -8.39564705,  -7.14005709,  -8.87581921, -10.65055561, -11.85609341],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.32821164]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 682
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 253
Node /15 input 0: size torch.Size([100]) unstable 14
-----------------
# of unstable neurons: 949
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0007419586181640625
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0627    transfer 0.0001    finalize 0.0002    func 0.0633    
Accumulated time: func 0.0633    prepare 0.0002    bound 0.0627    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 1] 
split level 2: [/input-12, 37] 
split level 3: [/input-12, 72] 
split level 4: [/input-12, 26] 
split level 5: [/input-12, 44] 
split level 6: [/input-12, 51] 
split level 7: [/input-8, 1892] 
split level 8: [/input-8, 1365] 
split level 9: [/input-8, 542] 
split level 10: [/input-8, 533] 
split level 11: [/input-8, 1308] 
split level 12: [/input-8, 1363] 
split level 13: [/input-8, 523] 
split level 14: [/input-8, 1052] 
split level 15: [/input-8, 86] 
split level 16: [/input-8, 1886] 
split level 17: [/input-8, 1357] 
split level 18: [/input-8, 1891] 
split level 19: [/input-8, 1364] 
split level 20: [/input-8, 1356] 
split level 21: [/input-8, 1373] 
split level 22: [/input-8, 77] 
split level 23: [/input-8, 1370] 
split level 24: [/input-8, 1828] 
split level 25: [/input-8, 1067] 
split level 26: [/input-8, 1899] 
split level 27: [/input-8, 539] 
split level 28: [/input-8, 476] 
split level 29: [/input-8, 1812] 
split level 30: [/input-8, 1379] 
split level 31: [/input-8, 1900] 
split level 32: [/input-8, 76] 
split level 33: [/input-8, 1374] 
split level 34: [/input-8, 1068] 
split level 35: [/input-8, 1369] 
split level 36: [/input-8, 1366] 
split level 37: [/input-8, 1358] 
split level 38: [/input-8, 1044] 
split level 39: [/input-8, 1292] 
split level 40: [/input-8, 1894] 
split level 41: [/input-8, 1901] 
split level 42: [/input-8, 1378] 
split level 43: [/input-8, 1893] 
split level 44: [/input-8, 1346] 
split level 45: [/input-8, 1381] 
split level 46: [/input-8, 1876] 
split level 47: [/input-8, 916] 
split level 48: [/input-8, 1861] 
split level 49: [/input-8, 1310] 
split level 50: [/input-8, 517] 
split level 51: [/input-8, 1882] 
split level 52: [/input-8, 1289] 
split level 53: [/input-8, 1890] 
split level 54: [/input-8, 1349] 
split level 55: [/input-8, 1910] 
split level 56: [/input-8, 669] 
split level 57: [/input-8, 990] 
split level 58: [/input-8, 939] 
split level 59: [/input-8, 85] 
split level 60: [/input-8, 1902] 
split level 61: [/input-8, 1889] 
split level 62: [/input-8, 944] 
split level 63: [/input-8, 1382] 
split level 64: [/input-8, 1868] 
split level 65: [/input-8, 1019] 
split level 66: [/input-8, 1339] 
split level 67: [/input-8, 571] 
split level 68: [/input-8, 1350] 
split level 69: [/input-8, 1401] 
split level 70: [/input-8, 572] 
split level 71: [/input-8, 1090] 
split level 72: [/input-8, 92] 
split level 73: [/input-8, 1361] 
split level 74: [/input, 2492] 
split level 75: [/input-8, 931] 
split level 76: [/input-8, 936] 
split level 77: [/input-8, 518] 
split level 78: [/input-8, 932] 
split level 79: [/input-8, 951] 
split level 80: [/input-8, 1405] 
split level 81: [/input-8, 1353] 
split level 82: [/input-8, 969] 
split level 83: [/input, 2455] 
split level 84: [/input-8, 1080] 
split level 85: [/input-8, 1402] 
split level 86: [/input-8, 1827] 
split level 87: [/input-8, 868] 
split level 88: [/input-8, 1318] 
split level 89: [/input-8, 558] 
split level 90: [/input-8, 1396] 
split level 91: [/input-8, 1888] 
split level 92: [/input-8, 977] 
split level 93: [/input, 2536] 
split level 94: [/input-8, 943] 
split level 95: [/input, 2460] 
split level 96: [/input-8, 1880] 
split level 97: [/input, 1687] 
split level 98: [/input-8, 1326] 
split level 99: [/input-8, 1389] 
split level 100: [/input-8, 546] 
split level 101: [/input-12, 53] 
split level 102: [/input-8, 1430] 
split level 103: [/input, 3547] 
split level 104: [/input-8, 404] 
split level 105: [/input, 2475] 
split level 106: [/input-8, 844] 
split level 107: [/input, 2474] 
split level 108: [/input-8, 832] 
split level 109: [/input-8, 985] 
split level 110: [/input-8, 528] 
split level 111: [/input-8, 545] 
split level 112: [/input, 1689] 
split level 113: [/input-8, 537] 
split level 114: [/input-8, 915] 
split level 115: [/input, 1685] 
split level 116: [/input, 2522] 
split level 117: [/input, 3451] 
split level 118: [/input, 437] 
split level 119: [/input, 1723] 
split level 120: [/input-8, 566] 
split level 121: [/input, 2424] 
split level 122: [/input, 1684] 
split level 123: [/input-8, 564] 
split level 124: [/input, 2462] 
split level 125: [/input, 2477] 
split level 126: [/input, 487] 
split level 127: [/input-8, 561] 
split level 128: [/input, 3272] 
split level 129: [/input, 2883] 
split level 130: [/input, 2487] 
split level 131: [/input, 2523] 
split level 132: [/input, 2723] 
split level 133: [/input, 3303] 
split level 134: [/input, 3269] 
split level 135: [/input, 2472] 
split level 136: [/input, 1497] 
split level 137: [/input-8, 1424] 
split level 138: [/input, 4019] 
split level 139: [/input, 1513] 
split level 140: [/input, 1515] 
split level 141: [/input, 2533] 
split level 142: [/input-8, 64] 
split level 143: [/input-8, 1416] 
split level 144: [/input, 1132] 
split level 145: [/input, 471] 
split level 146: [/input, 2518] 
split level 147: [/input, 2554] 
split level 148: [/input, 2516] 
split level 149: [/input, 613] 
split level 150: [/input, 1668] 
split level 151: [/input, 2505] 
split level 152: [/input, 486] 
split level 153: [/input-8, 121] 
split level 154: [/input, 3531] 
split level 155: [/input, 2634] 
split level 156: [/input-8, 980] 
split level 157: [/input, 2264] 
split level 158: [/input, 2555] 
split level 159: [/input, 2551] 
split level 160: [/input, 474] 
split level 161: [/input, 455] 
split level 162: [/input-8, 1875] 
split level 163: [/input-8, 521] 
split level 164: [/input, 2244] 
split level 165: [/input, 438] 
split level 166: [/input, 2506] 
split level 167: [/input, 458] 
split level 168: [/input-8, 935] 
split level 169: [/input, 2500] 
split level 170: [/input, 2443] 
split level 171: [/input, 1674] 
split level 172: [/input, 3575] 
split level 173: [/input, 2553] 
split level 174: [/input, 1403] 
split level 175: [/input, 3577] 
split level 176: [/input, 3467] 
split level 177: [/input, 1499] 
split level 178: [/input-8, 1045] 
split level 179: [/input, 2539] 
split level 180: [/input, 489] 
split level 181: [/input, 2280] 
split level 182: [/input-8, 998] 
split level 183: [/input-8, 84] 
split level 184: [/input, 1117] 
split level 185: [/input, 3290] 
split level 186: [/input, 1751] 
split level 187: [/input, 2428] 
split level 188: [/input, 2249] 
split level 189: [/input, 1419] 
split level 190: [/input, 3256] 
split level 191: [/input, 2470] 
split level 192: [/input, 2429] 
split level 193: [/input, 3321] 
split level 194: [/input, 521] 
split level 195: [/input, 3579] 
split level 196: [/input, 2549] 
split level 197: [/input-8, 529] 
split level 198: [/input, 149] 
split level 199: [/input, 3572] 
Time: prepare 0.0061    bound 0.1098    transfer 0.0076    finalize 0.0067    func 0.1303    
Accumulated time: func 0.1936    prepare 0.0166    bound 0.1725    transfer 0.0077    finalize 0.0069    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02066219) min lb tensor(-0.32815880)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Fetch cut process: mps for current label is not ready yet
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.0162351131439209 
BICCOS Cumulative time: 0.0162351131439209
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.31694 (1), -0.31648 (1), -0.31636 (1), -0.31617 (1), -0.31571 (1), -0.31507 (1), -0.31478 (1), -0.31361 (1), -0.31352 (1), -0.31339 (1), -0.31337 (1), -0.31321 (1), -0.31234 (1), -0.31215 (1), -0.31212 (1), -0.31074 (1), -0.31035 (1), -0.31021 (1), -0.30959 (1), -0.30912 (1), 
Length of domains: 50
Time: pickout 0.0005    decision 0.5518    set_bounds 0.0145    solve 0.1305    add 0.1553    
Accumulated time: pickout 0.0005    decision 0.5518    set_bounds 0.0145    solve 0.1305    add 0.1553    
Current (lb-rhs): -0.3169369399547577
50 domains visited
Cumulative time: 0.9493489265441895

Shallow-BaB round 2
batch: 50
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 37] [/input-12, 37] [/input-12, 1] [/input-12, 37] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 37] 
split level 2: [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 37] [/input-12, 37] [/input-12, 26] [/input-12, 26] 
split level 3: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 26] [/input-12, 51] [/input-12, 51] 
Time: prepare 0.0073    bound 0.0987    transfer 0.0013    finalize 0.0036    func 0.1110    
Accumulated time: func 0.3046    prepare 0.0242    bound 0.2712    transfer 0.0090    finalize 0.0105    
all_split False
======================Cut inference begins======================
max lb tensor(0.16014111) min lb tensor(-0.29586673)
Number of Verified Splits: 27 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.01752161979675293 
BICCOS Cumulative time: 0.03375673294067383
Preprocessing time: 0.013730525970458984 Inference time: 0.0014314651489257812 Add cuts time: 0.0003819465637207031 Cut analysis time: 0.001977682113647461
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13613 (2), -0.13576 (2), -0.13385 (2), -0.13356 (2), -0.13349 (2), -0.13302 (2), -0.13233 (2), -0.13217 (2), -0.13213 (2), -0.13045 (2), -0.13022 (2), -0.12939 (2), -0.12920 (2), -0.12847 (2), -0.12797 (2), -0.12766 (2), -0.12625 (2), -0.12470 (2), -0.12452 (2), -0.12318 (2), 
Length of domains: 50
Time: pickout 0.0021    decision 0.0232    set_bounds 0.0156    solve 0.1112    add 0.2237    
Accumulated time: pickout 0.0026    decision 0.5749    set_bounds 0.0300    solve 0.2417    add 0.3790    
Current (lb-rhs): -0.1361348032951355
100 domains visited
Cumulative time: 1.3497512340545654

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 1] [/input-12, 37] [/input-12, 1] [/input-12, 54] [/input-12, 37] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 1: [/input-12, 37] [/input-12, 37] [/input-12, 26] [/input-12, 37] [/input-12, 1] [/input-12, 26] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
split level 2: [/input-12, 26] [/input-12, 26] [/input-12, 44] [/input-12, 26] [/input-12, 26] [/input-12, 44] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 44] 
split level 3: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-8, 1364] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12922608852386475
10 lb beta sum: 0.41223907470703125, worst -0.2834315001964569
Time: prepare 0.0071    bound 0.1198    transfer 0.0012    finalize 0.0024    func 0.1334    
Accumulated time: func 0.4380    prepare 0.0316    bound 0.3910    transfer 0.0103    finalize 0.0129    
all_split False
======================Cut inference begins======================
max lb tensor(0.25799406) min lb tensor(-0.08397073)
Number of Verified Splits: 172 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 18
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.025424718856811523 
BICCOS Cumulative time: 0.05918145179748535
Preprocessing time: 0.012958049774169922 Inference time: 0.008675098419189453 Add cuts time: 0.0027205944061279297 Cut analysis time: 0.0010709762573242188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01667 (3), -0.01619 (3), -0.01580 (3), -0.01579 (3), -0.01490 (3), -0.01458 (3), -0.01404 (3), -0.01403 (3), -0.01355 (3), -0.01335 (3), -0.01333 (3), -0.01322 (3), -0.01313 (3), -0.01236 (3), -0.01232 (3), -0.01227 (3), -0.01207 (3), -0.01174 (3), -0.01152 (3), -0.01142 (3), 
Length of domains: 50
Time: pickout 0.0078    decision 0.0210    set_bounds 0.0181    solve 0.1335    add 0.1715    
Accumulated time: pickout 0.0104    decision 0.5959    set_bounds 0.0481    solve 0.3752    add 0.5505    
Current (lb-rhs): -0.016674280166625977
150 domains visited
Cumulative time: 1.7273285388946533

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 1] [/input-12, 54] 
split level 1: [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
split level 2: [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] 
split level 3: [/input-8, 1373] [/input-8, 1373] [/input-12, 51] [/input-12, 51] [/input-8, 1364] [/input-12, 51] [/input-12, 51] [/input-8, 1373] [/input-12, 51] [/input-12, 51] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07622343301773071
10 lb beta sum: 0.4711824059486389, worst -0.24702131748199463
Time: prepare 0.0073    bound 0.2030    transfer 0.0015    finalize 0.0025    func 0.2170    
Accumulated time: func 0.6550    prepare 0.0391    bound 0.5940    transfer 0.0118    finalize 0.0154    
all_split False
======================Cut inference begins======================
max lb tensor(0.70417631) min lb tensor(-0.01223466)
Number of Verified Splits: 360 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 6
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.0457761287689209 
BICCOS Cumulative time: 0.10495758056640625
Preprocessing time: 0.013628482818603516 Inference time: 0.01962447166442871 Add cuts time: 0.010890722274780273 Cut analysis time: 0.0016324520111083984
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0163    solve 0.2171    add 0.0270    
Accumulated time: pickout 0.0114    decision 0.6156    set_bounds 0.0644    solve 0.5923    add 0.5776    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 51]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([9.86459813e-32, 4.65828329e-02, 1.17932245e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 51,  1]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([9.86459813e-32, 4.65828329e-02, 9.54550058e-02, 7.20521808e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 51,  1]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([9.86459813e-32, 4.65828329e-02, 9.54550058e-02, 6.75930222e-03]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 51]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([9.86459813e-32, 5.04742116e-02, 1.12895951e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 51,  1]), tensor([-1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([9.86459813e-32, 5.04742116e-02, 9.66435522e-02, 7.08648413e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 51,  1]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([9.86459813e-32, 5.04742116e-02, 9.66435522e-02, 7.61716207e-03]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54,  1, 26]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([9.86459813e-32, 1.52891368e-01, 5.69479167e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54,  1, 26, 37]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([9.86459813e-32, 1.52891368e-01, 9.16091949e-02, 8.94325972e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54,  1, 26, 37]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([9.86459813e-32, 1.52891368e-01, 9.16091949e-02, 4.36738273e-03]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54,  1]), tensor([1., 1.]), tensor([0, 0]), tensor([9.86459813e-32, 4.99390513e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  10
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20287150144577026
10 lb beta sum: 0.4709600508213043, worst -0.19199532270431519
Time: prepare 0.0006    bound 0.1378    transfer 0.0004    finalize 0.0004    func 0.1393    
Accumulated time: func 0.7943    prepare 0.0397    bound 0.7317    transfer 0.0122    finalize 0.0157    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 37] [/input-12, 37] 
split level 1: [/input-12, 44] [/input-12, 26] 
split level 2: [/input-12, 51] [/input-12, 51] 
split level 3: [/input-8, 1892] [/input-12, 44] 
split level 4: [/input-8, 1373] [/input-8, 1892] 
split level 5: [/input-8, 1364] [/input-8, 1364] 
split level 6: [/input-8, 1381] [/input-8, 1373] 
cut re-enabled after branching node selection
0 lb beta sum: 0.555770993232727, worst -0.1023997813463211
10 lb beta sum: 0.584267258644104, worst -0.10126467049121857
Time: prepare 0.0115    bound 0.1357    transfer 0.0058    finalize 0.0022    func 0.1568    
Accumulated time: func 0.9512    prepare 0.0516    bound 0.8674    transfer 0.0180    finalize 0.0179    
all_split False
======================Cut inference begins======================
max lb tensor(0.24758467) min lb tensor(-0.10077320)
Number of Verified Splits: 224 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.5655498504638672, worst -0.21786992251873016
10 lb beta sum: 0.9907450675964355, worst -0.10590171813964844
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0020
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 6
#cuts 4-6: 36
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.3295900821685791 
BICCOS Cumulative time: 0.43454766273498535
Preprocessing time: 0.007996559143066406 Inference time: 0.3082292079925537 Add cuts time: 0.009645223617553711 Cut analysis time: 0.0037190914154052734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10077 (7), -0.09811 (7), -0.09760 (7), -0.09500 (7), -0.08136 (7), -0.07868 (7), -0.07765 (7), -0.07497 (7), -0.06027 (7), -0.05894 (7), -0.05442 (7), -0.05400 (7), -0.04899 (7), -0.04678 (7), -0.04667 (7), -0.04465 (7), -0.04421 (7), -0.04300 (7), -0.03768 (7), -0.03718 (7), 
Length of domains: 32
Time: pickout 0.0010    decision 0.0222    set_bounds 0.0275    solve 0.1569    add 0.0627    
Accumulated time: pickout 0.0125    decision 0.6377    set_bounds 0.0920    solve 0.7493    add 0.6403    
Current (lb-rhs): -0.10077320039272308
182 domains visited
Cumulative time: 2.96978759765625

BaB round 2
batch: 32
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1891] [/input-8, 1363] 
split level 2: [/input-8, 1891] [/input-8, 1886] [/input-8, 1891] [/input-8, 1886] [/input-8, 1891] [/input-8, 1886] [/input-8, 1891] [/input-8, 1886] [/input-8, 1363] [/input-8, 1886] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09134769439697266
10 lb beta sum: 0.020039061084389687, worst -0.09075936675071716
Time: prepare 0.0056    bound 0.1493    transfer 0.0017    finalize 0.0016    func 0.1601    
Accumulated time: func 1.1112    prepare 0.0575    bound 1.0167    transfer 0.0198    finalize 0.0195    
all_split False
======================Cut inference begins======================
max lb tensor(0.47393423) min lb tensor(-0.09044248)
Number of Verified Splits: 146 of 256
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 7
#cuts 4-6: 11
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.0280611515045166 
BICCOS Cumulative time: 0.46260881423950195
Preprocessing time: 0.008540868759155273 Inference time: 0.0153656005859375 Add cuts time: 0.002348184585571289 Cut analysis time: 0.001806497573852539
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09044 (10), -0.08769 (10), -0.08655 (10), -0.08445 (10), -0.08270 (10), -0.08212 (10), -0.08039 (10), -0.07927 (10), -0.07892 (10), -0.07615 (10), -0.07253 (10), -0.07146 (10), -0.07131 (10), -0.07009 (10), -0.06996 (10), -0.06946 (10), -0.06752 (10), -0.06688 (10), -0.06563 (10), -0.06452 (10), 
Length of domains: 110
Time: pickout 0.0059    decision 0.0185    set_bounds 0.0240    solve 0.1602    add 0.0835    
Accumulated time: pickout 0.0184    decision 0.6562    set_bounds 0.1160    solve 0.9094    add 0.7238    
Current (lb-rhs): -0.0904424786567688
292 domains visited
Cumulative time: 3.2984015941619873

BaB round 3
batch: 110
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1886] [/input-8, 1052] [/input-8, 1356] [/input-8, 539] [/input-8, 1356] [/input-8, 1052] [/input-8, 1067] [/input-8, 1356] [/input-8, 1052] [/input-8, 1356] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08683472871780396
10 lb beta sum: 0.2185591608285904, worst -0.0864989161491394
Time: prepare 0.0050    bound 0.1484    transfer 0.0025    finalize 0.0013    func 0.1588    
Accumulated time: func 1.2701    prepare 0.0627    bound 1.1651    transfer 0.0223    finalize 0.0208    
all_split False
======================Cut inference begins======================
max lb tensor(0.31174004) min lb tensor(-0.08637670)
Number of Verified Splits: 156 of 220
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 12
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.027302980422973633 
BICCOS Cumulative time: 0.4899117946624756
Preprocessing time: 0.00739288330078125 Inference time: 0.016472816467285156 Add cuts time: 0.0019550323486328125 Cut analysis time: 0.001482248306274414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08638 (11), -0.08255 (11), -0.08239 (11), -0.07953 (11), -0.07859 (11), -0.07825 (11), -0.07687 (11), -0.07656 (11), -0.07610 (11), -0.07422 (11), -0.07357 (11), -0.07259 (11), -0.07201 (11), -0.07171 (11), -0.07041 (11), -0.06882 (11), -0.06852 (11), -0.06813 (11), -0.06718 (11), -0.06633 (11), 
Length of domains: 64
Time: pickout 0.0156    decision 0.0198    set_bounds 0.0108    solve 0.1589    add 0.0673    
Accumulated time: pickout 0.0340    decision 0.6760    set_bounds 0.1268    solve 1.0683    add 0.7911    
Current (lb-rhs): -0.08637669682502747
356 domains visited
Cumulative time: 3.6047070026397705

BaB round 4
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1886] [/input-8, 1886] [/input-8, 1356] [/input-8, 1357] [/input-8, 1356] [/input-8, 1886] [/input-8, 1357] [/input-8, 1067] [/input-8, 1886] [/input-8, 1067] 
split level 1: [/input-8, 539] [/input-8, 539] [/input-8, 1886] [/input-8, 1356] [/input-8, 1891] [/input-8, 1356] [/input-8, 1886] [/input-8, 1886] [/input-8, 539] [/input-8, 1891] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07730856537818909
10 lb beta sum: 0.6077225208282471, worst -0.07696980237960815
Time: prepare 0.0052    bound 0.1374    transfer 0.0008    finalize 0.0015    func 0.1466    
Accumulated time: func 1.4167    prepare 0.0682    bound 1.3025    transfer 0.0231    finalize 0.0223    
all_split False
======================Cut inference begins======================
max lb tensor(0.45176235) min lb tensor(-0.07684353)
Number of Verified Splits: 204 of 256
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 17
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.038350820541381836 
BICCOS Cumulative time: 0.5282626152038574
Preprocessing time: 0.008641719818115234 Inference time: 0.024806499481201172 Add cuts time: 0.003330707550048828 Cut analysis time: 0.0015718936920166016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07684 (13), -0.06919 (13), -0.06870 (13), -0.06854 (13), -0.06743 (13), -0.06680 (13), -0.06316 (13), -0.06291 (13), -0.05999 (13), -0.05976 (13), -0.05909 (13), -0.05864 (13), -0.05739 (13), -0.05725 (13), -0.05673 (13), -0.05648 (13), -0.05582 (13), -0.05407 (13), -0.05185 (13), -0.05119 (13), 
Length of domains: 52
Time: pickout 0.0071    decision 0.0159    set_bounds 0.0132    solve 0.1467    add 0.0619    
Accumulated time: pickout 0.0411    decision 0.6919    set_bounds 0.1400    solve 1.2151    add 0.8529    
Current (lb-rhs): -0.07684352993965149
408 domains visited
Cumulative time: 3.896286964416504

BaB round 5
batch: 52
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1052] [/input-8, 1052] [/input-8, 1067] [/input-8, 1067] [/input-8, 1357] [/input-8, 1357] 
split level 1: [/input-8, 1356] [/input-8, 1067] [/input-8, 1067] [/input-8, 1067] [/input-8, 1067] [/input-8, 1891] [/input-8, 1357] [/input-8, 1357] [/input-8, 1067] [/input-8, 539] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0707257091999054
10 lb beta sum: 0.8597195148468018, worst -0.06758400797843933
Time: prepare 0.0044    bound 0.1480    transfer 0.0007    finalize 0.0019    func 0.1574    
Accumulated time: func 1.5741    prepare 0.0728    bound 1.4505    transfer 0.0238    finalize 0.0243    
all_split False
======================Cut inference begins======================
max lb tensor(0.93552256) min lb tensor(-0.06750092)
Number of Verified Splits: 190 of 208
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 17
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.035738468170166016 
BICCOS Cumulative time: 0.5640010833740234
Preprocessing time: 0.007125139236450195 Inference time: 0.023813486099243164 Add cuts time: 0.002842426300048828 Cut analysis time: 0.001957416534423828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06750 (15), -0.06485 (15), -0.05794 (15), -0.05622 (15), -0.05496 (15), -0.04872 (15), -0.04793 (15), -0.04523 (15), -0.04223 (15), -0.03803 (15), -0.03679 (15), -0.03538 (15), -0.02909 (15), -0.02272 (15), -0.02085 (15), -0.01214 (15), -0.01032 (15), -0.00539 (15), 
Length of domains: 18
Time: pickout 0.0068    decision 0.0144    set_bounds 0.0110    solve 0.1575    add 0.0477    
Accumulated time: pickout 0.0479    decision 0.7063    set_bounds 0.1510    solve 1.3726    add 0.9006    
Current (lb-rhs): -0.06750091910362244
426 domains visited
Cumulative time: 4.177900791168213

BaB round 6
batch: 18
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] 
split level 1: [/input-8, 1067] [/input-8, 1356] [/input-8, 539] [/input-8, 539] [/input-8, 1357] [/input-8, 1828] [/input-8, 1357] [/input-8, 539] [/input-8, 539] [/input-8, 1357] 
split level 2: [/input-8, 1292] [/input-8, 1292] [/input-8, 1292] [/input-8, 1292] [/input-8, 1292] [/input-8, 1893] [/input-8, 1292] [/input-8, 1893] [/input-8, 1292] [/input-8, 1893] 
split level 3: [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1894] [/input-8, 1893] [/input-8, 1292] [/input-8, 1893] [/input-8, 1292] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6958720088005066, worst -0.05476188659667969
10 lb beta sum: 0.6958720088005066, worst -0.054631054401397705
Time: prepare 0.0130    bound 0.1526    transfer 0.0017    finalize 0.0023    func 0.1716    
Accumulated time: func 1.7457    prepare 0.0861    bound 1.6031    transfer 0.0255    finalize 0.0265    
all_split False
======================Cut inference begins======================
max lb tensor(0.27136415) min lb tensor(-0.05459160)
Number of Verified Splits: 205 of 288
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 19
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.04234600067138672 
BICCOS Cumulative time: 0.6063470840454102
Preprocessing time: 0.00973200798034668 Inference time: 0.02930283546447754 Add cuts time: 0.001529693603515625 Cut analysis time: 0.001781463623046875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05459 (19), -0.05344 (19), -0.05319 (19), -0.05249 (19), -0.05204 (19), -0.05100 (19), -0.05031 (19), -0.04883 (19), -0.04631 (19), -0.04482 (19), -0.04467 (19), -0.04330 (19), -0.04216 (19), -0.04205 (19), -0.04080 (19), -0.04063 (19), -0.04056 (19), -0.04043 (19), -0.03929 (19), -0.03904 (19), 
Length of domains: 83
Time: pickout 0.0016    decision 0.0163    set_bounds 0.0189    solve 0.1717    add 0.0732    
Accumulated time: pickout 0.0495    decision 0.7226    set_bounds 0.1699    solve 1.5443    add 0.9738    
Current (lb-rhs): -0.054591596126556396
509 domains visited
Cumulative time: 4.510707855224609

BaB round 7
batch: 83
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1052] 
split level 1: [/input-8, 1381] [/input-8, 1381] [/input-8, 1381] [/input-8, 1381] [/input-8, 1381] [/input-8, 1381] [/input-8, 1381] [/input-8, 931] [/input-8, 1381] [/input-8, 1381] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04957374930381775
10 lb beta sum: 0.2757553160190582, worst -0.04951363801956177
Time: prepare 0.0068    bound 0.1401    transfer 0.0086    finalize 0.0029    func 0.1607    
Accumulated time: func 1.9064    prepare 0.0931    bound 1.7432    transfer 0.0341    finalize 0.0294    
all_split False
======================Cut inference begins======================
max lb tensor(0.01739919) min lb tensor(-0.04948863)
Number of Verified Splits: 169 of 332
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 18
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.041916608810424805 
BICCOS Cumulative time: 0.648263692855835
Preprocessing time: 0.010806083679199219 Inference time: 0.027381420135498047 Add cuts time: 0.0020160675048828125 Cut analysis time: 0.0017130374908447266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04949 (21), -0.04856 (21), -0.04844 (21), -0.04829 (21), -0.04756 (21), -0.04736 (21), -0.04732 (21), -0.04722 (21), -0.04658 (21), -0.04636 (21), -0.04635 (21), -0.04543 (21), -0.04505 (21), -0.04430 (21), -0.04410 (21), -0.04317 (21), -0.04100 (21), -0.04023 (21), -0.04005 (21), -0.03956 (21), 
Length of domains: 163
Time: pickout 0.0143    decision 0.0169    set_bounds 0.0171    solve 0.1609    add 0.0812    
Accumulated time: pickout 0.0638    decision 0.7395    set_bounds 0.1870    solve 1.7051    add 1.0550    
Current (lb-rhs): -0.04948863387107849
672 domains visited
Cumulative time: 4.851581335067749

BaB round 8
batch: 163
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1044] [/input-8, 1894] [/input-8, 1894] [/input-8, 1044] [/input-8, 1894] [/input-8, 1044] [/input-8, 1894] [/input-8, 1044] [/input-8, 1894] [/input-8, 1044] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.045732349157333374
10 lb beta sum: 0.26691004633903503, worst -0.04567885398864746
Time: prepare 0.0067    bound 0.1452    transfer 0.0010    finalize 0.0021    func 0.1575    
Accumulated time: func 2.0639    prepare 0.1002    bound 1.8884    transfer 0.0352    finalize 0.0315    
all_split False
======================Cut inference begins======================
max lb tensor(0.01047188) min lb tensor(-0.04564178)
Number of Verified Splits: 82 of 326
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0022
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 19
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.02742481231689453 
BICCOS Cumulative time: 0.6756885051727295
Preprocessing time: 0.010589122772216797 Inference time: 0.012794017791748047 Add cuts time: 0.001119852066040039 Cut analysis time: 0.0029218196868896484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04564 (22), -0.04544 (22), -0.04529 (22), -0.04444 (22), -0.04443 (22), -0.04441 (22), -0.04428 (22), -0.04345 (22), -0.04340 (22), -0.04298 (22), -0.04273 (22), -0.04177 (22), -0.04116 (22), -0.04093 (22), -0.04081 (22), -0.04069 (22), -0.04041 (22), -0.04015 (22), -0.03999 (22), -0.03975 (22), 
Length of domains: 244
Time: pickout 0.0169    decision 0.0232    set_bounds 0.0159    solve 0.1577    add 0.0779    
Accumulated time: pickout 0.0807    decision 0.7627    set_bounds 0.2029    solve 1.8628    add 1.1329    
Current (lb-rhs): -0.04564177989959717
916 domains visited
Cumulative time: 5.178537845611572

BaB round 9
batch: 244
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1894] [/input-8, 1894] [/input-8, 1894] [/input-8, 1044] [/input-8, 1894] [/input-8, 1044] [/input-8, 1894] [/input-8, 1044] [/input-8, 1044] [/input-8, 1894] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04260185360908508
10 lb beta sum: 0.27331963181495667, worst -0.04256236553192139
Time: prepare 0.0103    bound 0.1519    transfer 0.0075    finalize 0.0029    func 0.1760    
Accumulated time: func 2.2399    prepare 0.1107    bound 2.0403    transfer 0.0427    finalize 0.0344    
all_split False
======================Cut inference begins======================
max lb tensor(0.01037753) min lb tensor(-0.04254627)
Number of Verified Splits: 101 of 488
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 19
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.0370182991027832 
BICCOS Cumulative time: 0.7127068042755127
Preprocessing time: 0.015580892562866211 Inference time: 0.016650915145874023 Add cuts time: 0.0029740333557128906 Cut analysis time: 0.0018124580383300781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04255 (23), -0.04162 (23), -0.04152 (23), -0.04060 (23), -0.04023 (23), -0.03991 (23), -0.03991 (23), -0.03963 (23), -0.03946 (23), -0.03907 (23), -0.03903 (23), -0.03891 (23), -0.03889 (23), -0.03873 (23), -0.03861 (23), -0.03829 (23), -0.03805 (23), -0.03802 (23), -0.03771 (23), -0.03771 (23), 
Length of domains: 387
Time: pickout 0.0180    decision 0.0264    set_bounds 0.0237    solve 0.1763    add 0.1122    
Accumulated time: pickout 0.0987    decision 0.7891    set_bounds 0.2266    solve 2.0391    add 1.2451    
Current (lb-rhs): -0.04254627227783203
1303 domains visited
Cumulative time: 5.582232236862183

BaB round 10
batch: 387
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] 
cut re-enabled after branching node selection
0 lb beta sum: 0.37986934185028076, worst -0.03825068473815918
10 lb beta sum: 0.38088899850845337, worst -0.03816235065460205
Time: prepare 0.0350    bound 0.1406    transfer 0.0120    finalize 0.0052    func 0.1978    
Accumulated time: func 2.4377    prepare 0.1459    bound 2.1809    transfer 0.0547    finalize 0.0396    
all_split False
======================Cut inference begins======================
max lb tensor(0.00890011) min lb tensor(-0.03813255)
Number of Verified Splits: 116 of 774
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 19
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.0488128662109375 
BICCOS Cumulative time: 0.7615196704864502
Preprocessing time: 0.024250268936157227 Inference time: 0.021553516387939453 Add cuts time: 0.001306772232055664 Cut analysis time: 0.0017023086547851562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03813 (24), -0.03724 (24), -0.03716 (24), -0.03712 (24), -0.03666 (24), -0.03629 (24), -0.03622 (24), -0.03621 (24), -0.03614 (24), -0.03589 (24), -0.03578 (24), -0.03565 (24), -0.03549 (24), -0.03532 (24), -0.03527 (24), -0.03520 (24), -0.03509 (24), -0.03499 (24), -0.03477 (24), -0.03461 (24), 
Length of domains: 658
Time: pickout 0.0721    decision 0.0373    set_bounds 0.3968    solve 0.1980    add 0.0959    
Accumulated time: pickout 0.1708    decision 0.8264    set_bounds 0.6235    solve 2.2371    add 1.3411    
Current (lb-rhs): -0.038132548332214355
1961 domains visited
Cumulative time: 6.43892765045166

BaB round 11
batch: 658
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1901] [/input-8, 1901] [/input-8, 571] [/input-8, 1901] [/input-8, 571] [/input-8, 1901] [/input-8, 1901] [/input-8, 571] [/input-8, 1901] [/input-8, 571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.3634609282016754, worst -0.03549423813819885
10 lb beta sum: 0.3634609282016754, worst -0.035457611083984375
Time: prepare 0.0591    bound 0.1511    transfer 0.0213    finalize 0.0063    func 0.2475    
Accumulated time: func 2.6852    prepare 0.2053    bound 2.3320    transfer 0.0760    finalize 0.0459    
all_split False
======================Cut inference begins======================
max lb tensor(0.00493339) min lb tensor(-0.03544053)
Number of Verified Splits: 231 of 1316
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0014
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 19
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.0877833366394043 
BICCOS Cumulative time: 0.8493030071258545
Preprocessing time: 0.04310154914855957 Inference time: 0.040647268295288086 Add cuts time: 0.001975536346435547 Cut analysis time: 0.0020589828491210938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03544 (25), -0.03453 (25), -0.03446 (25), -0.03442 (25), -0.03424 (25), -0.03376 (25), -0.03358 (25), -0.03351 (25), -0.03344 (25), -0.03335 (25), -0.03323 (25), -0.03320 (25), -0.03307 (25), -0.03286 (25), -0.03280 (25), -0.03275 (25), -0.03256 (25), -0.03240 (25), -0.03233 (25), -0.03227 (25), 
Length of domains: 1085
Time: pickout 0.0262    decision 0.0487    set_bounds 0.0580    solve 0.2479    add 0.1009    
Accumulated time: pickout 0.1970    decision 0.8750    set_bounds 0.6815    solve 2.4850    add 1.4420    
Current (lb-rhs): -0.035440534353256226
3046 domains visited
Cumulative time: 7.018310308456421

BaB round 12
batch: 1085
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] 
cut re-enabled after branching node selection
0 lb beta sum: 0.33320799469947815, worst -0.03271394968032837
10 lb beta sum: 0.33320799469947815, worst -0.03265869617462158
Time: prepare 0.1001    bound 0.3310    transfer 0.0346    finalize 0.0116    func 0.4923    
Accumulated time: func 3.1775    prepare 0.3056    bound 2.6630    transfer 0.1106    finalize 0.0575    
all_split False
======================Cut inference begins======================
max lb tensor(0.00886142) min lb tensor(-0.03262800)
Number of Verified Splits: 667 of 2170
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 19
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.19756317138671875 
BICCOS Cumulative time: 1.0468661785125732
Preprocessing time: 0.0717778205871582 Inference time: 0.11892127990722656 Add cuts time: 0.005036830902099609 Cut analysis time: 0.001827239990234375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03263 (26), -0.03175 (26), -0.03171 (26), -0.03163 (26), -0.03137 (26), -0.03089 (26), -0.03084 (26), -0.03076 (26), -0.03073 (26), -0.03050 (26), -0.03048 (26), -0.03024 (26), -0.03018 (26), -0.03002 (26), -0.03000 (26), -0.03000 (26), -0.02986 (26), -0.02961 (26), -0.02937 (26), -0.02937 (26), 
Length of domains: 1503
Time: pickout 0.0329    decision 0.0750    set_bounds 0.1006    solve 0.4929    add 0.1372    
Accumulated time: pickout 0.2299    decision 0.9500    set_bounds 0.7821    solve 2.9779    add 1.5792    
Current (lb-rhs): -0.032627999782562256
4549 domains visited
Cumulative time: 8.06948447227478

BaB round 13
batch: 1503
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.030591130256652832
10 lb beta sum: 0.16740283370018005, worst -0.030486583709716797
Time: prepare 0.0660    bound 0.2303    transfer 0.0562    finalize 0.0246    func 0.3970    
Accumulated time: func 3.5745    prepare 0.3718    bound 2.8933    transfer 0.1667    finalize 0.0821    
all_split False
======================Cut inference begins======================
max lb tensor(0.00723112) min lb tensor(-0.03045425)
Number of Verified Splits: 809 of 3006
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 20
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.2621016502380371 
BICCOS Cumulative time: 1.3089678287506104
Preprocessing time: 0.10038971900939941 Inference time: 0.15360546112060547 Add cuts time: 0.006353616714477539 Cut analysis time: 0.0017528533935546875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03045 (27), -0.02969 (27), -0.02958 (27), -0.02945 (27), -0.02918 (27), -0.02881 (27), -0.02871 (27), -0.02870 (27), -0.02858 (27), -0.02844 (27), -0.02831 (27), -0.02808 (27), -0.02800 (27), -0.02795 (27), -0.02784 (27), -0.02783 (27), -0.02783 (27), -0.02757 (27), -0.02735 (27), -0.02720 (27), 
Length of domains: 2197
Time: pickout 0.0975    decision 0.0991    set_bounds 0.2941    solve 0.3980    add 0.1120    
Accumulated time: pickout 0.3274    decision 1.0491    set_bounds 1.0762    solve 3.3759    add 1.6911    
Current (lb-rhs): -0.030454248189926147
6746 domains visited
Cumulative time: 9.350624799728394

BaB round 14
batch: 2197
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1910] [/input-8, 1910] [/input-8, 1910] [/input-8, 1910] [/input-8, 1910] [/input-8, 1910] [/input-8, 1381] [/input-8, 1910] [/input-8, 1910] [/input-8, 1910] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02646327018737793
10 lb beta sum: 0.15334509313106537, worst -0.026433885097503662
Time: prepare 0.0927    bound 0.3019    transfer 0.0641    finalize 0.0243    func 0.5122    
Accumulated time: func 4.0867    prepare 0.4649    bound 3.1952    transfer 0.2308    finalize 0.1064    
all_split False
======================Cut inference begins======================
max lb tensor(0.00654954) min lb tensor(-0.02641627)
Number of Verified Splits: 1223 of 4394
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 22
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.4097788333892822 
BICCOS Cumulative time: 1.7187466621398926
Preprocessing time: 0.1505413055419922 Inference time: 0.24856901168823242 Add cuts time: 0.00887298583984375 Cut analysis time: 0.0017955303192138672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02642 (28), -0.02597 (28), -0.02579 (28), -0.02569 (28), -0.02566 (28), -0.02554 (28), -0.02523 (28), -0.02510 (28), -0.02502 (28), -0.02496 (28), -0.02491 (28), -0.02483 (28), -0.02478 (28), -0.02464 (28), -0.02435 (28), -0.02430 (28), -0.02418 (28), -0.02413 (28), -0.02409 (28), -0.02409 (28), 
Length of domains: 3171
Time: pickout 0.0765    decision 0.1479    set_bounds 0.3758    solve 0.5133    add 0.1819    
Accumulated time: pickout 0.4039    decision 1.1970    set_bounds 1.4519    solve 3.8892    add 1.8730    
Current (lb-rhs): -0.026416271924972534
9917 domains visited
Cumulative time: 11.079677104949951

BaB round 15
batch: 3171
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025018006563186646
10 lb beta sum: 0.09363582730293274, worst -0.02500838041305542
Time: prepare 0.1395    bound 0.4042    transfer 0.0885    finalize 0.0372    func 0.7168    
Accumulated time: func 4.8035    prepare 0.6047    bound 3.5993    transfer 0.3193    finalize 0.1436    
all_split False
======================Cut inference begins======================
max lb tensor(0.01730675) min lb tensor(-0.02499589)
Number of Verified Splits: 3750 of 6342
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.cuts: total 348 constraints, 29550 nonzero elements
cuts preparing time: 0.2034
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 378.
#cuts 1-3: 79
#cuts 4-6: 4
#cuts 10-12: 2
#cuts 13-15: 8
#cuts 16-18: 16
#cuts 19-21: 20
#cuts >= 20: 249
BICCOS time: 1.4182169437408447 
BICCOS Cumulative time: 3.1369636058807373
Preprocessing time: 0.21365094184875488 Inference time: 0.7474250793457031 Add cuts time: 0.0198514461517334 Cut analysis time: 0.4372894763946533
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02500 (29), -0.02439 (29), -0.02438 (29), -0.02424 (29), -0.02413 (29), -0.02412 (29), -0.02355 (29), -0.02352 (29), -0.02351 (29), -0.02350 (29), -0.02341 (29), -0.02337 (29), -0.02325 (29), -0.02320 (29), -0.02275 (29), -0.02273 (29), -0.02267 (29), -0.02267 (29), -0.02262 (29), -0.02253 (29), 
Length of domains: 2592
Time: pickout 0.1506    decision 0.1891    set_bounds 0.4580    solve 0.7189    add 0.1160    
Accumulated time: pickout 0.5544    decision 1.3861    set_bounds 1.9099    solve 4.6080    add 1.9890    
Current (lb-rhs): -0.024995893239974976
12509 domains visited
Cumulative time: 14.175749778747559

BaB round 16
batch: 2592
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 533] [/input-8, 533] [/input-8, 533] [/input-8, 533] [/input-8, 533] [/input-8, 533] [/input-8, 533] [/input-8, 533] [/input-8, 1374] [/input-8, 533] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.024030864238739014
10 lb beta sum: 0.9093006253242493, worst -0.0060005784034729
Time: prepare 0.1206    bound 0.8068    transfer 0.0629    finalize 0.0356    func 1.0606    
Accumulated time: func 5.8642    prepare 0.7256    bound 4.4061    transfer 0.3821    finalize 0.1792    
all_split False
======================Cut inference begins======================
max lb tensor(0.79625452) min lb tensor(-0.00062340)
Number of Verified Splits: 5182 of 5184
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 1.437880277633667 
BICCOS Cumulative time: 4.574843883514404
Preprocessing time: 0.17993450164794922 Inference time: 1.2230861186981201 Add cuts time: 0.03149104118347168 Cut analysis time: 0.0033686161041259766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00062 (30), -0.00017 (30), 
Length of domains: 2
Time: pickout 0.0628    decision 0.1533    set_bounds 0.2420    solve 1.0618    add 0.0188    
Accumulated time: pickout 0.6172    decision 1.5395    set_bounds 2.1519    solve 5.6699    add 2.0078    
Current (lb-rhs): -0.0006234049797058105
12511 domains visited
Cumulative time: 17.211714506149292

BaB round 17
batch: 2
splitting decisions: 
split level 0: [/input-8, 1374] [/input-8, 533] 
split level 1: [/input-8, 1812] [/input-8, 1812] 
split level 2: [/input-8, 1890] [/input-8, 1890] 
split level 3: [/input-8, 1910] [/input-8, 1861] 
split level 4: [/input-8, 1861] [/input-8, 1910] 
split level 5: [/input-8, 1350] [/input-8, 1350] 
split level 6: [/input-8, 1019] [/input-8, 1019] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0064427852630615234

all verified at 1th iter
Time: prepare 0.0050    bound 0.0106    transfer 0.0019    finalize 0.0018    func 0.0211    
Accumulated time: func 5.8852    prepare 0.7310    bound 4.4167    transfer 0.3840    finalize 0.1810    
all_split False
======================Cut inference begins======================
max lb tensor(0.05144135) min lb tensor(9.46819782e-05)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0012
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.009188175201416016 
BICCOS Cumulative time: 4.58403205871582
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0017    decision 0.0219    set_bounds 0.0206    solve 0.0211    add 0.0001    
Accumulated time: pickout 0.6189    decision 1.5613    set_bounds 2.1725    solve 5.6910    add 2.0079    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
12511 domains visited
Cumulative time: 17.287185668945312

found process to kill: terminal indx = 2
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.cuts
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.indx
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=103_spec=2_26523230.log
found process for pidx=2
kill process for pidx=2
Result: safe in 20.3046 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 104, vnnlib ID: 104 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.93376207, -6.71706390, -2.45791340, -1.94786179, -3.43069839,
         -0.01497591, -4.77984476, -2.99772120, -6.68260002, -5.67084932]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [775]; unstable size 775; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 265, 1, 775] with unstable size 264 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 775] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 775] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [264]; unstable size 264; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 264] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 264] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.31793833, 4.18651628, 1.24683142, 1.51535189, 1.97004509, 3.30764008,
         1.65014291, 4.22077990, 3.37990952]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0662 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 105, vnnlib ID: 105 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.58880043, -10.13493252,  -4.93114376,  -6.19413185,  -6.14457750,
          -6.40420198,  -6.35660315,  -6.51874971,  -8.22681046,  -9.13034344]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [623]; unstable size 623; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 253, 1, 623] with unstable size 252 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 623] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 623] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [252]; unstable size 252; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 252] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 252] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.65812564,  1.61883926, -2.82501531, -1.14642143, -1.45474672,
         -0.98869801, -1.28088379, -0.29947901,  0.88783240]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.58880043, -10.13493252,  -4.93114376,  -6.19413185,  -6.14457750,
          -6.40420198,  -6.35660315,  -6.51874971,  -8.22681046,  -9.13034344]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.58880091, -10.13493347,  -4.93114376,  -6.19413280,  -6.14457798,
           -6.40420198,  -6.35660315,  -6.51874971,  -8.22680950,  -9.13034534],
         [ -6.58880091, -10.13493347,  -4.93114376,  -6.19413280,  -6.14457798,
           -6.40420198,  -6.35660315,  -6.51874971,  -8.22680950,  -9.13034534]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.07005119, -1.58760595, -0.32461691, -0.37417173, -0.11454773,
          -0.16214657,  1.70805979]]], device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         ...,


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0535 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 106, vnnlib ID: 106 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.73701859,  -4.31693745,  -8.52546501,  -9.33157349,  -8.00366402,
         -10.34507942,  -9.10334110,  -9.12430954,  -4.68865204,  -6.33631182]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [549]; unstable size 549; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 168, 1, 549] with unstable size 167 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 549] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 549] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [167]; unstable size 167; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 167] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 167] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.18720913,  2.73354006,  3.30611515,  2.10224628,  4.03056717,
          3.46064425,  2.85602951, -0.83577251,  1.03666842]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.73701859,  -4.31693745,  -8.52546501,  -9.33157349,  -8.00366402,
         -10.34507942,  -9.10334110,  -9.12430954,  -4.68865204,  -6.33631182]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.88665152,  -4.94309807,  -8.66058636,  -9.56620789,  -8.16523075,
          -10.62532234,  -9.38236713,  -9.36486244,  -4.54864693,  -6.86276865]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.39445114]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0062 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0487 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 107, vnnlib ID: 107 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.25630188, -18.41019440, -14.19659901, -16.87197685, -15.07205296,
         -17.43015480, -17.99939728, -16.44446564, -13.78191662, -17.80060196]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [636]; unstable size 636; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 232, 1, 636] with unstable size 231 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 636] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 636] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [231]; unstable size 231; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 231] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 231] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.34137392,  0.70376492,  3.10112047,  1.09246898,  3.41379499,
          3.82853651,  1.99575388, -0.16639996,  3.65535522]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.25630188, -18.41019440, -14.19659901, -16.87197685, -15.07205296,
         -17.43015480, -17.99939728, -16.44446564, -13.78191662, -17.80060196]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.19it/s]100%|██████████| 1/1 [00:00<00:00,  9.18it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.99041271, -17.73440742, -13.82642174, -16.31141663, -14.73910618,
          -16.84328079, -17.45844650, -16.23611069, -12.71389008, -17.06082153]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.72347736]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1113 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 22.566566467285156
alpha/beta optimization time: 1.1998119354248047
initial alpha-crown bounds: tensor([[ 4.41341686,  0.78251934,  3.14730692,  1.16422772,  3.46807432,
          3.87461996,  2.07521439, -0.08284003,  3.72402573]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.08284002542495728
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6265 seconds.
lower bounds for all target labels: [4.413418292999268, 0.7825193405151367, 3.147306442260742, 1.1642272472381592, 3.4680776596069336, 3.874619483947754, 2.075211524963379, -0.08284062147140503, 3.7240257263183594]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [7]
start creating model mps for candidates: ['lay/16_7']
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5415985584259
Verifying property 0 with 1 instances.
##### Instance 107 first 10 spec matrices: 
tensor([[[ 1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.413416862487793.

Properties batch 1, size 1
Remaining timeout: 198.33148860931396
Verifying property 1 with 1 instances.
##### Instance 107 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.874619960784912.

Properties batch 2, size 1
Remaining timeout: 198.22186613082886
Verifying property 2 with 1 instances.
##### Instance 107 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.7240257263183594.

Properties batch 3, size 1
Remaining timeout: 198.13291096687317
Verifying property 3 with 1 instances.
##### Instance 107 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.468074321746826.

Properties batch 4, size 1
Remaining timeout: 198.03984785079956
Verifying property 4 with 1 instances.
##### Instance 107 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.1473069190979004.

Properties batch 5, size 1
Remaining timeout: 197.95010638237
Verifying property 5 with 1 instances.
##### Instance 107 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.075214385986328.

Properties batch 6, size 1
Remaining timeout: 197.86375784873962
Verifying property 6 with 1 instances.
##### Instance 107 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.1642277240753174.

Properties batch 7, size 1
Remaining timeout: 197.69955801963806
Verifying property 7 with 1 instances.
##### Instance 107 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.7825193405151367.

Properties batch 8, size 1
Remaining timeout: 197.60011434555054
Verifying property 8 with 1 instances.
##### Instance 107 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.08284003]], device='cuda:0') need to verify.
Model prediction is: tensor([-12.25630188, -18.41019440, -14.19659901, -16.87197685, -15.07205296,
        -17.43015480, -17.99939728, -16.44446564, -13.78191662, -17.80060196],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.08284003]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 636
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 225
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 879
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0007777214050292969
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0628    transfer 0.0001    finalize 0.0002    func 0.0634    
Accumulated time: func 0.0634    prepare 0.0002    bound 0.0628    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 44] 
split level 1: [/input-12, 17] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 78] 
split level 4: [/input-12, 9] 
split level 5: [/input-8, 1516] 
split level 6: [/input-8, 1388] 
split level 7: [/input-8, 1523] 
split level 8: [/input-12, 99] 
split level 9: [/input-8, 1323] 
split level 10: [/input-8, 1386] 
split level 11: [/input-8, 1396] 
split level 12: [/input-8, 1076] 
split level 13: [/input-8, 618] 
split level 14: [/input-8, 1069] 
split level 15: [/input-8, 1077] 
split level 16: [/input-8, 1342] 
split level 17: [/input-8, 1395] 
split level 18: [/input-8, 1339] 
split level 19: [/input-8, 1390] 
split level 20: [/input-12, 40] 
split level 21: [/input-8, 1084] 
split level 22: [/input-8, 294] 
split level 23: [/input-8, 421] 
split level 24: [/input-8, 666] 
split level 25: [/input-8, 1070] 
split level 26: [/input-8, 673] 
split level 27: [/input-8, 571] 
split level 28: [/input-8, 1340] 
split level 29: [/input, 1659] 
split level 30: [/input-8, 1443] 
split level 31: [/input-8, 657] 
split level 32: [/input-8, 1341] 
split level 33: [/input-8, 1133] 
split level 34: [/input-8, 687] 
split level 35: [/input-8, 403] 
split level 36: [/input, 1660] 
split level 37: [/input-12, 32] 
split level 38: [/input-8, 1514] 
split level 39: [/input-8, 797] 
split level 40: [/input-8, 484] 
split level 41: [/input, 1625] 
split level 42: [/input-8, 1905] 
split level 43: [/input-8, 402] 
split level 44: [/input-8, 295] 
split level 45: [/input-8, 796] 
split level 46: [/input, 4066] 
split level 47: [/input-8, 278] 
split level 48: [/input, 3399] 
split level 49: [/input-8, 1085] 
split level 50: [/input-8, 846] 
split level 51: [/input, 199] 
split level 52: [/input-8, 803] 
split level 53: [/input-8, 1134] 
split level 54: [/input-8, 1573] 
split level 55: [/input, 168] 
split level 56: [/input-8, 871] 
split level 57: [/input-8, 1138] 
split level 58: [/input-8, 924] 
split level 59: [/input, 447] 
split level 60: [/input, 1595] 
split level 61: [/input-8, 486] 
split level 62: [/input-8, 1436] 
split level 63: [/input-8, 932] 
split level 64: [/input-8, 1402] 
split level 65: [/input-8, 1056] 
split level 66: [/input-8, 1264] 
split level 67: [/input-8, 1136] 
split level 68: [/input-8, 1130] 
split level 69: [/input-8, 1513] 
split level 70: [/input-8, 404] 
split level 71: [/input-8, 1334] 
split level 72: [/input-8, 993] 
split level 73: [/input, 462] 
split level 74: [/input, 1624] 
split level 75: [/input-8, 483] 
split level 76: [/input, 1365] 
split level 77: [/input, 190] 
split level 78: [/input, 2136] 
split level 79: [/input-8, 521] 
split level 80: [/input-8, 1110] 
split level 81: [/input-8, 97] 
split level 82: [/input, 4069] 
split level 83: [/input, 407] 
split level 84: [/input-8, 77] 
split level 85: [/input, 226] 
split level 86: [/input-8, 1446] 
split level 87: [/input, 4049] 
split level 88: [/input-8, 1307] 
split level 89: [/input, 2135] 
split level 90: [/input, 2244] 
split level 91: [/input, 1335] 
split level 92: [/input, 459] 
split level 93: [/input, 4035] 
split level 94: [/input-8, 795] 
split level 95: [/input, 1629] 
split level 96: [/input-8, 1378] 
split level 97: [/input, 3157] 
split level 98: [/input, 2152] 
split level 99: [/input, 4050] 
split level 100: [/input, 2753] 
split level 101: [/input, 1643] 
split level 102: [/input, 3492] 
split level 103: [/input, 4056] 
split level 104: [/input, 4067] 
split level 105: [/input, 2214] 
split level 106: [/input-8, 1485] 
split level 107: [/input, 225] 
split level 108: [/input-8, 1141] 
split level 109: [/input, 3753] 
split level 110: [/input-8, 2025] 
split level 111: [/input-8, 1615] 
split level 112: [/input, 3429] 
split level 113: [/input, 2187] 
split level 114: [/input-8, 685] 
split level 115: [/input, 358] 
split level 116: [/input, 488] 
split level 117: [/input-8, 2034] 
split level 118: [/input, 3277] 
split level 119: [/input-8, 1040] 
split level 120: [/input-8, 1438] 
split level 121: [/input, 3140] 
split level 122: [/input, 3781] 
split level 123: [/input, 1430] 
split level 124: [/input-8, 461] 
split level 125: [/input-8, 81] 
split level 126: [/input, 2360] 
split level 127: [/input, 3142] 
split level 128: [/input, 2139] 
split level 129: [/input, 242] 
split level 130: [/input, 492] 
split level 131: [/input, 457] 
split level 132: [/input, 2198] 
split level 133: [/input, 458] 
split level 134: [/input-8, 2033] 
split level 135: [/input, 2119] 
split level 136: [/input, 296] 
split level 137: [/input, 2373] 
split level 138: [/input-8, 302] 
split level 139: [/input, 3125] 
split level 140: [/input-8, 975] 
split level 141: [/input, 3709] 
split level 142: [/input-8, 642] 
split level 143: [/input-8, 1472] 
split level 144: [/input-8, 2037] 
split level 145: [/input, 3797] 
split level 146: [/input, 3737] 
split level 147: [/input, 3960] 
split level 148: [/input, 3445] 
split level 149: [/input-8, 1473] 
split level 150: [/input-8, 423] 
split level 151: [/input-8, 1346] 
split level 152: [/input-8, 1021] 
split level 153: [/input, 3263] 
split level 154: [/input, 3126] 
split level 155: [/input, 3292] 
split level 156: [/input, 3231] 
split level 157: [/input, 280] 
split level 158: [/input, 312] 
split level 159: [/input-8, 839] 
split level 160: [/input, 1446] 
split level 161: [/input, 3411] 
split level 162: [/input, 279] 
split level 163: [/input, 2256] 
split level 164: [/input, 2548] 
split level 165: [/input, 227] 
split level 166: [/input-8, 1818] 
split level 167: [/input, 2513] 
split level 168: [/input, 1439] 
split level 169: [/input, 3187] 
split level 170: [/input, 2165] 
split level 171: [/input, 2228] 
split level 172: [/input, 1966] 
split level 173: [/input, 876] 
split level 174: [/input, 136] 
split level 175: [/input-8, 2032] 
split level 176: [/input, 1455] 
split level 177: [/input-8, 1240] 
split level 178: [/input-8, 864] 
split level 179: [/input, 2794] 
split level 180: [/input, 2530] 
split level 181: [/input, 1160] 
split level 182: [/input, 4076] 
split level 183: [/input, 3870] 
split level 184: [/input, 1437] 
split level 185: [/input, 293] 
split level 186: [/input, 1469] 
split level 187: [/input, 3260] 
split level 188: [/input-8, 2038] 
split level 189: [/input, 3307] 
split level 190: [/input, 2181] 
split level 191: [/input, 2532] 
split level 192: [/input, 1414] 
split level 193: [/input, 2374] 
split level 194: [/input, 2586] 
split level 195: [/input, 3813] 
split level 196: [/input, 1347] 
split level 197: [/input-8, 945] 
split level 198: [/input, 877] 
split level 199: [/input, 282] 
Time: prepare 0.0060    bound 0.1104    transfer 0.0137    finalize 0.0089    func 0.1392    
Accumulated time: func 0.2025    prepare 0.0169    bound 0.1733    transfer 0.0139    finalize 0.0091    
all_split False
======================Cut inference begins======================
max lb tensor(0.28787625) min lb tensor(-0.08274755)
Number of Verified Splits: 11 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.015250205993652344 
BICCOS Cumulative time: 0.015250205993652344
Preprocessing time: 0.012897968292236328 Inference time: 0.0006823539733886719 Add cuts time: 0.00023031234741210938 Cut analysis time: 0.0014395713806152344
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0005    decision 0.5573    set_bounds 0.0126    solve 0.1393    add 0.0103    
Accumulated time: pickout 0.0005    decision 0.5573    set_bounds 0.0126    solve 0.1393    add 0.0103    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([44]), tensor([-1.]), tensor([0]), tensor([4.27084742e-05]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([44]), tensor([1.]), tensor([0]), tensor([4.27084742e-05]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.007996559143066406

all verified at 1th iter
Time: prepare 0.0004    bound 0.0122    transfer 0.0002    finalize 0.0001    func 0.0130    
Accumulated time: func 0.2155    prepare 0.0173    bound 0.1854    transfer 0.0140    finalize 0.0092    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
Result: safe in 3.6288 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 108, vnnlib ID: 108 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.67031240,  -9.52653027,  -5.79421425,  -5.15730333,  -5.24825621,
          -5.88681936,  -4.92760229,  -6.80504274, -10.24907398,  -9.07698536]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [634]; unstable size 634; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 245, 1, 634] with unstable size 244 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 634] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 634] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [244]; unstable size 244; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 244] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 244] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.24761379,  2.93305993, -0.23562050, -0.90710092,  0.36504620,
         -1.18999696,  0.08451068,  3.42949820,  2.57326126]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.67031240,  -9.52653027,  -5.79421425,  -5.15730333,  -5.24825621,
          -5.88681936,  -4.92760229,  -6.80504274, -10.24907398,  -9.07698536]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.67031288,  -9.52653027,  -5.79421329,  -5.15730429,  -5.24825621,
           -5.88681889,  -4.92760229,  -6.80504179, -10.24907398,  -9.07698536],
         [ -7.67031288,  -9.52653027,  -5.79421329,  -5.15730429,  -5.24825621,
           -5.88681889,  -4.92760229,  -6.80504179, -10.24907398,  -9.07698536]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.63690901,  0.09095192, -0.22970200]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1300 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 109, vnnlib ID: 109 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -4.68137455, -11.11765766,  -8.01337242,  -9.71148872,  -8.79326439,
         -10.48354340, -10.25170231, -11.03672123,  -9.45322895, -10.81242466]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [555]; unstable size 555; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 118, 1, 555] with unstable size 117 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 555] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 555] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [117]; unstable size 117; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 117] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 117] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.02142096, 2.59467411, 4.01387167, 3.15092182, 4.53091192, 4.70333385,
         4.88892984, 3.85758543, 5.04689884]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0735 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 110, vnnlib ID: 110 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.59310770, -8.98699856, -1.98446643, -1.86275947, -2.02259350,
         -2.92739010,  0.91057259, -5.46356249, -8.21526527, -9.22765255]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [455]; unstable size 455; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 269, 1, 455] with unstable size 268 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 455] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 455] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [268]; unstable size 268; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 268] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 268] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.81164694, 7.72943783, 1.56485271, 1.38150585, 1.52279782, 2.12491870,
         4.28514671, 7.13579226, 8.30115986]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0677 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 111, vnnlib ID: 111 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.92330647, -14.34430218,  -7.27562428, -10.29554081,  -6.15860891,
         -10.20837307,  -9.93119907,  -8.65463638, -13.25779629, -14.20930576]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [611]; unstable size 611; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 254, 1, 611] with unstable size 253 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 611] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 611] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [253]; unstable size 253; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 253] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 253] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.99095178,  5.73210239, -0.06892407,  3.12794518,  2.97227120,
          2.38821340,  1.26657987,  4.99652910,  5.76884413]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.92330647, -14.34430218,  -7.27562428, -10.29554081,  -6.15860891,
         -10.20837307,  -9.93119907,  -8.65463638, -13.25779629, -14.20930576]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.49it/s]100%|██████████| 1/1 [00:00<00:00,  7.48it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.46822834, -13.99311256,  -6.75831699, -10.00392342,  -6.13183355,
           -9.93013954,  -9.78919888,  -8.68164825, -12.90161037, -13.86594105]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.62648344]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1366 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 9th iter
best_l after optimization: 29.920612335205078
alpha/beta optimization time: 0.13363265991210938
initial alpha-crown bounds: tensor([[3.09697366e+00, 5.84763956e+00, 1.91983581e-03, 3.17881083e+00,
         3.02511549e+00, 2.45539474e+00, 1.32388139e+00, 5.10637760e+00,
         5.88449907e+00]], device='cuda:0')
Number of class (without rhs): 0 ; Worst class: (+ rhs) 0.0019198358058929443
verified with init bound!
Result: safe-incomplete in 0.4256 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 112, vnnlib ID: 112 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.39937687, -6.31978703, -7.08044434, -6.31649590, -8.13005733,
         -7.18079948, -7.62912607, -6.36020851, -5.32509041, -4.25607824]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [646]; unstable size 646; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 646] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 646] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 646] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 171] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.06740272,  0.96642983,  1.28222036,  0.65053320,  2.26329422,
          1.44973683,  2.01239872,  0.51637924, -0.32224464]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.39937687, -6.31978703, -7.08044434, -6.31649590, -8.13005733,
         -7.18079948, -7.62912607, -6.36020851, -5.32509041, -4.25607824]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
100%|██████████| 1/1 [00:00<00:00,  8.48it/s]100%|██████████| 1/1 [00:00<00:00,  8.47it/s]
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6319 seconds.
lower bounds for all target labels: [3.0969736576080322, 5.847639560699463, 0.0019198358058929443, 3.1788108348846436, 3.025115489959717, 2.455394744873047, 1.3238813877105713, 5.106377601623535, 5.8844990730285645]
Number of cpus: 96  Number of subproblems: 0
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: []
start creating model mps for candidates: []
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.57732010, -6.66554546, -7.30325699, -6.67956257, -8.48736095,
          -7.56733274, -7.92629004, -6.74919939, -5.11711884, -4.89358377]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.22353506]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1211 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.232054710388184
alpha/beta optimization time: 1.2238645553588867
initial alpha-crown bounds: tensor([[ 1.09233963,  1.00209773,  1.32075119,  0.68928862,  2.30610132,
          1.48740792,  2.04873037,  0.55730593, -0.27196836]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.27196836471557617
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6337 seconds.
lower bounds for all target labels: [1.0923396348953247, 1.0020968914031982, 1.3207511901855469, 0.6892886161804199, 2.306100606918335, 1.487407922744751, 2.0487303733825684, 0.5573046207427979, -0.2719690799713135]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [8]
start creating model mps for candidates: ['lay/16_8']
parallel mps save finish
Process 237126 received signal 15. Terminate pool <multiprocessing.pool.Pool state=RUN pool_size=96>
Process 237126 received signal 15. Terminate pool <multiprocessing.pool.Pool state=TERMINATE pool_size=96>
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.4891562461853
Verifying property 0 with 1 instances.
##### Instance 112 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.3061013221740723.

Properties batch 1, size 1
Remaining timeout: 198.1930811405182
Verifying property 1 with 1 instances.
##### Instance 112 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.0487303733825684.

Properties batch 2, size 1
Remaining timeout: 198.0763714313507
Verifying property 2 with 1 instances.
##### Instance 112 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.487407922744751.

Properties batch 3, size 1
Remaining timeout: 197.9711048603058
Verifying property 3 with 1 instances.
##### Instance 112 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.3207511901855469.

Properties batch 4, size 1
Remaining timeout: 197.86672568321228
Verifying property 4 with 1 instances.
##### Instance 112 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0923396348953247.

Properties batch 5, size 1
Remaining timeout: 197.76246094703674
Verifying property 5 with 1 instances.
##### Instance 112 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.002097725868225.

Properties batch 6, size 1
Remaining timeout: 197.65874791145325
Verifying property 6 with 1 instances.
##### Instance 112 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6892886161804199.

Properties batch 7, size 1
Remaining timeout: 197.55473518371582
Verifying property 7 with 1 instances.
##### Instance 112 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.5573059320449829.

Properties batch 8, size 1
Remaining timeout: 197.44982433319092
Verifying property 8 with 1 instances.
##### Instance 112 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.27196836]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.39937687, -6.31978703, -7.08044434, -6.31649590, -8.13005733,
        -7.18079948, -7.62912607, -6.36020851, -5.32509041, -4.25607824],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.27196836]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 646
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 166
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 827
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0005898475646972656
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0544    transfer 0.0001    finalize 0.0002    func 0.0549    
Accumulated time: func 0.0549    prepare 0.0002    bound 0.0544    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 21] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 78] 
split level 3: [/input-12, 1] 
split level 4: [/input-12, 51] 
split level 5: [/input-8, 1890] 
split level 6: [/input-12, 55] 
split level 7: [/input-8, 1121] 
split level 8: [/input-8, 477] 
split level 9: [/input-8, 1124] 
split level 10: [/input-8, 1888] 
split level 11: [/input-8, 1331] 
split level 12: [/input-8, 1132] 
split level 13: [/input-8, 1840] 
split level 14: [/input-8, 1131] 
split level 15: [/input-8, 1381] 
split level 16: [/input-8, 1898] 
split level 17: [/input-8, 1506] 
split level 18: [/input-8, 802] 
split level 19: [/input-8, 1069] 
split level 20: [/input-8, 1113] 
split level 21: [/input-8, 932] 
split level 22: [/input, 1787] 
split level 23: [/input, 1518] 
split level 24: [/input-12, 54] 
split level 25: [/input, 2676] 
split level 26: [/input, 1770] 
split level 27: [/input-8, 1067] 
split level 28: [/input-8, 1049] 
split level 29: [/input-8, 1062] 
split level 30: [/input, 762] 
split level 31: [/input-8, 413] 
split level 32: [/input, 3581] 
split level 33: [/input, 1768] 
split level 34: [/input, 3383] 
split level 35: [/input, 1517] 
split level 36: [/input-8, 1035] 
split level 37: [/input-8, 942] 
split level 38: [/input, 1637] 
split level 39: [/input-8, 1894] 
split level 40: [/input-8, 1332] 
split level 41: [/input-8, 1509] 
split level 42: [/input-8, 1382] 
split level 43: [/input, 2168] 
split level 44: [/input, 3566] 
split level 45: [/input-8, 808] 
split level 46: [/input, 3580] 
split level 47: [/input-8, 623] 
split level 48: [/input, 2420] 
split level 49: [/input, 2269] 
split level 50: [/input, 2362] 
split level 51: [/input-8, 769] 
split level 52: [/input-8, 1897] 
split level 53: [/input-8, 1906] 
split level 54: [/input-8, 1857] 
split level 55: [/input, 2283] 
split level 56: [/input, 2617] 
split level 57: [/input, 4075] 
split level 58: [/input-8, 1465] 
split level 59: [/input, 1368] 
split level 60: [/input-8, 2041] 
split level 61: [/input, 1769] 
split level 62: [/input-8, 409] 
split level 63: [/input, 3914] 
split level 64: [/input-8, 81] 
split level 65: [/input-8, 2033] 
split level 66: [/input, 2683] 
split level 67: [/input, 3550] 
split level 68: [/input-8, 89] 
split level 69: [/input, 1753] 
split level 70: [/input, 2954] 
split level 71: [/input, 3043] 
split level 72: [/input-8, 1581] 
split level 73: [/input, 2798] 
split level 74: [/input-8, 1482] 
split level 75: [/input, 1519] 
split level 76: [/input-8, 1080] 
split level 77: [/input, 2884] 
split level 78: [/input, 3942] 
split level 79: [/input-8, 2046] 
split level 80: [/input, 2392] 
split level 81: [/input-8, 1441] 
split level 82: [/input-8, 893] 
split level 83: [/input-8, 96] 
split level 84: [/input, 1534] 
split level 85: [/input, 1987] 
split level 86: [/input-8, 1498] 
split level 87: [/input, 3929] 
split level 88: [/input, 2691] 
split level 89: [/input-8, 1910] 
split level 90: [/input, 3945] 
split level 91: [/input, 2393] 
split level 92: [/input-8, 72] 
split level 93: [/input-8, 1743] 
split level 94: [/input-8, 1440] 
split level 95: [/input, 2712] 
split level 96: [/input, 1949] 
split level 97: [/input, 2039] 
split level 98: [/input, 1622] 
split level 99: [/input, 1980] 
split level 100: [/input, 2005] 
split level 101: [/input, 581] 
split level 102: [/input, 3578] 
split level 103: [/input, 1503] 
split level 104: [/input, 3415] 
split level 105: [/input, 3928] 
split level 106: [/input, 1651] 
split level 107: [/input, 2359] 
split level 108: [/input, 1995] 
split level 109: [/input, 2949] 
split level 110: [/input-8, 1751] 
split level 111: [/input, 2932] 
split level 112: [/input, 2377] 
split level 113: [/input, 3907] 
split level 114: [/input, 3722] 
split level 115: [/input, 3796] 
split level 116: [/input, 1948] 
split level 117: [/input, 310] 
split level 118: [/input, 3779] 
split level 119: [/input-8, 2031] 
split level 120: [/input, 1964] 
split level 121: [/input, 1212] 
split level 122: [/input, 2011] 
split level 123: [/input, 4078] 
split level 124: [/input, 1685] 
split level 125: [/input, 1752] 
split level 126: [/input, 1988] 
split level 127: [/input, 2407] 
split level 128: [/input-8, 789] 
split level 129: [/input, 2826] 
split level 130: [/input-8, 2035] 
split level 131: [/input, 2388] 
split level 132: [/input, 3978] 
split level 133: [/input, 3718] 
split level 134: [/input, 1767] 
split level 135: [/input, 3310] 
split level 136: [/input, 1791] 
split level 137: [/input, 2542] 
split level 138: [/input, 3927] 
split level 139: [/input, 628] 
split level 140: [/input-8, 1371] 
split level 141: [/input-8, 2037] 
split level 142: [/input-8, 2019] 
split level 143: [/input, 2711] 
split level 144: [/input, 2994] 
split level 145: [/input, 3110] 
split level 146: [/input, 1592] 
split level 147: [/input-8, 936] 
split level 148: [/input-8, 2034] 
split level 149: [/input, 2024] 
split level 150: [/input, 2550] 
split level 151: [/input, 1502] 
split level 152: [/input, 2008] 
split level 153: [/input, 3180] 
split level 154: [/input, 3979] 
split level 155: [/input, 3997] 
split level 156: [/input, 2900] 
split level 157: [/input, 3730] 
split level 158: [/input, 3996] 
split level 159: [/input, 3027] 
split level 160: [/input-8, 2036] 
split level 161: [/input, 4012] 
split level 162: [/input, 2004] 
split level 163: [/input, 2023] 
split level 164: [/input, 2006] 
split level 165: [/input, 3398] 
split level 166: [/input, 2916] 
split level 167: [/input-8, 1488] 
split level 168: [/input, 2868] 
split level 169: [/input, 231] 
split level 170: [/input, 3128] 
split level 171: [/input, 2184] 
split level 172: [/input-8, 1974] 
split level 173: [/input, 3143] 
split level 174: [/input-8, 1032] 
split level 175: [/input, 3159] 
split level 176: [/input, 2007] 
split level 177: [/input, 2380] 
split level 178: [/input, 1400] 
split level 179: [/input, 3111] 
split level 180: [/input, 1873] 
split level 181: [/input, 2021] 
split level 182: [/input, 1383] 
split level 183: [/input, 3890] 
split level 184: [/input, 2022] 
split level 185: [/input, 3926] 
split level 186: [/input-8, 1618] 
split level 187: [/input, 3723] 
split level 188: [/input-8, 1449] 
split level 189: [/input, 2010] 
split level 190: [/input, 3156] 
split level 191: [/input, 1287] 
split level 192: [/input-8, 157] 
split level 193: [/input-8, 1501] 
split level 194: [/input, 2137] 
split level 195: [/input, 2918] 
split level 196: [/input, 2858] 
split level 197: [/input-8, 1416] 
split level 198: [/input, 618] 
split level 199: [/input, 1260] 
Time: prepare 0.0060    bound 0.0949    transfer 0.0079    finalize 0.0046    func 0.1134    
Accumulated time: func 0.1684    prepare 0.0160    bound 0.1494    transfer 0.0080    finalize 0.0047    
all_split False
======================Cut inference begins======================
max lb tensor(0.31710100) min lb tensor(-0.27196574)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.013425588607788086 
BICCOS Cumulative time: 0.013425588607788086
Preprocessing time: 0.011953115463256836 Inference time: 0.0002884864807128906 Add cuts time: 0.00012350082397460938 Cut analysis time: 0.00106048583984375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26063 (1), -0.26061 (1), -0.26035 (1), -0.26031 (1), -0.26028 (1), -0.25989 (1), -0.25972 (1), -0.25968 (1), -0.25931 (1), -0.25924 (1), -0.25869 (1), -0.25819 (1), -0.25739 (1), -0.25723 (1), -0.25698 (1), -0.25687 (1), -0.25671 (1), -0.25577 (1), -0.25550 (1), -0.25478 (1), 
Length of domains: 50
Time: pickout 0.0005    decision 0.5179    set_bounds 0.0118    solve 0.1136    add 0.2188    
Accumulated time: pickout 0.0005    decision 0.5179    set_bounds 0.0118    solve 0.1136    add 0.2188    
Current (lb-rhs): -0.260634183883667
50 domains visited
Cumulative time: 0.9745457172393799

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] [/input-12, 68] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] 
split level 1: [/input-12, 68] [/input-12, 1] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] 
split level 3: [/input-12, 1] [/input-8, 1890] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24576449394226074
10 lb beta sum: 1.0268968343734741, worst -0.03684055805206299
Time: prepare 0.0078    bound 0.1356    transfer 0.0011    finalize 0.0036    func 0.1509    
Accumulated time: func 0.3193    prepare 0.0242    bound 0.2850    transfer 0.0090    finalize 0.0083    
all_split False
======================Cut inference begins======================
max lb tensor(0.53197408) min lb tensor(-0.03660500)
Number of Verified Splits: 241 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.028492450714111328 
BICCOS Cumulative time: 0.041918039321899414
Preprocessing time: 0.013595342636108398 Inference time: 0.010209798812866211 Add cuts time: 0.0037572383880615234 Cut analysis time: 0.0009300708770751953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01761 (2), -0.01758 (2), -0.01756 (2), -0.01755 (2), -0.01751 (2), -0.01738 (2), -0.01686 (2), -0.01683 (2), -0.01681 (2), -0.01670 (2), -0.01540 (2), -0.01538 (2), -0.01537 (2), -0.01519 (2), -0.01439 (2), -0.01439 (2), -0.01437 (2), -0.01430 (2), -0.01429 (2), -0.01427 (2), 
Length of domains: 50
Time: pickout 0.0082    decision 0.0220    set_bounds 0.0141    solve 0.1511    add 0.2496    
Accumulated time: pickout 0.0086    decision 0.5399    set_bounds 0.0259    solve 0.2646    add 0.4684    
Current (lb-rhs): -0.017612457275390625
100 domains visited
Cumulative time: 1.4553020000457764

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 68] [/input-12, 68] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] 
split level 1: [/input-12, 1] [/input-12, 68] [/input-12, 78] [/input-12, 68] [/input-12, 1] [/input-12, 1] [/input-12, 78] [/input-12, 68] [/input-12, 68] [/input-12, 78] 
split level 2: [/input-12, 78] [/input-12, 78] [/input-12, 1] [/input-12, 1] [/input-12, 78] [/input-12, 78] [/input-12, 1] [/input-12, 78] [/input-12, 1] [/input-12, 1] 
split level 3: [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22659969329833984

all verified at 8th iter
Time: prepare 0.0085    bound 0.0686    transfer 0.0034    finalize 0.0038    func 0.0869    
Accumulated time: func 0.4062    prepare 0.0329    bound 0.3536    transfer 0.0124    finalize 0.0121    
all_split False
======================Cut inference begins======================
max lb tensor(0.42608261) min lb tensor(0.00041366)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 67.
#cuts 1-3: 67
#cuts >= 20: 0
BICCOS time: 0.04143929481506348 
BICCOS Cumulative time: 0.08335733413696289
Preprocessing time: 0.013474702835083008 Inference time: 0.017095327377319336 Add cuts time: 0.009004354476928711 Cut analysis time: 0.0018649101257324219
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0078    decision 0.0220    set_bounds 0.0195    solve 0.0871    add 0.0253    
Accumulated time: pickout 0.0164    decision 0.5619    set_bounds 0.0454    solve 0.3517    add 0.4937    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([1331], [-1.0], [0], [1.7167001153950423e-10], [0]), '/input-12': (tensor([21, 68]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.92756958e-16, 1.58575580e-01]), tensor([1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1331], [-1.0], [0], [1.7167001153950423e-10], [0]), '/input-12': (tensor([21, 68]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.92756958e-16, 1.85784567e-02]), tensor([1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1331], [-1.0], [0], [1.7167001153950423e-10], [0]), '/input-12': (tensor([21]), tensor([1.]), tensor([0]), tensor([0.28105885]), tensor([1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1331]), tensor([1.]), tensor([0]), tensor([2.76364517e-06]), tensor([0])), '/input-12': ([], [], [], [], [])}
Shallow branching resets to n domains:  4
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.27009105682373047
10 lb beta sum: 2.570051431655884, worst -0.009092330932617188
Time: prepare 0.0004    bound 0.1566    transfer 0.0002    finalize 0.0002    func 0.1575    
Accumulated time: func 0.5638    prepare 0.0334    bound 0.5102    transfer 0.0127    finalize 0.0123    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 78] 
split level 3: [/input-12, 1] 
split level 4: [/input-8, 1890] 
split level 5: [/input-8, 1132] 
split level 6: [/input-8, 1131] 
split level 7: [/input-8, 1898] 
cut re-enabled after branching node selection
0 lb beta sum: 5.2740278244018555, worst 0.02057957649230957

all verified at 0th iter
Time: prepare 0.0121    bound 0.0063    transfer 0.0039    finalize 0.0019    func 0.0259    
Accumulated time: func 0.5896    prepare 0.0459    bound 0.5166    transfer 0.0165    finalize 0.0142    
all_split False
======================Cut inference begins======================
max lb tensor(1.32283783) min lb tensor(0.02057958)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Fetch cut process: mps for current label is not ready yet
Total number of valid cuts: 67.
#cuts 1-3: 67
#cuts >= 20: 0
BICCOS time: 0.008355855941772461 
BICCOS Cumulative time: 0.09171319007873535
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0005    decision 0.0233    set_bounds 0.0283    solve 0.0259    add 0.0001    
Accumulated time: pickout 0.0169    decision 0.5852    set_bounds 0.0737    solve 0.3776    add 0.4939    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
Cumulative time: 1.9422976970672607

the mip building process is not terminated yet, kill it
the mip building process is not terminated yet, kill it
Result: safe in 5.0810 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 113, vnnlib ID: 113 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.78284311, -8.25498867, -3.91874337, -1.90788758, -4.97474670,
         -1.46400177, -6.09554291, -3.89886856, -8.36994171, -6.97793961]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [667]; unstable size 667; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 214, 1, 667] with unstable size 213 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 667] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 667] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [213]; unstable size 213; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 213] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 213] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.60612822,  4.23385572,  0.99936318,  2.04068422, -0.70643753,
          3.00155067,  1.31167293,  4.90406275,  3.47214937]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.78284311, -8.25498867, -3.91874337, -1.90788758, -4.97474670,
         -1.46400177, -6.09554291, -3.89886856, -8.36994171, -6.97793961]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.78284311, -8.25498867, -3.91874337, -1.90788758, -4.97474670,
          -1.46400177, -6.09554291, -3.89886856, -8.36994171, -6.97793961]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44388580]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.03650784, -1.00476182, -0.75079364,  ..., -0.68730158,
            -0.90952379, -1.62380958],
           [-0.44920623, -0.95714283, -0.67142856,  ..., -0.32222211,
            -0.65555555, -1.62380958],
           [-0.09999990, -0.92539680, -0.63968253,  ..., -0.22698402,
            -0.57619047, -1.63968253],
           ...,
           [-0.27460307, -0.29047608, -0.33809513,  ..., -0.87777776,
            -0.51269841, -0.48095238],
           [-0.30634910, -0.30634910, -0.33809513,  ..., -1.09999990,
            -0.65555555, -0.49682540],
           [-0.40158719, -0.40158719, -0.41746020,  ..., -1.29047608,
            -0.87777776, -0.62380952]],

          [[-1.62640905, -1.72302747, -1.65861523,  ..., -1.49758446,
            -1.57809973, -1.75523353],
           [-1.38486302, -1.77133656, -1.61030602,  ..., -1.35265696,
            -1.49758446, -1.75523353],
           [-1.09500802, -1.80354273, -1.62640905,  ..., -1.22383249,
            -1.40096617, -1.75523353],
           ...,
           [-1.25603855, -1.25603855, -1.28824472,  ..., -0.72463763,
            -0.43478248, -0.51529789],
           [-1.28824472, -1.25603855, -1.28824472,  ..., -0.88566822,
            -0.48309177, -0.45088565],
           [-1.33655393, -1.33655393, -1.33655393,  ..., -1.12721407,
            -0.67632848, -0.46698871]],

          [[-1.48275876, -1.52773619, -1.49775124,  ..., -1.28785622,
            -1.34782624, -1.42278874],
           [-1.15292358, -1.55772126, -1.54272878,  ..., -1.12293863,
            -1.19790113, -1.42278874],
           [-0.89805096, -1.54272878, -1.51274371,  ..., -1.06296861,
            -1.13793111, -1.43778121],
           ...,
           [-0.94302845, -0.94302845, -0.95802099,  ..., -0.61319339,
            -0.38830581, -0.52323836],
           [-0.94302845, -0.94302845, -0.94302845,  ..., -0.70314842,
            -0.34332830, -0.38830581],
           [-0.98800600, -1.00299859, -1.00299859,  ..., -0.89805096,
            -0.52323836, -0.31334329]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0772 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 114, vnnlib ID: 114 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.20003605, -18.01286888, -15.99082375, -17.43127060, -15.99804783,
         -18.05647850, -17.26184273, -18.19654465, -14.18293667, -18.52462387]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [575]; unstable size 575; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 278, 1, 575] with unstable size 277 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 575] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 575] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [277]; unstable size 277; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 277] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 277] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.64699364, 2.80865264, 4.23958778, 2.61277103, 4.73358536, 3.88175774,
         4.35204315, 1.01147735, 5.09978485]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0654 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 115, vnnlib ID: 115 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.36256695, -13.41296291,  -7.44461441,  -8.80130768,  -6.03208971,
          -9.45968819,  -8.73321247,  -9.01270103, -12.02322006, -13.37573814]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [544]; unstable size 544; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 300, 1, 544] with unstable size 299 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 544] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 544] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [299]; unstable size 299; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 299] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 299] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.81327713, 5.48521471, 0.46946716, 1.82796884, 2.35864878, 1.48084807,
         1.92163324, 4.35953045, 5.34309292]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0676 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 116, vnnlib ID: 116 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.81765366, -7.31970978, -3.61689496, -2.33775973, -4.04815769,
         -1.70513523, -4.43761539, -2.28235054, -5.83187103, -5.49887180]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [659]; unstable size 659; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 163, 1, 659] with unstable size 162 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 659] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 659] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [162]; unstable size 162; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 162] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 162] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.62464428,  3.89426184,  0.79460686,  0.29400682,  1.47056770,
          1.78599656, -0.22968018,  2.20870399,  2.15642881]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.81765366, -7.31970978, -3.61689496, -2.33775973, -4.04815769,
         -1.70513523, -4.43761539, -2.28235054, -5.83187103, -5.49887180]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.47it/s]100%|██████████| 1/1 [00:00<00:00,  8.46it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.90304852, -7.36696625, -3.67232847, -2.66886687, -4.13059711,
          -2.08577442, -4.73096037, -2.15597296, -6.01519966, -5.56542158]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.07019854]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1211 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 16.392478942871094
alpha/beta optimization time: 1.2171292304992676
initial alpha-crown bounds: tensor([[ 3.67620063,  3.94920111,  0.83800292,  0.30350503,  1.50146985,
          1.81741738, -0.19317853,  2.29632831,  2.20353222]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.19317853450775146
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6258 seconds.
lower bounds for all target labels: [3.6762001514434814, 3.949202060699463, 0.8380026817321777, 0.30350494384765625, 1.5014698505401611, 1.8174166679382324, -0.19317841529846191, 2.296328544616699, 2.2035317420959473]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [6]
start creating model mps for candidates: ['lay/16_6']
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 238492 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5101318359375
Verifying property 0 with 1 instances.
##### Instance 116 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.9492011070251465.

Properties batch 1, size 1
Remaining timeout: 198.2321012020111
Verifying property 1 with 1 instances.
##### Instance 116 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.6762006282806396.

Properties batch 2, size 1
Remaining timeout: 198.14292669296265
Verifying property 2 with 1 instances.
##### Instance 116 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.29632830619812.

Properties batch 3, size 1
Remaining timeout: 198.05552625656128
Verifying property 3 with 1 instances.
##### Instance 116 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.2035322189331055.

Properties batch 4, size 1
Remaining timeout: 197.96881985664368
Verifying property 4 with 1 instances.
##### Instance 116 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.8174173831939697.

Properties batch 5, size 1
Remaining timeout: 197.8828263282776
Verifying property 5 with 1 instances.
##### Instance 116 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.5014698505401611.

Properties batch 6, size 1
Remaining timeout: 197.78575110435486
Verifying property 6 with 1 instances.
##### Instance 116 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.8380029201507568.

Properties batch 7, size 1
Remaining timeout: 197.69051837921143
Verifying property 7 with 1 instances.
##### Instance 116 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.3035050332546234.

Properties batch 8, size 1
Remaining timeout: 197.60320138931274
Verifying property 8 with 1 instances.
##### Instance 116 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.19317853]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.81765366, -7.31970978, -3.61689496, -2.33775973, -4.04815769,
        -1.70513523, -4.43761539, -2.28235054, -5.83187103, -5.49887180],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.19317853]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 659
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 159
Node /15 input 0: size torch.Size([100]) unstable 16
-----------------
# of unstable neurons: 834
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0005228519439697266
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0627    transfer 0.0001    finalize 0.0002    func 0.0633    
Accumulated time: func 0.0633    prepare 0.0002    bound 0.0627    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 11] 
split level 1: [/input-12, 6] 
split level 2: [/input-12, 1] 
split level 3: [/input-12, 68] 
split level 4: [/input-12, 10] 
split level 5: [/input-12, 53] 
split level 6: [/input-8, 110] 
split level 7: [/input-8, 926] 
split level 8: [/input-8, 1460] 
split level 9: [/input-8, 162] 
split level 10: [/input-12, 64] 
split level 11: [/input-8, 486] 
split level 12: [/input-8, 1001] 
split level 13: [/input-8, 573] 
split level 14: [/input-8, 1017] 
split level 15: [/input-8, 1506] 
split level 16: [/input-8, 1058] 
split level 17: [/input-8, 998] 
split level 18: [/input-8, 102] 
split level 19: [/input-8, 1453] 
split level 20: [/input-8, 93] 
split level 21: [/input-8, 2036] 
split level 22: [/input-8, 619] 
split level 23: [/input-8, 1461] 
split level 24: [/input-8, 1329] 
split level 25: [/input, 2375] 
split level 26: [/input-8, 1523] 
split level 27: [/input-8, 598] 
split level 28: [/input, 481] 
split level 29: [/input-8, 1018] 
split level 30: [/input-8, 1009] 
split level 31: [/input-8, 2024] 
split level 32: [/input-8, 1421] 
split level 33: [/input-8, 993] 
split level 34: [/input-8, 1869] 
split level 35: [/input-8, 105] 
split level 36: [/input, 436] 
split level 37: [/input, 2430] 
split level 38: [/input, 1724] 
split level 39: [/input-8, 490] 
split level 40: [/input-8, 1765] 
split level 41: [/input, 2748] 
split level 42: [/input-8, 979] 
split level 43: [/input-8, 924] 
split level 44: [/input-8, 479] 
split level 45: [/input, 2071] 
split level 46: [/input-8, 1265] 
split level 47: [/input-8, 1467] 
split level 48: [/input, 497] 
split level 49: [/input, 2747] 
split level 50: [/input, 2397] 
split level 51: [/input-8, 892] 
split level 52: [/input-8, 521] 
split level 53: [/input-8, 1662] 
split level 54: [/input-8, 985] 
split level 55: [/input-8, 1466] 
split level 56: [/input-8, 1525] 
split level 57: [/input, 2446] 
split level 58: [/input-8, 497] 
split level 59: [/input-8, 585] 
split level 60: [/input-8, 969] 
split level 61: [/input, 1658] 
split level 62: [/input, 126] 
split level 63: [/input-8, 2041] 
split level 64: [/input, 455] 
split level 65: [/input, 285] 
split level 66: [/input-8, 1774] 
split level 67: [/input-8, 1518] 
split level 68: [/input, 1925] 
split level 69: [/input, 3027] 
split level 70: [/input-8, 698] 
split level 71: [/input, 2719] 
split level 72: [/input-8, 1514] 
split level 73: [/input-8, 2039] 
split level 74: [/input-8, 1805] 
split level 75: [/input, 196] 
split level 76: [/input-8, 78] 
split level 77: [/input-8, 1396] 
split level 78: [/input, 2215] 
split level 79: [/input, 3880] 
split level 80: [/input, 1642] 
split level 81: [/input-8, 481] 
split level 82: [/input, 2072] 
split level 83: [/input-8, 111] 
split level 84: [/input, 3021] 
split level 85: [/input, 2329] 
split level 86: [/input, 2380] 
split level 87: [/input-8, 2006] 
split level 88: [/input, 2749] 
split level 89: [/input, 440] 
split level 90: [/input-8, 1860] 
split level 91: [/input, 2763] 
split level 92: [/input, 2245] 
split level 93: [/input, 2463] 
split level 94: [/input-8, 2026] 
split level 95: [/input, 3811] 
split level 96: [/input, 3025] 
split level 97: [/input, 2984] 
split level 98: [/input, 3815] 
split level 99: [/input-8, 564] 
split level 100: [/input, 3223] 
split level 101: [/input-8, 1470] 
split level 102: [/input, 2280] 
split level 103: [/input, 2989] 
split level 104: [/input, 2597] 
split level 105: [/input, 3967] 
split level 106: [/input, 1246] 
split level 107: [/input-8, 529] 
split level 108: [/input, 3096] 
split level 109: [/input, 1560] 
split level 110: [/input, 1784] 
split level 111: [/input, 2714] 
split level 112: [/input-8, 121] 
split level 113: [/input, 3966] 
split level 114: [/input, 3099] 
split level 115: [/input, 2294] 
split level 116: [/input, 2248] 
split level 117: [/input-8, 454] 
split level 118: [/input, 2371] 
split level 119: [/input, 3198] 
split level 120: [/input, 2426] 
split level 121: [/input, 2089] 
split level 122: [/input, 3998] 
split level 123: [/input, 3000] 
split level 124: [/input, 3795] 
split level 125: [/input-8, 103] 
split level 126: [/input, 2381] 
split level 127: [/input, 3876] 
split level 128: [/input, 3197] 
split level 129: [/input, 3793] 
split level 130: [/input, 2302] 
split level 131: [/input, 2238] 
split level 132: [/input, 1941] 
split level 133: [/input, 2815] 
split level 134: [/input, 1783] 
split level 135: [/input, 1518] 
split level 136: [/input, 3112] 
split level 137: [/input, 2615] 
split level 138: [/input, 273] 
split level 139: [/input, 3233] 
split level 140: [/input, 2585] 
split level 141: [/input, 2973] 
split level 142: [/input, 1307] 
split level 143: [/input, 1878] 
split level 144: [/input-8, 987] 
split level 145: [/input, 3100] 
split level 146: [/input, 1481] 
split level 147: [/input, 1657] 
split level 148: [/input, 2587] 
split level 149: [/input, 1785] 
split level 150: [/input, 4043] 
split level 151: [/input, 3104] 
split level 152: [/input, 4051] 
split level 153: [/input-8, 527] 
split level 154: [/input, 3794] 
split level 155: [/input, 3140] 
split level 156: [/input, 2298] 
split level 157: [/input, 2244] 
split level 158: [/input, 3115] 
split level 159: [/input, 474] 
split level 160: [/input, 1801] 
split level 161: [/input, 3826] 
split level 162: [/input, 2372] 
split level 163: [/input, 1942] 
split level 164: [/input, 1493] 
split level 165: [/input, 1305] 
split level 166: [/input-8, 1413] 
split level 167: [/input, 3185] 
split level 168: [/input, 3980] 
split level 169: [/input, 2415] 
split level 170: [/input, 3866] 
split level 171: [/input, 3043] 
split level 172: [/input, 2354] 
split level 173: [/input, 3102] 
split level 174: [/input, 2368] 
split level 175: [/input, 3825] 
split level 176: [/input, 2988] 
split level 177: [/input-8, 1397] 
split level 178: [/input, 2257] 
split level 179: [/input, 3881] 
split level 180: [/input, 3107] 
split level 181: [/input-8, 2033] 
split level 182: [/input-8, 525] 
split level 183: [/input, 2807] 
split level 184: [/input, 3790] 
split level 185: [/input, 3822] 
split level 186: [/input, 3054] 
split level 187: [/input, 3169] 
split level 188: [/input, 1247] 
split level 189: [/input, 2053] 
split level 190: [/input, 95] 
split level 191: [/input-8, 2025] 
split level 192: [/input, 3820] 
split level 193: [/input, 1653] 
split level 194: [/input-8, 1554] 
split level 195: [/input, 3092] 
split level 196: [/input, 2311] 
split level 197: [/input, 2097] 
split level 198: [/input, 3136] 
split level 199: [/input, 3088] 
Time: prepare 0.0061    bound 0.1129    transfer 0.0348    finalize 0.0076    func 0.1615    
Accumulated time: func 0.2248    prepare 0.0165    bound 0.1756    transfer 0.0349    finalize 0.0078    
all_split False
======================Cut inference begins======================
max lb tensor(0.22567415) min lb tensor(-0.19308698)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.019533395767211914 
BICCOS Cumulative time: 0.019533395767211914
Preprocessing time: 0.01790308952331543 Inference time: 0.0002734661102294922 Add cuts time: 7.176399230957031e-05 Cut analysis time: 0.0012850761413574219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18751 (1), -0.18750 (1), -0.18735 (1), -0.18653 (1), -0.18647 (1), -0.18629 (1), -0.18606 (1), -0.18601 (1), -0.18572 (1), -0.18517 (1), -0.18504 (1), -0.18486 (1), -0.18453 (1), -0.18438 (1), -0.18432 (1), -0.18384 (1), -0.18302 (1), -0.18255 (1), -0.18144 (1), -0.18126 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5477    set_bounds 0.0186    solve 0.1616    add 0.2154    
Accumulated time: pickout 0.0004    decision 0.5477    set_bounds 0.0186    solve 0.1616    add 0.2154    
Current (lb-rhs): -0.18751490116119385
50 domains visited
Cumulative time: 1.0536110401153564

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 68] [/input-12, 10] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 10] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 3: [/input-12, 10] [/input-12, 53] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 53] [/input-12, 53] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1729569435119629
10 lb beta sum: 0.4636729657649994, worst -0.15743499994277954
Time: prepare 0.0076    bound 0.1406    transfer 0.0008    finalize 0.0040    func 0.1558    
Accumulated time: func 0.3805    prepare 0.0244    bound 0.3163    transfer 0.0357    finalize 0.0118    
all_split False
======================Cut inference begins======================
max lb tensor(0.18049002) min lb tensor(-0.15740472)
Number of Verified Splits: 99 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.021708011627197266 
BICCOS Cumulative time: 0.04124140739440918
Preprocessing time: 0.0147552490234375 Inference time: 0.004543304443359375 Add cuts time: 0.0019927024841308594 Cut analysis time: 0.00041675567626953125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08632 (2), -0.08597 (2), -0.08590 (2), -0.08574 (2), -0.08545 (2), -0.08521 (2), -0.08519 (2), -0.08503 (2), -0.08444 (2), -0.08343 (2), -0.08339 (2), -0.08241 (2), -0.08170 (2), -0.08161 (2), -0.08091 (2), -0.08059 (2), -0.07997 (2), -0.07902 (2), -0.07889 (2), -0.07888 (2), 
Length of domains: 50
Time: pickout 0.0081    decision 0.0214    set_bounds 0.0132    solve 0.1558    add 0.2243    
Accumulated time: pickout 0.0085    decision 0.5691    set_bounds 0.0319    solve 0.3175    add 0.4397    
Current (lb-rhs): -0.08631563186645508
100 domains visited
Cumulative time: 1.5052592754364014

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 1] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 68] [/input-12, 68] [/input-12, 1] [/input-12, 6] [/input-12, 6] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 68] [/input-12, 10] [/input-12, 68] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 1] [/input-12, 1] [/input-12, 10] [/input-12, 10] 
split level 3: [/input-12, 53] [/input-8, 93] [/input-12, 53] [/input-12, 53] [/input-8, 93] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11711251735687256
10 lb beta sum: 0.6051169037818909, worst -0.09011542797088623
Time: prepare 0.0077    bound 0.1437    transfer 0.0009    finalize 0.0029    func 0.1580    
Accumulated time: func 0.5385    prepare 0.0323    bound 0.4600    transfer 0.0366    finalize 0.0147    
all_split False
======================Cut inference begins======================
max lb tensor(0.41294795) min lb tensor(-0.08440280)
Number of Verified Splits: 118 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 6
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.0246732234954834 
BICCOS Cumulative time: 0.06591463088989258
Preprocessing time: 0.014720916748046875 Inference time: 0.00688624382019043 Add cuts time: 0.0021514892578125 Cut analysis time: 0.0009145736694335938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04234 (3), -0.04202 (3), -0.04166 (3), -0.04158 (3), -0.04147 (3), -0.04021 (3), -0.04018 (3), -0.04015 (3), -0.04011 (3), -0.04010 (3), -0.03978 (3), -0.03923 (3), -0.03896 (3), -0.03805 (3), -0.03781 (3), -0.03720 (3), -0.03689 (3), -0.03670 (3), -0.03658 (3), -0.03657 (3), 
Length of domains: 50
Time: pickout 0.0078    decision 0.0203    set_bounds 0.0162    solve 0.1582    add 0.2432    
Accumulated time: pickout 0.0164    decision 0.5894    set_bounds 0.0480    solve 0.4756    add 0.6829    
Current (lb-rhs): -0.04233968257904053
150 domains visited
Cumulative time: 1.9824976921081543

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 1] [/input-12, 1] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 6] [/input-12, 6] [/input-12, 1] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 6] 
split level 2: [/input-12, 53] [/input-12, 53] [/input-12, 1] [/input-12, 1] [/input-12, 10] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 1] 
split level 3: [/input-8, 93] [/input-8, 93] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-8, 93] [/input-8, 93] [/input-8, 93] [/input-8, 93] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07732832431793213
10 lb beta sum: 0.5559324622154236, worst -0.05340161919593811
Time: prepare 0.0076    bound 0.1562    transfer 0.0017    finalize 0.0045    func 0.1728    
Accumulated time: func 0.7114    prepare 0.0403    bound 0.6162    transfer 0.0382    finalize 0.0192    
all_split False
======================Cut inference begins======================
max lb tensor(0.23799777) min lb tensor(-0.04202354)
Number of Verified Splits: 173 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 4
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.028973102569580078 
BICCOS Cumulative time: 0.09488773345947266
Preprocessing time: 0.014562606811523438 Inference time: 0.01034092903137207 Add cuts time: 0.0033948421478271484 Cut analysis time: 0.0006747245788574219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02283 (4), -0.02269 (4), -0.02267 (4), -0.02227 (4), -0.02098 (4), -0.02087 (4), -0.01982 (4), -0.01952 (4), -0.01951 (4), -0.01911 (4), -0.01910 (4), -0.01906 (4), -0.01898 (4), -0.01897 (4), -0.01866 (4), -0.01862 (4), -0.01845 (4), -0.01758 (4), -0.01710 (4), -0.01649 (4), 
Length of domains: 50
Time: pickout 0.0083    decision 0.0224    set_bounds 0.0155    solve 0.1730    add 0.5939    
Accumulated time: pickout 0.0247    decision 0.6118    set_bounds 0.0636    solve 0.6486    add 1.2768    
Current (lb-rhs): -0.022834181785583496
200 domains visited
Cumulative time: 2.832090377807617

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
split level 2: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 3: [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05912506580352783
10 lb beta sum: 0.4171752333641052, worst -0.038857102394104004
Time: prepare 0.0084    bound 0.1584    transfer 0.0029    finalize 0.0027    func 0.1750    
Accumulated time: func 0.8864    prepare 0.0490    bound 0.7746    transfer 0.0411    finalize 0.0219    
all_split False
======================Cut inference begins======================
max lb tensor(0.26322174) min lb tensor(-0.02283418)
Number of Verified Splits: 171 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0018
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 4
#cuts 4-6: 11
#cuts >= 20: 0
BICCOS time: 0.02872467041015625 
BICCOS Cumulative time: 0.1236124038696289
Preprocessing time: 0.012555360794067383 Inference time: 0.009152889251708984 Add cuts time: 0.00439143180847168 Cut analysis time: 0.002624988555908203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00650 (5), -0.00643 (5), -0.00640 (5), -0.00640 (5), -0.00633 (5), -0.00632 (5), -0.00629 (5), -0.00626 (5), -0.00608 (5), -0.00606 (5), -0.00605 (5), -0.00604 (5), -0.00589 (5), -0.00587 (5), -0.00587 (5), -0.00575 (5), -0.00574 (5), -0.00573 (5), -0.00569 (5), -0.00560 (5), 
Length of domains: 50
Time: pickout 0.0078    decision 0.0217    set_bounds 0.0175    solve 0.1751    add 0.2383    
Accumulated time: pickout 0.0325    decision 0.6335    set_bounds 0.0811    solve 0.8238    add 1.5151    
Current (lb-rhs): -0.006501674652099609
250 domains visited
Cumulative time: 3.3285913467407227

Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [7.489575626351552e-11], [0]), '/input-12': (tensor([68, 11]), tensor([-1., -1.]), tensor([0, 0]), tensor([4.41988113e-11, 2.35465273e-01]), tensor([1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [7.489575626351552e-11], [0]), '/input-12': (tensor([68, 11]), tensor([-1.,  1.]), tensor([0, 0]), tensor([4.41988113e-11, 4.20259079e-04]), tensor([1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [7.489575626351552e-11], [0]), '/input-12': (tensor([68, 10, 53, 11]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([0.09889160, 0.01846074, 0.02997093, 0.26610035]), tensor([1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [7.489575626351552e-11], [0]), '/input-12': (tensor([68, 10, 53, 11]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([0.09889160, 0.01846074, 0.02997093, 0.00078748]), tensor([1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [7.489575626351552e-11], [0]), '/input-12': (tensor([68, 10, 53]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([0.09889160, 0.01846074, 0.00856357]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [7.489575626351552e-11], [0]), '/input-12': (tensor([68, 10, 11]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([0.09889160, 0.03446756, 0.23111229]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [7.489575626351552e-11], [0]), '/input-12': (tensor([68, 10, 11,  6]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([0.09889160, 0.03446756, 0.00098632, 0.06331979]), tensor([1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [7.489575626351552e-11], [0]), '/input-12': (tensor([68, 10, 11,  6]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([0.09889160, 0.03446756, 0.00098632, 0.00086682]), tensor([1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([110]), tensor([1.]), tensor([0]), tensor([2.85019269e-06]), tensor([0])), '/input-12': ([], [], [], [], [])}
Shallow branching resets to n domains:  9
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19241321086883545
10 lb beta sum: 0.4281490743160248, worst -0.15427058935165405
Time: prepare 0.0007    bound 0.1725    transfer 0.0002    finalize 0.0003    func 0.1738    
Accumulated time: func 1.0601    prepare 0.0497    bound 0.9471    transfer 0.0413    finalize 0.0222    
After pruning, left:  5

Back to Regular BaB

BaB round 1
batch: 5
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 6] [/input-12, 6] [/input-12, 11] [/input-12, 1] [/input-12, 11] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 6] [/input-12, 53] [/input-12, 6] 
split level 2: [/input-12, 10] [/input-8, 1460] [/input-12, 1] [/input-8, 1460] [/input-12, 1] 
split level 3: [/input-12, 53] [/input-12, 64] [/input-8, 1460] [/input-8, 1506] [/input-12, 68] 
split level 4: [/input-8, 1460] [/input-8, 1461] [/input-8, 1506] [/input, 1724] [/input-12, 10] 
split level 5: [/input, 1724] [/input, 1724] [/input, 1724] [/input-8, 993] [/input-12, 53] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7544467449188232, worst -0.10215771198272705
10 lb beta sum: 0.7544819712638855, worst -0.10201406478881836
Time: prepare 0.0160    bound 0.1677    transfer 0.0052    finalize 0.0028    func 0.1937    
Accumulated time: func 1.2539    prepare 0.0660    bound 1.1147    transfer 0.0465    finalize 0.0250    
all_split False
======================Cut inference begins======================
max lb tensor(0.39982086) min lb tensor(-0.10198593)
Number of Verified Splits: 290 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.747601330280304, worst -0.134088933467865
10 lb beta sum: 0.887313961982727, worst -0.10210448503494263
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0015
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 4
#cuts 4-6: 11
#cuts 7-9: 6
#cuts >= 20: 0
BICCOS time: 0.38276100158691406 
BICCOS Cumulative time: 0.506373405456543
Preprocessing time: 0.009766817092895508 Inference time: 0.36118268966674805 Add cuts time: 0.009131193161010742 Cut analysis time: 0.0026803016662597656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10199 (6), -0.08960 (6), -0.07879 (6), -0.07339 (6), -0.06771 (6), -0.04962 (6), -0.04822 (6), -0.04684 (6), -0.04025 (6), -0.04012 (6), -0.03997 (6), -0.03689 (6), -0.03289 (6), -0.03212 (6), -0.03160 (6), -0.02447 (6), -0.02298 (6), -0.01996 (6), -0.01471 (6), -0.01423 (6), 
Length of domains: 30
Time: pickout 0.0008    decision 0.0194    set_bounds 0.0368    solve 0.1938    add 0.0591    
Accumulated time: pickout 0.0333    decision 0.6529    set_bounds 0.1179    solve 1.0176    add 1.5742    
Current (lb-rhs): -0.10198593139648438
280 domains visited
Cumulative time: 4.303669691085815

BaB round 2
batch: 30
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1058] [/input-8, 1058] [/input-8, 926] [/input-8, 1460] [/input-8, 926] [/input-8, 926] [/input-8, 926] [/input-8, 1460] [/input-8, 1453] [/input-8, 1058] 
split level 1: [/input-8, 1453] [/input-8, 1461] [/input-8, 1461] [/input-8, 1453] [/input-8, 1506] [/input-8, 1506] [/input-8, 1461] [/input-12, 64] [/input-8, 1461] [/input-8, 1461] 
split level 2: [/input-8, 1461] [/input, 2238] [/input, 2238] [/input-8, 1461] [/input-8, 1461] [/input, 2238] [/input, 2238] [/input-8, 1461] [/input, 2238] [/input, 2238] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09362304210662842
10 lb beta sum: 0.1318330019712448, worst -0.09104230999946594
Time: prepare 0.0060    bound 0.1682    transfer 0.0040    finalize 0.0025    func 0.1823    
Accumulated time: func 1.4361    prepare 0.0722    bound 1.2830    transfer 0.0505    finalize 0.0275    
all_split False
======================Cut inference begins======================
max lb tensor(0.10232022) min lb tensor(-0.09101871)
Number of Verified Splits: 107 of 240
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 5
#cuts 4-6: 16
#cuts >= 20: 0
BICCOS time: 0.021316051483154297 
BICCOS Cumulative time: 0.5276894569396973
Preprocessing time: 0.007445812225341797 Inference time: 0.00962972640991211 Add cuts time: 0.0024111270904541016 Cut analysis time: 0.001829385757446289
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09102 (9), -0.08884 (9), -0.08471 (9), -0.08359 (9), -0.08290 (9), -0.08253 (9), -0.08074 (9), -0.07651 (9), -0.07636 (9), -0.07554 (9), -0.07437 (9), -0.06848 (9), -0.06754 (9), -0.06458 (9), -0.06377 (9), -0.06034 (9), -0.06032 (9), -0.05861 (9), -0.05683 (9), -0.05642 (9), 
Length of domains: 133
Time: pickout 0.0055    decision 0.0133    set_bounds 0.0179    solve 0.1823    add 0.0808    
Accumulated time: pickout 0.0388    decision 0.6662    set_bounds 0.1358    solve 1.1999    add 1.6550    
Current (lb-rhs): -0.09101870656013489
413 domains visited
Cumulative time: 4.6333701610565186

BaB round 3
batch: 133
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 926] [/input-8, 162] [/input-12, 64] [/input-12, 64] [/input-8, 926] [/input-12, 64] [/input-8, 162] [/input-12, 64] [/input-12, 64] [/input-8, 926] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2116628736257553, worst -0.0887475311756134
10 lb beta sum: 0.21710607409477234, worst -0.08873561024665833
Time: prepare 0.0134    bound 0.1796    transfer 0.0032    finalize 0.0020    func 0.2000    
Accumulated time: func 1.6361    prepare 0.0858    bound 1.4626    transfer 0.0537    finalize 0.0295    
all_split False
======================Cut inference begins======================
max lb tensor(0.09131046) min lb tensor(-0.08871272)
Number of Verified Splits: 88 of 266
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 7
#cuts 4-6: 13
#cuts >= 20: 0
BICCOS time: 0.020185232162475586 
BICCOS Cumulative time: 0.5478746891021729
Preprocessing time: 0.00823068618774414 Inference time: 0.008200407028198242 Add cuts time: 0.001985788345336914 Cut analysis time: 0.001768350601196289
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08871 (10), -0.08654 (10), -0.08251 (10), -0.08164 (10), -0.08052 (10), -0.08027 (10), -0.07830 (10), -0.07428 (10), -0.07420 (10), -0.07348 (10), -0.07189 (10), -0.06765 (10), -0.06607 (10), -0.06550 (10), -0.06522 (10), -0.06243 (10), -0.06160 (10), -0.06140 (10), -0.06077 (10), -0.06000 (10), 
Length of domains: 178
Time: pickout 0.0158    decision 0.0225    set_bounds 0.0122    solve 0.2001    add 0.0908    
Accumulated time: pickout 0.0546    decision 0.6887    set_bounds 0.1480    solve 1.4000    add 1.7458    
Current (lb-rhs): -0.08871272206306458
591 domains visited
Cumulative time: 5.003230810165405

BaB round 4
batch: 178
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-8, 162] [/input-8, 993] [/input-8, 926] [/input-12, 64] [/input-8, 162] [/input-8, 993] [/input-8, 162] [/input, 436] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08917689323425293
10 lb beta sum: 0.1000969260931015, worst -0.08658996224403381
Time: prepare 0.0082    bound 0.1707    transfer 0.0018    finalize 0.0024    func 0.1855    
Accumulated time: func 1.8217    prepare 0.0942    bound 1.6333    transfer 0.0556    finalize 0.0318    
all_split False
======================Cut inference begins======================
max lb tensor(0.12079938) min lb tensor(-0.08657785)
Number of Verified Splits: 135 of 356
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 7
#cuts 4-6: 17
#cuts >= 20: 0
BICCOS time: 0.02925395965576172 
BICCOS Cumulative time: 0.5771286487579346
Preprocessing time: 0.010772228240966797 Inference time: 0.01393890380859375 Add cuts time: 0.002597332000732422 Cut analysis time: 0.00194549560546875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08658 (11), -0.08441 (11), -0.07993 (11), -0.07944 (11), -0.07836 (11), -0.07768 (11), -0.07613 (11), -0.07211 (11), -0.07156 (11), -0.07106 (11), -0.06927 (11), -0.06531 (11), -0.06524 (11), -0.06502 (11), -0.06402 (11), -0.06369 (11), -0.06315 (11), -0.06298 (11), -0.06217 (11), -0.06194 (11), 
Length of domains: 221
Time: pickout 0.0176    decision 0.0217    set_bounds 0.0161    solve 0.1857    add 0.0777    
Accumulated time: pickout 0.0722    decision 0.7104    set_bounds 0.1641    solve 1.5856    add 1.8235    
Current (lb-rhs): -0.08657784759998322
812 domains visited
Cumulative time: 5.3593573570251465

BaB round 5
batch: 221
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 162] [/input-8, 1453] [/input-8, 1453] [/input-8, 1461] [/input-12, 64] [/input-8, 162] [/input-8, 993] [/input-8, 1453] [/input-8, 162] [/input-12, 64] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0865781307220459
10 lb beta sum: 0.03455474227666855, worst -0.08657777309417725
Time: prepare 0.0099    bound 0.1757    transfer 0.0057    finalize 0.0028    func 0.1971    
Accumulated time: func 2.0187    prepare 0.1043    bound 1.8090    transfer 0.0613    finalize 0.0346    
all_split False
======================Cut inference begins======================
max lb tensor(0.08539785) min lb tensor(-0.08657169)
Number of Verified Splits: 110 of 442
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 7
#cuts 4-6: 22
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.030586957931518555 
BICCOS Cumulative time: 0.6077156066894531
Preprocessing time: 0.013177871704101562 Inference time: 0.012382030487060547 Add cuts time: 0.002664804458618164 Cut analysis time: 0.0023622512817382812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08657 (12), -0.08441 (12), -0.07992 (12), -0.07835 (12), -0.07768 (12), -0.07685 (12), -0.07611 (12), -0.07404 (12), -0.07156 (12), -0.06925 (12), -0.06924 (12), -0.06852 (12), -0.06672 (12), -0.06557 (12), -0.06521 (12), -0.06507 (12), -0.06372 (12), -0.06305 (12), -0.06279 (12), -0.06255 (12), 
Length of domains: 332
Time: pickout 0.0166    decision 0.0215    set_bounds 0.0196    solve 0.1973    add 0.1072    
Accumulated time: pickout 0.0888    decision 0.7319    set_bounds 0.1837    solve 1.7829    add 1.9307    
Current (lb-rhs): -0.08657169342041016
1144 domains visited
Cumulative time: 5.759852886199951

BaB round 6
batch: 332
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1058] [/input-8, 1329] [/input, 436] [/input-8, 1453] [/input-8, 1265] [/input-8, 1058] [/input-8, 1453] [/input-8, 1265] [/input-8, 1058] [/input-8, 1329] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08437919616699219
10 lb beta sum: 0.014134607277810574, worst -0.08433067798614502
Time: prepare 0.0152    bound 0.1805    transfer 0.0083    finalize 0.0037    func 0.2121    
Accumulated time: func 2.2309    prepare 0.1197    bound 1.9895    transfer 0.0696    finalize 0.0383    
all_split False
======================Cut inference begins======================
max lb tensor(0.02423882) min lb tensor(-0.08431292)
Number of Verified Splits: 121 of 664
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0014
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 1-3: 8
#cuts 4-6: 30
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.041166067123413086 
BICCOS Cumulative time: 0.6488816738128662
Preprocessing time: 0.019878864288330078 Inference time: 0.014698982238769531 Add cuts time: 0.003411531448364258 Cut analysis time: 0.0031766891479492188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08431 (13), -0.08190 (13), -0.07811 (13), -0.07767 (13), -0.07690 (13), -0.07594 (13), -0.07574 (13), -0.07517 (13), -0.07328 (13), -0.07265 (13), -0.07144 (13), -0.07083 (13), -0.07014 (13), -0.06980 (13), -0.06956 (13), -0.06916 (13), -0.06808 (13), -0.06735 (13), -0.06644 (13), -0.06544 (13), 
Length of domains: 543
Time: pickout 0.0616    decision 0.0304    set_bounds 0.0291    solve 0.2130    add 0.0883    
Accumulated time: pickout 0.1504    decision 0.7623    set_bounds 0.2128    solve 1.9959    add 2.0189    
Current (lb-rhs): -0.08431291580200195
1687 domains visited
Cumulative time: 6.23158597946167

BaB round 7
batch: 543
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1506] [/input, 436] [/input-8, 1329] [/input-8, 1467] [/input-8, 1506] [/input-8, 1329] [/input-8, 1467] [/input-8, 1329] [/input-8, 162] [/input, 436] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0821695327758789
10 lb beta sum: 0.011809618212282658, worst -0.0820852518081665
Time: prepare 0.0255    bound 0.1909    transfer 0.0120    finalize 0.0075    func 0.2430    
Accumulated time: func 2.4739    prepare 0.1454    bound 2.1804    transfer 0.0816    finalize 0.0458    
all_split False
======================Cut inference begins======================
max lb tensor(0.01042287) min lb tensor(-0.08205760)
Number of Verified Splits: 136 of 1086
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 55.
#cuts 1-3: 8
#cuts 4-6: 38
#cuts 7-9: 9
#cuts >= 20: 0
BICCOS time: 0.059762001037597656 
BICCOS Cumulative time: 0.7086436748504639
Preprocessing time: 0.03566884994506836 Inference time: 0.015857458114624023 Add cuts time: 0.004945516586303711 Cut analysis time: 0.0032901763916015625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08206 (14), -0.07965 (14), -0.07581 (14), -0.07535 (14), -0.07530 (14), -0.07458 (14), -0.07431 (14), -0.07372 (14), -0.07289 (14), -0.07285 (14), -0.07159 (14), -0.07126 (14), -0.07107 (14), -0.06914 (14), -0.06907 (14), -0.06903 (14), -0.06852 (14), -0.06851 (14), -0.06777 (14), -0.06776 (14), 
Length of domains: 950
Time: pickout 0.0240    decision 0.0421    set_bounds 0.0444    solve 0.2433    add 0.1423    
Accumulated time: pickout 0.1743    decision 0.8044    set_bounds 0.2572    solve 2.2392    add 2.1612    
Current (lb-rhs): -0.08205759525299072
2637 domains visited
Cumulative time: 6.796045541763306

BaB round 8
batch: 950
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1329] [/input-8, 993] [/input, 436] [/input, 2748] [/input-8, 1329] [/input, 436] [/input, 2748] [/input-8, 993] [/input, 436] [/input-8, 1453] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.080810546875
10 lb beta sum: 0.005188631825149059, worst -0.08080804347991943
Time: prepare 0.0457    bound 0.2279    transfer 0.0248    finalize 0.0164    func 0.3283    
Accumulated time: func 2.8021    prepare 0.1913    bound 2.4083    transfer 0.1064    finalize 0.0622    
all_split False
======================Cut inference begins======================
max lb tensor(0.01363707) min lb tensor(-0.08079600)
Number of Verified Splits: 300 of 1900
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 67.
#cuts 1-3: 10
#cuts 4-6: 40
#cuts 7-9: 17
#cuts >= 20: 0
BICCOS time: 0.1130821704864502 
BICCOS Cumulative time: 0.8217258453369141
Preprocessing time: 0.06341338157653809 Inference time: 0.036104440689086914 Add cuts time: 0.009296417236328125 Cut analysis time: 0.00426793098449707
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08080 (15), -0.07838 (15), -0.07743 (15), -0.07499 (15), -0.07454 (15), -0.07332 (15), -0.07330 (15), -0.07325 (15), -0.07264 (15), -0.07246 (15), -0.07244 (15), -0.07158 (15), -0.07114 (15), -0.07091 (15), -0.07077 (15), -0.07021 (15), -0.06988 (15), -0.06979 (15), -0.06977 (15), -0.06942 (15), 
Length of domains: 1600
Time: pickout 0.0899    decision 0.2415    set_bounds 0.0794    solve 0.3288    add 0.1173    
Accumulated time: pickout 0.2642    decision 1.0459    set_bounds 0.3366    solve 2.5680    add 2.2785    
Current (lb-rhs): -0.0807960033416748
4237 domains visited
Cumulative time: 7.774416923522949

BaB round 9
batch: 1600
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 598] [/input-8, 479] [/input-8, 993] [/input-8, 1453] [/input-8, 598] [/input-8, 993] [/input-8, 1453] [/input-8, 479] [/input-8, 993] [/input, 2748] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07737839221954346
10 lb beta sum: 0.012132344767451286, worst -0.07738471031188965
Time: prepare 0.0804    bound 0.3271    transfer 0.0400    finalize 0.0198    func 0.4888    
Accumulated time: func 3.2910    prepare 0.2720    bound 2.7354    transfer 0.1464    finalize 0.0820    
all_split False
======================Cut inference begins======================
max lb tensor(0.01300025) min lb tensor(-0.07737327)
Number of Verified Splits: 429 of 3200
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 77.
#cuts 1-3: 10
#cuts 4-6: 36
#cuts 7-9: 31
#cuts >= 20: 0
BICCOS time: 0.18247175216674805 
BICCOS Cumulative time: 1.004197597503662
Preprocessing time: 0.10791993141174316 Inference time: 0.055913686752319336 Add cuts time: 0.013728141784667969 Cut analysis time: 0.004909992218017578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07737 (16), -0.07693 (16), -0.07496 (16), -0.07451 (16), -0.07385 (16), -0.07373 (16), -0.07142 (16), -0.07130 (16), -0.07110 (16), -0.07066 (16), -0.07043 (16), -0.06991 (16), -0.06986 (16), -0.06982 (16), -0.06941 (16), -0.06940 (16), -0.06926 (16), -0.06914 (16), -0.06902 (16), -0.06893 (16), 
Length of domains: 2771
Time: pickout 0.0427    decision 0.1041    set_bounds 0.1352    solve 0.4896    add 0.1195    
Accumulated time: pickout 0.3070    decision 1.1500    set_bounds 0.4718    solve 3.0576    add 2.3980    
Current (lb-rhs): -0.07737326622009277
7008 domains visited
Cumulative time: 8.861111164093018

BaB round 10
batch: 2771
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 436] [/input-8, 1009] [/input-8, 1009] [/input, 436] [/input, 2748] [/input-8, 479] [/input, 2748] [/input-8, 1009] [/input-8, 479] [/input-8, 979] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07542860507965088
10 lb beta sum: 0.009835406206548214, worst -0.07542097568511963
Time: prepare 0.1572    bound 0.5115    transfer 0.0997    finalize 0.0422    func 0.8472    
Accumulated time: func 4.1382    prepare 0.4296    bound 3.2469    transfer 0.2461    finalize 0.1242    
all_split False
======================Cut inference begins======================
max lb tensor(0.01774335) min lb tensor(-0.07540727)
Number of Verified Splits: 722 of 5542
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 125.
#cuts 1-3: 11
#cuts 4-6: 69
#cuts 7-9: 45
#cuts >= 20: 0
BICCOS time: 0.32633471488952637 
BICCOS Cumulative time: 1.3305323123931885
Preprocessing time: 0.189284086227417 Inference time: 0.10045623779296875 Add cuts time: 0.029460430145263672 Cut analysis time: 0.007133960723876953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07541 (17), -0.07496 (17), -0.07279 (17), -0.07234 (17), -0.07203 (17), -0.07192 (17), -0.07077 (17), -0.07032 (17), -0.06924 (17), -0.06912 (17), -0.06909 (17), -0.06864 (17), -0.06857 (17), -0.06813 (17), -0.06804 (17), -0.06798 (17), -0.06772 (17), -0.06763 (17), -0.06732 (17), -0.06728 (17), 
Length of domains: 4820
Time: pickout 0.0588    decision 0.3547    set_bounds 0.2452    solve 0.8491    add 0.1814    
Accumulated time: pickout 0.3658    decision 1.5047    set_bounds 0.7170    solve 3.9067    add 2.5794    
Current (lb-rhs): -0.07540726661682129
11828 domains visited
Cumulative time: 10.892158031463623

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 993] [/input-8, 93] [/input-8, 479] [/input-8, 993] [/input-8, 1009] [/input-8, 1009] [/input-8, 93] [/input-8, 1009] [/input-8, 598] [/input-8, 993] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07285809516906738
10 lb beta sum: 0.00875779241323471, worst -0.07285690307617188
Time: prepare 0.2421    bound 0.7319    transfer 0.0111    finalize 0.0603    func 1.1015    
Accumulated time: func 5.2397    prepare 0.6719    bound 3.9788    transfer 0.2572    finalize 0.1844    
all_split False
======================Cut inference begins======================
max lb tensor(0.12957740) min lb tensor(-0.07285070)
Number of Verified Splits: 1331 of 8192
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 185.
#cuts 1-3: 13
#cuts 4-6: 90
#cuts 7-9: 80
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.743412971496582 
BICCOS Cumulative time: 2.0739452838897705
Preprocessing time: 0.46628427505493164 Inference time: 0.20450997352600098 Add cuts time: 0.06251883506774902 Cut analysis time: 0.01009988784790039
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07285 (18), -0.07242 (18), -0.07221 (18), -0.07176 (18), -0.07082 (18), -0.07038 (18), -0.06948 (18), -0.06936 (18), -0.06882 (18), -0.06881 (18), -0.06870 (18), -0.06837 (18), -0.06742 (18), -0.06731 (18), -0.06722 (17), -0.06711 (18), -0.06667 (18), -0.06583 (18), -0.06576 (18), -0.06574 (18), 
Length of domains: 7585
Time: pickout 0.0899    decision 0.4269    set_bounds 0.3711    solve 1.1035    add 0.2240    
Accumulated time: pickout 0.4556    decision 1.9315    set_bounds 1.0881    solve 5.0102    add 2.8034    
Current (lb-rhs): -0.07285070419311523
18689 domains visited
current_vram/total_varm: 10.3GB/99.9GB, batch_size increase to 8192
Cumulative time: 13.877716302871704

BaB round 12
batch: 7585
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2748] [/input-8, 979] [/input-8, 479] [/input, 455] [/input-8, 1518] [/input-8, 1506] [/input-8, 1453] [/input-8, 598] [/input, 436] [/input-8, 1009] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07160532474517822
10 lb beta sum: 0.011286688037216663, worst -0.07161355018615723
Time: prepare 0.4274    bound 1.3507    transfer 0.0831    finalize 0.1155    func 2.0788    
Accumulated time: func 7.3184    prepare 1.0997    bound 5.3294    transfer 0.3403    finalize 0.2999    
all_split False
======================Cut inference begins======================
max lb tensor(0.13751099) min lb tensor(-0.07159448)
Number of Verified Splits: 3008 of 15170
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.cuts: total 521 constraints, 26361 nonzero elements
cuts preparing time: 0.0115
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 812.
#cuts 1-3: 129
#cuts 4-6: 119
#cuts 7-9: 165
#cuts 10-12: 9
#cuts 13-15: 21
#cuts 16-18: 25
#cuts 19-21: 27
#cuts >= 20: 317
BICCOS time: 1.6532130241394043 
BICCOS Cumulative time: 3.727158308029175
Preprocessing time: 0.7688333988189697 Inference time: 0.47442197799682617 Add cuts time: 0.15862154960632324 Cut analysis time: 0.25133609771728516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07159 (19), -0.07116 (19), -0.07095 (19), -0.07052 (19), -0.06827 (19), -0.06823 (19), -0.06811 (19), -0.06783 (19), -0.06762 (19), -0.06757 (19), -0.06745 (19), -0.06718 (19), -0.06625 (19), -0.06580 (19), -0.06560 (19), -0.06540 (18), -0.06515 (19), -0.06487 (19), -0.06475 (19), -0.06453 (19), 
Length of domains: 12162
Time: pickout 0.2354    decision 0.4325    set_bounds 0.9463    solve 2.0831    add 0.1798    
Accumulated time: pickout 0.6911    decision 2.3641    set_bounds 2.0344    solve 7.0933    add 2.9832    
Current (lb-rhs): -0.0715944766998291
30851 domains visited
Cumulative time: 19.465667486190796

BaB round 13
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1009] [/input, 2446] [/input-8, 598] [/input, 436] [/input-8, 1329] [/input-8, 1518] [/input-8, 1265] [/input-8, 93] [/input-8, 1009] [/input-8, 598] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06967461109161377
10 lb beta sum: 3.238807201385498, worst -0.040522754192352295
Time: prepare 0.4661    bound 3.7936    transfer 0.0780    finalize 0.1449    func 4.5931    
Accumulated time: func 11.9115    prepare 1.5661    bound 9.1230    transfer 0.4182    finalize 0.4448    
all_split False
======================Cut inference begins======================
max lb tensor(0.15122622) min lb tensor(-0.02564090)
Number of Verified Splits: 15331 of 16384
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.cuts: total 856 constraints, 43528 nonzero elements
cuts preparing time: 0.3637
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 965.
#cuts 1-3: 217
#cuts 4-6: 67
#cuts 7-9: 16
#cuts 10-12: 9
#cuts 13-15: 31
#cuts 16-18: 45
#cuts 19-21: 44
#cuts >= 20: 536
BICCOS time: 4.065124034881592 
BICCOS Cumulative time: 7.792282342910767
Preprocessing time: 0.5626602172851562 Inference time: 2.2806077003479004 Add cuts time: 0.4840700626373291 Cut analysis time: 0.737786054611206
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06560 (19), -0.06515 (19), -0.06420 (19), -0.06411 (19), -0.06405 (19), -0.06304 (19), -0.06207 (19), -0.06179 (19), -0.06169 (19), -0.06131 (19), -0.06125 (19), -0.06113 (19), -0.06110 (19), -0.06072 (19), -0.06071 (19), -0.06063 (19), -0.06052 (19), -0.06045 (19), -0.06037 (19), -0.06024 (19), 
Length of domains: 5023
Time: pickout 0.1488    decision 0.7210    set_bounds 0.7720    solve 4.9009    add 0.0969    
Accumulated time: pickout 0.8398    decision 3.0850    set_bounds 2.8064    solve 11.9942    add 3.0801    
Current (lb-rhs): -0.0656048059463501
31904 domains visited
current_vram/total_varm: 26.3GB/99.9GB, batch_size increase to 16384
Cumulative time: 30.33441185951233

BaB round 14
batch: 5023
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1466] [/input-8, 892] [/input, 455] [/input-8, 479] [/input-8, 93] [/input, 2446] [/input-8, 1453] [/input-8, 1467] [/input, 2748] [/input-8, 1329] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0687793493270874
10 lb beta sum: 3.6284170150756836, worst -0.040418997406959534
Time: prepare 0.2874    bound 2.6589    transfer 0.0886    finalize 0.0658    func 3.1678    
Accumulated time: func 15.0793    prepare 1.8538    bound 11.7819    transfer 0.5068    finalize 0.5106    
all_split False
======================Cut inference begins======================
max lb tensor(2.37356329) min lb tensor(-0.01207229)
Number of Verified Splits: 9642 of 10046
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.cuts: total 982 constraints, 47958 nonzero elements
cuts preparing time: 0.0171
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 983.
#cuts 1-3: 213
#cuts 7-9: 1
#cuts 10-12: 11
#cuts 13-15: 39
#cuts 16-18: 56
#cuts 19-21: 54
#cuts >= 20: 609
BICCOS time: 2.5809314250946045 
BICCOS Cumulative time: 10.373213768005371
Preprocessing time: 0.3604905605316162 Inference time: 1.6318211555480957 Add cuts time: 0.1653122901916504 Cut analysis time: 0.4233074188232422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01207 (20), -0.01196 (21), -0.01184 (21), -0.01181 (20), -0.01166 (21), -0.01153 (20), -0.01141 (20), -0.01128 (20), -0.01122 (21), -0.01107 (21), -0.01081 (21), -0.01061 (21), -0.01037 (21), -0.01008 (21), -0.00990 (21), -0.00957 (21), -0.00955 (21), -0.00954 (20), -0.00951 (20), -0.00937 (20), 
Length of domains: 404
Time: pickout 0.1069    decision 0.2889    set_bounds 0.4661    solve 3.1709    add 0.0924    
Accumulated time: pickout 0.9467    decision 3.3739    set_bounds 3.2725    solve 15.1651    add 3.1725    
Current (lb-rhs): -0.01207229495048523
32308 domains visited
Cumulative time: 37.199058532714844

BaB round 15
batch: 404
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2430] [/input, 2430] [/input, 2430] [/input, 2430] [/input-8, 1453] [/input, 2430] [/input, 2430] [/input-8, 1017] [/input, 2430] [/input, 2430] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06760835647583008

all verified at 3th iter
Time: prepare 0.0230    bound 0.0590    transfer 0.0095    finalize 0.0072    func 0.1039    
Accumulated time: func 15.1832    prepare 1.8771    bound 11.8409    transfer 0.5163    finalize 0.5178    
all_split False
======================Cut inference begins======================
max lb tensor(0.09192310) min lb tensor(0.02740470)
Number of Verified Splits: 808 of 808
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 6
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0039
Total number of valid cuts: 983.
#cuts 1-3: 213
#cuts 7-9: 1
#cuts 10-12: 11
#cuts 13-15: 39
#cuts 16-18: 56
#cuts 19-21: 54
#cuts >= 20: 609
BICCOS time: 0.03242826461791992 
BICCOS Cumulative time: 10.405642032623291
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0230    decision 0.0411    set_bounds 0.0396    solve 0.1041    add 0.0001    
Accumulated time: pickout 0.9697    decision 3.4150    set_bounds 3.3121    solve 15.2692    add 3.1726    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
32308 domains visited
Cumulative time: 37.447913646698

found process to kill: terminal indx = 6
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.cuts
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.indx
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=116_spec=6_26526254.log
found process for pidx=6
kill process for pidx=6
Result: safe in 40.2422 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 117, vnnlib ID: 117 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.05410433,  -7.98528099,  -7.76803017,  -8.62869644,  -7.58290386,
          -9.83789062,  -8.41322899, -10.12581921,  -1.82107425,  -8.20621872]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [462]; unstable size 462; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 196, 1, 462] with unstable size 195 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 462] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 462] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [195]; unstable size 195; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 195] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 195] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.12438464, 5.28402185, 4.66859245, 5.64474773, 4.65305662, 6.76825333,
         5.48563194, 7.03934669, 5.25850201]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0716 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 118, vnnlib ID: 118 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.12188244,  -7.11672592, -10.05889606, -10.35688305, -11.79731369,
          -9.88283920, -13.23313427,  -9.69955254,  -9.69626141,  -8.79122162]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [485]; unstable size 485; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 133, 1, 485] with unstable size 132 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 485] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 485] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [132]; unstable size 132; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 132] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 132] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.78854370, 1.30756688, 1.88601053, 3.26214170, 1.25751078, 4.64157391,
         1.15222788, 1.10766840, 0.93016064]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0651 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 119, vnnlib ID: 119 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.32807446, -12.10395241,  -6.98160744,  -7.09187889,  -7.17572021,
          -7.24349356,  -7.85012865,  -8.02880383, -10.09511280, -10.98221016]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [818]; unstable size 818; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 292, 1, 818] with unstable size 291 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 818] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 818] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [291]; unstable size 291; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 291] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 291] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.75854391,  3.26663280, -1.20437741, -1.10650253, -0.29332352,
         -0.34117436, -0.69933522,  1.05337334,  1.86989927]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.32807446, -12.10395241,  -6.98160744,  -7.09187889,  -7.17572021,
          -7.24349356,  -7.85012865,  -8.02880383, -10.09511280, -10.98221016]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.32807541, -12.10395432,  -6.98160744,  -7.09188032,  -7.17572117,
           -7.24349451,  -7.85012913,  -8.02880478, -10.09511280, -10.98221016],
         [ -9.32807541, -12.10395432,  -6.98160744,  -7.09188032,  -7.17572117,
           -7.24349451,  -7.85012913,  -8.02880478, -10.09511280, -10.98221016]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11027288,  0.08384085,  0.15161419,  0.75824881,  0.93692446]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.11587298, -1.08412695, -0.89365077,  ..., -1.14761901,
            -1.21111107, -1.29047608],
           [-1.05238092, -1.00476182, -0.84603173,  ..., -0.51269841,
            -0.56031746, -0.63968253],
           [-0.41746020, -0.33809513, -0.29047608,  ...,  0.01111121,
            -0.06825387, -0.19523799],
           ...,
           [-0.48095238, -0.49682540, -0.49682540,  ..., -0.68730158,
            -0.71904761, -0.78253967],
           [-0.46507925, -0.48095238, -0.46507925,  ..., -0.60793650,
            -0.63968253, -0.71904761],
           [-0.38571417, -0.36984116, -0.35396814,  ..., -0.46507925,
            -0.49682540, -0.56031746]],

          [[-0.90177131, -0.93397743, -0.72463763,  ..., -1.17552328,
            -1.25603855, -1.36875999],
           [-0.88566822, -0.88566822, -0.67632848,  ..., -0.57971013,
            -0.64412236, -0.75684375],
           [-0.37037024, -0.28985494, -0.17713353,  ..., -0.09661824,
            -0.19323659, -0.35426718],
           ...,
           [-0.59581316, -0.61191624, -0.61191624,  ..., -0.98228657,
            -0.98228657, -0.98228657],
           [-0.59581316, -0.61191624, -0.59581316,  ..., -0.99838966,
            -0.95008045, -1.03059578],
           [-0.59581316, -0.57971013, -0.54750401,  ..., -0.70853460,
            -0.67632848, -0.75684375]],

          [[-0.49325335, -0.52323836, -0.28335828,  ..., -0.86806595,
            -0.95802099, -1.07796109],
           [-0.53823084, -0.52323836, -0.28335828,  ..., -0.34332830,
            -0.43328333, -0.55322337],
           [-0.14842562, -0.05847061,  0.10644694,  ...,  0.04647692,
            -0.05847061, -0.20839565],
           ...,
           [-0.55322337, -0.56821585, -0.56821585,  ..., -0.92803597,
            -0.91304344, -0.91304344],
           [-0.55322337, -0.56821585, -0.55322337,  ..., -0.86806595,
            -0.85307342, -0.92803597],
           [-0.53823084, -0.50824583, -0.49325335,  ..., -0.58320838,
            -0.58320838, -0.67316341]]],


         [[[-1.11587298, -1.08412695, -0.89365077,  ..., -1.14761901,
            -1.21111107, -1.29047608],
           [-1.05238092, -1.00476182, -0.84603173,  ..., -0.51269841,
            -0.56031746, -0.63968253],
           [-0.41746020, -0.33809513, -0.29047608,  ...,  0.01111121,
            -0.06825387, -0.19523799],
           ...,
           [-0.48095238, -0.49682540, -0.49682540,  ..., -0.68730158,
            -0.71904761, -0.78253967],
           [-0.46507925, -0.48095238, -0.46507925,  ..., -0.60793650,
            -0.63968253, -0.71904761],
           [-0.38571417, -0.36984116, -0.35396814,  ..., -0.46507925,
            -0.49682540, -0.56031746]],

          [[-0.90177131, -0.93397743, -0.72463763,  ..., -1.17552328,
            -1.25603855, -1.36875999],
           [-0.88566822, -0.88566822, -0.67632848,  ..., -0.57971013,
            -0.64412236, -0.75684375],
           [-0.37037024, -0.28985494, -0.17713353,  ..., -0.09661824,
            -0.19323659, -0.35426718],
           ...,
           [-0.59581316, -0.61191624, -0.61191624,  ..., -0.98228657,
            -0.98228657, -0.98228657],
           [-0.59581316, -0.61191624, -0.59581316,  ..., -0.99838966,
            -0.95008045, -1.03059578],
           [-0.59581316, -0.57971013, -0.54750401,  ..., -0.70853460,
            -0.67632848, -0.75684375]],

          [[-0.49325335, -0.52323836, -0.28335828,  ..., -0.86806595,
            -0.95802099, -1.07796109],
           [-0.53823084, -0.52323836, -0.28335828,  ..., -0.34332830,
            -0.43328333, -0.55322337],
           [-0.14842562, -0.05847061,  0.10644694,  ...,  0.04647692,
            -0.05847061, -0.20839565],
           ...,
           [-0.55322337, -0.56821585, -0.56821585,  ..., -0.92803597,
            -0.91304344, -0.91304344],
           [-0.55322337, -0.56821585, -0.55322337,  ..., -0.86806595,
            -0.85307342, -0.92803597],
           [-0.53823084, -0.50824583, -0.49325335,  ..., -0.58320838,
            -0.58320838, -0.67316341]]],


         [[[-1.11587298, -1.08412695, -0.89365077,  ..., -1.14761901,
            -1.21111107, -1.29047608],
           [-1.05238092, -1.00476182, -0.84603173,  ..., -0.51269841,
            -0.56031746, -0.63968253],
           [-0.41746020, -0.33809513, -0.29047608,  ...,  0.01111121,
            -0.06825387, -0.19523799],
           ...,
           [-0.48095238, -0.49682540, -0.49682540,  ..., -0.68730158,
            -0.71904761, -0.78253967],
           [-0.46507925, -0.48095238, -0.46507925,  ..., -0.60793650,
            -0.63968253, -0.71904761],
           [-0.38571417, -0.36984116, -0.35396814,  ..., -0.46507925,
            -0.49682540, -0.56031746]],

          [[-0.90177131, -0.93397743, -0.72463763,  ..., -1.17552328,
            -1.25603855, -1.36875999],
           [-0.88566822, -0.88566822, -0.67632848,  ..., -0.57971013,
            -0.64412236, -0.75684375],
           [-0.37037024, -0.28985494, -0.17713353,  ..., -0.09661824,
            -0.19323659, -0.35426718],
           ...,
           [-0.59581316, -0.61191624, -0.61191624,  ..., -0.98228657,
            -0.98228657, -0.98228657],
           [-0.59581316, -0.61191624, -0.59581316,  ..., -0.99838966,
            -0.95008045, -1.03059578],
           [-0.59581316, -0.57971013, -0.54750401,  ..., -0.70853460,
            -0.67632848, -0.75684375]],

          [[-0.49325335, -0.52323836, -0.28335828,  ..., -0.86806595,
            -0.95802099, -1.07796109],
           [-0.53823084, -0.52323836, -0.28335828,  ..., -0.34332830,
            -0.43328333, -0.55322337],
           [-0.14842562, -0.05847061,  0.10644694,  ...,  0.04647692,
            -0.05847061, -0.20839565],
           ...,
           [-0.55322337, -0.56821585, -0.56821585,  ..., -0.92803597,
            -0.91304344, -0.91304344],
           [-0.55322337, -0.56821585, -0.55322337,  ..., -0.86806595,
            -0.85307342, -0.92803597],
           [-0.53823084, -0.50824583, -0.49325335,  ..., -0.58320838,
            -0.58320838, -0.67316341]]],


         [[[-1.11587298, -1.08412695, -0.89365077,  ..., -1.14761901,
            -1.21111107, -1.29047608],
           [-1.05238092, -1.00476182, -0.84603173,  ..., -0.51269841,
            -0.56031746, -0.63968253],
           [-0.41746020, -0.33809513, -0.29047608,  ...,  0.01111121,
            -0.06825387, -0.19523799],
           ...,
           [-0.48095238, -0.49682540, -0.49682540,  ..., -0.68730158,
            -0.71904761, -0.78253967],
           [-0.46507925, -0.48095238, -0.46507925,  ..., -0.60793650,
            -0.63968253, -0.71904761],
           [-0.38571417, -0.36984116, -0.35396814,  ..., -0.46507925,
            -0.49682540, -0.56031746]],

          [[-0.90177131, -0.93397743, -0.72463763,  ..., -1.17552328,
            -1.25603855, -1.36875999],
           [-0.88566822, -0.88566822, -0.67632848,  ..., -0.57971013,
            -0.64412236, -0.75684375],
           [-0.37037024, -0.28985494, -0.17713353,  ..., -0.09661824,
            -0.19323659, -0.35426718],
           ...,
           [-0.59581316, -0.61191624, -0.61191624,  ..., -0.98228657,
            -0.98228657, -0.98228657],
           [-0.59581316, -0.61191624, -0.59581316,  ..., -0.99838966,
            -0.95008045, -1.03059578],
           [-0.59581316, -0.57971013, -0.54750401,  ..., -0.70853460,
            -0.67632848, -0.75684375]],

          [[-0.49325335, -0.52323836, -0.28335828,  ..., -0.86806595,
            -0.95802099, -1.07796109],
           [-0.53823084, -0.52323836, -0.28335828,  ..., -0.34332830,
            -0.43328333, -0.55322337],
           [-0.14842562, -0.05847061,  0.10644694,  ...,  0.04647692,
            -0.05847061, -0.20839565],
           ...,
           [-0.55322337, -0.56821585, -0.56821585,  ..., -0.92803597,
            -0.91304344, -0.91304344],
           [-0.55322337, -0.56821585, -0.55322337,  ..., -0.86806595,
            -0.85307342, -0.92803597],
           [-0.53823084, -0.50824583, -0.49325335,  ..., -0.58320838,
            -0.58320838, -0.67316341]]],


         [[[-1.11587298, -1.08412695, -0.89365077,  ..., -1.14761901,
            -1.21111107, -1.29047608],
           [-1.05238092, -1.00476182, -0.84603173,  ..., -0.51269841,
            -0.56031746, -0.63968253],
           [-0.41746020, -0.33809513, -0.29047608,  ...,  0.01111121,
            -0.06825387, -0.19523799],
           ...,
           [-0.48095238, -0.49682540, -0.49682540,  ..., -0.68730158,
            -0.71904761, -0.78253967],
           [-0.46507925, -0.48095238, -0.46507925,  ..., -0.60793650,
            -0.63968253, -0.71904761],
           [-0.38571417, -0.36984116, -0.35396814,  ..., -0.46507925,
            -0.49682540, -0.56031746]],

          [[-0.90177131, -0.93397743, -0.72463763,  ..., -1.17552328,
            -1.25603855, -1.36875999],
           [-0.88566822, -0.88566822, -0.67632848,  ..., -0.57971013,
            -0.64412236, -0.75684375],
           [-0.37037024, -0.28985494, -0.17713353,  ..., -0.09661824,
            -0.19323659, -0.35426718],
           ...,
           [-0.59581316, -0.61191624, -0.61191624,  ..., -0.98228657,
            -0.98228657, -0.98228657],
           [-0.59581316, -0.61191624, -0.59581316,  ..., -0.99838966,
            -0.95008045, -1.03059578],
           [-0.59581316, -0.57971013, -0.54750401,  ..., -0.70853460,
            -0.67632848, -0.75684375]],

          [[-0.49325335, -0.52323836, -0.28335828,  ..., -0.86806595,
            -0.95802099, -1.07796109],
           [-0.53823084, -0.52323836, -0.28335828,  ..., -0.34332830,
            -0.43328333, -0.55322337],
           [-0.14842562, -0.05847061,  0.10644694,  ...,  0.04647692,
            -0.05847061, -0.20839565],
           ...,
           [-0.55322337, -0.56821585, -0.56821585,  ..., -0.92803597,
            -0.91304344, -0.91304344],
           [-0.55322337, -0.56821585, -0.55322337,  ..., -0.86806595,
            -0.85307342, -0.92803597],
           [-0.53823084, -0.50824583, -0.49325335,  ..., -0.58320838,
            -0.58320838, -0.67316341]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0698 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 120, vnnlib ID: 120 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -3.83905172, -12.57908535,  -3.68583417,  -3.78964639,  -5.75812435,
          -4.08564281,  -7.30590010,  -4.61561012, -11.22108173, -10.78313065]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [686]; unstable size 686; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 99, 1, 686] with unstable size 98 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 686] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 686] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [98]; unstable size 98; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 98] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 98] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 7.90750742, -0.64292014, -0.82822919,  1.19824719, -0.54596639,
          2.64874315, -0.17078567,  6.71303511,  6.26933956]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -3.83905172, -12.57908535,  -3.68583417,  -3.78964639,  -5.75812435,
          -4.08564281,  -7.30590010,  -4.61561012, -11.22108173, -10.78313065]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -3.83905125, -12.57908630,  -3.68583441,  -3.78964591,  -5.75812483,
           -4.08564281,  -7.30589867,  -4.61561012, -11.22108078, -10.78313160],
         [ -3.83905125, -12.57908630,  -3.68583441,  -3.78964591,  -5.75812483,
           -4.08564281,  -7.30589867,  -4.61561012, -11.22108078, -10.78313160]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.15321684, -0.04940534,  0.24659157,  0.77655888]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0472 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 121, vnnlib ID: 121 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.86313248,  -8.44097900, -13.20821190, -13.39188290, -12.26532078,
         -13.55902863, -14.16451168, -12.10001564, -14.36103153, -11.35003471]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [533]; unstable size 533; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 226, 1, 533] with unstable size 225 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 533] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 533] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [225]; unstable size 225; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 225] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 225] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.58184433, 2.47265053, 2.70894623, 1.52923965, 2.67172623, 3.54394722,
         1.39659977, 3.88951159, 1.85305750]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0306 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 122, vnnlib ID: 122 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.28887367,  -8.90356731, -12.90353107, -13.19761372, -12.63090992,
         -13.74266148, -14.50664043, -13.25693512,  -8.36382961, -11.89731884]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [470]; unstable size 470; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 191, 1, 470] with unstable size 190 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 470] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 470] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [190]; unstable size 190; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 190] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 190] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.83597136,  1.88928604,  2.30730486,  1.75963402,  2.61177921,
          3.72314787,  2.18467283, -1.76713872,  1.99258876]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.28887367,  -8.90356731, -12.90353107, -13.19761372, -12.63090992,
         -13.74266148, -14.50664043, -13.25693512,  -8.36382961, -11.89731884]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.28887367,  -8.90356731, -12.90353107, -13.19761372, -12.63090992,
          -13.74266148, -14.50664043, -13.25693512,  -8.36382961, -11.89731884]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.53973770]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.17936504, -0.97301590, -0.90952379,  ..., -1.27460313,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.83015871,  ..., -1.56031740,
            -1.65555561, -1.41746020],
           [-1.19523799, -1.17936504, -1.03650784,  ..., -1.44920623,
            -1.65555561, -1.52857137],
           ...,
           [ 0.69365084,  0.70952386,  0.72539687,  ..., -1.38571417,
            -1.43333328, -1.44920623],
           [ 0.74126989,  0.75714290,  0.77301592,  ..., -1.35396814,
            -1.41746020, -1.44920623],
           [ 0.77301592,  0.75714290,  0.72539687,  ..., -1.33809519,
            -1.38571417, -1.40158725]],

          [[-1.25603855, -0.91787434, -0.70853460,  ..., -0.91787434,
            -1.11111104, -0.91787434],
           [-1.20772946, -1.03059578, -0.67632848,  ..., -1.25603855,
            -1.38486302, -1.09500802],
           [-1.27214170, -1.23993552, -0.98228657,  ..., -1.17552328,
            -1.38486302, -1.23993552],
           ...,
           [ 0.53140104,  0.54750413,  0.56360716,  ..., -1.27214170,
            -1.32045078, -1.33655393],
           [ 0.57971025,  0.59581327,  0.61191636,  ..., -1.23993552,
            -1.30434775, -1.32045078],
           [ 0.61191636,  0.59581327,  0.57971025,  ..., -1.22383249,
            -1.28824472, -1.28824472]],

          [[-1.28785622, -1.07796109, -1.01799107,  ..., -1.37781119,
            -1.51274371, -1.42278874],
           [-1.22788620, -1.15292358, -0.92803597,  ..., -1.52773619,
            -1.55772126, -1.43778121],
           [-1.27286363, -1.28785622, -1.10794616,  ..., -1.21289361,
            -1.34782624, -1.36281872],
           ...,
           [ 0.54122955,  0.55622208,  0.57121456,  ..., -0.86806595,
            -0.91304344, -0.92803597],
           [ 0.58620709,  0.60119957,  0.60119957,  ..., -0.83808094,
            -0.89805096, -0.92803597],
           [ 0.61619210,  0.60119957,  0.58620709,  ..., -0.82308841,
            -0.88305843, -0.89805096]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0438 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 123, vnnlib ID: 123 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.10229683, -25.38055038, -21.73574066, -24.28678703, -25.19532585,
         -24.57376480, -24.21175194, -26.78511238, -20.36679649, -26.62832260]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [535]; unstable size 535; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 289, 1, 535] with unstable size 288 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 535] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 535] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [288]; unstable size 288; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 288] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 288] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.20215011,  3.29560685, -0.48173213,  2.02197981,  2.71108103,
          2.06478977,  1.99369478,  3.83842325,  4.76781797]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.10229683, -25.38055038, -21.73574066, -24.28678703, -25.19532585,
         -24.57376480, -24.21175194, -26.78511238, -20.36679649, -26.62832260]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.91583443, -24.71545410, -20.83208084, -23.43388939, -24.33002281,
          -23.67966270, -23.37922287, -25.72759819, -20.13323975, -25.80506325],
         [-19.91583443, -24.71545410, -20.83208084, -23.43388939, -24.33002281,
          -23.67966270, -23.37922287, -25.72759819, -20.13323975, -25.80506325]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.21740532,  0.69884109]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0076 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0857 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 124, vnnlib ID: 124 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.82584620, -7.63018703, -7.73003864, -7.25304461, -6.31065321,
         -8.23791885, -6.43050718, -6.84701109, -9.17996407, -7.64501524]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [632]; unstable size 632; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 261, 1, 632] with unstable size 260 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 632] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 632] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 260] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.27221322, -1.34621954, -1.80932045, -2.15861130, -2.98624802,
         -1.27028751, -2.80886602, -2.57974577, -0.39991713]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.82584620, -7.63018703, -7.73003864, -7.25304461, -6.31065321,
         -8.23791885, -6.43050718, -6.84701109, -9.17996407, -7.64501524]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.82584524, -7.63018608, -7.73003769, -7.25304365, -6.31065226,
          -8.23791599, -6.43050575, -6.84701014, -9.17996311, -7.64501333],
         [-7.82584524, -7.63018608, -7.73003769, -7.25304365, -6.31065226,
          -8.23791599, -6.43050575, -6.84701014, -9.17996311, -7.64501333]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.18083191, -0.01482725,  0.08502436, -0.39196968, -1.33436108,
           0.59290266, -1.21450758, -0.79800320,  1.53494978]]],
       device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         ...,


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0481 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 125, vnnlib ID: 125 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.10437679,  -8.96013069,  -8.69070339,  -8.62474823,  -9.76555538,
          -8.77996826, -10.66582012,  -9.75414944,  -7.47076607,  -8.44103909]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [743]; unstable size 743; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 170, 1, 743] with unstable size 169 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 743] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 743] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [169]; unstable size 169; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 169] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 169] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.60137367, -0.36385393, -1.25714493, -1.13711548, -0.05323410,
         -1.18300915,  0.78644753, -0.01430035, -2.42923403]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.10437679,  -8.96013069,  -8.69070339,  -8.62474823,  -9.76555538,
          -8.77996826, -10.66582012,  -9.75414944,  -7.47076607,  -8.44103909]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.10437679,  -8.96013069,  -8.69070339,  -8.62474823,  -9.76555729,
           -8.77996826, -10.66582012,  -9.75414848,  -7.47076511,  -8.44103909],
         [ -8.10437679,  -8.96013069,  -8.69070339,  -8.62474823,  -9.76555729,
           -8.77996826, -10.66582012,  -9.75414848,  -7.47076511,  -8.44103909]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.33666229,  0.51909161,  0.24966431,  0.18370914,  1.32451820,
           0.33892918,  1.31310940, -0.97027397]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         ...,


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0486 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 126, vnnlib ID: 126 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.85289669, -8.00897789, -3.25385118, -4.58932209, -3.74074745,
         -4.14678431, -4.96510458, -4.05580473, -7.93344116, -6.89174938]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [508]; unstable size 508; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 508] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 508] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 508] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 185] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.07057738,  2.60909200, -1.19970703,  0.02767652, -0.45064366,
          0.08406526, -0.38396716,  2.78343797,  1.49663746]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.85289669, -8.00897789, -3.25385118, -4.58932209, -3.74074745,
         -4.14678431, -4.96510458, -4.05580473, -7.93344116, -6.89174938]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.85289764, -8.00897884, -3.25385094, -4.58932209, -3.74074745,
          -4.14678431, -4.96510506, -4.05580473, -7.93344021, -6.89175034],
         [-6.85289764, -8.00897884, -3.25385094, -4.58932209, -3.74074745,
          -4.14678431, -4.96510506, -4.05580473, -7.93344021, -6.89175034]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.48689651,  0.40603685,  0.31505728]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]],


         [[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]],


         [[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0871 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 127, vnnlib ID: 127 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.57729053, -10.22089481,  -8.00115299,  -7.89926720,  -8.22076607,
          -9.08212662,  -9.97586060,  -9.23946381,  -7.82561684,  -9.45760345]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [685]; unstable size 685; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 685] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 685] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 685] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 208] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.39561689,  1.13157177, -1.32989621, -1.52063787, -1.36703968,
         -0.59409899,  0.40751410, -0.57752156,  0.47539353]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.57729053, -10.22089481,  -8.00115299,  -7.89926720,  -8.22076607,
          -9.08212662,  -9.97586060,  -9.23946381,  -7.82561684,  -9.45760345]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.57729101, -10.22089481,  -8.00115299,  -7.89926624,  -8.22076702,
           -9.08212757,  -9.97586155,  -9.23946476,  -7.82561779,  -9.45760345],
         [ -7.57729101, -10.22089481,  -8.00115299,  -7.89926624,  -8.22076702,
           -9.08212757,  -9.97586155,  -9.23946476,  -7.82561779,  -9.45760345]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.24832678,  0.17553520,  0.07364845,  0.39514923,  1.25650978,
           1.41384697]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0894 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 128, vnnlib ID: 128 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.12257195, -8.18585014, -3.72392344, -4.82489967, -3.27657938,
         -4.91832876, -4.09014797, -4.34730959, -7.98648739, -6.16137838]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [563]; unstable size 563; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 239, 1, 563] with unstable size 238 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 563] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 563] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [238]; unstable size 238; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 238] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 238] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.90272814,  1.91782403, -1.66059661, -0.46604282, -2.21083879,
         -0.55527323, -1.51988959,  1.75675309, -0.03911400]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.12257195, -8.18585014, -3.72392344, -4.82489967, -3.27657938,
         -4.91832876, -4.09014797, -4.34730959, -7.98648739, -6.16137838]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.12257195, -8.18585014, -3.72392321, -4.82489920, -3.27657890,
          -4.91832876, -4.09014797, -4.34730911, -7.98648739, -6.16137838],
         [-5.12257195, -8.18585014, -3.72392321, -4.82489920, -3.27657890,
          -4.91832876, -4.09014797, -4.34730911, -7.98648739, -6.16137838]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.03242397, -0.36622477,  0.73475122, -0.81356907,  0.82818079,
           0.25716114,  2.07123041]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]],


         [[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]],


         [[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]],


         ...,


         [[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]],


         [[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]],


         [[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]]]],
       device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0796 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 129, vnnlib ID: 129 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.31356716, -13.91007519,  -9.13539219,  -8.59541893,  -8.22070026,
          -8.21194839, -10.18828583, -10.88986969, -10.20756531, -12.20699596]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [584]; unstable size 584; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 263, 1, 584] with unstable size 262 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 584] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 584] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [262]; unstable size 262; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 262] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 262] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.54147208,  3.51587963, -0.48492050, -0.11444467, -1.27845049,
          0.64233303,  1.06292808,  0.06253506,  1.78522682]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.31356716, -13.91007519,  -9.13539219,  -8.59541893,  -8.22070026,
          -8.21194839, -10.18828583, -10.88986969, -10.20756531, -12.20699596]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.34673309, -13.95642376,  -9.16665554,  -8.64614391,  -8.25977421,
           -8.26714993, -10.22789955, -10.93951607, -10.24353981, -12.25478077],
         [ -9.34673309, -13.95642376,  -9.16665554,  -8.64614391,  -8.25977421,
           -8.26714993, -10.22789955, -10.93951607, -10.24353981, -12.25478077]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.07958317,  0.89950562,  0.37899399, -0.00737572]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0053 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0687 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 130, vnnlib ID: 130 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.37966061, -10.86174870,  -6.27118492,  -7.18504333,  -4.88041210,
          -7.02919436,  -7.02008009,  -5.68175220, -12.22475624,  -9.74924088]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [468]; unstable size 468; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 468] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 468] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 468] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 197] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.92446554,  1.83843040, -1.80397630, -0.25452477, -3.28706479,
         -1.12619352, -2.72712803,  3.37554073,  1.23327684]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.37966061, -10.86174870,  -6.27118492,  -7.18504333,  -4.88041210,
          -7.02919436,  -7.02008009,  -5.68175220, -12.22475624,  -9.74924088]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.37965965, -10.86174679,  -6.27118492,  -7.18504381,  -4.88041258,
           -7.02919531,  -7.02007914,  -5.68175268, -12.22475624,  -9.74924088],
         [ -9.37965965, -10.86174679,  -6.27118492,  -7.18504381,  -4.88041258,
           -7.02919531,  -7.02007914,  -5.68175268, -12.22475624,  -9.74924088]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.75801039,  0.15584850, -2.14878273, -0.00911617, -1.34744263]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0800 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 131, vnnlib ID: 131 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.35881138, -13.11242390,  -9.13916874, -10.32992744,  -9.78460979,
         -10.37751198, -11.98755741, -12.49197388,  -5.29605007, -12.74240780]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [574]; unstable size 574; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 574] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 574] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 574] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 192] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.78351945, 6.23856401, 2.09941626, 3.41462421, 2.79624510, 3.32998943,
         5.10516310, 5.41959715, 6.04746532]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0624 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 132, vnnlib ID: 132 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.14653015,  -8.83935356, -17.06118393, -16.39709473, -15.91677952,
         -18.22977066, -16.70629501, -16.62640762, -11.32539654,  -9.82044125]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [660]; unstable size 660; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 143, 1, 660] with unstable size 142 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 660] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 660] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [142]; unstable size 142; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 142] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 142] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.91259813,  6.46374893,  5.83736515,  5.29915905,  7.56130886,
          6.20057487,  5.96402264,  1.06313801, -0.07201350]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.14653015,  -8.83935356, -17.06118393, -16.39709473, -15.91677952,
         -18.22977066, -16.70629501, -16.62640762, -11.32539654,  -9.82044125]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.55it/s]100%|██████████| 1/1 [00:00<00:00,  7.54it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.66485786,  -8.80607510, -16.54650879, -15.81029320, -15.26687336,
          -17.61366844, -16.17134476, -15.95698166, -11.02882099,  -9.22151566]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.41544056]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1353 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 39.909873962402344
alpha/beta optimization time: 1.39365553855896
initial alpha-crown bounds: tensor([[ 0.98155355,  6.54999447,  5.92335892,  5.37160492,  7.64936352,
          6.28046942,  6.04217815,  1.13449669, -0.02314544]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.023145437240600586
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6532 seconds.
lower bounds for all target labels: [0.9815545082092285, 6.549994468688965, 5.923360347747803, 5.371605396270752, 7.6493635177612305, 6.280470848083496, 6.042176723480225, 1.1344947814941406, -0.023144960403442383]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [8]
start creating model mps for candidates: ['lay/16_8']
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.30035638809204
Verifying property 0 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 7.6493635177612305.

Properties batch 1, size 1
Remaining timeout: 198.09641194343567
Verifying property 1 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.549994468688965.

Properties batch 2, size 1
Remaining timeout: 197.97559309005737
Verifying property 2 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.2804694175720215.

Properties batch 3, size 1
Remaining timeout: 197.858984708786
Verifying property 3 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.042178153991699.

Properties batch 4, size 1
Remaining timeout: 197.7408561706543
Verifying property 4 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.923358917236328.

Properties batch 5, size 1
Remaining timeout: 197.62440657615662
Verifying property 5 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.371604919433594.

Properties batch 6, size 1
Remaining timeout: 197.49585843086243
Verifying property 6 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.1344966888427734.

Properties batch 7, size 1
Remaining timeout: 197.3785309791565
Verifying property 7 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9815535545349121.

Properties batch 8, size 1
Remaining timeout: 197.2617609500885
Verifying property 8 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02314544]], device='cuda:0') need to verify.
Model prediction is: tensor([-11.14653015,  -8.83935356, -17.06118393, -16.39709473, -15.91677952,
        -18.22977066, -16.70629501, -16.62640762, -11.32539654,  -9.82044125],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02314544]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 660
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 139
Node /15 input 0: size torch.Size([100]) unstable 12
-----------------
# of unstable neurons: 811
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0006964206695556641
======================Cut verification ends======================
Time: prepare 0.0002    bound 0.1006    transfer 0.0001    finalize 0.0002    func 0.1011    
Accumulated time: func 0.1011    prepare 0.0002    bound 0.1006    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 32] 
split level 1: [/input-12, 37] 
split level 2: [/input-8, 1436] 
split level 3: [/input-12, 25] 
split level 4: [/input-8, 796] 
split level 5: [/input-8, 1438] 
split level 6: [/input-12, 26] 
split level 7: [/input-8, 987] 
split level 8: [/input-12, 90] 
split level 9: [/input-12, 11] 
split level 10: [/input-8, 563] 
split level 11: [/input-8, 812] 
split level 12: [/input-8, 690] 
split level 13: [/input-8, 1076] 
split level 14: [/input-8, 821] 
split level 15: [/input-8, 169] 
split level 16: [/input-8, 1425] 
split level 17: [/input, 360] 
split level 18: [/input-12, 78] 
split level 19: [/input-12, 60] 
split level 20: [/input-8, 1646] 
split level 21: [/input-8, 788] 
split level 22: [/input-8, 1964] 
split level 23: [/input-8, 1326] 
split level 24: [/input-8, 797] 
split level 25: [/input, 1416] 
split level 26: [/input-8, 1947] 
split level 27: [/input-8, 1322] 
split level 28: [/input-8, 179] 
split level 29: [/input, 2454] 
split level 30: [/input, 364] 
split level 31: [/input, 2471] 
split level 32: [/input-8, 1519] 
split level 33: [/input-8, 787] 
split level 34: [/input, 420] 
split level 35: [/input, 3272] 
split level 36: [/input-8, 884] 
split level 37: [/input, 4065] 
split level 38: [/input, 3239] 
split level 39: [/input-8, 681] 
split level 40: [/input, 2184] 
split level 41: [/input, 343] 
split level 42: [/input, 1617] 
split level 43: [/input-8, 1962] 
split level 44: [/input-8, 1454] 
split level 45: [/input, 449] 
split level 46: [/input, 3269] 
split level 47: [/input-8, 1520] 
split level 48: [/input, 448] 
split level 49: [/input, 645] 
split level 50: [/input, 1495] 
split level 51: [/input-8, 1305] 
split level 52: [/input-8, 571] 
split level 53: [/input, 421] 
split level 54: [/input, 1431] 
split level 55: [/input-8, 573] 
split level 56: [/input, 4066] 
split level 57: [/input, 398] 
split level 58: [/input-8, 1289] 
split level 59: [/input-8, 1318] 
split level 60: [/input, 3287] 
split level 61: [/input, 3383] 
split level 62: [/input, 380] 
split level 63: [/input, 1404] 
split level 64: [/input, 1618] 
split level 65: [/input, 2121] 
split level 66: [/input, 1494] 
split level 67: [/input, 419] 
split level 68: [/input, 2469] 
split level 69: [/input, 404] 
split level 70: [/input, 422] 
split level 71: [/input-8, 570] 
split level 72: [/input, 2505] 
split level 73: [/input-8, 1508] 
split level 74: [/input, 2489] 
split level 75: [/input-8, 1505] 
split level 76: [/input, 2266] 
split level 77: [/input, 1769] 
split level 78: [/input, 3541] 
split level 79: [/input, 2507] 
split level 80: [/input, 3253] 
split level 81: [/input-8, 1353] 
split level 82: [/input, 2625] 
split level 83: [/input, 3221] 
split level 84: [/input, 3257] 
split level 85: [/input, 3527] 
split level 86: [/input, 3283] 
split level 87: [/input, 1447] 
split level 88: [/input-8, 2010] 
split level 89: [/input-8, 1039] 
split level 90: [/input-8, 540] 
split level 91: [/input, 1185] 
split level 92: [/input, 1500] 
split level 93: [/input, 2120] 
split level 94: [/input, 3166] 
split level 95: [/input, 2119] 
split level 96: [/input, 2200] 
split level 97: [/input-8, 822] 
split level 98: [/input, 4064] 
split level 99: [/input, 2504] 
split level 100: [/input, 110] 
split level 101: [/input, 1509] 
split level 102: [/input, 1367] 
split level 103: [/input, 3865] 
split level 104: [/input, 3219] 
split level 105: [/input, 3302] 
split level 106: [/input, 3385] 
split level 107: [/input, 929] 
split level 108: [/input, 4014] 
split level 109: [/input, 2538] 
split level 110: [/input, 1379] 
split level 111: [/input, 415] 
split level 112: [/input, 3547] 
split level 113: [/input-8, 679] 
split level 114: [/input, 3386] 
split level 115: [/input, 1451] 
split level 116: [/input, 3384] 
split level 117: [/input, 3542] 
split level 118: [/input, 1770] 
split level 119: [/input, 2530] 
split level 120: [/input, 1381] 
split level 121: [/input, 1403] 
split level 122: [/input, 2104] 
split level 123: [/input, 3284] 
split level 124: [/input, 41] 
split level 125: [/input, 227] 
split level 126: [/input, 3305] 
split level 127: [/input, 3291] 
split level 128: [/input, 3308] 
split level 129: [/input, 3282] 
split level 130: [/input, 3866] 
split level 131: [/input, 2523] 
split level 132: [/input, 373] 
split level 133: [/input, 3345] 
split level 134: [/input, 2346] 
split level 135: [/input, 3329] 
split level 136: [/input, 3150] 
split level 137: [/input, 3881] 
split level 138: [/input, 2534] 
split level 139: [/input, 2332] 
split level 140: [/input-8, 546] 
split level 141: [/input, 3556] 
split level 142: [/input, 2514] 
split level 143: [/input, 4067] 
split level 144: [/input, 4032] 
split level 145: [/input, 40] 
split level 146: [/input, 2345] 
split level 147: [/input, 2146] 
split level 148: [/input, 1335] 
split level 149: [/input, 3868] 
split level 150: [/input, 2257] 
split level 151: [/input, 3559] 
split level 152: [/input, 3884] 
split level 153: [/input, 3867] 
split level 154: [/input, 3915] 
split level 155: [/input, 2099] 
split level 156: [/input, 3883] 
split level 157: [/input, 2519] 
split level 158: [/input, 3304] 
split level 159: [/input, 2155] 
split level 160: [/input, 2397] 
split level 161: [/input, 3934] 
split level 162: [/input, 3165] 
split level 163: [/input, 3364] 
split level 164: [/input, 2329] 
split level 165: [/input-8, 1378] 
split level 166: [/input, 2539] 
split level 167: [/input, 2347] 
split level 168: [/input, 3864] 
split level 169: [/input-8, 1354] 
split level 170: [/input, 3199] 
split level 171: [/input, 2331] 
split level 172: [/input, 3330] 
split level 173: [/input, 3097] 
split level 174: [/input, 2348] 
split level 175: [/input, 3882] 
split level 176: [/input, 899] 
split level 177: [/input, 713] 
split level 178: [/input, 3863] 
split level 179: [/input, 3202] 
split level 180: [/input, 3870] 
split level 181: [/input, 3861] 
split level 182: [/input, 3363] 
split level 183: [/input, 3879] 
split level 184: [/input, 3354] 
split level 185: [/input, 3880] 
split level 186: [/input, 87] 
split level 187: [/input, 1775] 
split level 188: [/input, 3296] 
split level 189: [/input, 3862] 
split level 190: [/input, 3332] 
split level 191: [/input, 3860] 
split level 192: [/input, 2327] 
split level 193: [/input, 3349] 
split level 194: [/input, 1282] 
split level 195: [/input, 498] 
split level 196: [/input, 3398] 
split level 197: [/input, 2856] 
split level 198: [/input, 1515] 
split level 199: [/input, 2855] 
Time: prepare 0.0060    bound 0.1103    transfer 0.0087    finalize 0.0060    func 0.1311    
Accumulated time: func 0.2322    prepare 0.0166    bound 0.2109    transfer 0.0088    finalize 0.0062    
all_split False
======================Cut inference begins======================
max lb tensor(0.22516072) min lb tensor(-0.02312028)
Number of Verified Splits: 17 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01441812515258789 
BICCOS Cumulative time: 0.01441812515258789
Preprocessing time: 0.011956930160522461 Inference time: 0.0007898807525634766 Add cuts time: 0.0002644062042236328 Cut analysis time: 0.0014069080352783203
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5545    set_bounds 0.0126    solve 0.1312    add 0.0101    
Accumulated time: pickout 0.0004    decision 0.5545    set_bounds 0.0126    solve 0.1312    add 0.0101    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([32]), tensor([-1.]), tensor([0]), tensor([3.05888648e-11]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([32]), tensor([1.]), tensor([0]), tensor([3.05888648e-11]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.12833130359649658

all verified at 0th iter
Time: prepare 0.0003    bound 0.0047    transfer 0.0001    finalize 0.0001    func 0.0053    
Accumulated time: func 0.2375    prepare 0.0169    bound 0.2156    transfer 0.0089    finalize 0.0063    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
Result: safe in 3.9875 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 133, vnnlib ID: 133 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.25358391, -24.01944351, -13.62016106, -15.25064659, -19.34745598,
         -15.90201569, -19.20198250, -17.42230415, -21.89736557, -21.49999237]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [554]; unstable size 554; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 98, 1, 554] with unstable size 97 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 554] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 554] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [97]; unstable size 97; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 97] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 97] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.17917991, 9.69885063, 1.01258564, 5.11245012, 1.56947923, 4.91068316,
         3.15387392, 7.60085821, 7.21997929]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.1285 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 134, vnnlib ID: 134 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.00686455, -14.29141140, -14.37695026, -15.86271286, -15.28532314,
         -17.60468292, -14.91024494, -17.65866089, -10.37097645, -14.77221203]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [752]; unstable size 752; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 224, 1, 752] with unstable size 223 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 752] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 752] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [223]; unstable size 223; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 223] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 223] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.77094507,  1.88772774,  3.21973825,  2.86656547,  4.79594135,
          2.18563271,  4.89809704, -1.79894888,  2.22324061]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.00686455, -14.29141140, -14.37695026, -15.86271286, -15.28532314,
         -17.60468292, -14.91024494, -17.65866089, -10.37097645, -14.77221203]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.00686455, -14.29141140, -14.37695026, -15.86271286, -15.28532314,
          -17.60468292, -14.91024494, -17.65866089, -10.37097645, -14.77221203]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.63588810]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.15396857,  1.01111114,  1.01111114,  ...,  1.02698421,
             1.04285717,  1.10634947],
           [ 1.02698421,  0.94761908,  0.94761908,  ...,  1.12222254,
             1.12222254,  1.16984153],
           [ 0.99523818,  0.91587305,  0.86825401,  ...,  1.12222254,
             1.13809550,  1.16984153],
           ...,
           [-0.14761895, -0.41746020, -0.43333322,  ..., -0.36984116,
            -0.33809513, -0.41746020],
           [-0.30634910, -0.56031746, -0.57619047,  ..., -0.68730158,
            -0.54444444, -0.36984116],
           [-0.22698402, -0.33809513, -0.40158719,  ..., -0.59206349,
            -0.32222211, -0.14761895]],

          [[ 1.20772982,  1.06280196,  1.06280196,  ...,  1.07890511,
             1.09500813,  1.15942061],
           [ 1.07890511,  0.99838978,  0.99838978,  ...,  1.17552364,
             1.17552364,  1.22383285],
           [ 1.04669893,  0.96618366,  0.91787446,  ...,  1.17552364,
             1.19162667,  1.22383285],
           ...,
           [-0.11272129, -0.38647330, -0.40257636,  ..., -0.33816412,
            -0.30595800, -0.38647330],
           [-0.27375188, -0.53140092, -0.54750401,  ..., -0.66022539,
            -0.51529789, -0.33816412],
           [-0.19323659, -0.30595800, -0.37037024,  ..., -0.56360704,
            -0.28985494, -0.11272129]],

          [[ 1.26086998,  1.12593722,  1.12593722,  ...,  1.14092970,
             1.15592217,  1.21589243],
           [ 1.14092970,  1.06596720,  1.06596720,  ...,  1.23088503,
             1.23088503,  1.27586246],
           [ 1.11094475,  1.03598225,  0.99100471,  ...,  1.23088503,
             1.24587750,  1.27586246],
           ...,
           [ 0.03148442, -0.22338814, -0.23838064,  ..., -0.17841063,
            -0.14842562, -0.22338814],
           [-0.11844061, -0.35832080, -0.37331331,  ..., -0.47826082,
            -0.34332830, -0.17841063],
           [-0.04347810, -0.14842562, -0.20839565,  ..., -0.38830581,
            -0.13343313,  0.03148442]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0736 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 135, vnnlib ID: 135 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.44892406,  -4.04770756, -11.04793358,  -9.86121178,  -9.30945015,
         -10.61656761, -11.13577747,  -9.78641891,  -8.20079136,  -4.34282255]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [511]; unstable size 511; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 511] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 511] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 511] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 203] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.79137325,  4.81029177,  3.58750868,  3.09708118,  4.12102747,
          5.00578690,  3.13694286,  2.81165552, -0.60362911]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.44892406,  -4.04770756, -11.04793358,  -9.86121178,  -9.30945015,
         -10.61656761, -11.13577747,  -9.78641891,  -8.20079136,  -4.34282255]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.18832302, -3.46224546, -9.60307217, -8.47136879, -7.96284771,
          -9.14761257, -9.82332706, -8.34997749, -7.19332027, -3.19167089]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.27057457]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0071 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0785 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 136, vnnlib ID: 136 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.25000286, -9.54972458, -6.18170929, -5.75074911, -6.05999041,
         -5.86923456, -7.27043962, -7.67426729, -6.16280842, -8.88309860]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [683]; unstable size 683; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 150, 1, 683] with unstable size 149 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 683] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 683] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [149]; unstable size 149; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 149] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.00514412, 1.08236063, 0.27113575, 0.77234674, 0.24157637, 1.78406572,
         1.89451611, 0.67536867, 3.36466599]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0683 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 137, vnnlib ID: 137 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.10846710, -8.76792812, -2.56949711, -3.15299773, -2.80712223,
         -3.16891909, -2.61646676, -4.73773241, -8.38235092, -7.32381153]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [508]; unstable size 508; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 298, 1, 508] with unstable size 297 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 508] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 508] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [297]; unstable size 297; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 297] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 297] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.63653493,  3.73463655, -1.26144528, -0.64267188, -1.08236969,
         -0.74575400,  0.71406722,  3.06178975,  2.80589008]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.10846710, -8.76792812, -2.56949711, -3.15299773, -2.80712223,
         -3.16891909, -2.61646676, -4.73773241, -8.38235092, -7.32381153]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.10846806, -8.76792812, -2.56949711, -3.15299821, -2.80712175,
          -3.16891956, -2.61646700, -4.73773289, -8.38235092, -7.32381201],
         [-6.10846806, -8.76792812, -2.56949711, -3.15299821, -2.80712175,
          -3.16891956, -2.61646700, -4.73773289, -8.38235092, -7.32381201]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04696989,  0.53653121,  0.19065475,  0.55245256]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.24285710, -1.30634916, -1.09999990,  ...,  0.05873025,
            -0.46507925, -0.57619047],
           [-1.11587298, -1.16349196, -1.09999990,  ..., -0.24285704,
            -0.65555555, -0.79841268],
           [-1.19523799, -1.13174593, -0.84603173,  ..., -0.14761895,
            -0.84603173, -0.75079364],
           ...,
           [ 1.15396857, -0.57619047, -1.44920623,  ..., -0.70317459,
            -0.68730158, -0.48095238],
           [ 1.63015902,  0.58253974, -0.02063482,  ..., -0.86190474,
            -0.79841268, -0.43333322],
           [ 1.67777801,  1.39206374,  1.16984153,  ..., -1.03650784,
            -1.08412695, -0.89365077]],

          [[-1.11111104, -1.20772946, -1.01449275,  ...,  0.08051541,
            -0.53140092, -0.62801927],
           [-1.01449275, -1.06280184, -0.98228657,  ..., -0.22544271,
            -0.64412236, -0.77294683],
           [-1.11111104, -1.01449275, -0.72463763,  ..., -0.11272129,
            -0.77294683, -0.72463763],
           ...,
           [ 0.99838978, -0.66022539, -1.30434775,  ..., -0.78904986,
            -0.85346210, -0.66022539],
           [ 1.52979100,  0.43478271, -0.06441211,  ..., -0.80515295,
            -0.77294683, -0.57971013],
           [ 1.64251232,  1.27214205,  0.95008057,  ..., -0.93397743,
            -1.04669881, -0.96618354]],

          [[-0.55322337, -0.70314842, -0.55322337,  ...,  0.60119957,
            -0.17841063, -0.23838064],
           [-0.52323836, -0.55322337, -0.46326834,  ...,  0.33133450,
            -0.17841063, -0.35832080],
           [-0.64317840, -0.58320838, -0.22338814,  ...,  0.40629703,
            -0.20839565, -0.28335828],
           ...,
           [ 1.08095968, -0.31334329, -0.65817088,  ..., -0.35832080,
            -0.56821585, -0.38830581],
           [ 1.53073502,  0.60119957,  0.40629703,  ..., -0.26836565,
            -0.35832080, -0.22338814],
           [ 1.66566753,  1.26086998,  1.03598225,  ..., -0.31334329,
            -0.55322337, -0.52323836]]],


         [[[-1.24285710, -1.30634916, -1.09999990,  ...,  0.05873025,
            -0.46507925, -0.57619047],
           [-1.11587298, -1.16349196, -1.09999990,  ..., -0.24285704,
            -0.65555555, -0.79841268],
           [-1.19523799, -1.13174593, -0.84603173,  ..., -0.14761895,
            -0.84603173, -0.75079364],
           ...,
           [ 1.15396857, -0.57619047, -1.44920623,  ..., -0.70317459,
            -0.68730158, -0.48095238],
           [ 1.63015902,  0.58253974, -0.02063482,  ..., -0.86190474,
            -0.79841268, -0.43333322],
           [ 1.67777801,  1.39206374,  1.16984153,  ..., -1.03650784,
            -1.08412695, -0.89365077]],

          [[-1.11111104, -1.20772946, -1.01449275,  ...,  0.08051541,
            -0.53140092, -0.62801927],
           [-1.01449275, -1.06280184, -0.98228657,  ..., -0.22544271,
            -0.64412236, -0.77294683],
           [-1.11111104, -1.01449275, -0.72463763,  ..., -0.11272129,
            -0.77294683, -0.72463763],
           ...,
           [ 0.99838978, -0.66022539, -1.30434775,  ..., -0.78904986,
            -0.85346210, -0.66022539],
           [ 1.52979100,  0.43478271, -0.06441211,  ..., -0.80515295,
            -0.77294683, -0.57971013],
           [ 1.64251232,  1.27214205,  0.95008057,  ..., -0.93397743,
            -1.04669881, -0.96618354]],

          [[-0.55322337, -0.70314842, -0.55322337,  ...,  0.60119957,
            -0.17841063, -0.23838064],
           [-0.52323836, -0.55322337, -0.46326834,  ...,  0.33133450,
            -0.17841063, -0.35832080],
           [-0.64317840, -0.58320838, -0.22338814,  ...,  0.40629703,
            -0.20839565, -0.28335828],
           ...,
           [ 1.08095968, -0.31334329, -0.65817088,  ..., -0.35832080,
            -0.56821585, -0.38830581],
           [ 1.53073502,  0.60119957,  0.40629703,  ..., -0.26836565,
            -0.35832080, -0.22338814],
           [ 1.66566753,  1.26086998,  1.03598225,  ..., -0.31334329,
            -0.55322337, -0.52323836]]],


         [[[-1.24285710, -1.30634916, -1.09999990,  ...,  0.05873025,
            -0.46507925, -0.57619047],
           [-1.11587298, -1.16349196, -1.09999990,  ..., -0.24285704,
            -0.65555555, -0.79841268],
           [-1.19523799, -1.13174593, -0.84603173,  ..., -0.14761895,
            -0.84603173, -0.75079364],
           ...,
           [ 1.15396857, -0.57619047, -1.44920623,  ..., -0.70317459,
            -0.68730158, -0.48095238],
           [ 1.63015902,  0.58253974, -0.02063482,  ..., -0.86190474,
            -0.79841268, -0.43333322],
           [ 1.67777801,  1.39206374,  1.16984153,  ..., -1.03650784,
            -1.08412695, -0.89365077]],

          [[-1.11111104, -1.20772946, -1.01449275,  ...,  0.08051541,
            -0.53140092, -0.62801927],
           [-1.01449275, -1.06280184, -0.98228657,  ..., -0.22544271,
            -0.64412236, -0.77294683],
           [-1.11111104, -1.01449275, -0.72463763,  ..., -0.11272129,
            -0.77294683, -0.72463763],
           ...,
           [ 0.99838978, -0.66022539, -1.30434775,  ..., -0.78904986,
            -0.85346210, -0.66022539],
           [ 1.52979100,  0.43478271, -0.06441211,  ..., -0.80515295,
            -0.77294683, -0.57971013],
           [ 1.64251232,  1.27214205,  0.95008057,  ..., -0.93397743,
            -1.04669881, -0.96618354]],

          [[-0.55322337, -0.70314842, -0.55322337,  ...,  0.60119957,
            -0.17841063, -0.23838064],
           [-0.52323836, -0.55322337, -0.46326834,  ...,  0.33133450,
            -0.17841063, -0.35832080],
           [-0.64317840, -0.58320838, -0.22338814,  ...,  0.40629703,
            -0.20839565, -0.28335828],
           ...,
           [ 1.08095968, -0.31334329, -0.65817088,  ..., -0.35832080,
            -0.56821585, -0.38830581],
           [ 1.53073502,  0.60119957,  0.40629703,  ..., -0.26836565,
            -0.35832080, -0.22338814],
           [ 1.66566753,  1.26086998,  1.03598225,  ..., -0.31334329,
            -0.55322337, -0.52323836]]],


         [[[-1.24285710, -1.30634916, -1.09999990,  ...,  0.05873025,
            -0.46507925, -0.57619047],
           [-1.11587298, -1.16349196, -1.09999990,  ..., -0.24285704,
            -0.65555555, -0.79841268],
           [-1.19523799, -1.13174593, -0.84603173,  ..., -0.14761895,
            -0.84603173, -0.75079364],
           ...,
           [ 1.15396857, -0.57619047, -1.44920623,  ..., -0.70317459,
            -0.68730158, -0.48095238],
           [ 1.63015902,  0.58253974, -0.02063482,  ..., -0.86190474,
            -0.79841268, -0.43333322],
           [ 1.67777801,  1.39206374,  1.16984153,  ..., -1.03650784,
            -1.08412695, -0.89365077]],

          [[-1.11111104, -1.20772946, -1.01449275,  ...,  0.08051541,
            -0.53140092, -0.62801927],
           [-1.01449275, -1.06280184, -0.98228657,  ..., -0.22544271,
            -0.64412236, -0.77294683],
           [-1.11111104, -1.01449275, -0.72463763,  ..., -0.11272129,
            -0.77294683, -0.72463763],
           ...,
           [ 0.99838978, -0.66022539, -1.30434775,  ..., -0.78904986,
            -0.85346210, -0.66022539],
           [ 1.52979100,  0.43478271, -0.06441211,  ..., -0.80515295,
            -0.77294683, -0.57971013],
           [ 1.64251232,  1.27214205,  0.95008057,  ..., -0.93397743,
            -1.04669881, -0.96618354]],

          [[-0.55322337, -0.70314842, -0.55322337,  ...,  0.60119957,
            -0.17841063, -0.23838064],
           [-0.52323836, -0.55322337, -0.46326834,  ...,  0.33133450,
            -0.17841063, -0.35832080],
           [-0.64317840, -0.58320838, -0.22338814,  ...,  0.40629703,
            -0.20839565, -0.28335828],
           ...,
           [ 1.08095968, -0.31334329, -0.65817088,  ..., -0.35832080,
            -0.56821585, -0.38830581],
           [ 1.53073502,  0.60119957,  0.40629703,  ..., -0.26836565,
            -0.35832080, -0.22338814],
           [ 1.66566753,  1.26086998,  1.03598225,  ..., -0.31334329,
            -0.55322337, -0.52323836]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0779 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 138, vnnlib ID: 138 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.98990536, -11.53243732,  -9.55218792,  -9.34306908,  -9.59223843,
         -10.21041489,  -9.89879131, -10.73451996, -10.49936199,  -8.82808018]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [578]; unstable size 578; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 578] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 578] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 578] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 188] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 9.28027034e-01, -4.45046544e-01, -7.57262707e-01, -6.84045315e-01,
         -8.51631165e-04, -3.69360447e-01,  3.41859937e-01,  4.21400487e-01,
         -1.54338717e+00]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.98990536, -11.53243732,  -9.55218792,  -9.34306908,  -9.59223843,
         -10.21041489,  -9.89879131, -10.73451996, -10.49936199,  -8.82808018]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.98990536, -11.53243637,  -9.55218792,  -9.34306812,  -9.59223938,
          -10.21041393,  -9.89879227, -10.73451996, -10.49936199,  -8.82808018],
         [ -8.98990536, -11.53243637,  -9.55218792,  -9.34306812,  -9.59223938,
          -10.21041393,  -9.89879227, -10.73451996, -10.49936199,  -8.82808018]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.56228256,  0.35316277,  0.60233402,  1.22050858,  0.90888691,
          -0.16182518]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]],


         [[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]],


         [[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]],


         [[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]],


         [[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]],


         [[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0397 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 139, vnnlib ID: 139 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.46985912, -9.78631687, -3.83598518, -5.51694536, -3.54354000,
         -5.34781790, -2.52311063, -5.68112326, -9.51543331, -9.21476460]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [439]; unstable size 439; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 276, 1, 439] with unstable size 275 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 439] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 439] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [275]; unstable size 275; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 275] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 275] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.63732028,  4.43945503, -0.32903957,  1.63714933, -0.59455490,
          1.22534406,  1.17066228,  4.56741428,  4.21444464]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.46985912, -9.78631687, -3.83598518, -5.51694536, -3.54354000,
         -5.34781790, -2.52311063, -5.68112326, -9.51543331, -9.21476460]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.60it/s]100%|██████████| 1/1 [00:00<00:00,  7.59it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.29735327, -9.85738373, -3.74970722, -5.51526499, -3.18233013,
          -5.30744696, -2.97519660, -5.53918982, -9.34112263, -9.30058861],
         [-7.29735327, -9.85738373, -3.74970722, -5.51526499, -3.18233013,
          -5.30744696, -2.97519660, -5.53918982, -9.34112263, -9.30058861]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.77451062, 0.20713353]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1347 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.830379486083984
alpha/beta optimization time: 1.388157844543457
initial alpha-crown bounds: tensor([[ 2.76347518,  4.57243633, -0.24465704,  1.68950605, -0.50626183,
          1.28860629,  1.25143123,  4.69473362,  4.32111025]], device='cuda:0')
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.5062618255615234
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6435 seconds.
lower bounds for all target labels: [2.763475179672241, 4.572436332702637, -0.24465703964233398, 1.6895060539245605, -0.5062618255615234, 1.2886046171188354, 1.2514294385910034, 4.694733619689941, 4.321110248565674]
Number of cpus: 96  Number of subproblems: 2
Reassign each subproblems with number of thread: 48
Starting MIP solver for these labels: [2, 4]
start creating model mps for candidates: ['lay/16_2', 'lay/16_4']
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=4_26530858.mps
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=2_26530858.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=2_26530858.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=4_26530858.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 239990 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 239993 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.31424641609192
Verifying property 0 with 1 instances.
##### Instance 139 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.694733619689941.

Properties batch 1, size 1
Remaining timeout: 198.01697278022766
Verifying property 1 with 1 instances.
##### Instance 139 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.572436332702637.

Properties batch 2, size 1
Remaining timeout: 197.90746903419495
Verifying property 2 with 1 instances.
##### Instance 139 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.321110248565674.

Properties batch 3, size 1
Remaining timeout: 197.8146674633026
Verifying property 3 with 1 instances.
##### Instance 139 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.763475179672241.

Properties batch 4, size 1
Remaining timeout: 197.71067476272583
Verifying property 4 with 1 instances.
##### Instance 139 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.6895060539245605.

Properties batch 5, size 1
Remaining timeout: 197.61738896369934
Verifying property 5 with 1 instances.
##### Instance 139 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.2886062860488892.

Properties batch 6, size 1
Remaining timeout: 197.52638483047485
Verifying property 6 with 1 instances.
##### Instance 139 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  1., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.2514312267303467.

Properties batch 7, size 1
Remaining timeout: 197.43447256088257
Verifying property 7 with 1 instances.
##### Instance 139 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.24465704]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.46985912, -9.78631687, -3.83598518, -5.51694536, -3.54354000,
        -5.34781790, -2.52311063, -5.68112326, -9.51543331, -9.21476460],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.24465704]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 439
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 269
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 731
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0005970001220703125
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0599    transfer 0.0001    finalize 0.0002    func 0.0604    
Accumulated time: func 0.0604    prepare 0.0002    bound 0.0599    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 38] 
split level 2: [/input-12, 10] 
split level 3: [/input-12, 60] 
split level 4: [/input-12, 51] 
split level 5: [/input-12, 26] 
split level 6: [/input-12, 1] 
split level 7: [/input-12, 17] 
split level 8: [/input-12, 25] 
split level 9: [/input-12, 92] 
split level 10: [/input-12, 68] 
split level 11: [/input-8, 850] 
split level 12: [/input-12, 33] 
split level 13: [/input-8, 1828] 
split level 14: [/input-8, 923] 
split level 15: [/input-8, 932] 
split level 16: [/input-8, 88] 
split level 17: [/input-8, 95] 
split level 18: [/input-8, 859] 
split level 19: [/input-8, 1902] 
split level 20: [/input-8, 809] 
split level 21: [/input-8, 85] 
split level 22: [/input-8, 867] 
split level 23: [/input-8, 1370] 
split level 24: [/input-8, 1427] 
split level 25: [/input-8, 666] 
split level 26: [/input-8, 1362] 
split level 27: [/input-8, 674] 
split level 28: [/input-8, 988] 
split level 29: [/input-8, 292] 
split level 30: [/input-8, 1497] 
split level 31: [/input-8, 933] 
split level 32: [/input-8, 291] 
split level 33: [/input-8, 1357] 
split level 34: [/input-8, 985] 
split level 35: [/input-8, 485] 
split level 36: [/input-8, 682] 
split level 37: [/input-8, 1829] 
split level 38: [/input-8, 858] 
split level 39: [/input-8, 522] 
split level 40: [/input-8, 491] 
split level 41: [/input-8, 1364] 
split level 42: [/input-8, 660] 
split level 43: [/input-8, 1307] 
split level 44: [/input-8, 80] 
split level 45: [/input-8, 531] 
split level 46: [/input-8, 1373] 
split level 47: [/input-8, 542] 
split level 48: [/input-8, 1019] 
split level 49: [/input-8, 1021] 
split level 50: [/input-8, 989] 
split level 51: [/input-8, 994] 
split level 52: [/input-8, 1894] 
split level 53: [/input-8, 1306] 
split level 54: [/input-8, 2008] 
split level 55: [/input-8, 1876] 
split level 56: [/input-8, 1873] 
split level 57: [/input-8, 541] 
split level 58: [/input-8, 1910] 
split level 59: [/input-8, 1426] 
split level 60: [/input-8, 1428] 
split level 61: [/input, 1674] 
split level 62: [/input-8, 427] 
split level 63: [/input-8, 66] 
split level 64: [/input-8, 110] 
split level 65: [/input-8, 1429] 
split level 66: [/input-8, 1886] 
split level 67: [/input-8, 1486] 
split level 68: [/input-8, 1495] 
split level 69: [/input-8, 530] 
split level 70: [/input-8, 817] 
split level 71: [/input-8, 89] 
split level 72: [/input-8, 972] 
split level 73: [/input-8, 1515] 
split level 74: [/input-8, 1420] 
split level 75: [/input-8, 918] 
split level 76: [/input-8, 1012] 
split level 77: [/input-8, 1301] 
split level 78: [/input-8, 307] 
split level 79: [/input-8, 1874] 
split level 80: [/input-8, 1291] 
split level 81: [/input-8, 1433] 
split level 82: [/input, 1603] 
split level 83: [/input-8, 1498] 
split level 84: [/input-8, 841] 
split level 85: [/input, 1671] 
split level 86: [/input-8, 1421] 
split level 87: [/input-8, 1506] 
split level 88: [/input-8, 1437] 
split level 89: [/input-8, 1885] 
split level 90: [/input-8, 973] 
split level 91: [/input-8, 1142] 
split level 92: [/input-8, 893] 
split level 93: [/input-8, 1869] 
split level 94: [/input-8, 1425] 
split level 95: [/input-8, 981] 
split level 96: [/input-8, 658] 
split level 97: [/input-8, 297] 
split level 98: [/input-8, 1139] 
split level 99: [/input, 1637] 
split level 100: [/input-8, 849] 
split level 101: [/input-8, 942] 
split level 102: [/input-8, 637] 
split level 103: [/input-8, 1011] 
split level 104: [/input, 482] 
split level 105: [/input-8, 1081] 
split level 106: [/input-8, 73] 
split level 107: [/input-8, 2024] 
split level 108: [/input-8, 953] 
split level 109: [/input-8, 1860] 
split level 110: [/input-8, 1911] 
split level 111: [/input-8, 565] 
split level 112: [/input-8, 1811] 
split level 113: [/input-8, 111] 
split level 114: [/input-8, 1417] 
split level 115: [/input-8, 916] 
split level 116: [/input-8, 65] 
split level 117: [/input, 1705] 
split level 118: [/input-8, 127] 
split level 119: [/input-8, 1352] 
split level 120: [/input-8, 1861] 
split level 121: [/input-8, 635] 
split level 122: [/input-8, 945] 
split level 123: [/input, 1669] 
split level 124: [/input-8, 1867] 
split level 125: [/input, 2169] 
split level 126: [/input-8, 495] 
split level 127: [/input-8, 2009] 
split level 128: [/input, 1721] 
split level 129: [/input-8, 1865] 
split level 130: [/input-8, 494] 
split level 131: [/input, 1641] 
split level 132: [/input-8, 471] 
split level 133: [/input-8, 436] 
split level 134: [/input, 1654] 
split level 135: [/input-8, 116] 
split level 136: [/input-8, 2000] 
split level 137: [/input, 2698] 
split level 138: [/input-8, 470] 
split level 139: [/input, 2291] 
split level 140: [/input-8, 2033] 
split level 141: [/input-8, 1302] 
split level 142: [/input-8, 559] 
split level 143: [/input-8, 936] 
split level 144: [/input-8, 1940] 
split level 145: [/input, 1602] 
split level 146: [/input, 2116] 
split level 147: [/input-8, 1533] 
split level 148: [/input-8, 1039] 
split level 149: [/input-8, 1881] 
split level 150: [/input-8, 1360] 
split level 151: [/input, 570] 
split level 152: [/input-8, 786] 
split level 153: [/input, 2115] 
split level 154: [/input, 2168] 
split level 155: [/input-8, 943] 
split level 156: [/input-8, 2032] 
split level 157: [/input-8, 699] 
split level 158: [/input, 2185] 
split level 159: [/input-8, 1787] 
split level 160: [/input-8, 1490] 
split level 161: [/input-8, 1788] 
split level 162: [/input-8, 1947] 
split level 163: [/input-8, 281] 
split level 164: [/input-8, 415] 
split level 165: [/input, 2699] 
split level 166: [/input, 2343] 
split level 167: [/input-8, 885] 
split level 168: [/input-8, 1465] 
split level 169: [/input, 676] 
split level 170: [/input-8, 1530] 
split level 171: [/input-8, 1120] 
split level 172: [/input-8, 905] 
split level 173: [/input-8, 1440] 
split level 174: [/input-8, 122] 
split level 175: [/input-8, 574] 
split level 176: [/input-8, 1350] 
split level 177: [/input, 293] 
split level 178: [/input, 1524] 
split level 179: [/input-8, 949] 
split level 180: [/input, 95] 
split level 181: [/input, 2345] 
split level 182: [/input-8, 1232] 
split level 183: [/input-8, 1872] 
split level 184: [/input, 2592] 
split level 185: [/input-8, 1448] 
split level 186: [/input-8, 1975] 
split level 187: [/input, 2700] 
split level 188: [/input, 2613] 
split level 189: [/input-8, 426] 
split level 190: [/input, 4] 
split level 191: [/input, 2260] 
split level 192: [/input, 1352] 
split level 193: [/input, 4049] 
split level 194: [/input-8, 961] 
split level 195: [/input, 647] 
split level 196: [/input-8, 1812] 
split level 197: [/input, 11] 
split level 198: [/input, 2359] 
split level 199: [/input, 3841] 
Time: prepare 0.0060    bound 0.1111    transfer 0.0070    finalize 0.0044    func 0.1286    
Accumulated time: func 0.1890    prepare 0.0164    bound 0.1710    transfer 0.0071    finalize 0.0046    
all_split False
======================Cut inference begins======================
max lb tensor(0.41849852) min lb tensor(-0.24461031)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.01347970962524414 
BICCOS Cumulative time: 0.01347970962524414
Preprocessing time: 0.012065649032592773 Inference time: 0.00029015541076660156 Add cuts time: 0.00010347366333007812 Cut analysis time: 0.0010204315185546875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22439 (1), -0.22387 (1), -0.22345 (1), -0.22296 (1), -0.22291 (1), -0.22271 (1), -0.22150 (1), -0.22143 (1), -0.22069 (1), -0.22037 (1), -0.22016 (1), -0.21998 (1), -0.21990 (1), -0.21947 (1), -0.21886 (1), -0.21815 (1), -0.21752 (1), -0.21725 (1), -0.21681 (1), -0.21676 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5535    set_bounds 0.0123    solve 0.1287    add 0.2146    
Accumulated time: pickout 0.0004    decision 0.5535    set_bounds 0.0123    solve 0.1287    add 0.2146    
Current (lb-rhs): -0.22439241409301758
50 domains visited
Cumulative time: 1.010300874710083

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 51] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 51] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 1] [/input-12, 51] [/input-12, 1] [/input-12, 51] [/input-12, 51] [/input-12, 1] [/input-12, 1] [/input-12, 51] [/input-12, 51] [/input-12, 51] 
split level 2: [/input-12, 17] [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 1] 
split level 3: [/input-12, 92] [/input-12, 17] [/input-12, 92] [/input-12, 92] [/input-12, 17] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 17] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18611621856689453
10 lb beta sum: 0.7892306447029114, worst -0.13307738304138184
Time: prepare 0.0074    bound 0.1407    transfer 0.0008    finalize 0.0036    func 0.1555    
Accumulated time: func 0.3445    prepare 0.0241    bound 0.3117    transfer 0.0078    finalize 0.0082    
all_split False
======================Cut inference begins======================
max lb tensor(0.18590832) min lb tensor(-0.13278645)
Number of Verified Splits: 218 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.026922941207885742 
BICCOS Cumulative time: 0.04040265083312988
Preprocessing time: 0.013184785842895508 Inference time: 0.009283065795898438 Add cuts time: 0.004071712493896484 Cut analysis time: 0.0003833770751953125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0088    decision 0.0216    set_bounds 0.0130    solve 0.1556    add 0.0159    
Accumulated time: pickout 0.0092    decision 0.5751    set_bounds 0.0253    solve 0.2843    add 0.2305    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 51]), tensor([-1., -1.]), tensor([0, 0]), tensor([3.30031101e+32, 1.56262204e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 51]), tensor([-1.,  1.]), tensor([0, 0]), tensor([3.30031101e+32, 2.12775275e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 51]), tensor([ 1., -1.]), tensor([0, 0]), tensor([3.30031101e+32, 1.68939158e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 51]), tensor([1., 1.]), tensor([0, 0]), tensor([3.30031101e+32, 1.94099471e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.06447410583496094

all verified at 0th iter
Time: prepare 0.0004    bound 0.0046    transfer 0.0002    finalize 0.0002    func 0.0055    
Accumulated time: func 0.3499    prepare 0.0245    bound 0.3163    transfer 0.0080    finalize 0.0083    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 195.97479939460754
Verifying property 8 with 1 instances.
##### Instance 139 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.50626183]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.46985912, -9.78631687, -3.83598518, -5.51694536, -3.54354000,
        -5.34781790, -2.52311063, -5.68112326, -9.51543331, -9.21476460],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.50626183]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 439
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 269
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 731
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.00018334388732910156
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0571    transfer 0.0001    finalize 0.0001    func 0.0575    
Accumulated time: func 0.0575    prepare 0.0002    bound 0.0571    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 60] 
split level 1: [/input-12, 51] 
split level 2: [/input-12, 41] 
split level 3: [/input-12, 92] 
split level 4: [/input-12, 38] 
split level 5: [/input-12, 1] 
split level 6: [/input-12, 26] 
split level 7: [/input-12, 17] 
split level 8: [/input-12, 54] 
split level 9: [/input-12, 46] 
split level 10: [/input-12, 33] 
split level 11: [/input-12, 10] 
split level 12: [/input-8, 850] 
split level 13: [/input-8, 88] 
split level 14: [/input-8, 1427] 
split level 15: [/input-8, 95] 
split level 16: [/input-8, 923] 
split level 17: [/input-8, 932] 
split level 18: [/input-8, 859] 
split level 19: [/input-8, 292] 
split level 20: [/input-8, 988] 
split level 21: [/input-8, 660] 
split level 22: [/input-12, 68] 
split level 23: [/input-8, 289] 
split level 24: [/input-8, 867] 
split level 25: [/input-8, 809] 
split level 26: [/input-8, 1420] 
split level 27: [/input-8, 989] 
split level 28: [/input, 1603] 
split level 29: [/input-8, 858] 
split level 30: [/input-8, 1873] 
split level 31: [/input-12, 40] 
split level 32: [/input-8, 291] 
split level 33: [/input-8, 434] 
split level 34: [/input-8, 933] 
split level 35: [/input-8, 1828] 
split level 36: [/input-8, 1428] 
split level 37: [/input-8, 2008] 
split level 38: [/input, 1637] 
split level 39: [/input-8, 80] 
split level 40: [/input-8, 994] 
split level 41: [/input-8, 1437] 
split level 42: [/input-8, 297] 
split level 43: [/input-8, 972] 
split level 44: [/input-8, 981] 
split level 45: [/input-8, 307] 
split level 46: [/input, 1669] 
split level 47: [/input-8, 485] 
split level 48: [/input, 1674] 
split level 49: [/input-8, 1426] 
split level 50: [/input-8, 1005] 
split level 51: [/input-8, 985] 
split level 52: [/input-8, 1865] 
split level 53: [/input-8, 85] 
split level 54: [/input-8, 973] 
split level 55: [/input-8, 1497] 
split level 56: [/input-8, 1421] 
split level 57: [/input-8, 817] 
split level 58: [/input-8, 1429] 
split level 59: [/input-8, 302] 
split level 60: [/input-8, 1011] 
split level 61: [/input-8, 1829] 
split level 62: [/input-8, 1874] 
split level 63: [/input, 1654] 
split level 64: [/input-8, 436] 
split level 65: [/input-8, 849] 
split level 66: [/input-8, 2024] 
split level 67: [/input-8, 427] 
split level 68: [/input-8, 841] 
split level 69: [/input-8, 470] 
split level 70: [/input-8, 471] 
split level 71: [/input-8, 110] 
split level 72: [/input-8, 89] 
split level 73: [/input, 1671] 
split level 74: [/input-8, 522] 
split level 75: [/input-8, 1012] 
split level 76: [/input-8, 1142] 
split level 77: [/input-8, 281] 
split level 78: [/input-8, 674] 
split level 79: [/input-8, 293] 
split level 80: [/input-8, 1947] 
split level 81: [/input-8, 1019] 
split level 82: [/input-8, 565] 
split level 83: [/input-8, 1139] 
split level 84: [/input-8, 1486] 
split level 85: [/input, 1705] 
split level 86: [/input, 1721] 
split level 87: [/input-8, 116] 
split level 88: [/input-8, 1454] 
split level 89: [/input-8, 491] 
split level 90: [/input-8, 942] 
split level 91: [/input-8, 426] 
split level 92: [/input-8, 1857] 
split level 93: [/input-8, 1495] 
split level 94: [/input-8, 1425] 
split level 95: [/input, 2693] 
split level 96: [/input-8, 2000] 
split level 97: [/input-8, 415] 
split level 98: [/input-8, 1413] 
split level 99: [/input-8, 531] 
split level 100: [/input, 1556] 
split level 101: [/input, 2168] 
split level 102: [/input-8, 786] 
split level 103: [/input-8, 936] 
split level 104: [/input-8, 438] 
split level 105: [/input-8, 530] 
split level 106: [/input, 1767] 
split level 107: [/input, 2085] 
split level 108: [/input, 2613] 
split level 109: [/input-8, 1433] 
split level 110: [/input-8, 1452] 
split level 111: [/input-8, 997] 
split level 112: [/input-8, 916] 
split level 113: [/input, 2115] 
split level 114: [/input, 1641] 
split level 115: [/input, 2152] 
split level 116: [/input-8, 66] 
split level 117: [/input-8, 111] 
split level 118: [/input, 1734] 
split level 119: [/input, 2698] 
split level 120: [/input-8, 445] 
split level 121: [/input, 174] 
split level 122: [/input-8, 1417] 
split level 123: [/input, 2116] 
split level 124: [/input-8, 457] 
split level 125: [/input, 1735] 
split level 126: [/input, 300] 
split level 127: [/input-8, 65] 
split level 128: [/input, 482] 
split level 129: [/input, 2069] 
split level 130: [/input-8, 1533] 
split level 131: [/input, 1589] 
split level 132: [/input-8, 494] 
split level 133: [/input, 3862] 
split level 134: [/input-8, 495] 
split level 135: [/input-8, 1133] 
split level 136: [/input-8, 2033] 
split level 137: [/input, 2185] 
split level 138: [/input, 1718] 
split level 139: [/input-8, 1232] 
split level 140: [/input, 2150] 
split level 141: [/input, 2133] 
split level 142: [/input-8, 2032] 
split level 143: [/input-8, 1856] 
split level 144: [/input, 1602] 
split level 145: [/input-8, 1864] 
split level 146: [/input-8, 834] 
split level 147: [/input, 2291] 
split level 148: [/input-8, 1498] 
split level 149: [/input, 1100] 
split level 150: [/input-8, 1530] 
split level 151: [/input, 1765] 
split level 152: [/input-8, 1975] 
split level 153: [/input-8, 430] 
split level 154: [/input, 2090] 
split level 155: [/input-8, 1872] 
split level 156: [/input, 2699] 
split level 157: [/input-8, 1409] 
split level 158: [/input-8, 949] 
split level 159: [/input, 3861] 
split level 160: [/input-8, 2009] 
split level 161: [/input, 2108] 
split level 162: [/input, 2088] 
split level 163: [/input, 2592] 
split level 164: [/input, 2260] 
split level 165: [/input, 3892] 
split level 166: [/input, 282] 
split level 167: [/input, 3878] 
split level 168: [/input, 1352] 
split level 169: [/input-8, 635] 
split level 170: [/input, 46] 
split level 171: [/input, 3869] 
split level 172: [/input, 2101] 
split level 173: [/input-8, 1360] 
split level 174: [/input-8, 1787] 
split level 175: [/input-8, 73] 
split level 176: [/input, 4049] 
split level 177: [/input, 1524] 
split level 178: [/input-8, 1352] 
split level 179: [/input-8, 1490] 
split level 180: [/input, 1754] 
split level 181: [/input, 2182] 
split level 182: [/input, 1513] 
split level 183: [/input, 676] 
split level 184: [/input-8, 1120] 
split level 185: [/input, 1452] 
split level 186: [/input, 3357] 
split level 187: [/input-8, 1291] 
split level 188: [/input, 3448] 
split level 189: [/input, 3867] 
split level 190: [/input, 2203] 
split level 191: [/input, 2107] 
split level 192: [/input-8, 1008] 
split level 193: [/input, 647] 
split level 194: [/input, 2188] 
split level 195: [/input, 3560] 
split level 196: [/input, 3021] 
split level 197: [/input, 3386] 
split level 198: [/input, 1455] 
split level 199: [/input-8, 1839] 
Time: prepare 0.0059    bound 0.1812    transfer 0.0021    finalize 0.0115    func 0.2009    
Accumulated time: func 0.2584    prepare 0.0162    bound 0.2383    transfer 0.0022    finalize 0.0116    
all_split False
======================Cut inference begins======================
max lb tensor(0.40367508) min lb tensor(-0.50617027)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.017813920974731445 
BICCOS Cumulative time: 0.017813920974731445
Preprocessing time: 0.015608549118041992 Inference time: 0.0011887550354003906 Add cuts time: 0.00011658668518066406 Cut analysis time: 0.0009000301361083984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.48849 (1), -0.48792 (1), -0.48754 (1), -0.48726 (1), -0.48583 (1), -0.48515 (1), -0.48433 (1), -0.48392 (1), -0.48386 (1), -0.48346 (1), -0.48335 (1), -0.48328 (1), -0.48165 (1), -0.48136 (1), -0.48094 (1), -0.48011 (1), -0.47983 (1), -0.47808 (1), -0.47807 (1), -0.47700 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5452    set_bounds 0.0094    solve 0.2011    add 0.1980    
Accumulated time: pickout 0.0003    decision 0.5452    set_bounds 0.0094    solve 0.2011    add 0.1980    
Current (lb-rhs): -0.4884915351867676
50 domains visited
Cumulative time: 1.0433061122894287

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 41] [/input-12, 41] [/input-12, 51] [/input-12, 51] [/input-12, 51] 
split level 1: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 92] [/input-12, 41] [/input-12, 92] [/input-12, 92] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 3: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.444272518157959
10 lb beta sum: 0.580084502696991, worst -0.4315522313117981
Time: prepare 0.0071    bound 0.1408    transfer 0.0028    finalize 0.0030    func 0.1564    
Accumulated time: func 0.4149    prepare 0.0236    bound 0.3791    transfer 0.0050    finalize 0.0146    
all_split False
======================Cut inference begins======================
max lb tensor(0.06436819) min lb tensor(-0.43132171)
Number of Verified Splits: 12 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=4_26530858.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0022
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.016988277435302734 
BICCOS Cumulative time: 0.03480219841003418
Preprocessing time: 0.013583898544311523 Inference time: 0.0006041526794433594 Add cuts time: 0.0002551078796386719 Cut analysis time: 0.0025451183319091797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23470 (2), -0.23435 (2), -0.23302 (2), -0.23191 (2), -0.23077 (2), -0.22997 (2), -0.22991 (2), -0.22731 (2), -0.22637 (2), -0.22625 (2), -0.22572 (2), -0.22556 (2), -0.22311 (2), -0.22236 (2), -0.22209 (2), -0.22113 (2), -0.21566 (2), -0.21550 (2), -0.21354 (2), -0.20684 (2), 
Length of domains: 50
Time: pickout 0.0017    decision 0.0234    set_bounds 0.0163    solve 0.1565    add 0.2350    
Accumulated time: pickout 0.0021    decision 0.5685    set_bounds 0.0257    solve 0.3576    add 0.4330    
Current (lb-rhs): -0.23469847440719604
100 domains visited
Cumulative time: 1.5005707740783691

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 51] [/input-12, 41] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 41] [/input-12, 92] 
split level 1: [/input-12, 92] [/input-12, 92] [/input-12, 41] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 92] [/input-12, 1] 
split level 2: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 17] 
split level 3: [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 17] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2227463722229004
10 lb beta sum: 0.9273459911346436, worst -0.20668578147888184
Time: prepare 0.0064    bound 0.1359    transfer 0.0008    finalize 0.0026    func 0.1483    
Accumulated time: func 0.5632    prepare 0.0303    bound 0.5149    transfer 0.0057    finalize 0.0172    
all_split False
======================Cut inference begins======================
max lb tensor(0.14580727) min lb tensor(-0.19941115)
Number of Verified Splits: 61 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=4_26530858.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0016
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.018704652786254883 
BICCOS Cumulative time: 0.05350685119628906
Preprocessing time: 0.012712955474853516 Inference time: 0.003121614456176758 Add cuts time: 0.0008051395416259766 Cut analysis time: 0.002064943313598633
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04815 (3), -0.04722 (3), -0.04629 (3), -0.04446 (3), -0.04413 (3), -0.04390 (3), -0.04357 (3), -0.04349 (3), -0.04334 (3), -0.04209 (3), -0.04107 (3), -0.04066 (3), -0.03809 (3), -0.03803 (3), -0.03509 (3), -0.03502 (3), -0.03434 (3), -0.03413 (3), -0.03267 (3), -0.03225 (3), 
Length of domains: 50
Time: pickout 0.0082    decision 0.0203    set_bounds 0.0163    solve 0.1484    add 0.2420    
Accumulated time: pickout 0.0103    decision 0.5888    set_bounds 0.0420    solve 0.5060    add 0.6750    
Current (lb-rhs): -0.048146963119506836
150 domains visited
Cumulative time: 1.9620513916015625

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 1: [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 17] [/input-12, 46] [/input-12, 46] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 46] [/input-12, 46] [/input-12, 17] [/input-12, 17] 
split level 3: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 46] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05287599563598633
10 lb beta sum: 0.7248145341873169, worst -0.03690314292907715
Time: prepare 0.0063    bound 0.1379    transfer 0.0008    finalize 0.0023    func 0.1499    
Accumulated time: func 0.7131    prepare 0.0369    bound 0.6528    transfer 0.0065    finalize 0.0195    
all_split False
======================Cut inference begins======================
max lb tensor(0.29559505) min lb tensor(-0.00389934)
Number of Verified Splits: 398 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=4_26530858.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 13
#cuts 4-6: 13
#cuts >= 20: 0
BICCOS time: 0.04318404197692871 
BICCOS Cumulative time: 0.09669089317321777
Preprocessing time: 0.012751102447509766 Inference time: 0.021806955337524414 Add cuts time: 0.0066220760345458984 Cut analysis time: 0.002003908157348633
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0048    decision 0.0213    set_bounds 0.0167    solve 0.1501    add 0.0284    
Accumulated time: pickout 0.0151    decision 0.6102    set_bounds 0.0586    solve 0.6561    add 0.7033    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51]), tensor([-1., -1.]), tensor([0, 0]), tensor([3.65569242e-11, 1.29912302e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51]), tensor([-1.,  1.]), tensor([0, 0]), tensor([3.65569242e-11, 1.85313687e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51,  1]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([3.65569242e-11, 1.48649141e-01, 5.45005053e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51,  1, 92]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.65569242e-11, 1.48649141e-01, 1.35760292e-01, 1.36168227e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51,  1, 92]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.65569242e-11, 1.48649141e-01, 1.35760292e-01, 5.62641472e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51, 92]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([3.65569242e-11, 1.67332098e-01, 1.41799137e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51, 92,  1]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.65569242e-11, 1.67332098e-01, 9.29226130e-02, 5.78585118e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51, 92,  1]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([3.65569242e-11, 1.67332098e-01, 9.29226130e-02, 6.04498833e-02]), tensor([0, 1, 2, 3]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.32529211044311523
10 lb beta sum: 2.1049890518188477, worst -0.30181771516799927
Time: prepare 0.0005    bound 0.1526    transfer 0.0003    finalize 0.0002    func 0.1537    
Accumulated time: func 0.8667    prepare 0.0373    bound 0.8054    transfer 0.0068    finalize 0.0197    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] 
split level 1: [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 26] [/input-12, 26] 
split level 3: [/input-12, 17] [/input-12, 17] 
split level 4: [/input-12, 46] [/input-12, 33] 
split level 5: [/input-12, 33] [/input-12, 46] 
split level 6: [/input-12, 10] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 1.317944049835205, worst -0.08894562721252441
10 lb beta sum: 1.3190902471542358, worst -0.08775210380554199
Time: prepare 0.0102    bound 0.1542    transfer 0.0048    finalize 0.0019    func 0.1729    
Accumulated time: func 1.0396    prepare 0.0479    bound 0.9596    transfer 0.0116    finalize 0.0217    
all_split False
======================Cut inference begins======================
max lb tensor(0.34541631) min lb tensor(-0.08725953)
Number of Verified Splits: 246 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.320529818534851, worst -0.3950435519218445
10 lb beta sum: 1.6315943002700806, worst -0.27335816621780396
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=4_26530858.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 53.
#cuts 1-3: 13
#cuts 4-6: 33
#cuts 7-9: 7
#cuts >= 20: 0
BICCOS time: 0.4762587547302246 
BICCOS Cumulative time: 0.5729496479034424
Preprocessing time: 0.007237911224365234 Inference time: 0.45610547065734863 Add cuts time: 0.009937047958374023 Cut analysis time: 0.0029783248901367188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08726 (7), -0.07200 (7), -0.03899 (7), -0.03201 (7), -0.02979 (7), -0.02331 (7), -0.01331 (7), -0.01068 (7), -0.00672 (7), -0.00424 (7), 
Length of domains: 10
Time: pickout 0.0006    decision 0.0208    set_bounds 0.0197    solve 0.1730    add 0.0443    
Accumulated time: pickout 0.0157    decision 0.6310    set_bounds 0.0784    solve 0.8291    add 0.7476    
Current (lb-rhs): -0.08725953102111816
160 domains visited
Cumulative time: 3.2152862548828125

BaB round 2
batch: 10
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
split level 1: [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] 
split level 2: [/input-8, 859] [/input-8, 988] [/input-8, 859] [/input-8, 859] [/input-8, 859] [/input-8, 859] [/input-8, 988] [/input-8, 859] [/input-8, 859] [/input-8, 859] 
split level 3: [/input-8, 867] [/input-8, 859] [/input-8, 291] [/input-8, 291] [/input-8, 291] [/input-8, 988] [/input-8, 859] [/input-8, 291] [/input-8, 291] [/input-8, 291] 
split level 4: [/input-8, 858] [/input-8, 291] [/input-8, 858] [/input-8, 858] [/input-8, 427] [/input-8, 858] [/input-8, 291] [/input-8, 858] [/input-8, 858] [/input-8, 281] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06752157211303711
10 lb beta sum: 0.0431610532104969, worst -0.06465816497802734
Time: prepare 0.0063    bound 0.1518    transfer 0.0066    finalize 0.0022    func 0.1691    
Accumulated time: func 1.2087    prepare 0.0545    bound 1.1114    transfer 0.0182    finalize 0.0239    
all_split False
======================Cut inference begins======================
max lb tensor(0.36717653) min lb tensor(-0.06448460)
Number of Verified Splits: 291 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2886061668395996
10 lb beta sum: 0.721907377243042, worst -0.2724626660346985
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=4_26530858.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 64.
#cuts 1-3: 13
#cuts 4-6: 33
#cuts 7-9: 14
#cuts 10-12: 4
#cuts >= 20: 0
BICCOS time: 0.38960886001586914 
BICCOS Cumulative time: 0.9625585079193115
Preprocessing time: 0.009609222412109375 Inference time: 0.36244821548461914 Add cuts time: 0.013948202133178711 Cut analysis time: 0.003603219985961914
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06448 (12), -0.06180 (12), -0.05758 (12), -0.05613 (12), -0.05462 (12), -0.05102 (12), -0.05003 (12), -0.04844 (12), -0.04719 (12), -0.04606 (12), -0.04193 (12), -0.04159 (12), -0.04014 (12), -0.03833 (12), -0.03563 (12), -0.03331 (12), -0.01188 (12), -0.01088 (12), -0.00966 (12), -0.00853 (12), 
Length of domains: 29
Time: pickout 0.0012    decision 0.0173    set_bounds 0.0262    solve 0.1692    add 0.0484    
Accumulated time: pickout 0.0169    decision 0.6483    set_bounds 0.1046    solve 0.9983    add 0.7960    
Current (lb-rhs): -0.0644845962524414
189 domains visited
Cumulative time: 3.8768904209136963

BaB round 3
batch: 29
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 809] [/input-8, 809] [/input-8, 988] [/input-8, 809] [/input-8, 809] [/input-8, 988] [/input-8, 809] [/input-8, 809] [/input-8, 988] [/input-8, 809] 
split level 1: [/input-8, 994] [/input-8, 858] [/input-8, 1873] [/input-8, 994] [/input-8, 994] [/input-8, 1873] [/input-8, 994] [/input-8, 994] [/input-8, 1873] [/input-8, 994] 
split level 2: [/input-8, 858] [/input-8, 994] [/input-12, 40] [/input-8, 858] [/input-8, 858] [/input-12, 40] [/input-8, 858] [/input-8, 858] [/input-12, 40] [/input-8, 858] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05118846893310547
10 lb beta sum: 0.21771880984306335, worst -0.04849529266357422
Time: prepare 0.0048    bound 0.1564    transfer 0.0050    finalize 0.0019    func 0.1696    
Accumulated time: func 1.3784    prepare 0.0595    bound 1.2678    transfer 0.0231    finalize 0.0258    
all_split False
======================Cut inference begins======================
max lb tensor(0.02909231) min lb tensor(-0.04841518)
Number of Verified Splits: 152 of 232
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=4_26530858.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 16
#cuts 4-6: 14
#cuts 7-9: 3
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.03576540946960449 
BICCOS Cumulative time: 0.998323917388916
Preprocessing time: 0.00938868522644043 Inference time: 0.019715547561645508 Add cuts time: 0.004269123077392578 Cut analysis time: 0.0023920536041259766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04842 (15), -0.04576 (15), -0.04570 (15), -0.04458 (15), -0.04212 (15), -0.04168 (15), -0.04166 (15), -0.04115 (15), -0.04043 (15), -0.03865 (15), -0.03797 (15), -0.03756 (15), -0.03725 (15), -0.03636 (15), -0.03628 (15), -0.03617 (15), -0.03432 (15), -0.03422 (15), -0.03366 (15), -0.03319 (15), 
Length of domains: 80
Time: pickout 0.0021    decision 0.0160    set_bounds 0.0164    solve 0.1697    add 0.0789    
Accumulated time: pickout 0.0190    decision 0.6642    set_bounds 0.1209    solve 1.1680    add 0.8749    
Current (lb-rhs): -0.048415184020996094
269 domains visited
Cumulative time: 4.207597017288208

BaB round 4
batch: 80
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] 
split level 1: [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.040911197662353516
10 lb beta sum: 0.31019264459609985, worst -0.03813791275024414
Time: prepare 0.0067    bound 0.1567    transfer 0.0021    finalize 0.0020    func 0.1697    
Accumulated time: func 1.5480    prepare 0.0665    bound 1.4244    transfer 0.0252    finalize 0.0278    
all_split False
======================Cut inference begins======================
max lb tensor(0.02789545) min lb tensor(-0.03804159)
Number of Verified Splits: 184 of 320
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=4_26530858.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 51.
#cuts 1-3: 15
#cuts 4-6: 31
#cuts 7-9: 3
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.0453343391418457 
BICCOS Cumulative time: 1.0436582565307617
Preprocessing time: 0.010438919067382812 Inference time: 0.026604413986206055 Add cuts time: 0.005242586135864258 Cut analysis time: 0.003048419952392578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03804 (17), -0.03541 (17), -0.03513 (17), -0.03425 (17), -0.03147 (17), -0.03136 (17), -0.03135 (17), -0.03042 (17), -0.03016 (17), -0.02818 (17), -0.02757 (17), -0.02700 (17), -0.02688 (17), -0.02598 (17), -0.02590 (17), -0.02556 (17), -0.02398 (17), -0.02387 (17), -0.02372 (17), -0.02332 (17), 
Length of domains: 136
Time: pickout 0.0131    decision 0.0166    set_bounds 0.0243    solve 0.1698    add 0.0787    
Accumulated time: pickout 0.0321    decision 0.6808    set_bounds 0.1453    solve 1.3377    add 0.9537    
Current (lb-rhs): -0.03804159164428711
405 domains visited
Cumulative time: 4.5639259815216064

BaB round 5
batch: 136
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 867] [/input-8, 867] [/input-8, 1428] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 1428] [/input-8, 1428] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.035848140716552734
10 lb beta sum: 0.3074636459350586, worst -0.03321075439453125
Time: prepare 0.0056    bound 0.1546    transfer 0.0016    finalize 0.0016    func 0.1652    
Accumulated time: func 1.7132    prepare 0.0723    bound 1.5790    transfer 0.0268    finalize 0.0294    
all_split False
======================Cut inference begins======================
max lb tensor(0.01716617) min lb tensor(-0.03314638)
Number of Verified Splits: 137 of 272
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=4_26530858.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 62.
#cuts 1-3: 18
#cuts 4-6: 39
#cuts 7-9: 3
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.03724336624145508 
BICCOS Cumulative time: 1.0809016227722168
Preprocessing time: 0.008749723434448242 Inference time: 0.020253419876098633 Add cuts time: 0.0051326751708984375 Cut analysis time: 0.0031075477600097656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03315 (18), -0.03102 (18), -0.02946 (18), -0.02901 (18), -0.02715 (18), -0.02682 (18), -0.02677 (18), -0.02614 (18), -0.02591 (18), -0.02548 (18), -0.02327 (18), -0.02252 (18), -0.02244 (18), -0.02224 (18), -0.02206 (18), -0.02154 (18), -0.02149 (18), -0.01949 (18), -0.01880 (18), -0.01873 (18), 
Length of domains: 135
Time: pickout 0.0151    decision 0.0180    set_bounds 0.0130    solve 0.1653    add 0.0821    
Accumulated time: pickout 0.0472    decision 0.6989    set_bounds 0.1583    solve 1.5030    add 1.0358    
Current (lb-rhs): -0.03314638137817383
540 domains visited
Cumulative time: 4.903375148773193

BaB round 6
batch: 135
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1428] [/input-8, 1428] [/input-8, 1428] [/input-8, 1428] [/input-8, 1428] [/input-8, 867] [/input-8, 867] [/input-8, 1428] [/input-8, 1428] [/input-8, 1428] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.029748916625976562
10 lb beta sum: 0.2931324541568756, worst -0.035056907683610916
Time: prepare 0.0057    bound 0.1560    transfer 0.0006    finalize 0.0024    func 0.1665    
Accumulated time: func 1.8798    prepare 0.0782    bound 1.7350    transfer 0.0274    finalize 0.0318    
all_split False
======================Cut inference begins======================
max lb tensor(0.01638937) min lb tensor(-0.02716446)
Number of Verified Splits: 127 of 270
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=4_26530858.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 61.
#cuts 1-3: 25
#cuts 4-6: 30
#cuts 7-9: 4
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.0352482795715332 
BICCOS Cumulative time: 1.11614990234375
Preprocessing time: 0.008577108383178711 Inference time: 0.018846988677978516 Add cuts time: 0.004881381988525391 Cut analysis time: 0.002942800521850586
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02716 (19), -0.02503 (19), -0.02403 (19), -0.02395 (19), -0.02349 (19), -0.02182 (19), -0.02118 (19), -0.02118 (19), -0.02079 (19), -0.02071 (19), -0.02039 (19), -0.02037 (19), -0.01936 (19), -0.01817 (19), -0.01799 (19), -0.01756 (19), -0.01734 (19), -0.01722 (19), -0.01684 (19), -0.01642 (19), 
Length of domains: 143
Time: pickout 0.0150    decision 0.0207    set_bounds 0.0129    solve 0.1667    add 0.0831    
Accumulated time: pickout 0.0623    decision 0.7196    set_bounds 0.1712    solve 1.6697    add 1.1189    
Current (lb-rhs): -0.027164459228515625
683 domains visited
Cumulative time: 5.245918273925781

BaB round 7
batch: 143
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 1865] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02463531494140625
10 lb beta sum: 0.27914342284202576, worst -0.02206277847290039
Time: prepare 0.0060    bound 0.1609    transfer 0.0010    finalize 0.0016    func 0.1714    
Accumulated time: func 2.0512    prepare 0.0845    bound 1.8959    transfer 0.0284    finalize 0.0334    
all_split False
======================Cut inference begins======================
max lb tensor(0.00520515) min lb tensor(-0.02202034)
Number of Verified Splits: 129 of 286
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=4_26530858.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 66.
#cuts 1-3: 25
#cuts 4-6: 36
#cuts 7-9: 3
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.037622928619384766 
BICCOS Cumulative time: 1.1537728309631348
Preprocessing time: 0.009244918823242188 Inference time: 0.019997119903564453 Add cuts time: 0.005074977874755859 Cut analysis time: 0.0033059120178222656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02202 (20), -0.02179 (20), -0.01988 (20), -0.01956 (20), -0.01881 (20), -0.01871 (20), -0.01854 (20), -0.01835 (20), -0.01816 (20), -0.01657 (20), -0.01605 (20), -0.01604 (20), -0.01597 (20), -0.01577 (20), -0.01556 (20), -0.01550 (20), -0.01525 (20), -0.01521 (20), -0.01505 (20), -0.01505 (20), 
Length of domains: 157
Time: pickout 0.0143    decision 0.0213    set_bounds 0.0131    solve 0.1715    add 0.0830    
Accumulated time: pickout 0.0766    decision 0.7409    set_bounds 0.1843    solve 1.8412    add 1.2019    
Current (lb-rhs): -0.022020339965820312
840 domains visited
Cumulative time: 5.595620393753052

BaB round 8
batch: 157
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1865] [/input-8, 1865] [/input-8, 1865] [/input-8, 1865] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.022550106048583984
10 lb beta sum: 0.28038519620895386, worst -0.03208986669778824
Time: prepare 0.0064    bound 0.1607    transfer 0.0007    finalize 0.0022    func 0.1721    
Accumulated time: func 2.2233    prepare 0.0911    bound 2.0566    transfer 0.0291    finalize 0.0356    
all_split False
======================Cut inference begins======================
max lb tensor(0.01863195) min lb tensor(-0.01978064)
Number of Verified Splits: 164 of 314
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=4_26530858.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 50.
#cuts 1-3: 24
#cuts 4-6: 22
#cuts 7-9: 2
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.04344511032104492 
BICCOS Cumulative time: 1.1972179412841797
Preprocessing time: 0.010180950164794922 Inference time: 0.02619171142578125 Add cuts time: 0.0045359134674072266 Cut analysis time: 0.0025365352630615234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01978 (21), -0.01761 (21), -0.01658 (21), -0.01644 (21), -0.01641 (21), -0.01613 (21), -0.01427 (21), -0.01415 (21), -0.01390 (21), -0.01386 (21), -0.01381 (21), -0.01325 (21), -0.01323 (21), -0.01314 (21), -0.01303 (21), -0.01298 (21), -0.01277 (21), -0.01276 (21), -0.01188 (21), -0.01169 (21), 
Length of domains: 150
Time: pickout 0.0185    decision 0.0215    set_bounds 0.0144    solve 0.1722    add 0.0826    
Accumulated time: pickout 0.0951    decision 0.7624    set_bounds 0.1987    solve 2.0133    add 1.2845    
Current (lb-rhs): -0.019780635833740234
990 domains visited
Cumulative time: 5.953970193862915

BaB round 9
batch: 150
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01844501495361328
10 lb beta sum: 0.27433934807777405, worst -0.015841960906982422
Time: prepare 0.0063    bound 0.1554    transfer 0.0010    finalize 0.0028    func 0.1675    
Accumulated time: func 2.3907    prepare 0.0976    bound 2.2120    transfer 0.0301    finalize 0.0384    
all_split False
======================Cut inference begins======================
max lb tensor(0.01712894) min lb tensor(-0.01579094)
Number of Verified Splits: 204 of 300
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=4_26530858.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 44.
#cuts 1-3: 22
#cuts 4-6: 18
#cuts 7-9: 2
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.04934215545654297 
BICCOS Cumulative time: 1.2465600967407227
Preprocessing time: 0.009725570678710938 Inference time: 0.032919883728027344 Add cuts time: 0.004219770431518555 Cut analysis time: 0.002476930618286133
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01579 (22), -0.01364 (22), -0.01249 (22), -0.01237 (22), -0.01233 (22), -0.01196 (22), -0.01024 (22), -0.01022 (22), -0.00993 (22), -0.00992 (22), -0.00965 (22), -0.00910 (22), -0.00899 (22), -0.00897 (22), -0.00896 (22), -0.00891 (22), -0.00867 (22), -0.00856 (22), -0.00771 (22), -0.00749 (22), 
Length of domains: 96
Time: pickout 0.0157    decision 0.0219    set_bounds 0.0135    solve 0.1676    add 0.0953    
Accumulated time: pickout 0.1109    decision 0.7842    set_bounds 0.2122    solve 2.1809    add 1.3798    
Current (lb-rhs): -0.015790939331054688
1086 domains visited
Cumulative time: 6.3234007358551025

BaB round 10
batch: 96
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] 
split level 1: [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014037132263183594
10 lb beta sum: 0.10179530084133148, worst -0.0113677978515625
Time: prepare 0.0079    bound 0.1667    transfer 0.0054    finalize 0.0045    func 0.1872    
Accumulated time: func 2.5779    prepare 0.1058    bound 2.3787    transfer 0.0355    finalize 0.0429    
all_split False
======================Cut inference begins======================
max lb tensor(0.03285360) min lb tensor(-0.01132774)
Number of Verified Splits: 339 of 384
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=4_26530858.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 39.
#cuts 1-3: 28
#cuts 4-6: 10
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.07576680183410645 
BICCOS Cumulative time: 1.322326898574829
Preprocessing time: 0.012786149978637695 Inference time: 0.056967973709106445 Add cuts time: 0.00397038459777832 Cut analysis time: 0.0020422935485839844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01133 (24), -0.00916 (24), -0.00803 (24), -0.00794 (24), -0.00789 (24), -0.00756 (24), -0.00575 (24), -0.00570 (24), -0.00543 (24), -0.00530 (24), -0.00528 (24), -0.00460 (24), -0.00457 (24), -0.00447 (24), -0.00447 (24), -0.00442 (24), -0.00428 (24), -0.00410 (24), -0.00400 (24), -0.00321 (24), 
Length of domains: 45
Time: pickout 0.0480    decision 0.0222    set_bounds 0.0224    solve 0.1873    add 0.0670    
Accumulated time: pickout 0.1589    decision 0.8065    set_bounds 0.2346    solve 2.3682    add 1.4468    
Current (lb-rhs): -0.011327743530273438
1131 domains visited
Cumulative time: 6.755522012710571

BaB round 11
batch: 45
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] 
split level 1: [/input-8, 1421] [/input-8, 1421] [/input-8, 1421] [/input-8, 1421] [/input-8, 1429] [/input-8, 1421] [/input-8, 1421] [/input-8, 1421] [/input-8, 1421] [/input-8, 1421] 
split level 2: [/input-8, 1429] [/input-8, 1429] [/input-8, 1429] [/input-8, 1429] [/input-8, 1421] [/input-8, 1429] [/input-8, 1429] [/input-8, 1429] [/input-8, 1429] [/input-8, 1429] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.00024890899658203125

all verified at 0th iter
Time: prepare 0.0072    bound 0.0085    transfer 0.0040    finalize 0.0033    func 0.0253    
Accumulated time: func 2.6033    prepare 0.1132    bound 2.3872    transfer 0.0395    finalize 0.0462    
all_split False
======================Cut inference begins======================
max lb tensor(0.01808643) min lb tensor(0.00024891)
Number of Verified Splits: 360 of 360
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=4_26530858.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
Total number of valid cuts: 39.
#cuts 1-3: 28
#cuts 4-6: 10
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.012383222579956055 
BICCOS Cumulative time: 1.3347101211547852
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0065    decision 0.0194    set_bounds 0.0197    solve 0.0255    add 0.0001    
Accumulated time: pickout 0.1653    decision 0.8259    set_bounds 0.2543    solve 2.3937    add 1.4469    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1131 domains visited
Cumulative time: 6.840616941452026

found process to kill: terminal indx = 2
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=2_26530858.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=2_26530858.indx
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=2_26530858.log
found process to kill: terminal indx = 4
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=4_26530858.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=4_26530858.indx
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=139_spec=4_26530858.log
found process for pidx=2
kill process for pidx=2
found process for pidx=4
Result: safe in 11.3378 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 140, vnnlib ID: 140 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.70108557, -2.61450195, -7.88389778, -7.46980858, -7.10053349,
         -7.85311460, -7.32898045, -5.37792873, -5.26348686, -0.13527048]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [517]; unstable size 517; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 190, 1, 517] with unstable size 189 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 517] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 517] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [189]; unstable size 189; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 189] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 189] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.44307899, 1.46007824, 5.86254597, 5.68103218, 5.60793352, 5.96620131,
         5.60759068, 3.70175385, 3.77148247]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0679 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 141, vnnlib ID: 141 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.93660259, -3.64990735, -5.69686222, -5.46793270, -5.41355324,
         -6.32598066, -5.22664785, -6.09948301, -3.93378472, -2.67238760]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [480]; unstable size 480; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 480] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 480] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 480] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 192] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.12637210,  0.23386812,  0.06982768,  0.04919505,  0.70030695,
         -0.06877613,  0.36111879, -0.89804649, -1.82256591]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.93660259, -3.64990735, -5.69686222, -5.46793270, -5.41355324,
         -6.32598066, -5.22664785, -6.09948301, -3.93378472, -2.67238760]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.93660212, -3.64990807, -5.69686222, -5.46793365, -5.41355324,
          -6.32598066, -5.22664833, -6.09948254, -3.93378496, -2.67238760],
         [-4.93660212, -3.64990807, -5.69686222, -5.46793365, -5.41355324,
          -6.32598066, -5.22664833, -6.09948254, -3.93378496, -2.67238760]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.28669405,  1.57674026,  0.28387690, -0.97752047]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]],


         [[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]],


         [[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]],


         [[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0760 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 142, vnnlib ID: 142 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-9.01175785, -9.22564220, -6.09865665, -6.68279839, -7.01091385,
         -7.66662741, -3.74865699, -8.93857002, -9.70948601, -9.36056805]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [415]; unstable size 415; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 290, 1, 415] with unstable size 289 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 415] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 415] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [289]; unstable size 289; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 289] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 289] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.92234230, 3.34474111, 0.83518028, 1.42703414, 1.62353659, 2.12632871,
         3.08041883, 3.64250851, 3.61395836]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0645 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 143, vnnlib ID: 143 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.98219585, -11.93984127,  -4.80098343,  -6.43815804,  -4.75239468,
          -5.96528244,  -6.83383131,  -6.40824652, -11.32667923, -10.02781868]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [464]; unstable size 464; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 196, 1, 464] with unstable size 195 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 464] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 464] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [195]; unstable size 195; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 195] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 195] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.50733936,  4.83027840, -1.04858828,  0.40518248, -0.05837464,
          0.48497450,  0.45264506,  4.44294071,  3.27292299]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.98219585, -11.93984127,  -4.80098343,  -6.43815804,  -4.75239468,
          -5.96528244,  -6.83383131,  -6.40824652, -11.32667923, -10.02781868]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.91147852, -11.89064407,  -4.74770355,  -6.60718012,  -5.13012743,
           -6.18122435,  -7.01664925,  -6.81878042, -11.30120945, -10.08853436],
         [ -7.91147852, -11.89064407,  -4.74770355,  -6.60718012,  -5.13012743,
           -6.18122435,  -7.01664925,  -6.81878042, -11.30120945, -10.08853436]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.38242388,  1.05109692]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0073 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0721 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 144, vnnlib ID: 144 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.60607052, -9.81349945, -5.86607075, -4.14033175, -5.51711655,
         -3.53696299, -6.38849020, -6.08620310, -7.73200989, -8.22923183]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [522]; unstable size 522; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 221, 1, 522] with unstable size 220 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 522] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 522] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [220]; unstable size 220; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 220] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 220] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.89997864, 4.68741655, 1.57923102, 0.30736452, 1.14825892, 1.82109785,
         1.72909081, 2.65290213, 3.25950551]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0635 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 145, vnnlib ID: 145 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.97581673, -7.36369705, -2.25391197, -0.90559614, -3.35363531,
         -0.93793738, -3.88091850, -3.94542360, -8.08611870, -6.59433222]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [686]; unstable size 686; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 215, 1, 686] with unstable size 214 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 686] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 686] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [214]; unstable size 214; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 214] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 214] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.63966525,  4.83987570,  0.26498556, -0.32372534,  1.13650584,
          1.87988925,  2.01293588,  5.47729683,  4.25807381]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.97581673, -7.36369705, -2.25391197, -0.90559614, -3.35363531,
         -0.93793738, -3.88091850, -3.94542360, -8.08611870, -6.59433222]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.97581673, -7.36369705, -2.25391197, -0.90559614, -3.35363531,
          -0.93793738, -3.88091850, -3.94542360, -8.08611870, -6.59433222]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.03234124]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0691 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 146, vnnlib ID: 146 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.88469028, -12.65882111, -12.62442398, -13.26971817, -13.08886814,
         -14.39622879, -13.06826305, -13.77910519,  -7.61941338, -13.15269947]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [474]; unstable size 474; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 183, 1, 474] with unstable size 182 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 474] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 474] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [182]; unstable size 182; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 182] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 182] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.66201353, 3.41532946, 3.31493235, 3.81620908, 3.48846436, 4.76713276,
         3.58373833, 3.89160728, 3.77728748]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0644 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 147, vnnlib ID: 147 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.95316505, -29.04301071, -22.88550568, -26.99249268, -26.92433929,
         -26.87813187, -26.17901230, -26.50130844, -27.15471458, -29.93289757]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [636]; unstable size 636; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 636] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 636] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 636] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 206] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.13847518, 4.55568933, 3.22048402, 3.02970314, 2.95622373, 2.20912457,
         2.32559395, 2.85925484, 5.64449787]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0704 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 148, vnnlib ID: 148 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.92584610, -7.42483807, -4.62941742, -4.01557446, -4.85893917,
         -3.11745501, -6.51985884, -2.25635386, -7.85682869, -5.87989426]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [573]; unstable size 573; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 573] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 573] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 573] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 164] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.58360863, 3.69630337, 1.62351382, 1.19872522, 1.87599468, 0.30902326,
         3.29060102, 4.20989084, 2.42179346]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0635 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 149, vnnlib ID: 149 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.82564068, -16.12564659,  -8.40596962, -11.14722919,  -8.84027576,
         -11.49166584,  -8.61030483, -12.62408161, -15.33834553, -15.51428890]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [612]; unstable size 612; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 318, 1, 612] with unstable size 317 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 612] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 612] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [317]; unstable size 317; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 317] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 317] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.89976597,  5.63465881,  1.31290936, -0.68691462,  1.36818075,
         -1.07342339,  2.11837912,  5.13911676,  5.00889206]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.82564068, -16.12564659,  -8.40596962, -11.14722919,  -8.84027576,
         -11.49166584,  -8.61030483, -12.62408161, -15.33834553, -15.51428890]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.74567413, -14.96361732,  -7.38170147,  -9.74652767,  -7.30603218,
          -10.06134415,  -7.19569302, -11.23393822, -14.24657917, -14.25869179],
         [-11.74567413, -14.96361732,  -7.38170147,  -9.74652767,  -7.30603218,
          -10.06134415,  -7.19569302, -11.23393822, -14.24657917, -14.25869179]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.07566929, -0.18600845]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0066 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0707 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 150, vnnlib ID: 150 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.13626671, -12.95860291, -17.87646484, -18.21573448, -16.54766655,
         -19.77405167, -18.47913933, -17.13456726, -12.88059044, -12.20954704]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [659]; unstable size 659; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 227, 1, 659] with unstable size 226 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 659] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 659] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [226]; unstable size 226; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 226] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 226] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.12454128,  2.88798380,  3.24318027,  1.46328259,  4.59323883,
          3.30328608,  1.93248796, -1.68345499, -1.69870031]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.13626671, -12.95860291, -17.87646484, -18.21573448, -16.54766655,
         -19.77405167, -18.47913933, -17.13456726, -12.88059044, -12.20954704]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.13626671, -12.95860291, -17.87646675, -18.21573257, -16.54766655,
          -19.77405167, -18.47914314, -17.13456726, -12.88059235, -12.20954704],
         [-12.13626671, -12.95860291, -17.87646675, -18.21573257, -16.54766655,
          -19.77405167, -18.47914314, -17.13456726, -12.88059235, -12.20954704]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.82233620, -0.07801056, -0.74905586]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0593 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 151, vnnlib ID: 151 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.92925501, -7.14253235, -2.67746592, -1.64019978, -3.21286678,
         -2.15658951, -4.77550077, -2.71008253, -7.95267010, -6.10923672]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [509]; unstable size 509; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 191, 1, 509] with unstable size 190 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 509] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 509] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [190]; unstable size 190; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 190] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 190] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.62681031,  3.42381239, -0.43489349, -0.80544960,  0.11626744,
          1.46117353, -0.19169974,  4.37902260,  2.50552464]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.92925501, -7.14253235, -2.67746592, -1.64019978, -3.21286678,
         -2.15658951, -4.77550077, -2.71008253, -7.95267010, -6.10923672]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.92925453, -7.14253139, -2.67746544, -1.64019978, -3.21286583,
          -2.15658951, -4.77549982, -2.71008205, -7.95266914, -6.10923672],
         [-4.92925453, -7.14253139, -2.67746544, -1.64019978, -3.21286583,
          -2.15658951, -4.77549982, -2.71008205, -7.95266914, -6.10923672]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.52087593, -0.51638973,  0.55349255]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]],


         [[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]],


         [[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0727 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 152, vnnlib ID: 152 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.37253094, -15.35466290,  -8.84723759, -11.91200066,  -9.14601994,
         -12.22006512, -11.46233749, -11.63420105, -15.26982689, -14.99343395]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [511]; unstable size 511; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 247, 1, 511] with unstable size 246 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 511] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 511] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [246]; unstable size 246; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 246] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 246] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.05601645,  4.40511179,  1.92022467, -0.67723632,  2.14849830,
          1.43644214,  1.45348632,  4.22400999,  4.17532206]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.37253094, -15.35466290,  -8.84723759, -11.91200066,  -9.14601994,
         -12.22006512, -11.46233749, -11.63420105, -15.26982689, -14.99343395]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.96281624, -14.68736172,  -8.51735973, -11.17835426,  -8.24110413,
          -11.42344475, -10.73051357, -10.70419121, -14.71773815, -14.28113079]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.27625561]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0060 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0697 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 153, vnnlib ID: 153 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.36052370, -3.64754987, -8.43094254, -6.93587589, -8.07399559,
         -7.95548391, -8.76295853, -8.07159233, -4.37078619, -1.63098276]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [666]; unstable size 666; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 666] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 666] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 666] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 197] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.38331795, 0.85898709, 5.10982227, 3.81529808, 4.82118082, 4.66787148,
         5.43832827, 4.82864952, 1.05962515]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0651 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 154, vnnlib ID: 154 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.37273693, -13.41425037,  -7.99989891,  -7.64088869,  -7.68787098,
          -7.30278063,  -9.00737858,  -9.44757938, -11.26918030, -13.87256336]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [665]; unstable size 665; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 191, 1, 665] with unstable size 190 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 665] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 665] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [190]; unstable size 190; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 190] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 190] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.81563997,  4.79626894, -0.23131967,  0.04256082, -0.61334920,
          0.76331437,  1.09416676,  2.70510554,  5.43058109]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.37273693, -13.41425037,  -7.99989891,  -7.64088869,  -7.68787098,
          -7.30278063,  -9.00737858,  -9.44757938, -11.26918030, -13.87256336]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.39501572, -13.37385845,  -7.99371624,  -7.88374424,  -7.51201248,
           -7.59104586,  -9.04518700,  -9.49426460, -11.38462830, -13.92039394],
         [-12.39501572, -13.37385845,  -7.99371624,  -7.88374424,  -7.51201248,
           -7.59104586,  -9.04518700,  -9.49426460, -11.38462830, -13.92039394]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.40267038, -0.07903337]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0061 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0706 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 155, vnnlib ID: 155 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.79153347, -11.06904888,  -7.80160236,  -7.62448120,  -8.11459255,
          -8.06301022,  -7.22633886,  -9.50167847,  -7.88424015, -10.52373123]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [522]; unstable size 522; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 244, 1, 522] with unstable size 243 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 522] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 522] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [243]; unstable size 243; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 243] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 243] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.54438400,  1.50450659, -1.00405812, -0.75059623, -0.65832710,
         -0.60824037,  0.62780285, -1.52603424,  1.13424730]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.79153347, -11.06904888,  -7.80160236,  -7.62448120,  -8.11459255,
          -8.06301022,  -7.22633886,  -9.50167847,  -7.88424015, -10.52373123]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.40770531, -10.88330173,  -7.31060600,  -7.41410780,  -7.77941322,
           -7.76706648,  -7.42843294,  -9.16030025,  -7.50736618, -10.33506966],
         [ -9.40770531, -10.88330173,  -7.31060600,  -7.41410780,  -7.77941322,
           -7.76706648,  -7.42843294,  -9.16030025,  -7.50736618, -10.33506966]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11782694, -0.01432514,  0.35098028,  0.33863354,  0.07893324]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.0149 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0818 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 156, vnnlib ID: 156 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.62991190, -8.22150135, -3.56266642, -2.64211535, -2.55210876,
         -3.17030573, -2.78596139, -4.91182852, -7.74587250, -7.17337656]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [520]; unstable size 520; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 520] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 520] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 520] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 184] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.35063839,  3.30825782, -0.56681514, -0.80880803, -1.41259122,
         -1.49340832,  0.91902602,  3.26092315,  2.75898981]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.62991190, -8.22150135, -3.56266642, -2.64211535, -2.55210876,
         -3.17030573, -2.78596139, -4.91182852, -7.74587250, -7.17337656]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.62991190, -8.22150135, -3.56266618, -2.64211535, -2.55210876,
          -3.17030573, -2.78596210, -4.91182852, -7.74587250, -7.17337751],
         [-6.62991190, -8.22150135, -3.56266618, -2.64211535, -2.55210876,
          -3.17030573, -2.78596210, -4.91182852, -7.74587250, -7.17337751]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.39236045, -0.52819037, -0.61819696, -0.38434362]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0753 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 157, vnnlib ID: 157 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.04801083,  -6.34156513, -11.41678429,  -9.62609482, -10.79650021,
         -10.91422462, -10.18493938,  -9.82091618,  -7.10640144,  -2.62643194]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [489]; unstable size 489; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 166, 1, 489] with unstable size 165 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 489] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 489] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [165]; unstable size 165; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 165] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 165] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.36141205, 2.37881184, 7.25882244, 5.68141365, 6.92046452, 6.83364105,
         6.18870306, 5.80481243, 3.38991737]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0618 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 158, vnnlib ID: 158 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.81927967,  -9.30375195, -10.87481976,  -8.97626114, -10.13474369,
          -8.76882172, -10.25335312,  -9.09837914,  -6.59457874, -10.58987808]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [517]; unstable size 517; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 517] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 517] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 517] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 191] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.71505976,  0.93899965,  2.11313319,  0.24073696,  1.31830406,
         -0.27658820,  1.65153825, -0.12757921,  2.09712505]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.81927967,  -9.30375195, -10.87481976,  -8.97626114, -10.13474369,
          -8.76882172, -10.25335312,  -9.09837914,  -6.59457874, -10.58987808]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.54it/s]100%|██████████| 1/1 [00:00<00:00,  7.53it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.50576878,  -9.06923485, -10.22361279,  -8.16759109,  -9.38498783,
           -7.78557730,  -9.73932743,  -8.16070366,  -6.82512379, -10.11628342],
         [ -9.50576878,  -9.06923485, -10.22361279,  -8.16759109,  -9.38498783,
           -7.78557730,  -9.73932743,  -8.16070366,  -6.82512379, -10.11628342]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.96045351, 1.33557987]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1356 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.416450500488281
alpha/beta optimization time: 1.3682174682617188
initial alpha-crown bounds: tensor([[ 1.76490855,  1.00492334,  2.20698857,  0.32836914,  1.41238546,
         -0.17884588,  1.72935653, -0.01777792,  2.16614342]], device='cuda:0')
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.17884588241577148
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6388 seconds.
lower bounds for all target labels: [1.7649073600769043, 1.004922866821289, 2.2069873809814453, 0.3283662796020508, 1.412386417388916, -0.1788468360900879, 1.7293572425842285, -0.01777791976928711, 2.166141986846924]
Number of cpus: 96  Number of subproblems: 2
Reassign each subproblems with number of thread: 48
Starting MIP solver for these labels: [5, 7]
start creating model mps for candidates: ['lay/16_5', 'lay/16_7']
Process 240332 received signal 15. Terminate pool <multiprocessing.pool.Pool state=RUN pool_size=96>
Process 240332 received signal 15. Terminate pool <multiprocessing.pool.Pool state=TERMINATE pool_size=96>
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.3345925807953
Verifying property 0 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.206988573074341.

Properties batch 1, size 1
Remaining timeout: 198.1740939617157
Verifying property 1 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.1661434173583984.

Properties batch 2, size 1
Remaining timeout: 198.07857990264893
Verifying property 2 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.7649085521697998.

Properties batch 3, size 1
Remaining timeout: 197.98562908172607
Verifying property 3 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.7293565273284912.

Properties batch 4, size 1
Remaining timeout: 197.87746906280518
Verifying property 4 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.4123854637145996.

Properties batch 5, size 1
Remaining timeout: 197.78524327278137
Verifying property 5 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0049233436584473.

Properties batch 6, size 1
Remaining timeout: 197.6925790309906
Verifying property 6 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.328369140625.

Properties batch 7, size 1
Remaining timeout: 197.60055208206177
Verifying property 7 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.01777792]], device='cuda:0') need to verify.
Model prediction is: tensor([ -9.81927967,  -9.30375195, -10.87481976,  -8.97626114, -10.13474369,
         -8.76882172, -10.25335312,  -9.09837914,  -6.59457874, -10.58987808],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.01777792]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 517
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 188
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 726
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0008382797241210938
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0610    transfer 0.0001    finalize 0.0002    func 0.0615    
Accumulated time: func 0.0615    prepare 0.0002    bound 0.0610    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 45] 
split level 2: [/input-12, 37] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 51] 
split level 5: [/input-12, 25] 
split level 6: [/input-12, 26] 
split level 7: [/input, 1735] 
split level 8: [/input-8, 1452] 
split level 9: [/input-12, 6] 
split level 10: [/input, 1720] 
split level 11: [/input-8, 1459] 
split level 12: [/input-8, 921] 
split level 13: [/input, 1690] 
split level 14: [/input, 1706] 
split level 15: [/input, 1692] 
split level 16: [/input-8, 1011] 
split level 17: [/input, 1734] 
split level 18: [/input-12, 1] 
split level 19: [/input, 2248] 
split level 20: [/input-8, 1460] 
split level 21: [/input-8, 870] 
split level 22: [/input, 1736] 
split level 23: [/input-8, 1010] 
split level 24: [/input, 1674] 
split level 25: [/input, 1704] 
split level 26: [/input, 1721] 
split level 27: [/input, 1705] 
split level 28: [/input, 1723] 
split level 29: [/input, 1675] 
split level 30: [/input-8, 1451] 
split level 31: [/input, 1739] 
split level 32: [/input, 2686] 
split level 33: [/input-8, 1438] 
split level 34: [/input, 2217] 
split level 35: [/input-8, 493] 
split level 36: [/input, 1691] 
split level 37: [/input-8, 923] 
split level 38: [/input, 2743] 
split level 39: [/input-8, 1596] 
split level 40: [/input, 2702] 
split level 41: [/input, 2219] 
split level 42: [/input-8, 1445] 
split level 43: [/input, 1755] 
split level 44: [/input, 2199] 
split level 45: [/input-8, 1962] 
split level 46: [/input, 2774] 
split level 47: [/input-8, 949] 
split level 48: [/input, 2776] 
split level 49: [/input-8, 1444] 
split level 50: [/input, 1733] 
split level 51: [/input-8, 1293] 
split level 52: [/input-8, 494] 
split level 53: [/input-8, 931] 
split level 54: [/input, 2216] 
split level 55: [/input, 2250] 
split level 56: [/input, 1689] 
split level 57: [/input, 2265] 
split level 58: [/input, 2684] 
split level 59: [/input, 2729] 
split level 60: [/input-8, 1453] 
split level 61: [/input-8, 862] 
split level 62: [/input-8, 517] 
split level 63: [/input, 2485] 
split level 64: [/input-8, 942] 
split level 65: [/input, 2685] 
split level 66: [/input, 2476] 
split level 67: [/input-8, 301] 
split level 68: [/input, 2213] 
split level 69: [/input-8, 1050] 
split level 70: [/input, 1672] 
split level 71: [/input-8, 1868] 
split level 72: [/input, 2200] 
split level 73: [/input-8, 1644] 
split level 74: [/input-8, 1937] 
split level 75: [/input, 1747] 
split level 76: [/input, 1658] 
split level 77: [/input, 2188] 
split level 78: [/input-8, 852] 
split level 79: [/input, 2157] 
split level 80: [/input, 1452] 
split level 81: [/input-8, 527] 
split level 82: [/input-8, 1965] 
split level 83: [/input, 2703] 
split level 84: [/input, 1647] 
split level 85: [/input-8, 522] 
split level 86: [/input, 2197] 
split level 87: [/input-8, 1064] 
split level 88: [/input, 1686] 
split level 89: [/input, 1636] 
split level 90: [/input, 2773] 
split level 91: [/input, 1478] 
split level 92: [/input, 1607] 
split level 93: [/input, 2486] 
split level 94: [/input-8, 488] 
split level 95: [/input, 2492] 
split level 96: [/input, 2282] 
split level 97: [/input-8, 1588] 
split level 98: [/input, 2989] 
split level 99: [/input, 2190] 
split level 100: [/input-8, 1369] 
split level 101: [/input-8, 1592] 
split level 102: [/input, 2493] 
split level 103: [/input-8, 1925] 
split level 104: [/input-8, 1583] 
split level 105: [/input, 2501] 
split level 106: [/input, 2281] 
split level 107: [/input, 3544] 
split level 108: [/input, 1481] 
split level 109: [/input-8, 1309] 
split level 110: [/input, 4043] 
split level 111: [/input, 1710] 
split level 112: [/input, 1731] 
split level 113: [/input-8, 387] 
split level 114: [/input-8, 835] 
split level 115: [/input-8, 1485] 
split level 116: [/input-8, 836] 
split level 117: [/input, 2164] 
split level 118: [/input, 3781] 
split level 119: [/input, 3560] 
split level 120: [/input, 2503] 
split level 121: [/input-8, 474] 
split level 122: [/input, 1742] 
split level 123: [/input-8, 114] 
split level 124: [/input-8, 963] 
split level 125: [/input, 2509] 
split level 126: [/input, 3527] 
split level 127: [/input, 2504] 
split level 128: [/input-8, 1449] 
split level 129: [/input, 2535] 
split level 130: [/input-8, 1739] 
split level 131: [/input-8, 647] 
split level 132: [/input, 3246] 
split level 133: [/input, 2462] 
split level 134: [/input-8, 982] 
split level 135: [/input-8, 1656] 
split level 136: [/input, 2155] 
split level 137: [/input, 2206] 
split level 138: [/input, 2521] 
split level 139: [/input, 2067] 
split level 140: [/input, 3396] 
split level 141: [/input, 2244] 
split level 142: [/input, 2324] 
split level 143: [/input, 2148] 
split level 144: [/input, 2171] 
split level 145: [/input, 2472] 
split level 146: [/input, 3090] 
split level 147: [/input-8, 1457] 
split level 148: [/input-8, 516] 
split level 149: [/input-8, 1013] 
split level 150: [/input, 113] 
split level 151: [/input, 2473] 
split level 152: [/input, 2494] 
split level 153: [/input, 2322] 
split level 154: [/input, 4029] 
split level 155: [/input, 3005] 
split level 156: [/input, 3786] 
split level 157: [/input, 3395] 
split level 158: [/input, 3749] 
split level 159: [/input, 3783] 
split level 160: [/input, 2973] 
split level 161: [/input, 2508] 
split level 162: [/input, 2523] 
split level 163: [/input, 2222] 
split level 164: [/input-8, 1933] 
split level 165: [/input, 3753] 
split level 166: [/input, 2083] 
split level 167: [/input, 3105] 
split level 168: [/input, 2506] 
split level 169: [/input, 2384] 
split level 170: [/input-8, 1945] 
split level 171: [/input, 3529] 
split level 172: [/input, 2337] 
split level 173: [/input, 2416] 
split level 174: [/input-8, 1024] 
split level 175: [/input, 3770] 
split level 176: [/input, 98] 
split level 177: [/input-8, 1959] 
split level 178: [/input, 2942] 
split level 179: [/input, 3767] 
split level 180: [/input-8, 962] 
split level 181: [/input, 2132] 
split level 182: [/input, 3153] 
split level 183: [/input-8, 661] 
split level 184: [/input, 2306] 
split level 185: [/input-8, 471] 
split level 186: [/input, 252] 
split level 187: [/input, 2285] 
split level 188: [/input, 3091] 
split level 189: [/input, 2369] 
split level 190: [/input, 2558] 
split level 191: [/input, 2499] 
split level 192: [/input, 2458] 
split level 193: [/input, 3522] 
split level 194: [/input, 2293] 
split level 195: [/input, 2479] 
split level 196: [/input, 239] 
split level 197: [/input, 1498] 
split level 198: [/input, 3490] 
split level 199: [/input, 3295] 
Time: prepare 0.0060    bound 0.1127    transfer 0.0069    finalize 0.0051    func 0.1309    
Accumulated time: func 0.1924    prepare 0.0165    bound 0.1737    transfer 0.0070    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(0.40603852) min lb tensor(-0.01755047)
Number of Verified Splits: 53 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.017697811126708984 
BICCOS Cumulative time: 0.017697811126708984
Preprocessing time: 0.013118982315063477 Inference time: 0.0026540756225585938 Add cuts time: 0.0012996196746826172 Cut analysis time: 0.0006251335144042969
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5491    set_bounds 0.0126    solve 0.1311    add 0.0116    
Accumulated time: pickout 0.0004    decision 0.5491    set_bounds 0.0126    solve 0.1311    add 0.0116    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58]), tensor([-1.]), tensor([0]), tensor([4.98109887e-11]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58]), tensor([1.]), tensor([0]), tensor([4.98109887e-11]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.11854720115661621

all verified at 0th iter
Time: prepare 0.0004    bound 0.0051    transfer 0.0001    finalize 0.0002    func 0.0058    
Accumulated time: func 0.1982    prepare 0.0169    bound 0.1788    transfer 0.0071    finalize 0.0054    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 196.61092448234558
Verifying property 8 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.17884588]], device='cuda:0') need to verify.
Model prediction is: tensor([ -9.81927967,  -9.30375195, -10.87481976,  -8.97626114, -10.13474369,
         -8.76882172, -10.25335312,  -9.09837914,  -6.59457874, -10.58987808],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.17884588]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 517
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 188
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 726
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0003426074981689453
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0565    transfer 0.0001    finalize 0.0001    func 0.0569    
Accumulated time: func 0.0569    prepare 0.0002    bound 0.0565    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 37] 
split level 1: [/input-12, 25] 
split level 2: [/input-12, 26] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 58] 
split level 5: [/input-12, 24] 
split level 6: [/input-12, 45] 
split level 7: [/input-12, 51] 
split level 8: [/input-12, 74] 
split level 9: [/input-12, 60] 
split level 10: [/input, 1735] 
split level 11: [/input-8, 1452] 
split level 12: [/input-8, 1459] 
split level 13: [/input, 1720] 
split level 14: [/input, 1690] 
split level 15: [/input-8, 923] 
split level 16: [/input, 1734] 
split level 17: [/input, 1692] 
split level 18: [/input, 2248] 
split level 19: [/input, 1674] 
split level 20: [/input, 1706] 
split level 21: [/input, 1736] 
split level 22: [/input-8, 1460] 
split level 23: [/input-8, 845] 
split level 24: [/input, 1675] 
split level 25: [/input, 1691] 
split level 26: [/input, 1721] 
split level 27: [/input, 1723] 
split level 28: [/input, 1704] 
split level 29: [/input-8, 493] 
split level 30: [/input, 1705] 
split level 31: [/input-8, 1596] 
split level 32: [/input-8, 1451] 
split level 33: [/input-8, 1010] 
split level 34: [/input-8, 1293] 
split level 35: [/input-8, 921] 
split level 36: [/input-8, 1962] 
split level 37: [/input, 1739] 
split level 38: [/input, 2686] 
split level 39: [/input-8, 931] 
split level 40: [/input-8, 1588] 
split level 41: [/input-8, 1011] 
split level 42: [/input-8, 1965] 
split level 43: [/input, 2217] 
split level 44: [/input, 2743] 
split level 45: [/input-8, 1438] 
split level 46: [/input-8, 1353] 
split level 47: [/input-8, 1933] 
split level 48: [/input-8, 852] 
split level 49: [/input, 1689] 
split level 50: [/input, 1733] 
split level 51: [/input, 1686] 
split level 52: [/input, 2199] 
split level 53: [/input-8, 517] 
split level 54: [/input-8, 949] 
split level 55: [/input, 2702] 
split level 56: [/input, 2776] 
split level 57: [/input, 1658] 
split level 58: [/input, 2774] 
split level 59: [/input-8, 1309] 
split level 60: [/input-8, 1369] 
split level 61: [/input-8, 1592] 
split level 62: [/input-8, 1583] 
split level 63: [/input-8, 1644] 
split level 64: [/input-8, 483] 
split level 65: [/input-8, 494] 
split level 66: [/input, 1452] 
split level 67: [/input, 1636] 
split level 68: [/input, 2476] 
split level 69: [/input-8, 1453] 
split level 70: [/input, 1755] 
split level 71: [/input-8, 1925] 
split level 72: [/input, 2281] 
split level 73: [/input, 1747] 
split level 74: [/input, 2216] 
split level 75: [/input, 2250] 
split level 76: [/input, 1478] 
split level 77: [/input-8, 1445] 
split level 78: [/input, 2265] 
split level 79: [/input, 2157] 
split level 80: [/input, 1672] 
split level 81: [/input, 1347] 
split level 82: [/input-8, 301] 
split level 83: [/input-8, 862] 
split level 84: [/input, 1364] 
split level 85: [/input, 2486] 
split level 86: [/input, 2685] 
split level 87: [/input, 3527] 
split level 88: [/input, 2989] 
split level 89: [/input, 2200] 
split level 90: [/input, 1481] 
split level 91: [/input, 2501] 
split level 92: [/input-8, 522] 
split level 93: [/input, 2729] 
split level 94: [/input-8, 527] 
split level 95: [/input-8, 799] 
split level 96: [/input, 1731] 
split level 97: [/input, 2504] 
split level 98: [/input, 3090] 
split level 99: [/input, 3544] 
split level 100: [/input, 1647] 
split level 101: [/input, 3560] 
split level 102: [/input, 2213] 
split level 103: [/input, 4043] 
split level 104: [/input-8, 1584] 
split level 105: [/input, 3396] 
split level 106: [/input, 2188] 
split level 107: [/input-8, 1444] 
split level 108: [/input, 2891] 
split level 109: [/input, 2472] 
split level 110: [/input, 2492] 
split level 111: [/input-8, 1656] 
split level 112: [/input, 2148] 
split level 113: [/input, 1607] 
split level 114: [/input-8, 1585] 
split level 115: [/input, 3395] 
split level 116: [/input, 2473] 
split level 117: [/input, 2155] 
split level 118: [/input, 2535] 
split level 119: [/input, 2322] 
split level 120: [/input-8, 942] 
split level 121: [/input, 2493] 
split level 122: [/input-8, 1064] 
split level 123: [/input, 2164] 
split level 124: [/input, 2282] 
split level 125: [/input-8, 836] 
split level 126: [/input-8, 387] 
split level 127: [/input, 2197] 
split level 128: [/input, 3749] 
split level 129: [/input, 2503] 
split level 130: [/input, 1316] 
split level 131: [/input, 252] 
split level 132: [/input, 2521] 
split level 133: [/input, 2506] 
split level 134: [/input-8, 149] 
split level 135: [/input, 2337] 
split level 136: [/input, 2244] 
split level 137: [/input, 2458] 
split level 138: [/input, 2099] 
split level 139: [/input, 2154] 
split level 140: [/input, 3394] 
split level 141: [/input, 2324] 
split level 142: [/input, 3105] 
split level 143: [/input-8, 1285] 
split level 144: [/input, 3781] 
split level 145: [/input, 2132] 
split level 146: [/input, 3522] 
split level 147: [/input-8, 1973] 
split level 148: [/input-8, 963] 
split level 149: [/input, 2523] 
split level 150: [/input-8, 647] 
split level 151: [/input, 3490] 
split level 152: [/input, 3293] 
split level 153: [/input, 1363] 
split level 154: [/input, 4029] 
split level 155: [/input-8, 1449] 
split level 156: [/input, 3005] 
split level 157: [/input, 1498] 
split level 158: [/input, 2356] 
split level 159: [/input, 2067] 
split level 160: [/input, 2509] 
split level 161: [/input, 2171] 
split level 162: [/input, 3410] 
split level 163: [/input, 2499] 
split level 164: [/input, 2494] 
split level 165: [/input, 3753] 
split level 166: [/input, 2190] 
split level 167: [/input, 2508] 
split level 168: [/input, 3783] 
split level 169: [/input, 2973] 
split level 170: [/input, 2371] 
split level 171: [/input-8, 1397] 
split level 172: [/input-8, 1065] 
split level 173: [/input, 3770] 
split level 174: [/input, 1335] 
split level 175: [/input-8, 114] 
split level 176: [/input, 3153] 
split level 177: [/input, 3786] 
split level 178: [/input-8, 835] 
split level 179: [/input, 2369] 
split level 180: [/input, 2917] 
split level 181: [/input, 3539] 
split level 182: [/input, 2306] 
split level 183: [/input, 3091] 
split level 184: [/input-8, 516] 
split level 185: [/input, 2347] 
split level 186: [/input, 3529] 
split level 187: [/input, 2083] 
split level 188: [/input-8, 97] 
split level 189: [/input-8, 397] 
split level 190: [/input, 3246] 
split level 191: [/input, 2307] 
split level 192: [/input, 3411] 
split level 193: [/input, 2305] 
split level 194: [/input, 2942] 
split level 195: [/input-8, 1347] 
split level 196: [/input, 2206] 
split level 197: [/input-8, 2008] 
split level 198: [/input, 239] 
split level 199: [/input-8, 431] 
Time: prepare 0.0063    bound 0.1074    transfer 0.0008    finalize 0.0028    func 0.1174    
Accumulated time: func 0.1743    prepare 0.0166    bound 0.1639    transfer 0.0009    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.43587685) min lb tensor(-0.17878485)
Number of Verified Splits: 7 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.012261390686035156 
BICCOS Cumulative time: 0.012261390686035156
Preprocessing time: 0.010589838027954102 Inference time: 0.0003228187561035156 Add cuts time: 0.00011110305786132812 Cut analysis time: 0.001237630844116211
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16461 (1), -0.16453 (1), -0.16451 (1), -0.16449 (1), -0.16446 (1), -0.16443 (1), -0.16435 (1), -0.16358 (1), -0.16302 (1), -0.16085 (1), -0.16056 (1), -0.16038 (1), -0.16034 (1), -0.16028 (1), -0.15997 (1), -0.15960 (1), -0.15855 (1), -0.15844 (1), -0.15833 (1), -0.15818 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5440    set_bounds 0.0095    solve 0.1175    add 0.2140    
Accumulated time: pickout 0.0003    decision 0.5440    set_bounds 0.0095    solve 0.1175    add 0.2140    
Current (lb-rhs): -0.1646103858947754
50 domains visited
Cumulative time: 0.9780511856079102

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 37] [/input-12, 37] [/input-12, 25] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
split level 1: [/input-12, 25] [/input-12, 25] [/input-12, 26] [/input-12, 26] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 26] [/input-12, 25] 
split level 2: [/input-12, 4] [/input-12, 26] [/input-12, 4] [/input-12, 4] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 25] [/input-12, 26] 
split level 3: [/input-12, 58] [/input-12, 4] [/input-12, 58] [/input-12, 58] [/input-12, 4] [/input-12, 58] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09041452407836914

all verified at 1th iter
Time: prepare 0.0074    bound 0.0136    transfer 0.0007    finalize 0.0031    func 0.0274    
Accumulated time: func 0.2017    prepare 0.0243    bound 0.1775    transfer 0.0016    finalize 0.0060    
all_split False
======================Cut inference begins======================
max lb tensor(0.22441530) min lb tensor(0.00013542)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03615403175354004 
BICCOS Cumulative time: 0.048415422439575195
Preprocessing time: 0.012389659881591797 Inference time: 0.015162944793701172 Add cuts time: 0.008031368255615234 Cut analysis time: 0.0005700588226318359
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0086    decision 0.0208    set_bounds 0.0125    solve 0.0275    add 0.0160    
Accumulated time: pickout 0.0090    decision 0.5648    set_bounds 0.0219    solve 0.1450    add 0.2300    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([45, 37]), tensor([-1., -1.]), tensor([0, 0]), tensor([3.72595843e-11, 2.44153067e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([45, 37]), tensor([-1.,  1.]), tensor([0, 0]), tensor([3.72595843e-11, 1.25857398e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([45, 37]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.01393395e-13, 2.49480769e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([45, 37]), tensor([1., 1.]), tensor([0, 0]), tensor([1.01393395e-13, 1.24383971e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.014905929565429688

all verified at 0th iter
Time: prepare 0.0003    bound 0.0044    transfer 0.0002    finalize 0.0002    func 0.0051    
Accumulated time: func 0.2068    prepare 0.0246    bound 0.1819    transfer 0.0018    finalize 0.0062    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
the mip building process is not terminated yet, kill it
Result: safe in 5.1644 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 159, vnnlib ID: 159 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.94552898, -11.88663006, -11.47941303,  -9.72749805, -12.11168003,
         -10.94520473,  -8.55705357, -13.68229103, -10.67903423, -11.17602921]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [836]; unstable size 836; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 836] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 836] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 836] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 188] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.05637711, 1.39599657, 1.75964952, 0.17517830, 2.39905334, 1.14613748,
         3.57038641, 0.74127960, 1.09699953]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0794 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 160, vnnlib ID: 160 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.69691086, -9.90914440, -3.04869223, -5.95901394, -2.41780186,
         -6.51351690, -5.05484104, -5.98770094, -7.13607407, -9.76951885]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [647]; unstable size 647; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 242, 1, 647] with unstable size 241 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 647] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 647] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [241]; unstable size 241; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 241] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 241] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.95681810,  5.94022369, -0.25544399,  2.46004200,  2.96836090,
          1.44257092,  2.64147139,  3.15622759,  5.52299976]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.69691086, -9.90914440, -3.04869223, -5.95901394, -2.41780186,
         -6.51351690, -5.05484104, -5.98770094, -7.13607407, -9.76951885]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.75it/s]100%|██████████| 1/1 [00:00<00:00,  7.74it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.53398991, -9.76381302, -2.85792804, -5.85641003, -2.57112455,
          -6.37114143, -5.08218336, -6.02840757, -7.07108688, -9.52335644]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.28680348]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1324 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 26.49099349975586
alpha/beta optimization time: 1.3684649467468262
initial alpha-crown bounds: tensor([[ 2.05517435,  6.03731394, -0.21251771,  2.50705338,  3.02221203,
          1.49958694,  2.69033289,  3.27446413,  5.61737347]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.21251770853996277
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6221 seconds.
lower bounds for all target labels: [2.0551719665527344, 6.037313938140869, -0.2125188410282135, 2.5070533752441406, 3.0222113132476807, 1.4995869398117065, 2.6903328895568848, 3.2744641304016113, 5.617372512817383]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [2]
start creating model mps for candidates: ['lay/16_2']
Process 240817 received signal 15. Terminate pool <multiprocessing.pool.Pool state=RUN pool_size=96>
Process 240817 received signal 15. Terminate pool <multiprocessing.pool.Pool state=TERMINATE pool_size=96>
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.33757781982422
Verifying property 0 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 6.037313938140869.

Properties batch 1, size 1
Remaining timeout: 198.17212104797363
Verifying property 1 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 5.617373466491699.

Properties batch 2, size 1
Remaining timeout: 198.07391810417175
Verifying property 2 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.2744641304016113.

Properties batch 3, size 1
Remaining timeout: 197.9642882347107
Verifying property 3 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.022212028503418.

Properties batch 4, size 1
Remaining timeout: 197.86812353134155
Verifying property 4 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.6903328895568848.

Properties batch 5, size 1
Remaining timeout: 197.77499198913574
Verifying property 5 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.5070533752441406.

Properties batch 6, size 1
Remaining timeout: 197.67995262145996
Verifying property 6 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.0551743507385254.

Properties batch 7, size 1
Remaining timeout: 197.58081984519958
Verifying property 7 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.4995869398117065.

Properties batch 8, size 1
Remaining timeout: 197.47061586380005
Verifying property 8 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.21251771]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.69691086, -9.90914440, -3.04869223, -5.95901394, -2.41780186,
        -6.51351690, -5.05484104, -5.98770094, -7.13607407, -9.76951885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.21251771]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 647
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 238
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 906
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0007576942443847656
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0620    transfer 0.0001    finalize 0.0002    func 0.0626    
Accumulated time: func 0.0626    prepare 0.0003    bound 0.0620    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 1] 
split level 2: [/input-12, 25] 
split level 3: [/input-12, 37] 
split level 4: [/input-12, 93] 
split level 5: [/input-12, 26] 
split level 6: [/input-12, 51] 
split level 7: [/input-12, 72] 
split level 8: [/input-12, 42] 
split level 9: [/input-12, 44] 
split level 10: [/input-12, 82] 
split level 11: [/input-8, 1370] 
split level 12: [/input-8, 1300] 
split level 13: [/input-8, 1066] 
split level 14: [/input-8, 1878] 
split level 15: [/input-8, 1291] 
split level 16: [/input-8, 666] 
split level 17: [/input-8, 532] 
split level 18: [/input-8, 682] 
split level 19: [/input-8, 1290] 
split level 20: [/input-8, 1292] 
split level 21: [/input-8, 658] 
split level 22: [/input-8, 1373] 
split level 23: [/input-8, 1020] 
split level 24: [/input-8, 1043] 
split level 25: [/input-8, 1365] 
split level 26: [/input-8, 1357] 
split level 27: [/input-8, 542] 
split level 28: [/input-8, 673] 
split level 29: [/input-8, 1819] 
split level 30: [/input-8, 524] 
split level 31: [/input-8, 468] 
split level 32: [/input-8, 1374] 
split level 33: [/input-8, 1309] 
split level 34: [/input-8, 1297] 
split level 35: [/input-8, 1347] 
split level 36: [/input-8, 517] 
split level 37: [/input-8, 538] 
split level 38: [/input-8, 541] 
split level 39: [/input-8, 698] 
split level 40: [/input, 1142] 
split level 41: [/input-8, 1021] 
split level 42: [/input-8, 484] 
split level 43: [/input-8, 1354] 
split level 44: [/input, 3221] 
split level 45: [/input-8, 79] 
split level 46: [/input, 3219] 
split level 47: [/input, 3220] 
split level 48: [/input-8, 1477] 
split level 49: [/input-8, 476] 
split level 50: [/input-12, 78] 
split level 51: [/input-8, 526] 
split level 52: [/input-8, 1072] 
split level 53: [/input-8, 1778] 
split level 54: [/input-8, 1382] 
split level 55: [/input-8, 1289] 
split level 56: [/input-8, 1349] 
split level 57: [/input-8, 1326] 
split level 58: [/input-8, 979] 
split level 59: [/input, 2452] 
split level 60: [/input-8, 516] 
split level 61: [/input-8, 572] 
split level 62: [/input-8, 87] 
split level 63: [/input-8, 1281] 
split level 64: [/input-8, 1396] 
split level 65: [/input-8, 530] 
split level 66: [/input-8, 1342] 
split level 67: [/input-8, 1388] 
split level 68: [/input-8, 1137] 
split level 69: [/input-8, 670] 
split level 70: [/input-8, 1476] 
split level 71: [/input-8, 1389] 
split level 72: [/input-8, 107] 
split level 73: [/input-8, 1053] 
split level 74: [/input-8, 562] 
split level 75: [/input-8, 1093] 
split level 76: [/input-8, 1478] 
split level 77: [/input-8, 1018] 
split level 78: [/input-8, 1779] 
split level 79: [/input-8, 1764] 
split level 80: [/input-8, 515] 
split level 81: [/input, 4036] 
split level 82: [/input-8, 1130] 
split level 83: [/input, 2453] 
split level 84: [/input-8, 1036] 
split level 85: [/input, 3204] 
split level 86: [/input-8, 860] 
split level 87: [/input-8, 990] 
split level 88: [/input-8, 1780] 
split level 89: [/input, 3430] 
split level 90: [/input-8, 987] 
split level 91: [/input-8, 535] 
split level 92: [/input-8, 895] 
split level 93: [/input-8, 1473] 
split level 94: [/input, 2906] 
split level 95: [/input, 3429] 
split level 96: [/input-12, 53] 
split level 97: [/input-12, 28] 
split level 98: [/input-8, 1438] 
split level 99: [/input, 1624] 
split level 100: [/input-8, 977] 
split level 101: [/input, 4046] 
split level 102: [/input-8, 564] 
split level 103: [/input-8, 1475] 
split level 104: [/input-8, 565] 
split level 105: [/input-8, 1777] 
split level 106: [/input, 450] 
split level 107: [/input, 459] 
split level 108: [/input, 4039] 
split level 109: [/input-8, 1738] 
split level 110: [/input-8, 1765] 
split level 111: [/input-8, 91] 
split level 112: [/input-8, 1457] 
split level 113: [/input, 4006] 
split level 114: [/input, 2149] 
split level 115: [/input-8, 552] 
split level 116: [/input, 453] 
split level 117: [/input, 4005] 
split level 118: [/input, 4020] 
split level 119: [/input, 1444] 
split level 120: [/input, 2922] 
split level 121: [/input-8, 1474] 
split level 122: [/input, 3445] 
split level 123: [/input-8, 1284] 
split level 124: [/input, 3452] 
split level 125: [/input, 2551] 
split level 126: [/input-8, 559] 
split level 127: [/input-8, 543] 
split level 128: [/input, 2235] 
split level 129: [/input, 460] 
split level 130: [/input-8, 982] 
split level 131: [/input, 2251] 
split level 132: [/input, 2535] 
split level 133: [/input, 2909] 
split level 134: [/input-8, 112] 
split level 135: [/input-8, 1294] 
split level 136: [/input, 410] 
split level 137: [/input, 2910] 
split level 138: [/input, 438] 
split level 139: [/input, 2507] 
split level 140: [/input-8, 569] 
split level 141: [/input-8, 1439] 
split level 142: [/input, 2553] 
split level 143: [/input, 2469] 
split level 144: [/input, 1993] 
split level 145: [/input, 3991] 
split level 146: [/input, 1782] 
split level 147: [/input, 2926] 
split level 148: [/input, 2492] 
split level 149: [/input, 2556] 
split level 150: [/input-8, 521] 
split level 151: [/input, 2547] 
split level 152: [/input, 2548] 
split level 153: [/input, 2526] 
split level 154: [/input, 3303] 
split level 155: [/input, 3268] 
split level 156: [/input, 2893] 
split level 157: [/input, 2203] 
split level 158: [/input, 445] 
split level 159: [/input, 2519] 
split level 160: [/input, 2924] 
split level 161: [/input, 2525] 
split level 162: [/input, 2749] 
split level 163: [/input-8, 71] 
split level 164: [/input, 2887] 
split level 165: [/input, 239] 
split level 166: [/input, 3317] 
split level 167: [/input-8, 974] 
split level 168: [/input, 3300] 
split level 169: [/input, 3469] 
split level 170: [/input, 4058] 
split level 171: [/input, 3254] 
split level 172: [/input, 2541] 
split level 173: [/input-8, 594] 
split level 174: [/input, 2491] 
split level 175: [/input, 1783] 
split level 176: [/input, 3318] 
split level 177: [/input, 250] 
split level 178: [/input, 1947] 
split level 179: [/input-8, 1766] 
split level 180: [/input, 1784] 
split level 181: [/input, 3188] 
split level 182: [/input, 4061] 
split level 183: [/input, 446] 
split level 184: [/input, 4018] 
split level 185: [/input, 3284] 
split level 186: [/input, 2538] 
split level 187: [/input, 2921] 
split level 188: [/input-8, 931] 
split level 189: [/input, 2783] 
split level 190: [/input, 2508] 
split level 191: [/input, 1691] 
split level 192: [/input, 3262] 
split level 193: [/input, 3304] 
split level 194: [/input, 2929] 
split level 195: [/input, 3428] 
split level 196: [/input, 1526] 
split level 197: [/input, 1962] 
split level 198: [/input, 3575] 
split level 199: [/input, 1977] 
Time: prepare 0.0060    bound 0.1115    transfer 0.0070    finalize 0.0045    func 0.1290    
Accumulated time: func 0.1917    prepare 0.0166    bound 0.1735    transfer 0.0071    finalize 0.0047    
all_split False
======================Cut inference begins======================
max lb tensor(0.01664513) min lb tensor(-0.21251678)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.013416528701782227 
BICCOS Cumulative time: 0.013416528701782227
Preprocessing time: 0.012162923812866211 Inference time: 8.273124694824219e-05 Add cuts time: 4.9114227294921875e-05 Cut analysis time: 0.0011217594146728516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20007 (1), -0.19931 (1), -0.19922 (1), -0.19884 (1), -0.19873 (1), -0.19870 (1), -0.19839 (1), -0.19818 (1), -0.19745 (1), -0.19722 (1), -0.19709 (1), -0.19693 (1), -0.19679 (1), -0.19658 (1), -0.19653 (1), -0.19645 (1), -0.19573 (1), -0.19547 (1), -0.19451 (1), -0.19368 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5547    set_bounds 0.0125    solve 0.1291    add 0.2136    
Accumulated time: pickout 0.0004    decision 0.5547    set_bounds 0.0125    solve 0.1291    add 0.2136    
Current (lb-rhs): -0.20007357001304626
50 domains visited
Cumulative time: 1.010185718536377

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 25] [/input-12, 25] [/input-12, 1] [/input-12, 25] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 25] [/input-12, 25] [/input-12, 25] 
split level 3: [/input-12, 37] [/input-12, 26] [/input-12, 37] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17806106805801392
10 lb beta sum: 0.18744227290153503, worst -0.1771504282951355
Time: prepare 0.0078    bound 0.1393    transfer 0.0008    finalize 0.0031    func 0.1536    
Accumulated time: func 0.3453    prepare 0.0246    bound 0.3129    transfer 0.0078    finalize 0.0078    
all_split False
======================Cut inference begins======================
max lb tensor(0.08656812) min lb tensor(-0.17697014)
Number of Verified Splits: 29 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.01591944694519043 
BICCOS Cumulative time: 0.029335975646972656
Preprocessing time: 0.01287078857421875 Inference time: 0.0013782978057861328 Add cuts time: 0.00041294097900390625 Cut analysis time: 0.0012574195861816406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06183 (2), -0.06108 (2), -0.06098 (2), -0.06010 (2), -0.06008 (2), -0.05841 (2), -0.05738 (2), -0.05617 (2), -0.05609 (2), -0.05608 (2), -0.05552 (2), -0.05478 (2), -0.05454 (2), -0.05430 (2), -0.05321 (2), -0.05159 (2), -0.05085 (2), -0.05064 (2), -0.05053 (2), -0.04944 (2), 
Length of domains: 50
Time: pickout 0.0080    decision 0.0207    set_bounds 0.0139    solve 0.1538    add 0.2237    
Accumulated time: pickout 0.0084    decision 0.5754    set_bounds 0.0264    solve 0.2829    add 0.4373    
Current (lb-rhs): -0.06182771921157837
100 domains visited
Cumulative time: 1.4530489444732666

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 25] [/input-12, 25] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 1: [/input-12, 25] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 25] 
split level 2: [/input-12, 37] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 37] 
split level 3: [/input-12, 26] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04115013778209686
10 lb beta sum: 0.3064647614955902, worst -0.02137124538421631
Time: prepare 0.0064    bound 0.1346    transfer 0.0008    finalize 0.0024    func 0.1476    
Accumulated time: func 0.4929    prepare 0.0313    bound 0.4475    transfer 0.0086    finalize 0.0102    
all_split False
======================Cut inference begins======================
max lb tensor(0.15123570) min lb tensor(-0.02105331)
Number of Verified Splits: 394 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03966045379638672 
BICCOS Cumulative time: 0.06899642944335938
Preprocessing time: 0.013101339340209961 Inference time: 0.019295215606689453 Add cuts time: 0.00678563117980957 Cut analysis time: 0.0004782676696777344
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0078    decision 0.0206    set_bounds 0.0162    solve 0.1477    add 0.0200    
Accumulated time: pickout 0.0162    decision 0.5960    set_bounds 0.0426    solve 0.4306    add 0.4573    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 25,  1]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([3.30031101e+32, 9.12894309e-02, 5.40398359e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 25,  1]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([3.30031101e+32, 9.12894309e-02, 9.99762565e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 25,  1]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([3.30031101e+32, 6.22047335e-02, 9.87889171e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 25,  1]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([3.30031101e+32, 6.22047335e-02, 9.27543342e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26,  1]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([4.98109887e-11, 5.57914227e-02, 5.57578504e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26,  1]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([4.98109887e-11, 5.57914227e-02, 9.92322862e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26,  1]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([4.98109887e-11, 3.08169890e-02, 1.58616304e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26,  1]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([4.98109887e-11, 3.08169890e-02, 9.87999141e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  8
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.00591365247964859

all verified at 1th iter
Time: prepare 0.0007    bound 0.0123    transfer 0.0002    finalize 0.0002    func 0.0136    
Accumulated time: func 0.5065    prepare 0.0320    bound 0.4598    transfer 0.0088    finalize 0.0104    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
the mip building process is not terminated yet, kill it
Result: safe in 4.8976 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 161, vnnlib ID: 161 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.37989235, -12.20897579,  -6.17734432,  -5.76625729,  -6.93807411,
          -3.77729273,  -8.37195778,  -7.49653196, -10.76665974, -11.58906174]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [456]; unstable size 456; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 195, 1, 456] with unstable size 194 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 456] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 456] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [194]; unstable size 194; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 194] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 194] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.38867855, 6.47063112, 1.48629045, 1.57262683, 2.21376419, 3.23497486,
         2.94880295, 5.30806875, 6.18771648]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0293 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 162, vnnlib ID: 162 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.11128426, -16.94595146,  -9.70340824, -12.93247986, -10.71098232,
         -13.59650612, -11.43742085, -14.93857956, -14.94828510, -17.84584045]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [429]; unstable size 429; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 211, 1, 429] with unstable size 210 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 429] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 429] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [210]; unstable size 210; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 210] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 210] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.12003684, 5.67749023, 2.36852121, 0.16531825, 2.94698167, 0.60728896,
         3.85684586, 3.46587372, 6.63982296]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0645 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 163, vnnlib ID: 163 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.02505970,  -9.52995014,  -8.17180538,  -8.71479893,  -8.61084557,
          -8.27292728,  -9.82778072,  -7.94948912, -11.30757618,  -9.90987301]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [638]; unstable size 638; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 638] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 638] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 638] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 259] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.64107996, -0.23480177, -1.33058906, -0.47275174, -0.46761513,
         -0.91006315,  0.31482816,  1.61070657,  0.12702465]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.02505970,  -9.52995014,  -8.17180538,  -8.71479893,  -8.61084557,
          -8.27292728,  -9.82778072,  -7.94948912, -11.30757618,  -9.90987301]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.53590202,  -9.31555843,  -7.54204559,  -8.31618977,  -8.22403336,
           -7.93875265,  -9.35239506,  -7.99370146, -10.90418053,  -9.78509235],
         [ -8.53590202,  -9.31555843,  -7.54204559,  -8.31618977,  -8.22403336,
           -7.93875265,  -9.35239506,  -7.99370146, -10.90418053,  -9.78509235]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.54220057,  1.32185698, -0.45165586,  0.32248831,  0.23033190,
          -0.05494881]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0076 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0721 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 164, vnnlib ID: 164 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.41563416, -7.71300030, -2.86234260, -2.13727427, -3.26359797,
         -1.15524995, -3.90352178, -2.95602751, -6.72349644, -6.40303564]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [677]; unstable size 677; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 255, 1, 677] with unstable size 254 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 677] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 677] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [254]; unstable size 254; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 254] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 254] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.88557863, 4.58735847, 0.73231387, 0.69587100, 1.00518179, 1.60793078,
         0.80470592, 3.98152161, 3.66006422]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0762 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 165, vnnlib ID: 165 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.93124580, -13.00026798, -10.51418877, -11.34232426, -11.59994984,
         -12.09090137, -13.21082306, -11.37638664, -10.77716541, -12.72988605]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [678]; unstable size 678; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 229, 1, 678] with unstable size 228 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 678] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 678] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [228]; unstable size 228; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 228] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 228] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.97155690, -0.03237724, -1.84702158, -0.69079220, -0.48902345,
          0.04457045,  0.97582519, -2.07122684, -0.15928876]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.93124580, -13.00026798, -10.51418877, -11.34232426, -11.59994984,
         -12.09090137, -13.21082306, -11.37638664, -10.77716541, -12.72988605]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.93124771, -13.00026798, -10.51418972, -11.34232521, -11.59995174,
          -12.09090233, -13.21082497, -11.37638760, -10.77716732, -12.72988605],
         [-11.93124771, -13.00026798, -10.51418972, -11.34232521, -11.59995174,
          -12.09090233, -13.21082497, -11.37638760, -10.77716732, -12.72988605]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.55486012,  1.62388039, -0.86219788, -0.03406239,  0.22356415,
          -0.59922028,  1.35349846]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         ...,


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0784 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 166, vnnlib ID: 166 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.11835384, -8.97128582, -5.58492565, -4.69414091, -4.89179802,
         -5.64415693, -2.85636353, -6.39860678, -9.19930935, -7.69397116]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [551]; unstable size 551; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 328, 1, 551] with unstable size 327 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 551] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 551] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [327]; unstable size 327; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 327] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 327] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.57804894e+00,  3.19466448e+00,  7.62257576e-01,  2.92238951e-01,
         -4.12940979e-04,  8.40279341e-01,  1.08616209e+00,  3.18620515e+00,
          2.37681484e+00]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.11835384, -8.97128582, -5.58492565, -4.69414091, -4.89179802,
         -5.64415693, -2.85636353, -6.39860678, -9.19930935, -7.69397116]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.56it/s]100%|██████████| 1/1 [00:00<00:00,  7.56it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.55216551, -8.57399082, -5.03808975, -4.19881392, -4.09511757,
          -5.05613708, -2.93273902, -5.77291918, -8.65580177, -7.32171822]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[1.16237855]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1350 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 1th iter
best_l after optimization: 14.46798324584961
alpha/beta optimization time: 0.028957366943359375
initial alpha-crown bounds: tensor([[2.59561157, 3.21909404, 0.77398109, 0.30205750, 0.01444960, 0.85292149,
         1.10492146, 3.20971107, 2.39523649]], device='cuda:0')
Number of class (without rhs): 0 ; Worst class: (+ rhs) 0.014449596405029297
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
verified with init bound!
Result: safe-incomplete in 0.3132 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 167, vnnlib ID: 167 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.73988724, -9.75906086, -5.44053173, -6.54372168, -6.64882469,
         -6.77933979, -7.41226196, -7.94059706, -5.61829853, -8.84854412]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [625]; unstable size 625; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 289, 1, 625] with unstable size 288 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 625] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 625] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [288]; unstable size 288; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 288] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 288] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.12974072, -0.58860946,  0.22682792,  0.44695151,  0.33009410,
          0.98268569,  1.32415712, -0.52337837,  2.49502420]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.73988724, -9.75906086, -5.44053173, -6.54372168, -6.64882469,
         -6.77933979, -7.41226196, -7.94059706, -5.61829853, -8.84854412]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.41it/s]100%|██████████| 1/1 [00:00<00:00,  7.41it/s]
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6390 seconds.
lower bounds for all target labels: [2.595611572265625, 3.2190940380096436, 0.7739810943603516, 0.30205750465393066, 0.014449596405029297, 0.8529214859008789, 1.1049214601516724, 3.2097110748291016, 2.3952364921569824]
Number of cpus: 96  Number of subproblems: 0
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: []
start creating model mps for candidates: []
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.70518780, -9.34816551, -5.36907673, -6.25292778, -6.47456360,
          -6.50949335, -7.11633730, -7.72864771, -4.86134338, -8.44863224],
         [-4.70518780, -9.34816551, -5.36907673, -6.25292778, -6.47456360,
          -6.50949335, -7.11633730, -7.72864771, -4.86134338, -8.44863224]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.66388893, 0.15615559]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1383 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 8.481112480163574
alpha/beta optimization time: 1.3489480018615723
initial alpha-crown bounds: tensor([[ 3.24760532, -0.53066164,  0.27715796,  0.50497162,  0.39338529,
          1.04264998,  1.40458369, -0.43028849,  2.57170820]], device='cuda:0')
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.5306616425514221
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6520 seconds.
lower bounds for all target labels: [3.247605323791504, -0.5306616425514221, 0.2771579623222351, 0.5049716234207153, 0.39338529109954834, 1.0426499843597412, 1.4045836925506592, -0.4302886724472046, 2.5717082023620605]
Number of cpus: 96  Number of subproblems: 2
Reassign each subproblems with number of thread: 48
Starting MIP solver for these labels: [1, 7]
start creating model mps for candidates: ['lay/16_1', 'lay/16_7']
parallel mps save finish
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=1_26533211.mps
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=7_26533211.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=1_26533211.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=7_26533211.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 242482 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 242485 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.30363130569458
Verifying property 0 with 1 instances.
##### Instance 167 first 10 spec matrices: 
tensor([[[ 1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.247605323791504.

Properties batch 1, size 1
Remaining timeout: 198.08266234397888
Verifying property 1 with 1 instances.
##### Instance 167 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.5717082023620605.

Properties batch 2, size 1
Remaining timeout: 197.98389720916748
Verifying property 2 with 1 instances.
##### Instance 167 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.4045836925506592.

Properties batch 3, size 1
Remaining timeout: 197.88900089263916
Verifying property 3 with 1 instances.
##### Instance 167 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0426499843597412.

Properties batch 4, size 1
Remaining timeout: 197.79666185379028
Verifying property 4 with 1 instances.
##### Instance 167 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.5049716234207153.

Properties batch 5, size 1
Remaining timeout: 197.70456767082214
Verifying property 5 with 1 instances.
##### Instance 167 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.39338529109954834.

Properties batch 6, size 1
Remaining timeout: 197.59227228164673
Verifying property 6 with 1 instances.
##### Instance 167 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2771579623222351.

Properties batch 7, size 1
Remaining timeout: 197.49408841133118
Verifying property 7 with 1 instances.
##### Instance 167 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.43028849]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.73988724, -9.75906086, -5.44053173, -6.54372168, -6.64882469,
        -6.77933979, -7.41226196, -7.94059706, -5.61829853, -8.84854412],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.43028849]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 625
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 280
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 926
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0008494853973388672
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0627    transfer 0.0001    finalize 0.0002    func 0.0633    
Accumulated time: func 0.0633    prepare 0.0003    bound 0.0627    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 82] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 17] 
split level 3: [/input-12, 53] 
split level 4: [/input-12, 31] 
split level 5: [/input-8, 1139] 
split level 6: [/input-12, 99] 
split level 7: [/input-12, 54] 
split level 8: [/input-12, 26] 
split level 9: [/input-8, 1438] 
split level 10: [/input-8, 1323] 
split level 11: [/input-8, 1446] 
split level 12: [/input-8, 1436] 
split level 13: [/input-8, 1445] 
split level 14: [/input-8, 1444] 
split level 15: [/input, 2771] 
split level 16: [/input-8, 277] 
split level 17: [/input-8, 1437] 
split level 18: [/input-8, 1069] 
split level 19: [/input-8, 1381] 
split level 20: [/input-8, 1434] 
split level 21: [/input-8, 422] 
split level 22: [/input-8, 118] 
split level 23: [/input-8, 293] 
split level 24: [/input-8, 924] 
split level 25: [/input-8, 284] 
split level 26: [/input-8, 926] 
split level 27: [/input-8, 614] 
split level 28: [/input-8, 1111] 
split level 29: [/input-8, 1253] 
split level 30: [/input, 2741] 
split level 31: [/input-8, 413] 
split level 32: [/input, 2726] 
split level 33: [/input-8, 630] 
split level 34: [/input, 1643] 
split level 35: [/input, 1592] 
split level 36: [/input, 4070] 
split level 37: [/input-8, 1447] 
split level 38: [/input-8, 620] 
split level 39: [/input, 1745] 
split level 40: [/input-8, 933] 
split level 41: [/input, 2787] 
split level 42: [/input, 183] 
split level 43: [/input-8, 854] 
split level 44: [/input-8, 550] 
split level 45: [/input-8, 1148] 
split level 46: [/input-8, 1483] 
split level 47: [/input-8, 1571] 
split level 48: [/input-8, 1620] 
split level 49: [/input-8, 410] 
split level 50: [/input-8, 934] 
split level 51: [/input, 1627] 
split level 52: [/input-8, 1325] 
split level 53: [/input-8, 1572] 
split level 54: [/input-8, 476] 
split level 55: [/input, 1623] 
split level 56: [/input, 417] 
split level 57: [/input, 2177] 
split level 58: [/input-8, 925] 
split level 59: [/input, 2601] 
split level 60: [/input-8, 1455] 
split level 61: [/input-8, 606] 
split level 62: [/input-8, 1439] 
split level 63: [/input-8, 567] 
split level 64: [/input-8, 1505] 
split level 65: [/input, 1762] 
split level 66: [/input-8, 1463] 
split level 67: [/input, 4069] 
split level 68: [/input-8, 1484] 
split level 69: [/input, 2209] 
split level 70: [/input-8, 430] 
split level 71: [/input-8, 274] 
split level 72: [/input-8, 1252] 
split level 73: [/input, 371] 
split level 74: [/input, 3438] 
split level 75: [/input, 369] 
split level 76: [/input-8, 294] 
split level 77: [/input, 1626] 
split level 78: [/input, 2585] 
split level 79: [/input-8, 1628] 
split level 80: [/input, 4036] 
split level 81: [/input-8, 1052] 
split level 82: [/input, 2587] 
split level 83: [/input-8, 111] 
split level 84: [/input, 2149] 
split level 85: [/input, 2150] 
split level 86: [/input, 418] 
split level 87: [/input, 2497] 
split level 88: [/input-8, 1238] 
split level 89: [/input, 2133] 
split level 90: [/input-8, 575] 
split level 91: [/input-8, 941] 
split level 92: [/input, 198] 
split level 93: [/input, 2759] 
split level 94: [/input, 2151] 
split level 95: [/input, 2140] 
split level 96: [/input-8, 1013] 
split level 97: [/input, 1620] 
split level 98: [/input-8, 103] 
split level 99: [/input, 2754] 
split level 100: [/input-8, 628] 
split level 101: [/input, 4055] 
split level 102: [/input, 2600] 
split level 103: [/input-8, 412] 
split level 104: [/input-8, 85] 
split level 105: [/input, 4038] 
split level 106: [/input-8, 475] 
split level 107: [/input-8, 469] 
split level 108: [/input, 1364] 
split level 109: [/input, 4006] 
split level 110: [/input, 1714] 
split level 111: [/input, 2709] 
split level 112: [/input-8, 276] 
split level 113: [/input, 37] 
split level 114: [/input-8, 1021] 
split level 115: [/input-8, 1486] 
split level 116: [/input, 2119] 
split level 117: [/input-8, 1521] 
split level 118: [/input, 2616] 
split level 119: [/input, 2513] 
split level 120: [/input, 1411] 
split level 121: [/input-8, 1063] 
split level 122: [/input, 2599] 
split level 123: [/input-8, 440] 
split level 124: [/input, 1609] 
split level 125: [/input, 192] 
split level 126: [/input-8, 458] 
split level 127: [/input, 3265] 
split level 128: [/input, 3454] 
split level 129: [/input-8, 1429] 
split level 130: [/input-8, 421] 
split level 131: [/input, 2225] 
split level 132: [/input-8, 445] 
split level 133: [/input-8, 1573] 
split level 134: [/input, 2770] 
split level 135: [/input-8, 1006] 
split level 136: [/input, 294] 
split level 137: [/input-8, 1347] 
split level 138: [/input-8, 629] 
split level 139: [/input-8, 500] 
split level 140: [/input-8, 1055] 
split level 141: [/input, 3249] 
split level 142: [/input, 2257] 
split level 143: [/input, 1698] 
split level 144: [/input, 2584] 
split level 145: [/input, 176] 
split level 146: [/input-8, 1608] 
split level 147: [/input, 1577] 
split level 148: [/input, 824] 
split level 149: [/input, 1439] 
split level 150: [/input, 2136] 
split level 151: [/input-8, 1625] 
split level 152: [/input, 2102] 
split level 153: [/input-8, 484] 
split level 154: [/input-8, 1261] 
split level 155: [/input, 2786] 
split level 156: [/input-8, 501] 
split level 157: [/input, 2466] 
split level 158: [/input, 2603] 
split level 159: [/input, 1363] 
split level 160: [/input, 2139] 
split level 161: [/input, 4007] 
split level 162: [/input, 3217] 
split level 163: [/input, 160] 
split level 164: [/input, 2629] 
split level 165: [/input-8, 502] 
split level 166: [/input, 4049] 
split level 167: [/input-8, 1581] 
split level 168: [/input, 4089] 
split level 169: [/input-8, 1230] 
split level 170: [/input, 3442] 
split level 171: [/input, 2913] 
split level 172: [/input, 2630] 
split level 173: [/input, 2371] 
split level 174: [/input-8, 1027] 
split level 175: [/input, 2104] 
split level 176: [/input, 216] 
split level 177: [/input, 1675] 
split level 178: [/input, 4008] 
split level 179: [/input, 1415] 
split level 180: [/input, 2206] 
split level 181: [/input, 970] 
split level 182: [/input, 4056] 
split level 183: [/input, 4039] 
split level 184: [/input-8, 450] 
split level 185: [/input, 1115] 
split level 186: [/input-8, 478] 
split level 187: [/input, 2537] 
split level 188: [/input, 307] 
split level 189: [/input, 2116] 
split level 190: [/input, 3654] 
split level 191: [/input, 4018] 
split level 192: [/input-8, 1254] 
split level 193: [/input, 2480] 
split level 194: [/input, 3349] 
split level 195: [/input, 1406] 
split level 196: [/input, 2830] 
split level 197: [/input, 3280] 
split level 198: [/input-8, 454] 
split level 199: [/input, 921] 
Time: prepare 0.0060    bound 0.1089    transfer 0.0076    finalize 0.0052    func 0.1278    
Accumulated time: func 0.1911    prepare 0.0166    bound 0.1716    transfer 0.0077    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(0.29872990) min lb tensor(-0.43022776)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.014494657516479492 
BICCOS Cumulative time: 0.014494657516479492
Preprocessing time: 0.013184785842895508 Inference time: 9.5367431640625e-05 Add cuts time: 6.031990051269531e-05 Cut analysis time: 0.001154184341430664
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.41681 (1), -0.41668 (1), -0.41636 (1), -0.41632 (1), -0.41619 (1), -0.41599 (1), -0.41588 (1), -0.41587 (1), -0.41499 (1), -0.41497 (1), -0.41493 (1), -0.41406 (1), -0.41355 (1), -0.41318 (1), -0.41229 (1), -0.41185 (1), -0.41168 (1), -0.41157 (1), -0.41025 (1), -0.40885 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5599    set_bounds 0.0126    solve 0.1279    add 0.1980    
Accumulated time: pickout 0.0004    decision 0.5599    set_bounds 0.0126    solve 0.1279    add 0.1980    
Current (lb-rhs): -0.4168087840080261
50 domains visited
Cumulative time: 1.0042386054992676

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 17] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 17] [/input-12, 82] [/input-12, 82] 
split level 1: [/input-12, 53] [/input-12, 17] [/input-12, 53] [/input-12, 17] [/input-12, 53] [/input-12, 17] [/input-12, 53] [/input-12, 53] [/input-12, 17] [/input-12, 17] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 53] [/input-12, 31] [/input-12, 53] [/input-12, 17] [/input-12, 31] [/input-12, 53] [/input-12, 31] 
split level 3: [/input-8, 1436] [/input-12, 26] [/input-12, 26] [/input-12, 31] [/input-12, 26] [/input-12, 31] [/input-12, 31] [/input-12, 26] [/input-12, 31] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.39576274156570435
10 lb beta sum: 0.18990863859653473, worst -0.39158812165260315
Time: prepare 0.0078    bound 0.1382    transfer 0.0117    finalize 0.0043    func 0.1649    
Accumulated time: func 0.3560    prepare 0.0247    bound 0.3098    transfer 0.0194    finalize 0.0097    
all_split False
======================Cut inference begins======================
max lb tensor(0.27107513) min lb tensor(-0.39155260)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01909160614013672 
BICCOS Cumulative time: 0.03358626365661621
Preprocessing time: 0.014106512069702148 Inference time: 0.0026471614837646484 Add cuts time: 0.0016565322875976562 Cut analysis time: 0.0006814002990722656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15930 (2), -0.15926 (2), -0.15783 (2), -0.15649 (2), -0.15638 (2), -0.15626 (2), -0.15568 (2), -0.15558 (2), -0.15435 (2), -0.15405 (2), -0.15358 (2), -0.15175 (2), -0.15160 (2), -0.15074 (2), -0.15065 (2), -0.15010 (2), -0.15009 (2), -0.14882 (2), -0.14841 (2), -0.14800 (2), 
Length of domains: 50
Time: pickout 0.0059    decision 0.0227    set_bounds 0.0161    solve 0.1651    add 0.1958    
Accumulated time: pickout 0.0063    decision 0.5826    set_bounds 0.0287    solve 0.2930    add 0.3938    
Current (lb-rhs): -0.15929998457431793
100 domains visited
Cumulative time: 1.429572343826294

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 46] [/input-12, 46] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
split level 1: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 46] [/input-12, 53] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 53] [/input-12, 31] [/input-12, 53] [/input-12, 31] [/input-12, 31] 
split level 3: [/input-8, 118] [/input-8, 1323] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 31] [/input-8, 118] [/input-12, 31] [/input-12, 26] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1561771035194397
10 lb beta sum: 0.5190644860267639, worst -0.015815138816833496
Time: prepare 0.0083    bound 0.1392    transfer 0.0008    finalize 0.0047    func 0.1558    
Accumulated time: func 0.5118    prepare 0.0333    bound 0.4489    transfer 0.0202    finalize 0.0144    
all_split False
======================Cut inference begins======================
max lb tensor(0.40861589) min lb tensor(-0.01292548)
Number of Verified Splits: 388 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.04331541061401367 
BICCOS Cumulative time: 0.07690167427062988
Preprocessing time: 0.013854026794433594 Inference time: 0.019195079803466797 Add cuts time: 0.009388446807861328 Cut analysis time: 0.0008778572082519531
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0014    decision 0.0207    set_bounds 0.0182    solve 0.1560    add 0.0218    
Accumulated time: pickout 0.0077    decision 0.6033    set_bounds 0.0470    solve 0.4491    add 0.4156    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([17, 82]), tensor([-1., -1.]), tensor([0, 0]), tensor([6.38221698e-11, 3.47544372e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([17, 82]), tensor([-1.,  1.]), tensor([0, 0]), tensor([6.38221698e-11, 8.80164355e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([17, 31, 82]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.59448791e-06, 6.43085688e-02, 3.35751861e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([17, 31, 82]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.59448791e-06, 6.43085688e-02, 1.56019703e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([17, 31, 82]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.59448791e-06, 3.38864177e-02, 3.44450682e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([17, 31, 82]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([1.59448791e-06, 3.38864177e-02, 1.58906624e-01]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21467870473861694
10 lb beta sum: 0.5160617828369141, worst -0.14987826347351074
Time: prepare 0.0006    bound 0.1486    transfer 0.0002    finalize 0.0002    func 0.1497    
Accumulated time: func 0.6615    prepare 0.0339    bound 0.5975    transfer 0.0204    finalize 0.0146    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] 
split level 1: [/input-12, 53] 
split level 2: [/input-12, 31] 
split level 3: [/input-12, 99] 
split level 4: [/input-12, 54] 
split level 5: [/input-12, 26] 
split level 6: [/input-8, 1323] 
split level 7: [/input-8, 1436] 
cut re-enabled after branching node selection
0 lb beta sum: 1.208592176437378, worst -0.09530675411224365
10 lb beta sum: 1.208592176437378, worst -0.09456121921539307
Time: prepare 0.0117    bound 0.1516    transfer 0.0039    finalize 0.0021    func 0.1720    
Accumulated time: func 0.8335    prepare 0.0460    bound 0.7491    transfer 0.0244    finalize 0.0167    
all_split False
======================Cut inference begins======================
max lb tensor(0.69290149) min lb tensor(-0.09422278)
Number of Verified Splits: 243 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.208592176437378, worst -0.33448803424835205
10 lb beta sum: 1.4513026475906372, worst -0.10949969291687012
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 6
#cuts 7-9: 9
#cuts >= 20: 0
BICCOS time: 0.33698511123657227 
BICCOS Cumulative time: 0.41388678550720215
Preprocessing time: 0.008783102035522461 Inference time: 0.3187222480773926 Add cuts time: 0.007802009582519531 Cut analysis time: 0.0016777515411376953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09422 (8), -0.08130 (8), -0.07997 (8), -0.06739 (8), -0.06703 (8), -0.05580 (8), -0.05352 (8), -0.04192 (8), -0.02503 (8), -0.01293 (8), -0.01101 (8), -0.00561 (8), -0.00194 (8), 
Length of domains: 13
Time: pickout 0.0005    decision 0.0236    set_bounds 0.0268    solve 0.1722    add 0.0400    
Accumulated time: pickout 0.0082    decision 0.6269    set_bounds 0.0738    solve 0.6213    add 0.4556    
Current (lb-rhs): -0.0942227840423584
113 domains visited
Cumulative time: 2.5029335021972656

BaB round 2
batch: 13
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 118] [/input-8, 118] [/input-8, 413] [/input-8, 118] [/input-8, 118] [/input-8, 413] [/input-8, 118] [/input-8, 1437] [/input-8, 413] [/input-8, 413] 
split level 1: [/input-8, 413] [/input-8, 1437] [/input-8, 924] [/input-8, 413] [/input-8, 1437] [/input-8, 924] [/input-8, 1437] [/input-8, 413] [/input-8, 924] [/input-8, 924] 
split level 2: [/input-8, 1437] [/input-8, 924] [/input-8, 1620] [/input-8, 1437] [/input-8, 924] [/input-8, 1620] [/input-8, 413] [/input-8, 924] [/input-8, 1620] [/input-8, 1620] 
split level 3: [/input-8, 410] [/input-8, 410] [/input-8, 1628] [/input-8, 410] [/input-8, 410] [/input-8, 1628] [/input-8, 410] [/input-8, 410] [/input-8, 1628] [/input-8, 1628] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0755358338356018
10 lb beta sum: 0.1280602514743805, worst -0.07474948465824127
Time: prepare 0.0045    bound 0.1621    transfer 0.0125    finalize 0.0049    func 0.1861    
Accumulated time: func 1.0196    prepare 0.0508    bound 0.9113    transfer 0.0368    finalize 0.0217    
all_split False
======================Cut inference begins======================
max lb tensor(0.04116541) min lb tensor(-0.07452616)
Number of Verified Splits: 79 of 208
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.020788908004760742 
BICCOS Cumulative time: 0.4346756935119629
Preprocessing time: 0.009108543395996094 Inference time: 0.009256601333618164 Add cuts time: 0.0008535385131835938 Cut analysis time: 0.0015702247619628906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07453 (12), -0.07377 (12), -0.06945 (12), -0.06882 (12), -0.06873 (12), -0.06810 (12), -0.06502 (12), -0.06429 (12), -0.06238 (12), -0.06172 (12), -0.06164 (12), -0.06121 (12), -0.06090 (12), -0.06063 (12), -0.06014 (12), -0.05979 (12), -0.05834 (12), -0.05768 (12), -0.05708 (12), -0.05669 (12), 
Length of domains: 129
Time: pickout 0.0018    decision 0.0144    set_bounds 0.0131    solve 0.1862    add 0.2294    
Accumulated time: pickout 0.0100    decision 0.6413    set_bounds 0.0869    solve 0.8075    add 0.6851    
Current (lb-rhs): -0.07452616095542908
242 domains visited
Cumulative time: 3.0174574851989746

BaB round 3
batch: 129
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 924] [/input-8, 630] [/input-8, 924] [/input-8, 630] [/input-8, 924] [/input-8, 630] [/input-8, 924] [/input-8, 630] [/input-8, 924] [/input-8, 630] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07188111543655396
10 lb beta sum: 0.19118958711624146, worst -0.07127644121646881
Time: prepare 0.0066    bound 0.1450    transfer 0.0058    finalize 0.0022    func 0.1613    
Accumulated time: func 1.1809    prepare 0.0577    bound 1.0562    transfer 0.0427    finalize 0.0238    
all_split False
======================Cut inference begins======================
max lb tensor(0.00741190) min lb tensor(-0.07120672)
Number of Verified Splits: 12 of 258
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=7_26533211.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0026
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 8
#cuts 4-6: 1
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.013509988784790039 
BICCOS Cumulative time: 0.44818568229675293
Preprocessing time: 0.00864553451538086 Inference time: 0.0016603469848632812 Add cuts time: 0.00022172927856445312 Cut analysis time: 0.0029823780059814453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07121 (13), -0.07047 (13), -0.06593 (13), -0.06531 (13), -0.06524 (13), -0.06456 (13), -0.06112 (13), -0.06039 (13), -0.05888 (13), -0.05837 (13), -0.05824 (13), -0.05807 (13), -0.05777 (13), -0.05764 (13), -0.05735 (13), -0.05721 (13), -0.05676 (13), -0.05642 (13), -0.05444 (13), -0.05380 (13), 
Length of domains: 246
Time: pickout 0.0453    decision 0.0315    set_bounds 0.0154    solve 0.1614    add 0.0818    
Accumulated time: pickout 0.0554    decision 0.6728    set_bounds 0.1022    solve 0.9689    add 0.7669    
Current (lb-rhs): -0.0712067186832428
488 domains visited
Cumulative time: 3.373863697052002

BaB round 4
batch: 246
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 413] [/input-8, 1620] [/input-8, 413] [/input-8, 1620] [/input-8, 118] [/input-8, 1620] [/input-8, 118] [/input-8, 1620] [/input-8, 413] [/input-8, 1620] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06852483749389648
10 lb beta sum: 0.18647979199886322, worst -0.06798900663852692
Time: prepare 0.0110    bound 0.1431    transfer 0.0085    finalize 0.0048    func 0.1708    
Accumulated time: func 1.3517    prepare 0.0689    bound 1.1993    transfer 0.0512    finalize 0.0287    
all_split False
======================Cut inference begins======================
max lb tensor(0.00514430) min lb tensor(-0.06794938)
Number of Verified Splits: 36 of 492
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=7_26533211.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0026
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 8
#cuts 4-6: 4
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.029720306396484375 
BICCOS Cumulative time: 0.4779059886932373
Preprocessing time: 0.01965022087097168 Inference time: 0.005797147750854492 Add cuts time: 0.000946044921875 Cut analysis time: 0.003326892852783203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06795 (14), -0.06721 (14), -0.06255 (14), -0.06203 (14), -0.06189 (14), -0.06128 (14), -0.05782 (14), -0.05708 (14), -0.05673 (14), -0.05601 (14), -0.05559 (14), -0.05496 (14), -0.05474 (14), -0.05452 (14), -0.05439 (14), -0.05403 (14), -0.05394 (14), -0.05365 (14), -0.05295 (14), -0.05262 (14), 
Length of domains: 456
Time: pickout 0.0184    decision 0.0259    set_bounds 0.0207    solve 0.1710    add 0.1084    
Accumulated time: pickout 0.0738    decision 0.6987    set_bounds 0.1229    solve 1.1399    add 0.8753    
Current (lb-rhs): -0.06794938445091248
944 domains visited
Cumulative time: 3.7532646656036377

BaB round 5
batch: 456
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1571] [/input-8, 1571] [/input, 1623] [/input-8, 550] [/input, 1623] [/input-8, 1571] [/input-8, 550] [/input-8, 1571] [/input-8, 550] [/input, 1623] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06514781713485718
10 lb beta sum: 0.18281243741512299, worst -0.06467403471469879
Time: prepare 0.0220    bound 0.1566    transfer 0.0117    finalize 0.0068    func 0.2032    
Accumulated time: func 1.5548    prepare 0.0911    bound 1.3559    transfer 0.0629    finalize 0.0355    
all_split False
======================Cut inference begins======================
max lb tensor(0.00592989) min lb tensor(-0.06464848)
Number of Verified Splits: 91 of 912
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=7_26533211.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 8
#cuts 4-6: 8
#cuts 7-9: 10
#cuts >= 20: 0
BICCOS time: 0.050301313400268555 
BICCOS Cumulative time: 0.5282073020935059
Preprocessing time: 0.033238887786865234 Inference time: 0.012578010559082031 Add cuts time: 0.0021791458129882812 Cut analysis time: 0.002305269241333008
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06465 (15), -0.06405 (15), -0.06129 (15), -0.06044 (15), -0.05875 (15), -0.05855 (15), -0.05815 (15), -0.05798 (15), -0.05544 (15), -0.05537 (15), -0.05461 (15), -0.05452 (15), -0.05425 (15), -0.05393 (15), -0.05277 (15), -0.05218 (15), -0.05167 (15), -0.05144 (15), -0.05122 (15), -0.05121 (15), 
Length of domains: 821
Time: pickout 0.0209    decision 0.0407    set_bounds 0.3194    solve 0.2034    add 0.1381    
Accumulated time: pickout 0.0947    decision 0.7393    set_bounds 0.4423    solve 1.3433    add 1.0134    
Current (lb-rhs): -0.06464847922325134
1765 domains visited
Cumulative time: 4.531768083572388

BaB round 6
batch: 821
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1623] [/input, 1623] [/input-8, 1571] [/input, 1623] [/input-8, 1571] [/input, 1623] [/input-8, 1325] [/input, 1623] [/input, 1623] [/input-8, 1571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.061217308044433594
10 lb beta sum: 0.17761071026325226, worst -0.06071095168590546
Time: prepare 0.0399    bound 0.1593    transfer 0.0210    finalize 0.0109    func 0.2420    
Accumulated time: func 1.7968    prepare 0.1312    bound 1.5152    transfer 0.0839    finalize 0.0464    
all_split False
======================Cut inference begins======================
max lb tensor(0.00875349) min lb tensor(-0.06068611)
Number of Verified Splits: 221 of 1642
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=7_26533211.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 49.
#cuts 1-3: 8
#cuts 4-6: 26
#cuts 7-9: 15
#cuts >= 20: 0
BICCOS time: 0.09891176223754883 
BICCOS Cumulative time: 0.6271190643310547
Preprocessing time: 0.06026935577392578 Inference time: 0.029976606369018555 Add cuts time: 0.005224466323852539 Cut analysis time: 0.003441333770751953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06069 (16), -0.06013 (16), -0.05767 (16), -0.05732 (16), -0.05665 (16), -0.05656 (16), -0.05561 (16), -0.05509 (16), -0.05475 (16), -0.05435 (16), -0.05422 (16), -0.05331 (16), -0.05304 (16), -0.05257 (16), -0.05232 (16), -0.05163 (16), -0.05141 (16), -0.05125 (16), -0.05068 (16), -0.05053 (16), 
Length of domains: 1421
Time: pickout 0.0858    decision 0.0593    set_bounds 0.0647    solve 0.2424    add 0.1158    
Accumulated time: pickout 0.1805    decision 0.7986    set_bounds 0.5070    solve 1.5857    add 1.1292    
Current (lb-rhs): -0.06068611145019531
3186 domains visited
Cumulative time: 5.215462923049927

BaB round 7
batch: 1421
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1620] [/input-8, 1572] [/input-8, 1572] [/input-8, 1571] [/input-8, 1572] [/input-8, 1572] [/input-8, 1572] [/input-8, 1571] [/input-8, 1572] [/input-8, 1571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.056854426860809326
10 lb beta sum: 0.1738027185201645, worst -0.05639447271823883
Time: prepare 0.0698    bound 0.2903    transfer 0.0402    finalize 0.0171    func 0.4371    
Accumulated time: func 2.2339    prepare 0.2012    bound 1.8055    transfer 0.1241    finalize 0.0634    
all_split False
======================Cut inference begins======================
max lb tensor(0.00968835) min lb tensor(-0.05637291)
Number of Verified Splits: 482 of 2842
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=7_26533211.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 85.
#cuts 1-3: 8
#cuts 4-6: 42
#cuts 7-9: 35
#cuts >= 20: 0
BICCOS time: 0.32613039016723633 
BICCOS Cumulative time: 0.953249454498291
Preprocessing time: 0.09682130813598633 Inference time: 0.20769023895263672 Add cuts time: 0.016613483428955078 Cut analysis time: 0.005005359649658203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05637 (17), -0.05584 (17), -0.05479 (17), -0.05419 (17), -0.05330 (17), -0.05308 (17), -0.05234 (17), -0.05231 (17), -0.05187 (17), -0.05176 (17), -0.05148 (17), -0.05113 (17), -0.05101 (17), -0.05098 (17), -0.05096 (17), -0.05061 (17), -0.05044 (17), -0.04980 (17), -0.04936 (17), -0.04901 (17), 
Length of domains: 2360
Time: pickout 0.0467    decision 0.0932    set_bounds 0.1225    solve 0.4378    add 0.1289    
Accumulated time: pickout 0.2272    decision 0.8918    set_bounds 0.6295    solve 2.0235    add 1.2581    
Current (lb-rhs): -0.05637291073799133
5546 domains visited
Cumulative time: 6.387136697769165

BaB round 8
batch: 2360
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 630] [/input-8, 1148] [/input-8, 1148] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0532873272895813
10 lb beta sum: 0.17219899594783783, worst -0.05271202325820923
Time: prepare 0.1250    bound 0.4441    transfer 0.0596    finalize 0.0273    func 0.6881    
Accumulated time: func 2.9220    prepare 0.3265    bound 2.2496    transfer 0.1837    finalize 0.0908    
all_split False
======================Cut inference begins======================
max lb tensor(0.01222695) min lb tensor(-0.05267991)
Number of Verified Splits: 1778 of 4720
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=7_26533211.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0015
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 180.
#cuts 1-3: 8
#cuts 4-6: 109
#cuts 7-9: 63
#cuts >= 20: 0
BICCOS time: 0.5122451782226562 
BICCOS Cumulative time: 1.4654946327209473
Preprocessing time: 0.16334843635559082 Inference time: 0.2700638771057129 Add cuts time: 0.0693674087524414 Cut analysis time: 0.009465456008911133
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05268 (18), -0.05213 (18), -0.05104 (18), -0.05059 (18), -0.05042 (18), -0.05012 (18), -0.04999 (18), -0.04945 (18), -0.04942 (18), -0.04904 (18), -0.04903 (18), -0.04890 (18), -0.04876 (18), -0.04849 (18), -0.04843 (18), -0.04819 (18), -0.04739 (18), -0.04735 (18), -0.04733 (18), -0.04729 (18), 
Length of domains: 2942
Time: pickout 0.0545    decision 0.1403    set_bounds 0.2134    solve 0.6898    add 0.1463    
Accumulated time: pickout 0.2817    decision 1.0322    set_bounds 0.8429    solve 2.7133    add 1.4044    
Current (lb-rhs): -0.05267991125583649
8488 domains visited
Cumulative time: 8.16559886932373

BaB round 9
batch: 2942
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 550] [/input-8, 1325] [/input-8, 1620] [/input-8, 1620] [/input-8, 550] [/input-8, 550] [/input-8, 1620] [/input-8, 1148] [/input-8, 1620] [/input-8, 550] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.051616013050079346
10 lb beta sum: 0.16600677371025085, worst -0.05116584897041321
Time: prepare 0.1609    bound 0.5637    transfer 0.1076    finalize 0.0493    func 0.9225    
Accumulated time: func 3.8445    prepare 0.4876    bound 2.8132    transfer 0.2912    finalize 0.1401    
all_split False
======================Cut inference begins======================
max lb tensor(0.02751179) min lb tensor(-0.05113573)
Number of Verified Splits: 1648 of 5884
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=7_26533211.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 190.
#cuts 1-3: 9
#cuts 4-6: 143
#cuts 7-9: 38
#cuts >= 20: 0
BICCOS time: 0.7519686222076416 
BICCOS Cumulative time: 2.217463254928589
Preprocessing time: 0.2078564167022705 Inference time: 0.44388771057128906 Add cuts time: 0.09102034568786621 Cut analysis time: 0.00920414924621582
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05114 (19), -0.05055 (19), -0.04948 (19), -0.04899 (19), -0.04888 (19), -0.04855 (19), -0.04840 (19), -0.04790 (19), -0.04748 (19), -0.04742 (19), -0.04721 (19), -0.04694 (19), -0.04690 (19), -0.04664 (19), -0.04586 (19), -0.04579 (19), -0.04577 (19), -0.04571 (19), -0.04538 (19), -0.04537 (19), 
Length of domains: 4236
Time: pickout 0.1432    decision 0.3376    set_bounds 0.2629    solve 0.9242    add 0.1646    
Accumulated time: pickout 0.4249    decision 1.3698    set_bounds 1.1058    solve 3.6375    add 1.5690    
Current (lb-rhs): -0.05113573372364044
12724 domains visited
Cumulative time: 10.775507688522339

BaB round 10
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1572] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05015915632247925
10 lb beta sum: 0.14681100845336914, worst -0.049714162945747375
Time: prepare 0.2257    bound 0.7626    transfer 0.0768    finalize 0.0574    func 1.3702    
Accumulated time: func 5.2146    prepare 0.7137    bound 3.5758    transfer 0.3681    finalize 0.1974    
all_split False
======================Cut inference begins======================
max lb tensor(0.04345481) min lb tensor(-0.04969522)
Number of Verified Splits: 4099 of 8192
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=7_26533211.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0015
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 160.
#cuts 1-3: 10
#cuts 4-6: 131
#cuts 7-9: 19
#cuts >= 20: 0
BICCOS time: 1.1044163703918457 
BICCOS Cumulative time: 3.3218796253204346
Preprocessing time: 0.29060816764831543 Inference time: 0.6694588661193848 Add cuts time: 0.13672518730163574 Cut analysis time: 0.007624149322509766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04970 (20), -0.04910 (20), -0.04805 (20), -0.04747 (20), -0.04743 (20), -0.04709 (20), -0.04688 (20), -0.04647 (20), -0.04598 (20), -0.04593 (20), -0.04576 (20), -0.04547 (20), -0.04540 (20), -0.04522 (20), -0.04441 (20), -0.04438 (20), -0.04426 (20), -0.04420 (20), -0.04394 (20), -0.04394 (20), 
Length of domains: 4233
Time: pickout 0.0836    decision 0.2381    set_bounds 0.4010    solve 1.3723    add 0.2083    
Accumulated time: pickout 0.5084    decision 1.6079    set_bounds 1.5068    solve 5.0098    add 1.7774    
Current (lb-rhs): -0.049695223569869995
16817 domains visited
current_vram/total_varm: 11.4GB/99.9GB, batch_size increase to 8192
Cumulative time: 14.230135202407837

BaB round 11
batch: 4233
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.045934438705444336
10 lb beta sum: 0.16822929680347443, worst -0.04927551746368408
Time: prepare 0.2313    bound 0.7747    transfer 0.0424    finalize 0.0567    func 1.1610    
Accumulated time: func 6.3756    prepare 0.9453    bound 4.3505    transfer 0.4105    finalize 0.2541    
all_split False
======================Cut inference begins======================
max lb tensor(0.05067113) min lb tensor(-0.04545793)
Number of Verified Splits: 4729 of 8466
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=7_26533211.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=7_26533211.cuts: total 389 constraints, 27237 nonzero elements
cuts preparing time: 0.0131
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 566.
#cuts 1-3: 87
#cuts 4-6: 152
#cuts 7-9: 14
#cuts 10-12: 3
#cuts 13-15: 6
#cuts 16-18: 18
#cuts 19-21: 19
#cuts >= 20: 267
BICCOS time: 1.7168827056884766 
BICCOS Cumulative time: 5.038762331008911
Preprocessing time: 0.2965373992919922 Inference time: 1.024998664855957 Add cuts time: 0.15365242958068848 Cut analysis time: 0.24169421195983887
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04546 (21), -0.04487 (21), -0.04403 (21), -0.04402 (21), -0.04382 (21), -0.04379 (21), -0.04344 (21), -0.04343 (21), -0.04320 (21), -0.04319 (21), -0.04254 (21), -0.04237 (21), -0.04191 (21), -0.04174 (21), -0.04169 (21), -0.04151 (21), -0.04129 (21), -0.04122 (21), -0.04118 (21), -0.04097 (21), 
Length of domains: 3737
Time: pickout 0.1651    decision 0.2446    set_bounds 0.6011    solve 1.1634    add 0.1589    
Accumulated time: pickout 0.6736    decision 1.8525    set_bounds 2.1079    solve 6.1733    add 1.9362    
Current (lb-rhs): -0.045457929372787476
20554 domains visited
Cumulative time: 18.3360013961792

BaB round 12
batch: 3737
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 550] [/input-8, 1325] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 1572] [/input-8, 550] [/input-8, 550] [/input-8, 550] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04268014430999756
10 lb beta sum: 2.0594348907470703, worst -0.015326842665672302
Time: prepare 0.2094    bound 1.4582    transfer 0.0506    finalize 0.2699    func 2.0391    
Accumulated time: func 8.4147    prepare 1.1550    bound 5.8087    transfer 0.4612    finalize 0.5240    
all_split False
======================Cut inference begins======================
max lb tensor(0.05146870) min lb tensor(9.53674316e-07)
Number of Verified Splits: 7474 of 7474
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 7
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=7_26533211.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0053
Total number of valid cuts: 566.
#cuts 1-3: 87
#cuts 4-6: 152
#cuts 7-9: 14
#cuts 10-12: 3
#cuts 13-15: 6
#cuts 16-18: 18
#cuts 19-21: 19
#cuts >= 20: 267
BICCOS time: 0.27092599868774414 
BICCOS Cumulative time: 5.309688329696655
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0948    decision 0.2215    set_bounds 0.3740    solve 2.0410    add 0.0007    
Accumulated time: pickout 0.7684    decision 2.0740    set_bounds 2.4820    solve 8.2142    add 1.9369    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
20554 domains visited
Cumulative time: 21.402806520462036

found process to kill: terminal indx = 7
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=7_26533211.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=7_26533211.cuts
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=7_26533211.indx
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=7_26533211.log

Properties batch 8, size 1
Remaining timeout: 175.91547918319702
Verifying property 8 with 1 instances.
##### Instance 167 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.53066164]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.73988724, -9.75906086, -5.44053173, -6.54372168, -6.64882469,
        -6.77933979, -7.41226196, -7.94059706, -5.61829853, -8.84854412],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.53066164]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 625
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 280
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 926
-----------------

======================Cut verification begins======================
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=1_26533211.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=1_26533211.cuts: total 583 constraints, 29250 nonzero elements
cuts preparing time: 0.0119
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.24711155891418457
======================Cut verification ends======================
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5306601524353027
10 lb beta sum: 4.720413684844971, worst -0.47592660784721375
Time: prepare 0.0002    bound 0.5354    transfer 0.0002    finalize 0.0001    func 0.5359    
Accumulated time: func 0.5359    prepare 0.0002    bound 0.5354    transfer 0.0002    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 1] 
split level 3: [/input-12, 26] 
split level 4: [/input-12, 4] 
split level 5: [/input-12, 41] 
split level 6: [/input-12, 90] 
split level 7: [/input-12, 10] 
split level 8: [/input-8, 1637] 
split level 9: [/input-8, 1628] 
split level 10: [/input-12, 45] 
split level 11: [/input-8, 1438] 
split level 12: [/input-8, 542] 
split level 13: [/input-8, 1620] 
split level 14: [/input-8, 1309] 
split level 15: [/input-8, 1889] 
split level 16: [/input-8, 659] 
split level 17: [/input-8, 845] 
split level 18: [/input-8, 1890] 
split level 19: [/input-8, 1052] 
split level 20: [/input-8, 1885] 
split level 21: [/input-8, 996] 
split level 22: [/input-8, 413] 
split level 23: [/input-8, 1446] 
split level 24: [/input-8, 1069] 
split level 25: [/input-8, 1003] 
split level 26: [/input-8, 284] 
split level 27: [/input-8, 1011] 
split level 28: [/input-8, 1289] 
split level 29: [/input-8, 1437] 
split level 30: [/input-8, 549] 
split level 31: [/input-8, 1453] 
split level 32: [/input-8, 854] 
split level 33: [/input-8, 1461] 
split level 34: [/input-8, 1071] 
split level 35: [/input-8, 1044] 
split level 36: [/input-8, 1054] 
split level 37: [/input-8, 1651] 
split level 38: [/input-8, 1013] 
split level 39: [/input-8, 1891] 
split level 40: [/input, 2268] 
split level 41: [/input-8, 422] 
split level 42: [/input-8, 1648] 
split level 43: [/input, 3273] 
split level 44: [/input-8, 412] 
split level 45: [/input-8, 1460] 
split level 46: [/input-8, 1010] 
split level 47: [/input-8, 550] 
split level 48: [/input-8, 1253] 
split level 49: [/input-8, 1656] 
split level 50: [/input-8, 1063] 
split level 51: [/input, 2188] 
split level 52: [/input-8, 1017] 
split level 53: [/input, 3479] 
split level 54: [/input-8, 698] 
split level 55: [/input, 3224] 
split level 56: [/input-8, 614] 
split level 57: [/input, 2172] 
split level 58: [/input, 2177] 
split level 59: [/input-8, 859] 
split level 60: [/input-8, 1027] 
split level 61: [/input-8, 1470] 
split level 62: [/input-8, 678] 
split level 63: [/input-8, 276] 
split level 64: [/input-8, 410] 
split level 65: [/input, 2235] 
split level 66: [/input, 3438] 
split level 67: [/input-8, 867] 
split level 68: [/input-8, 1021] 
split level 69: [/input, 2230] 
split level 70: [/input-8, 1001] 
split level 71: [/input, 3495] 
split level 72: [/input-8, 924] 
split level 73: [/input-8, 1893] 
split level 74: [/input, 442] 
split level 75: [/input, 937] 
split level 76: [/input-8, 690] 
split level 77: [/input-8, 1870] 
split level 78: [/input-8, 1640] 
split level 79: [/input, 3208] 
split level 80: [/input, 2709] 
split level 81: [/input, 1585] 
split level 82: [/input-8, 1608] 
split level 83: [/input-8, 792] 
split level 84: [/input, 457] 
split level 85: [/input, 1769] 
split level 86: [/input, 2473] 
split level 87: [/input, 3242] 
split level 88: [/input, 3468] 
split level 89: [/input-8, 563] 
split level 90: [/input, 2913] 
split level 91: [/input, 3240] 
split level 92: [/input, 2754] 
split level 93: [/input-8, 1059] 
split level 94: [/input, 324] 
split level 95: [/input-8, 1436] 
split level 96: [/input, 2251] 
split level 97: [/input, 3564] 
split level 98: [/input-8, 630] 
split level 99: [/input, 1675] 
split level 100: [/input, 3226] 
split level 101: [/input, 2519] 
split level 102: [/input, 3449] 
split level 103: [/input, 1449] 
split level 104: [/input, 1626] 
split level 105: [/input, 2537] 
split level 106: [/input, 2293] 
split level 107: [/input, 198] 
split level 108: [/input-8, 421] 
split level 109: [/input, 294] 
split level 110: [/input, 3320] 
split level 111: [/input-8, 1625] 
split level 112: [/input, 3496] 
split level 113: [/input, 1768] 
split level 114: [/input, 3454] 
split level 115: [/input, 1627] 
split level 116: [/input-8, 406] 
split level 117: [/input, 1411] 
split level 118: [/input, 3239] 
split level 119: [/input-8, 1340] 
split level 120: [/input-8, 1641] 
split level 121: [/input, 4017] 
split level 122: [/input, 490] 
split level 123: [/input, 2229] 
split level 124: [/input, 2245] 
split level 125: [/input, 2601] 
split level 126: [/input-8, 1447] 
split level 127: [/input-8, 1347] 
split level 128: [/input, 3257] 
split level 129: [/input, 489] 
split level 130: [/input, 4038] 
split level 131: [/input, 1434] 
split level 132: [/input-8, 1614] 
split level 133: [/input, 2246] 
split level 134: [/input, 2489] 
split level 135: [/input, 1577] 
split level 136: [/input, 4018] 
split level 137: [/input, 3127] 
split level 138: [/input, 2073] 
split level 139: [/input, 2439] 
split level 140: [/input-8, 2044] 
split level 141: [/input, 2265] 
split level 142: [/input, 1672] 
split level 143: [/input, 4055] 
split level 144: [/input, 441] 
split level 145: [/input, 2504] 
split level 146: [/input-8, 1055] 
split level 147: [/input, 970] 
split level 148: [/input, 3207] 
split level 149: [/input, 3274] 
split level 150: [/input, 2074] 
split level 151: [/input-8, 606] 
split level 152: [/input-8, 648] 
split level 153: [/input, 1602] 
split level 154: [/input, 901] 
split level 155: [/input, 2585] 
split level 156: [/input, 3142] 
split level 157: [/input, 2089] 
split level 158: [/input, 343] 
split level 159: [/input, 2513] 
split level 160: [/input-8, 1880] 
split level 161: [/input, 2554] 
split level 162: [/input-8, 952] 
split level 163: [/input, 3442] 
split level 164: [/input, 2600] 
split level 165: [/input, 1388] 
split level 166: [/input, 3193] 
split level 167: [/input, 4049] 
split level 168: [/input, 1415] 
split level 169: [/input-8, 393] 
split level 170: [/input, 2252] 
split level 171: [/input, 291] 
split level 172: [/input, 2475] 
split level 173: [/input, 3669] 
split level 174: [/input, 3681] 
split level 175: [/input-8, 1236] 
split level 176: [/input, 1416] 
split level 177: [/input, 2257] 
split level 178: [/input, 3262] 
split level 179: [/input, 485] 
split level 180: [/input, 3110] 
split level 181: [/input, 3532] 
split level 182: [/input, 3288] 
split level 183: [/input, 2470] 
split level 184: [/input, 2603] 
split level 185: [/input-8, 1455] 
split level 186: [/input, 2428] 
split level 187: [/input, 3259] 
split level 188: [/input, 825] 
split level 189: [/input, 972] 
split level 190: [/input, 3665] 
split level 191: [/input, 2584] 
split level 192: [/input, 2301] 
split level 193: [/input, 2203] 
split level 194: [/input, 2213] 
split level 195: [/input, 4043] 
split level 196: [/input, 3309] 
split level 197: [/input, 1464] 
split level 198: [/input, 4056] 
split level 199: [/input, 3580] 
cut re-enabled after branching node selection
0 lb beta sum: 3.7451531887054443, worst -0.46630799770355225
10 lb beta sum: 3.8819329738616943, worst -0.47626590728759766
Time: prepare 0.0155    bound 0.1857    transfer 0.0041    finalize 0.0031    func 0.2111    
Accumulated time: func 0.7470    prepare 0.0254    bound 0.7210    transfer 0.0043    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(-0.10022554) min lb tensor(-0.46543902)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=1_26533211.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=1_26533211.cuts: total 583 constraints, 29250 nonzero elements
cuts preparing time: 0.0132
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 583.
#cuts 1-3: 124
#cuts 7-9: 2
#cuts 10-12: 5
#cuts 13-15: 14
#cuts 16-18: 49
#cuts 19-21: 23
#cuts >= 20: 366
BICCOS time: 0.2597067356109619 
BICCOS Cumulative time: 0.2597067356109619
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.45926 (1), -0.45897 (1), -0.45893 (1), -0.45878 (1), -0.45856 (1), -0.45842 (1), -0.45831 (1), -0.45815 (1), -0.45802 (1), -0.45797 (1), -0.45794 (1), -0.45767 (1), -0.45751 (1), -0.45685 (1), -0.45679 (1), -0.45636 (1), -0.45567 (1), -0.45550 (1), -0.45491 (1), -0.45451 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5126    set_bounds 0.0089    solve 0.2111    add 0.2032    
Accumulated time: pickout 0.0004    decision 0.5126    set_bounds 0.0089    solve 0.2111    add 0.2032    
Current (lb-rhs): -0.45926138758659363
50 domains visited
Cumulative time: 2.001300096511841

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 31] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 31] [/input-12, 26] [/input-12, 31] [/input-12, 1] [/input-12, 1] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 2: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 3: [/input-12, 26] [/input-12, 4] [/input-12, 26] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 26] [/input-12, 4] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4791262447834015
10 lb beta sum: 4.166054725646973, worst -0.424913614988327
Time: prepare 0.0073    bound 0.1837    transfer 0.0013    finalize 0.0026    func 0.1982    
Accumulated time: func 0.9452    prepare 0.0330    bound 0.9047    transfer 0.0055    finalize 0.0059    
all_split False
======================Cut inference begins======================
max lb tensor(0.18290663) min lb tensor(-0.41386050)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=1_26533211.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0015
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.01557016372680664 
BICCOS Cumulative time: 0.27527689933776855
Preprocessing time: 0.012197017669677734 Inference time: 0.0004420280456542969 Add cuts time: 0.0001685619354248047 Cut analysis time: 0.0027625560760498047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16162 (2), -0.16142 (2), -0.16136 (2), -0.15957 (2), -0.15755 (2), -0.15689 (2), -0.15668 (2), -0.15530 (2), -0.15476 (2), -0.15463 (2), -0.15452 (2), -0.15396 (2), -0.15388 (2), -0.15354 (2), -0.15155 (2), -0.15153 (2), -0.15074 (2), -0.14773 (2), -0.14717 (2), -0.14631 (2), 
Length of domains: 50
Time: pickout 0.0117    decision 0.0201    set_bounds 0.0131    solve 0.1983    add 0.3797    
Accumulated time: pickout 0.0120    decision 0.5327    set_bounds 0.0220    solve 0.4095    add 0.5829    
Current (lb-rhs): -0.1616160273551941
100 domains visited
Cumulative time: 2.6472461223602295

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 54] [/input-12, 31] [/input-12, 31] [/input-12, 26] [/input-12, 26] [/input-12, 54] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 26] [/input-12, 26] [/input-12, 1] [/input-12, 1] [/input-12, 26] [/input-12, 26] [/input-12, 26] 
split level 2: [/input-12, 4] [/input-12, 4] [/input-12, 26] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 3: [/input-12, 41] [/input-12, 41] [/input-12, 4] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 4] [/input-12, 41] [/input-12, 41] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17428633570671082
10 lb beta sum: 0.2841885983943939, worst -0.25314614176750183
Time: prepare 0.0067    bound 0.1178    transfer 0.0057    finalize 0.0024    func 0.1358    
Accumulated time: func 1.0810    prepare 0.0399    bound 1.0225    transfer 0.0113    finalize 0.0083    
all_split False
======================Cut inference begins======================
max lb tensor(0.26003695) min lb tensor(-0.14951077)
Number of Verified Splits: 197 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=1_26533211.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 7
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.025476455688476562 
BICCOS Cumulative time: 0.3007533550262451
Preprocessing time: 0.012307405471801758 Inference time: 0.009484529495239258 Add cuts time: 0.002485990524291992 Cut analysis time: 0.0011985301971435547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04252 (3), -0.04170 (3), -0.04108 (3), -0.04096 (3), -0.04051 (3), -0.04030 (3), -0.04019 (3), -0.03971 (3), -0.03967 (3), -0.03949 (3), -0.03779 (3), -0.03725 (3), -0.03713 (3), -0.03712 (3), -0.03639 (3), -0.03625 (3), -0.03588 (3), -0.03582 (3), -0.03575 (3), -0.03544 (3), 
Length of domains: 50
Time: pickout 0.0079    decision 0.0200    set_bounds 0.0167    solve 0.1359    add 0.2351    
Accumulated time: pickout 0.0199    decision 0.5526    set_bounds 0.0387    solve 0.5454    add 0.8180    
Current (lb-rhs): -0.0425226092338562
150 domains visited
Cumulative time: 3.0956919193267822

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 54] [/input-12, 1] 
split level 1: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 2: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 3: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08006337285041809
10 lb beta sum: 0.3046261668205261, worst -0.4492112994194031
Time: prepare 0.0063    bound 0.1353    transfer 0.0012    finalize 0.0035    func 0.1492    
Accumulated time: func 1.2302    prepare 0.0465    bound 1.1578    transfer 0.0125    finalize 0.0117    
all_split False
======================Cut inference begins======================
max lb tensor(0.28470513) min lb tensor(-0.00855082)
Number of Verified Splits: 388 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=1_26533211.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 9
#cuts 4-6: 17
#cuts >= 20: 0
BICCOS time: 0.03965020179748535 
BICCOS Cumulative time: 0.34040355682373047
Preprocessing time: 0.011958599090576172 Inference time: 0.020344972610473633 Add cuts time: 0.005521535873413086 Cut analysis time: 0.001825094223022461
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00855 (4), -0.00803 (4), -0.00740 (4), -0.00581 (4), -0.00505 (4), -0.00503 (4), -0.00472 (4), -0.00407 (4), 
Length of domains: 8
Time: pickout 0.0077    decision 0.0198    set_bounds 0.0166    solve 0.1493    add 0.2478    
Accumulated time: pickout 0.0276    decision 0.5724    set_bounds 0.0553    solve 0.6947    add 1.0658    
Current (lb-rhs): -0.008550822734832764
158 domains visited
Cumulative time: 3.5837321281433105

Shallow-BaB round 5
batch: 8
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 1: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
split level 2: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 3: [/input-12, 90] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] [/input-12, 90] [/input-12, 90] [/input-12, 90] 
split level 4: [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] 
split level 5: [/input-8, 1889] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1889] [/input-8, 1889] [/input-8, 1889] 
split level 6: [/input-8, 1628] [/input-8, 1885] [/input-8, 1885] [/input-8, 1885] [/input-8, 1885] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] 
split level 7: [/input-8, 1885] [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1885] [/input-8, 1885] [/input-8, 1885] 
split level 8: [/input-8, 996] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 996] [/input-8, 996] [/input-8, 996] 
split level 9: [/input-8, 1893] [/input-8, 996] [/input-8, 996] [/input-8, 996] [/input-8, 996] [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] 
split level 10: [/input-8, 550] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 549] [/input-8, 550] [/input-8, 550] [/input-8, 550] 
split level 11: [/input-8, 549] [/input-8, 845] [/input-8, 845] [/input-8, 845] [/input-8, 845] [/input-8, 549] [/input-8, 549] [/input-8, 549] 
split level 12: [/input-8, 845] [/input-8, 1620] [/input-8, 1620] [/input-8, 1620] [/input-8, 1620] [/input-8, 845] [/input-8, 845] [/input-8, 845] 
split level 13: [/input-8, 1620] [/input-8, 1891] [/input-8, 1891] [/input-8, 1891] [/input-8, 1891] [/input-8, 1620] [/input-8, 1620] [/input-8, 1620] 
split level 14: [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] 
split level 15: [/input-8, 1891] [/input-8, 859] [/input-8, 859] [/input-8, 859] [/input-8, 859] [/input-8, 1891] [/input-8, 1891] [/input-8, 1891] 
split level 16: [/input-8, 859] [/input-8, 410] [/input-8, 410] [/input-8, 410] [/input-8, 410] [/input-8, 859] [/input-8, 859] [/input-8, 859] 
split level 17: [/input-8, 1010] [/input-8, 1010] [/input-8, 1010] [/input-8, 1010] [/input-8, 1010] [/input-8, 1010] [/input-8, 1010] [/input-8, 1010] 
split level 18: [/input-8, 410] [/input, 2600] [/input, 2600] [/input, 2600] [/input, 2600] [/input-8, 410] [/input-8, 410] [/input-8, 410] 
split level 19: [/input-8, 1013] [/input-8, 458] [/input-8, 458] [/input-8, 458] [/input-8, 458] [/input-8, 1013] [/input-8, 1013] [/input-8, 1013] 
split level 20: [/input-8, 458] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 458] [/input-8, 458] [/input-8, 458] 
split level 21: [/input-8, 843] [/input-8, 1901] [/input-8, 1901] [/input-8, 1901] [/input-8, 1901] [/input-8, 843] [/input-8, 843] [/input-8, 843] 
split level 22: [/input, 2213] [/input, 2213] [/input, 2213] [/input, 2213] [/input, 2213] [/input, 2213] [/input, 2213] [/input, 2213] 
split level 23: [/input-8, 85] [/input, 2599] [/input, 2599] [/input, 2599] [/input, 2599] [/input-8, 85] [/input-8, 85] [/input-8, 85] 
split level 24: [/input-8, 1901] [/input-8, 85] [/input-8, 85] [/input-8, 85] [/input-8, 85] [/input-8, 1901] [/input-8, 1901] [/input-8, 1901] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06949758529663086
10 lb beta sum: 0.5181204676628113, worst -0.1448008120059967
Time: prepare 0.0080    bound 0.1575    transfer 0.0012    finalize 0.0033    func 0.1727    
Accumulated time: func 1.4030    prepare 0.0559    bound 1.3153    transfer 0.0137    finalize 0.0150    
all_split False
======================Cut inference begins======================
max lb tensor(0.33688384) min lb tensor(0.01679164)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=1_26533211.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 9
#cuts 4-6: 17
#cuts >= 20: 0
BICCOS time: 0.043437957763671875 
BICCOS Cumulative time: 0.38384151458740234
Preprocessing time: 0.01292562484741211 Inference time: 0.02199864387512207 Add cuts time: 0.00638127326965332 Cut analysis time: 0.002132415771484375
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0824    set_bounds 0.0136    solve 0.1729    add 0.0317    
Accumulated time: pickout 0.0285    decision 0.6548    set_bounds 0.0689    solve 0.8676    add 1.0975    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
158 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 31]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([5.18029508e-11, 1.68093458e-01, 2.62608171e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 31]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.18029508e-11, 1.68093458e-01, 9.05963778e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26,  1]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.18029508e-11, 6.61041886e-02, 1.55531123e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26,  1, 10, 31]), tensor([-1.,  1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([5.18029508e-11, 6.61041886e-02, 7.09979534e-02, 2.80417968e-02,
        2.12307349e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26,  1, 10, 31]), tensor([-1.,  1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([5.18029508e-11, 6.61041886e-02, 7.09979534e-02, 2.80417968e-02,
        4.79571372e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26,  1, 10, 31]), tensor([-1.,  1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([5.18029508e-11, 6.61041886e-02, 7.09979534e-02, 3.07241846e-02,
        2.10698918e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26,  1, 10, 31]), tensor([-1.,  1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([5.18029508e-11, 6.61041886e-02, 7.09979534e-02, 3.07241846e-02,
        4.96474653e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 31]), tensor([ 1., -1.]), tensor([0, 0]), tensor([5.18029508e-11, 2.13837311e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 31]), tensor([1., 1.]), tensor([0, 0]), tensor([5.18029508e-11, 1.64234951e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  9
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3144284784793854
10 lb beta sum: 0.19114868342876434, worst -0.3107171058654785
Time: prepare 0.0005    bound 0.1536    transfer 0.0002    finalize 0.0002    func 0.1547    
Accumulated time: func 1.5576    prepare 0.0564    bound 1.4689    transfer 0.0139    finalize 0.0153    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 1] 
split level 1: [/input-12, 4] [/input-12, 26] 
split level 2: [/input-12, 26] [/input-12, 4] 
split level 3: [/input-12, 41] [/input-12, 41] 
split level 4: [/input-12, 10] [/input-12, 10] 
split level 5: [/input-8, 1628] [/input-8, 1628] 
split level 6: [/input-8, 1620] [/input-8, 1052] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6545840501785278, worst -0.07503485679626465
10 lb beta sum: 0.6545840501785278, worst -0.07431405782699585
Time: prepare 0.0117    bound 0.1539    transfer 0.0024    finalize 0.0019    func 0.1716    
Accumulated time: func 1.7293    prepare 0.0686    bound 1.6228    transfer 0.0163    finalize 0.0171    
all_split False
======================Cut inference begins======================
max lb tensor(0.16473424) min lb tensor(-0.07404509)
Number of Verified Splits: 218 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.6809958815574646, worst -0.6076503992080688
10 lb beta sum: 0.7600157260894775, worst -0.37888991832733154
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=1_26533211.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 45.
#cuts 1-3: 9
#cuts 4-6: 26
#cuts 7-9: 10
#cuts >= 20: 0
BICCOS time: 0.30670928955078125 
BICCOS Cumulative time: 0.6905508041381836
Preprocessing time: 0.008097410202026367 Inference time: 0.29093408584594727 Add cuts time: 0.0048792362213134766 Cut analysis time: 0.0027985572814941406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07405 (7), -0.07245 (7), -0.06942 (7), -0.06798 (7), -0.06746 (7), -0.06617 (7), -0.06229 (7), -0.06094 (7), -0.05611 (7), -0.05481 (7), -0.05302 (7), -0.05180 (7), -0.04787 (7), -0.04678 (7), -0.04463 (7), -0.04349 (7), -0.03818 (7), -0.03734 (7), -0.03433 (7), -0.03364 (7), 
Length of domains: 38
Time: pickout 0.0006    decision 0.0216    set_bounds 0.0261    solve 0.1717    add 0.0624    
Accumulated time: pickout 0.0291    decision 0.6764    set_bounds 0.0949    solve 1.0393    add 1.1599    
Current (lb-rhs): -0.0740450918674469
196 domains visited
Cumulative time: 4.7628514766693115

BaB round 2
batch: 38
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1620] [/input-8, 1620] [/input-8, 1885] [/input-8, 413] [/input-8, 1885] [/input-8, 1620] [/input-8, 1885] [/input-8, 413] [/input-8, 1885] [/input-8, 1620] 
split level 1: [/input-8, 859] [/input-8, 845] [/input-8, 1620] [/input-8, 1013] [/input-8, 413] [/input-8, 845] [/input-8, 1620] [/input-8, 1885] [/input-8, 1013] [/input-8, 859] 
split level 2: [/input-8, 1885] [/input-8, 1885] [/input-8, 1013] [/input-8, 1885] [/input-8, 1013] [/input-8, 1885] [/input-8, 1013] [/input-8, 1013] [/input-8, 1620] [/input-8, 1885] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06126898527145386
10 lb beta sum: 0.25052881240844727, worst -0.0581606924533844
Time: prepare 0.0059    bound 0.1356    transfer 0.0024    finalize 0.0024    func 0.1483    
Accumulated time: func 1.8775    prepare 0.0747    bound 1.7584    transfer 0.0187    finalize 0.0195    
all_split False
======================Cut inference begins======================
max lb tensor(0.02206448) min lb tensor(-0.05802099)
Number of Verified Splits: 116 of 304
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.29816949367523193
10 lb beta sum: 0.8604270815849304, worst -0.21718209981918335
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=1_26533211.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0007
Total number of valid cuts: 45.
#cuts 1-3: 9
#cuts 4-6: 26
#cuts 7-9: 10
#cuts >= 20: 0
BICCOS time: 0.22243690490722656 
BICCOS Cumulative time: 0.9129877090454102
Preprocessing time: 0.009447574615478516 Inference time: 0.21058964729309082 Add cuts time: 0.0016067028045654297 Cut analysis time: 0.0007929801940917969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05802 (10), -0.05788 (10), -0.05666 (10), -0.05649 (10), -0.05638 (10), -0.05637 (10), -0.05531 (10), -0.05504 (10), -0.05431 (10), -0.05415 (10), -0.05390 (10), -0.05375 (10), -0.05313 (10), -0.05290 (10), -0.05262 (10), -0.05237 (10), -0.05233 (10), -0.05220 (10), -0.05137 (10), -0.05117 (10), 
Length of domains: 188
Time: pickout 0.0056    decision 0.0170    set_bounds 0.0168    solve 0.1484    add 0.0785    
Accumulated time: pickout 0.0347    decision 0.6934    set_bounds 0.1117    solve 1.1877    add 1.2384    
Current (lb-rhs): -0.05802099406719208
384 domains visited
Cumulative time: 5.25963020324707

BaB round 3
batch: 188
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 413] [/input-8, 1437] [/input-8, 284] [/input-8, 413] [/input-8, 284] [/input-8, 284] [/input-8, 413] [/input-8, 1437] [/input-8, 284] [/input-8, 413] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4714640974998474, worst -0.05582849681377411
10 lb beta sum: 0.4714640974998474, worst -0.05564753711223602
Time: prepare 0.0186    bound 0.1401    transfer 0.0052    finalize 0.0023    func 0.1686    
Accumulated time: func 2.0462    prepare 0.0935    bound 1.8984    transfer 0.0239    finalize 0.0217    
all_split False
======================Cut inference begins======================
max lb tensor(0.01343086) min lb tensor(-0.05556850)
Number of Verified Splits: 62 of 376
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=1_26533211.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 10
#cuts 4-6: 17
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.023125410079956055 
BICCOS Cumulative time: 0.9361131191253662
Preprocessing time: 0.011779069900512695 Inference time: 0.006288051605224609 Add cuts time: 0.0029561519622802734 Cut analysis time: 0.0021021366119384766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05557 (11), -0.05544 (11), -0.05437 (11), -0.05408 (11), -0.05408 (11), -0.05395 (11), -0.05278 (11), -0.05252 (11), -0.05162 (11), -0.05147 (11), -0.05143 (11), -0.05129 (11), -0.05050 (11), -0.05038 (11), -0.04998 (11), -0.04976 (11), -0.04972 (11), -0.04965 (11), -0.04870 (11), -0.04857 (11), 
Length of domains: 314
Time: pickout 0.0154    decision 0.0211    set_bounds 0.1645    solve 0.1688    add 0.0815    
Accumulated time: pickout 0.0500    decision 0.7145    set_bounds 0.2762    solve 1.3564    add 1.3199    
Current (lb-rhs): -0.055568501353263855
698 domains visited
Cumulative time: 5.741657495498657

BaB round 4
batch: 314
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1011] [/input-8, 284] [/input-8, 1656] [/input-8, 1891] [/input-8, 1437] [/input-8, 413] [/input-8, 1011] [/input-8, 284] [/input-8, 1620] [/input-8, 1891] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05617767572402954
10 lb beta sum: 0.4244837760925293, worst -0.053316518664360046
Time: prepare 0.0122    bound 0.1361    transfer 0.0040    finalize 0.0035    func 0.1599    
Accumulated time: func 2.2061    prepare 0.1059    bound 2.0345    transfer 0.0279    finalize 0.0253    
all_split False
======================Cut inference begins======================
max lb tensor(0.31110087) min lb tensor(-0.05328135)
Number of Verified Splits: 184 of 628
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=1_26533211.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 17
#cuts 4-6: 17
#cuts >= 20: 0
BICCOS time: 0.04501700401306152 
BICCOS Cumulative time: 0.9811301231384277
Preprocessing time: 0.018851041793823242 Inference time: 0.02123236656188965 Add cuts time: 0.0029230117797851562 Cut analysis time: 0.0020105838775634766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05328 (12), -0.05313 (12), -0.05209 (12), -0.05177 (12), -0.05160 (12), -0.05148 (12), -0.05053 (12), -0.05037 (12), -0.04910 (12), -0.04895 (12), -0.04889 (12), -0.04872 (12), -0.04808 (12), -0.04798 (12), -0.04772 (12), -0.04753 (12), -0.04712 (12), -0.04699 (12), -0.04631 (12), -0.04624 (12), 
Length of domains: 444
Time: pickout 0.0179    decision 0.0284    set_bounds 0.0282    solve 0.1601    add 0.1191    
Accumulated time: pickout 0.0679    decision 0.7429    set_bounds 0.3044    solve 1.5165    add 1.4389    
Current (lb-rhs): -0.053281351923942566
1142 domains visited
Cumulative time: 6.149679660797119

BaB round 5
batch: 444
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1013] [/input-8, 413] [/input-8, 1011] [/input-8, 1656] [/input-8, 1013] [/input-8, 845] [/input-8, 1011] [/input-8, 1656] [/input-8, 1013] [/input-8, 1656] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.051984310150146484
10 lb beta sum: 1.1311184167861938, worst -0.04591682553291321
Time: prepare 0.0175    bound 0.1402    transfer 0.0064    finalize 0.0041    func 0.1741    
Accumulated time: func 2.3802    prepare 0.1236    bound 2.1747    transfer 0.0343    finalize 0.0294    
all_split False
======================Cut inference begins======================
max lb tensor(0.94226122) min lb tensor(-0.04584616)
Number of Verified Splits: 810 of 888
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=1_26533211.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.1312422752380371 
BICCOS Cumulative time: 1.1123723983764648
Preprocessing time: 0.027158021926879883 Inference time: 0.09344601631164551 Add cuts time: 0.009471893310546875 Cut analysis time: 0.0011663436889648438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04585 (13), -0.04569 (13), -0.04174 (13), -0.04156 (13), -0.04067 (13), -0.04055 (13), -0.04026 (13), -0.04009 (13), -0.03791 (13), -0.03778 (13), -0.03297 (13), -0.02623 (13), -0.02606 (13), -0.02563 (13), -0.02547 (13), -0.02535 (13), -0.02517 (13), -0.02497 (13), -0.02472 (13), -0.02460 (13), 
Length of domains: 78
Time: pickout 0.0705    decision 0.0366    set_bounds 0.0408    solve 0.1744    add 0.0796    
Accumulated time: pickout 0.1384    decision 0.7795    set_bounds 0.3452    solve 1.6910    add 1.5185    
Current (lb-rhs): -0.04584616422653198
1220 domains visited
Cumulative time: 6.693541765213013

BaB round 6
batch: 78
splitting decisions: 
split level 0: [/input-8, 1891] [/input-8, 1438] [/input-8, 1656] [/input-8, 1656] [/input-8, 1438] [/input-8, 1656] [/input-8, 1656] [/input-8, 1656] [/input-8, 1656] [/input-8, 1438] 
split level 1: [/input-8, 276] [/input-8, 845] [/input-8, 276] [/input-8, 276] [/input-8, 413] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 413] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04416212439537048

all verified at 5th iter
Time: prepare 0.0061    bound 0.0362    transfer 0.0011    finalize 0.0032    func 0.0487    
Accumulated time: func 2.4289    prepare 0.1299    bound 2.2109    transfer 0.0354    finalize 0.0326    
all_split False
======================Cut inference begins======================
max lb tensor(0.18532825) min lb tensor(0.00016728)
Number of Verified Splits: 312 of 312
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=1_26533211.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0014
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011753320693969727 
BICCOS Cumulative time: 1.1241257190704346
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0136    decision 0.0189    set_bounds 0.0153    solve 0.0488    add 0.0001    
Accumulated time: pickout 0.1520    decision 0.7983    set_bounds 0.3605    solve 1.7397    add 1.5186    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1220 domains visited
Cumulative time: 6.803548812866211

found process to kill: terminal indx = 1
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=1_26533211.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=1_26533211.cuts
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=1_26533211.indx
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=167_spec=1_26533211.log
found process to kill: terminal indx = 7
found process for pidx=1
kill process for pidx=1
found process for pidx=7
Result: safe in 31.3066 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 168, vnnlib ID: 168 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.83010960, -18.46311760, -10.82516861, -14.02094841, -13.35524940,
         -13.57317543, -16.31656647, -16.24346542, -18.31108856, -17.83380508]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [478]; unstable size 478; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 77, 1, 478] with unstable size 76 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 478] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 478] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [76]; unstable size 76; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 76] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 76] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.44705355, 6.67497396, 2.73657417, 2.01246405, 2.17955470, 4.94374990,
         4.64395428, 6.66448021, 6.17840290]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0691 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 169, vnnlib ID: 169 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.63894939, -9.64244175, -5.12798119, -6.62656116, -4.67414284,
         -6.34183264, -7.44110918, -6.87718344, -7.57325172, -8.86707783]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 540] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 540] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 184] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.41975856,  2.63730407, -0.24886763,  1.14163065,  0.84137636,
          1.68192840,  1.20813775,  0.96860695,  2.32131577]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.63894939, -9.64244175, -5.12798119, -6.62656116, -4.67414284,
         -6.34183264, -7.44110918, -6.87718344, -7.57325172, -8.86707783]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.31it/s]100%|██████████| 1/1 [00:00<00:00,  7.31it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.52638006, -9.63549614, -5.04499722, -6.76773167, -4.97539616,
          -6.54810143, -7.45572472, -7.23138285, -7.37723446, -8.95701504]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.06960106]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1402 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 11.406266212463379
alpha/beta optimization time: 1.3272407054901123
initial alpha-crown bounds: tensor([[ 0.48204660,  2.72113252, -0.22036707,  1.16896915,  0.86237299,
          1.72370434,  1.25071478,  1.03288615,  2.38480711]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.22036707401275635
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6391 seconds.
lower bounds for all target labels: [0.48204588890075684, 2.7211318016052246, -0.22036683559417725, 1.1689674854278564, 0.8623722195625305, 1.7237040996551514, 1.2507143020629883, 1.0328865051269531, 2.38480806350708]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [2]
start creating model mps for candidates: ['lay/16_2']
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 243287 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.37428259849548
Verifying property 0 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.721132516860962.

Properties batch 1, size 1
Remaining timeout: 198.20660042762756
Verifying property 1 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.3848071098327637.

Properties batch 2, size 1
Remaining timeout: 198.09855961799622
Verifying property 2 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.7237043380737305.

Properties batch 3, size 1
Remaining timeout: 197.99363923072815
Verifying property 3 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.2507147789001465.

Properties batch 4, size 1
Remaining timeout: 197.88908410072327
Verifying property 4 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.1689691543579102.

Properties batch 5, size 1
Remaining timeout: 197.78481721878052
Verifying property 5 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0328861474990845.

Properties batch 6, size 1
Remaining timeout: 197.67931938171387
Verifying property 6 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.8623729944229126.

Properties batch 7, size 1
Remaining timeout: 197.5738000869751
Verifying property 7 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.48204660415649414.

Properties batch 8, size 1
Remaining timeout: 197.4602189064026
Verifying property 8 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.22036707]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.63894939, -9.64244175, -5.12798119, -6.62656116, -4.67414284,
        -6.34183264, -7.44110918, -6.87718344, -7.57325172, -8.86707783],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.22036707]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 540
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 181
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 739
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0006337165832519531
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0548    transfer 0.0001    finalize 0.0002    func 0.0553    
Accumulated time: func 0.0553    prepare 0.0002    bound 0.0548    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 44] 
split level 2: [/input-12, 82] 
split level 3: [/input-12, 11] 
split level 4: [/input-12, 42] 
split level 5: [/input-12, 17] 
split level 6: [/input-8, 1868] 
split level 7: [/input-8, 1066] 
split level 8: [/input-8, 1124] 
split level 9: [/input-8, 556] 
split level 10: [/input-8, 2019] 
split level 11: [/input-8, 1370] 
split level 12: [/input-8, 1403] 
split level 13: [/input-8, 685] 
split level 14: [/input-8, 1362] 
split level 15: [/input-8, 1138] 
split level 16: [/input-8, 2020] 
split level 17: [/input-8, 1874] 
split level 18: [/input-8, 1356] 
split level 19: [/input-8, 574] 
split level 20: [/input-8, 1073] 
split level 21: [/input-8, 787] 
split level 22: [/input-8, 555] 
split level 23: [/input-8, 1514] 
split level 24: [/input-8, 89] 
split level 25: [/input-8, 2018] 
split level 26: [/input-12, 64] 
split level 27: [/input-8, 1333] 
split level 28: [/input-8, 564] 
split level 29: [/input-8, 1361] 
split level 30: [/input-8, 1508] 
split level 31: [/input-8, 1896] 
split level 32: [/input-8, 700] 
split level 33: [/input-8, 571] 
split level 34: [/input, 2682] 
split level 35: [/input, 2615] 
split level 36: [/input-8, 1775] 
split level 37: [/input-8, 699] 
split level 38: [/input, 2691] 
split level 39: [/input-8, 90] 
split level 40: [/input-8, 573] 
split level 41: [/input, 3207] 
split level 42: [/input-8, 1366] 
split level 43: [/input-8, 1889] 
split level 44: [/input-8, 1499] 
split level 45: [/input-8, 808] 
split level 46: [/input-8, 1405] 
split level 47: [/input-8, 892] 
split level 48: [/input-8, 619] 
split level 49: [/input, 2534] 
split level 50: [/input-8, 923] 
split level 51: [/input-8, 1307] 
split level 52: [/input-12, 28] 
split level 53: [/input, 3973] 
split level 54: [/input, 2662] 
split level 55: [/input, 141] 
split level 56: [/input, 2409] 
split level 57: [/input, 2706] 
split level 58: [/input-8, 1974] 
split level 59: [/input-8, 1406] 
split level 60: [/input-8, 1107] 
split level 61: [/input, 2378] 
split level 62: [/input-8, 1393] 
split level 63: [/input-8, 855] 
split level 64: [/input-8, 1272] 
split level 65: [/input, 2632] 
split level 66: [/input-8, 1148] 
split level 67: [/input-12, 53] 
split level 68: [/input, 218] 
split level 69: [/input-8, 2009] 
split level 70: [/input-8, 1942] 
split level 71: [/input, 1628] 
split level 72: [/input-8, 534] 
split level 73: [/input, 2442] 
split level 74: [/input, 2651] 
split level 75: [/input-8, 883] 
split level 76: [/input-8, 1996] 
split level 77: [/input-8, 884] 
split level 78: [/input, 4039] 
split level 79: [/input-8, 1973] 
split level 80: [/input, 422] 
split level 81: [/input, 3301] 
split level 82: [/input-8, 612] 
split level 83: [/input, 3978] 
split level 84: [/input, 2661] 
split level 85: [/input, 3284] 
split level 86: [/input-8, 1957] 
split level 87: [/input-8, 865] 
split level 88: [/input-8, 1969] 
split level 89: [/input-8, 139] 
split level 90: [/input-8, 1922] 
split level 91: [/input, 2737] 
split level 92: [/input, 2441] 
split level 93: [/input-8, 1836] 
split level 94: [/input-8, 1047] 
split level 95: [/input-8, 1056] 
split level 96: [/input, 1558] 
split level 97: [/input-8, 1064] 
split level 98: [/input-8, 1847] 
split level 99: [/input, 3549] 
split level 100: [/input-8, 1039] 
split level 101: [/input, 2547] 
split level 102: [/input, 2680] 
split level 103: [/input, 3550] 
split level 104: [/input, 2546] 
split level 105: [/input, 2459] 
split level 106: [/input, 3981] 
split level 107: [/input, 2362] 
split level 108: [/input, 2455] 
split level 109: [/input, 2396] 
split level 110: [/input, 2550] 
split level 111: [/input-8, 1898] 
split level 112: [/input, 3226] 
split level 113: [/input, 3959] 
split level 114: [/input-8, 1783] 
split level 115: [/input, 3905] 
split level 116: [/input, 3253] 
split level 117: [/input, 2322] 
split level 118: [/input, 3299] 
split level 119: [/input, 2551] 
split level 120: [/input, 2328] 
split level 121: [/input-8, 277] 
split level 122: [/input, 2515] 
split level 123: [/input, 2774] 
split level 124: [/input, 3906] 
split level 125: [/input, 962] 
split level 126: [/input, 2549] 
split level 127: [/input, 3209] 
split level 128: [/input, 2922] 
split level 129: [/input, 2449] 
split level 130: [/input, 1653] 
split level 131: [/input-8, 489] 
split level 132: [/input, 2530] 
split level 133: [/input, 2972] 
split level 134: [/input, 3690] 
split level 135: [/input, 3752] 
split level 136: [/input, 3564] 
split level 137: [/input, 3554] 
split level 138: [/input, 2433] 
split level 139: [/input-12, 52] 
split level 140: [/input, 2273] 
split level 141: [/input, 997] 
split level 142: [/input-8, 1266] 
split level 143: [/input-8, 120] 
split level 144: [/input, 2726] 
split level 145: [/input, 3240] 
split level 146: [/input, 3904] 
split level 147: [/input, 3965] 
split level 148: [/input, 2548] 
split level 149: [/input-8, 122] 
split level 150: [/input, 3902] 
split level 151: [/input, 2986] 
split level 152: [/input, 2382] 
split level 153: [/input, 2686] 
split level 154: [/input, 3901] 
split level 155: [/input, 2674] 
split level 156: [/input-8, 1485] 
split level 157: [/input, 471] 
split level 158: [/input, 2337] 
split level 159: [/input, 2366] 
split level 160: [/input, 1527] 
split level 161: [/input, 1629] 
split level 162: [/input-8, 2021] 
split level 163: [/input, 1502] 
split level 164: [/input, 3546] 
split level 165: [/input, 3197] 
split level 166: [/input-8, 511] 
split level 167: [/input, 3293] 
split level 168: [/input-8, 1275] 
split level 169: [/input, 3762] 
split level 170: [/input, 3204] 
split level 171: [/input, 3166] 
split level 172: [/input, 3544] 
split level 173: [/input, 1614] 
split level 174: [/input, 1250] 
split level 175: [/input, 3561] 
split level 176: [/input-12, 55] 
split level 177: [/input-8, 1796] 
split level 178: [/input, 457] 
split level 179: [/input-8, 1008] 
split level 180: [/input, 1147] 
split level 181: [/input-8, 1975] 
split level 182: [/input, 980] 
split level 183: [/input-8, 792] 
split level 184: [/input, 3188] 
split level 185: [/input, 1882] 
split level 186: [/input, 2451] 
split level 187: [/input, 3297] 
split level 188: [/input, 2990] 
split level 189: [/input, 3545] 
split level 190: [/input, 2540] 
split level 191: [/input, 1526] 
split level 192: [/input-8, 121] 
split level 193: [/input, 3069] 
split level 194: [/input, 3765] 
split level 195: [/input, 1898] 
split level 196: [/input, 1329] 
split level 197: [/input, 2304] 
split level 198: [/input-8, 390] 
split level 199: [/input, 1794] 
Time: prepare 0.0059    bound 0.0989    transfer 0.0085    finalize 0.0041    func 0.1175    
Accumulated time: func 0.1728    prepare 0.0157    bound 0.1537    transfer 0.0086    finalize 0.0043    
all_split False
======================Cut inference begins======================
max lb tensor(0.11309099) min lb tensor(-0.22030348)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.012985944747924805 
BICCOS Cumulative time: 0.012985944747924805
Preprocessing time: 0.011671781539916992 Inference time: 0.00013327598571777344 Add cuts time: 6.890296936035156e-05 Cut analysis time: 0.0011119842529296875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21523 (1), -0.21491 (1), -0.21491 (1), -0.21486 (1), -0.21475 (1), -0.21474 (1), -0.21465 (1), -0.21446 (1), -0.21426 (1), -0.21426 (1), -0.21420 (1), -0.21397 (1), -0.21384 (1), -0.21380 (1), -0.21379 (1), -0.21375 (1), -0.21339 (1), -0.21311 (1), -0.21294 (1), -0.21290 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5107    set_bounds 0.0109    solve 0.1176    add 0.2100    
Accumulated time: pickout 0.0004    decision 0.5107    set_bounds 0.0109    solve 0.1176    add 0.2100    
Current (lb-rhs): -0.21523022651672363
50 domains visited
Cumulative time: 0.9415950775146484

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 82] [/input-12, 10] [/input-12, 82] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 11] [/input-12, 11] [/input-12, 82] [/input-12, 42] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
split level 2: [/input-12, 42] [/input-12, 42] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 42] [/input-12, 11] [/input-12, 11] 
split level 3: [/input-8, 1362] [/input-8, 1073] [/input-8, 2019] [/input-8, 2019] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-8, 2019] [/input-12, 42] [/input-12, 42] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20950555801391602
10 lb beta sum: 0.3847499489784241, worst -0.20732665061950684
Time: prepare 0.0075    bound 0.1230    transfer 0.0026    finalize 0.0033    func 0.1392    
Accumulated time: func 0.3120    prepare 0.0234    bound 0.2767    transfer 0.0112    finalize 0.0076    
all_split False
======================Cut inference begins======================
max lb tensor(0.14026910) min lb tensor(-0.20672166)
Number of Verified Splits: 54 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.017211437225341797 
BICCOS Cumulative time: 0.0301973819732666
Preprocessing time: 0.013109207153320312 Inference time: 0.0022232532501220703 Add cuts time: 0.001438140869140625 Cut analysis time: 0.00044083595275878906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05873 (2), -0.05828 (2), -0.05808 (2), -0.05796 (2), -0.05793 (2), -0.05792 (2), -0.05790 (2), -0.05784 (2), -0.05762 (2), -0.05754 (2), -0.05707 (2), -0.05706 (2), -0.05675 (2), -0.05651 (2), -0.05623 (2), -0.05606 (2), -0.05598 (2), -0.05587 (2), -0.05564 (2), -0.05546 (2), 
Length of domains: 50
Time: pickout 0.0080    decision 0.0206    set_bounds 0.0130    solve 0.1393    add 0.2200    
Accumulated time: pickout 0.0084    decision 0.5313    set_bounds 0.0239    solve 0.2569    add 0.4299    
Current (lb-rhs): -0.05873441696166992
100 domains visited
Cumulative time: 1.3667199611663818

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
split level 1: [/input-12, 11] [/input-12, 42] [/input-12, 42] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 42] 
split level 2: [/input-12, 42] [/input-8, 1073] [/input-8, 1073] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-8, 1073] 
split level 3: [/input-8, 1073] [/input-8, 2019] [/input-8, 2019] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 2019] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05648481845855713
10 lb beta sum: 0.8360912203788757, worst -0.04703541100025177
Time: prepare 0.0079    bound 0.1177    transfer 0.0012    finalize 0.0026    func 0.1321    
Accumulated time: func 0.4441    prepare 0.0316    bound 0.3944    transfer 0.0124    finalize 0.0101    
all_split False
======================Cut inference begins======================
max lb tensor(0.25607383) min lb tensor(-0.04651755)
Number of Verified Splits: 160 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 13
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.023958444595336914 
BICCOS Cumulative time: 0.054155826568603516
Preprocessing time: 0.012646913528442383 Inference time: 0.0071735382080078125 Add cuts time: 0.0034263134002685547 Cut analysis time: 0.0007116794586181641
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02306 (3), -0.02287 (3), -0.02278 (3), -0.02271 (3), -0.02218 (3), -0.02211 (3), -0.02198 (3), -0.02197 (3), -0.02194 (3), -0.02191 (3), -0.02183 (3), -0.02162 (3), -0.02153 (3), -0.02142 (3), -0.02141 (3), -0.02093 (3), -0.02076 (3), -0.02065 (3), -0.02062 (3), -0.02032 (3), 
Length of domains: 50
Time: pickout 0.0078    decision 0.0199    set_bounds 0.0158    solve 0.1322    add 0.3455    
Accumulated time: pickout 0.0162    decision 0.5512    set_bounds 0.0397    solve 0.3891    add 0.7754    
Current (lb-rhs): -0.023062825202941895
150 domains visited
Cumulative time: 1.941662311553955

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
split level 1: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 2: [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 2019] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] 
split level 3: [/input-8, 1362] [/input-8, 2019] [/input-8, 1362] [/input-8, 2019] [/input-8, 2020] [/input-8, 2019] [/input-8, 2019] [/input-8, 2019] [/input-8, 2019] [/input-8, 2019] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03741753101348877
10 lb beta sum: 1.9878748655319214, worst -0.017282485961914062
Time: prepare 0.0087    bound 0.1471    transfer 0.0013    finalize 0.0034    func 0.1633    
Accumulated time: func 0.6073    prepare 0.0406    bound 0.5415    transfer 0.0137    finalize 0.0135    
all_split False
======================Cut inference begins======================
max lb tensor(0.27724737) min lb tensor(-0.01698864)
Number of Verified Splits: 162 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 14
#cuts 4-6: 15
#cuts >= 20: 0
BICCOS time: 0.0276641845703125 
BICCOS Cumulative time: 0.08182001113891602
Preprocessing time: 0.013112306594848633 Inference time: 0.008417606353759766 Add cuts time: 0.004715919494628906 Cut analysis time: 0.0014183521270751953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00519 (4), -0.00517 (4), -0.00517 (4), -0.00516 (4), -0.00498 (4), -0.00470 (4), -0.00466 (4), -0.00447 (4), -0.00441 (4), -0.00423 (4), -0.00406 (4), -0.00400 (4), -0.00392 (4), -0.00387 (4), -0.00383 (4), -0.00378 (4), -0.00361 (4), -0.00361 (4), -0.00359 (4), -0.00357 (4), 
Length of domains: 50
Time: pickout 0.0232    decision 0.0208    set_bounds 0.0190    solve 0.1634    add 0.4720    
Accumulated time: pickout 0.0394    decision 0.5721    set_bounds 0.0587    solve 0.5525    add 1.2474    
Current (lb-rhs): -0.005191922187805176
200 domains visited
Cumulative time: 2.674820899963379

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
split level 1: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 2: [/input-8, 2019] [/input-8, 1073] [/input-8, 2019] [/input-8, 1073] [/input-8, 1073] [/input-8, 2019] [/input-8, 2019] [/input-8, 2019] [/input-8, 1073] [/input-8, 2019] 
split level 3: [/input-8, 1356] [/input-8, 1362] [/input-8, 1362] [/input-8, 1362] [/input-8, 2019] [/input-8, 1362] [/input-8, 1362] [/input-8, 1362] [/input-8, 1362] [/input-8, 1362] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025491178035736084
10 lb beta sum: 2.2968008518218994, worst -0.017870068550109863
Time: prepare 0.0084    bound 0.1407    transfer 0.0014    finalize 0.0025    func 0.1556    
Accumulated time: func 0.7630    prepare 0.0493    bound 0.6821    transfer 0.0151    finalize 0.0160    
all_split False
======================Cut inference begins======================
max lb tensor(0.38956296) min lb tensor(-0.00197196)
Number of Verified Splits: 381 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0019
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 14
#cuts 4-6: 42
#cuts >= 20: 0
BICCOS time: 0.05101513862609863 
BICCOS Cumulative time: 0.13283514976501465
Preprocessing time: 0.012384414672851562 Inference time: 0.019480466842651367 Add cuts time: 0.015408992767333984 Cut analysis time: 0.0037412643432617188
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0079    decision 0.0199    set_bounds 0.0165    solve 0.1557    add 0.0332    
Accumulated time: pickout 0.0473    decision 0.5920    set_bounds 0.0751    solve 0.7082    add 1.2806    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 82]), tensor([-1., -1.]), tensor([0, 0]), tensor([6.39523989e-11, 2.25964174e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 82]), tensor([-1.,  1.]), tensor([0, 0]), tensor([6.39523989e-11, 1.15254391e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1073, 2019], [-1.0, -1.0], [0, 0], [3.300360524135217e+32, 0.01420198567211628], [2, 3]), '/input-12': (tensor([10, 11, 82]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([3.13745141e-11, 2.24905480e-02, 3.27990502e-02]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1073, 2019], [-1.0, -1.0], [0, 0], [3.300360524135217e+32, 0.01420198567211628], [2, 3]), '/input-12': (tensor([10, 11, 82]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([3.13745141e-11, 2.24905480e-02, 6.12919172e-03]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1073, 2019]), tensor([-1.,  1.]), tensor([0, 0]), tensor([3.30036052e+32, 1.07000936e-02]), tensor([2, 3])), '/input-12': ([10, 11], [1.0, -1.0], [0, 0], [3.1374514097848305e-11, 0.022490547969937325], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1073], [1.0], [0], [0.022488461807370186], [2]), '/input-12': (tensor([10, 11, 82]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([3.13745141e-11, 2.24905480e-02, 3.78155559e-02]), tensor([0, 1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1073], [1.0], [0], [0.022488461807370186], [2]), '/input-12': (tensor([10, 11, 82]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([3.13745141e-11, 2.24905480e-02, 5.66230854e-03]), tensor([0, 1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 11, 82]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([3.13745141e-11, 4.75903302e-02, 5.67667037e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 11, 82]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([3.13745141e-11, 4.75903302e-02, 1.72663350e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  9
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11081540584564209
10 lb beta sum: 1.3819632530212402, worst -0.10163813829421997
Time: prepare 0.0005    bound 0.1434    transfer 0.0002    finalize 0.0002    func 0.1444    
Accumulated time: func 0.9073    prepare 0.0498    bound 0.8255    transfer 0.0152    finalize 0.0162    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 11] [/input-8, 2019] 
split level 2: [/input-8, 2019] [/input-8, 1889] 
split level 3: [/input-8, 1356] [/input-8, 1362] 
split level 4: [/input-8, 1362] [/input-8, 555] 
split level 5: [/input-8, 574] [/input-8, 574] 
split level 6: [/input-8, 573] [/input-8, 1896] 
cut re-enabled after branching node selection
0 lb beta sum: 2.0409059524536133, worst -0.05917388200759888
10 lb beta sum: 2.0661115646362305, worst -0.05774542689323425
Time: prepare 0.0112    bound 0.1495    transfer 0.0050    finalize 0.0029    func 0.1704    
Accumulated time: func 1.0777    prepare 0.0614    bound 0.9751    transfer 0.0203    finalize 0.0191    
all_split False
======================Cut inference begins======================
max lb tensor(0.28182054) min lb tensor(-0.05734429)
Number of Verified Splits: 192 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 2.483496904373169, worst -2.7308926582336426
10 lb beta sum: 0.9624819159507751, worst -0.20372694730758667
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 14
#cuts 4-6: 42
#cuts >= 20: 0
BICCOS time: 0.28632450103759766 
BICCOS Cumulative time: 0.4191596508026123
Preprocessing time: 0.007691144943237305 Inference time: 0.26940011978149414 Add cuts time: 0.006464958190917969 Cut analysis time: 0.002768278121948242
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05734 (7), -0.05704 (7), -0.05676 (7), -0.05645 (7), -0.05640 (7), -0.05609 (7), -0.05515 (7), -0.05507 (7), -0.05467 (7), -0.05456 (7), -0.05448 (7), -0.05437 (7), -0.05420 (7), -0.05412 (7), -0.05247 (7), -0.05239 (7), -0.05146 (7), -0.05141 (7), -0.05120 (7), -0.05106 (7), 
Length of domains: 64
Time: pickout 0.0007    decision 0.0204    set_bounds 0.0272    solve 0.1705    add 0.0652    
Accumulated time: pickout 0.0480    decision 0.6124    set_bounds 0.1024    solve 0.8787    add 1.3458    
Current (lb-rhs): -0.057344287633895874
264 domains visited
Cumulative time: 3.7649497985839844

BaB round 2
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1124] [/input-8, 1499] [/input-8, 1124] [/input-8, 1499] [/input-8, 1124] [/input-8, 1499] [/input-8, 1124] [/input-8, 1499] [/input-8, 1124] [/input-8, 1499] 
split level 1: [/input-8, 1499] [/input-8, 89] [/input-8, 1499] [/input-8, 89] [/input-8, 1499] [/input-8, 89] [/input-8, 1499] [/input-8, 89] [/input-8, 1499] [/input-8, 89] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8334266543388367, worst -0.053669899702072144
10 lb beta sum: 0.8334266543388367, worst -0.05315718054771423
Time: prepare 0.0112    bound 0.1518    transfer 0.0014    finalize 0.0014    func 0.1677    
Accumulated time: func 1.2454    prepare 0.0728    bound 1.1269    transfer 0.0217    finalize 0.0205    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00967684) min lb tensor(-0.05286786)
Number of Verified Splits: 0 of 256
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
Total number of valid cuts: 56.
#cuts 1-3: 14
#cuts 4-6: 42
#cuts >= 20: 0
BICCOS time: 0.00932931900024414 
BICCOS Cumulative time: 0.42848896980285645
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05287 (9), -0.05261 (9), -0.05237 (9), -0.05212 (9), -0.05212 (9), -0.05187 (9), -0.05074 (9), -0.05064 (9), -0.05029 (9), -0.05025 (9), -0.05014 (9), -0.05003 (9), -0.05000 (9), -0.04989 (9), -0.04876 (9), -0.04857 (9), -0.04826 (9), -0.04817 (9), -0.04807 (9), -0.04806 (9), 
Length of domains: 256
Time: pickout 0.0070    decision 0.0142    set_bounds 0.0124    solve 0.1678    add 0.0825    
Accumulated time: pickout 0.0550    decision 0.6266    set_bounds 0.1147    solve 1.0465    add 1.4283    
Current (lb-rhs): -0.05286785960197449
520 domains visited
Cumulative time: 4.065354108810425

BaB round 3
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2020] [/input-8, 1868] [/input-8, 2020] [/input-8, 1868] [/input-8, 2020] [/input-8, 1868] [/input-8, 2020] [/input-8, 1868] [/input-8, 2020] [/input-8, 1868] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8334266543388367, worst -0.05018487572669983
10 lb beta sum: 0.8330608010292053, worst -0.049861639738082886
Time: prepare 0.0224    bound 0.1558    transfer 0.0076    finalize 0.0023    func 0.1915    
Accumulated time: func 1.4369    prepare 0.0954    bound 1.2827    transfer 0.0293    finalize 0.0227    
all_split False
======================Cut inference begins======================
max lb tensor(0.00154486) min lb tensor(-0.04971442)
Number of Verified Splits: 4 of 512
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 58.
#cuts 1-3: 14
#cuts 4-6: 44
#cuts >= 20: 0
BICCOS time: 0.023389101028442383 
BICCOS Cumulative time: 0.45187807083129883
Preprocessing time: 0.01565098762512207 Inference time: 0.0008215904235839844 Add cuts time: 0.003857135772705078 Cut analysis time: 0.00305938720703125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04971 (10), -0.04948 (10), -0.04936 (10), -0.04913 (10), -0.04912 (10), -0.04889 (10), -0.04762 (10), -0.04749 (10), -0.04727 (10), -0.04723 (10), -0.04714 (10), -0.04703 (10), -0.04699 (10), -0.04690 (10), -0.04591 (10), -0.04576 (10), -0.04556 (10), -0.04541 (10), -0.04532 (10), -0.04519 (10), 
Length of domains: 508
Time: pickout 0.0183    decision 0.0266    set_bounds 0.0238    solve 0.1917    add 0.1105    
Accumulated time: pickout 0.0733    decision 0.6531    set_bounds 0.1385    solve 1.2381    add 1.5388    
Current (lb-rhs): -0.04971441626548767
1028 domains visited
Cumulative time: 4.467489242553711

BaB round 4
batch: 508
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 44] [/input-8, 2020] [/input-12, 44] [/input-8, 2020] [/input-12, 44] [/input-8, 2020] [/input-12, 44] [/input-8, 2020] [/input-12, 44] [/input-8, 2020] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.050602078437805176
10 lb beta sum: 0.3449876010417938, worst -0.0496162474155426
Time: prepare 0.0206    bound 0.1602    transfer 0.0136    finalize 0.0062    func 0.2074    
Accumulated time: func 1.6443    prepare 0.1162    bound 1.4429    transfer 0.0429    finalize 0.0290    
all_split False
======================Cut inference begins======================
max lb tensor(0.06844109) min lb tensor(-0.04954605)
Number of Verified Splits: 364 of 1016
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 45.
#cuts 1-3: 17
#cuts 4-6: 28
#cuts >= 20: 0
BICCOS time: 0.07720613479614258 
BICCOS Cumulative time: 0.5290842056274414
Preprocessing time: 0.032939910888671875 Inference time: 0.036904096603393555 Add cuts time: 0.004987955093383789 Cut analysis time: 0.0023741722106933594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04955 (11), -0.04931 (11), -0.04928 (11), -0.04904 (11), -0.04904 (11), -0.04880 (11), -0.04745 (11), -0.04732 (11), -0.04718 (11), -0.04711 (11), -0.04706 (11), -0.04694 (11), -0.04688 (11), -0.04681 (11), -0.04572 (11), -0.04559 (11), -0.04546 (11), -0.04533 (11), -0.04522 (11), -0.04509 (11), 
Length of domains: 652
Time: pickout 0.0593    decision 0.0382    set_bounds 0.0458    solve 0.2077    add 0.0977    
Accumulated time: pickout 0.1326    decision 0.6913    set_bounds 0.1843    solve 1.4459    add 1.6365    
Current (lb-rhs): -0.049546048045158386
1680 domains visited
Cumulative time: 5.00346565246582

BaB round 5
batch: 652
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1868] [/input-12, 44] [/input-8, 1868] [/input-8, 571] [/input-8, 1868] [/input-8, 571] [/input-8, 1868] [/input-8, 571] [/input-8, 1868] [/input-8, 571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04944813251495361
10 lb beta sum: 0.6824061274528503, worst -0.04845398664474487
Time: prepare 0.0257    bound 0.1745    transfer 0.0192    finalize 0.0089    func 0.2382    
Accumulated time: func 1.8825    prepare 0.1422    bound 1.6173    transfer 0.0620    finalize 0.0379    
all_split False
======================Cut inference begins======================
max lb tensor(0.25147581) min lb tensor(-0.04838176)
Number of Verified Splits: 514 of 1304
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 45.
#cuts 1-3: 17
#cuts 4-6: 28
#cuts >= 20: 0
BICCOS time: 0.10768318176269531 
BICCOS Cumulative time: 0.6367673873901367
Preprocessing time: 0.04290652275085449 Inference time: 0.05634164810180664 Add cuts time: 0.0062100887298583984 Cut analysis time: 0.0022249221801757812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04838 (12), -0.04820 (12), -0.04813 (12), -0.04796 (12), -0.04795 (12), -0.04771 (12), -0.04647 (12), -0.04635 (12), -0.04629 (12), -0.04617 (12), -0.04605 (12), -0.04603 (12), -0.04593 (12), -0.04578 (12), -0.04457 (12), -0.04442 (12), -0.04437 (12), -0.04423 (12), -0.04414 (12), -0.04412 (12), 
Length of domains: 790
Time: pickout 0.0247    decision 0.0489    set_bounds 0.0573    solve 0.2386    add 0.1316    
Accumulated time: pickout 0.1572    decision 0.7402    set_bounds 0.2416    solve 1.6845    add 1.7681    
Current (lb-rhs): -0.04838176071643829
2470 domains visited
Cumulative time: 5.624467372894287

BaB round 6
batch: 790
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 89] [/input-8, 571] [/input-8, 89] [/input-12, 44] [/input-8, 89] [/input-12, 44] [/input-8, 89] [/input-12, 44] [/input-8, 89] [/input-12, 44] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9685763120651245, worst -0.2758254408836365
10 lb beta sum: 1.2434853315353394, worst -0.04542103409767151
Time: prepare 0.0732    bound 0.1953    transfer 0.0202    finalize 0.0104    func 0.3107    
Accumulated time: func 2.1932    prepare 0.2156    bound 1.8126    transfer 0.0822    finalize 0.0483    
all_split False
======================Cut inference begins======================
max lb tensor(0.92678791) min lb tensor(-0.04537623)
Number of Verified Splits: 1097 of 1580
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 19
#cuts 4-6: 27
#cuts >= 20: 0
BICCOS time: 0.19129252433776855 
BICCOS Cumulative time: 0.8280599117279053
Preprocessing time: 0.05150341987609863 Inference time: 0.12593722343444824 Add cuts time: 0.011358499526977539 Cut analysis time: 0.0024933815002441406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04538 (13), -0.04522 (13), -0.04499 (13), -0.04479 (13), -0.04464 (13), -0.04440 (13), -0.04335 (13), -0.04320 (13), -0.04314 (13), -0.04306 (13), -0.04298 (13), -0.04296 (13), -0.04275 (13), -0.04248 (13), -0.04247 (13), -0.04240 (13), -0.04233 (13), -0.04224 (13), -0.04209 (13), -0.04201 (13), 
Length of domains: 483
Time: pickout 0.0838    decision 0.0567    set_bounds 0.2365    solve 0.3111    add 0.0918    
Accumulated time: pickout 0.2411    decision 0.7969    set_bounds 0.4780    solve 1.9956    add 1.8599    
Current (lb-rhs): -0.04537622630596161
2953 domains visited
Cumulative time: 6.6133081912994385

BaB round 7
batch: 483
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.043016791343688965
10 lb beta sum: 0.8259961009025574, worst -0.03951388597488403
Time: prepare 0.0190    bound 0.1586    transfer 0.0056    finalize 0.0044    func 0.1940    
Accumulated time: func 2.3872    prepare 0.2348    bound 1.9712    transfer 0.0878    finalize 0.0527    
all_split False
======================Cut inference begins======================
max lb tensor(0.00399137) min lb tensor(-0.03946784)
Number of Verified Splits: 174 of 966
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 19
#cuts 4-6: 27
#cuts >= 20: 0
BICCOS time: 0.06045079231262207 
BICCOS Cumulative time: 0.8885107040405273
Preprocessing time: 0.030462026596069336 Inference time: 0.02422952651977539 Add cuts time: 0.0034224987030029297 Cut analysis time: 0.002336740493774414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03947 (14), -0.03932 (14), -0.03911 (14), -0.03888 (14), -0.03872 (14), -0.03851 (14), -0.03744 (14), -0.03729 (14), -0.03722 (14), -0.03720 (14), -0.03717 (14), -0.03708 (14), -0.03706 (14), -0.03705 (14), -0.03688 (14), -0.03686 (14), -0.03665 (14), -0.03661 (14), -0.03658 (14), -0.03657 (14), 
Length of domains: 792
Time: pickout 0.0192    decision 0.0376    set_bounds 0.0430    solve 0.1943    add 0.1125    
Accumulated time: pickout 0.2603    decision 0.8345    set_bounds 0.5211    solve 2.1899    add 1.9724    
Current (lb-rhs): -0.039467841386795044
3745 domains visited
Cumulative time: 7.089148759841919

BaB round 8
batch: 792
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9769273400306702, worst -0.039467841386795044
10 lb beta sum: 0.9769273400306702, worst -0.039425045251846313
Time: prepare 0.0694    bound 0.1923    transfer 0.0142    finalize 0.0090    func 0.2953    
Accumulated time: func 2.6825    prepare 0.3044    bound 2.1635    transfer 0.1020    finalize 0.0617    
all_split False
======================Cut inference begins======================
max lb tensor(0.00199974) min lb tensor(-0.03938928)
Number of Verified Splits: 102 of 1584
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 19
#cuts 4-6: 27
#cuts >= 20: 0
BICCOS time: 0.0697016716003418 
BICCOS Cumulative time: 0.9582123756408691
Preprocessing time: 0.05130124092102051 Inference time: 0.012830018997192383 Add cuts time: 0.0032782554626464844 Cut analysis time: 0.002292156219482422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03939 (15), -0.03924 (15), -0.03903 (15), -0.03882 (15), -0.03866 (15), -0.03845 (15), -0.03736 (15), -0.03721 (15), -0.03716 (15), -0.03714 (15), -0.03709 (15), -0.03707 (15), -0.03700 (15), -0.03700 (15), -0.03698 (15), -0.03692 (15), -0.03681 (15), -0.03680 (15), -0.03675 (15), -0.03664 (15), 
Length of domains: 1482
Time: pickout 0.0867    decision 0.0557    set_bounds 0.0767    solve 0.2957    add 0.1098    
Accumulated time: pickout 0.3470    decision 0.8902    set_bounds 0.5978    solve 2.4856    add 2.0822    
Current (lb-rhs): -0.03938928246498108
5227 domains visited
Cumulative time: 7.7930052280426025

BaB round 9
batch: 1482
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 90] [/input-12, 64] [/input-8, 90] [/input-12, 64] [/input-8, 90] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-8, 90] [/input-8, 564] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9638473987579346, worst -0.036699920892715454
10 lb beta sum: 0.9638473987579346, worst -0.03664162755012512
Time: prepare 0.1372    bound 0.2983    transfer 0.0440    finalize 0.0178    func 0.5171    
Accumulated time: func 3.1996    prepare 0.4419    bound 2.4618    transfer 0.1460    finalize 0.0795    
all_split False
======================Cut inference begins======================
max lb tensor(0.00682038) min lb tensor(-0.03661683)
Number of Verified Splits: 498 of 2964
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 19
#cuts 4-6: 27
#cuts >= 20: 0
BICCOS time: 0.17451834678649902 
BICCOS Cumulative time: 1.1327307224273682
Preprocessing time: 0.09703302383422852 Inference time: 0.06719446182250977 Add cuts time: 0.007719278335571289 Cut analysis time: 0.002571582794189453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03662 (16), -0.03650 (16), -0.03622 (16), -0.03607 (16), -0.03595 (16), -0.03567 (16), -0.03459 (16), -0.03448 (16), -0.03446 (16), -0.03441 (16), -0.03435 (16), -0.03430 (16), -0.03425 (16), -0.03424 (16), -0.03423 (16), -0.03420 (16), -0.03412 (16), -0.03411 (16), -0.03405 (16), -0.03402 (16), 
Length of domains: 2466
Time: pickout 0.0411    decision 0.0947    set_bounds 0.2707    solve 0.5183    add 0.1181    
Accumulated time: pickout 0.3881    decision 0.9849    set_bounds 0.8685    solve 3.0039    add 2.2004    
Current (lb-rhs): -0.03661683201789856
7693 domains visited
Cumulative time: 9.023980379104614

BaB round 10
batch: 2466
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-8, 564] [/input-12, 64] [/input-8, 564] [/input-12, 64] [/input-8, 564] [/input-8, 564] [/input-8, 564] [/input-8, 564] [/input-12, 64] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9362622499465942, worst -0.03349277377128601
10 lb beta sum: 0.9362622499465942, worst -0.03346708416938782
Time: prepare 0.2273    bound 0.4473    transfer 0.0883    finalize 0.0346    func 0.8314    
Accumulated time: func 4.0310    prepare 0.6694    bound 2.9091    transfer 0.2343    finalize 0.1141    
all_split False
======================Cut inference begins======================
max lb tensor(0.00647306) min lb tensor(-0.03345659)
Number of Verified Splits: 648 of 4932
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 19
#cuts 4-6: 27
#cuts >= 20: 0
BICCOS time: 0.27416396141052246 
BICCOS Cumulative time: 1.4068946838378906
Preprocessing time: 0.16452455520629883 Inference time: 0.09847354888916016 Add cuts time: 0.00844717025756836 Cut analysis time: 0.002718687057495117
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03346 (17), -0.03334 (17), -0.03313 (17), -0.03291 (17), -0.03280 (17), -0.03258 (17), -0.03142 (17), -0.03130 (17), -0.03124 (17), -0.03122 (17), -0.03120 (17), -0.03113 (17), -0.03112 (17), -0.03109 (17), -0.03109 (17), -0.03109 (17), -0.03098 (17), -0.03094 (17), -0.03091 (17), -0.03091 (17), 
Length of domains: 4284
Time: pickout 0.0554    decision 0.1481    set_bounds 0.3903    solve 0.8334    add 0.1821    
Accumulated time: pickout 0.4435    decision 1.1330    set_bounds 1.2588    solve 3.8373    add 2.3825    
Current (lb-rhs): -0.03345659375190735
11977 domains visited
Cumulative time: 10.92495346069336

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 564] [/input-8, 1138] [/input-8, 564] [/input-8, 1138] [/input-8, 564] [/input-8, 1138] [/input-8, 1508] [/input-8, 1138] [/input-12, 64] [/input-8, 1138] 
cut re-enabled after branching node selection
0 lb beta sum: 0.923362672328949, worst -0.03134360909461975
10 lb beta sum: 0.923362672328949, worst -0.031333595514297485
Time: prepare 0.3811    bound 0.6861    transfer 0.1248    finalize 0.0542    func 1.3014    
Accumulated time: func 5.3324    prepare 1.0508    bound 3.5952    transfer 0.3592    finalize 0.1684    
all_split False
======================Cut inference begins======================
max lb tensor(0.00651526) min lb tensor(-0.03132442)
Number of Verified Splits: 702 of 8192
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts: total 383 constraints, 18208 nonzero elements
cuts preparing time: 0.0104
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 429.
#cuts 1-3: 104
#cuts 4-6: 28
#cuts 7-9: 1
#cuts 10-12: 2
#cuts 13-15: 7
#cuts 16-18: 14
#cuts 19-21: 18
#cuts >= 20: 255
BICCOS time: 0.7546944618225098 
BICCOS Cumulative time: 2.1615891456604004
Preprocessing time: 0.2741250991821289 Inference time: 0.3155949115753174 Add cuts time: 0.009910345077514648 Cut analysis time: 0.15506410598754883
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03132 (18), -0.03121 (18), -0.03100 (18), -0.03073 (18), -0.03061 (18), -0.03040 (18), -0.02928 (18), -0.02917 (18), -0.02908 (18), -0.02907 (18), -0.02906 (18), -0.02900 (18), -0.02896 (18), -0.02896 (18), -0.02895 (18), -0.02894 (18), -0.02886 (18), -0.02878 (18), -0.02878 (18), -0.02873 (18), 
Length of domains: 7678
Time: pickout 0.0780    decision 0.2310    set_bounds 0.5556    solve 1.3040    add 0.2230    
Accumulated time: pickout 0.5215    decision 1.3641    set_bounds 1.8145    solve 5.1413    add 2.6055    
Current (lb-rhs): -0.031324416399002075
19467 domains visited
current_vram/total_varm: 10.9GB/99.9GB, batch_size increase to 8192
Cumulative time: 14.093798398971558

BaB round 12
batch: 7678
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-8, 90] [/input-8, 90] [/input-8, 1514] [/input-8, 90] [/input-8, 1514] [/input-12, 64] [/input-8, 90] [/input-8, 564] [/input-8, 90] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03020155429840088
10 lb beta sum: 2.4063303470611572, worst -0.01478680968284607
Time: prepare 0.3260    bound 2.3882    transfer 0.1461    finalize 0.1169    func 3.3280    
Accumulated time: func 8.6604    prepare 1.3771    bound 5.9835    transfer 0.5052    finalize 0.2853    
all_split False
======================Cut inference begins======================
max lb tensor(0.01593482) min lb tensor(-0.01147622)
Number of Verified Splits: 13924 of 15356
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts: total 642 constraints, 34311 nonzero elements
cuts preparing time: 0.0140
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 689.
#cuts 1-3: 141
#cuts 4-6: 25
#cuts 10-12: 4
#cuts 13-15: 15
#cuts 16-18: 28
#cuts 19-21: 35
#cuts >= 20: 441
BICCOS time: 3.491556406021118 
BICCOS Cumulative time: 5.6531455516815186
Preprocessing time: 0.515155553817749 Inference time: 2.533825635910034 Add cuts time: 0.15128207206726074 Cut analysis time: 0.2912931442260742
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01148 (19), -0.01129 (19), -0.01126 (19), -0.01021 (19), -0.01000 (19), -0.00983 (19), -0.00974 (19), -0.00933 (19), -0.00932 (19), -0.00907 (19), -0.00891 (19), -0.00891 (19), -0.00869 (19), -0.00859 (19), -0.00858 (19), -0.00853 (19), -0.00845 (19), -0.00825 (19), -0.00820 (18), -0.00810 (19), 
Length of domains: 1432
Time: pickout 0.2685    decision 0.4371    set_bounds 0.9350    solve 3.3311    add 0.1111    
Accumulated time: pickout 0.7900    decision 1.8012    set_bounds 2.7495    solve 8.4725    add 2.7167    
Current (lb-rhs): -0.011476218700408936
20899 domains visited
Cumulative time: 22.85012722015381

BaB round 13
batch: 1432
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028087854385375977
10 lb beta sum: 2.908658504486084, worst -0.010775205679237843
Time: prepare 0.0622    bound 0.6348    transfer 0.0182    finalize 0.0144    func 0.7481    
Accumulated time: func 9.4085    prepare 1.4395    bound 6.6183    transfer 0.5234    finalize 0.2997    
all_split False
======================Cut inference begins======================
max lb tensor(0.38435233) min lb tensor(-0.00347670)
Number of Verified Splits: 2796 of 2864
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 48.
#cuts 1-3: 25
#cuts 4-6: 23
#cuts >= 20: 0
BICCOS time: 0.7380425930023193 
BICCOS Cumulative time: 6.391188144683838
Preprocessing time: 0.09622550010681152 Inference time: 0.6104166507720947 Add cuts time: 0.02780318260192871 Cut analysis time: 0.003597259521484375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00348 (20), -0.00307 (20), -0.00303 (20), -0.00301 (20), -0.00273 (20), -0.00268 (20), -0.00262 (20), -0.00259 (20), -0.00250 (20), -0.00244 (20), -0.00230 (20), -0.00224 (20), -0.00214 (20), -0.00209 (20), -0.00186 (20), -0.00160 (20), -0.00154 (20), -0.00152 (20), -0.00149 (20), -0.00146 (20), 
Length of domains: 68
Time: pickout 0.0446    decision 0.0863    set_bounds 0.1295    solve 0.7492    add 0.0628    
Accumulated time: pickout 0.8345    decision 1.8875    set_bounds 2.8790    solve 9.2217    add 2.7794    
Current (lb-rhs): -0.0034767016768455505
20967 domains visited
Cumulative time: 24.692843198776245

BaB round 14
batch: 68
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] 
split level 1: [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02298903465270996
10 lb beta sum: 0.38881218433380127, worst -0.02197021245956421
Time: prepare 0.0056    bound 0.1462    transfer 0.0031    finalize 0.0014    func 0.1582    
Accumulated time: func 9.5667    prepare 1.4454    bound 6.7645    transfer 0.5265    finalize 0.3012    
all_split False
======================Cut inference begins======================
max lb tensor(0.45777994) min lb tensor(-0.00347670)
Number of Verified Splits: 112 of 272
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 48.
#cuts 1-3: 25
#cuts 4-6: 23
#cuts >= 20: 0
BICCOS time: 0.03209185600280762 
BICCOS Cumulative time: 6.4232800006866455
Preprocessing time: 0.008515119552612305 Inference time: 0.019044160842895508 Add cuts time: 0.002202272415161133 Cut analysis time: 0.002330303192138672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00348 (22), -0.00348 (22), -0.00348 (22), -0.00348 (22), -0.00307 (22), -0.00307 (22), -0.00307 (22), -0.00307 (22), -0.00301 (22), -0.00301 (22), -0.00301 (22), -0.00301 (22), -0.00273 (22), -0.00273 (22), -0.00273 (22), -0.00273 (22), -0.00268 (22), -0.00268 (22), -0.00268 (22), -0.00268 (22), 
Length of domains: 160
Time: pickout 0.0075    decision 0.0153    set_bounds 0.0130    solve 0.1583    add 0.0807    
Accumulated time: pickout 0.8420    decision 1.9028    set_bounds 2.8920    solve 9.3799    add 2.8601    
Current (lb-rhs): -0.0034767016768455505
21127 domains visited
Cumulative time: 25.00740671157837

BaB round 15
batch: 160
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 685] [/input-8, 685] [/input-8, 685] [/input-8, 685] [/input-8, 685] [/input-8, 685] [/input-8, 685] [/input-8, 685] [/input-8, 685] [/input-8, 685] 
cut re-enabled after branching node selection
0 lb beta sum: 0.3980134427547455, worst -0.020391538739204407
10 lb beta sum: 0.3980134427547455, worst -0.020347073674201965
Time: prepare 0.0141    bound 0.1450    transfer 0.0028    finalize 0.0016    func 0.1655    
Accumulated time: func 9.7323    prepare 1.4596    bound 6.9095    transfer 0.5293    finalize 0.3027    
all_split False
======================Cut inference begins======================
max lb tensor(0.) min lb tensor(-0.00347670)
Number of Verified Splits: 0 of 320
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0012
Total number of valid cuts: 48.
#cuts 1-3: 25
#cuts 4-6: 23
#cuts >= 20: 0
BICCOS time: 0.010930299758911133 
BICCOS Cumulative time: 6.434210300445557
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00348 (23), -0.00348 (23), -0.00348 (23), -0.00348 (23), -0.00348 (23), -0.00348 (23), -0.00348 (23), -0.00348 (23), -0.00307 (23), -0.00307 (23), -0.00307 (23), -0.00307 (23), -0.00307 (23), -0.00307 (23), -0.00307 (23), -0.00307 (23), -0.00301 (23), -0.00301 (23), -0.00301 (23), -0.00301 (23), 
Length of domains: 320
Time: pickout 0.0161    decision 0.0200    set_bounds 0.0138    solve 0.1656    add 0.0798    
Accumulated time: pickout 0.8581    decision 1.9228    set_bounds 2.9058    solve 9.5455    add 2.9399    
Current (lb-rhs): -0.0034767016768455505
21447 domains visited
Cumulative time: 25.32090711593628

BaB round 16
batch: 320
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 923] [/input-8, 923] [/input-8, 923] [/input-8, 1361] [/input-8, 923] [/input-8, 923] [/input-8, 1361] [/input-8, 1361] [/input-8, 923] [/input-8, 923] 
cut re-enabled after branching node selection
0 lb beta sum: 0.3980134427547455, worst -0.01813359558582306
10 lb beta sum: 0.3980134427547455, worst -0.018094375729560852
Time: prepare 0.0276    bound 0.1544    transfer 0.0038    finalize 0.0029    func 0.1939    
Accumulated time: func 9.9262    prepare 1.4875    bound 7.0639    transfer 0.5330    finalize 0.3057    
all_split False
======================Cut inference begins======================
max lb tensor(0.00166965) min lb tensor(-0.00347670)
Number of Verified Splits: 19 of 640
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 48.
#cuts 1-3: 25
#cuts 4-6: 23
#cuts >= 20: 0
BICCOS time: 0.0281674861907959 
BICCOS Cumulative time: 6.4623777866363525
Preprocessing time: 0.019133806228637695 Inference time: 0.003304004669189453 Add cuts time: 0.0035529136657714844 Cut analysis time: 0.0021767616271972656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00348 (24), -0.00348 (24), -0.00348 (24), -0.00348 (24), -0.00348 (24), -0.00348 (24), -0.00348 (24), -0.00348 (24), -0.00348 (24), -0.00348 (24), -0.00348 (24), -0.00348 (24), -0.00348 (24), -0.00348 (24), -0.00348 (24), -0.00348 (24), -0.00307 (24), -0.00307 (24), -0.00307 (24), -0.00307 (24), 
Length of domains: 621
Time: pickout 0.0188    decision 0.0280    set_bounds 0.0276    solve 0.1941    add 0.0856    
Accumulated time: pickout 0.8770    decision 1.9508    set_bounds 2.9335    solve 9.7396    add 3.0256    
Current (lb-rhs): -0.0034767016768455505
22068 domains visited
Cumulative time: 25.71103000640869

BaB round 17
batch: 621
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] 
cut re-enabled after branching node selection
0 lb beta sum: 0.3929542005062103, worst -0.016643822193145752
10 lb beta sum: 0.3929542005062103, worst -0.01662212610244751
Time: prepare 0.0538    bound 0.1709    transfer 0.0080    finalize 0.0063    func 0.2473    
Accumulated time: func 10.1735    prepare 1.5415    bound 7.2348    transfer 0.5410    finalize 0.3120    
all_split False
======================Cut inference begins======================
max lb tensor(0.00468779) min lb tensor(-0.00347670)
Number of Verified Splits: 311 of 1242
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 48.
#cuts 1-3: 26
#cuts 4-6: 22
#cuts >= 20: 0
BICCOS time: 0.09912919998168945 
BICCOS Cumulative time: 6.561506986618042
Preprocessing time: 0.039399147033691406 Inference time: 0.05266284942626953 Add cuts time: 0.004766941070556641 Cut analysis time: 0.002300262451171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00348 (25), -0.00348 (25), -0.00348 (25), -0.00348 (25), -0.00348 (25), -0.00348 (25), -0.00348 (25), -0.00348 (25), -0.00348 (25), -0.00348 (25), -0.00348 (25), -0.00348 (25), -0.00348 (25), -0.00348 (25), -0.00348 (25), -0.00348 (25), -0.00348 (25), -0.00348 (25), -0.00348 (25), -0.00348 (25), 
Length of domains: 931
Time: pickout 0.0228    decision 0.0448    set_bounds 0.0533    solve 0.2475    add 0.0940    
Accumulated time: pickout 0.8998    decision 1.9956    set_bounds 2.9868    solve 9.9871    add 3.1196    
Current (lb-rhs): -0.0034767016768455505
22999 domains visited
Cumulative time: 26.282182216644287

BaB round 18
batch: 931
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 923] [/input-8, 1361] [/input-8, 1361] [/input-8, 923] [/input-8, 923] [/input-8, 1361] [/input-8, 1361] 
cut re-enabled after branching node selection
0 lb beta sum: 0.38532310724258423, worst -0.015116214752197266
10 lb beta sum: 0.633176326751709, worst -0.014228016138076782
Time: prepare 0.0843    bound 0.2131    transfer 0.0145    finalize 0.0088    func 0.3348    
Accumulated time: func 10.5083    prepare 1.6260    bound 7.4478    transfer 0.5556    finalize 0.3208    
all_split False
======================Cut inference begins======================
max lb tensor(0.00297761) min lb tensor(-0.00347670)
Number of Verified Splits: 438 of 1862
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 49.
#cuts 1-3: 26
#cuts 4-6: 23
#cuts >= 20: 0
BICCOS time: 0.14387965202331543 
BICCOS Cumulative time: 6.705386638641357
Preprocessing time: 0.05902528762817383 Inference time: 0.07639384269714355 Add cuts time: 0.0060880184173583984 Cut analysis time: 0.0023725032806396484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00348 (26), -0.00348 (26), -0.00348 (26), -0.00348 (26), -0.00348 (26), -0.00348 (26), -0.00348 (26), -0.00348 (26), -0.00348 (26), -0.00348 (26), -0.00348 (26), -0.00348 (26), -0.00348 (26), -0.00348 (26), -0.00348 (26), -0.00348 (26), -0.00348 (26), -0.00348 (26), -0.00348 (26), -0.00348 (26), 
Length of domains: 1424
Time: pickout 0.0333    decision 0.0625    set_bounds 0.0802    solve 0.3352    add 0.1311    
Accumulated time: pickout 0.9331    decision 2.0581    set_bounds 3.0669    solve 10.3223    add 3.2507    
Current (lb-rhs): -0.0034767016768455505
24423 domains visited
Cumulative time: 27.079580783843994

BaB round 19
batch: 1424
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01307666301727295
10 lb beta sum: 0.2695545554161072, worst -0.012183576822280884
Time: prepare 0.2151    bound 0.2926    transfer 0.0272    finalize 0.0166    func 0.5716    
Accumulated time: func 11.0799    prepare 1.8413    bound 7.7405    transfer 0.5828    finalize 0.3374    
all_split False
======================Cut inference begins======================
max lb tensor(0.00375366) min lb tensor(-0.00347670)
Number of Verified Splits: 1152 of 2848
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 52.
#cuts 1-3: 27
#cuts 4-6: 25
#cuts >= 20: 0
BICCOS time: 0.32569408416748047 
BICCOS Cumulative time: 7.031080722808838
Preprocessing time: 0.09365963935852051 Inference time: 0.21612286567687988 Add cuts time: 0.013487815856933594 Cut analysis time: 0.0024237632751464844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00348 (27), -0.00348 (27), -0.00348 (27), -0.00348 (27), -0.00348 (27), -0.00348 (27), -0.00348 (27), -0.00348 (27), -0.00348 (27), -0.00348 (27), -0.00348 (27), -0.00348 (27), -0.00348 (27), -0.00348 (27), -0.00348 (27), -0.00348 (27), -0.00348 (27), -0.00348 (27), -0.00348 (27), -0.00348 (27), 
Length of domains: 1696
Time: pickout 0.0981    decision 0.0899    set_bounds 0.1267    solve 0.5722    add 0.1032    
Accumulated time: pickout 1.0312    decision 2.1479    set_bounds 3.1937    solve 10.8945    add 3.3539    
Current (lb-rhs): -0.0034767016768455505
26119 domains visited
Cumulative time: 28.412527561187744

BaB round 20
batch: 1696
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 808] [/input-8, 808] [/input-8, 1896] [/input-8, 1896] [/input-8, 808] [/input-8, 1896] [/input-8, 1896] [/input-8, 1896] [/input-8, 1896] [/input-8, 1896] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.011220932006835938
10 lb beta sum: 0.29394403100013733, worst -0.010330945253372192
Time: prepare 0.0729    bound 0.3305    transfer 0.0227    finalize 0.0190    func 0.4688    
Accumulated time: func 11.5486    prepare 1.9145    bound 8.0709    transfer 0.6055    finalize 0.3563    
all_split False
======================Cut inference begins======================
max lb tensor(0.23854592) min lb tensor(-0.00347670)
Number of Verified Splits: 1923 of 3392
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 54.
#cuts 1-3: 32
#cuts 4-6: 22
#cuts >= 20: 0
BICCOS time: 0.6684274673461914 
BICCOS Cumulative time: 7.699508190155029
Preprocessing time: 0.10898852348327637 Inference time: 0.5374000072479248 Add cuts time: 0.01964855194091797 Cut analysis time: 0.0023903846740722656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00348 (28), -0.00348 (28), -0.00348 (28), -0.00348 (28), -0.00348 (28), -0.00348 (28), -0.00348 (28), -0.00348 (28), -0.00348 (28), -0.00348 (28), -0.00348 (28), -0.00348 (28), -0.00348 (28), -0.00348 (28), -0.00348 (28), -0.00348 (28), -0.00348 (28), -0.00348 (28), -0.00348 (28), -0.00348 (28), 
Length of domains: 1469
Time: pickout 0.0481    decision 0.1040    set_bounds 0.1524    solve 0.4702    add 0.0939    
Accumulated time: pickout 1.0792    decision 2.2519    set_bounds 3.3461    solve 11.3647    add 3.4478    
Current (lb-rhs): -0.0034767016768455505
27588 domains visited
Cumulative time: 29.97546911239624

BaB round 21
batch: 1469
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01016390323638916
10 lb beta sum: 0.5704998970031738, worst -0.0065090954303741455
Time: prepare 0.0634    bound 0.2964    transfer 0.0085    finalize 0.0138    func 0.4018    
Accumulated time: func 11.9504    prepare 1.9781    bound 8.3674    transfer 0.6140    finalize 0.3702    
all_split False
======================Cut inference begins======================
max lb tensor(0.48291951) min lb tensor(-0.00347670)
Number of Verified Splits: 2415 of 2938
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts: total 991 constraints, 47272 nonzero elements
cuts preparing time: 0.1771
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1048.
#cuts 1-3: 220
#cuts 4-6: 22
#cuts 10-12: 8
#cuts 13-15: 19
#cuts 16-18: 59
#cuts 19-21: 55
#cuts >= 20: 665
BICCOS time: 1.1402935981750488 
BICCOS Cumulative time: 8.839801788330078
Preprocessing time: 0.09593009948730469 Inference time: 0.465822696685791 Add cuts time: 0.021220922470092773 Cut analysis time: 0.5573198795318604
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00348 (29), -0.00348 (29), -0.00348 (29), -0.00348 (29), -0.00348 (29), -0.00348 (29), -0.00348 (29), -0.00348 (29), -0.00348 (29), -0.00348 (29), -0.00336 (29), -0.00334 (29), -0.00329 (29), -0.00307 (29), -0.00307 (29), -0.00307 (29), -0.00307 (29), -0.00307 (29), -0.00307 (29), -0.00307 (29), 
Length of domains: 523
Time: pickout 0.0414    decision 0.0904    set_bounds 0.1318    solve 0.4025    add 0.0878    
Accumulated time: pickout 1.1206    decision 2.3423    set_bounds 3.4779    solve 11.7672    add 3.5356    
Current (lb-rhs): -0.0034767016768455505
28111 domains visited
Cumulative time: 31.907498836517334

BaB round 22
batch: 523
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1393] [/input-8, 1393] [/input-8, 1896] [/input-8, 1896] [/input-8, 1896] [/input-8, 1896] [/input-8, 700] [/input-8, 1896] [/input-8, 1393] [/input-8, 1393] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.008565187454223633

all verified at 6th iter
Time: prepare 0.0206    bound 0.1171    transfer 0.0088    finalize 0.0057    func 0.1588    
Accumulated time: func 12.1093    prepare 1.9989    bound 8.4845    transfer 0.6228    finalize 0.3758    
all_split False
======================Cut inference begins======================
max lb tensor(0.66588044) min lb tensor(0.00013208)
Number of Verified Splits: 1046 of 1046
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0010
Total number of valid cuts: 1048.
#cuts 1-3: 220
#cuts 4-6: 22
#cuts 10-12: 8
#cuts 13-15: 19
#cuts 16-18: 59
#cuts 19-21: 55
#cuts >= 20: 665
BICCOS time: 0.035169124603271484 
BICCOS Cumulative time: 8.87497091293335
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0211    decision 0.0380    set_bounds 0.0465    solve 0.1590    add 0.0001    
Accumulated time: pickout 1.1417    decision 2.3804    set_bounds 3.5244    solve 11.9262    add 3.5357    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
28111 domains visited
Cumulative time: 32.21340560913086

found process to kill: terminal indx = 2
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.cuts
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.indx
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=169_spec=2_26536342.log
found process for pidx=2
kill process for pidx=2
Result: safe in 35.1581 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 170, vnnlib ID: 170 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.00588608, -16.16182518,  -6.58917904,  -9.66689301,  -7.57059002,
          -8.67937565, -11.63756847, -10.25432014, -14.60658455, -14.13991070]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [571]; unstable size 571; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 151, 1, 571] with unstable size 150 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 571] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 571] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [150]; unstable size 150; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 150] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 150] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.57134867,  7.26472569, -1.64735639,  1.38431573,  0.25252271,
          3.19363308,  1.94417989,  5.92638016,  5.30164909]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.00588608, -16.16182518,  -6.58917904,  -9.66689301,  -7.57059002,
          -8.67937565, -11.63756847, -10.25432014, -14.60658455, -14.13991070]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.00588608, -16.16182518,  -6.58917904,  -9.66689301,  -7.57059002,
           -8.67937565, -11.63756847, -10.25432014, -14.60658455, -14.13991070]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.98141098]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.84603173, -0.94126981, -0.86190474,  ..., -0.33809513,
            -0.48095238, -0.51269841],
           [-0.25873005, -0.30634910, -0.27460307,  ..., -0.29047608,
            -0.33809513, -0.43333322],
           [ 0.42380959,  0.36031753,  0.39206356,  ..., -0.08412688,
            -0.14761895, -0.32222211],
           ...,
           [ 0.47142863,  0.48730165,  0.55079371,  ...,  0.05873025,
             0.01111121,  0.12222230],
           [ 0.12222230,  0.10634929,  0.23333341,  ..., -0.02063482,
            -0.02063482,  0.16984135],
           [-0.19523799, -0.41746020, -0.29047608,  ...,  0.16984135,
             0.31269848,  0.58253974]],

          [[-0.67632848, -0.78904986, -0.72463763,  ..., -0.03220600,
            -0.17713353, -0.20933965],
           [ 0.04830930, -0.01610294,  0.01610318,  ...,  0.03220624,
            -0.01610294, -0.11272129],
           [ 0.88566834,  0.82125610,  0.85346222,  ...,  0.24154601,
             0.19323683, -0.01610294],
           ...,
           [ 0.95008057,  0.98228669,  1.03059590,  ...,  0.62801939,
             0.56360716,  0.61191636],
           [ 0.70853472,  0.72463775,  0.85346222,  ...,  0.66022551,
             0.62801939,  0.77294695],
           [ 0.46698883,  0.22544295,  0.40257660,  ...,  0.77294695,
             0.85346222,  1.14331758]],

          [[-0.01349309, -0.07346311,  0.03148442,  ...,  0.76611710,
             0.66116959,  0.64617711],
           [-0.02848560, -0.04347810,  0.00149941,  ...,  0.78110963,
             0.78110963,  0.78110963],
           [-0.14842562, -0.19340314, -0.14842562,  ...,  0.81109464,
             0.81109464,  0.76611710],
           ...,
           [-0.53823084, -0.56821585, -0.50824583,  ..., -0.68815589,
            -0.65817088, -0.49325335],
           [-0.58320838, -0.73313338, -0.61319339,  ..., -0.83808094,
            -0.83808094, -0.65817088],
           [-0.80809593, -1.04797614, -0.85307342,  ..., -0.74812591,
            -0.67316341, -0.43328333]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0668 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 171, vnnlib ID: 171 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.39601326, -14.69097233, -12.64669704, -12.07789993, -12.42763519,
         -12.80878258, -10.90289593, -13.06480980, -16.92237282, -13.27768993]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [576]; unstable size 576; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 576] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 576] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 576] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 199] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.12973392, 2.10289240, 0.60040069, 0.30346048, 0.51467490, 0.89803636,
         1.03227437, 3.96525526, 0.86045051]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0563 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 172, vnnlib ID: 172 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.66107941, -11.79125309,  -7.86607170, -10.32452965,  -7.72983742,
         -11.17636871, -10.86951828, -11.03235435,  -7.73300457, -11.89622021]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [722]; unstable size 722; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 180, 1, 722] with unstable size 179 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 722] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 722] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [179]; unstable size 179; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 179] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 179] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.99104738,  0.21340632,  2.51710558, -0.09744877,  3.08586311,
          3.07672834,  2.41397524, -0.15205109,  3.96747780]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.66107941, -11.79125309,  -7.86607170, -10.32452965,  -7.72983742,
         -11.17636871, -10.86951828, -11.03235435,  -7.73300457, -11.89622021]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.95it/s]100%|██████████| 1/1 [00:00<00:00,  8.95it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.92382812, -11.80677509,  -8.08763027, -10.42839050,  -7.89339161,
          -11.28264713, -10.88448238, -11.24233246,  -7.34816551, -11.92977428],
         [ -6.92382812, -11.80677509,  -8.08763027, -10.42839050,  -7.89339161,
          -11.28264713, -10.88448238, -11.24233246,  -7.34816551, -11.92977428]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.96956348, 0.42433739]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1147 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.568559646606445
alpha/beta optimization time: 1.2037827968597412
initial alpha-crown bounds: tensor([[ 4.04605627,  0.26190418,  2.56589484, -0.03486413,  3.13469839,
          3.12771153,  2.50110221, -0.06319255,  4.02924919]], device='cuda:0')
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.06319254636764526
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6434 seconds.
lower bounds for all target labels: [4.046055316925049, 0.26190537214279175, 2.5658950805664062, -0.03486430644989014, 3.134697437286377, 3.1277096271514893, 2.501100778579712, -0.06319165229797363, 4.029249668121338]
Number of cpus: 96  Number of subproblems: 2
Reassign each subproblems with number of thread: 48
Starting MIP solver for these labels: [3, 7]
start creating model mps for candidates: ['lay/16_3', 'lay/16_7']
Process 243441 received signal 15. Terminate pool <multiprocessing.pool.Pool state=RUN pool_size=96>
Process 243441 received signal 15. Terminate pool <multiprocessing.pool.Pool state=TERMINATE pool_size=96>
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.54768466949463
Verifying property 0 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.046056270599365.

Properties batch 1, size 1
Remaining timeout: 198.36998677253723
Verifying property 1 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.02924919128418.

Properties batch 2, size 1
Remaining timeout: 198.25254654884338
Verifying property 2 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.1346983909606934.

Properties batch 3, size 1
Remaining timeout: 198.13605046272278
Verifying property 3 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.127711534500122.

Properties batch 4, size 1
Remaining timeout: 198.0207965373993
Verifying property 4 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.565894842147827.

Properties batch 5, size 1
Remaining timeout: 197.90577459335327
Verifying property 5 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.5011022090911865.

Properties batch 6, size 1
Remaining timeout: 197.78923082351685
Verifying property 6 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.26190418004989624.

Properties batch 7, size 1
Remaining timeout: 197.67114400863647
Verifying property 7 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03486413]], device='cuda:0') need to verify.
Model prediction is: tensor([ -6.66107941, -11.79125309,  -7.86607170, -10.32452965,  -7.72983742,
        -11.17636871, -10.86951828, -11.03235435,  -7.73300457, -11.89622021],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03486413]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 722
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 177
Node /15 input 0: size torch.Size([100]) unstable 19
-----------------
# of unstable neurons: 918
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0008556842803955078
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0004    bound 0.0575    transfer 0.0002    finalize 0.0002    func 0.0583    
Accumulated time: func 0.0583    prepare 0.0004    bound 0.0575    transfer 0.0002    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 41] 
split level 1: [/input-12, 45] 
split level 2: [/input-12, 37] 
split level 3: [/input-12, 9] 
split level 4: [/input-12, 78] 
split level 5: [/input-12, 90] 
split level 6: [/input-8, 651] 
split level 7: [/input-12, 92] 
split level 8: [/input-8, 802] 
split level 9: [/input-12, 58] 
split level 10: [/input-8, 534] 
split level 11: [/input-8, 652] 
split level 12: [/input-8, 1012] 
split level 13: [/input-8, 563] 
split level 14: [/input-8, 684] 
split level 15: [/input-8, 650] 
split level 16: [/input-8, 653] 
split level 17: [/input-8, 996] 
split level 18: [/input-8, 1886] 
split level 19: [/input-8, 564] 
split level 20: [/input, 1483] 
split level 21: [/input-8, 1306] 
split level 22: [/input, 3514] 
split level 23: [/input-8, 1330] 
split level 24: [/input-8, 548] 
split level 25: [/input-8, 1331] 
split level 26: [/input, 2250] 
split level 27: [/input-8, 1454] 
split level 28: [/input-8, 566] 
split level 29: [/input-8, 1010] 
split level 30: [/input-8, 1554] 
split level 31: [/input, 1721] 
split level 32: [/input, 2266] 
split level 33: [/input, 2983] 
split level 34: [/input-8, 573] 
split level 35: [/input-8, 994] 
split level 36: [/input, 2409] 
split level 37: [/input-8, 2024] 
split level 38: [/input-8, 857] 
split level 39: [/input-8, 681] 
split level 40: [/input-8, 927] 
split level 41: [/input-8, 1316] 
split level 42: [/input, 3530] 
split level 43: [/input, 3113] 
split level 44: [/input-8, 1449] 
split level 45: [/input-8, 1305] 
split level 46: [/input, 3110] 
split level 47: [/input-8, 1553] 
split level 48: [/input-8, 2022] 
split level 49: [/input, 3112] 
split level 50: [/input, 3173] 
split level 51: [/input, 1499] 
split level 52: [/input, 3257] 
split level 53: [/input-8, 1629] 
split level 54: [/input, 3429] 
split level 55: [/input, 342] 
split level 56: [/input, 3131] 
split level 57: [/input, 2361] 
split level 58: [/input, 3357] 
split level 59: [/input, 3735] 
split level 60: [/input, 1749] 
split level 61: [/input, 375] 
split level 62: [/input, 3546] 
split level 63: [/input, 3432] 
split level 64: [/input, 2375] 
split level 65: [/input, 3383] 
split level 66: [/input-8, 1974] 
split level 67: [/input, 3493] 
split level 68: [/input, 2987] 
split level 69: [/input, 3369] 
split level 70: [/input-8, 1461] 
split level 71: [/input, 676] 
split level 72: [/input, 2651] 
split level 73: [/input-8, 1109] 
split level 74: [/input, 3370] 
split level 75: [/input-8, 1803] 
split level 76: [/input, 3174] 
split level 77: [/input, 3895] 
split level 78: [/input, 341] 
split level 79: [/input-8, 1071] 
split level 80: [/input, 3115] 
split level 81: [/input, 3143] 
split level 82: [/input-8, 278] 
split level 83: [/input, 2405] 
split level 84: [/input, 3893] 
split level 85: [/input, 3116] 
split level 86: [/input, 3945] 
split level 87: [/input, 3928] 
split level 88: [/input-8, 1001] 
split level 89: [/input, 3929] 
split level 90: [/input, 2379] 
split level 91: [/input, 3511] 
split level 92: [/input, 1335] 
split level 93: [/input-8, 1249] 
split level 94: [/input, 2392] 
split level 95: [/input-8, 1997] 
split level 96: [/input-8, 1122] 
split level 97: [/input, 3927] 
split level 98: [/input-8, 464] 
split level 99: [/input, 2374] 
split level 100: [/input, 328] 
split level 101: [/input, 3256] 
split level 102: [/input, 3761] 
split level 103: [/input, 3523] 
split level 104: [/input, 3545] 
split level 105: [/input, 3382] 
split level 106: [/input, 2404] 
split level 107: [/input, 1750] 
split level 108: [/input-8, 1552] 
split level 109: [/input, 3448] 
split level 110: [/input-8, 1065] 
split level 111: [/input-8, 574] 
split level 112: [/input, 1310] 
split level 113: [/input, 1351] 
split level 114: [/input-8, 1308] 
split level 115: [/input, 3413] 
split level 116: [/input, 3098] 
split level 117: [/input, 330] 
split level 118: [/input, 3550] 
split level 119: [/input, 2395] 
split level 120: [/input, 3894] 
split level 121: [/input, 1446] 
split level 122: [/input, 2373] 
split level 123: [/input, 3763] 
split level 124: [/input, 2981] 
split level 125: [/input, 3241] 
split level 126: [/input, 344] 
split level 127: [/input, 2393] 
split level 128: [/input-8, 465] 
split level 129: [/input, 1502] 
split level 130: [/input, 3431] 
split level 131: [/input, 1336] 
split level 132: [/input, 1531] 
split level 133: [/input, 2376] 
split level 134: [/input-8, 646] 
split level 135: [/input, 3925] 
split level 136: [/input-8, 645] 
split level 137: [/input, 3125] 
split level 138: [/input-8, 1995] 
split level 139: [/input, 3931] 
split level 140: [/input, 1365] 
split level 141: [/input, 3738] 
split level 142: [/input, 2380] 
split level 143: [/input, 3397] 
split level 144: [/input, 3371] 
split level 145: [/input, 2235] 
split level 146: [/input, 2363] 
split level 147: [/input, 3175] 
split level 148: [/input, 1479] 
split level 149: [/input, 3926] 
split level 150: [/input, 1337] 
split level 151: [/input, 3005] 
split level 152: [/input-8, 2030] 
split level 153: [/input, 1532] 
split level 154: [/input, 3576] 
split level 155: [/input, 3571] 
split level 156: [/input, 1415] 
split level 157: [/input, 2506] 
split level 158: [/input, 3573] 
split level 159: [/input, 2652] 
split level 160: [/input, 438] 
split level 161: [/input, 3384] 
split level 162: [/input-8, 1441] 
split level 163: [/input, 1309] 
split level 164: [/input-8, 981] 
split level 165: [/input, 3356] 
split level 166: [/input-8, 1996] 
split level 167: [/input, 2388] 
split level 168: [/input, 2362] 
split level 169: [/input, 3580] 
split level 170: [/input, 44] 
split level 171: [/input, 3385] 
split level 172: [/input, 3160] 
split level 173: [/input, 3381] 
split level 174: [/input, 1863] 
split level 175: [/input, 3883] 
split level 176: [/input, 3387] 
split level 177: [/input, 2346] 
split level 178: [/input, 3572] 
split level 179: [/input, 3582] 
split level 180: [/input, 340] 
split level 181: [/input, 1530] 
split level 182: [/input, 2394] 
split level 183: [/input, 769] 
split level 184: [/input, 3574] 
split level 185: [/input, 1491] 
split level 186: [/input, 3575] 
split level 187: [/input, 2542] 
split level 188: [/input-8, 1758] 
split level 189: [/input, 1533] 
split level 190: [/input, 1453] 
split level 191: [/input, 3271] 
split level 192: [/input, 2403] 
split level 193: [/input, 1487] 
split level 194: [/input, 2553] 
split level 195: [/input, 3753] 
split level 196: [/input, 3943] 
split level 197: [/input-8, 1524] 
split level 198: [/input, 1334] 
split level 199: [/input, 3354] 
Time: prepare 0.0061    bound 0.0985    transfer 0.0074    finalize 0.0044    func 0.1165    
Accumulated time: func 0.1748    prepare 0.0164    bound 0.1560    transfer 0.0075    finalize 0.0046    
all_split False
======================Cut inference begins======================
max lb tensor(0.10729527) min lb tensor(-0.03476006)
Number of Verified Splits: 11 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.014082908630371094 
BICCOS Cumulative time: 0.014082908630371094
Preprocessing time: 0.012124061584472656 Inference time: 0.0005459785461425781 Add cuts time: 0.0001842975616455078 Cut analysis time: 0.0012285709381103516
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5242    set_bounds 0.0144    solve 0.1167    add 0.0110    
Accumulated time: pickout 0.0004    decision 0.5242    set_bounds 0.0144    solve 0.1167    add 0.0110    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41]), tensor([-1.]), tensor([0]), tensor([3.30031101e+32]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41]), tensor([1.]), tensor([0]), tensor([1.45621363e+32]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.08164221048355103

all verified at 0th iter
Time: prepare 0.0004    bound 0.0047    transfer 0.0001    finalize 0.0001    func 0.0053    
Accumulated time: func 0.1802    prepare 0.0168    bound 0.1607    transfer 0.0076    finalize 0.0048    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 196.67255473136902
Verifying property 8 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.06319255]], device='cuda:0') need to verify.
Model prediction is: tensor([ -6.66107941, -11.79125309,  -7.86607170, -10.32452965,  -7.72983742,
        -11.17636871, -10.86951828, -11.03235435,  -7.73300457, -11.89622021],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.06319255]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 722
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 177
Node /15 input 0: size torch.Size([100]) unstable 19
-----------------
# of unstable neurons: 918
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.00017023086547851562
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0512    transfer 0.0001    finalize 0.0001    func 0.0517    
Accumulated time: func 0.0517    prepare 0.0002    bound 0.0512    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 53] 
split level 1: [/input-12, 21] 
split level 2: [/input-12, 78] 
split level 3: [/input-12, 9] 
split level 4: [/input-8, 1331] 
split level 5: [/input-12, 74] 
split level 6: [/input-12, 99] 
split level 7: [/input-8, 1330] 
split level 8: [/input-8, 1777] 
split level 9: [/input-8, 1396] 
split level 10: [/input-8, 1785] 
split level 11: [/input-8, 534] 
split level 12: [/input-8, 564] 
split level 13: [/input-8, 1776] 
split level 14: [/input-12, 40] 
split level 15: [/input-8, 563] 
split level 16: [/input, 2167] 
split level 17: [/input-8, 1372] 
split level 18: [/input-8, 1395] 
split level 19: [/input-8, 566] 
split level 20: [/input-8, 1769] 
split level 21: [/input-8, 880] 
split level 22: [/input-8, 1509] 
split level 23: [/input-8, 1839] 
split level 24: [/input-8, 1394] 
split level 25: [/input-12, 32] 
split level 26: [/input-8, 573] 
split level 27: [/input-8, 1524] 
split level 28: [/input-8, 1525] 
split level 29: [/input-8, 1900] 
split level 30: [/input-8, 118] 
split level 31: [/input-8, 1554] 
split level 32: [/input-8, 650] 
split level 33: [/input-8, 1454] 
split level 34: [/input, 3432] 
split level 35: [/input, 2983] 
split level 36: [/input-8, 299] 
split level 37: [/input-8, 1782] 
split level 38: [/input-8, 567] 
split level 39: [/input-8, 651] 
split level 40: [/input-8, 1841] 
split level 41: [/input-8, 1138] 
split level 42: [/input-8, 1843] 
split level 43: [/input, 3736] 
split level 44: [/input-8, 1374] 
split level 45: [/input, 3431] 
split level 46: [/input-8, 117] 
split level 47: [/input, 2683] 
split level 48: [/input, 1370] 
split level 49: [/input-8, 1306] 
split level 50: [/input-8, 1305] 
split level 51: [/input, 3433] 
split level 52: [/input, 2392] 
split level 53: [/input, 3417] 
split level 54: [/input, 3753] 
split level 55: [/input-8, 1429] 
split level 56: [/input, 2950] 
split level 57: [/input-8, 574] 
split level 58: [/input, 2987] 
split level 59: [/input, 2409] 
split level 60: [/input-8, 2020] 
split level 61: [/input, 3415] 
split level 62: [/input-8, 1842] 
split level 63: [/input, 676] 
split level 64: [/input-8, 1523] 
split level 65: [/input-8, 1364] 
split level 66: [/input-8, 1249] 
split level 67: [/input, 3174] 
split level 68: [/input, 388] 
split level 69: [/input, 1369] 
split level 70: [/input, 3448] 
split level 71: [/input, 3928] 
split level 72: [/input, 2391] 
split level 73: [/input, 3735] 
split level 74: [/input, 3160] 
split level 75: [/input, 2393] 
split level 76: [/input-8, 646] 
split level 77: [/input, 3429] 
split level 78: [/input, 1400] 
split level 79: [/input-8, 1122] 
split level 80: [/input, 3175] 
split level 81: [/input, 375] 
split level 82: [/input, 3942] 
split level 83: [/input-8, 1449] 
split level 84: [/input-8, 1803] 
split level 85: [/input, 3927] 
split level 86: [/input, 2375] 
split level 87: [/input, 3550] 
split level 88: [/input, 3975] 
split level 89: [/input, 3144] 
split level 90: [/input-8, 1010] 
split level 91: [/input-8, 1908] 
split level 92: [/input, 387] 
split level 93: [/input-8, 1526] 
split level 94: [/input, 371] 
split level 95: [/input, 3413] 
split level 96: [/input, 3401] 
split level 97: [/input, 2394] 
split level 98: [/input-8, 1441] 
split level 99: [/input, 1502] 
split level 100: [/input, 2981] 
split level 101: [/input, 3739] 
split level 102: [/input, 1386] 
split level 103: [/input, 3738] 
split level 104: [/input, 1335] 
split level 105: [/input, 3382] 
split level 106: [/input, 342] 
split level 107: [/input, 674] 
split level 108: [/input, 2374] 
split level 109: [/input, 2395] 
split level 110: [/input, 3419] 
split level 111: [/input-8, 1069] 
split level 112: [/input, 3944] 
split level 113: [/input-8, 1319] 
split level 114: [/input-8, 927] 
split level 115: [/input, 1402] 
split level 116: [/input, 1385] 
split level 117: [/input, 3383] 
split level 118: [/input, 2407] 
split level 119: [/input, 1356] 
split level 120: [/input, 3926] 
split level 121: [/input, 3925] 
split level 122: [/input, 344] 
split level 123: [/input-8, 681] 
split level 124: [/input, 3397] 
split level 125: [/input, 3546] 
split level 126: [/input-8, 1436] 
split level 127: [/input, 1893] 
split level 128: [/input, 2747] 
split level 129: [/input, 3754] 
split level 130: [/input, 3381] 
split level 131: [/input, 2376] 
split level 132: [/input-8, 464] 
split level 133: [/input-8, 1780] 
split level 134: [/input, 2652] 
split level 135: [/input-8, 1886] 
split level 136: [/input, 1351] 
split level 137: [/input, 3943] 
split level 138: [/input, 3143] 
split level 139: [/input, 3404] 
split level 140: [/input, 341] 
split level 141: [/input, 1353] 
split level 142: [/input-8, 1109] 
split level 143: [/input-8, 1001] 
split level 144: [/input, 1454] 
split level 145: [/input, 2379] 
split level 146: [/input-8, 111] 
split level 147: [/input, 328] 
split level 148: [/input, 3384] 
split level 149: [/input, 1605] 
split level 150: [/input-8, 1366] 
split level 151: [/input, 4022] 
split level 152: [/input, 2723] 
split level 153: [/input-8, 1371] 
split level 154: [/input-8, 114] 
split level 155: [/input, 1365] 
split level 156: [/input, 1336] 
split level 157: [/input, 1349] 
split level 158: [/input, 3569] 
split level 159: [/input-8, 1778] 
split level 160: [/input, 2872] 
split level 161: [/input, 3403] 
split level 162: [/input, 2373] 
split level 163: [/input, 3948] 
split level 164: [/input, 3718] 
split level 165: [/input, 662] 
split level 166: [/input, 2871] 
split level 167: [/input, 3412] 
split level 168: [/input-8, 1758] 
split level 169: [/input, 3929] 
split level 170: [/input-8, 466] 
split level 171: [/input, 1633] 
split level 172: [/input, 330] 
split level 173: [/input, 1415] 
split level 174: [/input, 1649] 
split level 175: [/input, 2189] 
split level 176: [/input, 2636] 
split level 177: [/input, 1665] 
split level 178: [/input, 340] 
split level 179: [/input, 2762] 
split level 180: [/input, 2685] 
split level 181: [/input, 3723] 
split level 182: [/input, 3570] 
split level 183: [/input, 1606] 
split level 184: [/input, 1681] 
split level 185: [/input-8, 1903] 
split level 186: [/input, 2123] 
split level 187: [/input, 385] 
split level 188: [/input, 3530] 
split level 189: [/input, 1334] 
split level 190: [/input, 3428] 
split level 191: [/input, 1595] 
split level 192: [/input, 1891] 
split level 193: [/input, 1984] 
split level 194: [/input, 1487] 
split level 195: [/input, 696] 
split level 196: [/input, 3385] 
split level 197: [/input-8, 645] 
split level 198: [/input, 2633] 
split level 199: [/input, 1374] 
Time: prepare 0.0061    bound 0.0948    transfer 0.0071    finalize 0.0029    func 0.1110    
Accumulated time: func 0.1626    prepare 0.0160    bound 0.1461    transfer 0.0072    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.25268102) min lb tensor(-0.06311685)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.012286901473999023 
BICCOS Cumulative time: 0.012286901473999023
Preprocessing time: 0.010590791702270508 Inference time: 0.00045943260192871094 Add cuts time: 0.00023674964904785156 Cut analysis time: 0.0009999275207519531
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.5120    set_bounds 0.0105    solve 0.1111    add 0.0101    
Accumulated time: pickout 0.0011    decision 0.5120    set_bounds 0.0105    solve 0.1111    add 0.0101    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53]), tensor([-1.]), tensor([0]), tensor([5.11787834e-11]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53]), tensor([1.]), tensor([0]), tensor([3.30031101e+32]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06110173463821411

all verified at 2th iter
Time: prepare 0.0003    bound 0.0146    transfer 0.0001    finalize 0.0001    func 0.0152    
Accumulated time: func 0.1779    prepare 0.0163    bound 0.1607    transfer 0.0073    finalize 0.0031    
After pruning, left:  0

Back to Regular BaB

the mip building process is not terminated yet, kill it
the mip building process is not terminated yet, kill it
Result: safe in 4.7893 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 173, vnnlib ID: 173 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.96530533, -6.64648819, -4.20401192, -3.31281948, -3.79201317,
         -4.34627962, -3.10760784, -5.26119852, -7.51378918, -6.06500340]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [631]; unstable size 631; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 231, 1, 631] with unstable size 230 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 631] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 631] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [230]; unstable size 230; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 230] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 230] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.21187747,  1.27583218, -0.23146820, -0.57322311,  0.65389627,
         -1.39956284,  0.85230488,  2.21380830,  0.78132963]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.96530533, -6.64648819, -4.20401192, -3.31281948, -3.79201317,
         -4.34627962, -3.10760784, -5.26119852, -7.51378918, -6.06500340]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.96530533, -6.64648819, -4.20401287, -3.31281900, -3.79201317,
          -4.34627962, -3.10760832, -5.26119804, -7.51378918, -6.06500387],
         [-4.96530533, -6.64648819, -4.20401287, -3.31281900, -3.79201317,
          -4.34627962, -3.10760832, -5.26119804, -7.51378918, -6.06500387]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.89119387,  0.47919416, -0.20521069]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0787 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 174, vnnlib ID: 174 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.29587555, -13.48483086,  -6.09756279,  -7.41362858,  -5.89941597,
          -7.54863977,  -8.10572243,  -7.43977880, -10.08916378, -11.89095020]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [646]; unstable size 646; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 267, 1, 646] with unstable size 266 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 646] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 646] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [266]; unstable size 266; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 266] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 266] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.30793631,  4.85469437, -0.91200411,  0.07975274,  0.11433166,
          0.44498557,  0.30451059,  1.77916288,  3.32840061]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.29587555, -13.48483086,  -6.09756279,  -7.41362858,  -5.89941597,
          -7.54863977,  -8.10572243,  -7.43977880, -10.08916378, -11.89095020]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.94982910, -13.32391453,  -5.86624622,  -7.29577208,  -6.18575859,
           -7.51763773,  -7.94410515,  -7.84511232,  -9.65251255, -11.77554131]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.31951237]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0063 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0587 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 175, vnnlib ID: 175 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.83441734, -11.65409756, -13.59377003, -13.34711456, -13.02464199,
         -13.48545742, -13.37795448, -12.43483543, -12.00513840,  -9.86730289]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [638]; unstable size 638; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 292, 1, 638] with unstable size 291 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 638] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 638] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [291]; unstable size 291; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 291] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 291] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.04846907,  1.83894753,  1.50338089,  1.00280190,  1.39925599,
          1.18970358,  0.10379413,  0.61262095, -1.38501215]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.83441734, -11.65409756, -13.59377003, -13.34711456, -13.02464199,
         -13.48545742, -13.37795448, -12.43483543, -12.00513840,  -9.86730289]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.91222477, -11.70614147, -13.68292713, -13.42092800, -13.11736012,
          -13.56132698, -13.45891571, -12.52041149, -12.07155228,  -9.90893269]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00329208]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0041 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0680 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 176, vnnlib ID: 176 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.06950283, -10.63156986,  -6.67671871,  -6.37868023,  -6.73359871,
          -6.50309849,  -7.44396973,  -8.55093956,  -8.65787315, -10.48859119]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [583]; unstable size 583; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 583] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 583] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 583] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 186] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.66228348,  2.91002989, -0.61161304, -0.37437868, -0.12838534,
          0.54327869,  1.21973586,  1.01675749,  2.96338654]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.06950283, -10.63156986,  -6.67671871,  -6.37868023,  -6.73359871,
          -6.50309849,  -7.44396973,  -8.55093956,  -8.65787315, -10.48859119]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.31186962, -10.99413681,  -6.81023502,  -6.93533707,  -6.98606968,
           -7.06987381,  -7.91163874,  -8.92857933,  -9.02215290, -10.94300365],
         [ -8.31186962, -10.99413681,  -6.81023502,  -6.93533707,  -6.98606968,
           -7.06987381,  -7.91163874,  -8.92857933,  -9.02215290, -10.94300365]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12510204,  0.05073261,  0.13453674]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0057 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0558 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 177, vnnlib ID: 177 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.68456459, -32.53074646, -22.78745079, -27.68545341, -28.40427208,
         -27.83055687, -30.00589561, -28.70033264, -29.08596420, -31.81694031]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [868]; unstable size 868; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 118, 1, 868] with unstable size 117 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 868] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 868] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [117]; unstable size 117; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 117] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 117] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.35312629, 8.74417496, 4.20461941, 4.84282970, 4.24144888, 6.39423656,
         5.11292028, 5.55689526, 8.21585178]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0512 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 178, vnnlib ID: 178 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.60622311, -13.14030361,  -7.17618370,  -8.58381081,  -7.30063725,
          -9.39536190, -10.97736740,  -8.69489574, -13.14762592, -13.82670879]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [636]; unstable size 636; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 636] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 636] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 636] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 148] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.19068098, 0.71572351, 1.81306088, 0.68747449, 2.54502153, 4.18923807,
         1.59729874, 6.44614553, 7.10734844]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0464 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 179, vnnlib ID: 179 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -2.84328127,  -9.61974049,  -5.05914211,  -8.02449036,  -6.49527788,
          -8.10750866,  -9.04593754,  -9.49392796,  -6.18774319, -10.90580273]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [499]; unstable size 499; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 153, 1, 499] with unstable size 152 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 499] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 499] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [152]; unstable size 152; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 152] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 152] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.54959440, 1.51223135, 4.22370243, 2.84299278, 4.27301931, 5.08756113,
         5.54216480, 2.37470174, 6.85312939]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0565 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 180, vnnlib ID: 180 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.90164661, -15.08635235,  -9.72878838,  -9.48129559,  -7.66526318,
          -8.64265442, -10.58757114,  -3.94943619, -14.45550442, -12.59689999]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [635]; unstable size 635; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 635] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 635] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 635] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 239] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.91279745, 8.85579205, 4.06592464, 3.92259741, 2.47752666, 3.07655311,
         4.65876627, 8.33458710, 6.58941221]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0638 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 181, vnnlib ID: 181 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.14476776, -8.54299259, -5.62799358, -7.28408384, -5.42767191,
         -7.26166582, -5.09700298, -8.12854862, -8.81086445, -8.40001583]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [561]; unstable size 561; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 561] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 561] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 561] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 199] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.70906818,  1.71759129, -0.59509254,  1.34410000, -0.63401127,
          1.15857649,  2.08130550,  2.03014374,  1.72439146]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.14476776, -8.54299259, -5.62799358, -7.28408384, -5.42767191,
         -7.26166582, -5.09700298, -8.12854862, -8.81086445, -8.40001583]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.36553764, -9.05827236, -5.77799320, -7.55656195, -5.46674442,
          -7.49171591, -5.58169985, -8.30345821, -9.22078800, -8.91583538],
         [-8.36553764, -9.05827236, -5.77799320, -7.55656195, -5.46674442,
          -7.49171591, -5.58169985, -8.30345821, -9.22078800, -8.91583538]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.19629335, -0.11495543]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0063 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0554 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 182, vnnlib ID: 182 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.62970924, -15.32867241, -14.02665234, -15.90782928, -15.88710308,
         -16.84171295, -16.61499405, -15.84648132, -15.30559063, -15.92606258]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [630]; unstable size 630; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 112, 1, 630] with unstable size 111 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 630] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 630] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [111]; unstable size 111; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 111] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 111] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.55479383, 0.65966976, 2.49934220, 2.45695782, 3.24221277, 3.17709994,
         2.06576133, 1.70381474, 2.33342171]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0741 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 183, vnnlib ID: 183 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.31477261, -14.64444065,  -8.04242039,  -9.54465961,  -7.47801971,
         -10.22035503,  -9.25665569, -10.87084675, -13.17573833, -14.46251965]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [785]; unstable size 785; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 441, 1, 785] with unstable size 440 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 785] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 785] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [440]; unstable size 440; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 440] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 440] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.74053109,  4.37037325, -0.76029527,  0.68074846,  0.98781776,
         -0.06960201,  1.50688004,  3.12951851,  4.10273933]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.31477261, -14.64444065,  -8.04242039,  -9.54465961,  -7.47801971,
         -10.22035503,  -9.25665569, -10.87084675, -13.17573833, -14.46251965]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.76it/s]100%|██████████| 1/1 [00:00<00:00,  8.75it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.96513081, -15.63083935,  -8.66922951, -10.52782917,  -8.59883404,
          -11.20441532, -10.32099342, -11.85517120, -13.96867752, -15.41878605],
         [-11.96513081, -15.63083935,  -8.66922951, -10.52782917,  -8.59883404,
          -11.20441532, -10.32099342, -11.85517120, -13.96867752, -15.41878605]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.07039547, 1.72215939]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1169 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 17.027103424072266
alpha/beta optimization time: 1.22218656539917
initial alpha-crown bounds: tensor([[ 1.93041933,  4.51296234, -0.64870274,  0.80698407,  1.16863012,
          0.07121539,  1.61320674,  3.32261658,  4.24977255]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.6487027406692505
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6491 seconds.
lower bounds for all target labels: [1.9304187297821045, 4.512962341308594, -0.6487027406692505, 0.8069840669631958, 1.1686301231384277, 0.07121539115905762, 1.6132067441940308, 3.3226165771484375, 4.249770641326904]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [2]
start creating model mps for candidates: ['lay/16_2']
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 244645 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.51004934310913
Verifying property 0 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.512962341308594.

Properties batch 1, size 1
Remaining timeout: 198.34863305091858
Verifying property 1 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.249772548675537.

Properties batch 2, size 1
Remaining timeout: 198.24534130096436
Verifying property 2 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.3226165771484375.

Properties batch 3, size 1
Remaining timeout: 198.14343333244324
Verifying property 3 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.9304193258285522.

Properties batch 4, size 1
Remaining timeout: 198.04143452644348
Verifying property 4 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.6132067441940308.

Properties batch 5, size 1
Remaining timeout: 197.94006419181824
Verifying property 5 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.1686301231384277.

Properties batch 6, size 1
Remaining timeout: 197.83906865119934
Verifying property 6 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.8069840669631958.

Properties batch 7, size 1
Remaining timeout: 197.73751139640808
Verifying property 7 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.07121539115905762.

Properties batch 8, size 1
Remaining timeout: 197.63382530212402
Verifying property 8 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.64870274]], device='cuda:0') need to verify.
Model prediction is: tensor([-11.31477261, -14.64444065,  -8.04242039,  -9.54465961,  -7.47801971,
        -10.22035503,  -9.25665569, -10.87084675, -13.17573833, -14.46251965],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.64870274]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 785
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 435
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1246
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0006837844848632812
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0545    transfer 0.0001    finalize 0.0002    func 0.0550    
Accumulated time: func 0.0550    prepare 0.0002    bound 0.0545    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 1] 
split level 2: [/input-12, 11] 
split level 3: [/input-12, 13] 
split level 4: [/input-12, 44] 
split level 5: [/input-12, 51] 
split level 6: [/input-12, 72] 
split level 7: [/input-12, 26] 
split level 8: [/input-12, 82] 
split level 9: [/input-12, 68] 
split level 10: [/input-12, 93] 
split level 11: [/input-8, 1372] 
split level 12: [/input-8, 1058] 
split level 13: [/input-8, 1373] 
split level 14: [/input-8, 1564] 
split level 15: [/input-12, 9] 
split level 16: [/input-8, 1911] 
split level 17: [/input-12, 21] 
split level 18: [/input-8, 1356] 
split level 19: [/input-8, 1869] 
split level 20: [/input-8, 1057] 
split level 21: [/input-8, 1870] 
split level 22: [/input-8, 531] 
split level 23: [/input-8, 1878] 
split level 24: [/input-12, 64] 
split level 25: [/input-8, 1555] 
split level 26: [/input-8, 1299] 
split level 27: [/input-8, 1371] 
split level 28: [/input-8, 1362] 
split level 29: [/input-8, 1073] 
split level 30: [/input-8, 1066] 
split level 31: [/input-8, 532] 
split level 32: [/input-8, 1884] 
split level 33: [/input-8, 571] 
split level 34: [/input-8, 1363] 
split level 35: [/input-8, 1065] 
split level 36: [/input-8, 533] 
split level 37: [/input-8, 1563] 
split level 38: [/input-8, 523] 
split level 39: [/input-8, 1565] 
split level 40: [/input-8, 530] 
split level 41: [/input-8, 1894] 
split level 42: [/input-8, 1307] 
split level 43: [/input-8, 1074] 
split level 44: [/input-8, 682] 
split level 45: [/input-8, 1902] 
split level 46: [/input-8, 1883] 
split level 47: [/input-8, 1886] 
split level 48: [/input-8, 677] 
split level 49: [/input-8, 1354] 
split level 50: [/input-8, 1355] 
split level 51: [/input-8, 1549] 
split level 52: [/input-8, 2020] 
split level 53: [/input-8, 1381] 
split level 54: [/input-8, 666] 
split level 55: [/input-8, 1548] 
split level 56: [/input-8, 686] 
split level 57: [/input-8, 1297] 
split level 58: [/input-8, 642] 
split level 59: [/input-8, 460] 
split level 60: [/input-8, 1760] 
split level 61: [/input-8, 668] 
split level 62: [/input-8, 846] 
split level 63: [/input-8, 573] 
split level 64: [/input-8, 1361] 
split level 65: [/input-8, 1021] 
split level 66: [/input-8, 891] 
split level 67: [/input-8, 1083] 
split level 68: [/input-8, 681] 
split level 69: [/input-8, 1301] 
split level 70: [/input-8, 1915] 
split level 71: [/input-8, 1062] 
split level 72: [/input-8, 1077] 
split level 73: [/input-8, 684] 
split level 74: [/input-8, 1881] 
split level 75: [/input-8, 700] 
split level 76: [/input-8, 1877] 
split level 77: [/input-8, 1506] 
split level 78: [/input-8, 1369] 
split level 79: [/input-8, 1558] 
split level 80: [/input, 4006] 
split level 81: [/input-12, 28] 
split level 82: [/input-8, 1289] 
split level 83: [/input-8, 1143] 
split level 84: [/input-8, 546] 
split level 85: [/input-8, 860] 
split level 86: [/input-8, 1509] 
split level 87: [/input, 183] 
split level 88: [/input-8, 665] 
split level 89: [/input-8, 1505] 
split level 90: [/input-8, 1347] 
split level 91: [/input-8, 854] 
split level 92: [/input, 4003] 
split level 93: [/input-8, 1580] 
split level 94: [/input, 3273] 
split level 95: [/input, 390] 
split level 96: [/input-8, 1596] 
split level 97: [/input-8, 491] 
split level 98: [/input, 3988] 
split level 99: [/input-8, 990] 
split level 100: [/input-8, 1310] 
split level 101: [/input-8, 1876] 
split level 102: [/input-8, 83] 
split level 103: [/input-8, 673] 
split level 104: [/input-8, 1597] 
split level 105: [/input-8, 1339] 
split level 106: [/input-8, 2021] 
split level 107: [/input-8, 1836] 
split level 108: [/input-8, 884] 
split level 109: [/input-8, 517] 
split level 110: [/input, 4043] 
split level 111: [/input-8, 545] 
split level 112: [/input-8, 570] 
split level 113: [/input, 426] 
split level 114: [/input, 1188] 
split level 115: [/input, 2757] 
split level 116: [/input, 199] 
split level 117: [/input, 3236] 
split level 118: [/input-8, 1752] 
split level 119: [/input-8, 987] 
split level 120: [/input-12, 53] 
split level 121: [/input-8, 1547] 
split level 122: [/input, 4053] 
split level 123: [/input-8, 1437] 
split level 124: [/input-8, 515] 
split level 125: [/input-8, 1940] 
split level 126: [/input, 3223] 
split level 127: [/input-8, 947] 
split level 128: [/input-8, 1405] 
split level 129: [/input, 4044] 
split level 130: [/input-8, 917] 
split level 131: [/input-8, 1540] 
split level 132: [/input, 2617] 
split level 133: [/input-8, 1819] 
split level 134: [/input-8, 1402] 
split level 135: [/input-8, 1546] 
split level 136: [/input, 2517] 
split level 137: [/input-8, 1545] 
split level 138: [/input-8, 694] 
split level 139: [/input, 1386] 
split level 140: [/input-8, 988] 
split level 141: [/input, 387] 
split level 142: [/input, 3468] 
split level 143: [/input, 583] 
split level 144: [/input, 4055] 
split level 145: [/input, 3304] 
split level 146: [/input, 4072] 
split level 147: [/input-8, 514] 
split level 148: [/input, 456] 
split level 149: [/input, 2533] 
split level 150: [/input-8, 276] 
split level 151: [/input-8, 883] 
split level 152: [/input, 3205] 
split level 153: [/input-8, 1281] 
split level 154: [/input, 3243] 
split level 155: [/input-8, 1318] 
split level 156: [/input-8, 952] 
split level 157: [/input, 3230] 
split level 158: [/input-8, 1873] 
split level 159: [/input, 4054] 
split level 160: [/input, 3290] 
split level 161: [/input, 2461] 
split level 162: [/input-8, 1541] 
split level 163: [/input, 3241] 
split level 164: [/input, 3228] 
split level 165: [/input, 3255] 
split level 166: [/input-8, 2028] 
split level 167: [/input-8, 1775] 
split level 168: [/input-8, 998] 
split level 169: [/input-8, 1017] 
split level 170: [/input-8, 1539] 
split level 171: [/input-8, 569] 
split level 172: [/input, 3218] 
split level 173: [/input, 2493] 
split level 174: [/input, 2467] 
split level 175: [/input, 4002] 
split level 176: [/input, 2867] 
split level 177: [/input, 4035] 
split level 178: [/input-8, 1559] 
split level 179: [/input-8, 552] 
split level 180: [/input, 2348] 
split level 181: [/input-8, 98] 
split level 182: [/input, 3286] 
split level 183: [/input-8, 1524] 
split level 184: [/input-8, 2013] 
split level 185: [/input, 2883] 
split level 186: [/input-8, 467] 
split level 187: [/input-8, 985] 
split level 188: [/input, 2478] 
split level 189: [/input, 3246] 
split level 190: [/input-8, 1475] 
split level 191: [/input-8, 836] 
split level 192: [/input-8, 1439] 
split level 193: [/input-8, 461] 
split level 194: [/input, 4029] 
split level 195: [/input, 2734] 
split level 196: [/input-8, 558] 
split level 197: [/input, 2885] 
split level 198: [/input, 649] 
split level 199: [/input, 2543] 
Time: prepare 0.0061    bound 0.0983    transfer 0.0274    finalize 0.0066    func 0.1386    
Accumulated time: func 0.1936    prepare 0.0160    bound 0.1528    transfer 0.0275    finalize 0.0068    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01551673) min lb tensor(-0.64861703)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Fetch cut process: mps for current label is not ready yet
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.013646125793457031 
BICCOS Cumulative time: 0.013646125793457031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.63266 (1), -0.63181 (1), -0.63171 (1), -0.63153 (1), -0.63097 (1), -0.63057 (1), -0.62999 (1), -0.62990 (1), -0.62917 (1), -0.62872 (1), -0.62614 (1), -0.62477 (1), -0.62431 (1), -0.62339 (1), -0.62303 (1), -0.62265 (1), -0.62257 (1), -0.62230 (1), -0.62227 (1), -0.62135 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5141    set_bounds 0.0129    solve 0.1387    add 0.2229    
Accumulated time: pickout 0.0004    decision 0.5141    set_bounds 0.0129    solve 0.1387    add 0.2229    
Current (lb-rhs): -0.6326590776443481
50 domains visited
Cumulative time: 0.9808914661407471

Shallow-BaB round 2
batch: 50
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 26] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 72] [/input-12, 26] 
split level 2: [/input-12, 72] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 72] 
split level 3: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
Time: prepare 0.0067    bound 0.0922    transfer 0.0012    finalize 0.0026    func 0.1028    
Accumulated time: func 0.2964    prepare 0.0229    bound 0.2450    transfer 0.0287    finalize 0.0094    
all_split False
======================Cut inference begins======================
max lb tensor(0.36800814) min lb tensor(-0.60306132)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.018257856369018555 
BICCOS Cumulative time: 0.031903982162475586
Preprocessing time: 0.013225555419921875 Inference time: 0.0025229454040527344 Add cuts time: 0.0015468597412109375 Cut analysis time: 0.0009624958038330078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.45763 (2), -0.45667 (2), -0.45442 (2), -0.45375 (2), -0.45297 (2), -0.45240 (2), -0.45240 (2), -0.45211 (2), -0.44602 (2), -0.44595 (2), -0.43917 (2), -0.43637 (2), -0.43430 (2), -0.43303 (2), -0.43122 (2), -0.42882 (2), -0.42760 (2), -0.42280 (2), -0.42162 (2), -0.41747 (2), 
Length of domains: 50
Time: pickout 0.0150    decision 0.0200    set_bounds 0.0139    solve 0.1029    add 0.2338    
Accumulated time: pickout 0.0154    decision 0.5342    set_bounds 0.0268    solve 0.2417    add 0.4567    
Current (lb-rhs): -0.457627534866333
100 domains visited
Cumulative time: 1.3932366371154785

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 26] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 26] [/input-12, 72] [/input-12, 1] [/input-12, 26] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 26] [/input-12, 72] [/input-12, 26] [/input-12, 26] [/input-12, 72] [/input-12, 26] [/input-12, 72] 
split level 3: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 72] [/input-12, 82] [/input-12, 82] [/input-12, 72] [/input-12, 82] [/input-12, 72] [/input-12, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4300529956817627
10 lb beta sum: 0.614547848701477, worst -0.4293500483036041
Time: prepare 0.0060    bound 0.1214    transfer 0.0025    finalize 0.0028    func 0.1365    
Accumulated time: func 0.4329    prepare 0.0292    bound 0.3664    transfer 0.0313    finalize 0.0122    
all_split False
======================Cut inference begins======================
max lb tensor(0.29501915) min lb tensor(-0.42451456)
Number of Verified Splits: 67 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.019998788833618164 
BICCOS Cumulative time: 0.05190277099609375
Preprocessing time: 0.013836860656738281 Inference time: 0.003607511520385742 Add cuts time: 0.001911163330078125 Cut analysis time: 0.0006432533264160156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17833 (3), -0.17712 (3), -0.17582 (3), -0.17505 (3), -0.17439 (3), -0.16764 (3), -0.16761 (3), -0.16675 (3), -0.16650 (3), -0.16602 (3), -0.15966 (3), -0.15853 (3), -0.15840 (3), -0.15837 (3), -0.15829 (3), -0.15744 (3), -0.13857 (3), -0.13778 (3), -0.13703 (3), -0.13665 (3), 
Length of domains: 50
Time: pickout 0.0148    decision 0.0208    set_bounds 0.0177    solve 0.1366    add 0.4771    
Accumulated time: pickout 0.0302    decision 0.5550    set_bounds 0.0445    solve 0.3782    add 0.9339    
Current (lb-rhs): -0.1783313751220703
150 domains visited
Cumulative time: 2.0909788608551025

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] 
split level 2: [/input-12, 26] [/input-12, 72] [/input-12, 26] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 3: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1995946168899536
10 lb beta sum: 0.7669060826301575, worst -0.17973613739013672
Time: prepare 0.0058    bound 0.1175    transfer 0.0019    finalize 0.0024    func 0.1304    
Accumulated time: func 0.5632    prepare 0.0353    bound 0.4840    transfer 0.0332    finalize 0.0146    
all_split False
======================Cut inference begins======================
max lb tensor(0.29197907) min lb tensor(-0.17422396)
Number of Verified Splits: 194 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0017
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 5
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.029622554779052734 
BICCOS Cumulative time: 0.08152532577514648
Preprocessing time: 0.012605905532836914 Inference time: 0.011586189270019531 Add cuts time: 0.0032930374145507812 Cut analysis time: 0.002137422561645508
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10330 (4), -0.10092 (4), -0.09934 (4), -0.09898 (4), -0.09885 (4), -0.09863 (4), -0.09858 (4), -0.09848 (4), -0.09697 (4), -0.09691 (4), -0.09657 (4), -0.09622 (4), -0.09587 (4), -0.09449 (4), -0.09447 (4), -0.09407 (4), -0.09326 (4), -0.09162 (4), -0.09159 (4), -0.09132 (4), 
Length of domains: 50
Time: pickout 0.0195    decision 0.0203    set_bounds 0.0184    solve 0.1305    add 0.4301    
Accumulated time: pickout 0.0497    decision 0.5753    set_bounds 0.0629    solve 0.5088    add 1.3639    
Current (lb-rhs): -0.1033027172088623
200 domains visited
Cumulative time: 2.7397735118865967

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 72] [/input-12, 72] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 51] [/input-12, 51] 
split level 2: [/input-12, 82] [/input-12, 82] [/input-12, 72] [/input-12, 72] [/input-12, 82] [/input-12, 72] [/input-12, 72] [/input-12, 82] [/input-12, 26] [/input-12, 26] 
split level 3: [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12425827980041504
10 lb beta sum: 0.8836439251899719, worst -0.10753315687179565
Time: prepare 0.0057    bound 0.1165    transfer 0.0012    finalize 0.0019    func 0.1281    
Accumulated time: func 0.6913    prepare 0.0413    bound 0.6005    transfer 0.0344    finalize 0.0165    
all_split False
======================Cut inference begins======================
max lb tensor(0.31959558) min lb tensor(-0.10136181)
Number of Verified Splits: 178 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 5
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.028582334518432617 
BICCOS Cumulative time: 0.1101076602935791
Preprocessing time: 0.011959552764892578 Inference time: 0.011286497116088867 Add cuts time: 0.0037391185760498047 Cut analysis time: 0.0015971660614013672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02888 (5), -0.02862 (5), -0.02831 (5), -0.02819 (5), -0.02778 (5), -0.02774 (5), -0.02760 (5), -0.02751 (5), -0.02725 (5), -0.02693 (5), -0.02669 (5), -0.02588 (5), -0.02566 (5), -0.02486 (5), -0.02465 (5), -0.02439 (5), -0.02425 (5), -0.02348 (5), -0.02277 (5), -0.02169 (5), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0201    set_bounds 0.0163    solve 0.1282    add 0.2650    
Accumulated time: pickout 0.0508    decision 0.5954    set_bounds 0.0792    solve 0.6369    add 1.6290    
Current (lb-rhs): -0.028878331184387207
250 domains visited
Cumulative time: 3.2061853408813477

Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 72]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([0.23154847, 0.11157493, 0.07566373]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 72, 26, 54]), tensor([-1., -1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([0.23154847, 0.11157493, 0.18346535, 0.07142077, 0.32905596]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 72, 26, 54]), tensor([-1., -1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([0.23154847, 0.11157493, 0.18346535, 0.07142077, 0.01113050]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 72, 26, 54]), tensor([-1., -1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([0.23154847, 0.11157493, 0.18346535, 0.06285106, 0.31473333]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 72, 26, 54]), tensor([-1., -1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([0.23154847, 0.11157493, 0.18346535, 0.06285106, 0.01056384]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([0.23154847, 0.17710556, 0.10928018, 0.07200246, 0.33768719]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([0.23154847, 0.17710556, 0.10928018, 0.07200246, 0.00229548]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([0.23154847, 0.17710556, 0.10928018, 0.03944580, 0.34872258]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([0.23154847, 0.17710556, 0.10928018, 0.03944580, 0.00647788]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([0.23154847, 0.17710556, 0.10147627, 0.07156639, 0.33110434]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([0.23154847, 0.17710556, 0.10147627, 0.07156639, 0.00393485]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([0.23154847, 0.17710556, 0.10147627, 0.04200558, 0.33431667]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([0.23154847, 0.17710556, 0.10147627, 0.04200558, 0.00670307]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28]), tensor([1.]), tensor([0]), tensor([2.40814195e-36]), tensor([0]))}
Shallow branching resets to n domains:  14
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6479567289352417
10 lb beta sum: 0.48991328477859497, worst -0.6125627756118774
Time: prepare 0.0006    bound 0.1143    transfer 0.0005    finalize 0.0003    func 0.1157    
Accumulated time: func 0.8070    prepare 0.0419    bound 0.7148    transfer 0.0349    finalize 0.0167    
After pruning, left:  8

Back to Regular BaB

BaB round 1
batch: 8
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 51] [/input-12, 44] [/input-12, 44] [/input-12, 54] 
split level 1: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 44] [/input-12, 51] [/input-12, 51] [/input-12, 1] 
split level 2: [/input-12, 26] [/input-12, 82] [/input-12, 82] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 26] 
split level 3: [/input-12, 82] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 72] 
split level 4: [/input-12, 93] [/input-8, 1057] [/input-8, 1057] [/input-8, 1057] [/input-8, 1057] [/input-8, 1057] [/input-8, 1057] [/input-12, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 1.0258398056030273, worst -0.3657100200653076
10 lb beta sum: 1.0260599851608276, worst -0.36419677734375
Time: prepare 0.0109    bound 0.1163    transfer 0.0044    finalize 0.0024    func 0.1356    
Accumulated time: func 0.9427    prepare 0.0530    bound 0.8311    transfer 0.0392    finalize 0.0191    
all_split False
======================Cut inference begins======================
max lb tensor(0.34318632) min lb tensor(-0.36353827)
Number of Verified Splits: 232 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.0013753175735474, worst -0.5331412553787231
10 lb beta sum: 1.3168197870254517, worst -0.22337257862091064
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 5
#cuts 4-6: 15
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.2730526924133301 
BICCOS Cumulative time: 0.3831603527069092
Preprocessing time: 0.007484912872314453 Inference time: 0.25808286666870117 Add cuts time: 0.005521297454833984 Cut analysis time: 0.0019636154174804688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.36354 (5), -0.36271 (5), -0.35309 (5), -0.35298 (5), -0.32920 (5), -0.32398 (5), -0.32216 (5), -0.31578 (5), -0.30802 (5), -0.30209 (5), -0.29779 (5), -0.29043 (5), -0.27680 (5), -0.26871 (5), -0.26540 (5), -0.24024 (5), -0.07496 (5), -0.07129 (5), -0.06359 (5), -0.06024 (5), 
Length of domains: 24
Time: pickout 0.0007    decision 0.0159    set_bounds 0.0190    solve 0.1357    add 0.0547    
Accumulated time: pickout 0.0515    decision 0.6113    set_bounds 0.0982    solve 0.7726    add 1.6837    
Current (lb-rhs): -0.3635382652282715
274 domains visited
Cumulative time: 3.9738354682922363

BaB round 2
batch: 24
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] 
split level 1: [/input-12, 51] [/input-8, 1057] [/input-12, 51] [/input-12, 51] [/input-8, 1058] [/input-12, 51] [/input-12, 51] [/input-8, 1058] [/input-12, 51] [/input-12, 51] 
split level 2: [/input-12, 93] [/input-8, 1066] [/input-12, 93] [/input-12, 93] [/input-8, 1057] [/input-12, 93] [/input-12, 93] [/input-8, 1057] [/input-12, 93] [/input-12, 93] 
split level 3: [/input-8, 1057] [/input-8, 1555] [/input-8, 1057] [/input-8, 1057] [/input-8, 1066] [/input-8, 1057] [/input-8, 1555] [/input-8, 1066] [/input-8, 1057] [/input-12, 9] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.28685319423675537
10 lb beta sum: 0.5786423087120056, worst -0.27926385402679443
Time: prepare 0.0073    bound 0.1324    transfer 0.0059    finalize 0.0034    func 0.1516    
Accumulated time: func 1.0943    prepare 0.0605    bound 0.9635    transfer 0.0452    finalize 0.0225    
all_split False
======================Cut inference begins======================
max lb tensor(0.21709085) min lb tensor(-0.27885389)
Number of Verified Splits: 196 of 384
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 7
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.03458833694458008 
BICCOS Cumulative time: 0.41774868965148926
Preprocessing time: 0.01142263412475586 Inference time: 0.019357681274414062 Add cuts time: 0.0025243759155273438 Cut analysis time: 0.0012836456298828125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27885 (9), -0.27578 (9), -0.27268 (9), -0.27226 (9), -0.27133 (9), -0.27000 (9), -0.26817 (9), -0.26286 (9), -0.26258 (9), -0.26075 (9), -0.26051 (9), -0.25912 (9), -0.25043 (9), -0.24927 (9), -0.24376 (9), -0.23951 (9), -0.23935 (9), -0.23730 (9), -0.23664 (9), -0.23470 (9), 
Length of domains: 188
Time: pickout 0.0056    decision 0.0196    set_bounds 0.0278    solve 0.1517    add 0.0864    
Accumulated time: pickout 0.0571    decision 0.6309    set_bounds 0.1260    solve 0.9243    add 1.7701    
Current (lb-rhs): -0.2788538932800293
462 domains visited
Cumulative time: 4.307601451873779

BaB round 3
batch: 188
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1058] [/input-8, 1058] [/input-12, 9] [/input-8, 1058] [/input-8, 1057] [/input-12, 9] [/input-8, 1057] [/input-8, 1057] [/input-8, 1058] [/input-8, 1058] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2812820076942444
10 lb beta sum: 0.7556444406509399, worst -0.27537769079208374
Time: prepare 0.0076    bound 0.1151    transfer 0.0011    finalize 0.0022    func 0.1286    
Accumulated time: func 1.2228    prepare 0.0683    bound 1.0786    transfer 0.0463    finalize 0.0248    
all_split False
======================Cut inference begins======================
max lb tensor(0.63916206) min lb tensor(-0.27518809)
Number of Verified Splits: 68 of 376
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 8
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.020124435424804688 
BICCOS Cumulative time: 0.43787312507629395
Preprocessing time: 0.011239051818847656 Inference time: 0.006314992904663086 Add cuts time: 0.0008797645568847656 Cut analysis time: 0.0016906261444091797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27519 (10), -0.27391 (10), -0.26774 (10), -0.26721 (10), -0.26692 (10), -0.26531 (10), -0.26313 (10), -0.25856 (10), -0.25739 (10), -0.25614 (10), -0.25531 (10), -0.25470 (10), -0.24585 (10), -0.24395 (10), -0.23774 (10), -0.23414 (10), -0.23377 (10), -0.23343 (10), -0.23339 (10), -0.23326 (10), 
Length of domains: 308
Time: pickout 0.0164    decision 0.0199    set_bounds 0.0154    solve 0.1287    add 0.0827    
Accumulated time: pickout 0.0735    decision 0.6509    set_bounds 0.1414    solve 1.0530    add 1.8528    
Current (lb-rhs): -0.2751880884170532
770 domains visited
Cumulative time: 4.598703145980835

BaB round 4
batch: 308
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 9] [/input-12, 9] [/input-8, 1058] [/input-12, 9] [/input-12, 9] [/input-8, 1299] [/input-8, 1555] [/input-8, 1299] [/input-12, 9] [/input-12, 9] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9236940741539001, worst -0.2739054560661316
10 lb beta sum: 0.9315131902694702, worst -0.2736889719963074
Time: prepare 0.0271    bound 0.1270    transfer 0.0081    finalize 0.0052    func 0.1716    
Accumulated time: func 1.3945    prepare 0.0956    bound 1.2056    transfer 0.0544    finalize 0.0300    
all_split False
======================Cut inference begins======================
max lb tensor(0.21939367) min lb tensor(-0.27355379)
Number of Verified Splits: 166 of 616
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.040006399154663086 
BICCOS Cumulative time: 0.47787952423095703
Preprocessing time: 0.018822193145751953 Inference time: 0.018102407455444336 Add cuts time: 0.0019006729125976562 Cut analysis time: 0.0011811256408691406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27355 (11), -0.27099 (11), -0.26727 (11), -0.26650 (11), -0.26497 (11), -0.26275 (11), -0.25825 (11), -0.25778 (11), -0.25701 (11), -0.25465 (11), -0.25415 (11), -0.24689 (11), -0.24561 (11), -0.24351 (11), -0.23708 (11), -0.23342 (11), -0.23277 (11), -0.23253 (11), -0.23127 (11), -0.22993 (11), 
Length of domains: 450
Time: pickout 0.0179    decision 0.0295    set_bounds 0.0262    solve 0.1718    add 0.1125    
Accumulated time: pickout 0.0914    decision 0.6803    set_bounds 0.1676    solve 1.2249    add 1.9653    
Current (lb-rhs): -0.2735537886619568
1220 domains visited
Cumulative time: 5.00492525100708

BaB round 5
batch: 450
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1555] [/input-8, 1299] [/input-8, 1555] [/input-8, 1299] [/input-8, 1058] [/input-8, 1299] [/input-8, 1555] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2666027545928955
10 lb beta sum: 1.5172897577285767, worst -0.26146334409713745
Time: prepare 0.0179    bound 0.1415    transfer 0.0103    finalize 0.0050    func 0.1817    
Accumulated time: func 1.5761    prepare 0.1137    bound 1.3471    transfer 0.0647    finalize 0.0350    
all_split False
======================Cut inference begins======================
max lb tensor(0.94186831) min lb tensor(-0.26140320)
Number of Verified Splits: 725 of 900
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.1112213134765625 
BICCOS Cumulative time: 0.5891008377075195
Preprocessing time: 0.02888011932373047 Inference time: 0.07378244400024414 Add cuts time: 0.0073108673095703125 Cut analysis time: 0.0012478828430175781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26140 (12), -0.26122 (12), -0.25370 (12), -0.25287 (12), -0.25206 (12), -0.25085 (12), -0.24487 (12), -0.24280 (12), -0.23783 (12), -0.23723 (12), -0.23123 (12), -0.22429 (12), -0.22018 (12), -0.22012 (12), -0.21970 (12), -0.21949 (12), -0.21921 (12), -0.21891 (12), -0.21862 (12), -0.21664 (12), 
Length of domains: 175
Time: pickout 0.0624    decision 0.0375    set_bounds 0.0398    solve 0.1820    add 0.0775    
Accumulated time: pickout 0.1538    decision 0.7179    set_bounds 0.2074    solve 1.4068    add 2.0429    
Current (lb-rhs): -0.2614032030105591
1395 domains visited
Cumulative time: 5.5260231494903564

BaB round 6
batch: 175
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1299] [/input-12, 68] [/input-8, 1299] [/input-8, 1299] [/input-12, 68] [/input-8, 1299] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2609023153781891
10 lb beta sum: 1.7458328008651733, worst -0.251234769821167
Time: prepare 0.0072    bound 0.1376    transfer 0.0018    finalize 0.0020    func 0.1510    
Accumulated time: func 1.7271    prepare 0.1212    bound 1.4847    transfer 0.0665    finalize 0.0370    
all_split False
======================Cut inference begins======================
max lb tensor(0.72909403) min lb tensor(-0.25112176)
Number of Verified Splits: 116 of 350
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.0276486873626709 
BICCOS Cumulative time: 0.6167495250701904
Preprocessing time: 0.010885953903198242 Inference time: 0.013748645782470703 Add cuts time: 0.0016551017761230469 Cut analysis time: 0.0013589859008789062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25112 (13), -0.24534 (13), -0.24513 (13), -0.24195 (13), -0.24094 (13), -0.24081 (13), -0.23629 (13), -0.23441 (13), -0.23336 (13), -0.23275 (13), -0.22999 (13), -0.22767 (13), -0.22754 (13), -0.22249 (13), -0.22230 (13), -0.22140 (13), -0.21896 (13), -0.21381 (13), -0.20944 (13), -0.20938 (13), 
Length of domains: 234
Time: pickout 0.0156    decision 0.0216    set_bounds 0.0157    solve 0.1511    add 0.0778    
Accumulated time: pickout 0.1693    decision 0.7395    set_bounds 0.2231    solve 1.5580    add 2.1207    
Current (lb-rhs): -0.25112175941467285
1629 domains visited
Cumulative time: 5.843952655792236

BaB round 7
batch: 234
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] [/input-8, 1066] [/input-12, 68] [/input-12, 68] [/input-8, 1356] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-8, 1299] [/input-12, 68] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9549237489700317, worst -0.24601447582244873
10 lb beta sum: 1.9549237489700317, worst -0.24590539932250977
Time: prepare 0.0209    bound 0.1409    transfer 0.0017    finalize 0.0033    func 0.1699    
Accumulated time: func 1.8971    prepare 0.1422    bound 1.6257    transfer 0.0682    finalize 0.0403    
all_split False
======================Cut inference begins======================
max lb tensor(0.21799779) min lb tensor(-0.24586511)
Number of Verified Splits: 18 of 468
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0015
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.019040584564208984 
BICCOS Cumulative time: 0.6357901096343994
Preprocessing time: 0.014338493347167969 Inference time: 0.0022401809692382812 Add cuts time: 0.0004928112030029297 Cut analysis time: 0.0019690990447998047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24587 (14), -0.24503 (14), -0.23995 (14), -0.23818 (14), -0.23676 (14), -0.23571 (14), -0.23522 (14), -0.23459 (14), -0.23428 (14), -0.23287 (14), -0.23102 (14), -0.22869 (14), -0.22771 (14), -0.22767 (14), -0.22754 (14), -0.22753 (14), -0.22613 (14), -0.22500 (14), -0.22403 (14), -0.22230 (14), 
Length of domains: 450
Time: pickout 0.0167    decision 0.0238    set_bounds 0.1711    solve 0.1701    add 0.1201    
Accumulated time: pickout 0.1861    decision 0.7633    set_bounds 0.3942    solve 1.7281    add 2.2408    
Current (lb-rhs): -0.2458651065826416
2079 domains visited
Cumulative time: 6.373554706573486

BaB round 8
batch: 450
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1356] [/input-8, 1066] [/input-8, 1363] [/input-8, 1356] [/input-8, 1307] [/input-8, 1307] [/input-8, 666] [/input-8, 1555] [/input-8, 1356] [/input-8, 1299] 
cut re-enabled after branching node selection
0 lb beta sum: 1.941410779953003, worst -0.24215948581695557
10 lb beta sum: 1.941410779953003, worst -0.24204111099243164
Time: prepare 0.0392    bound 0.1341    transfer 0.0069    finalize 0.0053    func 0.1915    
Accumulated time: func 2.0885    prepare 0.1817    bound 1.7598    transfer 0.0751    finalize 0.0455    
all_split False
======================Cut inference begins======================
max lb tensor(-4.07695770e-05) min lb tensor(-0.24200368)
Number of Verified Splits: 0 of 900
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.029662132263183594 
BICCOS Cumulative time: 0.665452241897583
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24200 (15), -0.24160 (15), -0.23600 (15), -0.23566 (15), -0.23514 (15), -0.23437 (15), -0.23293 (15), -0.23083 (15), -0.23041 (15), -0.22938 (15), -0.22806 (15), -0.22767 (15), -0.22754 (15), -0.22750 (15), -0.22707 (15), -0.22705 (15), -0.22449 (15), -0.22439 (15), -0.22395 (15), -0.22389 (15), 
Length of domains: 900
Time: pickout 0.0701    decision 0.0362    set_bounds 0.0413    solve 0.1917    add 0.1012    
Accumulated time: pickout 0.2562    decision 0.7995    set_bounds 0.4355    solve 1.9198    add 2.3420    
Current (lb-rhs): -0.2420036792755127
2979 domains visited
Cumulative time: 6.85159158706665

BaB round 9
batch: 900
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 532] [/input-8, 1363] [/input-8, 1066] [/input-8, 532] [/input-8, 666] [/input-8, 1555] [/input-8, 1307] [/input-8, 666] [/input-8, 532] [/input-8, 1307] 
cut re-enabled after branching node selection
0 lb beta sum: 1.941410779953003, worst -0.2370762825012207
10 lb beta sum: 1.941410779953003, worst -0.23704147338867188
Time: prepare 0.0790    bound 0.1615    transfer 0.0258    finalize 0.0099    func 0.2885    
Accumulated time: func 2.3770    prepare 0.2609    bound 1.9213    transfer 0.1009    finalize 0.0554    
all_split False
======================Cut inference begins======================
max lb tensor(0.00590873) min lb tensor(-0.23701048)
Number of Verified Splits: 4 of 1800
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.06185722351074219 
BICCOS Cumulative time: 0.7273094654083252
Preprocessing time: 0.05951213836669922 Inference time: 0.000667572021484375 Add cuts time: 0.00038743019104003906 Cut analysis time: 0.0012900829315185547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23701 (16), -0.23564 (16), -0.23515 (16), -0.23512 (16), -0.23223 (16), -0.23119 (16), -0.23003 (16), -0.22986 (16), -0.22802 (16), -0.22796 (16), -0.22793 (16), -0.22767 (16), -0.22754 (16), -0.22701 (16), -0.22688 (16), -0.22522 (16), -0.22467 (16), -0.22432 (16), -0.22394 (16), -0.22306 (16), 
Length of domains: 1796
Time: pickout 0.0331    decision 0.0636    set_bounds 0.0791    solve 0.2890    add 0.1129    
Accumulated time: pickout 0.2892    decision 0.8631    set_bounds 0.5145    solve 2.2088    add 2.4549    
Current (lb-rhs): -0.23701047897338867
4775 domains visited
Cumulative time: 7.499929666519165

BaB round 10
batch: 1796
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1363] [/input-8, 533] [/input-8, 533] [/input-8, 1363] [/input-8, 1363] [/input-8, 1564] [/input-8, 1363] [/input-8, 1564] [/input-8, 1363] [/input-8, 666] 
cut re-enabled after branching node selection
0 lb beta sum: 1.940584421157837, worst -0.23162245750427246
10 lb beta sum: 1.940584421157837, worst -0.23153901100158691
Time: prepare 0.1603    bound 0.2579    transfer 0.0483    finalize 0.0190    func 0.5095    
Accumulated time: func 2.8865    prepare 0.4215    bound 2.1791    transfer 0.1492    finalize 0.0745    
all_split False
======================Cut inference begins======================
max lb tensor(0.01077867) min lb tensor(-0.23152113)
Number of Verified Splits: 24 of 3592
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts: total 530 constraints, 30474 nonzero elements
cuts preparing time: 0.0209
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 547.
#cuts 1-3: 137
#cuts 4-6: 1
#cuts 7-9: 1
#cuts 10-12: 9
#cuts 13-15: 5
#cuts 16-18: 22
#cuts 19-21: 25
#cuts >= 20: 347
BICCOS time: 0.3879103660583496 
BICCOS Cumulative time: 1.1152198314666748
Preprocessing time: 0.11905193328857422 Inference time: 0.0035996437072753906 Add cuts time: 0.0014791488647460938 Cut analysis time: 0.2637796401977539
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23152 (17), -0.23135 (17), -0.23078 (17), -0.23043 (17), -0.22804 (17), -0.22656 (17), -0.22608 (17), -0.22498 (17), -0.22451 (17), -0.22407 (17), -0.22379 (17), -0.22346 (17), -0.22304 (17), -0.22238 (17), -0.22226 (17), -0.22170 (17), -0.22140 (17), -0.22016 (17), -0.21997 (17), -0.21962 (17), 
Length of domains: 3568
Time: pickout 0.0523    decision 0.1142    set_bounds 0.3198    solve 0.5103    add 0.1649    
Accumulated time: pickout 0.3415    decision 0.9774    set_bounds 0.8343    solve 2.7191    add 2.6198    
Current (lb-rhs): -0.2315211296081543
8343 domains visited
Cumulative time: 9.06150484085083

BaB round 11
batch: 3568
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 533] [/input-8, 532] [/input-8, 532] [/input-8, 533] [/input-8, 1356] [/input-8, 1363] [/input-8, 1356] [/input-8, 1363] [/input-8, 533] [/input-8, 1363] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.23518460988998413
10 lb beta sum: 5.0378336906433105, worst -0.1891193985939026
Time: prepare 0.1485    bound 1.3686    transfer 0.0954    finalize 0.0440    func 1.7044    
Accumulated time: func 4.5909    prepare 0.5703    bound 3.5478    transfer 0.2446    finalize 0.1185    
all_split False
======================Cut inference begins======================
max lb tensor(0.02237964) min lb tensor(-0.17802644)
Number of Verified Splits: 739 of 7136
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.5953381061553955 
BICCOS Cumulative time: 1.7105579376220703
Preprocessing time: 0.23984551429748535 Inference time: 0.3330235481262207 Add cuts time: 0.019849061965942383 Cut analysis time: 0.0026199817657470703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17803 (18), -0.17793 (18), -0.17791 (18), -0.17704 (18), -0.17465 (18), -0.17368 (18), -0.17333 (18), -0.17310 (18), -0.17256 (18), -0.17253 (18), -0.17150 (18), -0.17139 (18), -0.17132 (18), -0.17099 (18), -0.17094 (18), -0.17063 (18), -0.17055 (18), -0.17045 (18), -0.17038 (18), -0.17037 (18), 
Length of domains: 6397
Time: pickout 0.0750    decision 0.2119    set_bounds 0.4959    solve 1.7064    add 0.1638    
Accumulated time: pickout 0.4165    decision 1.1893    set_bounds 1.3302    solve 4.4255    add 2.7836    
Current (lb-rhs): -0.17802643775939941
14740 domains visited
Cumulative time: 12.329103231430054

BaB round 12
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1307] [/input-8, 1886] [/input-8, 1886] [/input-8, 1307] [/input-8, 682] [/input-8, 682] [/input-8, 1555] [/input-8, 1307] [/input-8, 1307] [/input-8, 682] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2303164005279541
10 lb beta sum: 1.4423329830169678, worst -0.2207934856414795
Time: prepare 0.1757    bound 0.5003    transfer 0.0687    finalize 0.0491    func 1.0450    
Accumulated time: func 5.6359    prepare 0.7462    bound 4.0480    transfer 0.3133    finalize 0.1677    
all_split False
======================Cut inference begins======================
max lb tensor(0.09773952) min lb tensor(-0.17802644)
Number of Verified Splits: 1442 of 8192
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts: total 798 constraints, 41839 nonzero elements
cuts preparing time: 0.0190
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 815.
#cuts 1-3: 191
#cuts 4-6: 1
#cuts 7-9: 6
#cuts 10-12: 10
#cuts 13-15: 9
#cuts 16-18: 45
#cuts 19-21: 44
#cuts >= 20: 509
BICCOS time: 0.893979549407959 
BICCOS Cumulative time: 2.6045374870300293
Preprocessing time: 0.26940131187438965 Inference time: 0.24394702911376953 Add cuts time: 0.030623197555541992 Cut analysis time: 0.3500080108642578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17803 (19), -0.17803 (19), -0.17793 (19), -0.17793 (19), -0.17791 (19), -0.17791 (19), -0.17704 (19), -0.17704 (19), -0.17465 (19), -0.17465 (19), -0.17368 (19), -0.17368 (19), -0.17333 (19), -0.17333 (19), -0.17310 (19), -0.17310 (19), -0.17256 (19), -0.17256 (19), -0.17253 (19), -0.17253 (19), 
Length of domains: 9051
Time: pickout 0.0726    decision 0.2306    set_bounds 0.3758    solve 1.0470    add 0.2085    
Accumulated time: pickout 0.4890    decision 1.4198    set_bounds 1.7060    solve 5.4725    add 2.9922    
Current (lb-rhs): -0.17802643775939941
21490 domains visited
current_vram/total_varm: 12.5GB/99.9GB, batch_size increase to 8192
Cumulative time: 15.187649250030518

BaB round 13
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1363] [/input-8, 1363] [/input-8, 1555] [/input-8, 1363] [/input-8, 1066] [/input-8, 1066] [/input-8, 1363] [/input-8, 1355] [/input-8, 682] [/input-8, 1356] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22649002075195312
10 lb beta sum: 6.317848205566406, worst -0.17344069480895996
Time: prepare 0.3503    bound 3.8021    transfer 0.1579    finalize 0.1128    func 4.5338    
Accumulated time: func 10.1697    prepare 1.0969    bound 7.8501    transfer 0.4712    finalize 0.2804    
all_split False
======================Cut inference begins======================
max lb tensor(0.02274811) min lb tensor(-0.16167450)
Number of Verified Splits: 832 of 16384
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts: total 922 constraints, 46577 nonzero elements
cuts preparing time: 0.0210
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 939.
#cuts 1-3: 207
#cuts 7-9: 2
#cuts 10-12: 10
#cuts 13-15: 30
#cuts 16-18: 65
#cuts 19-21: 40
#cuts >= 20: 585
BICCOS time: 1.4647059440612793 
BICCOS Cumulative time: 4.069243431091309
Preprocessing time: 0.5594308376312256 Inference time: 0.47884392738342285 Add cuts time: 0.014975786209106445 Cut analysis time: 0.4114553928375244
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17793 (19), -0.17791 (19), -0.17465 (19), -0.17253 (19), -0.17094 (19), -0.17055 (19), -0.16914 (19), -0.16903 (19), -0.16822 (19), -0.16794 (19), -0.16774 (19), -0.16730 (19), -0.16690 (19), -0.16641 (19), -0.16555 (19), -0.16508 (19), -0.16432 (19), -0.16427 (19), -0.16405 (19), -0.16377 (19), 
Length of domains: 16411
Time: pickout 0.1244    decision 0.6940    set_bounds 1.0036    solve 4.5375    add 0.2506    
Accumulated time: pickout 0.6134    decision 2.1139    set_bounds 2.7096    solve 10.0100    add 3.2427    
Current (lb-rhs): -0.17792683839797974
37042 domains visited
current_vram/total_varm: 22.6GB/99.9GB, batch_size increase to 16384
Cumulative time: 23.30450129508972

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 532] [/input-8, 682] [/input-8, 1548] [/input-8, 1307] [/input-8, 533] [/input-8, 532] [/input-8, 1886] [/input-8, 682] [/input-8, 533] [/input-8, 682] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2237793207168579
10 lb beta sum: 6.869391441345215, worst -0.170998215675354
Time: prepare 0.6799    bound 8.2490    transfer 0.3744    finalize 0.2512    func 10.1120    
Accumulated time: func 20.2817    prepare 1.7772    bound 16.0991    transfer 0.8456    finalize 0.5316    
all_split False
======================Cut inference begins======================
max lb tensor(0.01969540) min lb tensor(-0.15743756)
Number of Verified Splits: 1989 of 32768
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts: total 1103 constraints, 55185 nonzero elements
cuts preparing time: 0.4515
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1120.
#cuts 1-3: 220
#cuts 7-9: 3
#cuts 10-12: 20
#cuts 13-15: 34
#cuts 16-18: 73
#cuts 19-21: 62
#cuts >= 20: 708
BICCOS time: 2.4594883918762207 
BICCOS Cumulative time: 6.528731822967529
Preprocessing time: 1.1060154438018799 Inference time: 0.4157874584197998 Add cuts time: 0.03595161437988281 Cut analysis time: 0.9017338752746582
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15744 (21), -0.15387 (21), -0.15377 (20), -0.15297 (21), -0.15186 (20), -0.15138 (21), -0.15105 (20), -0.15092 (21), -0.15086 (20), -0.15075 (20), -0.15066 (21), -0.15033 (21), -0.15009 (20), -0.14962 (20), -0.14954 (21), -0.14953 (21), -0.14903 (21), -0.14884 (21), -0.14878 (20), -0.14865 (21), 
Length of domains: 30806
Time: pickout 0.2408    decision 1.7342    set_bounds 1.9105    solve 10.1176    add 0.3617    
Accumulated time: pickout 0.8542    decision 3.8481    set_bounds 4.6202    solve 20.1276    add 3.6044    
Current (lb-rhs): -0.15743756294250488
67821 domains visited
Cumulative time: 40.24464154243469

BaB round 15
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1548] [/input-8, 1886] [/input-8, 533] [/input-8, 1878] [/input-8, 1356] [/input-8, 1356] [/input-8, 666] [/input-8, 531] [/input-8, 1555] [/input-8, 1356] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21870383620262146
10 lb beta sum: 7.328746795654297, worst -0.1690284013748169
Time: prepare 0.7031    bound 9.2263    transfer 0.3665    finalize 0.6905    func 11.2090    
Accumulated time: func 31.4907    prepare 2.4808    bound 25.3254    transfer 1.2121    finalize 1.2221    
all_split False
======================Cut inference begins======================
max lb tensor(0.01802933) min lb tensor(-0.15311098)
Number of Verified Splits: 2012 of 32768
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts: total 1102 constraints, 67108 nonzero elements
cuts preparing time: 0.0282
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1119.
#cuts 1-3: 229
#cuts 7-9: 6
#cuts 10-12: 16
#cuts 13-15: 45
#cuts 16-18: 76
#cuts 19-21: 68
#cuts >= 20: 679
BICCOS time: 2.6608662605285645 
BICCOS Cumulative time: 9.189598083496094
Preprocessing time: 1.1081151962280273 Inference time: 0.9462573528289795 Add cuts time: 0.03814291954040527 Cut analysis time: 0.5683507919311523
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15311 (22), -0.15297 (21), -0.15094 (22), -0.15037 (22), -0.14954 (21), -0.14884 (21), -0.14878 (20), -0.14865 (21), -0.14856 (21), -0.14766 (21), -0.14758 (22), -0.14736 (21), -0.14631 (21), -0.14623 (21), -0.14587 (21), -0.14574 (22), -0.14565 (21), -0.14558 (21), -0.14532 (20), -0.14499 (20), 
Length of domains: 45178
Time: pickout 0.2542    decision 1.6899    set_bounds 2.0897    solve 11.2146    add 0.4974    
Accumulated time: pickout 1.1085    decision 5.5380    set_bounds 6.7098    solve 31.3422    add 4.1018    
Current (lb-rhs): -0.15311098098754883
98577 domains visited
Cumulative time: 58.786182165145874

BaB round 16
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1878] [/input-8, 533] [/input-8, 1564] [/input-8, 1878] [/input-8, 1878] [/input-8, 682] [/input-8, 1878] [/input-8, 531] [/input-8, 523] [/input-8, 682] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.215609610080719
10 lb beta sum: 7.307197093963623, worst -0.1685119867324829
Time: prepare 0.6915    bound 9.2282    transfer 0.3670    finalize 0.2850    func 11.3700    
Accumulated time: func 42.8607    prepare 3.1727    bound 34.5536    transfer 1.5791    finalize 1.5071    
all_split False
======================Cut inference begins======================
max lb tensor(0.01808214) min lb tensor(-0.14710546)
Number of Verified Splits: 2131 of 32768
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts: total 1309 constraints, 71056 nonzero elements
cuts preparing time: 0.0302
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1326.
#cuts 1-3: 252
#cuts 7-9: 7
#cuts 10-12: 21
#cuts 13-15: 60
#cuts 16-18: 93
#cuts 19-21: 90
#cuts >= 20: 803
BICCOS time: 2.26778507232666 
BICCOS Cumulative time: 11.457383155822754
Preprocessing time: 1.1377220153808594 Inference time: 0.4837226867675781 Add cuts time: 0.04090404510498047 Cut analysis time: 0.6054363250732422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15311 (22), -0.15094 (22), -0.15037 (22), -0.14856 (21), -0.14758 (22), -0.14711 (22), -0.14579 (22), -0.14574 (22), -0.14565 (21), -0.14470 (22), -0.14396 (22), -0.14390 (22), -0.14375 (22), -0.14367 (22), -0.14359 (22), -0.14347 (21), -0.14342 (22), -0.14334 (22), -0.14300 (22), -0.14293 (21), 
Length of domains: 59431
Time: pickout 0.2805    decision 1.6839    set_bounds 2.1691    solve 11.3749    add 0.4583    
Accumulated time: pickout 1.3890    decision 7.2219    set_bounds 8.8789    solve 42.7171    add 4.5600    
Current (lb-rhs): -0.15311098098754883
129214 domains visited
Cumulative time: 77.14829730987549

BaB round 17
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 531] [/input-8, 1066] [/input-8, 1555] [/input-8, 523] [/input-8, 533] [/input-8, 682] [/input-8, 533] [/input-8, 1307] [/input-8, 523] [/input-8, 1307] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21480223536491394
10 lb beta sum: 7.45114278793335, worst -0.16560781002044678
Time: prepare 1.3086    bound 10.6412    transfer 0.3714    finalize 0.2880    func 12.8364    
Accumulated time: func 55.6971    prepare 4.4817    bound 45.1948    transfer 1.9506    finalize 1.7951    
all_split False
======================Cut inference begins======================
max lb tensor(0.01935911) min lb tensor(-0.14518237)
Number of Verified Splits: 1754 of 32768
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts: total 1372 constraints, 72646 nonzero elements
cuts preparing time: 0.0334
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1389.
#cuts 1-3: 254
#cuts 7-9: 8
#cuts 10-12: 22
#cuts 13-15: 63
#cuts 16-18: 98
#cuts 19-21: 95
#cuts >= 20: 849
BICCOS time: 2.3138933181762695 
BICCOS Cumulative time: 13.771276473999023
Preprocessing time: 1.231755018234253 Inference time: 0.41936278343200684 Add cuts time: 0.03789639472961426 Cut analysis time: 0.6248791217803955
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15094 (22), -0.14758 (22), -0.14711 (22), -0.14579 (22), -0.14574 (22), -0.14518 (23), -0.14428 (22), -0.14396 (22), -0.14390 (22), -0.14375 (22), -0.14367 (22), -0.14359 (22), -0.14342 (22), -0.14334 (22), -0.14330 (23), -0.14293 (21), -0.14281 (22), -0.14248 (22), -0.14248 (22), -0.14247 (22), 
Length of domains: 74061
Time: pickout 0.2569    decision 2.1077    set_bounds 1.6773    solve 12.8449    add 0.6085    
Accumulated time: pickout 1.6459    decision 9.3296    set_bounds 10.5562    solve 55.5619    add 5.1685    
Current (lb-rhs): -0.15093672275543213
160228 domains visited
Cumulative time: 97.12710094451904

BaB round 18
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1307] [/input-8, 1558] [/input-8, 1555] [/input-8, 532] [/input-8, 531] [/input-8, 1878] [/input-8, 1886] [/input-8, 1558] [/input-8, 523] [/input-8, 1373] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21218430995941162
10 lb beta sum: 7.49486780166626, worst -0.16698575019836426
Time: prepare 0.6983    bound 11.0179    transfer 0.3703    finalize 0.2957    func 12.6152    
Accumulated time: func 68.3123    prepare 5.1804    bound 56.2127    transfer 2.3209    finalize 2.0907    
all_split False
======================Cut inference begins======================
max lb tensor(0.02051663) min lb tensor(-0.14439130)
Number of Verified Splits: 1887 of 32768
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts: total 1406 constraints, 73675 nonzero elements
cuts preparing time: 0.0321
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1423.
#cuts 1-3: 257
#cuts 7-9: 8
#cuts 10-12: 21
#cuts 13-15: 66
#cuts 16-18: 100
#cuts 19-21: 93
#cuts >= 20: 878
BICCOS time: 2.3741397857666016 
BICCOS Cumulative time: 16.145416259765625
Preprocessing time: 1.2343783378601074 Inference time: 0.46311450004577637 Add cuts time: 0.04298853874206543 Cut analysis time: 0.6336584091186523
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14711 (22), -0.14518 (23), -0.14439 (23), -0.14428 (22), -0.14390 (22), -0.14367 (22), -0.14359 (22), -0.14330 (23), -0.14281 (22), -0.14271 (23), -0.14269 (23), -0.14268 (23), -0.14248 (22), -0.14247 (22), -0.14233 (22), -0.14184 (22), -0.14156 (22), -0.14139 (22), -0.14098 (23), -0.14095 (23), 
Length of domains: 88558
Time: pickout 0.2607    decision 2.4020    set_bounds 2.5978    solve 12.6226    add 0.3401    
Accumulated time: pickout 1.9066    decision 11.7316    set_bounds 13.1540    solve 68.1845    add 5.5087    
Current (lb-rhs): -0.14710545539855957
191109 domains visited
Cumulative time: 117.86824345588684

BaB round 19
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 531] [/input-8, 1878] [/input-8, 1886] [/input-8, 682] [/input-8, 1355] [/input-8, 1548] [/input-8, 682] [/input-8, 523] [/input-8, 1307] [/input-8, 1307] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2123512327671051
10 lb beta sum: 7.472085952758789, worst -0.16531682014465332
Time: prepare 0.7254    bound 11.2546    transfer 0.3733    finalize 1.2084    func 13.7855    
Accumulated time: func 82.0979    prepare 5.9064    bound 67.4673    transfer 2.6942    finalize 3.2991    
all_split False
======================Cut inference begins======================
max lb tensor(0.01947618) min lb tensor(-0.14709020)
Number of Verified Splits: 1910 of 32768
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts: total 1402 constraints, 73611 nonzero elements
cuts preparing time: 0.0307
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1419.
#cuts 1-3: 256
#cuts 7-9: 9
#cuts 10-12: 22
#cuts 13-15: 68
#cuts 16-18: 100
#cuts 19-21: 86
#cuts >= 20: 878
BICCOS time: 2.3318095207214355 
BICCOS Cumulative time: 18.47722578048706
Preprocessing time: 1.1616764068603516 Inference time: 0.48668742179870605 Add cuts time: 0.04408407211303711 Cut analysis time: 0.6393616199493408
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14709 (23), -0.14518 (23), -0.14439 (23), -0.14428 (22), -0.14367 (22), -0.14330 (23), -0.14281 (22), -0.14271 (23), -0.14269 (23), -0.14268 (23), -0.14248 (22), -0.14247 (23), -0.14196 (23), -0.14191 (23), -0.14172 (23), -0.14156 (23), -0.14098 (23), -0.14095 (23), -0.14063 (22), -0.14055 (23), 
Length of domains: 103032
Time: pickout 0.2706    decision 2.5140    set_bounds 1.8058    solve 13.7916    add 0.2940    
Accumulated time: pickout 2.1772    decision 14.2456    set_bounds 14.9599    solve 81.9761    add 5.8026    
Current (lb-rhs): -0.14709019660949707
221967 domains visited
Cumulative time: 139.03886222839355

BaB round 20
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1558] [/input-8, 1555] [/input-8, 532] [/input-8, 532] [/input-8, 1883] [/input-8, 1878] [/input-8, 1886] [/input-8, 1307] [/input-8, 523] [/input-8, 1548] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2083679437637329
10 lb beta sum: 7.479877948760986, worst -0.16712117195129395
Time: prepare 0.7505    bound 11.2759    transfer 0.3728    finalize 0.3279    func 12.9603    
Accumulated time: func 95.0582    prepare 6.6573    bound 78.7432    transfer 3.0670    finalize 3.6271    
all_split False
======================Cut inference begins======================
max lb tensor(0.02171350) min lb tensor(-0.14184725)
Number of Verified Splits: 2064 of 32768
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts: total 1400 constraints, 73570 nonzero elements
cuts preparing time: 0.0294
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1417.
#cuts 1-3: 256
#cuts 7-9: 9
#cuts 10-12: 22
#cuts 13-15: 66
#cuts 16-18: 96
#cuts 19-21: 88
#cuts >= 20: 880
BICCOS time: 3.517427921295166 
BICCOS Cumulative time: 21.994653701782227
Preprocessing time: 1.20870041847229 Inference time: 1.6311795711517334 Add cuts time: 0.04709625244140625 Cut analysis time: 0.6304516792297363
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14709 (23), -0.14518 (23), -0.14439 (23), -0.14428 (22), -0.14330 (23), -0.14271 (23), -0.14269 (23), -0.14268 (23), -0.14248 (22), -0.14247 (23), -0.14196 (23), -0.14191 (23), -0.14185 (23), -0.14172 (23), -0.14156 (23), -0.14098 (23), -0.14095 (23), -0.14084 (23), -0.14055 (23), -0.14036 (22), 
Length of domains: 117352
Time: pickout 0.2768    decision 1.6663    set_bounds 2.7218    solve 12.9679    add 0.3026    
Accumulated time: pickout 2.4541    decision 15.9118    set_bounds 17.6817    solve 94.9440    add 6.1052    
Current (lb-rhs): -0.14709019660949707
252671 domains visited
Cumulative time: 160.6447994709015

BaB round 21
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 531] [/input-8, 1878] [/input-8, 531] [/input-8, 1355] [/input-8, 682] [/input-8, 523] [/input-8, 1548] [/input-8, 1886] [/input-8, 523] [/input-8, 531] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2129162847995758
10 lb beta sum: 7.48754358291626, worst -0.1692652702331543
Time: prepare 0.7249    bound 11.2687    transfer 0.3761    finalize 1.5018    func 14.0978    
Accumulated time: func 109.1560    prepare 7.3826    bound 90.0119    transfer 3.4430    finalize 5.1289    
all_split False
======================Cut inference begins======================
max lb tensor(0.02105522) min lb tensor(-0.14518237)
Number of Verified Splits: 2061 of 32768
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts: total 1397 constraints, 73404 nonzero elements
cuts preparing time: 0.0329
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1414.
#cuts 1-3: 255
#cuts 7-9: 7
#cuts 10-12: 23
#cuts 13-15: 67
#cuts 16-18: 96
#cuts 19-21: 90
#cuts >= 20: 876
BICCOS time: 2.3824732303619385 
BICCOS Cumulative time: 24.377126932144165
Preprocessing time: 1.1687664985656738 Inference time: 0.49319028854370117 Add cuts time: 0.08924627304077148 Cut analysis time: 0.631270170211792
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14709 (23), -0.14518 (24), -0.14439 (23), -0.14271 (23), -0.14269 (23), -0.14268 (23), -0.14247 (23), -0.14196 (23), -0.14191 (23), -0.14185 (23), -0.14172 (23), -0.14156 (23), -0.14147 (24), -0.14098 (23), -0.14095 (23), -0.14084 (23), -0.14055 (23), -0.14036 (23), -0.13981 (23), -0.13980 (23), 
Length of domains: 131675
Time: pickout 0.2677    decision 1.6843    set_bounds 1.7829    solve 14.1050    add 0.3853    
Accumulated time: pickout 2.7218    decision 17.5962    set_bounds 19.4646    solve 109.0490    add 6.4905    
Current (lb-rhs): -0.14709019660949707
283378 domains visited
Cumulative time: 181.40394043922424

BaB round 22
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 531] [/input-8, 1878] [/input-8, 1558] [/input-8, 1355] [/input-8, 1548] [/input-8, 1886] [/input-8, 1883] [/input-8, 523] [/input-8, 1307] [/input-8, 1558] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2030240297317505
10 lb beta sum: 7.485045909881592, worst -0.15919363498687744
Time: prepare 0.7553    bound 11.2898    transfer 0.3758    finalize 0.3233    func 12.9779    
Accumulated time: func 122.1339    prepare 8.1383    bound 101.3017    transfer 3.8188    finalize 5.4522    
all_split False
======================Cut inference begins======================
max lb tensor(0.02198529) min lb tensor(-0.13848829)
Number of Verified Splits: 2188 of 32768
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts: total 1408 constraints, 78832 nonzero elements
cuts preparing time: 0.0332
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1425.
#cuts 1-3: 254
#cuts 7-9: 7
#cuts 10-12: 26
#cuts 13-15: 68
#cuts 16-18: 97
#cuts 19-21: 89
#cuts >= 20: 884
BICCOS time: 2.5934579372406006 
BICCOS Cumulative time: 26.970584869384766
Preprocessing time: 1.249579906463623 Inference time: 0.5400464534759521 Add cuts time: 0.11400675773620605 Cut analysis time: 0.6898248195648193
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14709 (23), -0.14518 (24), -0.14439 (23), -0.14271 (23), -0.14269 (23), -0.14268 (23), -0.14247 (23), -0.14196 (23), -0.14191 (23), -0.14185 (23), -0.14172 (23), -0.14156 (23), -0.14147 (24), -0.14098 (23), -0.14095 (23), -0.14084 (23), -0.14055 (23), -0.14036 (23), -0.13981 (23), -0.13980 (23), 
Length of domains: 145871
Time: pickout 0.3000    decision 1.7100    set_bounds 3.1406    solve 12.9866    add 0.3060    
Accumulated time: pickout 3.0219    decision 19.3062    set_bounds 22.6052    solve 122.0356    add 6.7965    
Current (lb-rhs): -0.14709019660949707
313958 domains visited
Time out!!!!!!!!
found process to kill: terminal indx = 2
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.cuts
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.indx
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=183_spec=2_26540403.log
found process for pidx=2
kill process for pidx=2
Result: unknown in 206.8471 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 184, vnnlib ID: 184 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.89069843,  -6.00872993,  -9.81441784,  -9.48617077,  -8.76289272,
         -10.92080116, -10.39973545,  -9.59434032,  -4.95132399,  -4.38216209]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [578]; unstable size 578; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 156, 1, 578] with unstable size 155 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 578] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 578] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [155]; unstable size 155; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 155] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 155] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.10634089,  0.71801591,  3.55015612,  3.86298299,  2.74121571,
          5.07143927,  4.74717522,  3.53826094, -1.04089355]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.89069843,  -6.00872993,  -9.81441784,  -9.48617077,  -8.76289272,
         -10.92080116, -10.39973545,  -9.59434032,  -4.95132399,  -4.38216209]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.23351336,  -6.51122952,  -9.97287560,  -9.75941277,  -9.11242390,
          -11.14874649, -10.70846844, -10.12545395,  -4.86424160,  -4.98114300]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11690140]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0072 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0799 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 185, vnnlib ID: 185 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.37633038, -6.56312561, -6.81894398, -6.27486277, -5.78229427,
         -6.83015299, -6.31567955, -6.65800142, -9.07024956, -5.04341173]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [539]; unstable size 539; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 221, 1, 539] with unstable size 220 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 539] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 539] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [220]; unstable size 220; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 220] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 220] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.97405291,  0.32927626,  0.17750072, -0.10494566, -0.85372543,
          0.32606649, -0.43116140, -0.31671762,  2.66897011]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.37633038, -6.56312561, -6.81894398, -6.27486277, -5.78229427,
         -6.83015299, -6.31567955, -6.65800142, -9.07024956, -5.04341173]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.16314507, -6.55455589, -6.26958275, -5.76347637, -5.09310055,
          -6.24820852, -5.75853968, -6.04403734, -8.83266640, -5.21279097],
         [-8.16314507, -6.55455589, -6.26958275, -5.76347637, -5.09310055,
          -6.24820852, -5.75853968, -6.04403734, -8.83266640, -5.21279097]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.55068541, -0.11969042,  0.54574871,  0.83124638]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0062 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0595 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 186, vnnlib ID: 186 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.47806835, -16.40879250, -15.09305000, -16.23484230, -16.50166130,
         -18.09269333, -17.71716118, -17.61732292,  -9.91329861, -15.71094036]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [596]; unstable size 596; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 596] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 596] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 596] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 184] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.06263518, 4.58382559, 3.51261282, 4.72654247, 4.75524092, 6.32470703,
         6.04849195, 5.57820702, 4.16677713]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0443 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 187, vnnlib ID: 187 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.08897448, -10.08986378,  -7.39640045,  -7.25407028,  -6.58082294,
          -7.96594858,  -7.83635616,  -8.88062477,  -5.43441010,  -7.92518377]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [737]; unstable size 737; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 236, 1, 737] with unstable size 235 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 737] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 737] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [235]; unstable size 235; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 235] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 235] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.51290536,  2.97313166,  0.25002050,  0.22753638, -0.42947197,
          0.68455625,  0.85951877,  1.57969666,  0.97213078]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.08897448, -10.08986378,  -7.39640045,  -7.25407028,  -6.58082294,
          -7.96594858,  -7.83635616,  -8.88062477,  -5.43441010,  -7.92518377]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.92it/s]100%|██████████| 1/1 [00:00<00:00,  8.91it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.76094055, -9.90721989, -7.24489021, -7.13194036, -6.39108372,
          -7.84055758, -7.66757345, -8.71227264, -5.73706532, -7.77384520],
         [-5.76094055, -9.90721989, -7.24489021, -7.13194036, -6.39108372,
          -7.84055758, -7.66757345, -8.71227264, -5.73706532, -7.77384520]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02387524, 0.65401840]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1149 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 7.152820110321045
alpha/beta optimization time: 1.2178318500518799
initial alpha-crown bounds: tensor([[-0.46918035,  3.03084230,  0.32193279,  0.28774744, -0.37226772,
          0.75499427,  0.91308260,  1.66521180,  1.02045679]], device='cuda:0')
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.4691803455352783
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6382 seconds.
lower bounds for all target labels: [-0.4691805839538574, 3.0308403968811035, 0.32193422317504883, 0.2877458930015564, -0.3722670078277588, 0.7549936771392822, 0.9130796194076538, 1.6652133464813232, 1.0204553604125977]
Number of cpus: 96  Number of subproblems: 2
Reassign each subproblems with number of thread: 48
Starting MIP solver for these labels: [0, 4]
start creating model mps for candidates: ['lay/16_0', 'lay/16_4']
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.mps
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=4_26561106.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=4_26561106.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 246097 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 246100 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.52165865898132
Verifying property 0 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.0308423042297363.

Properties batch 1, size 1
Remaining timeout: 198.30311727523804
Verifying property 1 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.665211796760559.

Properties batch 2, size 1
Remaining timeout: 198.18566513061523
Verifying property 2 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.0204567909240723.

Properties batch 3, size 1
Remaining timeout: 198.07565903663635
Verifying property 3 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.9130825996398926.

Properties batch 4, size 1
Remaining timeout: 197.9673523902893
Verifying property 4 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.75499427318573.

Properties batch 5, size 1
Remaining timeout: 197.84339499473572
Verifying property 5 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.3219327926635742.

Properties batch 6, size 1
Remaining timeout: 197.7295355796814
Verifying property 6 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.28774744272232056.

Properties batch 7, size 1
Remaining timeout: 197.61054182052612
Verifying property 7 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.37226772]], device='cuda:0') need to verify.
Model prediction is: tensor([ -6.08897448, -10.08986378,  -7.39640045,  -7.25407028,  -6.58082294,
         -7.96594858,  -7.83635616,  -8.88062477,  -5.43441010,  -7.92518377],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.37226772]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 737
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 228
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 983
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0009403228759765625
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0660    transfer 0.0002    finalize 0.0002    func 0.0668    
Accumulated time: func 0.0668    prepare 0.0003    bound 0.0660    transfer 0.0002    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 45] 
split level 1: [/input-12, 58] 
split level 2: [/input-12, 92] 
split level 3: [/input-12, 31] 
split level 4: [/input-12, 60] 
split level 5: [/input-12, 1] 
split level 6: [/input-12, 37] 
split level 7: [/input-12, 26] 
split level 8: [/input-8, 884] 
split level 9: [/input-8, 667] 
split level 10: [/input-8, 539] 
split level 11: [/input, 2232] 
split level 12: [/input, 3512] 
split level 13: [/input-8, 875] 
split level 14: [/input-8, 1956] 
split level 15: [/input, 3513] 
split level 16: [/input-8, 556] 
split level 17: [/input-8, 684] 
split level 18: [/input-8, 867] 
split level 19: [/input-8, 1884] 
split level 20: [/input-8, 659] 
split level 21: [/input, 2248] 
split level 22: [/input-8, 996] 
split level 23: [/input, 3529] 
split level 24: [/input, 1463] 
split level 25: [/input-8, 1876] 
split level 26: [/input-8, 93] 
split level 27: [/input-8, 1052] 
split level 28: [/input-8, 538] 
split level 29: [/input-8, 541] 
split level 30: [/input-8, 1460] 
split level 31: [/input-8, 1061] 
split level 32: [/input, 2521] 
split level 33: [/input, 1736] 
split level 34: [/input-8, 1892] 
split level 35: [/input, 1482] 
split level 36: [/input-8, 1003] 
split level 37: [/input-8, 508] 
split level 38: [/input-8, 92] 
split level 39: [/input-8, 988] 
split level 40: [/input-8, 1867] 
split level 41: [/input-8, 1866] 
split level 42: [/input-8, 1461] 
split level 43: [/input-8, 860] 
split level 44: [/input, 2264] 
split level 45: [/input, 1466] 
split level 46: [/input, 3272] 
split level 47: [/input-8, 801] 
split level 48: [/input-8, 1881] 
split level 49: [/input-8, 2044] 
split level 50: [/input-8, 1893] 
split level 51: [/input-8, 806] 
split level 52: [/input, 3018] 
split level 53: [/input, 3254] 
split level 54: [/input-8, 406] 
split level 55: [/input-8, 394] 
split level 56: [/input-8, 1305] 
split level 57: [/input, 3271] 
split level 58: [/input-8, 319] 
split level 59: [/input-8, 431] 
split level 60: [/input, 3704] 
split level 61: [/input, 2227] 
split level 62: [/input, 3306] 
split level 63: [/input, 3688] 
split level 64: [/input, 2251] 
split level 65: [/input-8, 90] 
split level 66: [/input, 2376] 
split level 67: [/input, 1357] 
split level 68: [/input, 2533] 
split level 69: [/input-8, 419] 
split level 70: [/input, 1717] 
split level 71: [/input, 1703] 
split level 72: [/input, 3287] 
split level 73: [/input-8, 1885] 
split level 74: [/input, 1300] 
split level 75: [/input, 3786] 
split level 76: [/input, 2332] 
split level 77: [/input, 3299] 
split level 78: [/input, 2472] 
split level 79: [/input-8, 1259] 
split level 80: [/input-8, 1123] 
split level 81: [/input, 2524] 
split level 82: [/input-8, 1910] 
split level 83: [/input, 3289] 
split level 84: [/input-8, 2016] 
split level 85: [/input-8, 395] 
split level 86: [/input-8, 507] 
split level 87: [/input, 1756] 
split level 88: [/input-8, 1048] 
split level 89: [/input-8, 1121] 
split level 90: [/input, 3305] 
split level 91: [/input-8, 2045] 
split level 92: [/input, 2515] 
split level 93: [/input-8, 2043] 
split level 94: [/input, 2506] 
split level 95: [/input-8, 1900] 
split level 96: [/input, 3290] 
split level 97: [/input-8, 1443] 
split level 98: [/input, 3310] 
split level 99: [/input, 3301] 
split level 100: [/input, 2514] 
split level 101: [/input, 2381] 
split level 102: [/input, 2076] 
split level 103: [/input-8, 1308] 
split level 104: [/input, 3548] 
split level 105: [/input, 3274] 
split level 106: [/input, 2092] 
split level 107: [/input, 1733] 
split level 108: [/input, 3269] 
split level 109: [/input-8, 1249] 
split level 110: [/input, 2379] 
split level 111: [/input, 3532] 
split level 112: [/input-8, 1909] 
split level 113: [/input-8, 1253] 
split level 114: [/input, 3282] 
split level 115: [/input, 3186] 
split level 116: [/input, 2920] 
split level 117: [/input, 2386] 
split level 118: [/input, 2534] 
split level 119: [/input, 2433] 
split level 120: [/input, 2252] 
split level 121: [/input, 3363] 
split level 122: [/input, 3783] 
split level 123: [/input, 3257] 
split level 124: [/input, 2382] 
split level 125: [/input, 3143] 
split level 126: [/input, 3297] 
split level 127: [/input, 2557] 
split level 128: [/input, 2936] 
split level 129: [/input-8, 2047] 
split level 130: [/input, 1754] 
split level 131: [/input-8, 397] 
split level 132: [/input, 2540] 
split level 133: [/input, 2083] 
split level 134: [/input-8, 1449] 
split level 135: [/input, 3128] 
split level 136: [/input, 1768] 
split level 137: [/input, 2397] 
split level 138: [/input, 2967] 
split level 139: [/input-8, 1583] 
split level 140: [/input, 2267] 
split level 141: [/input, 423] 
split level 142: [/input, 3475] 
split level 143: [/input, 3106] 
split level 144: [/input, 2363] 
split level 145: [/input, 2982] 
split level 146: [/input-8, 551] 
split level 147: [/input, 1751] 
split level 148: [/input, 2364] 
split level 149: [/input-8, 945] 
split level 150: [/input, 3116] 
split level 151: [/input, 2470] 
split level 152: [/input-8, 84] 
split level 153: [/input-8, 1021] 
split level 154: [/input-8, 980] 
split level 155: [/input, 2398] 
split level 156: [/input, 2353] 
split level 157: [/input, 1500] 
split level 158: [/input, 3672] 
split level 159: [/input, 273] 
split level 160: [/input, 1771] 
split level 161: [/input, 3754] 
split level 162: [/input, 2510] 
split level 163: [/input, 3687] 
split level 164: [/input, 2455] 
split level 165: [/input, 3734] 
split level 166: [/input, 3703] 
split level 167: [/input, 3102] 
split level 168: [/input, 2345] 
split level 169: [/input, 3134] 
split level 170: [/input, 2473] 
split level 171: [/input, 3278] 
split level 172: [/input-8, 2042] 
split level 173: [/input, 3822] 
split level 174: [/input, 3105] 
split level 175: [/input, 3833] 
split level 176: [/input, 2089] 
split level 177: [/input, 3131] 
split level 178: [/input, 2952] 
split level 179: [/input, 2346] 
split level 180: [/input, 3356] 
split level 181: [/input, 3182] 
split level 182: [/input, 2369] 
split level 183: [/input-8, 267] 
split level 184: [/input, 3174] 
split level 185: [/input-8, 1422] 
split level 186: [/input, 3719] 
split level 187: [/input, 2330] 
split level 188: [/input, 3820] 
split level 189: [/input, 3834] 
split level 190: [/input, 3054] 
split level 191: [/input, 3153] 
split level 192: [/input-8, 1887] 
split level 193: [/input, 3832] 
split level 194: [/input, 1560] 
split level 195: [/input, 3821] 
split level 196: [/input, 2413] 
split level 197: [/input, 2374] 
split level 198: [/input, 3388] 
split level 199: [/input, 3091] 
Time: prepare 0.0073    bound 0.1296    transfer 0.0158    finalize 0.0092    func 0.1619    
Accumulated time: func 0.2287    prepare 0.0193    bound 0.1956    transfer 0.0160    finalize 0.0093    
all_split False
======================Cut inference begins======================
max lb tensor(0.36786067) min lb tensor(-0.37219393)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.02114105224609375 
BICCOS Cumulative time: 0.02114105224609375
Preprocessing time: 0.01899552345275879 Inference time: 0.0002751350402832031 Add cuts time: 0.00011849403381347656 Cut analysis time: 0.0017518997192382812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.35942 (1), -0.35940 (1), -0.35908 (1), -0.35832 (1), -0.35789 (1), -0.35784 (1), -0.35783 (1), -0.35736 (1), -0.35680 (1), -0.35571 (1), -0.35426 (1), -0.35413 (1), -0.35334 (1), -0.35271 (1), -0.35246 (1), -0.35137 (1), -0.35135 (1), -0.35101 (1), -0.35090 (1), -0.34996 (1), 
Length of domains: 50
Time: pickout 0.0005    decision 0.5874    set_bounds 0.0386    solve 0.1623    add 0.2259    
Accumulated time: pickout 0.0005    decision 0.5874    set_bounds 0.0386    solve 0.1623    add 0.2259    
Current (lb-rhs): -0.3594202995300293
50 domains visited
Cumulative time: 1.1248180866241455

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 1: [/input-12, 31] [/input-12, 60] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 60] [/input-12, 31] [/input-12, 31] [/input-12, 60] [/input-12, 31] 
split level 2: [/input-12, 1] [/input-12, 37] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 31] [/input-12, 60] [/input-12, 60] [/input-12, 31] [/input-12, 60] 
split level 3: [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3526499271392822
10 lb beta sum: 0.5643506646156311, worst -0.339683473110199
Time: prepare 0.0077    bound 0.1409    transfer 0.0010    finalize 0.0052    func 0.1576    
Accumulated time: func 0.3863    prepare 0.0273    bound 0.3365    transfer 0.0170    finalize 0.0145    
all_split False
======================Cut inference begins======================
max lb tensor(0.72333103) min lb tensor(-0.33942634)
Number of Verified Splits: 54 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.025522470474243164 
BICCOS Cumulative time: 0.046663522720336914
Preprocessing time: 0.021048545837402344 Inference time: 0.002061128616333008 Add cuts time: 0.0018236637115478516 Cut analysis time: 0.0005891323089599609
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21029 (2), -0.20993 (2), -0.20762 (2), -0.20678 (2), -0.20599 (2), -0.20456 (2), -0.20286 (2), -0.20257 (2), -0.20186 (2), -0.20180 (2), -0.20165 (2), -0.20131 (2), -0.20097 (2), -0.19994 (2), -0.19957 (2), -0.19842 (2), -0.19778 (2), -0.19736 (2), -0.19728 (2), -0.19594 (2), 
Length of domains: 50
Time: pickout 0.0090    decision 0.0275    set_bounds 0.0139    solve 0.1577    add 0.2336    
Accumulated time: pickout 0.0095    decision 0.6149    set_bounds 0.0526    solve 0.3201    add 0.4594    
Current (lb-rhs): -0.2102929800748825
100 domains visited
Cumulative time: 1.599039077758789

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 31] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 60] [/input-12, 31] [/input-12, 31] [/input-12, 60] [/input-12, 60] 
split level 2: [/input-12, 26] [/input-12, 26] [/input-12, 1] [/input-12, 1] [/input-12, 37] [/input-12, 37] [/input-12, 1] [/input-12, 1] [/input-12, 37] [/input-12, 37] 
split level 3: [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6978791356086731, worst -0.21029357612133026
10 lb beta sum: 0.6978791356086731, worst -0.20820336043834686
Time: prepare 0.0184    bound 0.1419    transfer 0.0009    finalize 0.0038    func 0.1679    
Accumulated time: func 0.5542    prepare 0.0466    bound 0.4784    transfer 0.0179    finalize 0.0183    
all_split False
======================Cut inference begins======================
max lb tensor(0.42945760) min lb tensor(-0.20764141)
Number of Verified Splits: 74 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.03473925590515137 
BICCOS Cumulative time: 0.08140277862548828
Preprocessing time: 0.024076461791992188 Inference time: 0.006051301956176758 Add cuts time: 0.002795696258544922 Cut analysis time: 0.0018157958984375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08857 (3), -0.08848 (3), -0.08695 (3), -0.08672 (3), -0.08634 (3), -0.08620 (3), -0.08617 (3), -0.08610 (3), -0.08588 (3), -0.08476 (3), -0.08471 (3), -0.08457 (3), -0.08382 (3), -0.08365 (3), -0.08216 (3), -0.08215 (3), -0.08214 (3), -0.08123 (3), -0.08069 (3), -0.07992 (3), 
Length of domains: 50
Time: pickout 0.0095    decision 0.0286    set_bounds 0.0165    solve 0.1680    add 0.2303    
Accumulated time: pickout 0.0191    decision 0.6435    set_bounds 0.0690    solve 0.4881    add 0.6897    
Current (lb-rhs): -0.08857494592666626
150 domains visited
Cumulative time: 2.0939300060272217

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-8, 556] [/input-8, 556] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-8, 556] [/input-8, 556] [/input-8, 556] [/input-8, 556] 
split level 3: [/input-8, 1003] [/input-8, 1003] [/input-8, 875] [/input-8, 875] [/input-8, 875] [/input-8, 875] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10331606864929199
10 lb beta sum: 0.5450917482376099, worst -0.08740203082561493
Time: prepare 0.0078    bound 0.1254    transfer 0.0014    finalize 0.0030    func 0.1413    
Accumulated time: func 0.6955    prepare 0.0547    bound 0.6038    transfer 0.0193    finalize 0.0213    
all_split False
======================Cut inference begins======================
max lb tensor(0.64194870) min lb tensor(-0.08469920)
Number of Verified Splits: 209 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 5
#cuts 4-6: 17
#cuts >= 20: 0
BICCOS time: 0.03277993202209473 
BICCOS Cumulative time: 0.11418271064758301
Preprocessing time: 0.013595342636108398 Inference time: 0.013379096984863281 Add cuts time: 0.0043315887451171875 Cut analysis time: 0.0014739036560058594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02629 (4), -0.02619 (4), -0.02605 (4), -0.02602 (4), -0.02540 (4), -0.02511 (4), -0.02469 (4), -0.02466 (4), -0.02464 (4), -0.02443 (4), -0.02410 (4), -0.02399 (4), -0.02396 (4), -0.02377 (4), -0.02375 (4), -0.02375 (4), -0.02244 (4), -0.02242 (4), -0.02184 (4), -0.02154 (4), 
Length of domains: 50
Time: pickout 0.0078    decision 0.0205    set_bounds 0.0159    solve 0.1414    add 0.3242    
Accumulated time: pickout 0.0269    decision 0.6640    set_bounds 0.0849    solve 0.6295    add 1.0140    
Current (lb-rhs): -0.02629329264163971
200 domains visited
Cumulative time: 2.6373040676116943

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 1: [/input-12, 31] [/input-12, 31] [/input-12, 1] [/input-12, 1] [/input-12, 31] [/input-12, 1] [/input-12, 1] [/input-12, 31] [/input-12, 31] [/input-12, 1] 
split level 2: [/input-12, 60] [/input-12, 60] [/input-12, 26] [/input-12, 26] [/input-12, 60] [/input-8, 875] [/input-8, 875] [/input-12, 60] [/input-12, 60] [/input-8, 875] 
split level 3: [/input-12, 37] [/input-12, 37] [/input-8, 867] [/input-8, 867] [/input-12, 37] [/input-8, 867] [/input-8, 867] [/input-12, 37] [/input-12, 37] [/input-8, 867] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08515691757202148
10 lb beta sum: 0.9722377061843872, worst -0.017153143882751465
Time: prepare 0.0087    bound 0.1580    transfer 0.0024    finalize 0.0029    func 0.1747    
Accumulated time: func 0.8702    prepare 0.0638    bound 0.7618    transfer 0.0217    finalize 0.0242    
all_split False
======================Cut inference begins======================
max lb tensor(0.66807985) min lb tensor(-0.01336503)
Number of Verified Splits: 377 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=4_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0018
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 4
#cuts 4-6: 15
#cuts >= 20: 0
BICCOS time: 0.0481717586517334 
BICCOS Cumulative time: 0.1623544692993164
Preprocessing time: 0.013216733932495117 Inference time: 0.020737886428833008 Add cuts time: 0.011587142944335938 Cut analysis time: 0.002629995346069336
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0015    decision 0.0230    set_bounds 0.0184    solve 0.1748    add 0.0289    
Accumulated time: pickout 0.0283    decision 0.6870    set_bounds 0.1033    solve 0.8044    add 1.0429    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([92, 45]), tensor([-1., -1.]), tensor([0, 0]), tensor([7.60121946e-15, 1.95861626e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([92, 45]), tensor([-1.,  1.]), tensor([0, 0]), tensor([7.60121946e-15, 9.90120769e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003], [-1.0], [0], [3.3003729035356095e+32], [2]), '/input-12': (tensor([92, 26, 31, 45]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([7.60121946e-15, 6.15245998e-02, 5.59180677e-02, 3.38015288e-01]), tensor([0, 1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003], [-1.0], [0], [3.3003729035356095e+32], [2]), '/input-12': (tensor([92, 26, 31, 45]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([7.60121946e-15, 6.15245998e-02, 5.59180677e-02, 2.04800203e-01]), tensor([0, 1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003], [-1.0], [0], [3.3003729035356095e+32], [2]), '/input-12': (tensor([92, 26, 31]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([7.60121946e-15, 6.15245998e-02, 4.18610811e-01]), tensor([0, 1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, -1.0], [0, 0], [0.018688010051846504, 0.07208505272865295], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([7.60121946e-15, 6.15245998e-02, 2.75759935e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, -1.0], [0, 0], [0.018688010051846504, 0.07208505272865295], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([7.60121946e-15, 6.15245998e-02, 1.50568023e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, 1.0], [0, 0], [0.018688010051846504, 0.07814903557300568], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([7.60121946e-15, 6.15245998e-02, 4.00900900e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, 1.0], [0, 0], [0.018688010051846504, 0.07814903557300568], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([7.60121946e-15, 6.15245998e-02, 1.50923938e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [-1.0, -1.0], [0, 0], [0.02134113200008869, 0.07229940593242645], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([7.60121946e-15, 5.62527031e-02, 1.28157854e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [-1.0, -1.0], [0, 0], [0.02134113200008869, 0.07229940593242645], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([7.60121946e-15, 5.62527031e-02, 1.51574835e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [-1.0, 1.0], [0, 0], [0.02134113200008869, 0.07898090779781342], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([7.60121946e-15, 5.62527031e-02, 1.29968196e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [-1.0, 1.0], [0, 0], [0.02134113200008869, 0.07898090779781342], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([7.60121946e-15, 5.62527031e-02, 1.52212068e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, -1.0], [0, 0], [0.018902825191617012, 0.07279480993747711], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([7.60121946e-15, 5.62527031e-02, 1.22187600e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, -1.0], [0, 0], [0.018902825191617012, 0.07279480993747711], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([7.60121946e-15, 5.62527031e-02, 1.52563348e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, 1.0], [0, 0], [0.018902825191617012, 0.07886242866516113], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([7.60121946e-15, 5.62527031e-02, 1.33957788e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, 1.0], [0, 0], [0.018902825191617012, 0.07886242866516113], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([7.60121946e-15, 5.62527031e-02, 1.52415901e-01]), tensor([0, 1, 4]))}
Shallow branching resets to n domains:  17
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.32731473445892334
10 lb beta sum: 0.38232433795928955, worst -0.3143361210823059
Time: prepare 0.0007    bound 0.1630    transfer 0.0005    finalize 0.0004    func 0.1647    
Accumulated time: func 1.0349    prepare 0.0645    bound 0.9249    transfer 0.0221    finalize 0.0246    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 60] 
split level 3: [/input-12, 37] 
split level 4: [/input-12, 26] 
split level 5: [/input-8, 875] 
split level 6: [/input-8, 556] 
split level 7: [/input-8, 867] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465312480926514, worst -0.08675771951675415
10 lb beta sum: 0.7106602191925049, worst -0.08613353967666626
Time: prepare 0.0115    bound 0.1566    transfer 0.0050    finalize 0.0025    func 0.1774    
Accumulated time: func 1.2123    prepare 0.0764    bound 1.0815    transfer 0.0271    finalize 0.0271    
all_split False
======================Cut inference begins======================
max lb tensor(0.18925446) min lb tensor(-0.08596605)
Number of Verified Splits: 160 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.4746531546115875, worst -0.13975948095321655
10 lb beta sum: 1.08609938621521, worst -0.03337740898132324
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=4_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 4
#cuts 4-6: 17
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.6061959266662598 
BICCOS Cumulative time: 0.7685503959655762
Preprocessing time: 0.008370161056518555 Inference time: 0.5887546539306641 Add cuts time: 0.006839275360107422 Cut analysis time: 0.0022318363189697266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08597 (8), -0.08428 (8), -0.08292 (8), -0.07971 (8), -0.07665 (8), -0.07635 (8), -0.07535 (8), -0.07501 (8), -0.07475 (8), -0.07473 (8), -0.07203 (8), -0.07154 (8), -0.06976 (8), -0.06961 (8), -0.06794 (8), -0.06637 (8), -0.06266 (8), -0.06194 (8), -0.06160 (8), -0.06106 (8), 
Length of domains: 96
Time: pickout 0.0006    decision 0.0227    set_bounds 0.0281    solve 0.1776    add 0.0793    
Accumulated time: pickout 0.0289    decision 0.7097    set_bounds 0.1314    solve 0.9819    add 1.1222    
Current (lb-rhs): -0.08596605062484741
296 domains visited
Cumulative time: 4.172637939453125

BaB round 2
batch: 96
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 1: [/input-8, 1061] [/input-8, 538] [/input-8, 1460] [/input-8, 659] [/input-8, 659] [/input-8, 1460] [/input-8, 1061] [/input-8, 538] [/input-8, 1061] [/input-8, 659] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07822048664093018
10 lb beta sum: 0.015165082179009914, worst -0.07798254489898682
Time: prepare 0.0086    bound 0.1530    transfer 0.0070    finalize 0.0035    func 0.1746    
Accumulated time: func 1.3869    prepare 0.0852    bound 1.2345    transfer 0.0341    finalize 0.0306    
all_split False
======================Cut inference begins======================
max lb tensor(0.60926056) min lb tensor(-0.07788873)
Number of Verified Splits: 208 of 384
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=4_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0016
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.04118919372558594 
BICCOS Cumulative time: 0.8097395896911621
Preprocessing time: 0.014002323150634766 Inference time: 0.02251744270324707 Add cuts time: 0.002507448196411133 Cut analysis time: 0.0021619796752929688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07789 (10), -0.07588 (10), -0.07452 (10), -0.07153 (10), -0.06926 (10), -0.06868 (10), -0.06830 (10), -0.06823 (10), -0.06743 (10), -0.06720 (10), -0.06715 (10), -0.06630 (10), -0.06542 (10), -0.06473 (10), -0.06414 (10), -0.06409 (10), -0.06241 (10), -0.06215 (10), -0.06104 (10), -0.06104 (10), 
Length of domains: 176
Time: pickout 0.0136    decision 0.0183    set_bounds 0.0309    solve 0.1748    add 0.0847    
Accumulated time: pickout 0.0425    decision 0.7280    set_bounds 0.1623    solve 1.1567    add 1.2070    
Current (lb-rhs): -0.07788872718811035
472 domains visited
Cumulative time: 4.545597076416016

BaB round 3
batch: 176
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 659] [/input-8, 659] [/input-8, 659] [/input, 3529] [/input, 3529] [/input-8, 659] [/input-8, 659] [/input-8, 1061] [/input, 3529] [/input, 1463] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07204794883728027
10 lb beta sum: 0.39688289165496826, worst -0.0719241201877594
Time: prepare 0.0086    bound 0.1438    transfer 0.0039    finalize 0.0026    func 0.1614    
Accumulated time: func 1.5483    prepare 0.0941    bound 1.3783    transfer 0.0380    finalize 0.0332    
all_split False
======================Cut inference begins======================
max lb tensor(0.69497800) min lb tensor(-0.07181764)
Number of Verified Splits: 321 of 352
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=4_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.0475161075592041 
BICCOS Cumulative time: 0.8572556972503662
Preprocessing time: 0.011616945266723633 Inference time: 0.03144693374633789 Add cuts time: 0.0030214786529541016 Cut analysis time: 0.0014307498931884766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07182 (11), -0.06674 (11), -0.06318 (11), -0.06212 (11), -0.06154 (11), -0.06090 (11), -0.05935 (11), -0.05697 (11), -0.05393 (11), -0.05316 (11), -0.05293 (11), -0.05214 (11), -0.05098 (11), -0.04972 (11), -0.04397 (11), -0.04351 (11), -0.02829 (11), -0.02665 (11), -0.02394 (11), -0.02325 (11), 
Length of domains: 31
Time: pickout 0.0159    decision 0.0235    set_bounds 0.0141    solve 0.1615    add 0.0628    
Accumulated time: pickout 0.0584    decision 0.7514    set_bounds 0.1764    solve 1.3182    add 1.2698    
Current (lb-rhs): -0.07181763648986816
503 domains visited
Cumulative time: 4.881248712539673

BaB round 4
batch: 31
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 538] [/input, 1463] [/input, 1463] [/input, 3529] [/input-8, 538] [/input, 1463] [/input, 1463] [/input, 3529] [/input-8, 538] [/input, 1463] 
split level 1: [/input-8, 1460] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 1460] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 1460] [/input-8, 538] 
split level 2: [/input-8, 1003] [/input-8, 1003] [/input-8, 1460] [/input-8, 1460] [/input-8, 1003] [/input-8, 1003] [/input-8, 1460] [/input-8, 1460] [/input-8, 1003] [/input-8, 1003] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.052039504051208496
10 lb beta sum: 0.7162564396858215, worst -0.043835073709487915
Time: prepare 0.0062    bound 0.1536    transfer 0.0044    finalize 0.0023    func 0.1682    
Accumulated time: func 1.7165    prepare 0.1005    bound 1.5319    transfer 0.0424    finalize 0.0355    
all_split False
======================Cut inference begins======================
max lb tensor(0.31812263) min lb tensor(-0.04372613)
Number of Verified Splits: 181 of 248
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=4_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.03699350357055664 
BICCOS Cumulative time: 0.8942492008209229
Preprocessing time: 0.008175373077392578 Inference time: 0.025454282760620117 Add cuts time: 0.0016322135925292969 Cut analysis time: 0.0017316341400146484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04373 (14), -0.04173 (14), -0.04079 (14), -0.04034 (14), -0.03879 (14), -0.03778 (14), -0.03705 (14), -0.03460 (14), -0.03448 (14), -0.03421 (14), -0.03419 (14), -0.03334 (14), -0.03305 (14), -0.03282 (14), -0.03164 (14), -0.03126 (14), -0.03092 (14), -0.03075 (14), -0.03071 (14), -0.03056 (14), 
Length of domains: 67
Time: pickout 0.0058    decision 0.0177    set_bounds 0.0205    solve 0.1683    add 0.0649    
Accumulated time: pickout 0.0642    decision 0.7691    set_bounds 0.1969    solve 1.4865    add 1.3347    
Current (lb-rhs): -0.043726131319999695
570 domains visited
Cumulative time: 5.2104527950286865

BaB round 5
batch: 67
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] 
split level 1: [/input-8, 1061] [/input-8, 1061] [/input, 3529] [/input-8, 1003] [/input, 3529] [/input-8, 1061] [/input, 3529] [/input, 3529] [/input-8, 1061] [/input-8, 1460] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6069032549858093, worst -0.03887820243835449
10 lb beta sum: 0.8822506070137024, worst -0.03879868984222412
Time: prepare 0.0137    bound 0.1809    transfer 0.0048    finalize 0.0034    func 0.2046    
Accumulated time: func 1.9212    prepare 0.1144    bound 1.7128    transfer 0.0472    finalize 0.0389    
all_split False
======================Cut inference begins======================
max lb tensor(0.05477592) min lb tensor(-0.03878343)
Number of Verified Splits: 115 of 268
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=4_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.02933478355407715 
BICCOS Cumulative time: 0.923583984375
Preprocessing time: 0.011234045028686523 Inference time: 0.015477657318115234 Add cuts time: 0.0009882450103759766 Cut analysis time: 0.001634836196899414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03878 (16), -0.03714 (16), -0.03663 (16), -0.03581 (16), -0.03485 (16), -0.03483 (16), -0.03413 (16), -0.03366 (16), -0.03326 (16), -0.03300 (16), -0.03182 (16), -0.03156 (16), -0.03119 (16), -0.03001 (16), -0.02998 (16), -0.02985 (16), -0.02950 (16), -0.02872 (16), -0.02817 (16), -0.02803 (16), 
Length of domains: 153
Time: pickout 0.0077    decision 0.0165    set_bounds 0.0189    solve 0.2048    add 0.0822    
Accumulated time: pickout 0.0719    decision 0.7857    set_bounds 0.2158    solve 1.6913    add 1.4169    
Current (lb-rhs): -0.03878343105316162
723 domains visited
Cumulative time: 5.578414678573608

BaB round 6
batch: 153
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03430771827697754
10 lb beta sum: 0.27274882793426514, worst -0.034299492835998535
Time: prepare 0.0082    bound 0.1660    transfer 0.0046    finalize 0.0022    func 0.1831    
Accumulated time: func 2.1043    prepare 0.1229    bound 1.8788    transfer 0.0518    finalize 0.0411    
all_split False
======================Cut inference begins======================
max lb tensor(0.11570507) min lb tensor(-0.03429115)
Number of Verified Splits: 234 of 306
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=4_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.04250836372375488 
BICCOS Cumulative time: 0.9660923480987549
Preprocessing time: 0.010032892227172852 Inference time: 0.029248476028442383 Add cuts time: 0.0017948150634765625 Cut analysis time: 0.001432180404663086
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03429 (17), -0.03327 (17), -0.03242 (17), -0.03140 (17), -0.03131 (17), -0.03030 (17), -0.02949 (17), -0.02941 (17), -0.02840 (17), -0.02759 (17), -0.02650 (17), -0.02535 (17), -0.02458 (17), -0.02413 (17), -0.02329 (17), -0.02207 (17), -0.02162 (17), -0.02038 (17), -0.02034 (17), -0.01944 (17), 
Length of domains: 72
Time: pickout 0.0169    decision 0.0242    set_bounds 0.0154    solve 0.1832    add 0.0730    
Accumulated time: pickout 0.0889    decision 0.8098    set_bounds 0.2312    solve 1.8745    add 1.4900    
Current (lb-rhs): -0.03429114818572998
795 domains visited
Cumulative time: 5.9423627853393555

BaB round 7
batch: 72
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3512] [/input, 3512] [/input, 3512] [/input, 3512] [/input, 3512] [/input, 3512] [/input, 3512] [/input, 3512] [/input, 3512] [/input, 3512] 
split level 1: [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 541] [/input-8, 541] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.021535277366638184
10 lb beta sum: 0.1705889254808426, worst -0.021525979042053223
Time: prepare 0.0076    bound 0.1535    transfer 0.0050    finalize 0.0028    func 0.1708    
Accumulated time: func 2.2751    prepare 0.1307    bound 2.0323    transfer 0.0568    finalize 0.0439    
all_split False
======================Cut inference begins======================
max lb tensor(0.03885889) min lb tensor(-0.02151084)
Number of Verified Splits: 218 of 288
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=4_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.042371273040771484 
BICCOS Cumulative time: 1.0084636211395264
Preprocessing time: 0.009536027908325195 Inference time: 0.02988576889038086 Add cuts time: 0.0014977455139160156 Cut analysis time: 0.001451730728149414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02151 (19), -0.02024 (19), -0.01854 (19), -0.01840 (19), -0.01794 (19), -0.01723 (19), -0.01665 (19), -0.01543 (19), -0.01496 (19), -0.01483 (19), -0.01372 (19), -0.01364 (19), -0.01228 (19), -0.01192 (19), -0.01188 (19), -0.01152 (19), -0.01082 (19), -0.01072 (19), -0.01066 (19), -0.01028 (19), 
Length of domains: 70
Time: pickout 0.0149    decision 0.0158    set_bounds 0.0208    solve 0.1710    add 0.0747    
Accumulated time: pickout 0.1038    decision 0.8257    set_bounds 0.2520    solve 2.0455    add 1.5647    
Current (lb-rhs): -0.021510839462280273
865 domains visited
Cumulative time: 6.287873029708862

BaB round 8
batch: 70
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1736] [/input, 1736] [/input, 1736] [/input, 1736] [/input, 1736] [/input, 2248] [/input, 2248] [/input, 2248] [/input, 1736] [/input, 1736] 
split level 1: [/input-8, 1461] [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1461] [/input-8, 1461] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4970966875553131, worst -0.010728597640991211
10 lb beta sum: 0.4970966875553131, worst -0.010712981224060059
Time: prepare 0.0142    bound 0.1541    transfer 0.0043    finalize 0.0026    func 0.1771    
Accumulated time: func 2.4523    prepare 0.1452    bound 2.1864    transfer 0.0611    finalize 0.0465    
all_split False
======================Cut inference begins======================
max lb tensor(0.03095222) min lb tensor(-0.01070797)
Number of Verified Splits: 222 of 280
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=4_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 20
#cuts >= 20: 0
BICCOS time: 0.04263758659362793 
BICCOS Cumulative time: 1.0511012077331543
Preprocessing time: 0.009154081344604492 Inference time: 0.030863046646118164 Add cuts time: 0.0012569427490234375 Cut analysis time: 0.001363515853881836
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01071 (21), -0.00996 (21), -0.00967 (21), -0.00945 (21), -0.00871 (21), -0.00843 (21), -0.00773 (21), -0.00765 (21), -0.00758 (21), -0.00739 (21), -0.00713 (21), -0.00702 (21), -0.00673 (21), -0.00671 (21), -0.00645 (21), -0.00641 (21), -0.00639 (21), -0.00612 (21), -0.00587 (21), -0.00575 (21), 
Length of domains: 58
Time: pickout 0.0176    decision 0.0200    set_bounds 0.0218    solve 0.1773    add 0.0647    
Accumulated time: pickout 0.1214    decision 0.8456    set_bounds 0.2738    solve 2.2228    add 1.6294    
Current (lb-rhs): -0.010707974433898926
923 domains visited
Cumulative time: 6.64087438583374

BaB round 9
batch: 58
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2248] [/input, 2248] [/input, 2248] [/input, 2248] [/input, 2248] [/input, 2248] [/input-8, 1052] [/input-8, 1052] [/input-8, 1052] [/input, 2248] 
split level 1: [/input-8, 1461] [/input-8, 860] [/input-8, 860] [/input, 3272] [/input, 3272] [/input, 3272] [/input-8, 1461] [/input-8, 860] [/input-8, 860] [/input, 3272] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0009598731994628906
10 lb beta sum: 0.0, worst -0.0008769035339355469
Time: prepare 0.0061    bound 0.1516    transfer 0.0041    finalize 0.0023    func 0.1665    
Accumulated time: func 2.6187    prepare 0.1515    bound 2.3380    transfer 0.0652    finalize 0.0488    
all_split False
======================Cut inference begins======================
max lb tensor(0.02343047) min lb tensor(-0.00085425)
Number of Verified Splits: 230 of 232
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=4_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 21
#cuts >= 20: 0
BICCOS time: 0.04449105262756348 
BICCOS Cumulative time: 1.0955922603607178
Preprocessing time: 0.007721900939941406 Inference time: 0.03390836715698242 Add cuts time: 0.0012559890747070312 Cut analysis time: 0.0016047954559326172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00085 (23), -0.00004 (23), 
Length of domains: 2
Time: pickout 0.0109    decision 0.0146    set_bounds 0.0133    solve 0.1666    add 0.0225    
Accumulated time: pickout 0.1324    decision 0.8602    set_bounds 0.2872    solve 2.3893    add 1.6518    
Current (lb-rhs): -0.0008542537689208984
925 domains visited
Cumulative time: 6.922271966934204

BaB round 10
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1956] [/input-8, 1956] 
split level 1: [/input-8, 93] [/input-8, 93] 
split level 2: [/input-8, 92] [/input-8, 92] 
split level 3: [/input, 1466] [/input, 1466] 
split level 4: [/input, 3272] [/input, 3272] 
split level 5: [/input-8, 860] [/input-8, 860] 
split level 6: [/input-8, 1881] [/input-8, 1881] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.02043783664703369

all verified at 0th iter
Time: prepare 0.0072    bound 0.0078    transfer 0.0025    finalize 0.0020    func 0.0213    
Accumulated time: func 2.6401    prepare 0.1591    bound 2.3458    transfer 0.0677    finalize 0.0508    
all_split False
======================Cut inference begins======================
max lb tensor(0.08040845) min lb tensor(0.02043784)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 4
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=4_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0015
Total number of valid cuts: 21.
#cuts 1-3: 21
#cuts >= 20: 0
BICCOS time: 0.010278463363647461 
BICCOS Cumulative time: 1.1058707237243652
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0012    decision 0.0205    set_bounds 0.0300    solve 0.0215    add 0.0001    
Accumulated time: pickout 0.1336    decision 0.8807    set_bounds 0.3172    solve 2.4108    add 1.6519    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
925 domains visited
Cumulative time: 7.007555961608887

found process to kill: terminal indx = 4
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=4_26561106.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=4_26561106.indx
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=4_26561106.log

Properties batch 8, size 1
Remaining timeout: 190.39738035202026
Verifying property 8 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.46918035]], device='cuda:0') need to verify.
Model prediction is: tensor([ -6.08897448, -10.08986378,  -7.39640045,  -7.25407028,  -6.58082294,
         -7.96594858,  -7.83635616,  -8.88062477,  -5.43441010,  -7.92518377],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.46918035]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 737
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 228
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 983
-----------------

======================Cut verification begins======================
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
Cut time: 0.0008897781372070312
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0498    transfer 0.0001    finalize 0.0001    func 0.0502    
Accumulated time: func 0.0502    prepare 0.0002    bound 0.0498    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 60] 
split level 1: [/input-12, 58] 
split level 2: [/input-12, 10] 
split level 3: [/input-12, 1] 
split level 4: [/input-12, 92] 
split level 5: [/input-8, 1956] 
split level 6: [/input-8, 884] 
split level 7: [/input-12, 36] 
split level 8: [/input-8, 539] 
split level 9: [/input-8, 1884] 
split level 10: [/input-8, 875] 
split level 11: [/input-8, 1892] 
split level 12: [/input-8, 1052] 
split level 13: [/input-12, 61] 
split level 14: [/input, 3512] 
split level 15: [/input-12, 55] 
split level 16: [/input-8, 508] 
split level 17: [/input-8, 1881] 
split level 18: [/input-8, 684] 
split level 19: [/input-8, 538] 
split level 20: [/input, 2521] 
split level 21: [/input-8, 92] 
split level 22: [/input-8, 867] 
split level 23: [/input-12, 45] 
split level 24: [/input, 3513] 
split level 25: [/input-8, 556] 
split level 26: [/input-8, 1061] 
split level 27: [/input-8, 499] 
split level 28: [/input-8, 1876] 
split level 29: [/input, 2232] 
split level 30: [/input-8, 659] 
split level 31: [/input-8, 1900] 
split level 32: [/input-8, 1910] 
split level 33: [/input-8, 100] 
split level 34: [/input-8, 84] 
split level 35: [/input, 1463] 
split level 36: [/input-8, 988] 
split level 37: [/input-12, 37] 
split level 38: [/input-8, 1116] 
split level 39: [/input, 3529] 
split level 40: [/input-8, 1888] 
split level 41: [/input, 2248] 
split level 42: [/input-8, 1460] 
split level 43: [/input-8, 1049] 
split level 44: [/input-8, 90] 
split level 45: [/input-8, 996] 
split level 46: [/input, 2264] 
split level 47: [/input, 1497] 
split level 48: [/input-8, 1425] 
split level 49: [/input-8, 1909] 
split level 50: [/input-8, 1298] 
split level 51: [/input-8, 541] 
split level 52: [/input-8, 667] 
split level 53: [/input, 3272] 
split level 54: [/input-8, 1003] 
split level 55: [/input-8, 93] 
split level 56: [/input, 2494] 
split level 57: [/input-8, 1893] 
split level 58: [/input-8, 1866] 
split level 59: [/input, 2472] 
split level 60: [/input-8, 507] 
split level 61: [/input-8, 319] 
split level 62: [/input, 174] 
split level 63: [/input-8, 1361] 
split level 64: [/input, 1466] 
split level 65: [/input-8, 1107] 
split level 66: [/input, 3165] 
split level 67: [/input, 1482] 
split level 68: [/input-8, 1098] 
split level 69: [/input-8, 1369] 
split level 70: [/input-8, 642] 
split level 71: [/input, 2506] 
split level 72: [/input-8, 500] 
split level 73: [/input, 365] 
split level 74: [/input-8, 510] 
split level 75: [/input, 1736] 
split level 76: [/input-8, 1259] 
split level 77: [/input-8, 944] 
split level 78: [/input, 3274] 
split level 79: [/input, 395] 
split level 80: [/input-8, 1041] 
split level 81: [/input-8, 492] 
split level 82: [/input-8, 1353] 
split level 83: [/input, 3018] 
split level 84: [/input-8, 1583] 
split level 85: [/input, 3254] 
split level 86: [/input-8, 1249] 
split level 87: [/input, 3257] 
split level 88: [/input, 2433] 
split level 89: [/input, 3287] 
split level 90: [/input, 3258] 
split level 91: [/input, 2473] 
split level 92: [/input-8, 1867] 
split level 93: [/input-8, 1106] 
split level 94: [/input-8, 1908] 
split level 95: [/input-8, 1293] 
split level 96: [/input-8, 1941] 
split level 97: [/input, 103] 
split level 98: [/input, 3306] 
split level 99: [/input, 3271] 
split level 100: [/input, 2449] 
split level 101: [/input-8, 1461] 
split level 102: [/input-8, 2021] 
split level 103: [/input-12, 72] 
split level 104: [/input, 1717] 
split level 105: [/input-8, 1373] 
split level 106: [/input-8, 694] 
split level 107: [/input, 3278] 
split level 108: [/input-8, 1305] 
split level 109: [/input, 2470] 
split level 110: [/input, 2446] 
split level 111: [/input, 3215] 
split level 112: [/input, 2524] 
split level 113: [/input, 426] 
split level 114: [/input, 2474] 
split level 115: [/input, 2455] 
split level 116: [/input, 3289] 
split level 117: [/input, 2386] 
split level 118: [/input, 3229] 
split level 119: [/input, 1703] 
split level 120: [/input, 3277] 
split level 121: [/input-8, 801] 
split level 122: [/input, 3182] 
split level 123: [/input, 3998] 
split level 124: [/input, 3305] 
split level 125: [/input, 3186] 
split level 126: [/input, 2936] 
split level 127: [/input, 3290] 
split level 128: [/input, 3246] 
split level 129: [/input, 1357] 
split level 130: [/input, 2515] 
split level 131: [/input-8, 1767] 
split level 132: [/input, 3170] 
split level 133: [/input-8, 1887] 
split level 134: [/input, 3245] 
split level 135: [/input, 2510] 
split level 136: [/input, 3269] 
split level 137: [/input, 3688] 
split level 138: [/input, 104] 
split level 139: [/input, 1563] 
split level 140: [/input, 3672] 
split level 141: [/input, 91] 
split level 142: [/input, 366] 
split level 143: [/input-8, 1534] 
split level 144: [/input, 3299] 
split level 145: [/input, 2398] 
split level 146: [/input, 2397] 
split level 147: [/input-8, 394] 
split level 148: [/input-8, 1377] 
split level 149: [/input-8, 1001] 
split level 150: [/input-8, 1430] 
split level 151: [/input, 2076] 
split level 152: [/input, 2251] 
split level 153: [/input, 2413] 
split level 154: [/input, 1576] 
split level 155: [/input, 2463] 
split level 156: [/input, 2540] 
split level 157: [/input-8, 1803] 
split level 158: [/input, 3260] 
split level 159: [/input, 2478] 
split level 160: [/input, 1579] 
split level 161: [/input-8, 1121] 
split level 162: [/input-8, 1047] 
split level 163: [/input, 3054] 
split level 164: [/input, 3532] 
split level 165: [/input, 3786] 
split level 166: [/input, 2092] 
split level 167: [/input, 2696] 
split level 168: [/input, 1618] 
split level 169: [/input, 3202] 
split level 170: [/input-8, 1424] 
split level 171: [/input-8, 648] 
split level 172: [/input, 3915] 
split level 173: [/input, 394] 
split level 174: [/input, 1733] 
split level 175: [/input-8, 1422] 
split level 176: [/input, 3250] 
split level 177: [/input, 407] 
split level 178: [/input-8, 649] 
split level 179: [/input-8, 980] 
split level 180: [/input, 2401] 
split level 181: [/input, 1650] 
split level 182: [/input, 3153] 
split level 183: [/input, 3977] 
split level 184: [/input, 3195] 
split level 185: [/input, 1594] 
split level 186: [/input, 1560] 
split level 187: [/input, 3834] 
split level 188: [/input, 3475] 
split level 189: [/input, 3052] 
split level 190: [/input, 1558] 
split level 191: [/input, 1569] 
split level 192: [/input, 1438] 
split level 193: [/input, 3974] 
split level 194: [/input, 3833] 
split level 195: [/input, 2412] 
split level 196: [/input, 3917] 
split level 197: [/input, 392] 
split level 198: [/input, 3832] 
split level 199: [/input, 1592] 
Time: prepare 0.0058    bound 0.0917    transfer 0.0089    finalize 0.0031    func 0.1096    
Accumulated time: func 0.1598    prepare 0.0155    bound 0.1414    transfer 0.0090    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.20137548) min lb tensor(-0.46913046)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.011894941329956055 
BICCOS Cumulative time: 0.011894941329956055
Preprocessing time: 0.010247945785522461 Inference time: 0.000156402587890625 Add cuts time: 6.508827209472656e-05 Cut analysis time: 0.0014255046844482422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.45634 (1), -0.45630 (1), -0.45597 (1), -0.45538 (1), -0.45497 (1), -0.45487 (1), -0.45482 (1), -0.45452 (1), -0.45408 (1), -0.45407 (1), -0.45389 (1), -0.45371 (1), -0.45326 (1), -0.45284 (1), -0.45103 (1), -0.44987 (1), -0.44986 (1), -0.44822 (1), -0.44821 (1), -0.44776 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5057    set_bounds 0.0087    solve 0.1097    add 0.2034    
Accumulated time: pickout 0.0003    decision 0.5057    set_bounds 0.0087    solve 0.1097    add 0.2034    
Current (lb-rhs): -0.4563373923301697
50 domains visited
Cumulative time: 0.9164855480194092

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 10] [/input-12, 60] 
split level 1: [/input-12, 1] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 92] [/input-12, 10] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 92] 
split level 3: [/input-8, 100] [/input-8, 556] [/input-8, 1956] [/input-8, 1003] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-8, 1881] [/input-12, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4495859742164612
10 lb beta sum: 0.5860037207603455, worst -0.4427456259727478
Time: prepare 0.0074    bound 0.1211    transfer 0.0018    finalize 0.0032    func 0.1363    
Accumulated time: func 0.2961    prepare 0.0232    bound 0.2625    transfer 0.0108    finalize 0.0065    
all_split False
======================Cut inference begins======================
max lb tensor(0.30993652) min lb tensor(-0.44269669)
Number of Verified Splits: 19 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0015
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.015955686569213867 
BICCOS Cumulative time: 0.027850627899169922
Preprocessing time: 0.012946605682373047 Inference time: 0.0008592605590820312 Add cuts time: 0.0003018379211425781 Cut analysis time: 0.001847982406616211
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10252 (2), -0.10246 (2), -0.10245 (2), -0.10161 (2), -0.10134 (2), -0.10072 (2), -0.10041 (2), -0.10011 (2), -0.10000 (2), -0.09997 (2), -0.09982 (2), -0.09955 (2), -0.09698 (2), -0.09374 (2), -0.09237 (2), -0.09196 (2), -0.09116 (2), -0.09099 (2), -0.09094 (2), -0.09076 (2), 
Length of domains: 50
Time: pickout 0.0086    decision 0.0232    set_bounds 0.0130    solve 0.1363    add 0.2130    
Accumulated time: pickout 0.0089    decision 0.5289    set_bounds 0.0217    solve 0.2460    add 0.4163    
Current (lb-rhs): -0.1025223433971405
100 domains visited
Cumulative time: 1.3336050510406494

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 1] [/input-12, 1] [/input-12, 60] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
split level 1: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 61] [/input-8, 1956] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 3: [/input-8, 556] [/input-8, 556] [/input-8, 1003] [/input-12, 61] [/input-8, 556] [/input-8, 1900] [/input-8, 556] [/input-8, 556] [/input-8, 556] [/input-8, 556] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10252070426940918
10 lb beta sum: 0.9573812484741211, worst -0.0734201967716217
Time: prepare 0.0079    bound 0.1329    transfer 0.0027    finalize 0.0027    func 0.1489    
Accumulated time: func 0.4449    prepare 0.0313    bound 0.3954    transfer 0.0135    finalize 0.0092    
all_split False
======================Cut inference begins======================
max lb tensor(0.41635326) min lb tensor(-0.06753981)
Number of Verified Splits: 381 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.0395655632019043 
BICCOS Cumulative time: 0.06741619110107422
Preprocessing time: 0.012544870376586914 Inference time: 0.01570272445678711 Add cuts time: 0.01022958755493164 Cut analysis time: 0.0010883808135986328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06649 (3), -0.06648 (3), -0.06572 (3), -0.06571 (3), -0.05541 (3), -0.05527 (3), -0.04885 (3), -0.04318 (3), -0.03957 (3), -0.03897 (3), 
Length of domains: 10
Time: pickout 0.0078    decision 0.0196    set_bounds 0.0159    solve 0.1489    add 0.2174    
Accumulated time: pickout 0.0167    decision 0.5485    set_bounds 0.0376    solve 0.3949    add 0.6338    
Current (lb-rhs): -0.06648504734039307
110 domains visited
Cumulative time: 1.7903828620910645

Shallow-BaB round 4
batch: 10
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 10] [/input-12, 1] [/input-12, 10] 
split level 2: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 3: [/input-8, 884] [/input-8, 884] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] 
split level 4: [/input-8, 1052] [/input-8, 1052] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 1052] [/input-8, 1052] [/input-8, 1052] [/input-8, 1052] 
split level 5: [/input-8, 875] [/input-8, 875] [/input-8, 1052] [/input-8, 1052] [/input-8, 1892] [/input-8, 1052] [/input-8, 875] [/input-8, 875] [/input-8, 875] [/input-8, 875] 
split level 6: [/input-8, 1892] [/input-8, 1892] [/input-8, 875] [/input-8, 875] [/input-8, 1052] [/input-8, 875] [/input-8, 1892] [/input-8, 1892] [/input-8, 1892] [/input-8, 1892] 
split level 7: [/input-12, 61] [/input-12, 61] [/input-8, 1892] [/input-12, 55] [/input-8, 875] [/input-8, 1892] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 8: [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 61] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] 
split level 9: [/input-8, 1881] [/input-8, 1881] [/input-8, 1881] [/input-8, 1892] [/input-12, 61] [/input-8, 1881] [/input-8, 1881] [/input-8, 1881] [/input-8, 1881] [/input-8, 1881] 
split level 10: [/input-8, 1061] [/input-8, 1061] [/input-8, 538] [/input-8, 1881] [/input-8, 1881] [/input-8, 538] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] 
split level 11: [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 538] [/input-8, 538] [/input-8, 1900] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] 
split level 12: [/input-8, 538] [/input-8, 538] [/input-8, 1061] [/input-8, 867] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] 
split level 13: [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input, 1463] [/input-8, 867] [/input, 1463] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 867] 
split level 14: [/input, 1463] [/input, 1463] [/input-8, 1460] [/input-8, 1061] [/input, 1463] [/input-8, 867] [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] 
split level 15: [/input-8, 1460] [/input-8, 1460] [/input-12, 37] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] 
split level 16: [/input-8, 100] [/input-8, 100] [/input-8, 100] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
split level 17: [/input-12, 37] [/input-12, 37] [/input-8, 1909] [/input-8, 100] [/input-8, 100] [/input, 3529] [/input, 3529] [/input-8, 100] [/input, 3529] [/input-8, 100] 
split level 18: [/input, 3529] [/input, 3529] [/input-8, 1003] [/input, 3529] [/input, 3529] [/input-8, 100] [/input-8, 100] [/input, 3529] [/input-8, 100] [/input, 3529] 
split level 19: [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] 
cut re-enabled after branching node selection
0 lb beta sum: 1.0802905559539795, worst -0.28800734877586365
10 lb beta sum: 1.3411824703216553, worst -0.03708523511886597
Time: prepare 0.0178    bound 0.1194    transfer 0.0013    finalize 0.0025    func 0.1436    
Accumulated time: func 0.5885    prepare 0.0501    bound 0.5149    transfer 0.0147    finalize 0.0117    
all_split False
======================Cut inference begins======================
max lb tensor(0.52892816) min lb tensor(-0.03318413)
Number of Verified Splits: 98 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0007
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 8
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.020647287368774414 
BICCOS Cumulative time: 0.08806347846984863
Preprocessing time: 0.012081146240234375 Inference time: 0.004452705383300781 Add cuts time: 0.002810955047607422 Cut analysis time: 0.001302480697631836
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01301 (4), -0.01298 (4), -0.01298 (4), -0.01298 (4), -0.01298 (4), -0.01279 (4), -0.01257 (4), -0.01244 (4), -0.01233 (4), -0.01199 (4), -0.01193 (4), -0.01179 (4), -0.01169 (4), -0.01145 (4), -0.01098 (4), -0.01087 (4), -0.01074 (4), -0.01068 (4), -0.01020 (4), -0.01006 (4), 
Length of domains: 50
Time: pickout 0.0008    decision 0.0613    set_bounds 0.0155    solve 0.1438    add 0.3576    
Accumulated time: pickout 0.0175    decision 0.6098    set_bounds 0.0532    solve 0.5387    add 0.9914    
Current (lb-rhs): -0.0130082368850708
160 domains visited
Cumulative time: 2.3971359729766846

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 58] [/input-12, 58] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 1: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 1] [/input-12, 1] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 10] [/input-12, 10] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 3: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 92] [/input-12, 92] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07515335083007812
10 lb beta sum: 0.8189073204994202, worst -0.022486597299575806
Time: prepare 0.0085    bound 0.1342    transfer 0.0012    finalize 0.0025    func 0.1492    
Accumulated time: func 0.7377    prepare 0.0588    bound 0.6490    transfer 0.0160    finalize 0.0142    
all_split False
======================Cut inference begins======================
max lb tensor(0.10651159) min lb tensor(-0.00751028)
Number of Verified Splits: 307 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.039031982421875 
BICCOS Cumulative time: 0.12709546089172363
Preprocessing time: 0.012396574020385742 Inference time: 0.015767812728881836 Add cuts time: 0.009686470031738281 Cut analysis time: 0.0011811256408691406
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0080    decision 0.0197    set_bounds 0.0179    solve 0.1493    add 0.0279    
Accumulated time: pickout 0.0255    decision 0.6295    set_bounds 0.0711    solve 0.6880    add 1.0193    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
160 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1]), tensor([-1., -1.]), tensor([0, 0]), tensor([3.51446650e-11, 1.87736321e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 10]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([3.51446650e-11, 3.48193169e-01, 1.16619214e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 10]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([3.51446650e-11, 3.48193169e-01, 5.91107756e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, -1.0, -1.0], [0, 0, 0], [3.300379093235806e+32, 0.046070829033851624, 0.043578967452049255], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([ 1., -1.]), tensor([0, 0]), tensor([4.19534185e-10, 9.14637931e-03]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, -1.0, -1.0], [0, 0, 0], [3.300379093235806e+32, 0.046070829033851624, 0.043578967452049255], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([1., 1.]), tensor([0, 0]), tensor([4.19534185e-10, 5.07470220e-02]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, -1.0, 1.0], [0, 0, 0], [3.300379093235806e+32, 0.046070829033851624, 0.04552863538265228], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([ 1., -1.]), tensor([0, 0]), tensor([4.19534185e-10, 8.44280608e-03]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, -1.0, 1.0], [0, 0, 0], [3.300379093235806e+32, 0.046070829033851624, 0.04552863538265228], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([1., 1.]), tensor([0, 0]), tensor([4.19534185e-10, 5.17198890e-02]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, 1.0, -1.0], [0, 0, 0], [3.300379093235806e+32, 0.05248953402042389, 0.04578940570354462], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([ 1., -1.]), tensor([0, 0]), tensor([4.19534185e-10, 8.44468363e-03]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, 1.0, -1.0], [0, 0, 0], [3.300379093235806e+32, 0.05248953402042389, 0.04578940570354462], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([1., 1.]), tensor([0, 0]), tensor([4.19534185e-10, 4.81341332e-02]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, 1.0, 1.0], [0, 0, 0], [3.300379093235806e+32, 0.05248953402042389, 0.04720105230808258], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([ 1., -1.]), tensor([0, 0]), tensor([4.19534185e-10, 9.57150944e-03]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, 1.0, 1.0], [0, 0, 0], [3.300379093235806e+32, 0.05248953402042389, 0.04720105230808258], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([1., 1.]), tensor([0, 0]), tensor([4.19534185e-10, 4.93887216e-02]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1956]), tensor([1.]), tensor([0]), tensor([3.30038528e+32]), tensor([1])), '/input-12': ([60], [1.0], [0], [4.195341851698231e-10], [0])}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.39962083101272583
10 lb beta sum: 1.3558814525604248, worst -0.37878888845443726
Time: prepare 0.0006    bound 0.1286    transfer 0.0003    finalize 0.0003    func 0.1299    
Accumulated time: func 0.8676    prepare 0.0594    bound 0.7777    transfer 0.0163    finalize 0.0145    
After pruning, left:  6

Back to Regular BaB

BaB round 1
batch: 6
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 92] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 1] 
split level 2: [/input-8, 875] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 10] 
split level 3: [/input-8, 1052] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-12, 92] 
split level 4: [/input-12, 61] [/input-8, 1052] [/input-8, 1052] [/input-8, 1052] [/input-8, 1052] [/input-12, 61] 
split level 5: [/input-8, 1881] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-8, 1900] 
cut re-enabled after branching node selection
0 lb beta sum: 1.616315245628357, worst -0.3236197233200073
10 lb beta sum: 1.632757544517517, worst -0.32328081130981445
Time: prepare 0.0166    bound 0.1304    transfer 0.0023    finalize 0.0022    func 0.1540    
Accumulated time: func 1.0216    prepare 0.0763    bound 0.9081    transfer 0.0186    finalize 0.0167    
all_split False
======================Cut inference begins======================
max lb tensor(0.85476780) min lb tensor(-0.32319343)
Number of Verified Splits: 348 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.676297903060913, worst -0.7873754501342773
10 lb beta sum: 1.7651348114013672, worst -0.11505505442619324
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.37532567977905273 
BICCOS Cumulative time: 0.5024211406707764
Preprocessing time: 0.010743141174316406 Inference time: 0.3540334701538086 Add cuts time: 0.009212017059326172 Cut analysis time: 0.0013370513916015625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.32319 (6), -0.31410 (6), -0.31177 (6), -0.31177 (6), -0.30267 (6), -0.30266 (6), -0.30098 (6), -0.29229 (6), -0.29186 (6), -0.28825 (6), -0.27643 (6), -0.27546 (6), -0.27268 (6), -0.27204 (6), -0.25982 (6), -0.25643 (6), -0.11400 (6), -0.11200 (6), -0.10200 (6), -0.10033 (6), 
Length of domains: 36
Time: pickout 0.0006    decision 0.0183    set_bounds 0.0399    solve 0.1541    add 0.0662    
Accumulated time: pickout 0.0262    decision 0.6478    set_bounds 0.1110    solve 0.8422    add 1.0855    
Current (lb-rhs): -0.32319343090057373
196 domains visited
Cumulative time: 3.5669822692871094

BaB round 2
batch: 36
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-8, 1956] [/input-12, 58] [/input-8, 884] [/input-8, 1956] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-8, 92] [/input-8, 988] [/input-8, 92] [/input-8, 1052] [/input-8, 988] [/input-8, 92] [/input-8, 84] [/input-8, 92] [/input-8, 84] [/input-8, 884] 
split level 2: [/input-8, 556] [/input-8, 1003] [/input-8, 556] [/input-8, 1881] [/input-8, 1003] [/input-8, 556] [/input-8, 1003] [/input-8, 556] [/input-8, 1003] [/input-8, 538] 
cut re-enabled after branching node selection
0 lb beta sum: 1.1404742002487183, worst -0.30972039699554443
10 lb beta sum: 1.1404742002487183, worst -0.3096059560775757
Time: prepare 0.0126    bound 0.1309    transfer 0.0060    finalize 0.0019    func 0.1532    
Accumulated time: func 1.1749    prepare 0.0891    bound 1.0390    transfer 0.0246    finalize 0.0186    
all_split False
======================Cut inference begins======================
max lb tensor(0.36965358) min lb tensor(-0.30955303)
Number of Verified Splits: 162 of 288
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 8
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.028240442276000977 
BICCOS Cumulative time: 0.5306615829467773
Preprocessing time: 0.008849143981933594 Inference time: 0.016066312789916992 Add cuts time: 0.0020952224731445312 Cut analysis time: 0.0012297630310058594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30955 (9), -0.30811 (9), -0.30050 (9), -0.29906 (9), -0.29748 (9), -0.29707 (9), -0.29706 (9), -0.29695 (9), -0.29561 (9), -0.29538 (9), -0.28840 (9), -0.28796 (9), -0.28795 (9), -0.28789 (9), -0.28649 (9), -0.28635 (9), -0.28628 (9), -0.28605 (9), -0.28559 (9), -0.28544 (9), 
Length of domains: 126
Time: pickout 0.0055    decision 0.0163    set_bounds 0.0218    solve 0.1533    add 0.0780    
Accumulated time: pickout 0.0317    decision 0.6641    set_bounds 0.1329    solve 0.9955    add 1.1636    
Current (lb-rhs): -0.30955302715301514
322 domains visited
Cumulative time: 3.8792760372161865

BaB round 3
batch: 126
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 875] [/input-8, 1956] [/input-8, 884] [/input-8, 875] [/input-8, 884] [/input-8, 1956] [/input-8, 884] [/input-8, 1956] [/input-8, 1956] [/input-8, 1956] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.30825120210647583
10 lb beta sum: 0.42940449714660645, worst -0.30645158886909485
Time: prepare 0.0052    bound 0.1322    transfer 0.0017    finalize 0.0014    func 0.1422    
Accumulated time: func 1.3170    prepare 0.0945    bound 1.1711    transfer 0.0263    finalize 0.0201    
all_split False
======================Cut inference begins======================
max lb tensor(0.30905837) min lb tensor(-0.30640540)
Number of Verified Splits: 86 of 252
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 8
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.019515275955200195 
BICCOS Cumulative time: 0.5501768589019775
Preprocessing time: 0.007780313491821289 Inference time: 0.00878596305847168 Add cuts time: 0.0017392635345458984 Cut analysis time: 0.0012097358703613281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30641 (10), -0.30523 (10), -0.29738 (10), -0.29620 (10), -0.29486 (10), -0.29454 (10), -0.29427 (10), -0.29355 (10), -0.29227 (10), -0.29217 (10), -0.28583 (10), -0.28548 (10), -0.28521 (10), -0.28445 (10), -0.28336 (10), -0.28321 (10), -0.28318 (10), -0.28309 (10), -0.28286 (10), -0.28250 (10), 
Length of domains: 166
Time: pickout 0.0141    decision 0.0229    set_bounds 0.0125    solve 0.1422    add 0.0829    
Accumulated time: pickout 0.0458    decision 0.6870    set_bounds 0.1453    solve 1.1377    add 1.2465    
Current (lb-rhs): -0.3064053952693939
488 domains visited
Cumulative time: 4.180947542190552

BaB round 4
batch: 166
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 884] [/input-8, 1956] [/input-8, 538] [/input-8, 1956] [/input-8, 1956] [/input-8, 92] [/input-8, 92] [/input-8, 100] [/input-8, 92] [/input-8, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5239881873130798, worst -0.30391618609428406
10 lb beta sum: 0.7932061553001404, worst -0.30355384945869446
Time: prepare 0.0148    bound 0.1312    transfer 0.0026    finalize 0.0018    func 0.1531    
Accumulated time: func 1.4702    prepare 0.1095    bound 1.3023    transfer 0.0289    finalize 0.0218    
all_split False
======================Cut inference begins======================
max lb tensor(0.01109481) min lb tensor(-0.30353025)
Number of Verified Splits: 10 of 332
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0012
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.012907028198242188 
BICCOS Cumulative time: 0.5630838871002197
Preprocessing time: 0.010009288787841797 Inference time: 0.0010790824890136719 Add cuts time: 0.0002803802490234375 Cut analysis time: 0.0015382766723632812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30353 (11), -0.30242 (11), -0.29452 (11), -0.29340 (11), -0.29168 (11), -0.29135 (11), -0.29105 (11), -0.28998 (11), -0.28962 (11), -0.28883 (11), -0.28266 (11), -0.28233 (11), -0.28199 (11), -0.28090 (11), -0.28050 (11), -0.28044 (11), -0.27988 (11), -0.27975 (11), -0.27949 (11), -0.27877 (11), 
Length of domains: 322
Time: pickout 0.0163    decision 0.0178    set_bounds 0.0146    solve 0.1532    add 0.0839    
Accumulated time: pickout 0.0622    decision 0.7048    set_bounds 0.1599    solve 1.2909    add 1.3303    
Current (lb-rhs): -0.3035302460193634
810 domains visited
Cumulative time: 4.490583181381226

BaB round 5
batch: 322
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 538] [/input-8, 538] [/input-8, 100] [/input-8, 538] [/input-8, 538] [/input-8, 1061] [/input-8, 556] [/input-8, 538] [/input-8, 1061] [/input-8, 556] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.29828691482543945
10 lb beta sum: 0.512264609336853, worst -0.2961449921131134
Time: prepare 0.0143    bound 0.1682    transfer 0.0119    finalize 0.0044    func 0.2031    
Accumulated time: func 1.6733    prepare 0.1241    bound 1.4705    transfer 0.0408    finalize 0.0262    
all_split False
======================Cut inference begins======================
max lb tensor(0.00702974) min lb tensor(-0.29592782)
Number of Verified Splits: 8 of 644
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0027
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 9
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.027191877365112305 
BICCOS Cumulative time: 0.590275764465332
Preprocessing time: 0.02257513999938965 Inference time: 0.0010762214660644531 Add cuts time: 0.00039386749267578125 Cut analysis time: 0.003146648406982422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.29593 (12), -0.29480 (12), -0.28994 (12), -0.28916 (12), -0.28885 (12), -0.28802 (12), -0.28416 (12), -0.28381 (12), -0.28314 (12), -0.28212 (12), -0.28166 (12), -0.28098 (12), -0.28078 (12), -0.27969 (12), -0.27825 (12), -0.27787 (12), -0.27767 (12), -0.27737 (12), -0.27701 (12), -0.27628 (12), 
Length of domains: 636
Time: pickout 0.0197    decision 0.0341    set_bounds 0.0355    solve 0.2034    add 0.1279    
Accumulated time: pickout 0.0819    decision 0.7389    set_bounds 0.1953    solve 1.4943    add 1.4582    
Current (lb-rhs): -0.29592782258987427
1446 domains visited
Cumulative time: 4.9479780197143555

BaB round 6
batch: 636
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 867] [/input-8, 1061] [/input-12, 55] [/input-8, 1061] [/input-8, 1061] [/input-8, 867] [/input-8, 1061] [/input-8, 1460] [/input-8, 867] [/input-8, 1061] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.29168564081192017
10 lb beta sum: 0.49482035636901855, worst -0.28969064354896545
Time: prepare 0.0292    bound 0.1500    transfer 0.0164    finalize 0.0069    func 0.2117    
Accumulated time: func 1.8850    prepare 0.1536    bound 1.6205    transfer 0.0571    finalize 0.0331    
all_split False
======================Cut inference begins======================
max lb tensor(0.13333389) min lb tensor(-0.28963485)
Number of Verified Splits: 117 of 1272
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 9
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.062093496322631836 
BICCOS Cumulative time: 0.6523692607879639
Preprocessing time: 0.042676687240600586 Inference time: 0.015333890914916992 Add cuts time: 0.0025527477264404297 Cut analysis time: 0.0015301704406738281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.28963 (13), -0.28872 (13), -0.28451 (13), -0.28309 (13), -0.28297 (13), -0.28259 (13), -0.28218 (13), -0.28056 (13), -0.27790 (13), -0.27778 (13), -0.27703 (13), -0.27595 (13), -0.27586 (13), -0.27568 (13), -0.27531 (13), -0.27482 (13), -0.27431 (13), -0.27430 (13), -0.27389 (13), -0.27382 (13), 
Length of domains: 1155
Time: pickout 0.0755    decision 0.0539    set_bounds 0.0638    solve 0.2120    add 0.1077    
Accumulated time: pickout 0.1574    decision 0.7927    set_bounds 0.2591    solve 1.7064    add 1.5659    
Current (lb-rhs): -0.2896348536014557
2601 domains visited
Cumulative time: 5.533385515213013

BaB round 7
batch: 1155
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1061] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 556] [/input-8, 1900] [/input-8, 556] [/input-8, 867] [/input-8, 1061] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.28576236963272095
10 lb beta sum: 0.4819090962409973, worst -0.2838662564754486
Time: prepare 0.0483    bound 0.1844    transfer 0.0266    finalize 0.0185    func 0.2939    
Accumulated time: func 2.1788    prepare 0.2022    bound 1.8048    transfer 0.0837    finalize 0.0515    
all_split False
======================Cut inference begins======================
max lb tensor(0.14180605) min lb tensor(-0.28380993)
Number of Verified Splits: 67 of 2310
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.09401369094848633 
BICCOS Cumulative time: 0.7463829517364502
Preprocessing time: 0.08182144165039062 Inference time: 0.008926153182983398 Add cuts time: 0.001898050308227539 Cut analysis time: 0.0013680458068847656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.28381 (14), -0.28306 (14), -0.27841 (14), -0.27771 (14), -0.27723 (14), -0.27675 (14), -0.27649 (14), -0.27493 (14), -0.27439 (14), -0.27341 (14), -0.27147 (14), -0.27146 (14), -0.27131 (14), -0.27089 (14), -0.27008 (14), -0.26973 (14), -0.26958 (14), -0.26919 (14), -0.26902 (14), -0.26847 (14), 
Length of domains: 2243
Time: pickout 0.0443    decision 0.0741    set_bounds 0.2549    solve 0.2945    add 0.1178    
Accumulated time: pickout 0.2017    decision 0.8668    set_bounds 0.5140    solve 2.0009    add 1.6837    
Current (lb-rhs): -0.28380993008613586
4844 domains visited
Cumulative time: 6.4234678745269775

BaB round 8
batch: 2243
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-12, 55] [/input-8, 1460] [/input-12, 55] [/input-12, 55] [/input-8, 1900] [/input, 2472] [/input-8, 1900] [/input-8, 1900] [/input-12, 55] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2811031937599182
10 lb beta sum: 0.4766435921192169, worst -0.27934807538986206
Time: prepare 0.2547    bound 0.3060    transfer 0.0918    finalize 0.0376    func 0.7204    
Accumulated time: func 2.8992    prepare 0.4571    bound 2.1108    transfer 0.1755    finalize 0.0892    
all_split False
======================Cut inference begins======================
max lb tensor(0.12867972) min lb tensor(-0.27933559)
Number of Verified Splits: 218 of 4486
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 9
#cuts 4-6: 5
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.1907041072845459 
BICCOS Cumulative time: 0.9370870590209961
Preprocessing time: 0.1513972282409668 Inference time: 0.0341188907623291 Add cuts time: 0.003526926040649414 Cut analysis time: 0.001661062240600586
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27934 (15), -0.27861 (15), -0.27394 (15), -0.27326 (15), -0.27260 (15), -0.27209 (15), -0.27188 (15), -0.27044 (15), -0.26929 (15), -0.26829 (15), -0.26690 (15), -0.26679 (15), -0.26674 (15), -0.26637 (15), -0.26526 (15), -0.26520 (15), -0.26505 (15), -0.26467 (15), -0.26427 (15), -0.26399 (15), 
Length of domains: 4268
Time: pickout 0.0547    decision 0.1409    set_bounds 0.1944    solve 0.7219    add 0.1522    
Accumulated time: pickout 0.2564    decision 1.0077    set_bounds 0.7085    solve 2.7228    add 1.8359    
Current (lb-rhs): -0.2793355882167816
9112 domains visited
Cumulative time: 7.891512155532837

BaB round 9
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 100] [/input-8, 1900] [/input-8, 100] [/input-8, 100] [/input-8, 100] [/input-8, 867] [/input-8, 100] [/input, 2472] [/input-8, 100] [/input-8, 1900] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.27737945318222046
10 lb beta sum: 0.46219754219055176, worst -0.27558261156082153
Time: prepare 0.2002    bound 0.4999    transfer 0.0629    finalize 0.0594    func 0.8785    
Accumulated time: func 3.7777    prepare 0.6576    bound 2.6107    transfer 0.2384    finalize 0.1486    
all_split False
======================Cut inference begins======================
max lb tensor(0.14148295) min lb tensor(-0.27555400)
Number of Verified Splits: 755 of 8192
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 9
#cuts 4-6: 18
#cuts 7-9: 7
#cuts >= 20: 0
BICCOS time: 0.6203272342681885 
BICCOS Cumulative time: 1.5574142932891846
Preprocessing time: 0.27885985374450684 Inference time: 0.3201162815093994 Add cuts time: 0.018947839736938477 Cut analysis time: 0.00240325927734375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27555 (16), -0.27013 (16), -0.26918 (16), -0.26895 (16), -0.26874 (16), -0.26830 (16), -0.26639 (16), -0.26383 (16), -0.26358 (16), -0.26260 (16), -0.26237 (16), -0.26228 (16), -0.26213 (16), -0.26138 (16), -0.26098 (16), -0.26095 (16), -0.26086 (16), -0.26022 (16), -0.25992 (16), -0.25984 (16), 
Length of domains: 7609
Time: pickout 0.0801    decision 0.2382    set_bounds 0.5322    solve 0.8804    add 0.2446    
Accumulated time: pickout 0.3365    decision 1.2459    set_bounds 1.2407    solve 3.6033    add 2.0806    
Current (lb-rhs): -0.27555400133132935
16549 domains visited
current_vram/total_varm: 9.6GB/99.9GB, batch_size increase to 8192
Cumulative time: 10.518439531326294

BaB round 10
batch: 7609
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1892] [/input-8, 1892] [/input-8, 1900] [/input-8, 1884] [/input-8, 100] [/input-8, 100] [/input-8, 1892] [/input-12, 55] [/input-8, 1892] [/input-12, 55] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.274639368057251
10 lb beta sum: 0.45900487899780273, worst -0.272893488407135
Time: prepare 0.3844    bound 1.2204    transfer 0.1609    finalize 0.1148    func 1.9821    
Accumulated time: func 5.7598    prepare 1.0424    bound 3.8311    transfer 0.3993    finalize 0.2634    
all_split False
======================Cut inference begins======================
max lb tensor(0.26863980) min lb tensor(-0.27287942)
Number of Verified Splits: 2772 of 15218
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts: total 544 constraints, 29141 nonzero elements
cuts preparing time: 0.0128
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 595.
#cuts 1-3: 88
#cuts 4-6: 35
#cuts 7-9: 9
#cuts 10-12: 8
#cuts 13-15: 18
#cuts 16-18: 33
#cuts 19-21: 32
#cuts >= 20: 372
BICCOS time: 1.2864205837249756 
BICCOS Cumulative time: 2.84383487701416
Preprocessing time: 0.5115523338317871 Inference time: 0.47201037406921387 Add cuts time: 0.057502031326293945 Cut analysis time: 0.24535584449768066
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27288 (17), -0.26745 (17), -0.26600 (17), -0.26551 (17), -0.26528 (17), -0.26522 (17), -0.25989 (17), -0.25986 (17), -0.25980 (17), -0.25855 (17), -0.25839 (17), -0.25834 (17), -0.25821 (17), -0.25820 (17), -0.25793 (17), -0.25717 (17), -0.25624 (17), -0.25605 (17), -0.25531 (17), -0.25530 (17), 
Length of domains: 12446
Time: pickout 0.2353    decision 0.4297    set_bounds 0.9015    solve 2.2124    add 0.1866    
Accumulated time: pickout 0.5717    decision 1.6756    set_bounds 2.1422    solve 5.8157    add 2.2671    
Current (lb-rhs): -0.272879421710968
28995 domains visited
Cumulative time: 15.825753450393677

BaB round 11
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1900] [/input-8, 1900] [/input-8, 1884] [/input-12, 55] [/input-8, 1884] [/input-8, 1884] [/input-8, 100] [/input-8, 1900] [/input-8, 100] [/input-8, 100] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2643670439720154
10 lb beta sum: 4.621301651000977, worst -0.1850903034210205
Time: prepare 0.4022    bound 3.1462    transfer 0.1749    finalize 0.1368    func 3.9697    
Accumulated time: func 9.7295    prepare 1.4449    bound 6.9774    transfer 0.5742    finalize 0.4002    
all_split False
======================Cut inference begins======================
max lb tensor(0.77549440) min lb tensor(-0.17271554)
Number of Verified Splits: 10510 of 16384
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts: total 941 constraints, 44636 nonzero elements
cuts preparing time: 0.0185
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 964.
#cuts 1-3: 162
#cuts 4-6: 2
#cuts 7-9: 7
#cuts 10-12: 19
#cuts 13-15: 28
#cuts 16-18: 70
#cuts 19-21: 66
#cuts >= 20: 610
BICCOS time: 3.217294216156006 
BICCOS Cumulative time: 6.061129093170166
Preprocessing time: 0.5602195262908936 Inference time: 2.055103063583374 Add cuts time: 0.22303342819213867 Cut analysis time: 0.3789381980895996
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27288 (17), -0.26745 (17), -0.26600 (17), -0.26551 (17), -0.26522 (17), -0.25986 (17), -0.25980 (17), -0.25855 (17), -0.25834 (17), -0.25821 (17), -0.25820 (17), -0.25624 (17), -0.25605 (17), -0.25531 (17), -0.25501 (17), -0.25422 (17), -0.25380 (17), -0.25312 (17), -0.25292 (17), -0.25291 (17), 
Length of domains: 10128
Time: pickout 0.1394    decision 0.7458    set_bounds 1.0586    solve 3.9748    add 0.2423    
Accumulated time: pickout 0.7111    decision 2.4214    set_bounds 3.2008    solve 9.7905    add 2.5094    
Current (lb-rhs): -0.272879421710968
34869 domains visited
current_vram/total_varm: 26.1GB/99.9GB, batch_size increase to 16384
Cumulative time: 25.37039351463318

BaB round 12
batch: 10128
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2472] [/input-12, 55] [/input, 2472] [/input-12, 55] [/input-8, 1884] [/input, 2472] [/input-8, 1884] [/input-12, 55] [/input-8, 1884] [/input, 2472] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2710043787956238
10 lb beta sum: 4.145698070526123, worst -0.15495848655700684
Time: prepare 0.5127    bound 5.2372    transfer 0.2201    finalize 0.1771    func 6.2852    
Accumulated time: func 16.0147    prepare 1.9580    bound 12.2146    transfer 0.7943    finalize 0.5773    
all_split False
======================Cut inference begins======================
max lb tensor(3.08342862) min lb tensor(-0.13166630)
Number of Verified Splits: 20159 of 20256
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts: total 1169 constraints, 61477 nonzero elements
cuts preparing time: 0.4389
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1170.
#cuts 1-3: 173
#cuts 4-6: 1
#cuts 7-9: 10
#cuts 10-12: 18
#cuts 13-15: 58
#cuts 16-18: 104
#cuts 19-21: 74
#cuts >= 20: 732
BICCOS time: 5.477283477783203 
BICCOS Cumulative time: 11.53841257095337
Preprocessing time: 0.6985678672790527 Inference time: 3.5511882305145264 Add cuts time: 0.28885960578918457 Cut analysis time: 0.9386677742004395
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13167 (18), -0.13098 (18), -0.12669 (18), -0.12420 (18), -0.12418 (18), -0.12232 (18), -0.12147 (18), -0.12011 (18), -0.11778 (18), -0.11552 (18), -0.11547 (18), -0.11345 (18), -0.10962 (18), -0.10808 (18), -0.10699 (18), -0.10677 (18), -0.10605 (18), -0.09975 (18), -0.09817 (18), -0.09244 (18), 
Length of domains: 97
Time: pickout 0.3285    decision 0.8837    set_bounds 1.2945    solve 6.2908    add 0.0797    
Accumulated time: pickout 1.0396    decision 3.3050    set_bounds 4.4953    solve 16.0813    add 2.5892    
Current (lb-rhs): -0.13166630268096924
34966 domains visited
Cumulative time: 39.999427318573

BaB round 13
batch: 97
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-8, 1900] [/input-12, 37] [/input-8, 1900] [/input-12, 37] [/input-12, 37] [/input-8, 100] [/input-8, 1900] 
split level 1: [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-12, 37] [/input, 2473] [/input-12, 37] [/input, 2473] [/input, 2473] [/input-12, 37] [/input-12, 37] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24025577306747437

all verified at 5th iter
Time: prepare 0.0098    bound 0.0650    transfer 0.0030    finalize 0.0024    func 0.0828    
Accumulated time: func 16.0975    prepare 1.9680    bound 12.2796    transfer 0.7973    finalize 0.5797    
all_split False
======================Cut inference begins======================
max lb tensor(0.17223775) min lb tensor(0.02444097)
Number of Verified Splits: 388 of 388
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 0
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0017
Total number of valid cuts: 1170.
#cuts 1-3: 173
#cuts 4-6: 1
#cuts 7-9: 10
#cuts 10-12: 18
#cuts 13-15: 58
#cuts 16-18: 104
#cuts 19-21: 74
#cuts >= 20: 732
BICCOS time: 0.014125823974609375 
BICCOS Cumulative time: 11.552538394927979
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0168    decision 0.0220    set_bounds 0.0283    solve 0.0829    add 0.0001    
Accumulated time: pickout 1.0565    decision 3.3270    set_bounds 4.5236    solve 16.1642    add 2.5892    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
34966 domains visited
Cumulative time: 40.166248083114624

found process to kill: terminal indx = 0
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.cuts
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.indx
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=187_spec=0_26561106.log
found process to kill: terminal indx = 4
found process for pidx=0
kill process for pidx=0
found process for pidx=4
Result: safe in 50.1958 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 188, vnnlib ID: 188 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.91176009, -6.98036766, -2.84487700, -4.53986120, -3.38612461,
         -4.94995880, -5.20888853, -6.30824423, -4.65725613, -6.36737871]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [467]; unstable size 467; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 229, 1, 467] with unstable size 228 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 467] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 467] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [228]; unstable size 228; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 228] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 228] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.97516203,  1.98761368,  0.85461807, -0.25794774,  1.12561321,
          1.30599153,  2.30291843, -0.37233818,  1.60615540]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.91176009, -6.98036766, -2.84487700, -4.53986120, -3.38612461,
         -4.94995880, -5.20888853, -6.30824423, -4.65725613, -6.36737871]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.61056137, -6.99951649, -3.14468408, -4.72666311, -3.63954830,
          -5.14412069, -5.38729954, -6.49402142, -4.54477596, -6.45293331],
         [-2.61056137, -6.99951649, -3.14468408, -4.72666311, -3.63954830,
          -5.14412069, -5.38729954, -6.49402142, -4.54477596, -6.45293331]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.53412271,  0.49486423,  1.40009189]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0064 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0716 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 189, vnnlib ID: 189 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.48303747, -10.29648781,  -4.77946949,  -6.41142654,  -3.71523380,
          -6.92542839,  -5.50940371,  -7.37353468,  -9.88126087,  -9.47254848]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [427]; unstable size 427; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 239, 1, 427] with unstable size 238 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 427] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 427] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [238]; unstable size 238; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 238] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 238] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.48654842, 5.05170012, 0.07906568, 1.63433266, 2.04545832, 0.66316915,
         2.76845455, 4.94088602, 4.35907650]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0474 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 190, vnnlib ID: 190 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.12282085,  -8.68214226, -10.30647087, -10.71084213,  -9.83157253,
         -12.23327827, -10.64780331, -11.54215813,  -3.88245940,  -8.45811939]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [654]; unstable size 654; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 194, 1, 654] with unstable size 193 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 654] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 654] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [193]; unstable size 193; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 193] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 193] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.77125788, 3.34607601, 4.68589258, 5.31103945, 4.23434162, 6.53741407,
         5.22720814, 5.57846022, 3.04642534]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0382 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 191, vnnlib ID: 191 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.91402149, -10.96457195,  -4.60119486,  -3.07470465,  -3.85695314,
          -3.09889174,  -5.81089735,  -5.97126102,  -9.49198723, -10.05299187]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [611]; unstable size 611; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 278, 1, 611] with unstable size 277 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 611] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 611] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [277]; unstable size 277; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 277] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 277] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.15813017,  6.06970501,  0.46179676, -0.24430582, -0.42243236,
          1.52134800,  1.26745176,  4.78580809,  5.02399111]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.91402149, -10.96457195,  -4.60119486,  -3.07470465,  -3.85695314,
          -3.09889174,  -5.81089735,  -5.97126102,  -9.49198723, -10.05299187]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.08788586, -11.13685799,  -4.78870010,  -3.24930167,  -4.01143646,
           -3.02898836,  -6.24352598,  -5.82983685,  -9.75097561, -10.23292065],
         [ -9.08788586, -11.13685799,  -4.78870010,  -3.24930167,  -4.01143646,
           -3.02898836,  -6.24352598,  -5.82983685,  -9.75097561, -10.23292065]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.76213479, -0.22031331]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0056 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0690 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 192, vnnlib ID: 192 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.02367878, -16.68686485,  -9.24556446, -13.41522598, -11.11723232,
         -13.42477131, -11.50259304, -13.30918312, -17.15509415, -16.44651794]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [639]; unstable size 639; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 297, 1, 639] with unstable size 296 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 639] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 639] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [296]; unstable size 296; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 296] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 296] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.69086027, 5.29207230, 2.62997913, 0.65836829, 2.47528172, 0.66326332,
         2.12296391, 6.32425070, 5.31157494]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0581 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 193, vnnlib ID: 193 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.20210648,  -8.82046795, -12.04976559, -10.42980194, -10.17031384,
         -10.70486259, -10.72393131,  -9.02217484, -12.87825584,  -7.13908768]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [635]; unstable size 635; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 211, 1, 635] with unstable size 210 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 635] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 635] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [210]; unstable size 210; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 210] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 210] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.61224723, 0.46522066, 2.92189837, 1.71166420, 1.48281193, 1.75262117,
         1.73563433, 0.26523256, 4.10882807]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0687 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 194, vnnlib ID: 194 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.03137493, -14.28631020,  -6.88360214, -10.38493061,  -7.40738487,
         -10.63051796,  -9.41903210, -11.08277416, -12.21933270, -13.69361401]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [568]; unstable size 568; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 232, 1, 568] with unstable size 231 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 568] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 568] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [231]; unstable size 231; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 231] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 231] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.97100043,  5.75294256,  2.62268925, -0.44995359,  2.71119261,
          1.17250800,  2.60135579,  3.52469110,  4.91072798]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.03137493, -14.28631020,  -6.88360214, -10.38493061,  -7.40738487,
         -10.63051796,  -9.41903210, -11.08277416, -12.21933270, -13.69361401]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.10791874, -14.32527637,  -7.05044937, -10.30265522,  -7.05021572,
          -10.51771545,  -9.26245594, -10.66561699, -12.28997326, -13.75412750]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00023365]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0067 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0717 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 195, vnnlib ID: 195 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.98067474, -6.32652664, -2.95507026, -3.61686778, -3.40175915,
         -3.97366190, -4.56966162, -4.09664774, -7.20802689, -7.00610399]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [544]; unstable size 544; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 205, 1, 544] with unstable size 204 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 544] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 544] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [204]; unstable size 204; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 204] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 204] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.09186602,  1.89036942,  0.01000285, -0.14229494,  0.23984742,
          0.71584260,  0.47055006,  3.11726546,  2.74282837]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.98067474, -6.32652664, -2.95507026, -3.61686778, -3.40175915,
         -3.97366190, -4.56966162, -4.09664774, -7.20802689, -7.00610399]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.19it/s]100%|██████████| 1/1 [00:00<00:00,  9.18it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.00214386, -6.22956085, -3.06510234, -3.62754107, -3.13923168,
          -3.98658037, -4.44688559, -4.01200485, -7.31333065, -6.86353111]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.07412934]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1115 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 11.5406494140625
alpha/beta optimization time: 1.2101054191589355
initial alpha-crown bounds: tensor([[ 2.13471913,  1.94881058,  0.04223776, -0.12571079,  0.27321053,
          0.80250466,  0.49562049,  3.17971659,  2.78953981]], device='cuda:0')
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.12571078538894653
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6451 seconds.
lower bounds for all target labels: [2.134719133377075, 1.9488105773925781, 0.042237281799316406, -0.12571078538894653, 0.2732105255126953, 0.8025046586990356, 0.4956204891204834, 3.1797142028808594, 2.7895398139953613]
Number of cpus: 96  Number of subproblems: 1
Reassign each subproblems with number of thread: 96
Starting MIP solver for these labels: [3]
start creating model mps for candidates: ['lay/16_3']
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 247037 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.51879000663757
Verifying property 0 with 1 instances.
##### Instance 195 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.1797165870666504.

Properties batch 1, size 1
Remaining timeout: 198.29076194763184
Verifying property 1 with 1 instances.
##### Instance 195 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.7895398139953613.

Properties batch 2, size 1
Remaining timeout: 198.1434166431427
Verifying property 2 with 1 instances.
##### Instance 195 first 10 spec matrices: 
tensor([[[-1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.134719133377075.

Properties batch 3, size 1
Remaining timeout: 197.99552869796753
Verifying property 3 with 1 instances.
##### Instance 195 first 10 spec matrices: 
tensor([[[ 0., -1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.9488105773925781.

Properties batch 4, size 1
Remaining timeout: 197.84310793876648
Verifying property 4 with 1 instances.
##### Instance 195 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.8025046586990356.

Properties batch 5, size 1
Remaining timeout: 197.68874597549438
Verifying property 5 with 1 instances.
##### Instance 195 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.4956204891204834.

Properties batch 6, size 1
Remaining timeout: 197.54362964630127
Verifying property 6 with 1 instances.
##### Instance 195 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.2732105255126953.

Properties batch 7, size 1
Remaining timeout: 197.39904618263245
Verifying property 7 with 1 instances.
##### Instance 195 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.04223775863647461.

Properties batch 8, size 1
Remaining timeout: 197.24874901771545
Verifying property 8 with 1 instances.
##### Instance 195 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.12571079]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.98067474, -6.32652664, -2.95507026, -3.61686778, -3.40175915,
        -3.97366190, -4.56966162, -4.09664774, -7.20802689, -7.00610399],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.12571079]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 544
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 200
Node /15 input 0: size torch.Size([100]) unstable 13
-----------------
# of unstable neurons: 757
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0006177425384521484
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0003    bound 0.0553    transfer 0.0001    finalize 0.0002    func 0.0559    
Accumulated time: func 0.0559    prepare 0.0003    bound 0.0553    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 35] 
split level 1: [/input-12, 58] 
split level 2: [/input-12, 33] 
split level 3: [/input-12, 40] 
split level 4: [/input-8, 179] 
split level 5: [/input-8, 2044] 
split level 6: [/input, 1448] 
split level 7: [/input-8, 1028] 
split level 8: [/input-8, 296] 
split level 9: [/input-8, 2016] 
split level 10: [/input, 1689] 
split level 11: [/input-8, 493] 
split level 12: [/input, 1688] 
split level 13: [/input, 454] 
split level 14: [/input, 1705] 
split level 15: [/input, 2121] 
split level 16: [/input-8, 2042] 
split level 17: [/input, 2105] 
split level 18: [/input-8, 1733] 
split level 19: [/input, 453] 
split level 20: [/input, 298] 
split level 21: [/input, 1321] 
split level 22: [/input, 1305] 
split level 23: [/input-8, 259] 
split level 24: [/input, 3524] 
split level 25: [/input-8, 138] 
split level 26: [/input, 2244] 
split level 27: [/input-8, 2036] 
split level 28: [/input, 362] 
split level 29: [/input-8, 494] 
split level 30: [/input, 2485] 
split level 31: [/input-8, 469] 
split level 32: [/input-8, 787] 
split level 33: [/input-8, 598] 
split level 34: [/input, 3555] 
split level 35: [/input, 1703] 
split level 36: [/input-8, 1053] 
split level 37: [/input-8, 501] 
split level 38: [/input-8, 597] 
split level 39: [/input, 2155] 
split level 40: [/input, 1337] 
split level 41: [/input-8, 477] 
split level 42: [/input, 2578] 
split level 43: [/input, 3237] 
split level 44: [/input-8, 140] 
split level 45: [/input-8, 439] 
split level 46: [/input-8, 452] 
split level 47: [/input-8, 423] 
split level 48: [/input, 77] 
split level 49: [/input-8, 2045] 
split level 50: [/input, 2215] 
split level 51: [/input-8, 2031] 
split level 52: [/input, 312] 
split level 53: [/input-8, 2035] 
split level 54: [/input, 435] 
split level 55: [/input-8, 921] 
split level 56: [/input-8, 2034] 
split level 57: [/input, 2137] 
split level 58: [/input-8, 473] 
split level 59: [/input-8, 2037] 
split level 60: [/input-8, 980] 
split level 61: [/input, 469] 
split level 62: [/input, 3401] 
split level 63: [/input, 2453] 
split level 64: [/input, 3385] 
split level 65: [/input-8, 925] 
split level 66: [/input-8, 1947] 
split level 67: [/input, 3239] 
split level 68: [/input, 2625] 
split level 69: [/input-8, 872] 
split level 70: [/input-8, 500] 
split level 71: [/input-8, 431] 
split level 72: [/input, 2211] 
split level 73: [/input, 3163] 
split level 74: [/input-8, 2023] 
split level 75: [/input-8, 1970] 
split level 76: [/input-8, 2025] 
split level 77: [/input-8, 1977] 
split level 78: [/input, 3222] 
split level 79: [/input, 282] 
split level 80: [/input, 438] 
split level 81: [/input, 2580] 
split level 82: [/input, 2214] 
split level 83: [/input, 2195] 
split level 84: [/input, 214] 
split level 85: [/input-8, 924] 
split level 86: [/input-8, 478] 
split level 87: [/input, 2473] 
split level 88: [/input-8, 429] 
split level 89: [/input, 3560] 
split level 90: [/input, 213] 
split level 91: [/input, 379] 
split level 92: [/input, 378] 
split level 93: [/input-8, 486] 
split level 94: [/input-8, 794] 
split level 95: [/input, 1720] 
split level 96: [/input, 4037] 
split level 97: [/input, 2610] 
split level 98: [/input, 296] 
split level 99: [/input, 3954] 
split level 100: [/input, 3211] 
split level 101: [/input, 193] 
split level 102: [/input-8, 1925] 
split level 103: [/input-8, 124] 
split level 104: [/input, 2189] 
split level 105: [/input-8, 590] 
split level 106: [/input-8, 2032] 
split level 107: [/input, 179] 
split level 108: [/input, 401] 
split level 109: [/input, 2153] 
split level 110: [/input, 2261] 
split level 111: [/input, 3511] 
split level 112: [/input, 197] 
split level 113: [/input-8, 1994] 
split level 114: [/input, 3220] 
split level 115: [/input, 1355] 
split level 116: [/input-8, 454] 
split level 117: [/input, 1371] 
split level 118: [/input, 2474] 
split level 119: [/input, 2082] 
split level 120: [/input, 2212] 
split level 121: [/input-8, 392] 
split level 122: [/input, 3876] 
split level 123: [/input, 2196] 
split level 124: [/input-8, 398] 
split level 125: [/input, 4038] 
split level 126: [/input-8, 1452] 
split level 127: [/input-8, 1990] 
split level 128: [/input, 1339] 
split level 129: [/input, 4020] 
split level 130: [/input, 102] 
split level 131: [/input, 2089] 
split level 132: [/input, 3801] 
split level 133: [/input, 103] 
split level 134: [/input, 3414] 
split level 135: [/input, 1323] 
split level 136: [/input, 199] 
split level 137: [/input-8, 2046] 
split level 138: [/input, 2182] 
split level 139: [/input, 3196] 
split level 140: [/input-8, 1390] 
split level 141: [/input, 98] 
split level 142: [/input, 3180] 
split level 143: [/input, 2190] 
split level 144: [/input, 68] 
split level 145: [/input, 129] 
split level 146: [/input, 3145] 
split level 147: [/input-8, 449] 
split level 148: [/input-8, 397] 
split level 149: [/input, 196] 
split level 150: [/input, 3161] 
split level 151: [/input-8, 1610] 
split level 152: [/input, 472] 
split level 153: [/input, 1381] 
split level 154: [/input, 3111] 
split level 155: [/input-8, 1989] 
split level 156: [/input, 3226] 
split level 157: [/input, 2075] 
split level 158: [/input-8, 1979] 
split level 159: [/input, 3750] 
split level 160: [/input, 3800] 
split level 161: [/input, 3114] 
split level 162: [/input, 1913] 
split level 163: [/input, 3755] 
split level 164: [/input, 3112] 
split level 165: [/input-8, 1124] 
split level 166: [/input, 111] 
split level 167: [/input, 3047] 
split level 168: [/input, 3081] 
split level 169: [/input, 3429] 
split level 170: [/input, 1576] 
split level 171: [/input, 1592] 
split level 172: [/input, 2280] 
split level 173: [/input-8, 412] 
split level 174: [/input, 3785] 
split level 175: [/input, 2341] 
split level 176: [/input-8, 395] 
split level 177: [/input, 2059] 
split level 178: [/input, 3048] 
split level 179: [/input, 3173] 
split level 180: [/input, 58] 
split level 181: [/input-8, 2022] 
split level 182: [/input, 2081] 
split level 183: [/input, 89] 
split level 184: [/input, 265] 
split level 185: [/input-8, 1993] 
split level 186: [/input-8, 2006] 
split level 187: [/input, 3452] 
split level 188: [/input, 2052] 
split level 189: [/input, 3967] 
split level 190: [/input, 3337] 
split level 191: [/input, 1865] 
split level 192: [/input, 72] 
split level 193: [/input, 3019] 
split level 194: [/input, 3098] 
split level 195: [/input, 464] 
split level 196: [/input, 2314] 
split level 197: [/input, 3300] 
split level 198: [/input, 156] 
split level 199: [/input, 2352] 
Time: prepare 0.0062    bound 0.0990    transfer 0.0093    finalize 0.0043    func 0.1189    
Accumulated time: func 0.1747    prepare 0.0167    bound 0.1543    transfer 0.0094    finalize 0.0044    
all_split False
======================Cut inference begins======================
max lb tensor(0.02029982) min lb tensor(-0.12570584)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.014336109161376953 
BICCOS Cumulative time: 0.014336109161376953
Preprocessing time: 0.012894630432128906 Inference time: 0.00018739700317382812 Add cuts time: 7.987022399902344e-05 Cut analysis time: 0.0011742115020751953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12097 (1), -0.12093 (1), -0.12088 (1), -0.12062 (1), -0.12043 (1), -0.12023 (1), -0.12020 (1), -0.12016 (1), -0.12013 (1), -0.12004 (1), -0.11998 (1), -0.11968 (1), -0.11949 (1), -0.11942 (1), -0.11908 (1), -0.11905 (1), -0.11889 (1), -0.11885 (1), -0.11871 (1), -0.11833 (1), 
Length of domains: 50
Time: pickout 0.0005    decision 0.5287    set_bounds 0.0171    solve 0.1189    add 0.1642    
Accumulated time: pickout 0.0005    decision 0.5287    set_bounds 0.0171    solve 0.1189    add 0.1642    
Current (lb-rhs): -0.12096649408340454
50 domains visited
Cumulative time: 0.9171187877655029

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 33] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 2: [/input-12, 40] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 3: [/input-8, 1028] [/input-12, 40] [/input-8, 1028] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-8, 1028] [/input-12, 40] [/input-12, 40] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11640125513076782
10 lb beta sum: 0.5046904683113098, worst -0.07249653339385986
Time: prepare 0.0077    bound 0.1201    transfer 0.0013    finalize 0.0029    func 0.1347    
Accumulated time: func 0.3094    prepare 0.0246    bound 0.2744    transfer 0.0107    finalize 0.0073    
all_split False
======================Cut inference begins======================
max lb tensor(0.35508266) min lb tensor(-0.07244697)
Number of Verified Splits: 148 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.02411484718322754 
BICCOS Cumulative time: 0.03845095634460449
Preprocessing time: 0.013402462005615234 Inference time: 0.007863283157348633 Add cuts time: 0.0021295547485351562 Cut analysis time: 0.0007195472717285156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04611 (2), -0.04594 (2), -0.04589 (2), -0.04583 (2), -0.04565 (2), -0.04563 (2), -0.04553 (2), -0.04538 (2), -0.04533 (2), -0.04530 (2), -0.04508 (2), -0.04506 (2), -0.04490 (2), -0.04478 (2), -0.04464 (2), -0.04457 (2), -0.04430 (2), -0.04422 (2), -0.04382 (2), -0.04372 (2), 
Length of domains: 50
Time: pickout 0.0023    decision 0.0205    set_bounds 0.0136    solve 0.1348    add 0.2224    
Accumulated time: pickout 0.0027    decision 0.5491    set_bounds 0.0307    solve 0.2538    add 0.3866    
Current (lb-rhs): -0.0461064875125885
100 domains visited
Cumulative time: 1.3417725563049316

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 2: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 3: [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8372934460639954, worst -0.046106547117233276
10 lb beta sum: 0.8372934460639954, worst -0.047419577836990356
Time: prepare 0.0177    bound 0.1209    transfer 0.0016    finalize 0.0028    func 0.1458    
Accumulated time: func 0.4552    prepare 0.0428    bound 0.3953    transfer 0.0123    finalize 0.0101    
all_split False
======================Cut inference begins======================
max lb tensor(0.45988387) min lb tensor(-0.04575309)
Number of Verified Splits: 150 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.025707483291625977 
BICCOS Cumulative time: 0.06415843963623047
Preprocessing time: 0.013551950454711914 Inference time: 0.008583545684814453 Add cuts time: 0.002966642379760742 Cut analysis time: 0.0006053447723388672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03638 (3), -0.03631 (3), -0.03631 (3), -0.03631 (3), -0.03621 (3), -0.03610 (3), -0.03594 (3), -0.03586 (3), -0.03584 (3), -0.03558 (3), -0.03548 (3), -0.03497 (3), -0.03484 (3), -0.03451 (3), -0.03433 (3), -0.03400 (3), -0.03395 (3), -0.03395 (3), -0.03395 (3), -0.03394 (3), 
Length of domains: 50
Time: pickout 0.0080    decision 0.0209    set_bounds 0.0157    solve 0.1460    add 0.3143    
Accumulated time: pickout 0.0107    decision 0.5700    set_bounds 0.0464    solve 0.3997    add 0.7009    
Current (lb-rhs): -0.03638371825218201
150 domains visited
Cumulative time: 1.8805811405181885

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 33] 
split level 2: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-8, 2044] 
split level 3: [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 1028] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8374285101890564, worst -0.036383479833602905
10 lb beta sum: 0.8374285101890564, worst -0.03714776039123535
Time: prepare 0.0183    bound 0.1388    transfer 0.0012    finalize 0.0027    func 0.1638    
Accumulated time: func 0.6191    prepare 0.0614    bound 0.5341    transfer 0.0135    finalize 0.0129    
all_split False
======================Cut inference begins======================
max lb tensor(0.46492666) min lb tensor(-0.03628877)
Number of Verified Splits: 135 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0018
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.024933576583862305 
BICCOS Cumulative time: 0.08909201622009277
Preprocessing time: 0.013130426406860352 Inference time: 0.006717681884765625 Add cuts time: 0.003041505813598633 Cut analysis time: 0.0020439624786376953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02526 (4), -0.02526 (4), -0.02526 (4), -0.02518 (4), -0.02518 (4), -0.02517 (4), -0.02515 (4), -0.02513 (4), -0.02513 (4), -0.02513 (4), -0.02510 (4), -0.02507 (4), -0.02507 (4), -0.02507 (4), -0.02507 (4), -0.02484 (4), -0.02419 (4), -0.02417 (4), -0.02401 (4), -0.02389 (4), 
Length of domains: 50
Time: pickout 0.0122    decision 0.0201    set_bounds 0.0185    solve 0.1640    add 0.2282    
Accumulated time: pickout 0.0229    decision 0.5902    set_bounds 0.0649    solve 0.5637    add 0.9291    
Current (lb-rhs): -0.025262176990509033
200 domains visited
Cumulative time: 2.3557348251342773

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 2: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 3: [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input, 89] [/input-8, 2042] [/input-8, 2042] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8371495604515076, worst -0.02526247501373291
10 lb beta sum: 0.8371495604515076, worst -0.02708214521408081
Time: prepare 0.0177    bound 0.1206    transfer 0.0013    finalize 0.0027    func 0.1450    
Accumulated time: func 0.7640    prepare 0.0794    bound 0.6547    transfer 0.0148    finalize 0.0155    
all_split False
======================Cut inference begins======================
max lb tensor(0.47146755) min lb tensor(-0.02526218)
Number of Verified Splits: 126 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.024174213409423828 
BICCOS Cumulative time: 0.1132662296295166
Preprocessing time: 0.01275777816772461 Inference time: 0.007283449172973633 Add cuts time: 0.0029125213623046875 Cut analysis time: 0.0012204647064208984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01816 (5), -0.01809 (5), -0.01804 (5), -0.01794 (5), -0.01793 (5), -0.01775 (5), -0.01727 (5), -0.01727 (5), -0.01727 (5), -0.01721 (5), -0.01718 (5), -0.01717 (5), -0.01717 (5), -0.01717 (5), -0.01707 (5), -0.01707 (5), -0.01707 (5), -0.01705 (5), -0.01704 (5), -0.01704 (5), 
Length of domains: 50
Time: pickout 0.0079    decision 0.0199    set_bounds 0.0162    solve 0.1451    add 0.2418    
Accumulated time: pickout 0.0308    decision 0.6101    set_bounds 0.0811    solve 0.7088    add 1.1709    
Current (lb-rhs): -0.018160760402679443
250 domains visited
Cumulative time: 2.817695140838623

Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, -1.0, -1.0], [0, 0, 0], [3.300311006533645e+32, 0.006891654338687658, 0.0073787434957921505], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([-1., -1.]), tensor([0, 0]), tensor([3.30037909e+32, 1.42561024e-04]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, -1.0, -1.0], [0, 0, 0], [3.300311006533645e+32, 0.006891654338687658, 0.0073787434957921505], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([-1.,  1.]), tensor([0, 0]), tensor([3.30037909e+32, 4.87520754e-01]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 179, 1028, 2044]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([3.30031101e+32, 6.89165434e-03, 3.33611830e-03]), tensor([0, 2, 3])), '/input-12': ([40], [-1.0], [0], [3.300379093235806e+32], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028], [-1.0, 1.0], [0, 0], [3.300311006533645e+32, 0.0033492909278720617], [0, 2]), '/input-12': (tensor([40, 35]), tensor([-1., -1.]), tensor([0, 0]), tensor([3.30037909e+32, 1.11745430e-04]), tensor([1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028], [-1.0, 1.0], [0, 0], [3.300311006533645e+32, 0.0033492909278720617], [0, 2]), '/input-12': (tensor([40, 35]), tensor([-1.,  1.]), tensor([0, 0]), tensor([3.30037909e+32, 4.88952041e-01]), tensor([1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, -1.0, -1.0], [0, 0, 0], [3.300311006533645e+32, 0.006830738391727209, 0.0068610175512731075], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([ 1., -1.]), tensor([0, 0]), tensor([0.07179324, 0.00014164]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, -1.0, -1.0], [0, 0, 0], [3.300311006533645e+32, 0.006830738391727209, 0.0068610175512731075], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([1., 1.]), tensor([0, 0]), tensor([0.07179324, 0.48854059]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, -1.0, 1.0], [0, 0, 0], [3.300311006533645e+32, 0.006830738391727209, 0.0034113393630832434], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([ 1., -1.]), tensor([0, 0]), tensor([7.17932433e-02, 9.67250598e-05]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, -1.0, 1.0], [0, 0, 0], [3.300311006533645e+32, 0.006830738391727209, 0.0034113393630832434], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([1., 1.]), tensor([0, 0]), tensor([0.07179324, 0.48902696]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, 1.0, -1.0], [0, 0, 0], [3.300311006533645e+32, 0.003497646888718009, 0.006743715610355139], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([ 1., -1.]), tensor([0, 0]), tensor([0.07179324, 0.00011878]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, 1.0, -1.0], [0, 0, 0], [3.300311006533645e+32, 0.003497646888718009, 0.006743715610355139], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([1., 1.]), tensor([0, 0]), tensor([0.07179324, 0.48902029]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, 1.0, 1.0], [0, 0, 0], [3.300311006533645e+32, 0.003497646888718009, 0.003373609622940421], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([ 1., -1.]), tensor([0, 0]), tensor([7.17932433e-02, 9.69038738e-05]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, 1.0, 1.0], [0, 0, 0], [3.300311006533645e+32, 0.003497646888718009, 0.003373609622940421], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([1., 1.]), tensor([0, 0]), tensor([0.07179324, 0.48931146]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([179]), tensor([1.]), tensor([0]), tensor([3.30031101e+32]), tensor([0])), '/input-12': ([], [], [], [], [])}
Shallow branching resets to n domains:  14
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12408536672592163
10 lb beta sum: 0.2709706723690033, worst -0.07098644971847534
Time: prepare 0.0006    bound 0.1195    transfer 0.0005    finalize 0.0003    func 0.1211    
Accumulated time: func 0.8851    prepare 0.0800    bound 0.7742    transfer 0.0153    finalize 0.0158    
After pruning, left:  8

Back to Regular BaB

BaB round 1
batch: 8
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 35] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 35] 
split level 1: [/input-12, 33] [/input-12, 58] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 58] 
split level 2: [/input-8, 2042] [/input-12, 33] [/input-8, 2044] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-12, 33] 
split level 3: [/input, 214] [/input-8, 2042] [/input-8, 2042] [/input, 214] [/input, 214] [/input, 214] [/input, 214] [/input-12, 40] 
split level 4: [/input, 1719] [/input, 214] [/input, 214] [/input, 472] [/input, 472] [/input, 472] [/input, 472] [/input-8, 1028] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5458790063858032, worst -0.05446040630340576
10 lb beta sum: 0.5458790063858032, worst -0.054385244846343994
Time: prepare 0.0125    bound 0.1168    transfer 0.0047    finalize 0.0018    func 0.1381    
Accumulated time: func 1.0232    prepare 0.0928    bound 0.8910    transfer 0.0200    finalize 0.0177    
all_split False
======================Cut inference begins======================
max lb tensor(0.77316463) min lb tensor(-0.05435237)
Number of Verified Splits: 200 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.5575078725814819, worst -0.07884092628955841
10 lb beta sum: 0.6193010807037354, worst -0.05438527464866638
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.26387619972229004 
BICCOS Cumulative time: 0.37714242935180664
Preprocessing time: 0.007760286331176758 Inference time: 0.24974536895751953 Add cuts time: 0.0051500797271728516 Cut analysis time: 0.0012204647064208984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05435 (5), -0.05104 (5), -0.04724 (5), -0.04414 (5), -0.02477 (5), -0.02362 (5), -0.02168 (5), -0.02119 (5), -0.02104 (5), -0.02078 (5), -0.02006 (5), -0.01976 (5), -0.01824 (5), -0.01808 (5), -0.01803 (5), -0.01722 (5), -0.01708 (5), -0.01670 (5), -0.01645 (5), -0.01530 (5), 
Length of domains: 56
Time: pickout 0.0009    decision 0.0175    set_bounds 0.0302    solve 0.1382    add 0.0644    
Accumulated time: pickout 0.0317    decision 0.6276    set_bounds 0.1113    solve 0.8470    add 1.2353    
Current (lb-rhs): -0.054352372884750366
306 domains visited
Cumulative time: 3.6024889945983887

BaB round 2
batch: 56
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1053] [/input-8, 1053] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 1053] [/input-8, 2044] [/input-8, 1053] [/input-8, 1053] 
split level 1: [/input-8, 787] [/input-8, 787] [/input, 1719] [/input, 1719] [/input, 1719] [/input, 1719] [/input, 1719] [/input-8, 2042] [/input-8, 787] [/input, 1719] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5043472051620483, worst -0.049695223569869995
10 lb beta sum: 0.5043472051620483, worst -0.049659788608551025
Time: prepare 0.0111    bound 0.1171    transfer 0.0021    finalize 0.0018    func 0.1336    
Accumulated time: func 1.1568    prepare 0.1041    bound 1.0081    transfer 0.0221    finalize 0.0195    
all_split False
======================Cut inference begins======================
max lb tensor(0.00667597) min lb tensor(-0.04963925)
Number of Verified Splits: 30 of 224
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 5
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.01240849494934082 
BICCOS Cumulative time: 0.38955092430114746
Preprocessing time: 0.006984233856201172 Inference time: 0.003186941146850586 Add cuts time: 0.0004582405090332031 Cut analysis time: 0.0017790794372558594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04964 (7), -0.04834 (7), -0.04628 (7), -0.04499 (7), -0.04252 (7), -0.04184 (7), -0.04101 (7), -0.04066 (7), -0.03936 (7), -0.03844 (7), -0.03780 (7), -0.03727 (7), -0.03573 (7), -0.03444 (7), -0.03258 (7), -0.03121 (7), -0.02071 (7), -0.01991 (7), -0.01967 (7), -0.01888 (7), 
Length of domains: 194
Time: pickout 0.0064    decision 0.0139    set_bounds 0.0160    solve 0.1337    add 0.0796    
Accumulated time: pickout 0.0382    decision 0.6415    set_bounds 0.1273    solve 0.9807    add 1.3149    
Current (lb-rhs): -0.0496392548084259
500 domains visited
Cumulative time: 3.871934413909912

BaB round 3
batch: 194
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 213] [/input, 4038] [/input-8, 787] [/input-8, 1053] [/input, 213] [/input-8, 787] [/input, 213] [/input-8, 787] [/input, 213] [/input, 213] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.047182708978652954
10 lb beta sum: 0.00039600522723048925, worst -0.04714304208755493
Time: prepare 0.0105    bound 0.1490    transfer 0.0024    finalize 0.3343    func 0.4988    
Accumulated time: func 1.6556    prepare 0.1148    bound 1.1570    transfer 0.0245    finalize 0.3538    
all_split False
======================Cut inference begins======================
max lb tensor(0.00653177) min lb tensor(-0.04711601)
Number of Verified Splits: 99 of 388
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 3
#cuts 4-6: 12
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.02688741683959961 
BICCOS Cumulative time: 0.41643834114074707
Preprocessing time: 0.012306928634643555 Inference time: 0.010397672653198242 Add cuts time: 0.0024330615997314453 Cut analysis time: 0.0017497539520263672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04712 (8), -0.04638 (8), -0.04582 (8), -0.04510 (8), -0.04369 (8), -0.04295 (8), -0.04240 (8), -0.04167 (8), -0.04079 (8), -0.03926 (8), -0.03921 (8), -0.03854 (8), -0.03807 (8), -0.03755 (8), -0.03743 (8), -0.03735 (8), -0.03589 (8), -0.03580 (8), -0.03579 (8), -0.03505 (8), 
Length of domains: 289
Time: pickout 0.0169    decision 0.0226    set_bounds 0.0173    solve 0.4989    add 0.0818    
Accumulated time: pickout 0.0551    decision 0.6641    set_bounds 0.1445    solve 1.4796    add 1.3967    
Current (lb-rhs): -0.04711601138114929
789 domains visited
Cumulative time: 4.5441882610321045

BaB round 4
batch: 289
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 213] [/input, 213] [/input, 1689] [/input, 213] [/input, 1703] [/input, 213] [/input-8, 1053] [/input-8, 1053] [/input, 213] [/input, 213] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04685834050178528
10 lb beta sum: 0.00045938300900161266, worst -0.04684063792228699
Time: prepare 0.0141    bound 0.1560    transfer 0.0087    finalize 0.0036    func 0.1862    
Accumulated time: func 1.8418    prepare 0.1291    bound 1.3130    transfer 0.0332    finalize 0.3575    
all_split False
======================Cut inference begins======================
max lb tensor(0.00622630) min lb tensor(-0.04683119)
Number of Verified Splits: 206 of 578
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 5
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.044762611389160156 
BICCOS Cumulative time: 0.4612009525299072
Preprocessing time: 0.01725172996520996 Inference time: 0.022936105728149414 Add cuts time: 0.002994060516357422 Cut analysis time: 0.0015807151794433594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04683 (9), -0.04609 (9), -0.04553 (9), -0.04479 (9), -0.04336 (9), -0.04261 (9), -0.04207 (9), -0.04133 (9), -0.04074 (9), -0.03954 (9), -0.03944 (9), -0.03898 (9), -0.03823 (9), -0.03822 (9), -0.03807 (9), -0.03779 (9), -0.03750 (9), -0.03728 (9), -0.03720 (9), -0.03706 (9), 
Length of domains: 372
Time: pickout 0.0179    decision 0.0278    set_bounds 0.0249    solve 0.1863    add 0.1114    
Accumulated time: pickout 0.0730    decision 0.6919    set_bounds 0.1695    solve 1.6659    add 1.5080    
Current (lb-rhs): -0.04683119058609009
1161 domains visited
Cumulative time: 4.965614557266235

BaB round 5
batch: 372
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1703] [/input, 1703] [/input, 362] [/input, 1703] [/input, 1703] [/input-8, 477] [/input, 1703] [/input-8, 1053] [/input, 1703] [/input, 362] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04504501819610596
10 lb beta sum: 0.04214674234390259, worst -0.0450269877910614
Time: prepare 0.0185    bound 0.1606    transfer 0.0133    finalize 0.0048    func 0.2024    
Accumulated time: func 2.0442    prepare 0.1478    bound 1.4736    transfer 0.0465    finalize 0.3622    
all_split False
======================Cut inference begins======================
max lb tensor(0.00669026) min lb tensor(-0.04501697)
Number of Verified Splits: 279 of 744
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 5
#cuts 4-6: 11
#cuts >= 20: 0
BICCOS time: 0.060324668884277344 
BICCOS Cumulative time: 0.5215256214141846
Preprocessing time: 0.02376103401184082 Inference time: 0.03145408630371094 Add cuts time: 0.003386259078979492 Cut analysis time: 0.0017232894897460938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04502 (10), -0.04405 (10), -0.04371 (10), -0.04276 (10), -0.04161 (10), -0.04072 (10), -0.04055 (10), -0.04031 (10), -0.04025 (10), -0.04025 (10), -0.03926 (10), -0.03892 (10), -0.03845 (10), -0.03780 (10), -0.03760 (10), -0.03742 (10), -0.03723 (10), -0.03716 (10), -0.03660 (10), -0.03642 (10), 
Length of domains: 465
Time: pickout 0.0631    decision 0.0327    set_bounds 0.0319    solve 0.2027    add 0.0916    
Accumulated time: pickout 0.1361    decision 0.7245    set_bounds 0.2014    solve 1.8686    add 1.5996    
Current (lb-rhs): -0.045016974210739136
1626 domains visited
Cumulative time: 5.4572227001190186

BaB round 6
batch: 465
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1689] [/input-8, 787] [/input, 1689] [/input, 362] [/input-8, 787] [/input, 1689] [/input-8, 477] [/input, 438] [/input, 213] [/input, 1689] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04253184795379639
10 lb beta sum: 0.027069997042417526, worst -0.04249754548072815
Time: prepare 0.0247    bound 0.1612    transfer 0.0145    finalize 0.0057    func 0.2122    
Accumulated time: func 2.2564    prepare 0.1728    bound 1.6348    transfer 0.0610    finalize 0.3679    
all_split False
======================Cut inference begins======================
max lb tensor(0.00565243) min lb tensor(-0.04248857)
Number of Verified Splits: 318 of 930
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 5
#cuts 4-6: 12
#cuts >= 20: 0
BICCOS time: 0.07270574569702148 
BICCOS Cumulative time: 0.594231367111206
Preprocessing time: 0.030285358428955078 Inference time: 0.03683066368103027 Add cuts time: 0.003968477249145508 Cut analysis time: 0.001621246337890625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04249 (11), -0.04223 (11), -0.04200 (11), -0.04118 (11), -0.04093 (11), -0.04071 (11), -0.03991 (11), -0.03902 (11), -0.03893 (11), -0.03852 (11), -0.03848 (11), -0.03839 (11), -0.03792 (11), -0.03772 (11), -0.03763 (11), -0.03745 (11), -0.03720 (11), -0.03708 (11), -0.03663 (11), -0.03660 (11), 
Length of domains: 612
Time: pickout 0.0190    decision 0.0377    set_bounds 0.0445    solve 0.2124    add 0.1238    
Accumulated time: pickout 0.1551    decision 0.7623    set_bounds 0.2459    solve 2.0810    add 1.7234    
Current (lb-rhs): -0.04248857498168945
2238 domains visited
Cumulative time: 5.976747989654541

BaB round 7
batch: 612
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 438] [/input-8, 469] [/input, 438] [/input, 362] [/input, 438] [/input-8, 2034] [/input, 438] [/input-8, 469] [/input, 438] [/input-8, 494] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04108482599258423
10 lb beta sum: 0.015552773140370846, worst -0.041073352098464966
Time: prepare 0.0304    bound 0.1712    transfer 0.0213    finalize 0.0080    func 0.2389    
Accumulated time: func 2.4952    prepare 0.2034    bound 1.8060    transfer 0.0823    finalize 0.3759    
all_split False
======================Cut inference begins======================
max lb tensor(0.00575787) min lb tensor(-0.04106990)
Number of Verified Splits: 383 of 1224
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 7
#cuts 4-6: 11
#cuts >= 20: 0
BICCOS time: 0.09102797508239746 
BICCOS Cumulative time: 0.6852593421936035
Preprocessing time: 0.040200233459472656 Inference time: 0.0449526309967041 Add cuts time: 0.004305839538574219 Cut analysis time: 0.0015692710876464844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04107 (12), -0.04059 (12), -0.03976 (12), -0.03970 (12), -0.03944 (12), -0.03929 (12), -0.03920 (12), -0.03892 (12), -0.03840 (12), -0.03814 (12), -0.03791 (12), -0.03779 (12), -0.03762 (12), -0.03746 (12), -0.03721 (12), -0.03716 (12), -0.03689 (12), -0.03656 (12), -0.03649 (12), -0.03633 (12), 
Length of domains: 841
Time: pickout 0.0711    decision 0.0446    set_bounds 0.0539    solve 0.2392    add 0.1135    
Accumulated time: pickout 0.2262    decision 0.8068    set_bounds 0.2998    solve 2.3202    add 1.8369    
Current (lb-rhs): -0.04106989502906799
3079 domains visited
Cumulative time: 6.600101947784424

BaB round 8
batch: 841
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2034] [/input, 1703] [/input-8, 2034] [/input, 1703] [/input-8, 2034] [/input-8, 494] [/input-8, 2034] [/input, 1703] [/input-8, 2034] [/input-8, 494] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.039524078369140625
10 lb beta sum: 0.0069249277003109455, worst -0.03952088952064514
Time: prepare 0.0418    bound 0.1958    transfer 0.0231    finalize 0.0106    func 0.2823    
Accumulated time: func 2.7775    prepare 0.2454    bound 2.0018    transfer 0.1054    finalize 0.3865    
all_split False
======================Cut inference begins======================
max lb tensor(0.00658868) min lb tensor(-0.03951851)
Number of Verified Splits: 367 of 1682
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 8
#cuts 4-6: 10
#cuts >= 20: 0
BICCOS time: 0.10729193687438965 
BICCOS Cumulative time: 0.7925512790679932
Preprocessing time: 0.05574750900268555 Inference time: 0.04579496383666992 Add cuts time: 0.004004240036010742 Cut analysis time: 0.0017452239990234375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03952 (13), -0.03903 (13), -0.03821 (13), -0.03806 (13), -0.03785 (13), -0.03773 (13), -0.03757 (13), -0.03747 (13), -0.03731 (13), -0.03699 (13), -0.03677 (13), -0.03676 (13), -0.03656 (13), -0.03628 (13), -0.03627 (13), -0.03624 (13), -0.03615 (13), -0.03602 (13), -0.03593 (13), -0.03590 (13), 
Length of domains: 1315
Time: pickout 0.0679    decision 0.0572    set_bounds 0.0736    solve 0.2827    add 0.1060    
Accumulated time: pickout 0.2941    decision 0.8640    set_bounds 0.3734    solve 2.6029    add 1.9430    
Current (lb-rhs): -0.039518505334854126
4394 domains visited
Cumulative time: 7.3060479164123535

BaB round 9
batch: 1315
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 494] [/input-8, 494] [/input-8, 494] [/input-8, 2016] [/input-8, 494] [/input-8, 494] [/input, 438] [/input-8, 2034] [/input, 1703] [/input-8, 494] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0055283308029174805, worst -0.23966388404369354
10 lb beta sum: 0.0030852307099848986, worst -0.03829827904701233
Time: prepare 0.1279    bound 0.2676    transfer 0.0403    finalize 0.0164    func 0.4702    
Accumulated time: func 3.2477    prepare 0.3736    bound 2.2694    transfer 0.1457    finalize 0.4029    
all_split False
======================Cut inference begins======================
max lb tensor(0.00654451) min lb tensor(-0.03829667)
Number of Verified Splits: 364 of 2630
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 12
#cuts 7-9: 1
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.13958096504211426 
BICCOS Cumulative time: 0.9321322441101074
Preprocessing time: 0.08770561218261719 Inference time: 0.04602408409118652 Add cuts time: 0.0038535594940185547 Cut analysis time: 0.001997709274291992
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03830 (14), -0.03781 (14), -0.03698 (14), -0.03683 (14), -0.03662 (14), -0.03651 (14), -0.03648 (14), -0.03635 (14), -0.03624 (14), -0.03608 (14), -0.03599 (14), -0.03577 (14), -0.03551 (14), -0.03532 (14), -0.03519 (14), -0.03519 (14), -0.03517 (14), -0.03506 (14), -0.03492 (14), -0.03479 (14), 
Length of domains: 2266
Time: pickout 0.0416    decision 0.0871    set_bounds 0.2769    solve 0.4708    add 0.1095    
Accumulated time: pickout 0.3357    decision 0.9512    set_bounds 0.6503    solve 3.0737    add 2.0525    
Current (lb-rhs): -0.038296669721603394
6660 domains visited
Cumulative time: 8.443216562271118

BaB round 10
batch: 2266
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 597] [/input-8, 501] [/input-8, 597] [/input-8, 2016] [/input-8, 494] [/input-8, 2016] [/input-8, 494] [/input-8, 494] [/input-8, 494] [/input-8, 494] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.037301331758499146
10 lb beta sum: 0.00030210637487471104, worst -0.03730252385139465
Time: prepare 0.1258    bound 0.4134    transfer 0.0736    finalize 0.0300    func 0.6733    
Accumulated time: func 3.9210    prepare 0.4997    bound 2.6828    transfer 0.2193    finalize 0.4329    
all_split False
======================Cut inference begins======================
max lb tensor(0.00584487) min lb tensor(-0.03729957)
Number of Verified Splits: 301 of 4532
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 12
#cuts 4-6: 4
#cuts 7-9: 3
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.36376070976257324 
BICCOS Cumulative time: 1.2958929538726807
Preprocessing time: 0.3154458999633789 Inference time: 0.0414886474609375 Add cuts time: 0.0048601627349853516 Cut analysis time: 0.0019659996032714844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03730 (15), -0.03681 (15), -0.03598 (15), -0.03582 (15), -0.03562 (15), -0.03551 (15), -0.03534 (15), -0.03527 (15), -0.03524 (15), -0.03508 (15), -0.03477 (15), -0.03476 (15), -0.03450 (15), -0.03433 (15), -0.03415 (15), -0.03404 (15), -0.03397 (15), -0.03396 (15), -0.03392 (15), -0.03381 (15), 
Length of domains: 4231
Time: pickout 0.0488    decision 0.1360    set_bounds 0.1997    solve 0.6747    add 0.1668    
Accumulated time: pickout 0.3845    decision 1.0872    set_bounds 0.8500    solve 3.7484    add 2.2193    
Current (lb-rhs): -0.03729957342147827
10891 domains visited
Cumulative time: 10.0498788356781

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2016] [/input-8, 473] [/input-8, 2016] [/input-8, 2035] [/input-8, 473] [/input-8, 2035] [/input-8, 2016] [/input, 3385] [/input-8, 2016] [/input, 3385] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03534671664237976
10 lb beta sum: 0.0005624411860480905, worst -0.035346537828445435
Time: prepare 0.2231    bound 0.6771    transfer 0.0936    finalize 0.0502    func 1.0982    
Accumulated time: func 5.0193    prepare 0.7230    bound 3.3599    transfer 0.3129    finalize 0.4831    
all_split False
======================Cut inference begins======================
max lb tensor(0.00527529) min lb tensor(-0.03534311)
Number of Verified Splits: 383 of 8192
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0011
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 4
#cuts 7-9: 20
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.3558681011199951 
BICCOS Cumulative time: 1.6517610549926758
Preprocessing time: 0.2747030258178711 Inference time: 0.07104325294494629 Add cuts time: 0.0072095394134521484 Cut analysis time: 0.002912282943725586
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03534 (16), -0.03489 (16), -0.03486 (16), -0.03470 (16), -0.03443 (16), -0.03427 (16), -0.03422 (16), -0.03386 (16), -0.03376 (16), -0.03367 (16), -0.03355 (16), -0.03340 (16), -0.03339 (16), -0.03331 (15), -0.03328 (16), -0.03324 (16), -0.03322 (16), -0.03311 (16), -0.03311 (16), -0.03303 (16), 
Length of domains: 7944
Time: pickout 0.0828    decision 0.2372    set_bounds 0.3683    solve 1.2919    add 0.2347    
Accumulated time: pickout 0.4673    decision 1.3243    set_bounds 1.2183    solve 5.0404    add 2.4540    
Current (lb-rhs): -0.03534311056137085
18700 domains visited
current_vram/total_varm: 9.9GB/99.9GB, batch_size increase to 8192
Cumulative time: 12.644492387771606

BaB round 12
batch: 7944
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2035] [/input, 435] [/input-8, 473] [/input-8, 2034] [/input, 3385] [/input-8, 2034] [/input-8, 494] [/input, 1703] [/input-8, 473] [/input, 1703] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.034237951040267944
10 lb beta sum: 0.002391389338299632, worst -0.03423917293548584
Time: prepare 0.4364    bound 1.2502    transfer 0.1288    finalize 0.1095    func 2.2688    
Accumulated time: func 7.2881    prepare 1.1597    bound 4.6101    transfer 0.4417    finalize 0.5926    
all_split False
======================Cut inference begins======================
max lb tensor(0.00630504) min lb tensor(-0.03423622)
Number of Verified Splits: 917 of 15888
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.cuts: total 518 constraints, 29980 nonzero elements
cuts preparing time: 0.0135
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 581.
#cuts 1-3: 112
#cuts 4-6: 5
#cuts 7-9: 48
#cuts 10-12: 13
#cuts 13-15: 16
#cuts 16-18: 23
#cuts 19-21: 38
#cuts >= 20: 326
BICCOS time: 0.9942452907562256 
BICCOS Cumulative time: 2.6460063457489014
Preprocessing time: 0.5407919883728027 Inference time: 0.1626429557800293 Add cuts time: 0.03281426429748535 Cut analysis time: 0.2579960823059082
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03424 (17), -0.03379 (17), -0.03376 (17), -0.03361 (17), -0.03313 (17), -0.03295 (17), -0.03275 (17), -0.03256 (17), -0.03248 (17), -0.03232 (17), -0.03232 (17), -0.03231 (16), -0.03230 (17), -0.03227 (17), -0.03220 (17), -0.03217 (17), -0.03215 (17), -0.03213 (17), -0.03212 (17), -0.03207 (17), 
Length of domains: 14971
Time: pickout 0.2762    decision 0.4563    set_bounds 0.9323    solve 2.2718    add 0.2261    
Accumulated time: pickout 0.7435    decision 1.7806    set_bounds 2.1506    solve 7.3122    add 2.6801    
Current (lb-rhs): -0.03423622250556946
33671 domains visited
Cumulative time: 17.841477632522583

BaB round 13
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 473] [/input-8, 2016] [/input, 1703] [/input-8, 2045] [/input-8, 2035] [/input-8, 477] [/input-8, 2035] [/input, 435] [/input, 1703] [/input, 435] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03312861919403076
10 lb beta sum: 2.848210334777832, worst -0.016850590705871582
Time: prepare 0.4614    bound 3.1109    transfer 0.1667    finalize 0.4296    func 4.2789    
Accumulated time: func 11.5670    prepare 1.6215    bound 7.7210    transfer 0.6083    finalize 1.0222    
all_split False
======================Cut inference begins======================
max lb tensor(0.02807966) min lb tensor(1.78813934e-06)
Number of Verified Splits: 16384 of 16384
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.cuts: total 937 constraints, 57326 nonzero elements
cuts preparing time: 0.0583
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1000.
#cuts 1-3: 236
#cuts 4-6: 5
#cuts 7-9: 51
#cuts 10-12: 20
#cuts 13-15: 25
#cuts 16-18: 55
#cuts 19-21: 52
#cuts >= 20: 556
BICCOS time: 1.0764927864074707 
BICCOS Cumulative time: 3.722499132156372
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03295 (17), -0.03248 (17), -0.03232 (17), -0.03220 (17), -0.03181 (17), -0.03173 (17), -0.03168 (17), -0.03145 (17), -0.03117 (17), -0.03100 (17), -0.03095 (17), -0.03084 (17), -0.03071 (17), -0.03062 (17), -0.03057 (17), -0.03054 (17), -0.03043 (17), -0.03038 (17), -0.03032 (17), -0.03027 (17), 
Length of domains: 6779
Time: pickout 0.1451    decision 0.7179    set_bounds 0.7661    solve 4.2828    add 0.0051    
Accumulated time: pickout 0.8886    decision 2.4985    set_bounds 2.9168    solve 11.5950    add 2.6851    
Current (lb-rhs): -0.03294581174850464
33671 domains visited
current_vram/total_varm: 26.8GB/99.9GB, batch_size increase to 16384
Cumulative time: 25.00530457496643

BaB round 14
batch: 6779
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3385] [/input-8, 2034] [/input-8, 478] [/input-8, 2034] [/input, 3385] [/input, 435] [/input-8, 597] [/input, 435] [/input-8, 2035] [/input, 435] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03155067563056946
10 lb beta sum: 3.95896315574646, worst -0.04595315456390381
Time: prepare 0.3976    bound 3.5921    transfer 0.1532    finalize 0.3454    func 4.5789    
Accumulated time: func 16.1460    prepare 2.0194    bound 11.3131    transfer 0.7616    finalize 1.3676    
all_split False
======================Cut inference begins======================
max lb tensor(0.03445037) min lb tensor(1.04308128e-06)
Number of Verified Splits: 13558 of 13558
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 3
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.cuts: total 1019 constraints, 65707 nonzero elements
cuts preparing time: 0.3237
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1082.
#cuts 1-3: 259
#cuts 4-6: 5
#cuts 7-9: 54
#cuts 10-12: 20
#cuts 13-15: 28
#cuts 16-18: 67
#cuts 19-21: 56
#cuts >= 20: 593
BICCOS time: 1.329568862915039 
BICCOS Cumulative time: 5.052067995071411
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.1238    decision 0.6051    set_bounds 0.6310    solve 4.5826    add 0.0002    
Accumulated time: pickout 1.0125    decision 3.1037    set_bounds 3.5477    solve 16.1775    add 2.6853    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
33671 domains visited
Cumulative time: 32.40908598899841

found process to kill: terminal indx = 3
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.cuts
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.indx
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=195_spec=3_26566174.log
found process for pidx=3
kill process for pidx=3
Result: safe in 35.6113 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 196, vnnlib ID: 196 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.34187508, -9.73769855, -4.95557117, -4.07531166, -5.10799456,
         -4.86587954, -4.00358391, -5.81644583, -6.91936016, -7.77230597]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [641]; unstable size 641; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 325, 1, 641] with unstable size 324 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 641] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 641] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [324]; unstable size 324; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 324] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 324] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.40970683,  2.98208618, -0.34637225, -0.05800223,  0.34521288,
         -1.21884394,  0.55216175,  0.57143253,  1.41924047]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.34187508, -9.73769855, -4.95557117, -4.07531166, -5.10799456,
         -4.86587954, -4.00358391, -5.81644583, -6.91936016, -7.77230597]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.34187365, -9.73769760, -4.95557117, -4.07531118, -5.10799408,
          -4.86587954, -4.00358343, -5.81644535, -6.91935921, -7.77230597],
         [-7.34187365, -9.73769760, -4.95557117, -4.07531118, -5.10799408,
          -4.86587954, -4.00358343, -5.81644535, -6.91935921, -7.77230597]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.88025999,  1.03268290, -0.07172775]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]],


         [[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]],


         [[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0653 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 197, vnnlib ID: 197 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.18270683, -12.47354031,  -6.10897255, -10.00190735,  -9.06741428,
         -10.42314816, -10.68535328, -12.50943470,  -6.97327232, -13.13700008]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [464]; unstable size 464; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 147, 1, 464] with unstable size 146 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 464] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 464] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [146]; unstable size 146; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 146] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 146] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.42323971, 0.28036869, 3.85285234, 3.13763332, 4.20778561, 4.47631264,
         6.43918324, 0.91171378, 6.93784523]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0651 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 198, vnnlib ID: 198 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.51362133, -15.75713921, -11.03450871, -11.39007473, -12.12888622,
         -11.76603127, -13.25793362, -13.95927143, -13.38565063, -14.89714527]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [766]; unstable size 766; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 174, 1, 766] with unstable size 173 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 766] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 766] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [173]; unstable size 173; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 173] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 173] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.95912075, -0.24805665, -0.27043349,  0.63014281, -0.09771138,
          1.73836136,  2.00863838,  1.75885797,  3.03999782]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.51362133, -15.75713921, -11.03450871, -11.39007473, -12.12888622,
         -11.76603127, -13.25793362, -13.95927143, -13.38565063, -14.89714527]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.90it/s]100%|██████████| 1/1 [00:00<00:00,  8.89it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.10934734, -16.42941475, -11.24772644, -11.71026421, -12.44376945,
          -12.07837105, -13.57277298, -14.31617546, -13.90072727, -15.47377300],
         [-11.10934734, -16.42941475, -11.24772644, -11.71026421, -12.44376945,
          -12.07837105, -13.57277298, -14.31617546, -13.90072727, -15.47377300]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.13837910, 0.60091686, 0.96902370]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1154 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.115751266479492
alpha/beta optimization time: 1.2114410400390625
initial alpha-crown bounds: tensor([[ 4.07125139, -0.22706413, -0.22163141,  0.67958462, -0.04805171,
          1.79753423,  2.07503724,  1.87824082,  3.11084962]], device='cuda:0')
Number of class (without rhs): 3 ; Worst class: (+ rhs) -0.2270641326904297
preset mip_multi_proc as default setting: 96
Set parameter TSPort to value 50039
Set parameter TokenServer to value "license.itc.rwth-aachen.de"
mip_multi_proc: 96, mip_threads: 1, total threads used: 96
mip solver model built in 0.6450 seconds.
lower bounds for all target labels: [4.071252346038818, -0.2270660400390625, -0.22163176536560059, 0.6795848608016968, -0.04805201292037964, 1.7975343465805054, 2.075037956237793, 1.8782416582107544, 3.1108458042144775]
Number of cpus: 96  Number of subproblems: 3
Reassign each subproblems with number of thread: 32
Starting MIP solver for these labels: [1, 2, 4]
start creating model mps for candidates: ['lay/16_1', 'lay/16_2', 'lay/16_4']
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.mps
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=2_26569751.mps
parallel save mip model to /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=4_26569751.mps
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=2_26569751.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 247653 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/lp_mip_solver.py:1229: ResourceWarning: unclosed file <_io.TextIOWrapper name='/tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=4_26569751.log' mode='w' encoding='ANSI_X3.4-1968'>
  proc, logfile = run_get_cuts_subprocess(model_filename_stamped)
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 247656 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
/rwthfs/rz/cluster/home/cb809562/miniconda3/envs/alpha-beta-crown-gurobi/lib/python3.11/subprocess.py:1127: ResourceWarning: subprocess 247657 is still running
  _warn("subprocess %s is still running" % self.pid,
ResourceWarning: Enable tracemalloc to get the object allocation traceback
parallel mps save finish
Cut inquiry processes are launched.
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.51654624938965
Verifying property 0 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 4.071251392364502.

Properties batch 1, size 1
Remaining timeout: 198.32798099517822
Verifying property 1 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 3.110849618911743.

Properties batch 2, size 1
Remaining timeout: 198.20791482925415
Verifying property 2 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 2.0750372409820557.

Properties batch 3, size 1
Remaining timeout: 198.090824842453
Verifying property 3 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.8782408237457275.

Properties batch 4, size 1
Remaining timeout: 197.97419357299805
Verifying property 4 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 1.7975342273712158.

Properties batch 5, size 1
Remaining timeout: 197.85526609420776
Verifying property 5 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Initial alpha-CROWN verified for spec index tensor([0], device='cuda:0') with bound 0.6795846223831177.

Properties batch 6, size 1
Remaining timeout: 197.72994089126587
Verifying property 6 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04805171]], device='cuda:0') need to verify.
Model prediction is: tensor([-10.51362133, -15.75713921, -11.03450871, -11.39007473, -12.12888622,
        -11.76603127, -13.25793362, -13.95927143, -13.38565063, -14.89714527],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04805171]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 766
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 172
Node /15 input 0: size torch.Size([100]) unstable 14
-----------------
# of unstable neurons: 952
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0007679462432861328
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0549    transfer 0.0001    finalize 0.0002    func 0.0554    
Accumulated time: func 0.0554    prepare 0.0002    bound 0.0549    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 26] 
split level 1: [/input-12, 41] 
split level 2: [/input-12, 25] 
split level 3: [/input-12, 78] 
split level 4: [/input-12, 45] 
split level 5: [/input-8, 413] 
split level 6: [/input-8, 648] 
split level 7: [/input-8, 1366] 
split level 8: [/input-8, 1394] 
split level 9: [/input-8, 1396] 
split level 10: [/input-8, 1393] 
split level 11: [/input-8, 1404] 
split level 12: [/input-8, 1356] 
split level 13: [/input-8, 1321] 
split level 14: [/input-8, 1628] 
split level 15: [/input-8, 1369] 
split level 16: [/input-8, 1357] 
split level 17: [/input-8, 656] 
split level 18: [/input-8, 1395] 
split level 19: [/input-8, 1134] 
split level 20: [/input-8, 641] 
split level 21: [/input-8, 1370] 
split level 22: [/input-8, 664] 
split level 23: [/input-8, 1405] 
split level 24: [/input-8, 1333] 
split level 25: [/input, 1667] 
split level 26: [/input-8, 1354] 
split level 27: [/input, 1671] 
split level 28: [/input-8, 412] 
split level 29: [/input-8, 422] 
split level 30: [/input-8, 1347] 
split level 31: [/input-8, 1325] 
split level 32: [/input-8, 672] 
split level 33: [/input-8, 414] 
split level 34: [/input-8, 1353] 
split level 35: [/input-8, 1403] 
split level 36: [/input, 3494] 
split level 37: [/input-8, 1402] 
split level 38: [/input, 2181] 
split level 39: [/input, 1668] 
split level 40: [/input-8, 1345] 
split level 41: [/input-8, 1362] 
split level 42: [/input-8, 402] 
split level 43: [/input-8, 680] 
split level 44: [/input-8, 419] 
split level 45: [/input-8, 1361] 
split level 46: [/input-8, 1599] 
split level 47: [/input-8, 803] 
split level 48: [/input, 1684] 
split level 49: [/input-8, 1619] 
split level 50: [/input, 3524] 
split level 51: [/input, 3428] 
split level 52: [/input-8, 1437] 
split level 53: [/input, 1396] 
split level 54: [/input, 3507] 
split level 55: [/input-8, 1832] 
split level 56: [/input-8, 861] 
split level 57: [/input, 2358] 
split level 58: [/input-8, 1346] 
split level 59: [/input-8, 1618] 
split level 60: [/input, 2180] 
split level 61: [/input-8, 1342] 
split level 62: [/input-8, 1441] 
split level 63: [/input, 1444] 
split level 64: [/input, 3345] 
split level 65: [/input, 3330] 
split level 66: [/input, 3470] 
split level 67: [/input, 1432] 
split level 68: [/input, 1641] 
split level 69: [/input, 33] 
split level 70: [/input, 1652] 
split level 71: [/input-8, 1863] 
split level 72: [/input, 2228] 
split level 73: [/input, 460] 
split level 74: [/input-8, 1434] 
split level 75: [/input, 2101] 
split level 76: [/input, 3089] 
split level 77: [/input, 1431] 
split level 78: [/input, 2227] 
split level 79: [/input, 1415] 
split level 80: [/input, 3443] 
split level 81: [/input, 2966] 
split level 82: [/input-8, 286] 
split level 83: [/input, 3346] 
split level 84: [/input, 1434] 
split level 85: [/input, 2486] 
split level 86: [/input, 327] 
split level 87: [/input, 408] 
split level 88: [/input, 2330] 
split level 89: [/input, 429] 
split level 90: [/input, 279] 
split level 91: [/input, 3523] 
split level 92: [/input, 312] 
split level 93: [/input, 3240] 
split level 94: [/input, 3385] 
split level 95: [/input, 3522] 
split level 96: [/input, 3509] 
split level 97: [/input, 328] 
split level 98: [/input, 3397] 
split level 99: [/input, 1574] 
split level 100: [/input, 2341] 
split level 101: [/input, 2499] 
split level 102: [/input, 2529] 
split level 103: [/input, 1429] 
split level 104: [/input, 2965] 
split level 105: [/input, 2334] 
split level 106: [/input, 3450] 
split level 107: [/input-8, 1625] 
split level 108: [/input, 3427] 
split level 109: [/input, 3490] 
split level 110: [/input, 3556] 
split level 111: [/input, 65] 
split level 112: [/input-8, 1341] 
split level 113: [/input, 3441] 
split level 114: [/input, 2321] 
split level 115: [/input, 1448] 
split level 116: [/input, 2970] 
split level 117: [/input, 3409] 
split level 118: [/input, 2331] 
split level 119: [/input, 49] 
split level 120: [/input, 3381] 
split level 121: [/input, 3331] 
split level 122: [/input, 2322] 
split level 123: [/input, 17] 
split level 124: [/input, 2326] 
split level 125: [/input, 3254] 
split level 126: [/input, 1460] 
split level 127: [/input-8, 447] 
split level 128: [/input, 3361] 
split level 129: [/input, 1458] 
split level 130: [/input, 2357] 
split level 131: [/input, 3457] 
split level 132: [/input, 2332] 
split level 133: [/input, 3404] 
split level 134: [/input-8, 1079] 
split level 135: [/input, 2324] 
split level 136: [/input, 3526] 
split level 137: [/input, 3099] 
split level 138: [/input, 2501] 
split level 139: [/input, 2325] 
split level 140: [/input, 2183] 
split level 141: [/input, 2584] 
split level 142: [/input, 3332] 
split level 143: [/input, 2204] 
split level 144: [/input, 3540] 
split level 145: [/input, 3142] 
split level 146: [/input, 1475] 
split level 147: [/input, 3334] 
split level 148: [/input, 2498] 
split level 149: [/input, 3554] 
split level 150: [/input, 3411] 
split level 151: [/input, 2323] 
split level 152: [/input, 1297] 
split level 153: [/input, 445] 
split level 154: [/input, 3362] 
split level 155: [/input, 2482] 
split level 156: [/input, 3521] 
split level 157: [/input, 3425] 
split level 158: [/input, 3426] 
split level 159: [/input-8, 1610] 
split level 160: [/input, 3473] 
split level 161: [/input, 280] 
split level 162: [/input, 18] 
split level 163: [/input, 2333] 
split level 164: [/input, 3442] 
split level 165: [/input, 3894] 
split level 166: [/input, 3266] 
split level 167: [/input, 2172] 
split level 168: [/input, 3538] 
split level 169: [/input, 3395] 
split level 170: [/input, 34] 
split level 171: [/input, 2372] 
split level 172: [/input, 4038] 
split level 173: [/input, 1578] 
split level 174: [/input, 3143] 
split level 175: [/input, 3348] 
split level 176: [/input, 1674] 
split level 177: [/input, 3378] 
split level 178: [/input, 3876] 
split level 179: [/input, 2337] 
split level 180: [/input, 3377] 
split level 181: [/input, 3250] 
split level 182: [/input, 2513] 
split level 183: [/input, 3336] 
split level 184: [/input, 3910] 
split level 185: [/input-8, 1609] 
split level 186: [/input, 3086] 
split level 187: [/input, 3410] 
split level 188: [/input, 1298] 
split level 189: [/input, 2419] 
split level 190: [/input, 3539] 
split level 191: [/input, 1582] 
split level 192: [/input, 3349] 
split level 193: [/input, 3347] 
split level 194: [/input, 3380] 
split level 195: [/input, 3335] 
split level 196: [/input, 3555] 
split level 197: [/input, 3379] 
split level 198: [/input, 1313] 
split level 199: [/input, 1393] 
Time: prepare 0.0059    bound 0.0987    transfer 0.0156    finalize 0.0047    func 0.1250    
Accumulated time: func 0.1804    prepare 0.0161    bound 0.1536    transfer 0.0157    finalize 0.0049    
all_split False
======================Cut inference begins======================
max lb tensor(0.13099194) min lb tensor(-0.04780823)
Number of Verified Splits: 8 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.013778924942016602 
BICCOS Cumulative time: 0.013778924942016602
Preprocessing time: 0.012176990509033203 Inference time: 0.0004029273986816406 Add cuts time: 0.00014901161193847656 Cut analysis time: 0.0010499954223632812
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5189    set_bounds 0.0118    solve 0.1251    add 0.0107    
Accumulated time: pickout 0.0004    decision 0.5189    set_bounds 0.0118    solve 0.1251    add 0.0107    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26]), tensor([-1.]), tensor([0]), tensor([4.39558945e-11]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26]), tensor([1.]), tensor([0]), tensor([4.39558945e-11]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.09600508213043213

all verified at 0th iter
Time: prepare 0.0003    bound 0.0046    transfer 0.0001    finalize 0.0001    func 0.0052    
Accumulated time: func 0.1856    prepare 0.0164    bound 0.1582    transfer 0.0158    finalize 0.0050    
After pruning, left:  0

Back to Regular BaB


Properties batch 7, size 1
Remaining timeout: 196.76109862327576
Verifying property 7 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.22163141]], device='cuda:0') need to verify.
Model prediction is: tensor([-10.51362133, -15.75713921, -11.03450871, -11.39007473, -12.12888622,
        -11.76603127, -13.25793362, -13.95927143, -13.38565063, -14.89714527],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.22163141]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 766
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 172
Node /15 input 0: size torch.Size([100]) unstable 14
-----------------
# of unstable neurons: 952
-----------------

======================Cut verification begins======================
Fetch cut process: mps for current label is not ready yet
Cut time: 0.0001983642578125
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0509    transfer 0.0001    finalize 0.0001    func 0.0513    
Accumulated time: func 0.0513    prepare 0.0002    bound 0.0509    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 78] 
split level 1: [/input-12, 26] 
split level 2: [/input-12, 41] 
split level 3: [/input-12, 25] 
split level 4: [/input-12, 45] 
split level 5: [/input-8, 1628] 
split level 6: [/input-8, 1366] 
split level 7: [/input-8, 413] 
split level 8: [/input-8, 1394] 
split level 9: [/input-8, 1357] 
split level 10: [/input-8, 1404] 
split level 11: [/input-8, 1321] 
split level 12: [/input-8, 1396] 
split level 13: [/input-8, 1393] 
split level 14: [/input-8, 648] 
split level 15: [/input-8, 1356] 
split level 16: [/input-8, 1134] 
split level 17: [/input-8, 1370] 
split level 18: [/input-8, 1619] 
split level 19: [/input-8, 1405] 
split level 20: [/input-8, 1369] 
split level 21: [/input-8, 1395] 
split level 22: [/input, 1667] 
split level 23: [/input-8, 402] 
split level 24: [/input, 1671] 
split level 25: [/input-8, 414] 
split level 26: [/input-8, 1333] 
split level 27: [/input-8, 1325] 
split level 28: [/input-8, 422] 
split level 29: [/input-8, 641] 
split level 30: [/input-8, 1347] 
split level 31: [/input-8, 1618] 
split level 32: [/input-8, 412] 
split level 33: [/input-8, 1402] 
split level 34: [/input-8, 1621] 
split level 35: [/input-8, 1345] 
split level 36: [/input-8, 664] 
split level 37: [/input, 1668] 
split level 38: [/input-8, 1403] 
split level 39: [/input-8, 656] 
split level 40: [/input, 2181] 
split level 41: [/input-8, 672] 
split level 42: [/input-8, 1354] 
split level 43: [/input, 3494] 
split level 44: [/input-8, 286] 
split level 45: [/input, 1396] 
split level 46: [/input, 3428] 
split level 47: [/input-8, 1353] 
split level 48: [/input-8, 996] 
split level 49: [/input, 1684] 
split level 50: [/input-8, 1362] 
split level 51: [/input-8, 1599] 
split level 52: [/input-8, 1437] 
split level 53: [/input-8, 1346] 
split level 54: [/input, 2163] 
split level 55: [/input-8, 287] 
split level 56: [/input-8, 1441] 
split level 57: [/input-8, 1342] 
split level 58: [/input, 3470] 
split level 59: [/input, 460] 
split level 60: [/input, 3524] 
split level 61: [/input-8, 861] 
split level 62: [/input, 2966] 
split level 63: [/input, 1641] 
split level 64: [/input, 2180] 
split level 65: [/input-8, 680] 
split level 66: [/input, 1444] 
split level 67: [/input, 408] 
split level 68: [/input-8, 1832] 
split level 69: [/input, 1652] 
split level 70: [/input, 3427] 
split level 71: [/input, 327] 
split level 72: [/input, 3443] 
split level 73: [/input, 3507] 
split level 74: [/input-8, 419] 
split level 75: [/input, 328] 
split level 76: [/input, 3240] 
split level 77: [/input, 2228] 
split level 78: [/input, 279] 
split level 79: [/input, 312] 
split level 80: [/input, 2101] 
split level 81: [/input, 1434] 
split level 82: [/input, 2358] 
split level 83: [/input-8, 1625] 
split level 84: [/input, 429] 
split level 85: [/input, 3522] 
split level 86: [/input, 3345] 
split level 87: [/input-8, 1001] 
split level 88: [/input, 2227] 
split level 89: [/input, 445] 
split level 90: [/input, 2529] 
split level 91: [/input, 3089] 
split level 92: [/input-8, 1341] 
split level 93: [/input, 1431] 
split level 94: [/input-8, 1434] 
split level 95: [/input-8, 1006] 
split level 96: [/input-8, 1361] 
split level 97: [/input-8, 1609] 
split level 98: [/input, 1415] 
split level 99: [/input, 3450] 
split level 100: [/input, 1448] 
split level 101: [/input, 3346] 
split level 102: [/input, 3457] 
split level 103: [/input, 33] 
split level 104: [/input, 2334] 
split level 105: [/input, 2486] 
split level 106: [/input, 3441] 
split level 107: [/input-8, 1877] 
split level 108: [/input, 1429] 
split level 109: [/input, 2322] 
split level 110: [/input-8, 1863] 
split level 111: [/input-8, 1610] 
split level 112: [/input, 1574] 
split level 113: [/input, 3556] 
split level 114: [/input, 1432] 
split level 115: [/input, 2965] 
split level 116: [/input, 2183] 
split level 117: [/input, 2499] 
split level 118: [/input, 3523] 
split level 119: [/input, 2341] 
split level 120: [/input-8, 1500] 
split level 121: [/input, 3490] 
split level 122: [/input, 2330] 
split level 123: [/input, 3397] 
split level 124: [/input, 3409] 
split level 125: [/input, 3509] 
split level 126: [/input-8, 1079] 
split level 127: [/input, 3426] 
split level 128: [/input, 2204] 
split level 129: [/input, 3239] 
split level 130: [/input, 2321] 
split level 131: [/input, 3254] 
split level 132: [/input, 3411] 
split level 133: [/input-8, 803] 
split level 134: [/input-8, 447] 
split level 135: [/input, 65] 
split level 136: [/input, 3521] 
split level 137: [/input, 1297] 
split level 138: [/input, 2326] 
split level 139: [/input, 2325] 
split level 140: [/input, 2501] 
split level 141: [/input, 3395] 
split level 142: [/input, 2584] 
split level 143: [/input, 2324] 
split level 144: [/input, 2331] 
split level 145: [/input, 3442] 
split level 146: [/input, 3425] 
split level 147: [/input, 1298] 
split level 148: [/input, 2172] 
split level 149: [/input, 2332] 
split level 150: [/input, 2419] 
split level 151: [/input, 1674] 
split level 152: [/input, 2357] 
split level 153: [/input, 49] 
split level 154: [/input, 2498] 
split level 155: [/input, 3554] 
split level 156: [/input, 1460] 
split level 157: [/input, 3349] 
split level 158: [/input-8, 501] 
split level 159: [/input, 3381] 
split level 160: [/input, 3540] 
split level 161: [/input, 2372] 
split level 162: [/input, 280] 
split level 163: [/input, 3734] 
split level 164: [/input, 3334] 
split level 165: [/input, 2333] 
split level 166: [/input, 3332] 
split level 167: [/input, 1458] 
split level 168: [/input, 3362] 
split level 169: [/input, 4038] 
split level 170: [/input, 2970] 
split level 171: [/input, 2482] 
split level 172: [/input, 2154] 
split level 173: [/input, 3142] 
split level 174: [/input, 3526] 
split level 175: [/input, 1475] 
split level 176: [/input, 3340] 
split level 177: [/input, 3337] 
split level 178: [/input, 3538] 
split level 179: [/input, 3348] 
split level 180: [/input, 3336] 
split level 181: [/input, 2513] 
split level 182: [/input, 3361] 
split level 183: [/input, 3266] 
split level 184: [/input, 34] 
split level 185: [/input, 2337] 
split level 186: [/input, 3377] 
split level 187: [/input, 3347] 
split level 188: [/input, 3458] 
split level 189: [/input, 3410] 
split level 190: [/input, 3378] 
split level 191: [/input, 3379] 
split level 192: [/input, 3339] 
split level 193: [/input-8, 1617] 
split level 194: [/input, 3338] 
split level 195: [/input, 4037] 
split level 196: [/input, 3086] 
split level 197: [/input, 3380] 
split level 198: [/input, 3335] 
split level 199: [/input, 1393] 
Time: prepare 0.0059    bound 0.0934    transfer 0.0024    finalize 0.0032    func 0.1050    
Accumulated time: func 0.1563    prepare 0.0156    bound 0.1443    transfer 0.0025    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.31540895) min lb tensor(-0.22139263)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.011803388595581055 
BICCOS Cumulative time: 0.011803388595581055
Preprocessing time: 0.010615110397338867 Inference time: 0.00012493133544921875 Add cuts time: 7.224082946777344e-05 Cut analysis time: 0.0009911060333251953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21597 (1), -0.21584 (1), -0.21580 (1), -0.21570 (1), -0.21555 (1), -0.21536 (1), -0.21495 (1), -0.21492 (1), -0.21463 (1), -0.21433 (1), -0.21432 (1), -0.21419 (1), -0.21415 (1), -0.21407 (1), -0.21374 (1), -0.21345 (1), -0.21340 (1), -0.21322 (1), -0.21306 (1), -0.21249 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5133    set_bounds 0.0090    solve 0.1051    add 0.2140    
Accumulated time: pickout 0.0003    decision 0.5133    set_bounds 0.0090    solve 0.1051    add 0.2140    
Current (lb-rhs): -0.2159721851348877
50 domains visited
Cumulative time: 0.9337022304534912

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 26] [/input-12, 26] [/input-12, 78] [/input-12, 26] [/input-12, 26] [/input-12, 26] 
split level 1: [/input-12, 26] [/input-12, 26] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 26] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 41] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] 
split level 3: [/input-12, 25] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20455938577651978
10 lb beta sum: 0.34084898233413696, worst -0.20347881317138672
Time: prepare 0.0074    bound 0.1206    transfer 0.0016    finalize 0.0035    func 0.1359    
Accumulated time: func 0.2922    prepare 0.0233    bound 0.2649    transfer 0.0041    finalize 0.0068    
all_split False
======================Cut inference begins======================
max lb tensor(0.44849211) min lb tensor(-0.20346338)
Number of Verified Splits: 96 of 400
Original cuts are inferred.
Fetch cut process: mps for current label is not ready yet
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.020295381546020508 
BICCOS Cumulative time: 0.03209877014160156
Preprocessing time: 0.013712167739868164 Inference time: 0.004700422286987305 Add cuts time: 0.0014712810516357422 Cut analysis time: 0.0004115104675292969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06807 (2), -0.06761 (2), -0.06761 (2), -0.06758 (2), -0.06716 (2), -0.06706 (2), -0.06679 (2), -0.06666 (2), -0.06630 (2), -0.06626 (2), -0.06558 (2), -0.06556 (2), -0.06543 (2), -0.06521 (2), -0.06499 (2), -0.06488 (2), -0.06487 (2), -0.06461 (2), -0.06373 (2), -0.06354 (2), 
Length of domains: 50
Time: pickout 0.0081    decision 0.0212    set_bounds 0.0124    solve 0.1360    add 0.3135    
Accumulated time: pickout 0.0084    decision 0.5345    set_bounds 0.0214    solve 0.2411    add 0.5275    
Current (lb-rhs): -0.06806892156600952
100 domains visited
Cumulative time: 1.4523639678955078

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] 
split level 1: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 25] [/input-12, 25] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 45] [/input-12, 45] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] 
split level 3: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-8, 1366] [/input-8, 1366] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08006608486175537
10 lb beta sum: 0.31986698508262634, worst -0.026018142700195312
Time: prepare 0.0082    bound 0.1264    transfer 0.0020    finalize 0.0032    func 0.1426    
Accumulated time: func 0.4348    prepare 0.0318    bound 0.3913    transfer 0.0061    finalize 0.0100    
all_split False
======================Cut inference begins======================
max lb tensor(0.30665386) min lb tensor(-0.02591658)
Number of Verified Splits: 374 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=2_26569751.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0019
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 40
#cuts >= 20: 0
BICCOS time: 0.045121192932128906 
BICCOS Cumulative time: 0.07721996307373047
Preprocessing time: 0.014147043228149414 Inference time: 0.01792454719543457 Add cuts time: 0.010232686996459961 Cut analysis time: 0.002816915512084961
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02592 (3), -0.02591 (3), -0.02591 (3), -0.02580 (3), -0.02578 (3), -0.02578 (3), -0.02181 (3), -0.02166 (3), -0.01393 (3), -0.01384 (3), -0.00610 (3), -0.00610 (3), -0.00609 (3), -0.00609 (3), -0.00607 (3), -0.00607 (3), -0.00602 (3), -0.00602 (3), -0.00602 (3), -0.00602 (3), 
Length of domains: 26
Time: pickout 0.0081    decision 0.0226    set_bounds 0.0206    solve 0.1428    add 0.2328    
Accumulated time: pickout 0.0166    decision 0.5571    set_bounds 0.0420    solve 0.3838    add 0.7603    
Current (lb-rhs): -0.025916576385498047
126 domains visited
Cumulative time: 1.931337594985962

Shallow-BaB round 4
batch: 26
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 25] [/input-12, 78] [/input-12, 78] [/input-12, 25] [/input-12, 78] 
split level 1: [/input-12, 25] [/input-12, 25] [/input-12, 41] [/input-12, 41] [/input-12, 45] [/input-12, 45] [/input-12, 25] [/input-12, 25] [/input-12, 45] [/input-12, 45] 
split level 2: [/input-12, 45] [/input-12, 45] [/input-12, 25] [/input-12, 25] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] 
split level 3: [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] 
split level 4: [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] 
split level 5: [/input-8, 1396] [/input-8, 1396] [/input-8, 1396] [/input-8, 1396] [/input-8, 1405] [/input-8, 1396] [/input-8, 1396] [/input-8, 1396] [/input-8, 1396] [/input-8, 1405] 
split level 6: [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1396] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1396] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06472349166870117
10 lb beta sum: 1.667074203491211, worst -0.017656683921813965
Time: prepare 0.0068    bound 0.1475    transfer 0.0063    finalize 0.0031    func 0.1663    
Accumulated time: func 0.6010    prepare 0.0390    bound 0.5389    transfer 0.0124    finalize 0.0131    
all_split False
======================Cut inference begins======================
max lb tensor(0.18981051) min lb tensor(-0.01755702)
Number of Verified Splits: 264 of 364
Original cuts are inferred.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=2_26569751.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 54.
#cuts 1-3: 40
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.03178596496582031 
BICCOS Cumulative time: 0.10900592803955078
Preprocessing time: 0.011373043060302734 Inference time: 0.012824773788452148 Add cuts time: 0.005198478698730469 Cut analysis time: 0.002389669418334961
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00924 (4), -0.00924 (4), -0.00923 (4), -0.00919 (4), -0.00919 (4), -0.00918 (4), -0.00876 (4), -0.00867 (4), -0.00865 (4), -0.00856 (4), -0.00795 (4), -0.00785 (4), -0.00641 (4), -0.00640 (4), -0.00639 (4), -0.00638 (4), -0.00636 (4), -0.00636 (4), -0.00570 (4), -0.00570 (4), 
Length of domains: 50
Time: pickout 0.0077    decision 0.0323    set_bounds 0.0131    solve 0.1672    add 0.5183    
Accumulated time: pickout 0.0242    decision 0.5894    set_bounds 0.0552    solve 0.5510    add 1.2786    
Current (lb-rhs): -0.0092393159866333
176 domains visited
Cumulative time: 2.7127509117126465

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] 
split level 1: [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] 
split level 2: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 3: [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.054898619651794434
10 lb beta sum: 1.50503671169281, worst -0.027826428413391113
Time: prepare 0.0088    bound 0.1881    transfer 0.0014    finalize 0.0025    func 0.2035    
Accumulated time: func 0.8046    prepare 0.0481    bound 0.7269    transfer 0.0138    finalize 0.0157    
all_split False
======================Cut inference begins======================
max lb tensor(0.19587326) min lb tensor(-0.00485325)
Number of Verified Splits: 326 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=2_26569751.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 54.
#cuts 1-3: 40
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.04246997833251953 
BICCOS Cumulative time: 0.1514759063720703
Preprocessing time: 0.013225555419921875 Inference time: 0.018187284469604492 Add cuts time: 0.008635759353637695 Cut analysis time: 0.0024213790893554688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00477 (5), -0.00477 (5), -0.00477 (5), -0.00477 (5), -0.00477 (5), -0.00476 (5), -0.00469 (5), -0.00469 (5), -0.00469 (5), -0.00469 (5), -0.00405 (5), -0.00405 (5), -0.00405 (5), -0.00405 (5), -0.00398 (5), -0.00397 (5), -0.00397 (5), -0.00397 (5), -0.00157 (5), -0.00156 (5), 
Length of domains: 50
Time: pickout 0.0221    decision 0.0216    set_bounds 0.0194    solve 0.2037    add 0.2808    
Accumulated time: pickout 0.0463    decision 0.6110    set_bounds 0.0746    solve 0.7547    add 1.5595    
Current (lb-rhs): -0.004773139953613281
226 domains visited
Cumulative time: 3.310635566711426

Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41, 78]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([1.65709890e-10, 6.40815347e-02, 1.95399269e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41, 78, 25]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.65709890e-10, 6.40815347e-02, 2.32356656e-02, 1.10271443e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41, 78, 25]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.65709890e-10, 6.40815347e-02, 2.32356656e-02, 6.62217587e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.65709890e-10, 1.16536781e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357], [-1.0], [0], [7.850822769661647e-11], [2]), '/input-12': (tensor([26, 41, 78]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.65709890e-10, 6.31397963e-02, 1.85930416e-01]), tensor([0, 1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357], [-1.0], [0], [7.850822769661647e-11], [2]), '/input-12': (tensor([26, 41, 78, 25]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.65709890e-10, 6.31397963e-02, 8.26125033e-03, 1.07336510e-02]), tensor([0, 1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357], [-1.0], [0], [7.850822769661647e-11], [2]), '/input-12': (tensor([26, 41, 78, 25]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.65709890e-10, 6.31397963e-02, 8.26125033e-03, 5.79919070e-02]), tensor([0, 1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357, 1393], [1.0, -1.0], [0, 0], [3.300261488932074e+32, 0.02019314654171467], [2, 3]), '/input-12': (tensor([26, 41, 78]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.65709890e-10, 6.31397963e-02, 1.78402409e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357, 1393], [1.0, -1.0], [0, 0], [3.300261488932074e+32, 0.02019314654171467], [2, 3]), '/input-12': (tensor([26, 41, 78]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.65709890e-10, 6.31397963e-02, 3.61143216e-03]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357, 1393], [1.0, 1.0], [0, 0], [3.300261488932074e+32, 0.013013767078518867], [2, 3]), '/input-12': (tensor([26, 41, 78]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.65709890e-10, 6.31397963e-02, 1.75604805e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357, 1393], [1.0, 1.0], [0, 0], [3.300261488932074e+32, 0.013013767078518867], [2, 3]), '/input-12': (tensor([26, 41, 78]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.65709890e-10, 6.31397963e-02, 3.87911662e-03]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41]), tensor([1., 1.]), tensor([0, 0]), tensor([1.65709890e-10, 1.16606638e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05363994836807251
10 lb beta sum: 0.7108464241027832, worst -0.001595616340637207
Time: prepare 0.0007    bound 0.1748    transfer 0.0003    finalize 0.0003    func 0.1762    
Accumulated time: func 0.9808    prepare 0.0487    bound 0.9018    transfer 0.0141    finalize 0.0159    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 25] 
split level 1: [/input-12, 45] 
split level 2: [/input-8, 1366] 
split level 3: [/input-8, 1628] 
split level 4: [/input-8, 1404] 
split level 5: [/input-8, 1396] 
split level 6: [/input-8, 402] 
split level 7: [/input-8, 641] 
cut re-enabled after branching node selection
0 lb beta sum: 2.651376724243164, worst 0.009907126426696777

all verified at 0th iter
Time: prepare 0.0122    bound 0.0073    transfer 0.0052    finalize 0.0024    func 0.0289    
Accumulated time: func 1.0097    prepare 0.0614    bound 0.9091    transfer 0.0194    finalize 0.0183    
all_split False
======================Cut inference begins======================
max lb tensor(0.66061389) min lb tensor(0.00990713)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 2
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=2_26569751.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0016
Total number of valid cuts: 54.
#cuts 1-3: 40
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.01003885269165039 
BICCOS Cumulative time: 0.1615147590637207
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0253    set_bounds 0.0385    solve 0.0290    add 0.0001    
Accumulated time: pickout 0.0473    decision 0.6364    set_bounds 0.1131    solve 0.7837    add 1.5596    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
226 domains visited
Cumulative time: 3.7052111625671387

found process to kill: terminal indx = 2
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=2_26569751.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=2_26569751.log
found process to kill: terminal indx = 4
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=4_26569751.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=4_26569751.log

Properties batch 8, size 1
Remaining timeout: 192.71465253829956
Verifying property 8 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.22706413]], device='cuda:0') need to verify.
Model prediction is: tensor([-10.51362133, -15.75713921, -11.03450871, -11.39007473, -12.12888622,
        -11.76603127, -13.25793362, -13.95927143, -13.38565063, -14.89714527],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.22706413]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 766
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 172
Node /15 input 0: size torch.Size([100]) unstable 14
-----------------
# of unstable neurons: 952
-----------------

======================Cut verification begins======================
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
Cut time: 0.000995635986328125
======================Cut verification ends======================
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0495    transfer 0.0001    finalize 0.0001    func 0.0499    
Accumulated time: func 0.0499    prepare 0.0002    bound 0.0495    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
splitting decisions: 
split level 0: [/input-12, 26] 
split level 1: [/input-12, 78] 
split level 2: [/input-12, 41] 
split level 3: [/input-12, 25] 
split level 4: [/input-12, 11] 
split level 5: [/input-8, 1628] 
split level 6: [/input-8, 1437] 
split level 7: [/input-8, 1035] 
split level 8: [/input-8, 413] 
split level 9: [/input-8, 1366] 
split level 10: [/input-8, 1500] 
split level 11: [/input-8, 1621] 
split level 12: [/input-8, 1619] 
split level 13: [/input-8, 1044] 
split level 14: [/input-12, 45] 
split level 15: [/input-8, 996] 
split level 16: [/input-8, 1356] 
split level 17: [/input-8, 1357] 
split level 18: [/input-8, 276] 
split level 19: [/input-8, 1134] 
split level 20: [/input, 2471] 
split level 21: [/input, 3527] 
split level 22: [/input, 3272] 
split level 23: [/input, 2503] 
split level 24: [/input, 3240] 
split level 25: [/input, 2231] 
split level 26: [/input, 429] 
split level 27: [/input, 1448] 
split level 28: [/input-8, 667] 
split level 29: [/input-8, 1618] 
split level 30: [/input, 2966] 
split level 31: [/input, 3494] 
split level 32: [/input-8, 1347] 
split level 33: [/input-8, 1610] 
split level 34: [/input, 2263] 
split level 35: [/input, 3509] 
split level 36: [/input, 2472] 
split level 37: [/input-8, 1625] 
split level 38: [/input, 2504] 
split level 39: [/input, 3525] 
split level 40: [/input-8, 1341] 
split level 41: [/input, 3274] 
split level 42: [/input-8, 680] 
split level 43: [/input-8, 990] 
split level 44: [/input, 3222] 
split level 45: [/input-8, 1609] 
split level 46: [/input, 3258] 
split level 47: [/input, 3253] 
split level 48: [/input, 2501] 
split level 49: [/input, 1447] 
split level 50: [/input, 3269] 
split level 51: [/input-8, 102] 
split level 52: [/input, 3526] 
split level 53: [/input-8, 1370] 
split level 54: [/input, 3524] 
split level 55: [/input, 2486] 
split level 56: [/input-8, 614] 
split level 57: [/input, 1388] 
split level 58: [/input, 327] 
split level 59: [/input, 2487] 
split level 60: [/input, 2500] 
split level 61: [/input, 3543] 
split level 62: [/input-8, 1441] 
split level 63: [/input-8, 1122] 
split level 64: [/input, 3239] 
split level 65: [/input-8, 1617] 
split level 66: [/input, 279] 
split level 67: [/input, 3254] 
split level 68: [/input, 3287] 
split level 69: [/input, 3288] 
split level 70: [/input, 2519] 
split level 71: [/input-8, 1346] 
split level 72: [/input-8, 1342] 
split level 73: [/input, 2536] 
split level 74: [/input, 1720] 
split level 75: [/input, 2535] 
split level 76: [/input, 1477] 
split level 77: [/input-8, 550] 
split level 78: [/input, 2517] 
split level 79: [/input-8, 641] 
split level 80: [/input, 3511] 
split level 81: [/input, 445] 
split level 82: [/input, 3257] 
split level 83: [/input, 2499] 
split level 84: [/input, 4055] 
split level 85: [/input, 3529] 
split level 86: [/input, 4071] 
split level 87: [/input, 2514] 
split level 88: [/input, 2228] 
split level 89: [/input-8, 1354] 
split level 90: [/input, 3507] 
split level 91: [/input, 3241] 
split level 92: [/input, 2516] 
split level 93: [/input, 3522] 
split level 94: [/input, 1718] 
split level 95: [/input, 460] 
split level 96: [/input, 4058] 
split level 97: [/input, 1432] 
split level 98: [/input, 312] 
split level 99: [/input, 4056] 
split level 100: [/input, 3523] 
split level 101: [/input, 2227] 
split level 102: [/input, 1434] 
split level 103: [/input, 2965] 
split level 104: [/input, 328] 
split level 105: [/input, 4054] 
split level 106: [/input, 3542] 
split level 107: [/input, 4057] 
split level 108: [/input-8, 86] 
split level 109: [/input-8, 1345] 
split level 110: [/input, 2531] 
split level 111: [/input, 4036] 
split level 112: [/input, 4051] 
split level 113: [/input, 2534] 
split level 114: [/input, 3541] 
split level 115: [/input, 3539] 
split level 116: [/input, 3291] 
split level 117: [/input, 2518] 
split level 118: [/input, 3733] 
split level 119: [/input, 2202] 
split level 120: [/input, 3734] 
split level 121: [/input-8, 414] 
split level 122: [/input, 4053] 
split level 123: [/input, 4073] 
split level 124: [/input, 2186] 
split level 125: [/input, 4070] 
split level 126: [/input-8, 1863] 
split level 127: [/input, 1431] 
split level 128: [/input, 1674] 
split level 129: [/input, 3434] 
split level 130: [/input, 4023] 
split level 131: [/input-8, 1476] 
split level 132: [/input, 1475] 
split level 133: [/input-8, 1362] 
split level 134: [/input, 2533] 
split level 135: [/input, 4068] 
split level 136: [/input, 2515] 
split level 137: [/input, 3731] 
split level 138: [/input, 4035] 
split level 139: [/input, 2183] 
split level 140: [/input-8, 412] 
split level 141: [/input, 2521] 
split level 142: [/input, 2537] 
split level 143: [/input-8, 1079] 
split level 144: [/input, 2498] 
split level 145: [/input, 4038] 
split level 146: [/input, 1641] 
split level 147: [/input, 2970] 
split level 148: [/input, 3292] 
split level 149: [/input, 4069] 
split level 150: [/input, 1497] 
split level 151: [/input, 2513] 
split level 152: [/input, 3989] 
split level 153: [/input, 3545] 
split level 154: [/input-8, 1325] 
split level 155: [/input, 4075] 
split level 156: [/input, 3266] 
split level 157: [/input, 3478] 
split level 158: [/input, 213] 
split level 159: [/input, 408] 
split level 160: [/input, 4049] 
split level 161: [/input, 236] 
split level 162: [/input, 4067] 
split level 163: [/input, 3555] 
split level 164: [/input, 4052] 
split level 165: [/input, 2980] 
split level 166: [/input, 4040] 
split level 167: [/input, 889] 
split level 168: [/input, 3290] 
split level 169: [/input-8, 402] 
split level 170: [/input, 4041] 
split level 171: [/input, 1518] 
split level 172: [/input, 2204] 
split level 173: [/input, 2284] 
split level 174: [/input-8, 447] 
split level 175: [/input, 161] 
split level 176: [/input, 280] 
split level 177: [/input, 3283] 
split level 178: [/input, 227] 
split level 179: [/input, 3556] 
split level 180: [/input, 3557] 
split level 181: [/input, 199] 
split level 182: [/input-8, 672] 
split level 183: [/input, 3538] 
split level 184: [/input, 2967] 
split level 185: [/input, 2154] 
split level 186: [/input, 2532] 
split level 187: [/input-8, 2021] 
split level 188: [/input, 3305] 
split level 189: [/input, 3554] 
split level 190: [/input, 217] 
split level 191: [/input, 3560] 
split level 192: [/input, 3418] 
split level 193: [/input, 3540] 
split level 194: [/input-8, 1333] 
split level 195: [/input, 4037] 
split level 196: [/input, 3537] 
split level 197: [/input, 2940] 
split level 198: [/input, 1754] 
split level 199: [/input, 4074] 
Time: prepare 0.0058    bound 0.0915    transfer 0.0028    finalize 0.0029    func 0.1031    
Accumulated time: func 0.1530    prepare 0.0156    bound 0.1411    transfer 0.0029    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.16679156) min lb tensor(-0.22690463)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0013
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011846542358398438 
BICCOS Cumulative time: 0.011846542358398438
Preprocessing time: 0.010243892669677734 Inference time: 6.914138793945312e-05 Add cuts time: 3.504753112792969e-05 Cut analysis time: 0.0014984607696533203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22304 (1), -0.22297 (1), -0.22286 (1), -0.22274 (1), -0.22249 (1), -0.22245 (1), -0.22224 (1), -0.22224 (1), -0.22213 (1), -0.22199 (1), -0.22181 (1), -0.22175 (1), -0.22146 (1), -0.22136 (1), -0.22133 (1), -0.22104 (1), -0.22056 (1), -0.22049 (1), -0.21992 (1), -0.21973 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5109    set_bounds 0.0087    solve 0.1032    add 0.1976    
Accumulated time: pickout 0.0003    decision 0.5109    set_bounds 0.0087    solve 0.1032    add 0.1976    
Current (lb-rhs): -0.22303974628448486
50 domains visited
Cumulative time: 0.9055132865905762

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 26] [/input-12, 26] [/input-12, 41] [/input-12, 26] [/input-12, 41] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] 
split level 1: [/input-12, 41] [/input-12, 41] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 41] [/input-12, 41] [/input-12, 25] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 11] [/input-12, 25] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 25] [/input-12, 25] [/input-12, 41] [/input-12, 25] [/input-12, 25] 
split level 3: [/input-8, 614] [/input-12, 11] [/input-8, 1437] [/input-8, 1437] [/input-8, 1628] [/input-12, 11] [/input-8, 1628] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21615946292877197
10 lb beta sum: 0.19533458352088928, worst -0.21392317116260529
Time: prepare 0.0075    bound 0.1176    transfer 0.0012    finalize 0.0026    func 0.1316    
Accumulated time: func 0.2846    prepare 0.0233    bound 0.2586    transfer 0.0041    finalize 0.0056    
all_split False
======================Cut inference begins======================
max lb tensor(0.06712788) min lb tensor(-0.21392000)
Number of Verified Splits: 24 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0016
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.015503644943237305 
BICCOS Cumulative time: 0.027350187301635742
Preprocessing time: 0.012287378311157227 Inference time: 0.0009968280792236328 Add cuts time: 0.00036835670471191406 Cut analysis time: 0.0018510818481445312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12353 (2), -0.12319 (2), -0.12273 (2), -0.12254 (2), -0.12233 (2), -0.12217 (2), -0.12175 (2), -0.12094 (2), -0.12086 (2), -0.12070 (2), -0.12066 (2), -0.12058 (2), -0.12045 (2), -0.12034 (2), -0.11955 (2), -0.11868 (2), -0.11631 (2), -0.11622 (2), -0.11403 (2), -0.11238 (2), 
Length of domains: 50
Time: pickout 0.0080    decision 0.0197    set_bounds 0.0121    solve 0.1316    add 0.2112    
Accumulated time: pickout 0.0083    decision 0.5306    set_bounds 0.0208    solve 0.2348    add 0.4087    
Current (lb-rhs): -0.12352724373340607
100 domains visited
Cumulative time: 1.3109660148620605

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 41] [/input-12, 25] [/input-12, 25] [/input-12, 26] [/input-12, 25] [/input-12, 25] [/input-12, 26] [/input-12, 26] [/input-12, 41] 
split level 1: [/input-12, 25] [/input-12, 25] [/input-12, 11] [/input-12, 11] [/input-12, 41] [/input-12, 11] [/input-12, 11] [/input-12, 41] [/input-12, 25] [/input-12, 25] 
split level 2: [/input-12, 11] [/input-12, 11] [/input-8, 1628] [/input-8, 1628] [/input-12, 25] [/input-8, 1628] [/input-8, 1628] [/input-12, 25] [/input-12, 11] [/input-12, 11] 
split level 3: [/input-8, 1437] [/input-8, 1122] [/input-8, 1437] [/input-8, 1437] [/input-8, 1122] [/input-8, 1437] [/input-8, 1437] [/input-8, 1625] [/input-8, 1122] [/input-8, 1437] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12317609786987305
10 lb beta sum: 0.47312140464782715, worst -0.11898528039455414
Time: prepare 0.0076    bound 0.1175    transfer 0.0012    finalize 0.0027    func 0.1319    
Accumulated time: func 0.4165    prepare 0.0312    bound 0.3762    transfer 0.0054    finalize 0.0083    
all_split False
======================Cut inference begins======================
max lb tensor(0.42252845) min lb tensor(-0.11545821)
Number of Verified Splits: 70 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.018445253372192383 
BICCOS Cumulative time: 0.045795440673828125
Preprocessing time: 0.012169599533081055 Inference time: 0.0030417442321777344 Add cuts time: 0.0019297599792480469 Cut analysis time: 0.0013041496276855469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02767 (3), -0.02762 (3), -0.02761 (3), -0.02745 (3), -0.02737 (3), -0.02736 (3), -0.02713 (3), -0.02704 (3), -0.02702 (3), -0.02669 (3), -0.02657 (3), -0.02619 (3), -0.02609 (3), -0.02603 (3), -0.02211 (3), -0.02207 (3), -0.02182 (3), -0.02151 (3), -0.02045 (3), -0.02011 (3), 
Length of domains: 50
Time: pickout 0.0047    decision 0.0199    set_bounds 0.0151    solve 0.1320    add 0.2215    
Accumulated time: pickout 0.0129    decision 0.5505    set_bounds 0.0359    solve 0.3668    add 0.6302    
Current (lb-rhs): -0.027666792273521423
150 domains visited
Cumulative time: 1.7295982837677002

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] 
split level 1: [/input-12, 11] [/input-12, 11] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-12, 11] [/input-12, 11] 
split level 2: [/input-8, 1628] [/input-8, 1628] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1628] [/input-8, 1628] 
split level 3: [/input-8, 1437] [/input-8, 1437] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1437] [/input-8, 1437] 
cut re-enabled after branching node selection
0 lb beta sum: 0.679379403591156, worst -0.027666568756103516
10 lb beta sum: 0.679379403591156, worst -0.03589561581611633
Time: prepare 0.0172    bound 0.1170    transfer 0.0012    finalize 0.0024    func 0.1412    
Accumulated time: func 0.5577    prepare 0.0487    bound 0.4932    transfer 0.0066    finalize 0.0108    
all_split False
======================Cut inference begins======================
max lb tensor(0.27352330) min lb tensor(-0.02690816)
Number of Verified Splits: 196 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 7
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.025716543197631836 
BICCOS Cumulative time: 0.07151198387145996
Preprocessing time: 0.011900901794433594 Inference time: 0.009421825408935547 Add cuts time: 0.002944469451904297 Cut analysis time: 0.0014493465423583984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01387 (4), -0.01370 (4), -0.01361 (4), -0.01331 (4), -0.01326 (4), -0.01321 (4), -0.01314 (4), -0.01299 (4), -0.01298 (4), -0.01292 (4), -0.01278 (4), -0.01272 (4), -0.01270 (4), -0.01247 (4), -0.01244 (4), -0.01244 (4), -0.01234 (4), -0.01190 (4), -0.01189 (4), -0.01187 (4), 
Length of domains: 50
Time: pickout 0.0114    decision 0.0199    set_bounds 0.0146    solve 0.1413    add 0.3863    
Accumulated time: pickout 0.0243    decision 0.5704    set_bounds 0.0505    solve 0.5081    add 1.0165    
Current (lb-rhs): -0.013865470886230469
200 domains visited
Cumulative time: 2.3359222412109375

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] 
split level 1: [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] 
split level 2: [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1500] [/input-8, 1437] [/input-8, 1437] 
split level 3: [/input-8, 1357] [/input-8, 1357] [/input-8, 1500] [/input-8, 1500] [/input-8, 1500] [/input-8, 1500] [/input-8, 1500] [/input-8, 1346] [/input-8, 1500] [/input-8, 1500] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023830175399780273
10 lb beta sum: 1.6707465648651123, worst -0.01890493929386139
Time: prepare 0.0081    bound 0.1363    transfer 0.0018    finalize 0.0023    func 0.1512    
Accumulated time: func 0.7089    prepare 0.0571    bound 0.6295    transfer 0.0084    finalize 0.0130    
all_split False
======================Cut inference begins======================
max lb tensor(0.02952111) min lb tensor(-0.00915015)
Number of Verified Splits: 277 of 400
Original cuts are inferred.
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 8
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.031571388244628906 
BICCOS Cumulative time: 0.10308337211608887
Preprocessing time: 0.012395143508911133 Inference time: 0.014140129089355469 Add cuts time: 0.003685474395751953 Cut analysis time: 0.0013506412506103516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00559 (5), -0.00551 (5), -0.00520 (5), -0.00506 (5), -0.00502 (5), -0.00502 (5), -0.00486 (5), -0.00486 (5), -0.00468 (5), -0.00464 (5), -0.00463 (5), -0.00455 (5), -0.00455 (5), -0.00454 (5), -0.00442 (5), -0.00442 (5), -0.00440 (5), -0.00436 (5), -0.00434 (5), -0.00434 (5), 
Length of domains: 50
Time: pickout 0.0078    decision 0.0197    set_bounds 0.0202    solve 0.1513    add 0.2409    
Accumulated time: pickout 0.0321    decision 0.5901    set_bounds 0.0707    solve 0.6594    add 1.2574    
Current (lb-rhs): -0.005589589476585388
250 domains visited
Cumulative time: 2.814457416534424

Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41]), tensor([-1., -1.]), tensor([0, 0]), tensor([4.01556566e-10, 2.14198548e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1500], [-1.0], [0], [4.502740296175034e-07], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([4.01556566e-10, 9.40040350e-02, 5.31239361e-02, 7.47625669e-03]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1500], [-1.0], [0], [4.502740296175034e-07], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([4.01556566e-10, 9.40040350e-02, 5.31239361e-02, 3.22212428e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1500], [1.0], [0], [3.3003729035356095e+32], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([4.01556566e-10, 9.40040350e-02, 5.31239361e-02, 8.18041153e-03]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1500], [1.0], [0], [3.3003729035356095e+32], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([4.01556566e-10, 9.40040350e-02, 5.31239361e-02, 3.28073949e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41, 11]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([4.01556566e-10, 9.40040350e-02, 3.97380143e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41, 25]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([4.01556566e-10, 2.23519672e-02, 7.53832003e-03]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41, 25]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([4.01556566e-10, 2.23519672e-02, 1.90434739e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41, 11, 25]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([4.01556566e-10, 8.40301365e-02, 5.15987724e-02, 7.69959530e-04]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41, 11, 25]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([4.01556566e-10, 8.40301365e-02, 5.15987724e-02, 2.54747987e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357], [-1.0], [0], [1.0615065684088654e-13], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([4.01556566e-10, 8.40301365e-02, 3.93522531e-02, 1.33184064e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357], [-1.0], [0], [1.0615065684088654e-13], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([4.01556566e-10, 8.40301365e-02, 3.93522531e-02, 3.36557478e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357], [1.0], [0], [0.004030840005725622], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([4.01556566e-10, 8.40301365e-02, 3.93522531e-02, 1.32924188e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357], [1.0], [0], [0.004030840005725622], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([4.01556566e-10, 8.40301365e-02, 3.93522531e-02, 3.40424627e-02]), tensor([0, 1, 2, 4]))}
Shallow branching resets to n domains:  14
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14499354362487793
10 lb beta sum: 1.2770133018493652, worst -0.1328144520521164
Time: prepare 0.0006    bound 0.1297    transfer 0.0004    finalize 0.0003    func 0.1311    
Accumulated time: func 0.8399    prepare 0.0577    bound 0.7592    transfer 0.0088    finalize 0.0133    
After pruning, left:  5

Back to Regular BaB

BaB round 1
batch: 5
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 25] [/input-8, 1628] [/input-8, 1628] [/input-12, 25] [/input-12, 78] 
split level 1: [/input-12, 11] [/input-8, 1437] [/input-8, 1437] [/input-8, 1628] [/input-12, 11] 
split level 2: [/input-8, 1628] [/input-8, 1366] [/input-8, 1366] [/input-8, 1437] [/input-8, 1628] 
split level 3: [/input-8, 1437] [/input-8, 1619] [/input-8, 1619] [/input-8, 1619] [/input-8, 1437] 
split level 4: [/input-8, 1619] [/input-8, 1357] [/input-8, 1357] [/input-8, 1500] [/input-8, 1619] 
split level 5: [/input-8, 1357] [/input-8, 1346] [/input-8, 1346] [/input-8, 1357] [/input-8, 1357] 
cut re-enabled after branching node selection
0 lb beta sum: 1.1683599948883057, worst -0.09104424715042114
10 lb beta sum: 1.1683599948883057, worst -0.09067636728286743
Time: prepare 0.0139    bound 0.1304    transfer 0.0074    finalize 0.0027    func 0.1566    
Accumulated time: func 0.9966    prepare 0.0720    bound 0.8896    transfer 0.0162    finalize 0.0160    
all_split False
======================Cut inference begins======================
max lb tensor(0.27318108) min lb tensor(-0.09061354)
Number of Verified Splits: 250 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.307379961013794, worst -0.14385326206684113
10 lb beta sum: 1.5628563165664673, worst -0.027435004711151123
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 8
#cuts 4-6: 9
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.3153548240661621 
BICCOS Cumulative time: 0.418438196182251
Preprocessing time: 0.009210348129272461 Inference time: 0.295116662979126 Add cuts time: 0.009191036224365234 Cut analysis time: 0.0018367767333984375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09061 (6), -0.08850 (6), -0.08659 (6), -0.08450 (6), -0.08051 (6), -0.07863 (6), -0.07814 (6), -0.07651 (6), -0.07604 (6), -0.07457 (6), -0.07367 (6), -0.07250 (6), -0.06810 (6), -0.06581 (6), -0.06413 (6), -0.06374 (6), -0.06199 (6), -0.06143 (6), -0.06042 (6), -0.05831 (6), 
Length of domains: 70
Time: pickout 0.0007    decision 0.0180    set_bounds 0.0268    solve 0.1568    add 0.0637    
Accumulated time: pickout 0.0329    decision 0.6081    set_bounds 0.0975    solve 0.8161    add 1.3211    
Current (lb-rhs): -0.09061354398727417
320 domains visited
Cumulative time: 3.6624608039855957

BaB round 2
batch: 70
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] [/input-8, 1366] [/input-12, 78] [/input-8, 1366] [/input-12, 78] [/input-8, 1366] [/input-12, 78] [/input-12, 78] [/input-8, 1366] [/input-12, 78] 
split level 1: [/input-8, 1366] [/input-8, 1500] [/input-8, 1366] [/input-8, 1500] [/input-8, 1366] [/input-8, 1500] [/input-8, 1366] [/input-8, 1366] [/input-8, 1500] [/input-8, 1366] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09060823917388916
10 lb beta sum: 0.2128104269504547, worst -0.08862137794494629
Time: prepare 0.0057    bound 0.1297    transfer 0.0044    finalize 0.0021    func 0.1438    
Accumulated time: func 1.1403    prepare 0.0779    bound 1.0193    transfer 0.0206    finalize 0.0181    
all_split False
======================Cut inference begins======================
max lb tensor(0.30030960) min lb tensor(-0.08860600)
Number of Verified Splits: 93 of 280
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0009
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.01988506317138672 
BICCOS Cumulative time: 0.4383232593536377
Preprocessing time: 0.008579730987548828 Inference time: 0.008168697357177734 Add cuts time: 0.0019674301147460938 Cut analysis time: 0.0011692047119140625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08861 (8), -0.08598 (8), -0.08434 (8), -0.08187 (8), -0.07962 (8), -0.07725 (8), -0.07616 (8), -0.07558 (8), -0.07540 (8), -0.07453 (8), -0.07410 (8), -0.07288 (8), -0.07179 (8), -0.07159 (8), -0.07095 (8), -0.07051 (8), -0.06997 (8), -0.06811 (8), -0.06747 (8), -0.06670 (8), 
Length of domains: 187
Time: pickout 0.0065    decision 0.0152    set_bounds 0.0183    solve 0.1439    add 0.0764    
Accumulated time: pickout 0.0394    decision 0.6233    set_bounds 0.1158    solve 0.9600    add 1.3975    
Current (lb-rhs): -0.08860599994659424
507 domains visited
Cumulative time: 3.950388193130493

BaB round 3
batch: 187
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1618] [/input-8, 1618] [/input-8, 1618] [/input-8, 1618] [/input-8, 1618] [/input-8, 1347] [/input-8, 1618] [/input-8, 1618] [/input-8, 1618] [/input-8, 1618] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08833968639373779
10 lb beta sum: 0.2818792760372162, worst -0.08637082576751709
Time: prepare 0.0074    bound 0.1379    transfer 0.0026    finalize 0.0028    func 0.1532    
Accumulated time: func 1.2936    prepare 0.0854    bound 1.1573    transfer 0.0233    finalize 0.0209    
all_split False
======================Cut inference begins======================
max lb tensor(0.28017306) min lb tensor(-0.08636272)
Number of Verified Splits: 28 of 374
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0014
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.016129732131958008 
BICCOS Cumulative time: 0.4544529914855957
Preprocessing time: 0.011291980743408203 Inference time: 0.0027747154235839844 Add cuts time: 0.0003509521484375 Cut analysis time: 0.0017120838165283203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08636 (9), -0.08369 (9), -0.08202 (9), -0.07955 (9), -0.07728 (9), -0.07522 (9), -0.07391 (9), -0.07331 (9), -0.07319 (9), -0.07201 (9), -0.07183 (9), -0.07082 (9), -0.06970 (9), -0.06922 (9), -0.06898 (9), -0.06887 (9), -0.06785 (9), -0.06762 (9), -0.06683 (9), -0.06580 (9), 
Length of domains: 346
Time: pickout 0.0199    decision 0.0218    set_bounds 0.0170    solve 0.1534    add 0.0912    
Accumulated time: pickout 0.0593    decision 0.6451    set_bounds 0.1328    solve 1.1133    add 1.4887    
Current (lb-rhs): -0.08636271953582764
853 domains visited
Cumulative time: 4.277324914932251

BaB round 4
batch: 346
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1610] [/input-8, 1347] [/input-8, 1044] [/input-8, 1347] [/input-8, 1610] [/input-8, 1625] [/input-8, 1044] [/input-8, 1610] [/input-8, 1347] [/input-8, 1044] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08540475368499756
10 lb beta sum: 0.4499298930168152, worst -0.08341419696807861
Time: prepare 0.0136    bound 0.1391    transfer 0.0089    finalize 0.0043    func 0.1706    
Accumulated time: func 1.4641    prepare 0.0993    bound 1.2963    transfer 0.0321    finalize 0.0252    
all_split False
======================Cut inference begins======================
max lb tensor(0.01669386) min lb tensor(-0.08340156)
Number of Verified Splits: 62 of 692
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0022
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.03270673751831055 
BICCOS Cumulative time: 0.48715972900390625
Preprocessing time: 0.020966291427612305 Inference time: 0.006810665130615234 Add cuts time: 0.0009317398071289062 Cut analysis time: 0.0039980411529541016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08340 (10), -0.08170 (10), -0.07905 (10), -0.07819 (10), -0.07742 (10), -0.07521 (10), -0.07389 (10), -0.07158 (10), -0.07108 (10), -0.07096 (10), -0.06993 (10), -0.06944 (10), -0.06887 (10), -0.06761 (10), -0.06759 (10), -0.06717 (10), -0.06671 (10), -0.06598 (10), -0.06557 (10), -0.06513 (10), 
Length of domains: 630
Time: pickout 0.0180    decision 0.0308    set_bounds 0.0326    solve 0.1707    add 0.1210    
Accumulated time: pickout 0.0773    decision 0.6760    set_bounds 0.1654    solve 1.2841    add 1.6097    
Current (lb-rhs): -0.08340156078338623
1483 domains visited
Cumulative time: 4.692780017852783

BaB round 5
batch: 630
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1044] [/input-8, 1625] [/input-8, 1610] [/input-8, 1625] [/input-8, 1044] [/input-8, 1618] [/input-8, 1610] [/input-8, 1625] [/input-8, 1610] [/input-8, 1044] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5274934768676758, worst -0.08320808410644531
10 lb beta sum: 0.5274934768676758, worst -0.08320212364196777
Time: prepare 0.0560    bound 0.1486    transfer 0.0190    finalize 0.0091    func 0.2410    
Accumulated time: func 1.7051    prepare 0.1555    bound 1.4449    transfer 0.0511    finalize 0.0343    
all_split False
======================Cut inference begins======================
max lb tensor(0.01300687) min lb tensor(-0.08319426)
Number of Verified Splits: 99 of 1260
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0008
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 6
#cuts 4-6: 4
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.05610299110412598 
BICCOS Cumulative time: 0.5432627201080322
Preprocessing time: 0.040860891342163086 Inference time: 0.011925458908081055 Add cuts time: 0.0018754005432128906 Cut analysis time: 0.0014412403106689453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08319 (11), -0.07808 (11), -0.07806 (11), -0.07656 (11), -0.07564 (11), -0.07530 (11), -0.07468 (11), -0.07446 (11), -0.07340 (11), -0.07154 (11), -0.07154 (11), -0.07135 (11), -0.07010 (11), -0.06965 (11), -0.06858 (11), -0.06819 (11), -0.06770 (11), -0.06735 (11), -0.06735 (11), -0.06689 (11), 
Length of domains: 1161
Time: pickout 0.0718    decision 0.0490    set_bounds 0.0563    solve 0.2414    add 0.0973    
Accumulated time: pickout 0.1492    decision 0.7249    set_bounds 0.2217    solve 1.5255    add 1.7069    
Current (lb-rhs): -0.08319425582885742
2644 domains visited
Cumulative time: 5.2734291553497314

BaB round 6
batch: 1161
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1625] [/input-8, 1610] [/input-8, 1625] [/input-8, 1625] [/input-8, 1610] [/input-8, 1625] [/input-8, 1610] [/input-8, 1609] [/input-8, 1625] [/input-8, 1610] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08266401290893555
10 lb beta sum: 0.4025983214378357, worst -0.08070909976959229
Time: prepare 0.0501    bound 0.1885    transfer 0.0302    finalize 0.0168    func 0.3036    
Accumulated time: func 2.0088    prepare 0.2059    bound 1.6334    transfer 0.0813    finalize 0.0511    
all_split False
======================Cut inference begins======================
max lb tensor(0.28549317) min lb tensor(-0.08070493)
Number of Verified Splits: 298 of 2322
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 6
#cuts 4-6: 7
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.12102556228637695 
BICCOS Cumulative time: 0.6642882823944092
Preprocessing time: 0.07609820365905762 Inference time: 0.03562808036804199 Add cuts time: 0.00738835334777832 Cut analysis time: 0.0019109249114990234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08070 (12), -0.07949 (12), -0.07787 (12), -0.07514 (12), -0.07418 (12), -0.07386 (12), -0.07261 (12), -0.07258 (12), -0.07205 (12), -0.07189 (12), -0.07133 (12), -0.07130 (12), -0.07107 (12), -0.07099 (12), -0.07090 (12), -0.07069 (12), -0.07012 (12), -0.06925 (12), -0.06864 (12), -0.06860 (12), 
Length of domains: 2024
Time: pickout 0.0307    decision 0.2319    set_bounds 0.0998    solve 0.3043    add 0.1454    
Accumulated time: pickout 0.1799    decision 0.9568    set_bounds 0.3215    solve 1.8297    add 1.8524    
Current (lb-rhs): -0.08070492744445801
4668 domains visited
Cumulative time: 6.217709302902222

BaB round 7
batch: 2024
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 641] [/input-8, 1609] [/input-8, 680] [/input-8, 641] [/input-8, 1609] [/input-8, 641] [/input-8, 1625] [/input-8, 680] [/input-8, 641] [/input-8, 1625] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07918787002563477
10 lb beta sum: 0.38118621706962585, worst -0.07719850540161133
Time: prepare 0.0935    bound 0.2828    transfer 0.0512    finalize 0.2030    func 0.6597    
Accumulated time: func 2.6685    prepare 0.2996    bound 1.9162    transfer 0.1324    finalize 0.2541    
all_split False
======================Cut inference begins======================
max lb tensor(0.27841228) min lb tensor(-0.07717764)
Number of Verified Splits: 645 of 4048
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.cuts
CPLEX cuts have not been generated yet.
cuts preparing time: 0.0010
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 6
#cuts 4-6: 17
#cuts 7-9: 12
#cuts >= 20: 0
BICCOS time: 0.23751425743103027 
BICCOS Cumulative time: 0.9018025398254395
Preprocessing time: 0.13646984100341797 Inference time: 0.08608579635620117 Add cuts time: 0.012155294418334961 Cut analysis time: 0.002803325653076172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07718 (13), -0.07699 (13), -0.07597 (13), -0.07578 (13), -0.07544 (13), -0.07513 (13), -0.07435 (13), -0.07416 (13), -0.07255 (13), -0.07203 (13), -0.07188 (13), -0.07099 (13), -0.07088 (13), -0.07087 (13), -0.07067 (13), -0.07025 (13), -0.07020 (13), -0.07012 (13), -0.06924 (13), -0.06905 (13), 
Length of domains: 3403
Time: pickout 0.1036    decision 0.1221    set_bounds 0.1797    solve 0.6613    add 0.1754    
Accumulated time: pickout 0.2835    decision 1.0789    set_bounds 0.5012    solve 2.4910    add 2.0278    
Current (lb-rhs): -0.07717764377593994
8071 domains visited
Cumulative time: 7.713449716567993

BaB round 8
batch: 3403
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 86] [/input-8, 86] [/input-8, 1609] [/input-8, 86] [/input-8, 641] [/input-8, 86] [/input-8, 86] [/input-8, 86] [/input-8, 641] [/input-8, 86] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07717728614807129
10 lb beta sum: 0.3465158939361572, worst -0.07718110084533691
Time: prepare 0.1657    bound 0.4341    transfer 0.0678    finalize 0.0428    func 0.7564    
Accumulated time: func 3.4249    prepare 0.4656    bound 2.3502    transfer 0.2002    finalize 0.2970    
all_split False
======================Cut inference begins======================
max lb tensor(0.38868189) min lb tensor(-0.07717216)
Number of Verified Splits: 1683 of 6806
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.cuts
CPLEX cuts names loaded.
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.cuts: total 527 constraints, 19098 nonzero elements
cuts preparing time: 0.0098
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 570.
#cuts 1-3: 105
#cuts 4-6: 25
#cuts 7-9: 13
#cuts 10-12: 4
#cuts 13-15: 12
#cuts 16-18: 19
#cuts 19-21: 28
#cuts >= 20: 364
BICCOS time: 0.6463203430175781 
BICCOS Cumulative time: 1.5481228828430176
Preprocessing time: 0.224135160446167 Inference time: 0.22692036628723145 Add cuts time: 0.033083438873291016 Cut analysis time: 0.16218137741088867
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07717 (14), -0.07699 (14), -0.07596 (14), -0.07578 (14), -0.07544 (14), -0.07493 (14), -0.07435 (14), -0.07396 (14), -0.07183 (14), -0.07080 (14), -0.07047 (14), -0.07024 (14), -0.07018 (14), -0.06993 (14), -0.06935 (14), -0.06905 (14), -0.06905 (14), -0.06896 (14), -0.06882 (14), -0.06879 (14), 
Length of domains: 5123
Time: pickout 0.0657    decision 0.1963    set_bounds 0.4777    solve 0.7580    add 0.1601    
Accumulated time: pickout 0.3492    decision 1.2752    set_bounds 0.9790    solve 3.2490    add 2.1879    
Current (lb-rhs): -0.0771721601486206
13194 domains visited
Cumulative time: 10.045204639434814

BaB round 9
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1134] [/input-8, 641] [/input-8, 1134] [/input-8, 86] [/input-8, 641] [/input-8, 1134] [/input-8, 86] [/input-8, 1134] [/input-8, 641] [/input-8, 641] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07416713237762451
10 lb beta sum: 3.211454391479492, worst -0.02689361572265625
Time: prepare 0.2073    bound 1.5020    transfer 0.0750    finalize 0.0611    func 1.9005    
Accumulated time: func 5.3254    prepare 0.6731    bound 3.8522    transfer 0.2752    finalize 0.3580    
all_split False
======================Cut inference begins======================
max lb tensor(0.39545149) min lb tensor(-0.01726514)
Number of Verified Splits: 8087 of 8192
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.cuts
cut /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.cuts: total 957 constraints, 36257 nonzero elements
cuts preparing time: 0.0164
BICCOS and MIP cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 974.
#cuts 1-3: 200
#cuts 7-9: 3
#cuts 10-12: 21
#cuts 13-15: 39
#cuts 16-18: 52
#cuts 19-21: 42
#cuts >= 20: 617
BICCOS time: 1.9917230606079102 
BICCOS Cumulative time: 3.5398459434509277
Preprocessing time: 0.49285197257995605 Inference time: 1.0926010608673096 Add cuts time: 0.09432816505432129 Cut analysis time: 0.31194186210632324
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07717 (14), -0.07544 (14), -0.07396 (14), -0.07183 (14), -0.07080 (14), -0.07047 (14), -0.06993 (14), -0.06935 (14), -0.06905 (14), -0.06879 (14), -0.06799 (14), -0.06795 (14), -0.06736 (14), -0.06624 (14), -0.06498 (14), -0.06485 (14), -0.06468 (14), -0.06442 (14), -0.06423 (14), -0.06407 (14), 
Length of domains: 1132
Time: pickout 0.0814    decision 0.4368    set_bounds 0.3572    solve 1.9035    add 0.0738    
Accumulated time: pickout 0.4306    decision 1.7120    set_bounds 1.3362    solve 5.1525    add 2.2617    
Current (lb-rhs): -0.0771721601486206
13299 domains visited
current_vram/total_varm: 11.0GB/99.9GB, batch_size increase to 8192
Cumulative time: 14.99607229232788

BaB round 10
batch: 1132
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2504] [/input, 2503] [/input-8, 667] [/input-8, 86] [/input-8, 680] [/input, 2504] [/input, 2503] [/input-8, 667] [/input-8, 1610] [/input-8, 1618] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07495033740997314
10 lb beta sum: 3.3675384521484375, worst -0.027253270149230957
Time: prepare 0.0523    bound 0.5955    transfer 0.0396    finalize 0.1846    func 0.8877    
Accumulated time: func 6.2131    prepare 0.7257    bound 4.4477    transfer 0.3148    finalize 0.5427    
all_split False
======================Cut inference begins======================
max lb tensor(1.47070026) min lb tensor(6.56843185e-05)
Number of Verified Splits: 2264 of 2264
No cut inferred: All or none verified.
Matched cut cplex process, internal label idx = 1
Trying to loading cuts from /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.cuts
Cuts have not been updated in CPLEX; still using old cuts.
cuts preparing time: 0.0018
Total number of valid cuts: 974.
#cuts 1-3: 200
#cuts 7-9: 3
#cuts 10-12: 21
#cuts 13-15: 39
#cuts 16-18: 52
#cuts 19-21: 42
#cuts >= 20: 617
BICCOS time: 0.0754387378692627 
BICCOS Cumulative time: 3.6152846813201904
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0293    decision 0.0735    set_bounds 0.0929    solve 0.8882    add 0.0001    
Accumulated time: pickout 0.4599    decision 1.7854    set_bounds 1.4290    solve 6.0406    add 2.2618    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
13299 domains visited
Cumulative time: 16.171813011169434

found process to kill: terminal indx = 1
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.mps
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.cuts
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.indx
removing /tmp/abcrown_cuts_29014/cplexmip_lay-16_starttime=1730264863_idx=198_spec=1_26569751.log
found process to kill: terminal indx = 2
found process to kill: terminal indx = 4
found process for pidx=1
kill process for pidx=1
found process for pidx=2
found process for pidx=4
Result: safe in 23.8775 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 199, vnnlib ID: 199 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.87905216, -4.83922100, -4.88939095, -3.64813495, -4.49923706,
         -4.07969141, -3.29299521, -4.57696962, -6.84988213, -3.62618971]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [599]; unstable size 599; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 271, 1, 599] with unstable size 270 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 599] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 599] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [270]; unstable size 270; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 270] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 270] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.17035913, -1.17387581, -0.10739541, -1.19881487, -0.49474263,
         -1.09854054, -0.81328833,  0.67185187, -1.93993354]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.87905216, -4.83922100, -4.88939095, -3.64813495, -4.49923706,
         -4.07969141, -3.29299521, -4.57696962, -6.84988213, -3.62618971]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.36530113, -4.46552944, -4.53977442, -3.13573337, -4.17941523,
          -3.49873066, -3.40608001, -4.02694654, -6.27872658, -3.10767889],
         [-5.36530113, -4.46552944, -4.53977442, -3.13573337, -4.17941523,
          -3.49873066, -3.40608001, -4.02694654, -6.27872658, -3.10767889]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.05944943,  1.13369441, -0.27034664,  0.77333522,  0.09265065,
           0.62086654, -0.29840112]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0146 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0483 seconds
############# Summary #############
Final verified acc: 49.0% (total 200 examples)
Problem instances count: 200 , total verified (safe/unsat): 98 , total falsified (unsafe/sat): 100 , timeout: 2
mean time for ALL instances (total 200):4.231927211880812, max time: 212.13982844352722
mean time for verified SAFE instances(total 98): 4.26272527295716, max time: 50.195761919021606
mean time for verified (SAFE + UNSAFE) instances (total 198): 2.1585786727943805, max time: [2.114922046661377, 0.4637117385864258, 0.03897380828857422, 0.050726890563964844, 0.0638420581817627, 0.06254029273986816, 0.06810879707336426, 0.08653092384338379, 0.06844115257263184, 0.07448339462280273, 0.07646942138671875, 0.06893420219421387, 0.07587599754333496, 0.05485033988952637, 0.04042792320251465, 0.06772494316101074, 0.04750800132751465, 0.07627296447753906, 0.07773923873901367, 0.07235479354858398, 0.07248091697692871, 0.0730752944946289, 0.06530165672302246, 0.06292152404785156, 0.04413485527038574, 0.0848081111907959, 0.0779261589050293, 0.04911470413208008, 0.08411431312561035, 0.08051252365112305, 0.2941153049468994, 0.18668794631958008, 0.05146980285644531, 0.07457160949707031, 0.06361937522888184, 0.06775045394897461, 0.06717824935913086, 0.07035613059997559, 0.07576775550842285, 0.05524754524230957, 0.07182526588439941, 0.0767204761505127, 0.08054709434509277, 0.07669401168823242, 0.08045053482055664, 0.08298349380493164, 0.08596420288085938, 0.06921744346618652, 0.07220792770385742, 0.07727718353271484, 0.08872294425964355, 0.03206324577331543, 0.07180929183959961, 0.061194658279418945, 0.05452871322631836, 0.07421064376831055, 0.053528785705566406, 0.048731088638305664, 0.13003754615783691, 0.07719063758850098, 0.06983017921447754, 0.04723954200744629, 0.043839216232299805, 0.08567237854003906, 0.04807472229003906, 0.04857778549194336, 0.08706164360046387, 0.08938002586364746, 0.0795738697052002, 0.06870675086975098, 0.07998108863830566, 0.07361745834350586, 0.07850837707519531, 0.07791376113891602, 0.03965353965759277, 0.07604813575744629, 0.07209992408752441, 0.06911754608154297, 0.07065463066101074, 0.05928301811218262, 0.07265257835388184, 0.0697014331817627, 0.07058143615722656, 0.0818321704864502, 0.07525444030761719, 0.07205629348754883, 0.07843875885009766, 0.0668020248413086, 0.07868695259094238, 0.05865621566772461, 0.06795048713684082, 0.05581951141357422, 0.05538511276245117, 0.07987713813781738, 0.059541940689086914, 0.07163119316101074, 0.06897926330566406, 0.07166171073913574, 0.06534671783447266, 0.048313140869140625]
mean time for verified SAFE + TIMEOUT instances (total 100): 8.367339842319488, max time: [212.13982844352722, 206.84707903862] 
mean time for verified UNSAFE instances (total 100): 0.09651500463485718, max time: 2.114922046661377
unsafe-pgd (total 100), index: [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 18, 19, 25, 29, 32, 34, 35, 36, 43, 44, 45, 46, 50, 53, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 69, 72, 75, 77, 78, 80, 82, 87, 88, 90, 91, 92, 94, 96, 98, 99, 100, 101, 102, 105, 106, 108, 113, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 137, 138, 141, 143, 145, 149, 150, 151, 152, 154, 155, 156, 163, 165, 170, 173, 174, 175, 176, 181, 184, 185, 188, 191, 194, 196, 199]
safe-incomplete (total 73), index: [2, 8, 14, 17, 20, 21, 22, 23, 26, 27, 28, 30, 31, 33, 37, 39, 40, 41, 47, 48, 49, 51, 52, 62, 68, 71, 73, 74, 76, 79, 81, 83, 85, 86, 93, 104, 109, 110, 111, 114, 115, 117, 118, 121, 131, 133, 136, 140, 142, 144, 146, 147, 148, 153, 157, 159, 161, 162, 164, 166, 168, 171, 177, 178, 179, 180, 182, 186, 189, 190, 192, 193, 197]
safe (total 25), index: [11, 24, 38, 42, 54, 60, 70, 84, 89, 95, 97, 103, 107, 112, 116, 132, 139, 158, 160, 167, 169, 172, 187, 195, 198]
unknown (total 2), index: [55, 183]
