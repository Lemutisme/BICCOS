Configurations:

general:
  device: cuda
  seed: 100
  conv_mode: patches
  deterministic: false
  double_fp: false
  loss_reduction_func: sum
  sparse_alpha: true
  sparse_interm: true
  save_adv_example: false
  verify_onnxruntime_output: false
  eval_adv_example: false
  show_adv_example: false
  precompile_jit: false
  prepare_only: false
  complete_verifier: bab
  enable_incomplete_verification: true
  csv_name: null
  results_file: ablation_results/cifar_cnn_a_adv/biccos_all.out
  root_path: ''
  deterministic_opt: false
  graph_optimizer: 'Customized("custom_graph_optimizer", "default_optimizer")'
  buffer_has_batchdim: false
  save_output: false
  output_file: out.pkl
  return_optimized_model: false
model:
  name: cnn_4layer_adv
  path: models/sdp/cifar_cnn_a_adv.model
  onnx_path: null
  onnx_path_prefix: ''
  cache_onnx_conversion: false
  debug_onnx: false
  onnx_quirks: null
  input_shape: null
  onnx_loader: default_onnx_and_vnnlib_loader
  onnx_optimization_flags: []
  onnx_vnnlib_joint_optimization_flags: none
  check_optimized: false
  flatten_final_output: false
  optimize_graph: null
  with_jacobian: false
data:
  start: 0
  end: 10000
  select_instance: null
  num_outputs: 10
  mean: 0.0
  std: 1.0
  pkl_path: null
  dataset: CIFAR_SDP
  data_filter_path: null
  data_idx_file: null
specification:
  type: lp
  robustness_type: verified-acc
  norm: .inf
  epsilon: 0.00784313725
  epsilon_min: 0.0
  vnnlib_path: null
  vnnlib_path_prefix: ''
  rhs_offset: null
solver:
  batch_size: 4096
  auto_enlarge_batch_size: true
  min_batch_size_ratio: 0.1
  use_float64_in_last_iteration: false
  early_stop_patience: 10
  start_save_best: 0.5
  bound_prop_method: alpha-crown
  init_bound_prop_method: same
  prune_after_crown: false
  optimize_disjuncts_separately: false
  crown:
    batch_size: 1000000000
    max_crown_size: 1000000000
    relu_option: adaptive
    compare_crown_with_ibp: false
  alpha-crown:
    alpha: true
    lr_alpha: 0.1
    iteration: 100
    share_alphas: false
    lr_decay: 0.98
    full_conv_alpha: true
    max_coeff_mul: .inf
    matmul_share_alphas: false
    disable_optimization: []
    max_time: 1.0
  invprop:
    apply_output_constraints_to: []
    tighten_input_bounds: false
    best_of_oc_and_no_oc: false
    directly_optimize: []
    oc_lr: 0.1
    share_gammas: false
  beta-crown:
    lr_alpha: 0.01
    lr_beta: 0.05
    lr_decay: 0.98
    optimizer: adam
    iteration: 20
    beta: true
    beta_warmup: true
    enable_opt_interm_bounds: false
    all_node_split_LP: false
  forward:
    refine: false
    max_dim: 10000
    reset_threshold: 1.0
  intermediate_refinement:
    enabled: false
    batch_size: 10
    opt_coeffs: false
    opt_bias: false
    lr: 0.05
    layers: [-1]
    max_domains: 1000
  multi_class:
    label_batch_size: 32
    skip_with_refined_bound: true
  mip:
    unstable_neuron_threshold: 0
    parallel_solvers: null
    solver_threads: 1
    refine_neuron_timeout: 15
    refine_neuron_time_percentage: 0.8
    early_stop: true
    adv_warmup: true
    mip_solver: gurobi
    skip_unsafe: false
    topk_filter: 1.0
    sliding_window: -1
    extra_constraint: false
    refine_neuron_timeout_increasement: 0
    timeout_neuron_percentage: 0.3
    remaining_timeout_threshold: 1
    remove_unstable_neurons: false
    lp_solver: mip
    output_cut: false
bab:
  initial_max_domains: 1
  backing_up_max_domain: null
  max_domains: .inf
  decision_thresh: 0
  timeout: 200
  timeout_scale: 1
  max_iterations: -1
  override_timeout: null
  get_upper_bound: false
  pruning_in_iteration: true
  pruning_in_iteration_ratio: 0.2
  sort_targets: false
  batched_domain_list: true
  optimized_interm: ''
  interm_transfer: false
  recompute_interm: false
  sort_domain_interval: -1
  vanilla_crown: false
  tree_traversal: breadth_first
  cut:
    enabled: true
    cuts_path: /tmp/abcrown_cuts_13752
    implication: false
    bab_cut: true
    lp_cut: false
    method: null
    lr: 0.01
    lr_decay: 0.99
    iteration: 200
    bab_iteration: -1
    early_stop_patience: -1
    lr_beta: 0.05
    number_cuts: 500
    topk_cuts_in_filter: 1000
    batch_size_primal: 100
    max_num: 1000000000
    patches_cut: false
    cplex_cuts: false
    cplex_cuts_wait: 0
    cplex_cuts_revpickup: true
    cut_reference_bounds: true
    fix_intermediate_bounds: false
    _tmp_cuts: null
    fixed_cuts: false
    add_implied_cuts: false
    add_input_cuts: false
    biccos:
      enabled: true
      auto_param: false
      constraint_strengthening: true
      recursively_strengthening: false
      merge_cut_enabled: false
      fast_inference_enabled: false
      drop_ratio: 0.5
      max_infer_iter: 40
      heuristic: neuron_influence_score
      save_cuts: false
      multi_tree_branching:
        enabled: true
        restore_best_tree: true
        keep_n_best_domains: 50
        target_batch_size: 200
        iterations: 5
  branching:
    method: kfsb
    candidates: 3
    reduceop: max
    enable_intermediate_bound_opt: false
    branching_input_and_activation: false
    branching_input_and_activation_order: [input, relu]
    branching_input_iterations: 30
    branching_relu_iterations: 50
    nonlinear_split:
      method: shortcut
      branching_point_method: uniform
      num_branches: 2
      filter: false
      filter_beta: false
      filter_clamp: false
      filter_batch_size: 10000
      filter_iterations: 25
      relu_only: false
      loose_tanh_threshold: null
      dynamic_bbps: false
      dynamic_options: [uniform, three_left, three_right]
      branching_point_node: ''
      branching_point_db: []
    input_split:
      enable_clip_domains: false
      split_hint: null
      reorder_bab: false
      enable: false
      enhanced_bound_prop_method: alpha-crown
      enhanced_branching_method: naive
      enhanced_bound_patience: 100000000.0
      attack_patience: 100000000.0
      adv_check: 0
      split_partitions: 2
      sb_margin_weight: 1.0
      sb_sum: false
      sb_primary_spec: null
      bf_backup_thresh: -1
      bf_rhs_offset: 0
      bf_iters: 1000000000.0
      bf_batch_size: 100000
      bf_zero_crossing_score: false
      touch_zero_score: 0
      ibp_enhancement: false
      catch_assertion: false
      compare_with_old_bounds: false
      update_rhs_with_attack: false
      sb_coeff_thresh: 0.001
      sort_index: null
      sort_descending: true
      show_progress: false
      presplit_domains: null
      skip_getting_worst_domain: false
  attack:
    enabled: false
    beam_candidates: 8
    beam_depth: 7
    max_dive_fix_ratio: 0.8
    min_local_free_ratio: 0.2
    mip_start_iteration: 5
    mip_timeout: 30.0
    adv_pool_threshold: null
    refined_mip_attacker: false
    refined_batch_size: null
attack:
  pgd_order: middle
  pgd_steps: 100
  pgd_restarts: 50
  pgd_batch_size: 100000000
  pgd_early_stop: true
  pgd_lr_decay: 0.99
  pgd_alpha: auto
  pgd_alpha_scale: false
  pgd_loss_mode: null
  pgd_restart_when_stuck: false
  enable_mip_attack: false
  adv_saver: default_adv_saver
  adv_verifier: default_adv_verifier
  early_stop_condition: default_early_stop_condition
  adv_example_finalizer: default_adv_example_finalizer
  pgd_loss: default_pgd_loss
  cex_path: ./test_cex.txt
  attack_mode: PGD
  attack_tolerance: 0.0
  attack_func: attack_with_general_specs
  gama_lambda: 10.0
  gama_decay: 0.9
  check_clean: false
  input_split:
    pgd_steps: 100
    pgd_restarts: 30
    pgd_alpha: auto
  input_split_enhanced:
    pgd_steps: 200
    pgd_restarts: 500000
    pgd_alpha: auto
  input_split_check_adv:
    enabled: auto
    pgd_steps: 5
    pgd_restarts: 5
    pgd_alpha: auto
    max_num_domains: 10
debug:
  view_model: false
  lp_test: null
  rescale_vnnlib_ptb: null
  test_optimized_bounds: false
  test_optimized_bounds_after_n_iterations: 0
  print_verbose_decisions: false
  biccos_mip_sanity_check: false
  sanity_check: 0
  z_split_enabled: false

Experiments at Wed Oct 30 05:41:17 2024 on n23g0012.hpc.itc.rwth-aachen.de
Sequential(
  (0): Conv2d(3, 16, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (1): ReLU()
  (2): Conv2d(16, 32, kernel_size=(4, 4), stride=(2, 2), padding=(1, 1))
  (3): ReLU()
  (4): Flatten(start_dim=1, end_dim=-1)
  (5): Linear(in_features=2048, out_features=100, bias=True)
  (6): ReLU()
  (7): Linear(in_features=100, out_features=10, bias=True)
)
Parameters:
  0.weight: shape torch.Size([16, 3, 4, 4])
  0.bias: shape torch.Size([16])
  2.weight: shape torch.Size([32, 16, 4, 4])
  2.bias: shape torch.Size([32])
  5.weight: shape torch.Size([100, 2048])
  5.bias: shape torch.Size([100])
  7.weight: shape torch.Size([10, 100])
  7.bias: shape torch.Size([10])
############################
Sampled data loaded. Data already preprocessed!
Shape: torch.Size([200, 3, 32, 32]) torch.Size([200]) torch.Size([200])
X range: tensor(2.12560368) tensor(-1.98888886) tensor(-0.01308715)
############################
Internal results will be saved to ablation_results/cifar_cnn_a_adv/biccos_all.out.

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 0, vnnlib ID: 0 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.60389853, -4.03890705, -0.96637481, -1.08776557, -1.28065956,
         -1.57759106, -2.01748729, -1.63907158, -4.69097900, -3.85279989]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [218]; unstable size 218; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 98, 1, 218] with unstable size 97 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 218] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 218] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [97]; unstable size 97; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 97] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 97] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.15867972,  2.57397437, -0.32336402, -0.12450457,  0.40432659,
          0.56075490,  0.24401042,  3.10249329,  2.30172920]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.60389853, -4.03890705, -0.96637481, -1.08776557, -1.28065956,
         -1.57759106, -2.01748729, -1.63907158, -4.69097900, -3.85279989]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.60389853, -4.03890657, -0.96637493, -1.08776581, -1.28065979,
          -1.57759106, -2.01748776, -1.63907230, -4.69097900, -3.85279989],
         [-2.60389853, -4.03890657, -0.96637493, -1.08776581, -1.28065979,
          -1.57759106, -2.01748776, -1.63907230, -4.69097900, -3.85279989]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12139088,  0.19289398]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.97301579, -1.96507931, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.96507931],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.94126987,
            -1.96507931, -1.97301579],
           ...,
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.93236721,
            -1.93236721, -1.96457338],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.95652175,
            -1.95652175, -1.96457338],
           [-1.96457338, -1.95652175, -1.94847023,  ..., -1.96457338,
            -1.96457338, -1.95652175],
           ...,
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.66266882, -1.64767623],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.68515754,
            -1.68515754, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           ...,
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.96507931, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.96507931],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.96507931, -1.97301579, -1.97301579,  ..., -1.94126987,
            -1.96507931, -1.97301579],
           ...,
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.97301579, -1.97301579]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.93236721,
            -1.93236721, -1.96457338],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.95652175,
            -1.95652175, -1.96457338],
           [-1.96457338, -1.95652175, -1.94847023,  ..., -1.96457338,
            -1.96457338, -1.95652175],
           ...,
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.66266882, -1.64767623],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.68515754,
            -1.68515754, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           ...,
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 5.1951 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 1, vnnlib ID: 1 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.91239977,  1.30044675, -7.26831532, -7.87342548, -7.74763012,
         -8.46835899, -6.64607763, -8.08242130, -6.15906239,  1.63948882]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [567]; unstable size 567; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 163, 1, 567] with unstable size 162 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 567] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 567] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [162]; unstable size 162; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 162] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 162] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.13653445, -0.81675255,  7.20471859,  7.60528660,  7.75195885,
          8.15056038,  6.22120667,  7.95112467,  6.37312317]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.91239977,  1.30044675, -7.26831532, -7.87342548, -7.74763012,
         -8.46835899, -6.64607763, -8.08242130, -6.15906239,  1.63948882]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:01<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.29230642,  1.39088631, -7.69417095, -8.36273766, -8.14110756,
          -8.96644974, -7.15948677, -8.63516712, -6.20971012,  1.18852425]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.20236206]]], device='cuda:0')
number of violation:  1
Attack finished in 1.1146 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 1.1863 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 2, vnnlib ID: 2 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.38900280,  -6.91815758, -13.39404202, -12.50848293, -12.34240627,
         -13.34833145, -12.47480679, -13.81170845, -10.09896183,  -8.65394974]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [799]; unstable size 799; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 220, 1, 799] with unstable size 219 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 799] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 799] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [219]; unstable size 219; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 219] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 219] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.81504011, 4.21952724, 3.42959118, 3.38334274, 4.03887367, 3.68367100,
         4.85273266, 1.66043186, 0.65433002]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0687 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 3, vnnlib ID: 3 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.38513088, -15.12822247,  -7.38964939,  -7.50558901,  -6.26222038,
          -6.85573816, -10.31254101,  -5.30293274, -15.13275623, -13.36650562]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [471]; unstable size 471; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 471] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 471] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 471] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 208] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.96806812,  7.51881886,  0.34542716,  0.43789989, -0.23603088,
          3.05391502, -1.87563014,  7.75412464,  5.88288021]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.38513088, -15.12822247,  -7.38964939,  -7.50558901,  -6.26222038,
          -6.85573816, -10.31254101,  -5.30293274, -15.13275623, -13.36650562]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.38513088, -15.12822247,  -7.38964939,  -7.50558901,  -6.26222038,
           -6.85573816, -10.31254101,  -5.30293274, -15.13275719, -13.36650467],
         [-12.38513088, -15.12822247,  -7.38964939,  -7.50558901,  -6.26222038,
           -6.85573816, -10.31254101,  -5.30293274, -15.13275719, -13.36650467]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.59351778, -0.95928764]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.28095245, -0.35396814, -0.21111101,  ..., -0.43333322,
            -0.76666665,  0.32857150],
           [-1.11587298, -0.44920623, -0.59206349,  ..., -0.41746020,
            -1.09999990, -1.02063489],
           [-1.30634916, -0.59206349, -0.86190474,  ..., -0.06825387,
            -0.81428570, -1.17936504],
           ...,
           [ 0.94761908,  1.24920666,  1.42380977,  ...,  1.45555580,
             1.15396857,  0.80476195],
           [ 0.77301592,  0.97936511,  1.23333359,  ...,  1.18571460,
             1.13809550,  0.86825401],
           [ 0.85238099,  0.24920642,  0.50317466,  ...,  0.86825401,
             0.86825401,  0.99523818]],

          [[ 0.28985518, -0.33816412, -0.19323659,  ..., -0.46698871,
            -0.78904986,  0.33816436],
           [-1.11111104, -0.41867942, -0.54750401,  ..., -0.48309177,
            -1.12721407, -1.03059578],
           [-1.28824472, -0.54750401, -0.80515295,  ..., -0.17713353,
            -0.86956519, -1.17552328],
           ...,
           [ 0.93397754,  1.06280196,  1.20772982,  ...,  1.33655429,
             1.14331758,  0.83735919],
           [ 0.78904998,  0.85346222,  1.04669893,  ...,  1.14331758,
             1.19162667,  0.98228669],
           [ 0.88566834,  0.17713377,  0.35426742,  ...,  0.83735919,
             0.90177143,  1.07890511]],

          [[ 0.40629703, -0.26836565, -0.22338814,  ..., -0.35832080,
            -0.55322337,  0.48125952],
           [-0.92803597, -0.37331331, -0.56821585,  ..., -0.41829082,
            -0.91304344, -0.80809593],
           [-1.10794616, -0.53823084, -0.85307342,  ..., -0.19340314,
            -0.74812591, -1.01799107],
           ...,
           [ 0.28635699,  0.34632701,  0.52623707,  ...,  0.51124454,
             0.31634200,  0.09145443],
           [ 0.36131951,  0.34632701,  0.55622208,  ...,  0.27136448,
             0.34632701,  0.24137947],
           [ 0.69115460, -0.01349309,  0.18140946,  ...,  0.37631202,
             0.48125952,  0.75112462]]],


         [[[ 0.28095245, -0.35396814, -0.21111101,  ..., -0.43333322,
            -0.76666665,  0.32857150],
           [-1.11587298, -0.44920623, -0.59206349,  ..., -0.41746020,
            -1.09999990, -1.02063489],
           [-1.30634916, -0.59206349, -0.86190474,  ..., -0.06825387,
            -0.81428570, -1.17936504],
           ...,
           [ 0.94761908,  1.24920666,  1.42380977,  ...,  1.45555580,
             1.15396857,  0.80476195],
           [ 0.77301592,  0.97936511,  1.23333359,  ...,  1.18571460,
             1.13809550,  0.86825401],
           [ 0.85238099,  0.24920642,  0.50317466,  ...,  0.86825401,
             0.86825401,  0.99523818]],

          [[ 0.28985518, -0.33816412, -0.19323659,  ..., -0.46698871,
            -0.78904986,  0.33816436],
           [-1.11111104, -0.41867942, -0.54750401,  ..., -0.48309177,
            -1.12721407, -1.03059578],
           [-1.28824472, -0.54750401, -0.80515295,  ..., -0.17713353,
            -0.86956519, -1.17552328],
           ...,
           [ 0.93397754,  1.06280196,  1.20772982,  ...,  1.33655429,
             1.14331758,  0.83735919],
           [ 0.78904998,  0.85346222,  1.04669893,  ...,  1.14331758,
             1.19162667,  0.98228669],
           [ 0.88566834,  0.17713377,  0.35426742,  ...,  0.83735919,
             0.90177143,  1.07890511]],

          [[ 0.40629703, -0.26836565, -0.22338814,  ..., -0.35832080,
            -0.55322337,  0.48125952],
           [-0.92803597, -0.37331331, -0.56821585,  ..., -0.41829082,
            -0.91304344, -0.80809593],
           [-1.10794616, -0.53823084, -0.85307342,  ..., -0.19340314,
            -0.74812591, -1.01799107],
           ...,
           [ 0.28635699,  0.34632701,  0.52623707,  ...,  0.51124454,
             0.31634200,  0.09145443],
           [ 0.36131951,  0.34632701,  0.55622208,  ...,  0.27136448,
             0.34632701,  0.24137947],
           [ 0.69115460, -0.01349309,  0.18140946,  ...,  0.37631202,
             0.48125952,  0.75112462]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0724 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 4, vnnlib ID: 4 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.68809223, -12.13025570,  -6.63767338,  -9.10205269,  -6.98852253,
          -8.95999241,  -8.94991684,  -9.34213543, -12.00477028, -11.17362881]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [543]; unstable size 543; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 225, 1, 543] with unstable size 224 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 543] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 543] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [224]; unstable size 224; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 224] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 224] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.20494175,  3.45831966, -1.40828764,  1.23128462,  0.91527987,
          0.49897814,  1.02173996,  3.54240751,  2.59704590]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.68809223, -12.13025570,  -6.63767338,  -9.10205269,  -6.98852253,
          -8.95999241,  -8.94991684,  -9.34213543, -12.00477028, -11.17362881]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.68809223, -12.13025570,  -6.63767338,  -9.10205269,  -6.98852253,
           -8.95999241,  -8.94991684,  -9.34213543, -12.00477028, -11.17362881]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.35084915]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.45555562,  0.47142863,  0.50317466,  ...,  0.23333341,
             0.16984135, -0.06825387],
           [ 0.37619054,  0.55079371,  0.91587305,  ...,  0.39206356,
             0.59841275,  0.21746039],
           [ 0.47142863,  0.64603180,  0.70952386,  ...,  0.58253974,
             0.85238099,  0.82063496],
           ...,
           [ 0.32857150,  0.55079371,  0.18571436,  ..., -0.67142856,
            -1.22698402, -1.06825387],
           [ 0.47142863,  0.47142863,  0.21746039,  ..., -0.00476181,
            -1.14761901, -1.44920623],
           [ 0.45555562,  0.15396833, -0.11587292,  ...,  1.04285717,
             0.34444451, -0.54444444]],

          [[ 1.03059590,  1.09500813,  1.19162667,  ...,  1.12721443,
             0.96618366,  0.70853472],
           [ 1.03059590,  1.14331758,  1.28824508,  ...,  1.27214205,
             1.36876035,  0.98228669],
           [ 1.15942061,  1.22383285,  1.23993587,  ...,  1.38486338,
             1.54589403,  1.44927561],
           ...,
           [ 1.07890511,  1.28824508,  0.86956531,  ..., -0.70853460,
            -1.20772946, -0.96618354],
           [ 1.15942061,  1.22383285,  1.03059590,  ..., -0.19323659,
            -1.12721407, -1.33655393],
           [ 1.07890511,  0.93397754,  0.85346222,  ...,  0.99838978,
             0.28985518, -0.43478248]],

          [[ 0.10644694,  0.19640197,  0.42128953,  ..., -0.01349309,
             0.09145443, -0.31334329],
           [ 0.16641696,  0.45127454,  0.94602716,  ...,  0.19640197,
             0.75112462,  0.28635699],
           [ 0.16641696,  0.39130452,  0.48125952,  ...,  0.36131951,
             0.91604215,  1.03598225],
           ...,
           [ 0.06146942,  0.37631202,  0.07646193,  ..., -0.83808094,
            -1.27286363, -1.09295356],
           [ 0.19640197,  0.37631202, -0.11844061,  ..., -0.43328333,
            -1.27286363, -1.42278874],
           [ 0.25637197, -0.14842562, -0.73313338,  ...,  0.82608712,
            -0.02848560, -0.82308841]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0759 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 5, vnnlib ID: 5 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.08061361, -7.35808754, -1.52466714, -0.79548538, -0.38909817,
         -1.03977191, -3.36049914, -3.42065954, -6.66970348, -6.69352865]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [658]; unstable size 658; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 201, 1, 658] with unstable size 200 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 658] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 658] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 200] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.36226177,  5.20612240,  0.11421585, -0.45663384, -0.35881916,
          1.67416477,  1.85006595,  4.62577057,  5.01755476]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.08061361, -7.35808754, -1.52466714, -0.79548538, -0.38909817,
         -1.03977191, -3.36049914, -3.42065954, -6.66970348, -6.69352865]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-1.72007203, -6.67509556, -1.02529848, -0.02632031, -0.06467843,
          -0.23389345, -2.63078475, -2.87741232, -6.08596230, -5.98822784],
         [-1.72007203, -6.67509556, -1.02529848, -0.02632031, -0.06467843,
          -0.23389345, -2.63078475, -2.87741232, -6.08596230, -5.98822784]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.03835812,  0.16921502]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0116 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0843 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 6, vnnlib ID: 6 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.40164280,  -8.37019825, -13.00969315, -14.79013634, -13.45650959,
         -15.46328926, -15.14051628, -13.42083931,  -9.22426891, -11.21731853]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [529]; unstable size 529; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 529] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 529] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 529] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 192] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.41059232,  2.25627089,  3.81135964,  2.82651424,  4.25359440,
          4.02583933,  2.31334543, -1.35637188,  0.51038718]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.40164280,  -8.37019825, -13.00969315, -14.79013634, -13.45650959,
         -15.46328926, -15.14051628, -13.42083931,  -9.22426891, -11.21731853]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.40164471,  -8.37019730, -13.00969315, -14.79013538, -13.45650864,
          -15.46328926, -15.14051723, -13.42084026,  -9.22426891, -11.21731758],
         [ -9.40164471,  -8.37019730, -13.00969315, -14.79013538, -13.45650864,
          -15.46328926, -15.14051723, -13.42084026,  -9.22426891, -11.21731758]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.03144741, -0.17737579]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]],


         [[[ 0.55079371,  0.96349210,  0.82063496,  ..., -0.19523799,
            -0.21111101, -0.16349196],
           [ 0.21746039,  0.55079371, -0.21111101,  ..., -0.29047608,
            -0.30634910, -0.29047608],
           [ 0.01111121, -0.36984116, -0.40158719,  ..., -0.49682540,
            -0.48095238, -0.43333322],
           ...,
           [-0.62380952, -0.63968253, -0.65555555,  ..., -0.56031746,
            -0.54444444, -0.41746020],
           [-0.60793650, -0.65555555, -0.63968253,  ..., -0.52857143,
            -0.48095238, -0.36984116],
           [-0.56031746, -0.60793650, -0.62380952,  ..., -0.65555555,
            -0.59206349, -0.52857143]],

          [[ 0.61191636,  1.07890511,  0.98228669,  ..., -0.01610294,
            -0.01610294,  0.03220624],
           [ 0.12882459,  0.56360716, -0.12882435,  ..., -0.40257636,
            -0.41867942, -0.40257636],
           [-0.27375188, -0.57971013, -0.54750401,  ..., -1.06280184,
            -1.04669881, -1.01449275],
           ...,
           [-0.46698871, -0.48309177, -0.49919480,  ..., -0.46698871,
            -0.49919480, -0.45088565],
           [-0.45088565, -0.49919480, -0.48309177,  ..., -0.41867942,
            -0.43478248, -0.40257636],
           [-0.43478248, -0.48309177, -0.49919480,  ..., -0.49919480,
            -0.46698871, -0.45088565]],

          [[ 0.87106466,  1.38081002,  1.27586246,  ...,  0.27136448,
             0.24137947,  0.28635699],
           [ 0.30134949,  0.78110963,  0.13643195,  ..., -0.23838064,
            -0.23838064, -0.22338814],
           [-0.17841063, -0.37331331, -0.34332830,  ..., -1.09295356,
            -1.04797614, -0.98800600],
           ...,
           [-1.16791618, -1.18290865, -1.19790113,  ..., -1.15292358,
            -1.18290865, -1.12293863],
           [-1.15292358, -1.19790113, -1.19790113,  ..., -1.13793111,
            -1.12293863, -1.07796109],
           [-1.15292358, -1.18290865, -1.19790113,  ..., -1.22788620,
            -1.19790113, -1.16791618]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0752 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 7, vnnlib ID: 7 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.00835705, -8.96086788, -3.69912124, -5.03624153, -2.68869019,
         -5.63221502, -2.51778221, -6.42361641, -8.76600933, -9.71107197]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [503]; unstable size 503; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 254, 1, 503] with unstable size 253 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 503] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 503] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [253]; unstable size 253; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 253] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 253] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.85433102,  4.63593197,  0.09867120,  1.33992839, -1.07176185,
          1.69816661,  1.94883513,  4.31601429,  5.46722841]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.00835705, -8.96086788, -3.69912124, -5.03624153, -2.68869019,
         -5.63221502, -2.51778221, -6.42361641, -8.76600933, -9.71107197]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.24038744,  -9.28610897,  -3.84454465,  -5.20589828,  -2.66719246,
           -5.68954802,  -3.06507778,  -6.37724495,  -8.96725273, -10.02994823]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.39788532]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0055 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0799 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 8, vnnlib ID: 8 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.93469334, -20.12154388, -17.33457947, -19.86049843, -20.21372986,
         -21.25618935, -22.65778542, -22.05707359, -17.64817047, -20.80877304]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [1012]; unstable size 1012; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 127, 1, 1012] with unstable size 126 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 1012] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 1012] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [126]; unstable size 126; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 126] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 126] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.23773289, 2.69126439, 5.14333248, 5.34886694, 6.31123543, 7.75378323,
         7.14197063, 2.92753410, 5.99536991]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0705 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 9, vnnlib ID: 9 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.80179358, -12.46501255,  -6.57853985,  -6.68956470,  -7.61111355,
          -7.23589230,  -7.87289953,  -9.75897789,  -7.54242992, -11.49101162]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [483]; unstable size 483; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 224, 1, 483] with unstable size 223 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 483] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 483] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [223]; unstable size 223; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 223] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 223] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.44218957,  3.89411879, -1.74409604, -0.80226833, -0.57978797,
         -0.20545268,  1.59700751, -1.08158183,  2.85933137]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.80179358, -12.46501255,  -6.57853985,  -6.68956470,  -7.61111355,
          -7.23589230,  -7.87289953,  -9.75897789,  -7.54242992, -11.49101162]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.80179310, -12.46501160,  -6.57853985,  -6.68956327,  -7.61111259,
           -7.23589230,  -7.87289858,  -9.75897694,  -7.54242992, -11.49100971],
         [ -7.80179310, -12.46501160,  -6.57853985,  -6.68956327,  -7.61111259,
           -7.23589230,  -7.87289858,  -9.75897694,  -7.54242992, -11.49100971]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.56590080, -0.65735245, -0.54632902,  0.37522030,  0.63700628,
           0.30653763]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]],


         [[[-1.73492062, -1.81428576, -1.92539680,  ...,  0.61428577,
             0.56666672,  0.31269848],
           [-1.67142856, -1.81428576, -1.92539680,  ...,  0.66190481,
             0.56666672,  0.29682547],
           [-1.71904767, -1.84603179, -1.92539680,  ...,  0.72539687,
             0.51904768,  0.40793657],
           ...,
           [-1.17936504, -1.41746020, -1.13174593,  ..., -1.38571417,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.13174593,  ..., -1.40158725,
            -1.49682534, -1.38571417],
           [-0.86190474, -0.14761895,  0.74126989,  ..., -1.40158725,
            -1.46507931, -1.40158725]],

          [[-1.15942025, -1.22383249, -1.35265696,  ...,  0.41867965,
             0.32206130,  0.04830930],
           [-1.07890499, -1.22383249, -1.33655393,  ...,  0.48309189,
             0.33816436,  0.04830930],
           [-1.14331722, -1.27214170, -1.35265696,  ...,  0.56360716,
             0.32206130,  0.17713377],
           ...,
           [-0.69243151, -1.06280184, -0.85346210,  ..., -0.88566822,
            -0.95008045, -0.93397743],
           [-0.64412236, -0.78904986,  0.01610318,  ..., -0.77294683,
            -0.88566822, -0.95008045],
           [-0.43478248,  0.01610318,  0.80515307,  ..., -0.82125598,
            -0.90177131, -0.93397743]],

          [[-0.68815589, -0.62818587, -0.41829082,  ...,  0.13643195,
             0.09145443, -0.23838064],
           [-0.59820086, -0.58320838, -0.38830581,  ...,  0.24137947,
             0.12143944, -0.22338814],
           [-0.59820086, -0.56821585, -0.38830581,  ...,  0.37631202,
             0.09145443, -0.10344811],
           ...,
           [ 0.03148442, -0.05847061,  0.16641696,  ...,  0.37631202,
             0.33133450,  0.28635699],
           [-0.08845562, -0.19340314,  0.33133450,  ...,  0.28635699,
             0.22638696,  0.09145443],
           [-0.10344811,  0.09145443,  0.63118458,  ...,  0.28635699,
             0.28635699,  0.16641696]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0863 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 10, vnnlib ID: 10 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.70068169, -10.68916798,  -4.80894661,  -4.48129988,  -7.59597015,
          -3.34438372,  -9.78639984,  -5.25471544,  -8.97214031,  -9.17322254]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [326]; unstable size 326; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 99, 1, 326] with unstable size 98 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 326] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 326] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [98]; unstable size 98; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 98] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 98] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.76745200,  4.58752918, -0.99277103, -1.30379081,  1.80976796,
         -2.48497868,  3.87898970,  2.81910610,  3.04527569]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.70068169, -10.68916798,  -4.80894661,  -4.48129988,  -7.59597015,
          -3.34438372,  -9.78639984,  -5.25471544,  -8.97214031,  -9.17322254]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.70068073, -10.68916893,  -4.80894661,  -4.48130035,  -7.59597015,
           -3.34438372,  -9.78640079,  -5.25471544,  -8.97214031,  -9.17322254],
         [ -8.70068073, -10.68916893,  -4.80894661,  -4.48130035,  -7.59597015,
           -3.34438372,  -9.78640079,  -5.25471544,  -8.97214031,  -9.17322254]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44576883, -0.77341509, -1.91033173]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]],


         [[[-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           [-1.97301579, -1.97301579, -1.97301579,  ..., -1.97301579,
            -1.95714283, -1.92539680],
           ...,
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.89365077,
            -1.90952384, -1.63968253],
           [-1.97301579, -1.97301579, -1.96507931,  ..., -1.96507931,
            -1.95714283, -1.96507931],
           [-1.97301579, -1.97301579, -1.94126987,  ..., -1.97301579,
            -1.97301579, -1.96507931]],

          [[-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           [-1.96457338, -1.96457338, -1.96457338,  ..., -1.96457338,
            -1.96457338, -1.96457338],
           ...,
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.70692432,
            -1.77133656, -1.54589367],
           [-1.96457338, -1.96457338, -1.95652175,  ..., -1.80354273,
            -1.81964576, -1.86795497],
           [-1.96457338, -1.96457338, -1.93236721,  ..., -1.86795497,
            -1.91626418, -1.93236721]],

          [[-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           [-1.69265378, -1.69265378, -1.69265378,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.60269880,
            -1.63268375, -1.39280367],
           [-1.69265378, -1.69265378, -1.68515754,  ..., -1.67766130,
            -1.68515754, -1.69265378],
           [-1.69265378, -1.69265378, -1.66266882,  ..., -1.69265378,
            -1.69265378, -1.69265378]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0909 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 11, vnnlib ID: 11 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.63478470, -9.97276974, -2.42177224, -5.98180294, -3.01294947,
         -6.49992609, -5.35868835, -6.09445810, -8.49534416, -9.48241520]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [507]; unstable size 507; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 253, 1, 507] with unstable size 252 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 507] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 507] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [252]; unstable size 252; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 252] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 252] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.93055689,  5.50861359,  2.43715620, -0.28564250,  2.95803738,
          1.64144337,  2.49058795,  4.06993961,  5.13847446]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.63478470, -9.97276974, -2.42177224, -5.98180294, -3.01294947,
         -6.49992609, -5.35868835, -6.09445810, -8.49534416, -9.48241520]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.13it/s]100%|██████████| 1/1 [00:00<00:00,  9.12it/s]
/rwthfs/rz/cluster/home/cb809562/abcrown/Verifier_Development/complete_verifier/cuts/infered_cuts.py:406: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  torch.tensor(history[3]),
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.85260201, -9.94958401, -2.69204354, -5.95113659, -2.83771229,
          -6.45710039, -5.35251665, -5.97749758, -8.52292919, -9.41183758]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.14566875]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1122 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 26.609546661376953
alpha/beta optimization time: 4.061002969741821
initial alpha-crown bounds: tensor([[ 2.00031948,  5.62875366,  2.49428296, -0.20550382,  3.01036239,
          1.72182679,  2.55286360,  4.16995239,  5.23668909]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.20550382137298584
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 195.75466084480286
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 195.75461840629578
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 195.75450444221497
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 195.75446248054504
Verifying property 3 with 1 instances.
##### Instance 11 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.20550382]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.63478470, -9.97276974, -2.42177224, -5.98180294, -3.01294947,
        -6.49992609, -5.35868835, -6.09445810, -8.49534416, -9.48241520],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.20550382]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 507
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 252
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 782
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00014209747314453125
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20550310611724854
10 lb beta sum: 0.0, worst -0.20550411939620972
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.5594    transfer 0.0001    finalize 0.0004    func 0.5602    
Accumulated time: func 0.5602    prepare 0.0002    bound 0.5594    transfer 0.0001    finalize 0.0004    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] 
split level 1: [/input-12, 35] 
split level 2: [/input-12, 45] 
split level 3: [/input-12, 58] 
split level 4: [/input-12, 61] 
split level 5: [/input-12, 80] 
split level 6: [/input-12, 4] 
split level 7: [/input-12, 40] 
split level 8: [/input, 377] 
split level 9: [/input, 392] 
split level 10: [/input, 393] 
split level 11: [/input-8, 443] 
split level 12: [/input, 444] 
split level 13: [/input-12, 60] 
split level 14: [/input-8, 1749] 
split level 15: [/input-8, 1443] 
split level 16: [/input-8, 2042] 
split level 17: [/input-8, 1411] 
split level 18: [/input-8, 1323] 
split level 19: [/input-8, 1260] 
split level 20: [/input, 344] 
split level 21: [/input-8, 881] 
split level 22: [/input-8, 1964] 
split level 23: [/input, 343] 
split level 24: [/input-8, 1436] 
split level 25: [/input-8, 465] 
split level 26: [/input-8, 1388] 
split level 27: [/input-8, 818] 
split level 28: [/input-8, 2043] 
split level 29: [/input-8, 585] 
split level 30: [/input-8, 1251] 
split level 31: [/input-8, 2044] 
split level 32: [/input-8, 265] 
split level 33: [/input, 428] 
split level 34: [/input-8, 273] 
split level 35: [/input-8, 1389] 
split level 36: [/input, 378] 
split level 37: [/input-8, 497] 
split level 38: [/input-12, 99] 
split level 39: [/input-8, 292] 
split level 40: [/input-8, 423] 
split level 41: [/input-8, 115] 
split level 42: [/input-8, 1747] 
split level 43: [/input, 327] 
split level 44: [/input-8, 2032] 
split level 45: [/input-8, 848] 
split level 46: [/input-8, 610] 
split level 47: [/input-8, 849] 
split level 48: [/input, 425] 
split level 49: [/input, 380] 
split level 50: [/input-8, 1410] 
split level 51: [/input, 3161] 
split level 52: [/input, 3493] 
split level 53: [/input-8, 1493] 
split level 54: [/input-8, 1865] 
split level 55: [/input-8, 282] 
split level 56: [/input-8, 1428] 
split level 57: [/input, 3163] 
split level 58: [/input-8, 1873] 
split level 59: [/input-8, 288] 
split level 60: [/input-8, 2040] 
split level 61: [/input-8, 83] 
split level 62: [/input-8, 1741] 
split level 63: [/input-8, 469] 
split level 64: [/input, 87] 
split level 65: [/input, 2412] 
split level 66: [/input, 2166] 
split level 67: [/input, 3178] 
split level 68: [/input-8, 1386] 
split level 69: [/input, 1602] 
split level 70: [/input, 3400] 
split level 71: [/input, 1612] 
split level 72: [/input-8, 1739] 
split level 73: [/input, 329] 
split level 74: [/input, 3479] 
split level 75: [/input-8, 1437] 
split level 76: [/input, 3130] 
split level 77: [/input, 1318] 
split level 78: [/input, 3158] 
split level 79: [/input, 2164] 
split level 80: [/input, 2236] 
split level 81: [/input, 2180] 
split level 82: [/input-8, 407] 
split level 83: [/input, 3461] 
split level 84: [/input, 2181] 
split level 85: [/input, 3157] 
split level 86: [/input-8, 1442] 
split level 87: [/input-8, 883] 
split level 88: [/input-8, 278] 
split level 89: [/input, 3172] 
split level 90: [/input, 103] 
split level 91: [/input, 3927] 
split level 92: [/input, 1302] 
split level 93: [/input, 1460] 
split level 94: [/input-8, 518] 
split level 95: [/input-8, 1014] 
split level 96: [/input-8, 1772] 
split level 97: [/input, 119] 
split level 98: [/input, 1448] 
split level 99: [/input, 139] 
split level 100: [/input, 1579] 
split level 101: [/input-8, 1758] 
split level 102: [/input, 3181] 
split level 103: [/input-8, 1119] 
split level 104: [/input, 2091] 
split level 105: [/input-8, 2041] 
split level 106: [/input, 364] 
split level 107: [/input, 1370] 
split level 108: [/input, 3528] 
split level 109: [/input, 1462] 
split level 110: [/input-8, 1731] 
split level 111: [/input, 3475] 
split level 112: [/input, 3148] 
split level 113: [/input-8, 1132] 
split level 114: [/input-8, 1730] 
split level 115: [/input, 373] 
split level 116: [/input-8, 398] 
split level 117: [/input, 2134] 
split level 118: [/input, 3114] 
split level 119: [/input, 3971] 
split level 120: [/input-8, 1979] 
split level 121: [/input-8, 521] 
split level 122: [/input-8, 1334] 
split level 123: [/input, 1561] 
split level 124: [/input, 1562] 
split level 125: [/input, 3507] 
split level 126: [/input, 3367] 
split level 127: [/input, 1578] 
split level 128: [/input, 3384] 
split level 129: [/input, 385] 
split level 130: [/input, 1336] 
split level 131: [/input, 132] 
split level 132: [/input, 2397] 
split level 133: [/input, 3398] 
split level 134: [/input, 1396] 
split level 135: [/input, 1586] 
split level 136: [/input, 3972] 
split level 137: [/input, 2302] 
split level 138: [/input, 3508] 
split level 139: [/input, 3383] 
split level 140: [/input, 2331] 
split level 141: [/input, 442] 
split level 142: [/input, 1386] 
split level 143: [/input-8, 1006] 
split level 144: [/input, 3145] 
split level 145: [/input, 1563] 
split level 146: [/input, 2385] 
split level 147: [/input-8, 1732] 
split level 148: [/input, 3351] 
split level 149: [/input, 547] 
split level 150: [/input, 2347] 
split level 151: [/input, 2136] 
split level 152: [/input, 3143] 
split level 153: [/input, 1335] 
split level 154: [/input, 3196] 
split level 155: [/input-8, 912] 
split level 156: [/input, 1485] 
split level 157: [/input, 2137] 
split level 158: [/input, 3205] 
split level 159: [/input, 695] 
split level 160: [/input, 325] 
split level 161: [/input, 3214] 
split level 162: [/input, 1354] 
split level 163: [/input, 1413] 
split level 164: [/input, 3397] 
split level 165: [/input, 2364] 
split level 166: [/input, 1596] 
split level 167: [/input, 1421] 
split level 168: [/input, 3142] 
split level 169: [/input, 2981] 
split level 170: [/input, 2163] 
split level 171: [/input, 2627] 
split level 172: [/input, 3940] 
split level 173: [/input-8, 485] 
split level 174: [/input, 71] 
split level 175: [/input, 2227] 
split level 176: [/input, 3529] 
split level 177: [/input, 2245] 
split level 178: [/input, 1342] 
split level 179: [/input, 1746] 
split level 180: [/input, 2286] 
split level 181: [/input, 570] 
split level 182: [/input, 633] 
split level 183: [/input, 569] 
split level 184: [/input, 1720] 
split level 185: [/input, 3190] 
split level 186: [/input, 3221] 
split level 187: [/input, 3156] 
split level 188: [/input-8, 2047] 
split level 189: [/input, 553] 
split level 190: [/input, 1382] 
split level 191: [/input, 3490] 
split level 192: [/input, 2382] 
split level 193: [/input, 1326] 
split level 194: [/input, 370] 
split level 195: [/input, 3334] 
split level 196: [/input, 3222] 
split level 197: [/input, 3364] 
split level 198: [/input, 2299] 
split level 199: [/input, 3339] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20536810159683228
10 lb beta sum: 0.0, worst -0.2053622007369995
Time: prepare 0.0114    bound 0.7655    transfer 0.0033    finalize 0.0046    func 0.7876    
Accumulated time: func 1.3478    prepare 0.0217    bound 1.3249    transfer 0.0034    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.14420724) min lb tensor(-0.20535767)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.0302431583404541 
BICCOS Cumulative time: 0.0302431583404541
Preprocessing time: 0.02880096435546875 Inference time: 0.0009579658508300781 Add cuts time: 0.00011515617370605469 Cut analysis time: 0.00036907196044921875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19871 (1), -0.19860 (1), -0.19856 (1), -0.19850 (1), -0.19802 (1), -0.19793 (1), -0.19790 (1), -0.19784 (1), -0.19784 (1), -0.19732 (1), -0.19726 (1), -0.19718 (1), -0.19706 (1), -0.19678 (1), -0.19572 (1), -0.19522 (1), -0.19506 (1), -0.19442 (1), -0.19420 (1), -0.19400 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.7805    set_bounds 0.0083    solve 0.7877    add 0.2001    
Accumulated time: pickout 0.0004    decision 0.7805    set_bounds 0.0083    solve 0.7877    add 0.2001    
Current (lb-rhs): -0.1987079381942749
50 domains visited
Cumulative time: 2.4170241355895996

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 45] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 45] [/input-12, 41] 
split level 1: [/input-12, 45] [/input-12, 58] [/input-12, 58] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 58] [/input-12, 45] 
split level 2: [/input-12, 58] [/input-12, 61] [/input-12, 61] [/input-12, 58] [/input-12, 61] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 61] [/input-12, 61] 
split level 3: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 61] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18420076370239258
10 lb beta sum: 0.3620595335960388, worst -0.18056625127792358
Time: prepare 0.0073    bound 1.2188    transfer 0.0013    finalize 0.0025    func 1.2326    
Accumulated time: func 2.5804    prepare 0.0293    bound 2.5437    transfer 0.0047    finalize 0.0075    
all_split False
======================Cut inference begins======================
max lb tensor(0.19709629) min lb tensor(-0.18055785)
Number of Verified Splits: 62 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.017000198364257812 
BICCOS Cumulative time: 0.047243356704711914
Preprocessing time: 0.012675285339355469 Inference time: 0.0024442672729492188 Add cuts time: 0.0013856887817382812 Cut analysis time: 0.0004949569702148438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07107 (2), -0.07020 (2), -0.07010 (2), -0.06970 (2), -0.06961 (2), -0.06954 (2), -0.06947 (2), -0.06936 (2), -0.06896 (2), -0.06886 (2), -0.06861 (2), -0.06836 (2), -0.06817 (2), -0.06790 (2), -0.06783 (2), -0.06765 (2), -0.06741 (2), -0.06646 (2), -0.06587 (2), -0.06522 (2), 
Length of domains: 50
Time: pickout 0.0077    decision 0.0222    set_bounds 0.0119    solve 1.2327    add 0.1881    
Accumulated time: pickout 0.0081    decision 0.8026    set_bounds 0.0201    solve 2.0204    add 0.3881    
Current (lb-rhs): -0.0710715651512146
100 domains visited
Cumulative time: 3.8967831134796143

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 35] [/input-12, 41] [/input-12, 41] [/input-12, 45] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 45] [/input-12, 41] 
split level 1: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 58] [/input-12, 45] [/input-12, 45] [/input-12, 35] [/input-12, 58] [/input-12, 35] 
split level 2: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 58] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 3: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 61] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07283651828765869
10 lb beta sum: 0.7891349792480469, worst -0.011321485042572021
Time: prepare 0.0073    bound 0.1181    transfer 0.0027    finalize 0.0022    func 0.1333    
Accumulated time: func 2.7137    prepare 0.0368    bound 2.6618    transfer 0.0075    finalize 0.0097    
all_split False
======================Cut inference begins======================
max lb tensor(0.60021549) min lb tensor(0.00030065)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.03594064712524414 
BICCOS Cumulative time: 0.08318400382995605
Preprocessing time: 0.011317968368530273 Inference time: 0.015950679779052734 Add cuts time: 0.008310556411743164 Cut analysis time: 0.00036144256591796875
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0196    set_bounds 0.0152    solve 0.1334    add 0.0194    
Accumulated time: pickout 0.0092    decision 0.8222    set_bounds 0.0353    solve 2.1538    add 0.4075    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58, 41, 35]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([1.82193583e+29, 6.79242760e-02, 1.18854597e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58, 41, 35]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.82193583e+29, 6.79242760e-02, 4.85808775e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58, 41]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.82193583e+29, 1.73319146e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  4, 41]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([2.01226017e-16, 9.56279486e-02, 1.06057428e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  4, 41]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([2.01226017e-16, 9.56279486e-02, 1.73189268e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58,  4]), tensor([1., 1.]), tensor([0, 0]), tensor([2.01226017e-16, 2.47693527e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15090787410736084
10 lb beta sum: 0.8215807676315308, worst -0.03139674663543701
Time: prepare 0.0004    bound 0.1158    transfer 0.0001    finalize 0.0002    func 0.1166    
Accumulated time: func 2.8303    prepare 0.0372    bound 2.7776    transfer 0.0076    finalize 0.0099    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] 
split level 1: [/input-12, 35] 
split level 2: [/input-12, 45] 
split level 3: [/input-12, 61] 
split level 4: [/input-12, 80] 
split level 5: [/input-12, 40] 
split level 6: [/input, 393] 
split level 7: [/input-8, 1411] 
cut re-enabled after branching node selection
0 lb beta sum: 2.149303436279297, worst -0.024674609303474426
10 lb beta sum: 2.149303436279297, worst -0.02450580894947052
Time: prepare 0.0123    bound 0.1181    transfer 0.0006    finalize 0.0012    func 0.1338    
Accumulated time: func 2.9641    prepare 0.0499    bound 2.8957    transfer 0.0082    finalize 0.0111    
all_split False
======================Cut inference begins======================
max lb tensor(1.91298103) min lb tensor(-0.02444018)
Number of Verified Splits: 252 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 2.149303436279297, worst -0.0863533765077591
10 lb beta sum: 2.1941158771514893, worst -0.03116840124130249
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.2921888828277588 
BICCOS Cumulative time: 0.37537288665771484
Preprocessing time: 0.0076732635498046875 Inference time: 0.27748823165893555 Add cuts time: 0.0067064762115478516 Cut analysis time: 0.0003209114074707031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02444 (8), -0.02071 (8), -0.01977 (8), -0.01604 (8), 
Length of domains: 4
Time: pickout 0.0004    decision 0.0216    set_bounds 0.0285    solve 0.1339    add 0.0006    
Accumulated time: pickout 0.0096    decision 0.8438    set_bounds 0.0638    solve 2.2877    add 0.4082    
Current (lb-rhs): -0.024440184235572815
104 domains visited
Cumulative time: 4.730896472930908

BaB round 2
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 392] [/input, 377] [/input, 392] [/input, 377] 
split level 1: [/input-8, 818] [/input-8, 818] [/input-8, 818] [/input-8, 818] 
split level 2: [/input-8, 1251] [/input-8, 1251] [/input-8, 1251] [/input-8, 1251] 
split level 3: [/input-8, 2043] [/input-8, 2043] [/input-8, 2043] [/input-8, 2043] 
split level 4: [/input, 428] [/input, 378] [/input, 428] [/input, 378] 
split level 5: [/input, 378] [/input, 428] [/input, 378] [/input, 428] 
cut re-enabled after branching node selection
0 lb beta sum: 2.149303436279297, worst -0.009554758667945862
10 lb beta sum: 2.149303436279297, worst -0.009325936436653137
Time: prepare 0.0122    bound 0.1136    transfer 0.0005    finalize 0.0012    func 0.1291    
Accumulated time: func 3.0932    prepare 0.0624    bound 3.0092    transfer 0.0087    finalize 0.0122    
all_split False
======================Cut inference begins======================
max lb tensor(0.01326983) min lb tensor(-0.00924559)
Number of Verified Splits: 207 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.028628826141357422 
BICCOS Cumulative time: 0.40400171279907227
Preprocessing time: 0.0075778961181640625 Inference time: 0.01965641975402832 Add cuts time: 0.0009980201721191406 Cut analysis time: 0.00039649009704589844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00925 (14), -0.00907 (14), -0.00883 (14), -0.00865 (14), -0.00808 (14), -0.00790 (14), -0.00784 (14), -0.00767 (14), -0.00766 (14), -0.00748 (14), -0.00742 (14), -0.00725 (14), -0.00668 (14), -0.00650 (14), -0.00626 (14), -0.00608 (14), -0.00468 (14), -0.00462 (14), -0.00452 (14), -0.00450 (14), 
Length of domains: 49
Time: pickout 0.0011    decision 0.0195    set_bounds 0.0259    solve 0.1292    add 0.0010    
Accumulated time: pickout 0.0106    decision 0.8634    set_bounds 0.0897    solve 2.4169    add 0.4092    
Current (lb-rhs): -0.00924558937549591
153 domains visited
Cumulative time: 4.937212944030762

BaB round 3
batch: 49
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 392] [/input, 377] [/input, 392] [/input, 392] [/input, 377] [/input, 392] [/input, 377] [/input, 392] [/input, 377] [/input, 392] 
split level 1: [/input-8, 610] [/input-8, 1389] [/input-8, 610] [/input-8, 292] [/input-8, 1389] [/input-8, 292] [/input-8, 1389] [/input-8, 610] [/input-8, 1389] [/input-8, 610] 
split level 2: [/input-8, 292] [/input-8, 610] [/input-8, 292] [/input-8, 610] [/input-8, 610] [/input-8, 610] [/input-8, 610] [/input-8, 292] [/input-8, 610] [/input-8, 292] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0045626163482666016
10 lb beta sum: 0.06593700498342514, worst -0.0014858245849609375
Time: prepare 0.0095    bound 1.3776    transfer 0.0015    finalize 0.0021    func 1.3932    
Accumulated time: func 4.4864    prepare 0.0720    bound 4.3868    transfer 0.0102    finalize 0.0143    
all_split False
======================Cut inference begins======================
max lb tensor(0.01357883) min lb tensor(-0.00144082)
Number of Verified Splits: 376 of 392
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.05400538444519043 
BICCOS Cumulative time: 0.4580070972442627
Preprocessing time: 0.01180720329284668 Inference time: 0.04098057746887207 Add cuts time: 0.0007719993591308594 Cut analysis time: 0.0004456043243408203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00144 (17), -0.00126 (17), -0.00091 (17), -0.00081 (17), -0.00074 (17), -0.00066 (17), -0.00064 (17), -0.00053 (17), -0.00048 (17), -0.00035 (17), -0.00029 (17), -0.00024 (17), -0.00011 (17), -0.00006 (17), -0.00006 (17), -0.00003 (17), 
Length of domains: 16
Time: pickout 0.0013    decision 0.0162    set_bounds 0.0323    solve 1.3933    add 0.0009    
Accumulated time: pickout 0.0120    decision 0.8796    set_bounds 0.1220    solve 3.8102    add 0.4101    
Current (lb-rhs): -0.0014408230781555176
169 domains visited
Cumulative time: 6.437558174133301

BaB round 4
batch: 16
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] 
split level 1: [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] [/input-8, 1389] 
split level 2: [/input, 327] [/input, 327] [/input, 327] [/input, 327] [/input, 327] [/input, 327] [/input, 327] [/input, 327] [/input, 327] [/input, 327] 
split level 3: [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] [/input-8, 1410] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.0030634403228759766

all verified at 0th iter
Time: prepare 0.0063    bound 0.0057    transfer 0.0006    finalize 0.0012    func 0.0154    
Accumulated time: func 4.5018    prepare 0.0786    bound 4.3925    transfer 0.0108    finalize 0.0155    
all_split False
======================Cut inference begins======================
max lb tensor(0.01491714) min lb tensor(0.00306344)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.00786280632019043 
BICCOS Cumulative time: 0.4658699035644531
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0013    decision 0.0146    set_bounds 0.0233    solve 0.0155    add 0.0003    
Accumulated time: pickout 0.0132    decision 0.8942    set_bounds 0.1454    solve 3.8257    add 0.4104    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
169 domains visited
Cumulative time: 6.501502513885498


Properties batch 4, size 1
Remaining timeout: 189.04741430282593
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 189.0473349094391
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 189.0468201637268
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 189.04678344726562
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 189.04676032066345
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 10.9533 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 12, vnnlib ID: 12 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.60971117, -6.54356766, -3.77449369, -4.58758783, -5.85971212,
         -3.70617151, -9.49713802, -3.95379829, -6.54922104, -5.37819719]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [436]; unstable size 436; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 114, 1, 436] with unstable size 113 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 436] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 436] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [113]; unstable size 113; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 113] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 113] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 6.80846572e-01,  1.01449537e+00, -8.60395074e-01,  3.58936191e-03,
          1.15603161e+00, -9.08453822e-01,  4.73845673e+00,  1.30274677e+00,
          2.83696294e-01]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.60971117, -6.54356766, -3.77449369, -4.58758783, -5.85971212,
         -3.70617151, -9.49713802, -3.95379829, -6.54922104, -5.37819719]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.60971117, -6.54356766, -3.77449417, -4.58758783, -5.85971165,
          -3.70617199, -9.49713802, -3.95379782, -6.54922009, -5.37819719],
         [-5.60971117, -6.54356766, -3.77449417, -4.58758783, -5.85971165,
          -3.70617199, -9.49713802, -3.95379782, -6.54922009, -5.37819719]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.17930365, -0.24762583]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.56666672,  0.66190481,  0.64603180,  ...,  0.24920642,
             0.26507944,  0.21746039],
           [ 0.43968260,  0.53492069,  0.51904768,  ...,  0.29682547,
             0.29682547,  0.24920642],
           [ 0.34444451,  0.39206356,  0.39206356,  ...,  0.32857150,
             0.34444451,  0.29682547],
           ...,
           [-1.83015871, -1.73492062, -1.73492062,  ..., -0.51269841,
            -0.52857143, -0.60793650],
           [-1.87777781, -1.81428576, -1.81428576,  ..., -0.52857143,
            -0.51269841, -0.52857143],
           [-1.90952384, -1.89365077, -1.87777781,  ..., -0.56031746,
            -0.59206349, -0.54444444]],

          [[ 1.15942061,  1.20772982,  1.19162667,  ...,  0.95008057,
             0.96618366,  0.91787446],
           [ 1.09500813,  1.12721443,  1.09500813,  ...,  0.98228669,
             0.99838978,  0.93397754],
           [ 0.99838978,  1.03059590,  1.01449287,  ...,  0.98228669,
             0.99838978,  0.95008057],
           ...,
           [-1.72302747, -1.57809973, -1.61030602,  ..., -0.06441211,
            -0.01610294, -0.09661824],
           [-1.80354273, -1.72302747, -1.73913050,  ..., -0.03220600,
            -0.01610294, -0.04830906],
           [-1.83574879, -1.81964576, -1.80354273,  ..., -0.06441211,
            -0.08051517, -0.04830906]],

          [[ 1.62069011,  1.62069011,  1.60569763,  ...,  1.50075006,
             1.51574254,  1.47076499],
           [ 1.59070504,  1.59070504,  1.56072009,  ...,  1.53073502,
             1.54572761,  1.48575759],
           [ 1.51574254,  1.51574254,  1.50075006,  ...,  1.50075006,
             1.51574254,  1.47076499],
           ...,
           [-1.49775124, -1.37781119, -1.39280367,  ..., -0.55322337,
            -0.61319339, -0.70314842],
           [-1.55772126, -1.49775124, -1.49775124,  ..., -0.56821585,
            -0.61319339, -0.58320838],
           [-1.58770621, -1.57271373, -1.55772126,  ..., -0.65817088,
            -0.71814090, -0.61319339]]],


         [[[ 0.56666672,  0.66190481,  0.64603180,  ...,  0.24920642,
             0.26507944,  0.21746039],
           [ 0.43968260,  0.53492069,  0.51904768,  ...,  0.29682547,
             0.29682547,  0.24920642],
           [ 0.34444451,  0.39206356,  0.39206356,  ...,  0.32857150,
             0.34444451,  0.29682547],
           ...,
           [-1.83015871, -1.73492062, -1.73492062,  ..., -0.51269841,
            -0.52857143, -0.60793650],
           [-1.87777781, -1.81428576, -1.81428576,  ..., -0.52857143,
            -0.51269841, -0.52857143],
           [-1.90952384, -1.89365077, -1.87777781,  ..., -0.56031746,
            -0.59206349, -0.54444444]],

          [[ 1.15942061,  1.20772982,  1.19162667,  ...,  0.95008057,
             0.96618366,  0.91787446],
           [ 1.09500813,  1.12721443,  1.09500813,  ...,  0.98228669,
             0.99838978,  0.93397754],
           [ 0.99838978,  1.03059590,  1.01449287,  ...,  0.98228669,
             0.99838978,  0.95008057],
           ...,
           [-1.72302747, -1.57809973, -1.61030602,  ..., -0.06441211,
            -0.01610294, -0.09661824],
           [-1.80354273, -1.72302747, -1.73913050,  ..., -0.03220600,
            -0.01610294, -0.04830906],
           [-1.83574879, -1.81964576, -1.80354273,  ..., -0.06441211,
            -0.08051517, -0.04830906]],

          [[ 1.62069011,  1.62069011,  1.60569763,  ...,  1.50075006,
             1.51574254,  1.47076499],
           [ 1.59070504,  1.59070504,  1.56072009,  ...,  1.53073502,
             1.54572761,  1.48575759],
           [ 1.51574254,  1.51574254,  1.50075006,  ...,  1.50075006,
             1.51574254,  1.47076499],
           ...,
           [-1.49775124, -1.37781119, -1.39280367,  ..., -0.55322337,
            -0.61319339, -0.70314842],
           [-1.55772126, -1.49775124, -1.49775124,  ..., -0.56821585,
            -0.61319339, -0.58320838],
           [-1.58770621, -1.57271373, -1.55772126,  ..., -0.65817088,
            -0.71814090, -0.61319339]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0799 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 13, vnnlib ID: 13 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.31652355, -10.39834499, -14.53281593, -16.07817841, -15.67444897,
         -18.01647186, -16.02903366, -17.28762436, -10.97990608, -12.63942242]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [677]; unstable size 677; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 677] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 677] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 677] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 164] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.35580826,  2.29579544,  4.09076548,  3.52531242,  5.89760590,
          4.21795797,  5.18644333, -0.70376539,  1.22269106]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.31652355, -10.39834499, -14.53281593, -16.07817841, -15.67444897,
         -18.01647186, -16.02903366, -17.28762436, -10.97990608, -12.63942242]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.31652260, -10.39834595, -14.53281403, -16.07817841, -15.67444897,
          -18.01647186, -16.02903175, -17.28762627, -10.97990513, -12.63942051],
         [-10.31652260, -10.39834595, -14.53281403, -16.07817841, -15.67444897,
          -18.01647186, -16.02903175, -17.28762627, -10.97990513, -12.63942051]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.08182335,  0.58155918]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[0.45555562, 0.40793657, 0.42380959,  ..., 0.75714290,
            0.74126989, 0.70952386],
           [0.47142863, 0.42380959, 0.43968260,  ..., 0.72539687,
            0.69365084, 0.66190481],
           [0.53492069, 0.50317466, 0.55079371,  ..., 0.70952386,
            0.69365084, 0.66190481],
           ...,
           [0.63015878, 0.64603180, 0.66190481,  ..., 0.64603180,
            0.67777783, 0.66190481],
           [0.64603180, 0.61428577, 0.59841275,  ..., 0.63015878,
            0.64603180, 0.66190481],
           [0.72539687, 0.66190481, 0.63015878,  ..., 0.63015878,
            0.59841275, 0.64603180]],

          [[0.48309189, 0.43478271, 0.45088577,  ..., 0.75684386,
            0.72463775, 0.69243163],
           [0.49919492, 0.45088577, 0.46698883,  ..., 0.70853472,
            0.67632860, 0.64412248],
           [0.56360716, 0.53140104, 0.57971025,  ..., 0.69243163,
            0.67632860, 0.64412248],
           ...,
           [0.61191636, 0.62801939, 0.64412248,  ..., 0.62801939,
            0.66022551, 0.64412248],
           [0.62801939, 0.59581327, 0.57971025,  ..., 0.61191636,
            0.62801939, 0.64412248],
           [0.70853472, 0.64412248, 0.61191636,  ..., 0.61191636,
            0.57971025, 0.62801939]],

          [[0.66116959, 0.61619210, 0.63118458,  ..., 0.76611710,
            0.81109464, 0.79610211],
           [0.67616212, 0.63118458, 0.64617711,  ..., 0.76611710,
            0.78110963, 0.75112462],
           [0.73613209, 0.70614707, 0.75112462,  ..., 0.79610211,
            0.78110963, 0.75112462],
           ...,
           [0.66116959, 0.67616212, 0.72113961,  ..., 0.73613209,
            0.76611710, 0.75112462],
           [0.67616212, 0.64617711, 0.66116959,  ..., 0.72113961,
            0.73613209, 0.75112462],
           [0.75112462, 0.69115460, 0.69115460,  ..., 0.72113961,
            0.69115460, 0.73613209]]],


         [[[0.45555562, 0.40793657, 0.42380959,  ..., 0.75714290,
            0.74126989, 0.70952386],
           [0.47142863, 0.42380959, 0.43968260,  ..., 0.72539687,
            0.69365084, 0.66190481],
           [0.53492069, 0.50317466, 0.55079371,  ..., 0.70952386,
            0.69365084, 0.66190481],
           ...,
           [0.63015878, 0.64603180, 0.66190481,  ..., 0.64603180,
            0.67777783, 0.66190481],
           [0.64603180, 0.61428577, 0.59841275,  ..., 0.63015878,
            0.64603180, 0.66190481],
           [0.72539687, 0.66190481, 0.63015878,  ..., 0.63015878,
            0.59841275, 0.64603180]],

          [[0.48309189, 0.43478271, 0.45088577,  ..., 0.75684386,
            0.72463775, 0.69243163],
           [0.49919492, 0.45088577, 0.46698883,  ..., 0.70853472,
            0.67632860, 0.64412248],
           [0.56360716, 0.53140104, 0.57971025,  ..., 0.69243163,
            0.67632860, 0.64412248],
           ...,
           [0.61191636, 0.62801939, 0.64412248,  ..., 0.62801939,
            0.66022551, 0.64412248],
           [0.62801939, 0.59581327, 0.57971025,  ..., 0.61191636,
            0.62801939, 0.64412248],
           [0.70853472, 0.64412248, 0.61191636,  ..., 0.61191636,
            0.57971025, 0.62801939]],

          [[0.66116959, 0.61619210, 0.63118458,  ..., 0.76611710,
            0.81109464, 0.79610211],
           [0.67616212, 0.63118458, 0.64617711,  ..., 0.76611710,
            0.78110963, 0.75112462],
           [0.73613209, 0.70614707, 0.75112462,  ..., 0.79610211,
            0.78110963, 0.75112462],
           ...,
           [0.66116959, 0.67616212, 0.72113961,  ..., 0.73613209,
            0.76611710, 0.75112462],
           [0.67616212, 0.64617711, 0.66116959,  ..., 0.72113961,
            0.73613209, 0.75112462],
           [0.75112462, 0.69115460, 0.69115460,  ..., 0.72113961,
            0.69115460, 0.73613209]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0846 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 14, vnnlib ID: 14 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.58788013, -3.57877111, -7.49758530, -6.42473507, -6.46546555,
         -7.68810511, -6.21870279, -6.45115232, -5.74132729, -1.41073096]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [534]; unstable size 534; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 534] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 534] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 534] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 185] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.82803440, 1.00371790, 4.58163691, 3.52479577, 3.45554543, 4.66323185,
         3.15355444, 3.39953947, 2.80839300]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0727 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 15, vnnlib ID: 15 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.55321646, -5.81442928, -1.99641812,  0.06207272, -0.82771432,
          0.04142630, -2.41349435, -1.42710316, -5.66043377, -4.60286999]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [492]; unstable size 492; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 188, 1, 492] with unstable size 187 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 492] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 492] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [187]; unstable size 187; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 187] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 187] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.35873747,  4.47410536,  0.94619060,  0.06511033, -0.33263910,
          1.83395362,  0.21094596,  4.77025223,  3.27124643]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.55321646, -5.81442928, -1.99641812,  0.06207272, -0.82771432,
          0.04142630, -2.41349435, -1.42710316, -5.66043377, -4.60286999]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.96010399, -6.20732403, -2.32285213, -0.28913876, -1.16081107,
          -0.13703477, -2.92448115, -1.63956416, -6.15403843, -4.97522259]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.15210399]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0060 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0724 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 16, vnnlib ID: 16 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.37839031, -13.42577553,  -6.48252678,  -7.11965179,  -6.67908382,
          -7.55561876,  -7.39423037,  -8.94825554, -12.10931110, -13.00597000]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [788]; unstable size 788; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 362, 1, 788] with unstable size 361 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 788] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 788] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [361]; unstable size 361; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 361] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 361] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.24375129,  3.81155229, -1.93120420, -1.85189033, -0.03242284,
         -1.13493097,  0.07367408,  2.53733802,  3.71830559]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.37839031, -13.42577553,  -6.48252678,  -7.11965179,  -6.67908382,
          -7.55561876,  -7.39423037,  -8.94825554, -12.10931110, -13.00597000]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.37839031, -13.42577457,  -6.48252583,  -7.11965132,  -6.67908287,
           -7.55561876,  -7.39422894,  -8.94825554, -12.10931206, -13.00597095],
         [-10.37839031, -13.42577457,  -6.48252583,  -7.11965132,  -6.67908287,
           -7.55561876,  -7.39422894,  -8.94825554, -12.10931206, -13.00597095]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.63712549, -0.44056845,  0.43596745,  0.27457762]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]],


         [[[-0.59206349, -0.57619047, -0.54444444,  ..., -1.27460313,
            -1.17936504, -1.05238092],
           [-0.54444444, -0.54444444, -0.51269841,  ..., -1.21111107,
            -1.17936504, -0.94126981],
           [-0.52857143, -0.56031746, -0.52857143,  ..., -1.29047608,
            -1.21111107, -0.90952379],
           ...,
           [-0.35396814, -0.35396814, -0.33809513,  ...,  0.05873025,
             0.09047628,  0.02698422],
           [-0.33809513, -0.32222211, -0.30634910,  ...,  0.15396833,
             0.23333341,  0.24920642],
           [-0.36984116, -0.30634910, -0.35396814,  ...,  0.21746039,
             0.24920642,  0.24920642]],

          [[-0.70853460, -0.69243151, -0.66022539,  ..., -1.25603855,
            -1.19162631, -1.07890499],
           [-0.66022539, -0.66022539, -0.62801927,  ..., -1.19162631,
            -1.19162631, -0.98228657],
           [-0.66022539, -0.67632848, -0.64412236,  ..., -1.27214170,
            -1.22383249, -0.95008045],
           ...,
           [-0.46698871, -0.46698871, -0.45088565,  ..., -0.06441211,
            -0.03220600, -0.09661824],
           [-0.43478248, -0.41867942, -0.38647330,  ...,  0.03220624,
             0.11272153,  0.12882459],
           [-0.45088565, -0.37037024, -0.38647330,  ...,  0.09661847,
             0.14492765,  0.12882459]],

          [[-0.74812591, -0.73313338, -0.68815589,  ..., -1.01799107,
            -0.95802099, -0.95802099],
           [-0.70314842, -0.70314842, -0.67316341,  ..., -0.95802099,
            -0.95802099, -0.86806595],
           [-0.70314842, -0.71814090, -0.68815589,  ..., -1.03298354,
            -0.98800600, -0.82308841],
           ...,
           [-0.46326834, -0.44827583, -0.44827583,  ..., -0.07346311,
            -0.04347810, -0.10344811],
           [-0.43328333, -0.41829082, -0.40329832,  ...,  0.01649191,
             0.09145443,  0.10644694],
           [-0.47826082, -0.40329832, -0.43328333,  ...,  0.04647692,
             0.09145443,  0.07646193]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0780 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 17, vnnlib ID: 17 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.48207045,  -2.39753056,  -9.58371258, -10.52106094,  -9.25177765,
         -11.82708836, -10.46574306, -11.05204582,  -6.78091049,  -5.65733051]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [502]; unstable size 502; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 254, 1, 502] with unstable size 253 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 502] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 502] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [253]; unstable size 253; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 253] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 253] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.89075279, 4.35961151, 5.77320814, 4.46269035, 6.95126152, 5.95177555,
         6.24258089, 2.54485941, 2.28885198]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0689 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 18, vnnlib ID: 18 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.97675323, -17.08073425,  -8.92278004, -11.53713417,  -9.34353065,
         -11.19538307,  -8.12182331, -11.58376312, -17.60232544, -15.83768177]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [512]; unstable size 512; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 512] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 512] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 512] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 259] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.63812399,  6.80160236, -0.75694084,  2.17035460, -0.29967833,
          1.59824872,  1.65513277,  7.41604805,  5.91091490]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.97675323, -17.08073425,  -8.92278004, -11.53713417,  -9.34353065,
         -11.19538307,  -8.12182331, -11.58376312, -17.60232544, -15.83768177]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.56005764, -18.10161591,  -9.57238865, -12.55412483, -10.26584530,
          -12.21403694,  -9.57373428, -12.60732460, -18.38806343, -16.88108253],
         [-14.56005764, -18.10161591,  -9.57238865, -12.55412483, -10.26584530,
          -12.21403694,  -9.57373428, -12.60732460, -18.38806343, -16.88108253]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00134563,  0.69211102]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0057 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0755 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 19, vnnlib ID: 19 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.67748737, -15.99068165,  -8.99268341,  -7.79347992,  -8.35536575,
          -8.22471714,  -9.16943359, -11.52655983, -13.26644325, -15.81279469]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [547]; unstable size 547; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 547] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 547] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 547] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 259] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.43207693,  6.44367409,  0.19957781, -0.46666574,  0.09526157,
          0.46659327,  2.60346079,  3.93457699,  6.28853321]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.67748737, -15.99068165,  -8.99268341,  -7.79347992,  -8.35536575,
          -8.22471714,  -9.16943359, -11.52655983, -13.26644325, -15.81279469]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.68204021, -16.05737877,  -8.96092319,  -8.17651176,  -8.15779305,
           -8.62596226,  -9.30371189, -11.61334324, -13.34238148, -16.04029083]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01871872]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0051 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0699 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 20, vnnlib ID: 20 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.99751091, -10.60476208,  -5.80764198,  -6.15668106,  -6.26862431,
          -6.07673597,  -4.08238983,  -8.79667854,  -9.22789669, -10.72688580]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [601]; unstable size 601; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 287, 1, 601] with unstable size 286 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 601] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 601] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [286]; unstable size 286; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 286] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 286] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.22418547, 4.25854731, 0.62012959, 0.93473411, 0.88097095, 0.60569596,
         2.78608894, 3.20536184, 4.78958416]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0657 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 21, vnnlib ID: 21 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.39633656, -10.81733418,  -8.14680481,  -7.67903614,  -8.47020626,
          -6.77577496, -10.40852451,  -8.02430439, -10.83304310,  -9.56988335]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [512]; unstable size 512; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 512] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 512] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 512] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 171] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.18678737, 2.55919075, 0.31564909, 0.61779273, 0.64823699, 2.52021646,
         0.37382293, 2.55972433, 1.61684656]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0635 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 22, vnnlib ID: 22 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.61524105, -12.71203899, -11.56439686, -11.98183823, -11.60697556,
         -12.97468090, -12.19276619, -14.18572140,  -5.67168808, -12.38231468]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [599]; unstable size 599; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 173, 1, 599] with unstable size 172 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 599] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 599] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [172]; unstable size 172; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 172] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 172] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.42892718, 5.35214663, 4.30807972, 4.89422417, 4.33142710, 5.69092751,
         5.16717815, 6.89458752, 4.88999987]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0660 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 23, vnnlib ID: 23 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.84393740, -7.84841537, -4.07208776, -2.13655066, -4.59707069,
         -1.22025633, -5.05424547, -3.93261433, -4.29843807, -6.48314619]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [499]; unstable size 499; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 499] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 499] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 499] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 184] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.94525337, 4.37971687, 1.50863886, 0.51084441, 2.10668659, 2.74753022,
         1.74771559, 1.16706729, 3.61705399]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0804 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 24, vnnlib ID: 24 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.95971680,  -7.97020435, -11.66736698, -13.97354507, -12.17215443,
         -15.07821083, -12.78244114, -14.01900578, -10.50253868, -10.70786572]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [778]; unstable size 778; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 305, 1, 778] with unstable size 304 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 778] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 778] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [304]; unstable size 304; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 304] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 304] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.83722591,  1.20715714,  3.54842615,  1.72621632,  4.45857191,
          2.37408257,  3.37173033,  0.75684500,  1.53906167]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.95971680,  -7.97020435, -11.66736698, -13.97354507, -12.17215443,
         -15.07821083, -12.78244114, -14.01900578, -10.50253868, -10.70786572]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.01it/s]100%|██████████| 1/1 [00:00<00:00,  9.00it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.18222904,  -8.04493713, -10.81180954, -13.20889759, -11.28295040,
          -14.31022644, -12.04443455, -13.26400185,  -9.93011951, -10.47806263]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.13729191]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1136 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.560543060302734
alpha/beta optimization time: 1.344569206237793
initial alpha-crown bounds: tensor([[-0.67047977,  1.36126232,  3.71650076,  1.91702366,  4.64379311,
          2.51711559,  3.56976080,  0.87808800,  1.62748027]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.6704797744750977
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.4753131866455
Verifying property 0 with 1 instances.
##### Instance 24 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.67047977]], device='cuda:0') need to verify.
Model prediction is: tensor([ -8.95971680,  -7.97020435, -11.66736698, -13.97354507, -12.17215443,
        -15.07821083, -12.78244114, -14.01900578, -10.50253868, -10.70786572],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.67047977]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 778
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 300
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 1101
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011396408081054688
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6704797744750977
10 lb beta sum: 0.0, worst -0.6704940795898438
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0529    transfer 0.0001    finalize 0.0001    func 0.0533    
Accumulated time: func 0.0533    prepare 0.0002    bound 0.0529    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 51] 
split level 2: [/input-12, 60] 
split level 3: [/input-12, 13] 
split level 4: [/input-12, 1] 
split level 5: [/input-12, 4] 
split level 6: [/input-12, 36] 
split level 7: [/input-12, 92] 
split level 8: [/input-12, 45] 
split level 9: [/input-12, 33] 
split level 10: [/input-12, 93] 
split level 11: [/input-12, 37] 
split level 12: [/input-8, 1511] 
split level 13: [/input-8, 683] 
split level 14: [/input-8, 670] 
split level 15: [/input-12, 90] 
split level 16: [/input-8, 1880] 
split level 17: [/input-8, 1045] 
split level 18: [/input-8, 1503] 
split level 19: [/input-8, 1446] 
split level 20: [/input-8, 1875] 
split level 21: [/input-8, 677] 
split level 22: [/input-8, 603] 
split level 23: [/input-8, 1883] 
split level 24: [/input-8, 1964] 
split level 25: [/input-8, 1509] 
split level 26: [/input-8, 986] 
split level 27: [/input-8, 158] 
split level 28: [/input-8, 1018] 
split level 29: [/input-12, 80] 
split level 30: [/input-8, 1626] 
split level 31: [/input-8, 987] 
split level 32: [/input-8, 811] 
split level 33: [/input-8, 1750] 
split level 34: [/input-8, 988] 
split level 35: [/input-8, 989] 
split level 36: [/input-8, 1315] 
split level 37: [/input-8, 1069] 
split level 38: [/input-8, 1425] 
split level 39: [/input-8, 1738] 
split level 40: [/input-8, 1055] 
split level 41: [/input-8, 981] 
split level 42: [/input, 363] 
split level 43: [/input-8, 1020] 
split level 44: [/input-8, 1737] 
split level 45: [/input-8, 1017] 
split level 46: [/input-8, 1447] 
split level 47: [/input-8, 1019] 
split level 48: [/input, 3468] 
split level 49: [/input, 396] 
split level 50: [/input-8, 102] 
split level 51: [/input-8, 1375] 
split level 52: [/input-8, 82] 
split level 53: [/input-8, 1251] 
split level 54: [/input, 2518] 
split level 55: [/input, 1767] 
split level 56: [/input-8, 633] 
split level 57: [/input, 1733] 
split level 58: [/input, 2531] 
split level 59: [/input, 2440] 
split level 60: [/input-8, 1745] 
split level 61: [/input, 332] 
split level 62: [/input-8, 1494] 
split level 63: [/input, 3271] 
split level 64: [/input-8, 944] 
split level 65: [/input, 1418] 
split level 66: [/input, 3483] 
split level 67: [/input, 3306] 
split level 68: [/input-8, 1985] 
split level 69: [/input-8, 1052] 
split level 70: [/input-8, 1062] 
split level 71: [/input, 1766] 
split level 72: [/input, 2504] 
split level 73: [/input-8, 1421] 
split level 74: [/input, 1420] 
split level 75: [/input-8, 81] 
split level 76: [/input, 3304] 
split level 77: [/input, 1750] 
split level 78: [/input-8, 1132] 
split level 79: [/input, 2519] 
split level 80: [/input, 395] 
split level 81: [/input, 390] 
split level 82: [/input-8, 952] 
split level 83: [/input, 854] 
split level 84: [/input-8, 1279] 
split level 85: [/input, 2538] 
split level 86: [/input-8, 1454] 
split level 87: [/input, 3256] 
split level 88: [/input, 2517] 
split level 89: [/input-8, 1419] 
split level 90: [/input-8, 937] 
split level 91: [/input, 1749] 
split level 92: [/input, 3704] 
split level 93: [/input, 1436] 
split level 94: [/input-8, 969] 
split level 95: [/input, 2185] 
split level 96: [/input-8, 1021] 
split level 97: [/input-8, 1331] 
split level 98: [/input, 2530] 
split level 99: [/input-8, 1867] 
split level 100: [/input-8, 1322] 
split level 101: [/input, 1809] 
split level 102: [/input, 3688] 
split level 103: [/input, 3302] 
split level 104: [/input, 2539] 
split level 105: [/input-8, 950] 
split level 106: [/input, 2182] 
split level 107: [/input-8, 1986] 
split level 108: [/input, 1754] 
split level 109: [/input, 3669] 
split level 110: [/input, 2198] 
split level 111: [/input, 1753] 
split level 112: [/input, 3222] 
split level 113: [/input, 162] 
split level 114: [/input-8, 454] 
split level 115: [/input, 3305] 
split level 116: [/input-8, 1477] 
split level 117: [/input, 3577] 
split level 118: [/input-8, 1739] 
split level 119: [/input, 1768] 
split level 120: [/input, 4003] 
split level 121: [/input, 3026] 
split level 122: [/input, 3283] 
split level 123: [/input, 2454] 
split level 124: [/input-8, 1987] 
split level 125: [/input-8, 1984] 
split level 126: [/input, 1405] 
split level 127: [/input, 2536] 
split level 128: [/input, 1778] 
split level 129: [/input-8, 1131] 
split level 130: [/input, 2400] 
split level 131: [/input, 3308] 
split level 132: [/input-8, 1559] 
split level 133: [/input, 1779] 
split level 134: [/input, 1670] 
split level 135: [/input, 2515] 
split level 136: [/input-8, 455] 
split level 137: [/input, 3226] 
split level 138: [/input, 2166] 
split level 139: [/input, 3281] 
split level 140: [/input, 3765] 
split level 141: [/input, 3284] 
split level 142: [/input, 3275] 
split level 143: [/input-8, 1988] 
split level 144: [/input, 1780] 
split level 145: [/input, 1746] 
split level 146: [/input, 1827] 
split level 147: [/input-8, 945] 
split level 148: [/input, 1769] 
split level 149: [/input, 1841] 
split level 150: [/input, 1771] 
split level 151: [/input, 1842] 
split level 152: [/input, 1745] 
split level 153: [/input, 3689] 
split level 154: [/input, 1748] 
split level 155: [/input, 1747] 
split level 156: [/input, 3784] 
split level 157: [/input-8, 1935] 
split level 158: [/input, 3708] 
split level 159: [/input-8, 1361] 
split level 160: [/input, 3707] 
split level 161: [/input, 3723] 
split level 162: [/input, 3274] 
split level 163: [/input, 1858] 
split level 164: [/input, 654] 
split level 165: [/input, 376] 
split level 166: [/input, 1770] 
split level 167: [/input-8, 970] 
split level 168: [/input, 242] 
split level 169: [/input, 1099] 
split level 170: [/input, 3042] 
split level 171: [/input-8, 1934] 
split level 172: [/input, 3685] 
split level 173: [/input, 3257] 
split level 174: [/input, 2206] 
split level 175: [/input, 3796] 
split level 176: [/input-8, 905] 
split level 177: [/input, 3028] 
split level 178: [/input-8, 1241] 
split level 179: [/input, 3455] 
split level 180: [/input, 1810] 
split level 181: [/input, 3280] 
split level 182: [/input, 1857] 
split level 183: [/input, 2124] 
split level 184: [/input, 2673] 
split level 185: [/input, 1811] 
split level 186: [/input, 3794] 
split level 187: [/input-8, 1271] 
split level 188: [/input-8, 1332] 
split level 189: [/input, 4032] 
split level 190: [/input, 282] 
split level 191: [/input, 2550] 
split level 192: [/input, 3795] 
split level 193: [/input, 1083] 
split level 194: [/input, 1781] 
split level 195: [/input, 2497] 
split level 196: [/input, 1773] 
split level 197: [/input, 3190] 
split level 198: [/input, 399] 
split level 199: [/input, 3044] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6703691482543945
10 lb beta sum: 0.0, worst -0.6703062057495117
Time: prepare 0.0116    bound 0.0978    transfer 0.0028    finalize 0.0030    func 0.1178    
Accumulated time: func 0.1711    prepare 0.0235    bound 0.1506    transfer 0.0029    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.11181927) min lb tensor(-0.67029381)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010432958602905273 
BICCOS Cumulative time: 0.010432958602905273
Preprocessing time: 0.009995460510253906 Inference time: 0.0001220703125 Add cuts time: 8.440017700195312e-05 Cut analysis time: 0.00023102760314941406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.65138 (1), -0.65053 (1), -0.65005 (1), -0.64936 (1), -0.64913 (1), -0.64889 (1), -0.64859 (1), -0.64808 (1), -0.64770 (1), -0.64767 (1), -0.64749 (1), -0.64668 (1), -0.64646 (1), -0.64573 (1), -0.64560 (1), -0.64386 (1), -0.64293 (1), -0.64212 (1), -0.64028 (1), -0.63976 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5160    set_bounds 0.0089    solve 0.1178    add 0.2071    
Accumulated time: pickout 0.0003    decision 0.5160    set_bounds 0.0089    solve 0.1178    add 0.2071    
Current (lb-rhs): -0.6513814926147461
50 domains visited
Cumulative time: 0.939727783203125

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 60] [/input-12, 10] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 1] [/input-12, 60] 
split level 2: [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 92] [/input-12, 36] [/input-12, 36] [/input-12, 1] 
split level 3: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6120424270629883
10 lb beta sum: 0.45639944076538086, worst -0.6019182205200195
Time: prepare 0.0068    bound 0.1149    transfer 0.0017    finalize 0.0021    func 0.1282    
Accumulated time: func 0.2993    prepare 0.0306    bound 0.2656    transfer 0.0045    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(0.59055132) min lb tensor(-0.60187531)
Number of Verified Splits: 15 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.013169527053833008 
BICCOS Cumulative time: 0.02360248565673828
Preprocessing time: 0.011581897735595703 Inference time: 0.0006418228149414062 Add cuts time: 0.0002887248992919922 Cut analysis time: 0.0006570816040039062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.35769 (2), -0.35667 (2), -0.35612 (2), -0.35604 (2), -0.35303 (2), -0.34881 (2), -0.34850 (2), -0.34842 (2), -0.34410 (2), -0.34061 (2), -0.34001 (2), -0.33913 (2), -0.33796 (2), -0.33411 (2), -0.33292 (2), -0.33279 (2), -0.32866 (2), -0.32162 (2), -0.30974 (2), -0.30426 (2), 
Length of domains: 50
Time: pickout 0.0083    decision 0.0195    set_bounds 0.0127    solve 0.1283    add 0.2095    
Accumulated time: pickout 0.0086    decision 0.5355    set_bounds 0.0216    solve 0.2461    add 0.4166    
Current (lb-rhs): -0.35768595337867737
100 domains visited
Cumulative time: 1.3382396697998047

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 60] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
split level 2: [/input-12, 36] [/input-12, 36] [/input-12, 36] [/input-12, 1] [/input-12, 36] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 36] 
split level 3: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3670835494995117
10 lb beta sum: 0.6616756916046143, worst -0.33891531825065613
Time: prepare 0.0063    bound 0.1198    transfer 0.0021    finalize 0.0020    func 0.1334    
Accumulated time: func 0.4327    prepare 0.0372    bound 0.3854    transfer 0.0067    finalize 0.0072    
all_split False
======================Cut inference begins======================
max lb tensor(0.51708281) min lb tensor(-0.33490929)
Number of Verified Splits: 146 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.020959854125976562 
BICCOS Cumulative time: 0.044562339782714844
Preprocessing time: 0.011513233184814453 Inference time: 0.0069637298583984375 Add cuts time: 0.0022008419036865234 Cut analysis time: 0.00028204917907714844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19697 (3), -0.19666 (3), -0.19633 (3), -0.19625 (3), -0.19617 (3), -0.19442 (3), -0.19437 (3), -0.19409 (3), -0.19373 (3), -0.19363 (3), -0.19049 (3), -0.18988 (3), -0.18647 (3), -0.18534 (3), -0.18483 (3), -0.18463 (3), -0.18310 (3), -0.18222 (3), -0.18073 (3), -0.18055 (3), 
Length of domains: 50
Time: pickout 0.0077    decision 0.0193    set_bounds 0.0154    solve 0.1335    add 0.2231    
Accumulated time: pickout 0.0164    decision 0.5549    set_bounds 0.0371    solve 0.3796    add 0.6396    
Current (lb-rhs): -0.19696691632270813
150 domains visited
Cumulative time: 1.7653264999389648

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 1] [/input-12, 36] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 92] [/input-12, 36] [/input-12, 1] [/input-12, 13] [/input-12, 13] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 3: [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22625350952148438
10 lb beta sum: 1.0351201295852661, worst -0.17407505214214325
Time: prepare 0.0066    bound 0.1159    transfer 0.0017    finalize 0.0021    func 0.1288    
Accumulated time: func 0.5615    prepare 0.0441    bound 0.5013    transfer 0.0084    finalize 0.0093    
all_split False
======================Cut inference begins======================
max lb tensor(0.38959587) min lb tensor(-0.16945671)
Number of Verified Splits: 82 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 6
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.01737356185913086 
BICCOS Cumulative time: 0.0619359016418457
Preprocessing time: 0.011421918869018555 Inference time: 0.003747701644897461 Add cuts time: 0.0017774105072021484 Cut analysis time: 0.0004265308380126953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04861 (4), -0.04829 (4), -0.04766 (4), -0.04762 (4), -0.04706 (4), -0.04560 (4), -0.04302 (4), -0.04211 (4), -0.04013 (4), -0.03969 (4), -0.03756 (4), -0.03711 (4), -0.03555 (4), -0.03509 (4), -0.03471 (4), -0.03316 (4), -0.03224 (4), -0.03072 (4), -0.03041 (4), -0.02995 (4), 
Length of domains: 50
Time: pickout 0.0077    decision 0.0192    set_bounds 0.0156    solve 0.1289    add 0.3608    
Accumulated time: pickout 0.0241    decision 0.5741    set_bounds 0.0527    solve 0.5085    add 1.0004    
Current (lb-rhs): -0.04861259460449219
200 domains visited
Cumulative time: 2.3220324516296387

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 36] [/input-12, 36] [/input-12, 92] [/input-12, 92] [/input-12, 36] 
split level 3: [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11322593688964844
10 lb beta sum: 0.9314402341842651, worst -0.04475677013397217
Time: prepare 0.0070    bound 0.1319    transfer 0.0021    finalize 0.0021    func 0.1457    
Accumulated time: func 0.7072    prepare 0.0513    bound 0.6332    transfer 0.0105    finalize 0.0114    
all_split False
======================Cut inference begins======================
max lb tensor(0.26138026) min lb tensor(-0.03854883)
Number of Verified Splits: 322 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 6
#cuts 4-6: 16
#cuts >= 20: 0
BICCOS time: 0.03637218475341797 
BICCOS Cumulative time: 0.09830808639526367
Preprocessing time: 0.011585712432861328 Inference time: 0.016254901885986328 Add cuts time: 0.007756233215332031 Cut analysis time: 0.0007753372192382812
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0078    decision 0.0195    set_bounds 0.0163    solve 0.1458    add 0.0288    
Accumulated time: pickout 0.0319    decision 0.5936    set_bounds 0.0690    solve 0.6543    add 1.0292    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 92, 10]), tensor([-1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([3.68020993e-16, 1.51935473e-01, 7.38826841e-02, 2.83634812e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 92, 10]), tensor([-1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.68020993e-16, 1.51935473e-01, 7.38826841e-02, 2.71924753e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 92, 36]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.68020993e-16, 1.51935473e-01, 9.22886580e-02, 6.40390068e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 92, 36, 10]), tensor([-1., -1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([3.68020993e-16, 1.51935473e-01, 9.22886580e-02, 1.50663152e-01,
        2.53833652e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 92, 36, 10]), tensor([-1., -1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([3.68020993e-16, 1.51935473e-01, 9.22886580e-02, 1.50663152e-01,
        9.43965651e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 36]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([3.68020993e-16, 1.22617409e-01, 5.79717010e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 36, 10]), tensor([-1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([3.68020993e-16, 1.22617409e-01, 1.53270915e-01, 2.85458833e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 36, 10]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([3.68020993e-16, 1.22617409e-01, 1.53270915e-01, 2.94038523e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60, 10]), tensor([ 1., -1.]), tensor([0, 0]), tensor([3.68020993e-16, 7.32302427e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60, 10]), tensor([1., 1.]), tensor([0, 0]), tensor([3.68020993e-16, 2.96431053e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  10
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5184688568115234
10 lb beta sum: 0.8190637826919556, worst -0.463188111782074
Time: prepare 0.0005    bound 0.1335    transfer 0.0002    finalize 0.0002    func 0.1344    
Accumulated time: func 0.8416    prepare 0.0517    bound 0.7666    transfer 0.0107    finalize 0.0116    
After pruning, left:  5

Back to Regular BaB

BaB round 1
batch: 5
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 51] [/input-12, 10] [/input-12, 10] [/input-12, 51] [/input-12, 13] 
split level 1: [/input-12, 13] [/input-12, 51] [/input-12, 51] [/input-12, 13] [/input-12, 1] 
split level 2: [/input-12, 36] [/input-12, 13] [/input-12, 13] [/input-12, 93] [/input-12, 36] 
split level 3: [/input-12, 93] [/input-12, 93] [/input-12, 92] [/input-12, 37] [/input-12, 92] 
split level 4: [/input-12, 37] [/input-12, 37] [/input-12, 93] [/input-8, 677] [/input-12, 93] 
split level 5: [/input-8, 677] [/input-8, 677] [/input-12, 37] [/input-8, 603] [/input-12, 37] 
cut re-enabled after branching node selection
0 lb beta sum: 1.3582966327667236, worst -0.19941431283950806
10 lb beta sum: 1.3587573766708374, worst -0.19823366403579712
Time: prepare 0.0130    bound 0.1364    transfer 0.0006    finalize 0.0017    func 0.1538    
Accumulated time: func 0.9954    prepare 0.0651    bound 0.9030    transfer 0.0112    finalize 0.0133    
all_split False
======================Cut inference begins======================
max lb tensor(1.23099232) min lb tensor(-0.19771963)
Number of Verified Splits: 270 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.373031497001648, worst -0.6160669922828674
10 lb beta sum: 1.435658574104309, worst -0.5969578623771667
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 6
#cuts 4-6: 16
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.3042621612548828 
BICCOS Cumulative time: 0.4025702476501465
Preprocessing time: 0.008666038513183594 Inference time: 0.28711986541748047 Add cuts time: 0.007410287857055664 Cut analysis time: 0.001065969467163086
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19772 (6), -0.19588 (6), -0.18773 (6), -0.18754 (6), -0.18651 (6), -0.18613 (6), -0.18503 (6), -0.18371 (6), -0.16512 (6), -0.16414 (6), -0.16107 (6), -0.16072 (6), -0.15856 (6), -0.15758 (6), -0.15756 (6), -0.15622 (6), -0.15560 (6), -0.15261 (6), -0.14616 (6), -0.14531 (6), 
Length of domains: 50
Time: pickout 0.0005    decision 0.0202    set_bounds 0.0252    solve 0.1539    add 0.0010    
Accumulated time: pickout 0.0324    decision 0.6138    set_bounds 0.0942    solve 0.8082    add 1.0302    
Current (lb-rhs): -0.19771963357925415
250 domains visited
Cumulative time: 3.2668356895446777

BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 4] [/input-12, 51] [/input-12, 4] [/input-12, 4] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 4] [/input-12, 51] [/input-12, 4] 
split level 1: [/input-12, 45] [/input-12, 4] [/input-12, 45] [/input-8, 677] [/input-12, 4] [/input-12, 4] [/input-8, 1045] [/input-12, 45] [/input-12, 4] [/input-12, 45] 
split level 2: [/input-8, 603] [/input-8, 1045] [/input-8, 603] [/input-8, 603] [/input-8, 1045] [/input-8, 1045] [/input-8, 603] [/input-8, 603] [/input-8, 1045] [/input-8, 603] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1990966796875
10 lb beta sum: 0.227142333984375, worst -0.18514347076416016
Time: prepare 0.0078    bound 0.1309    transfer 0.0007    finalize 0.0022    func 0.1441    
Accumulated time: func 1.1395    prepare 0.0731    bound 1.0339    transfer 0.0119    finalize 0.0154    
all_split False
======================Cut inference begins======================
max lb tensor(0.50243664) min lb tensor(-0.18467236)
Number of Verified Splits: 287 of 400
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.04448580741882324 
BICCOS Cumulative time: 0.4470560550689697
Preprocessing time: 0.015234231948852539 Inference time: 0.026490449905395508 Add cuts time: 0.0023572444915771484 Cut analysis time: 0.0004038810729980469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18467 (9), -0.18274 (9), -0.17881 (9), -0.17687 (9), -0.17565 (9), -0.17561 (9), -0.17434 (9), -0.17415 (9), -0.17257 (9), -0.17121 (9), -0.16977 (9), -0.16972 (9), -0.16818 (9), -0.16808 (9), -0.16662 (9), -0.16498 (9), -0.15137 (9), -0.15042 (9), -0.14670 (9), -0.14642 (9), 
Length of domains: 113
Time: pickout 0.0015    decision 0.0145    set_bounds 0.0275    solve 0.1442    add 0.0014    
Accumulated time: pickout 0.0339    decision 0.6283    set_bounds 0.1217    solve 0.9524    add 1.0316    
Current (lb-rhs): -0.18467235565185547
363 domains visited
Cumulative time: 3.503506660461426

BaB round 3
batch: 113
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 45] [/input-8, 1880] [/input-12, 45] [/input-8, 670] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18902206420898438
10 lb beta sum: 0.6168811321258545, worst -0.1842641830444336
Time: prepare 0.0046    bound 0.1199    transfer 0.0005    finalize 0.0014    func 0.1279    
Accumulated time: func 1.2675    prepare 0.0779    bound 1.1538    transfer 0.0124    finalize 0.0168    
all_split False
======================Cut inference begins======================
max lb tensor(1.18683100) min lb tensor(-0.18408489)
Number of Verified Splits: 218 of 226
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.02950119972229004 
BICCOS Cumulative time: 0.47655725479125977
Preprocessing time: 0.006876707077026367 Inference time: 0.020673036575317383 Add cuts time: 0.0015749931335449219 Cut analysis time: 0.0003764629364013672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18408 (10), -0.18237 (10), -0.17819 (10), -0.17629 (10), -0.17549 (10), -0.17538 (10), -0.16943 (10), -0.16941 (10), 
Length of domains: 8
Time: pickout 0.0022    decision 0.0208    set_bounds 0.0097    solve 0.1280    add 0.0007    
Accumulated time: pickout 0.0362    decision 0.6491    set_bounds 0.1314    solve 1.0804    add 1.0324    
Current (lb-rhs): -0.18408489227294922
371 domains visited
Cumulative time: 3.695687770843506

BaB round 4
batch: 8
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 90] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 90] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-8, 1880] [/input-8, 670] [/input-8, 1880] [/input-8, 670] [/input-8, 1880] [/input-8, 670] [/input-8, 1880] [/input-8, 670] 
split level 2: [/input-8, 670] [/input-12, 90] [/input-12, 90] [/input-8, 1880] [/input-8, 670] [/input-12, 90] [/input-12, 90] [/input-8, 1880] 
split level 3: [/input-8, 603] [/input-8, 1880] [/input-8, 670] [/input-12, 90] [/input-8, 603] [/input-8, 1880] [/input-8, 670] [/input-12, 90] 
split level 4: [/input-8, 1315] [/input-8, 603] [/input-8, 603] [/input-8, 603] [/input-8, 1315] [/input-8, 603] [/input-8, 603] [/input-8, 603] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1577167510986328
10 lb beta sum: 0.657987654209137, worst -0.15289206802845
Time: prepare 0.0057    bound 0.1288    transfer 0.0008    finalize 0.0014    func 0.1384    
Accumulated time: func 1.4059    prepare 0.0839    bound 1.2827    transfer 0.0132    finalize 0.0182    
all_split False
======================Cut inference begins======================
max lb tensor(0.87438101) min lb tensor(-0.15284356)
Number of Verified Splits: 181 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 0.03179311752319336 
BICCOS Cumulative time: 0.5083503723144531
Preprocessing time: 0.0076045989990234375 Inference time: 0.021781444549560547 Add cuts time: 0.002018451690673828 Cut analysis time: 0.0003886222839355469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15284 (15), -0.14700 (15), -0.14652 (15), -0.14077 (15), -0.13449 (15), -0.12849 (15), -0.12816 (15), -0.12705 (15), -0.12226 (15), -0.12075 (15), -0.11997 (15), -0.11399 (15), -0.10898 (15), -0.10264 (15), -0.10157 (15), -0.09575 (15), -0.09559 (15), -0.09504 (15), -0.09271 (15), -0.08988 (15), 
Length of domains: 75
Time: pickout 0.0008    decision 0.0178    set_bounds 0.0237    solve 0.1385    add 0.0013    
Accumulated time: pickout 0.0370    decision 0.6669    set_bounds 0.1550    solve 1.2189    add 1.0337    
Current (lb-rhs): -0.15284356474876404
446 domains visited
Cumulative time: 3.9105513095855713

BaB round 5
batch: 75
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-8, 677] [/input-8, 811] [/input-12, 80] [/input-12, 33] [/input-8, 677] [/input-8, 811] [/input-12, 80] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-8, 677] [/input-8, 987] [/input-8, 677] [/input-8, 677] [/input-8, 677] [/input-8, 987] [/input-8, 677] [/input-8, 677] [/input-8, 1069] [/input-8, 1069] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14916610717773438
10 lb beta sum: 0.5055514574050903, worst -0.14453023672103882
Time: prepare 0.0060    bound 0.1324    transfer 0.0006    finalize 0.0017    func 0.1427    
Accumulated time: func 1.5486    prepare 0.0901    bound 1.4151    transfer 0.0137    finalize 0.0199    
all_split False
======================Cut inference begins======================
max lb tensor(0.57399350) min lb tensor(-0.14451225)
Number of Verified Splits: 153 of 300
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.03213214874267578 
BICCOS Cumulative time: 0.5404825210571289
Preprocessing time: 0.008903741836547852 Inference time: 0.020336627960205078 Add cuts time: 0.0024766921997070312 Cut analysis time: 0.0004150867462158203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14451 (17), -0.14061 (17), -0.13813 (17), -0.13424 (17), -0.12618 (17), -0.12609 (17), -0.12465 (17), -0.12210 (17), -0.11881 (17), -0.11863 (17), -0.11827 (17), -0.11572 (17), -0.11508 (17), -0.11343 (17), -0.11275 (17), -0.11242 (17), -0.11000 (17), -0.10736 (17), -0.10680 (17), -0.10636 (17), 
Length of domains: 147
Time: pickout 0.0017    decision 0.0170    set_bounds 0.0211    solve 0.1428    add 0.0016    
Accumulated time: pickout 0.0387    decision 0.6839    set_bounds 0.1762    solve 1.3617    add 1.0353    
Current (lb-rhs): -0.14451225101947784
593 domains visited
Cumulative time: 4.127996444702148

BaB round 6
batch: 147
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1069] [/input-12, 80] [/input-12, 80] [/input-8, 811] [/input-8, 1069] [/input-12, 80] [/input-12, 80] [/input-8, 811] [/input-8, 1069] [/input-12, 80] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14653778076171875
10 lb beta sum: 0.5334756970405579, worst -0.1419324278831482
Time: prepare 0.0058    bound 0.1349    transfer 0.0005    finalize 0.0016    func 0.1448    
Accumulated time: func 1.6934    prepare 0.0961    bound 1.5500    transfer 0.0143    finalize 0.0215    
all_split False
======================Cut inference begins======================
max lb tensor(0.32461625) min lb tensor(-0.14191253)
Number of Verified Splits: 55 of 294
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.017931222915649414 
BICCOS Cumulative time: 0.5584137439727783
Preprocessing time: 0.008666753768920898 Inference time: 0.007262229919433594 Add cuts time: 0.0015680789947509766 Cut analysis time: 0.0004341602325439453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14191 (18), -0.13940 (18), -0.13550 (18), -0.13296 (18), -0.12352 (18), -0.12343 (18), -0.12307 (18), -0.12089 (18), -0.11668 (18), -0.11525 (18), -0.11515 (18), -0.11445 (18), -0.11425 (18), -0.11213 (18), -0.11059 (18), -0.10740 (18), -0.10644 (18), -0.10600 (18), -0.10574 (18), -0.10458 (18), 
Length of domains: 239
Time: pickout 0.0025    decision 0.0188    set_bounds 0.0129    solve 0.1449    add 0.0015    
Accumulated time: pickout 0.0413    decision 0.7027    set_bounds 0.1891    solve 1.5066    add 1.0368    
Current (lb-rhs): -0.1419125348329544
832 domains visited
Cumulative time: 4.32712984085083

BaB round 7
batch: 239
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 811] [/input-8, 1069] [/input-8, 158] [/input-8, 811] [/input-8, 811] [/input-8, 1069] [/input-8, 158] [/input-8, 811] [/input-8, 811] [/input-8, 1069] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14191341400146484
10 lb beta sum: 0.7659735083580017, worst -0.1358117312192917
Time: prepare 0.0094    bound 0.1368    transfer 0.0022    finalize 0.0023    func 0.1539    
Accumulated time: func 1.8473    prepare 0.1057    bound 1.6868    transfer 0.0165    finalize 0.0238    
all_split False
======================Cut inference begins======================
max lb tensor(0.31346780) min lb tensor(-0.13579565)
Number of Verified Splits: 261 of 478
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.055207252502441406 
BICCOS Cumulative time: 0.6136209964752197
Preprocessing time: 0.013844013214111328 Inference time: 0.03729844093322754 Add cuts time: 0.0036089420318603516 Cut analysis time: 0.0004558563232421875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13580 (19), -0.13008 (19), -0.12935 (19), -0.12357 (19), -0.12207 (19), -0.11729 (19), -0.11689 (19), -0.11587 (19), -0.11177 (19), -0.11157 (19), -0.11083 (19), -0.11055 (19), -0.10913 (19), -0.10532 (19), -0.10506 (19), -0.10486 (19), -0.10387 (19), -0.10360 (19), -0.10241 (19), -0.10177 (19), 
Length of domains: 217
Time: pickout 0.0036    decision 0.0250    set_bounds 0.0209    solve 0.1540    add 0.0017    
Accumulated time: pickout 0.0449    decision 0.7277    set_bounds 0.2100    solve 1.6606    add 1.0385    
Current (lb-rhs): -0.13579565286636353
1049 domains visited
Cumulative time: 4.589273691177368

BaB round 8
batch: 217
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1315] [/input-8, 1315] [/input-8, 1069] [/input-8, 1315] [/input-8, 1069] [/input-8, 1069] [/input-8, 1069] [/input-8, 1315] [/input-8, 1069] [/input-8, 1069] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7905235290527344, worst -0.13285070657730103
10 lb beta sum: 0.7926763892173767, worst -0.1327572464942932
Time: prepare 0.0185    bound 0.1368    transfer 0.0013    finalize 0.0022    func 0.1616    
Accumulated time: func 2.0088    prepare 0.1243    bound 1.8236    transfer 0.0178    finalize 0.0261    
all_split False
======================Cut inference begins======================
max lb tensor(0.00665933) min lb tensor(-0.13273913)
Number of Verified Splits: 4 of 434
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.014638662338256836 
BICCOS Cumulative time: 0.6282596588134766
Preprocessing time: 0.012654781341552734 Inference time: 0.0007469654083251953 Add cuts time: 0.0004093647003173828 Cut analysis time: 0.0008275508880615234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13274 (20), -0.13006 (20), -0.12625 (20), -0.12617 (20), -0.12346 (20), -0.11945 (20), -0.11924 (20), -0.11424 (20), -0.11296 (20), -0.11156 (20), -0.11103 (20), -0.10775 (20), -0.10775 (20), -0.10763 (20), -0.10602 (20), -0.10523 (20), -0.10496 (20), -0.10470 (20), -0.10354 (20), -0.10290 (20), 
Length of domains: 430
Time: pickout 0.0046    decision 0.0227    set_bounds 0.0189    solve 0.1617    add 0.0022    
Accumulated time: pickout 0.0494    decision 0.7504    set_bounds 0.2288    solve 1.8223    add 1.0407    
Current (lb-rhs): -0.1327391266822815
1479 domains visited
Cumulative time: 4.8144261837005615

BaB round 9
batch: 430
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 987] [/input-8, 987] [/input-8, 1315] [/input-8, 987] [/input-8, 1315] [/input-8, 1315] [/input-8, 1315] [/input-8, 987] [/input-8, 1315] [/input-8, 1315] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7928140163421631, worst -0.1252651810646057
10 lb beta sum: 0.7928140163421631, worst -0.12510305643081665
Time: prepare 0.0361    bound 0.1378    transfer 0.0027    finalize 0.0043    func 0.1865    
Accumulated time: func 2.1954    prepare 0.1607    bound 1.9614    transfer 0.0205    finalize 0.0304    
all_split False
======================Cut inference begins======================
max lb tensor(0.02082300) min lb tensor(-0.12508017)
Number of Verified Splits: 29 of 860
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.03176307678222656 
BICCOS Cumulative time: 0.6600227355957031
Preprocessing time: 0.024654865264892578 Inference time: 0.004625082015991211 Add cuts time: 0.001975536346435547 Cut analysis time: 0.0005075931549072266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12508 (21), -0.12418 (21), -0.12274 (21), -0.12120 (21), -0.11953 (21), -0.11850 (21), -0.11795 (21), -0.11757 (21), -0.11626 (21), -0.11465 (21), -0.11280 (21), -0.11191 (21), -0.11131 (21), -0.10862 (21), -0.10784 (21), -0.10658 (21), -0.10568 (21), -0.10562 (21), -0.10454 (21), -0.10425 (21), 
Length of domains: 831
Time: pickout 0.0062    decision 0.0344    set_bounds 0.0363    solve 0.1868    add 0.0039    
Accumulated time: pickout 0.0557    decision 0.7848    set_bounds 0.2652    solve 2.0090    add 1.0446    
Current (lb-rhs): -0.1250801682472229
2310 domains visited
Cumulative time: 5.115302324295044

BaB round 10
batch: 831
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 810] [/input-8, 1055] [/input-8, 987] [/input-8, 1055] [/input-8, 987] [/input-8, 987] [/input-8, 987] [/input-8, 810] [/input-8, 987] [/input-8, 987] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7822437882423401, worst -0.1250820755958557
10 lb beta sum: 0.7822437882423401, worst -0.12505346536636353
Time: prepare 0.0711    bound 0.1558    transfer 0.0073    finalize 0.0067    func 0.2523    
Accumulated time: func 2.4477    prepare 0.2320    bound 2.1171    transfer 0.0278    finalize 0.0371    
all_split False
======================Cut inference begins======================
max lb tensor(0.01220739) min lb tensor(-0.12504297)
Number of Verified Splits: 73 of 1662
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.06480813026428223 
BICCOS Cumulative time: 0.7248308658599854
Preprocessing time: 0.05063629150390625 Inference time: 0.011888504028320312 Add cuts time: 0.0018033981323242188 Cut analysis time: 0.0004799365997314453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12504 (22), -0.12271 (22), -0.12186 (22), -0.12011 (22), -0.11929 (22), -0.11888 (22), -0.11841 (22), -0.11719 (22), -0.11615 (22), -0.11561 (22), -0.11522 (22), -0.11364 (22), -0.11347 (22), -0.11264 (22), -0.11228 (22), -0.11187 (22), -0.11067 (22), -0.11040 (22), -0.10898 (22), -0.10892 (22), 
Length of domains: 1589
Time: pickout 0.0155    decision 0.0574    set_bounds 0.2289    solve 0.2527    add 0.0194    
Accumulated time: pickout 0.0711    decision 0.8422    set_bounds 0.4941    solve 2.2618    add 1.0640    
Current (lb-rhs): -0.12504297494888306
3899 domains visited
Cumulative time: 5.756273984909058

BaB round 11
batch: 1589
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 810] [/input-8, 810] [/input-8, 810] [/input-8, 1055] [/input-8, 1055] [/input-8, 1055] [/input-8, 810] [/input-8, 1055] [/input-8, 810] [/input-8, 1055] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7794592976570129, worst -0.122073233127594
10 lb beta sum: 0.7794592976570129, worst -0.12207895517349243
Time: prepare 0.1394    bound 0.2381    transfer 0.0147    finalize 0.0184    func 0.4311    
Accumulated time: func 2.8789    prepare 0.3716    bound 2.3552    transfer 0.0424    finalize 0.0555    
all_split False
======================Cut inference begins======================
max lb tensor(0.03081846) min lb tensor(-0.12207133)
Number of Verified Splits: 319 of 3178
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 19
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.16796255111694336 
BICCOS Cumulative time: 0.8927934169769287
Preprocessing time: 0.09865736961364746 Inference time: 0.06242990493774414 Add cuts time: 0.006292104721069336 Cut analysis time: 0.0005831718444824219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12207 (23), -0.11973 (23), -0.11815 (23), -0.11709 (23), -0.11623 (23), -0.11541 (23), -0.11518 (23), -0.11492 (23), -0.11422 (23), -0.11347 (23), -0.11312 (23), -0.11263 (23), -0.11190 (23), -0.11151 (23), -0.11126 (23), -0.11042 (23), -0.10997 (23), -0.10985 (23), -0.10958 (23), -0.10954 (23), 
Length of domains: 2859
Time: pickout 0.0223    decision 0.0961    set_bounds 0.1329    solve 0.4317    add 0.0492    
Accumulated time: pickout 0.0935    decision 0.9383    set_bounds 0.6269    solve 2.6935    add 1.1132    
Current (lb-rhs): -0.12207132577896118
6758 domains visited
Cumulative time: 6.663362503051758

BaB round 12
batch: 2859
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1062] [/input-8, 1055] [/input-8, 988] [/input-8, 988] [/input-8, 988] [/input-8, 1055] [/input-8, 810] [/input-8, 1062] [/input-8, 810] [/input-8, 1062] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11901187896728516
10 lb beta sum: 0.5310937166213989, worst -0.1190032958984375
Time: prepare 0.1198    bound 0.3733    transfer 0.0291    finalize 0.0297    func 0.5890    
Accumulated time: func 3.4679    prepare 0.4916    bound 2.7285    transfer 0.0716    finalize 0.0852    
all_split False
======================Cut inference begins======================
max lb tensor(0.09978998) min lb tensor(-0.11900330)
Number of Verified Splits: 2082 of 5718
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 20
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.7814443111419678 
BICCOS Cumulative time: 1.6742377281188965
Preprocessing time: 0.17847204208374023 Inference time: 0.5629682540893555 Add cuts time: 0.03910541534423828 Cut analysis time: 0.0008985996246337891
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11900 (24), -0.11813 (24), -0.11665 (24), -0.11517 (24), -0.11403 (24), -0.11376 (24), -0.11345 (24), -0.11294 (24), -0.11229 (24), -0.11186 (24), -0.11184 (24), -0.11148 (24), -0.11105 (24), -0.11003 (24), -0.10978 (24), -0.10950 (24), -0.10933 (24), -0.10856 (24), -0.10775 (24), -0.10741 (24), 
Length of domains: 3636
Time: pickout 0.0416    decision 0.3011    set_bounds 0.2446    solve 0.5907    add 0.0235    
Accumulated time: pickout 0.1351    decision 1.2394    set_bounds 0.8715    solve 3.2842    add 1.1367    
Current (lb-rhs): -0.1190032958984375
10394 domains visited
Cumulative time: 8.673357009887695

BaB round 13
batch: 3636
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 988] [/input-8, 810] [/input-8, 810] [/input-8, 810] [/input-8, 988] [/input, 396] [/input, 396] [/input-8, 988] [/input-8, 82] [/input-8, 988] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11898136138916016
10 lb beta sum: 0.530522346496582, worst -0.11898612976074219
Time: prepare 0.1591    bound 0.6204    transfer 0.0374    finalize 0.2080    func 1.0725    
Accumulated time: func 4.5404    prepare 0.6510    bound 3.3490    transfer 0.1090    finalize 0.2933    
all_split False
======================Cut inference begins======================
max lb tensor(0.05737400) min lb tensor(-0.11897755)
Number of Verified Splits: 1240 of 7272
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 21
#cuts 4-6: 15
#cuts >= 20: 0
BICCOS time: 0.5117626190185547 
BICCOS Cumulative time: 2.186000347137451
Preprocessing time: 0.2350928783416748 Inference time: 0.24116039276123047 Add cuts time: 0.034424781799316406 Cut analysis time: 0.0010845661163330078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11898 (25), -0.11663 (25), -0.11543 (25), -0.11374 (25), -0.11292 (25), -0.11242 (25), -0.11224 (25), -0.11182 (25), -0.11124 (25), -0.11038 (25), -0.10998 (25), -0.10947 (25), -0.10882 (25), -0.10879 (25), -0.10821 (25), -0.10798 (25), -0.10705 (25), -0.10695 (25), -0.10658 (25), -0.10620 (25), 
Length of domains: 6032
Time: pickout 0.0691    decision 0.2038    set_bounds 0.3164    solve 1.0743    add 0.0680    
Accumulated time: pickout 0.2042    decision 1.4431    set_bounds 1.1879    solve 4.3585    add 1.2048    
Current (lb-rhs): -0.11897754669189453
16426 domains visited
Cumulative time: 10.939902544021606

BaB round 14
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 633] [/input-8, 633] [/input-8, 633] [/input, 1418] [/input-8, 633] [/input-8, 1494] [/input-8, 633] [/input-8, 1494] [/input-8, 1494] [/input-8, 1494] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11524581909179688
10 lb beta sum: 0.5380379557609558, worst -0.11524298787117004
Time: prepare 0.1903    bound 0.6931    transfer 0.0400    finalize 0.0540    func 1.0316    
Accumulated time: func 5.5719    prepare 0.8416    bound 4.0421    transfer 0.1490    finalize 0.3473    
all_split False
======================Cut inference begins======================
max lb tensor(0.29929447) min lb tensor(-0.10974312)
Number of Verified Splits: 1815 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 21
#cuts 4-6: 17
#cuts >= 20: 0
BICCOS time: 0.880223274230957 
BICCOS Cumulative time: 3.066223621368408
Preprocessing time: 0.2681694030761719 Inference time: 0.5675108432769775 Add cuts time: 0.04343533515930176 Cut analysis time: 0.0011076927185058594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11898 (25), -0.11663 (25), -0.11374 (25), -0.11292 (25), -0.11224 (25), -0.11182 (25), -0.10998 (25), -0.10974 (26), -0.10947 (25), -0.10931 (26), -0.10798 (25), -0.10695 (25), -0.10673 (26), -0.10658 (25), -0.10631 (26), -0.10613 (25), -0.10576 (25), -0.10553 (26), -0.10542 (25), -0.10534 (25), 
Length of domains: 8313
Time: pickout 0.0655    decision 0.2311    set_bounds 0.5362    solve 1.0335    add 0.1223    
Accumulated time: pickout 0.2697    decision 1.6742    set_bounds 1.7241    solve 5.3920    add 1.3270    
Current (lb-rhs): -0.11897754669189453
22803 domains visited
current_vram/total_varm: 12.3GB/99.9GB, batch_size increase to 8192
Cumulative time: 13.842367172241211

BaB round 15
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 633] [/input, 332] [/input-8, 633] [/input-8, 981] [/input-8, 633] [/input-8, 1883] [/input-8, 633] [/input-8, 1494] [/input-8, 633] [/input-8, 1883] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11595726013183594
10 lb beta sum: 0.5341411232948303, worst -0.11595916748046875
Time: prepare 0.4382    bound 1.3347    transfer 0.0794    finalize 0.1172    func 2.3660    
Accumulated time: func 7.9379    prepare 1.2801    bound 5.3768    transfer 0.2285    finalize 0.4645    
all_split False
======================Cut inference begins======================
max lb tensor(0.32714170) min lb tensor(-0.11594868)
Number of Verified Splits: 3613 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 1-3: 25
#cuts 4-6: 15
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 1.4179422855377197 
BICCOS Cumulative time: 4.484165906906128
Preprocessing time: 0.5742642879486084 Inference time: 0.767075777053833 Add cuts time: 0.0747377872467041 Cut analysis time: 0.0018644332885742188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11595 (26), -0.11360 (26), -0.11070 (26), -0.11066 (26), -0.10988 (26), -0.10946 (27), -0.10921 (26), -0.10879 (26), -0.10872 (27), -0.10831 (26), -0.10694 (26), -0.10645 (27), -0.10645 (26), -0.10571 (27), -0.10542 (26), -0.10521 (27), -0.10460 (26), -0.10441 (27), -0.10393 (26), -0.10392 (26), 
Length of domains: 12892
Time: pickout 0.1330    decision 0.4512    set_bounds 0.9459    solve 2.3708    add 0.1132    
Accumulated time: pickout 0.4028    decision 2.1254    set_bounds 2.6701    solve 7.7628    add 1.4402    
Current (lb-rhs): -0.11594867706298828
35574 domains visited
current_vram/total_varm: 21.9GB/99.9GB, batch_size increase to 16384
Cumulative time: 19.370177745819092

BaB round 16
batch: 12892
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1494] [/input-8, 633] [/input-8, 986] [/input-8, 988] [/input-8, 986] [/input-8, 1883] [/input-8, 981] [/input-8, 1883] [/input-8, 986] [/input-8, 986] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11357307434082031
10 lb beta sum: 0.5541743636131287, worst -0.11342811584472656
Time: prepare 0.6872    bound 2.0323    transfer 0.1357    finalize 0.6257    func 3.6501    
Accumulated time: func 11.5881    prepare 1.9677    bound 7.4091    transfer 0.3641    finalize 1.0903    
all_split False
======================Cut inference begins======================
max lb tensor(0.67370558) min lb tensor(-0.11339951)
Number of Verified Splits: 7701 of 25784
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 24
#cuts 4-6: 10
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 3.015766143798828 
BICCOS Cumulative time: 7.499932050704956
Preprocessing time: 0.8504865169525146 Inference time: 2.011479377746582 Add cuts time: 0.15238237380981445 Cut analysis time: 0.0014178752899169922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11340 (27), -0.11102 (27), -0.10809 (27), -0.10781 (27), -0.10707 (27), -0.10693 (28), -0.10666 (27), -0.10665 (27), -0.10619 (28), -0.10571 (27), -0.10448 (27), -0.10436 (27), -0.10404 (28), -0.10389 (27), -0.10360 (27), -0.10331 (28), -0.10325 (27), -0.10250 (27), -0.10225 (27), -0.10199 (27), 
Length of domains: 18083
Time: pickout 0.2964    decision 1.1753    set_bounds 1.5373    solve 3.6573    add 0.3856    
Accumulated time: pickout 0.6992    decision 3.3008    set_bounds 4.2074    solve 11.4201    add 1.8258    
Current (lb-rhs): -0.11339950561523438
53657 domains visited
Cumulative time: 29.631802797317505

BaB round 17
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 988] [/input, 2423] [/input-8, 988] [/input, 2423] [/input-8, 810] [/input-8, 1494] [/input-8, 986] [/input-8, 1454] [/input-8, 82] [/input-8, 986] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1130056381225586
10 lb beta sum: 0.52753746509552, worst -0.1129922866821289
Time: prepare 0.9447    bound 2.5392    transfer 0.1575    finalize 0.2460    func 4.1007    
Accumulated time: func 15.6888    prepare 2.9130    bound 9.9483    transfer 0.5216    finalize 1.3363    
all_split False
======================Cut inference begins======================
max lb tensor(0.41450876) min lb tensor(-0.11298275)
Number of Verified Splits: 10666 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 54.
#cuts 1-3: 25
#cuts 4-6: 28
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 3.7901663780212402 
BICCOS Cumulative time: 11.290098428726196
Preprocessing time: 1.506678819656372 Inference time: 2.084728956222534 Add cuts time: 0.19684910774230957 Cut analysis time: 0.001909494400024414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11298 (28), -0.11061 (28), -0.10767 (28), -0.10738 (28), -0.10664 (28), -0.10616 (28), -0.10530 (28), -0.10454 (29), -0.10399 (28), -0.10389 (29), -0.10358 (28), -0.10304 (28), -0.10300 (28), -0.10263 (28), -0.10258 (28), -0.10207 (28), -0.10165 (29), -0.10162 (28), -0.10133 (28), -0.10126 (28), 
Length of domains: 23801
Time: pickout 0.3255    decision 2.0963    set_bounds 1.9685    solve 4.1112    add 0.2565    
Accumulated time: pickout 1.0247    decision 5.3971    set_bounds 6.1759    solve 15.5313    add 2.0823    
Current (lb-rhs): -0.11298274993896484
75759 domains visited
current_vram/total_varm: 41.7GB/99.9GB, batch_size increase to 32768
Cumulative time: 42.34416460990906

BaB round 18
batch: 23801
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1883] [/input-8, 1251] [/input-8, 1883] [/input-8, 810] [/input-8, 810] [/input-8, 1454] [/input-8, 1251] [/input-8, 1454] [/input-8, 1883] [/input-8, 986] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10944652557373047
10 lb beta sum: 0.49748894572257996, worst -0.10940742492675781
Time: prepare 1.2480    bound 3.7076    transfer 0.2439    finalize 0.3260    func 6.3212    
Accumulated time: func 22.0100    prepare 4.1615    bound 13.6559    transfer 0.7655    finalize 1.6623    
all_split False
======================Cut inference begins======================
max lb tensor(0.40655518) min lb tensor(-0.10939884)
Number of Verified Splits: 12677 of 47602
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 68.
#cuts 1-3: 26
#cuts 4-6: 40
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 4.8568408489227295 
BICCOS Cumulative time: 16.146939277648926
Preprocessing time: 1.4967703819274902 Inference time: 3.1212375164031982 Add cuts time: 0.2366793155670166 Cut analysis time: 0.002153635025024414
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10940 (29), -0.10702 (29), -0.10407 (29), -0.10379 (29), -0.10305 (29), -0.10258 (29), -0.10216 (30), -0.10171 (29), -0.10140 (30), -0.10041 (29), -0.10004 (29), -0.09999 (29), -0.09953 (29), -0.09940 (29), -0.09923 (30), -0.09897 (29), -0.09868 (29), -0.09848 (29), -0.09846 (30), -0.09802 (29), 
Length of domains: 34925
Time: pickout 0.6088    decision 2.8364    set_bounds 3.1878    solve 6.3305    add 0.5160    
Accumulated time: pickout 1.6335    decision 8.2335    set_bounds 9.3637    solve 21.8618    add 2.5983    
Current (lb-rhs): -0.10939884185791016
110684 domains visited
Cumulative time: 60.86572766304016

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 810] [/input-8, 1446] [/input-8, 810] [/input-8, 981] [/input-8, 981] [/input-8, 981] [/input-8, 986] [/input-8, 981] [/input-8, 986] [/input, 1418] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10653209686279297
10 lb beta sum: 0.4739851653575897, worst -0.10649681091308594
Time: prepare 1.7449    bound 10.3449    transfer 0.3120    finalize 1.0739    func 13.9018    
Accumulated time: func 35.9118    prepare 5.9069    bound 24.0009    transfer 1.0775    finalize 2.7361    
all_split False
======================Cut inference begins======================
max lb tensor(0.41003197) min lb tensor(-0.10648918)
Number of Verified Splits: 17916 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 77.
#cuts 1-3: 28
#cuts 4-6: 46
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 7.5927228927612305 
BICCOS Cumulative time: 23.739662170410156
Preprocessing time: 2.7415738105773926 Inference time: 3.7236297130584717 Add cuts time: 1.124880313873291 Cut analysis time: 0.0026390552520751953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10649 (30), -0.10400 (30), -0.10117 (30), -0.10093 (30), -0.10024 (30), -0.09968 (30), -0.09911 (31), -0.09868 (30), -0.09835 (31), -0.09832 (30), -0.09783 (30), -0.09775 (30), -0.09738 (30), -0.09708 (30), -0.09688 (30), -0.09643 (30), -0.09607 (31), -0.09605 (30), -0.09592 (30), -0.09559 (30), 
Length of domains: 49777
Time: pickout 0.6318    decision 3.4187    set_bounds 3.7075    solve 13.9153    add 0.1698    
Accumulated time: pickout 2.2653    decision 11.6522    set_bounds 13.0712    solve 35.7771    add 2.7682    
Current (lb-rhs): -0.10648918151855469
158304 domains visited
Cumulative time: 90.54548120498657

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1883] [/input-8, 810] [/input-8, 986] [/input-8, 633] [/input-8, 1883] [/input-8, 1883] [/input-8, 1883] [/input-8, 810] [/input-8, 633] [/input-8, 986] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10476303100585938
10 lb beta sum: 0.5817059278488159, worst -0.10239505767822266
Time: prepare 1.7584    bound 10.3799    transfer 0.3166    finalize 1.1864    func 14.0651    
Accumulated time: func 49.9769    prepare 7.6657    bound 34.3808    transfer 1.3941    finalize 3.9226    
all_split False
======================Cut inference begins======================
max lb tensor(0.66470522) min lb tensor(-0.10238743)
Number of Verified Splits: 25058 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 96.
#cuts 1-3: 34
#cuts 4-6: 55
#cuts 7-9: 7
#cuts >= 20: 0
BICCOS time: 8.580272912979126 
BICCOS Cumulative time: 32.31993508338928
Preprocessing time: 2.907557725906372 Inference time: 5.191397428512573 Add cuts time: 0.4781355857849121 Cut analysis time: 0.0031821727752685547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10239 (31), -0.09999 (31), -0.09911 (31), -0.09835 (31), -0.09775 (30), -0.09705 (31), -0.09697 (31), -0.09688 (30), -0.09624 (31), -0.09607 (31), -0.09547 (31), -0.09530 (31), -0.09466 (31), -0.09427 (30), -0.09398 (31), -0.09351 (30), -0.09336 (31), -0.09326 (31), -0.09320 (31), -0.09299 (31), 
Length of domains: 57487
Time: pickout 0.6686    decision 3.3464    set_bounds 3.8545    solve 14.0790    add 0.1466    
Accumulated time: pickout 2.9339    decision 14.9986    set_bounds 16.9257    solve 49.8561    add 2.9147    
Current (lb-rhs): -0.1023874282836914
198782 domains visited
Cumulative time: 121.56111574172974

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1446] [/input-8, 986] [/input-8, 986] [/input-8, 986] [/input-8, 1883] [/input, 2182] [/input-8, 1883] [/input-8, 986] [/input, 1418] [/input, 332] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10176372528076172
10 lb beta sum: 0.7011322975158691, worst -0.1160290464758873
Time: prepare 1.7737    bound 10.4232    transfer 0.3167    finalize 1.3172    func 14.2566    
Accumulated time: func 64.2335    prepare 9.4398    bound 44.8039    transfer 1.7108    finalize 5.2398    
all_split False
======================Cut inference begins======================
max lb tensor(0.67861366) min lb tensor(-0.09926510)
Number of Verified Splits: 26124 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 94.
#cuts 1-3: 33
#cuts 4-6: 55
#cuts 7-9: 6
#cuts >= 20: 0
BICCOS time: 9.286227226257324 
BICCOS Cumulative time: 41.606162309646606
Preprocessing time: 3.179433822631836 Inference time: 5.543849945068359 Add cuts time: 0.5597512722015381 Cut analysis time: 0.0031921863555908203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09927 (32), -0.09687 (32), -0.09536 (32), -0.09460 (32), -0.09447 (32), -0.09399 (32), -0.09386 (32), -0.09385 (31), -0.09334 (32), -0.09312 (32), -0.09298 (31), -0.09286 (31), -0.09259 (32), -0.09234 (32), -0.09232 (32), -0.09208 (32), -0.09160 (32), -0.09156 (32), -0.09126 (31), -0.09092 (32), 
Length of domains: 64131
Time: pickout 0.6851    decision 4.1318    set_bounds 3.9971    solve 14.2715    add 0.1444    
Accumulated time: pickout 3.6191    decision 19.1304    set_bounds 20.9228    solve 64.1276    add 3.0591    
Current (lb-rhs): -0.09926509857177734
238194 domains visited
Cumulative time: 154.43987035751343

BaB round 22
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1019] [/input-8, 633] [/input-8, 988] [/input-8, 633] [/input-8, 1251] [/input-8, 1019] [/input-8, 633] [/input-8, 633] [/input-8, 1019] [/input-8, 988] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09785079956054688
10 lb beta sum: 0.661613404750824, worst -0.11249035596847534
Time: prepare 1.7881    bound 10.4340    transfer 0.3159    finalize 0.4981    func 14.5266    
Accumulated time: func 78.7601    prepare 11.2283    bound 55.2379    transfer 2.0267    finalize 5.7379    
all_split False
======================Cut inference begins======================
max lb tensor(0.67430937) min lb tensor(-0.09342003)
Number of Verified Splits: 31588 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 103.
#cuts 1-3: 36
#cuts 4-6: 60
#cuts 7-9: 7
#cuts >= 20: 0
BICCOS time: 10.708740711212158 
BICCOS Cumulative time: 52.314903020858765
Preprocessing time: 2.193556070327759 Inference time: 7.8517820835113525 Add cuts time: 0.659874439239502 Cut analysis time: 0.003528118133544922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09927 (32), -0.09687 (32), -0.09447 (32), -0.09399 (32), -0.09386 (32), -0.09342 (33), -0.09334 (32), -0.09312 (32), -0.09266 (33), -0.09259 (32), -0.09234 (32), -0.09208 (32), -0.09160 (32), -0.09126 (31), -0.09092 (32), -0.09068 (32), -0.09050 (31), -0.09038 (33), -0.09029 (32), -0.09015 (32), 
Length of domains: 65311
Time: pickout 0.7321    decision 3.8472    set_bounds 4.1892    solve 14.5504    add 0.1346    
Accumulated time: pickout 4.3512    decision 22.9776    set_bounds 25.1121    solve 78.6780    add 3.1937    
Current (lb-rhs): -0.09926509857177734
272142 domains visited
Cumulative time: 188.9950737953186

BaB round 23
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1251] [/input-8, 1251] [/input-8, 1019] [/input, 396] [/input-8, 633] [/input, 396] [/input, 1418] [/input-8, 633] [/input-8, 1019] [/input-8, 633] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0993642807006836
10 lb beta sum: 0.691524863243103, worst -0.10620522499084473
Time: prepare 1.8019    bound 10.4599    transfer 0.3131    finalize 1.4776    func 14.4910    
Accumulated time: func 93.2511    prepare 13.0307    bound 65.6979    transfer 2.3398    finalize 7.2155    
all_split False
======================Cut inference begins======================
max lb tensor(0.68166053) min lb tensor(-0.09693909)
Number of Verified Splits: 25084 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 106.
#cuts 1-3: 38
#cuts 4-6: 60
#cuts 7-9: 8
#cuts >= 20: 0
BICCOS time: 10.296152830123901 
BICCOS Cumulative time: 62.611055850982666
Preprocessing time: 2.4607059955596924 Inference time: 7.251924753189087 Add cuts time: 0.5801360607147217 Cut analysis time: 0.0033860206604003906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09694 (33), -0.09451 (33), -0.09342 (33), -0.09266 (33), -0.09168 (33), -0.09147 (33), -0.09133 (33), -0.09074 (33), -0.09068 (32), -0.09057 (33), -0.09038 (33), -0.09002 (33), -0.08981 (32), -0.08962 (33), -0.08929 (33), -0.08925 (33), -0.08890 (32), -0.08865 (33), -0.08836 (32), -0.08829 (33), 
Length of domains: 72995
Time: pickout 0.7113    decision 3.3392    set_bounds 4.2305    solve 14.5064    add 15.9107    
Accumulated time: pickout 5.0624    decision 26.3167    set_bounds 29.3426    solve 93.1844    add 19.1045    
Current (lb-rhs): -0.0969390869140625
312594 domains visited
Time out!!!!!!!!
Result: unknown in 240.7701 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 25, vnnlib ID: 25 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.14924717, -7.20264626, -3.62566066, -3.26617622, -3.26720905,
         -3.86512804, -2.64753652, -4.15916395, -7.16723728, -5.27643299]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [704]; unstable size 704; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 299, 1, 704] with unstable size 298 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 704] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 704] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [298]; unstable size 298; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 298] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 298] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.08241951, -2.05952287, -2.42161846, -2.46702027, -2.20508480,
         -3.01655006, -2.22386408,  1.33762670, -0.76212597]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.14924717, -7.20264626, -3.62566066, -3.26617622, -3.26720905,
         -3.86512804, -2.64753652, -4.15916395, -7.16723728, -5.27643299]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.14924717, -7.20264530, -3.62566042, -3.26617575, -3.26720858,
          -3.86512756, -2.64753628, -4.15916443, -7.16723728, -5.27643251],
         [-4.14924717, -7.20264530, -3.62566042, -3.26617575, -3.26720858,
          -3.86512756, -2.64753628, -4.15916443, -7.16723728, -5.27643251]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.52358675, -0.88307142, -0.88203859, -0.28411961, -1.50171089,
           0.00991726,  1.12718534]]], device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         ...,


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]],


         [[[ 0.86825401,  0.86825401,  0.80476195,  ...,  1.24920666,
             1.21746063,  1.13809550],
           [ 0.83650798,  0.75714290,  0.72539687,  ...,  1.07460344,
             1.01111114,  0.90000004],
           [ 0.75714290,  0.80476195,  0.82063496,  ...,  0.93174607,
             0.83650798,  0.78888893],
           ...,
           [ 1.18571460,  1.16984153,  1.23333359,  ..., -0.21111101,
             0.20158738,  0.10634929],
           [ 1.28095269,  1.29682565,  1.32857168,  ..., -0.52857143,
            -0.25873005,  0.26507944],
           [ 1.34444475,  1.37619078,  1.40793681,  ..., -0.08412688,
            -0.27460307,  0.09047628]],

          [[ 0.69243163,  0.67632860,  0.62801939,  ...,  1.06280196,
             1.03059590,  0.93397754],
           [ 0.67632860,  0.59581327,  0.56360716,  ...,  0.93397754,
             0.85346222,  0.74074084],
           [ 0.64412248,  0.69243163,  0.72463775,  ...,  0.82125610,
             0.74074084,  0.67632860],
           ...,
           [ 1.06280196,  1.06280196,  1.12721443,  ..., -0.28985494,
             0.14492765,  0.04830930],
           [ 1.09500813,  1.12721443,  1.15942061,  ..., -0.49919480,
            -0.27375188,  0.20933989],
           [ 1.15942061,  1.17552364,  1.20772982,  ..., -0.06441211,
            -0.30595800,  0.01610318]],

          [[ 0.72113961,  0.72113961,  0.67616212,  ...,  0.91604215,
             0.91604215,  0.88605714],
           [ 0.70614707,  0.64617711,  0.60119957,  ...,  0.88605714,
             0.84107965,  0.76611710],
           [ 0.67616212,  0.70614707,  0.73613209,  ...,  0.85607213,
             0.81109464,  0.79610211],
           ...,
           [ 1.03598225,  1.03598225,  1.09595215,  ..., -0.11844061,
             0.19640197,  0.01649191],
           [ 1.11094475,  1.14092970,  1.17091501,  ..., -0.37331331,
            -0.16341813,  0.25637197],
           [ 1.17091501,  1.18590748,  1.21589243,  ..., -0.01349309,
            -0.20839565,  0.10644694]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1162 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 26, vnnlib ID: 26 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.82686090, -6.41171074, -7.68403912, -6.35791826, -7.00407124,
         -6.85788012, -7.81835127, -6.72433424, -6.81869602, -4.52237940]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [573]; unstable size 573; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 573] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 573] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 573] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 164] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.93261254, 0.64227402, 1.35773587, 0.14541292, 0.77890623, 0.42941666,
         1.61863804, 0.36068964, 0.89056170]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0713 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 27, vnnlib ID: 27 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.06539822, -17.73662376, -13.52726841, -13.91146278, -10.88764858,
         -13.52410698, -16.07256508,  -5.87544203, -16.85854721, -15.41843987]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [650]; unstable size 650; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 650] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 650] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 650] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 191] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.35606480, 9.58715725, 6.00918579, 6.42040968, 3.78135014, 6.19913769,
         8.01423836, 8.93800163, 7.41418457]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0872 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 28, vnnlib ID: 28 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.62422132, -12.83205509, -10.86794376, -11.14358330, -11.48577309,
         -12.18943787, -11.86716270, -14.63631248, -10.53621006, -12.42279720]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [928]; unstable size 928; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 124, 1, 928] with unstable size 123 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 928] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 928] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [123]; unstable size 123; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 123] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 123] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.12223959, 2.45312405, 2.49229193, 2.85657835, 3.25084209, 3.41792583,
         5.43004131, 2.01518512, 3.76126599]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0641 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 29, vnnlib ID: 29 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.71822071, -11.80851841,  -6.85466003,  -5.36537838,  -5.07366467,
          -5.51355600,  -5.88568926,  -6.49064875, -10.61816978, -10.64415073]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [574]; unstable size 574; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 216, 1, 574] with unstable size 215 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 574] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 574] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [215]; unstable size 215; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 215] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 215] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.72788715,  3.64086866, -0.86040354, -2.15425563, -2.38526630,
         -1.95328188, -1.94343805,  2.43316555,  2.66482782]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.71822071, -11.80851841,  -6.85466003,  -5.36537838,  -5.07366467,
          -5.51355600,  -5.88568926,  -6.49064875, -10.61816978, -10.64415073]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.71822071, -11.80851841,  -6.85466003,  -5.36537838,  -5.07366467,
           -5.51355553,  -5.88568926,  -6.49064827, -10.61816883, -10.64415073],
         [-10.71822071, -11.80851841,  -6.85466003,  -5.36537838,  -5.07366467,
           -5.51355553,  -5.88568926,  -6.49064827, -10.61816883, -10.64415073]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.36401176, -1.12526989, -1.41698360, -0.97709274, -0.60495901]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]],


         [[[-1.95714283, -1.94126987, -1.94126987,  ..., -1.76666665,
            -1.78253973, -1.79841268],
           [-1.92539680, -1.94126987, -1.94126987,  ..., -1.79841268,
            -1.81428576, -1.83015871],
           [-1.92539680, -1.92539680, -1.94126987,  ..., -1.83015871,
            -1.84603179, -1.86190474],
           ...,
           [ 0.16984135,  0.12222230,  0.24920642,  ..., -0.24285704,
            -0.36984116, -0.49682540],
           [-0.33809513, -0.19523799,  0.05873025,  ..., -0.30634910,
            -0.38571417, -0.49682540],
           [-0.87777776, -0.27460307, -0.02063482,  ..., -0.32222211,
            -0.43333322, -0.54444444]],

          [[-1.94847023, -1.93236721, -1.93236721,  ..., -1.75523353,
            -1.77133656, -1.78743970],
           [-1.91626418, -1.93236721, -1.93236721,  ..., -1.78743970,
            -1.80354273, -1.81964576],
           [-1.91626418, -1.91626418, -1.93236721,  ..., -1.81964576,
            -1.83574879, -1.85185194],
           ...,
           [ 0.04830930, -0.04830906,  0.06441236,  ..., -0.41867942,
            -0.54750401, -0.66022539],
           [-0.46698871, -0.37037024, -0.14492741,  ..., -0.48309177,
            -0.56360704, -0.67632848],
           [-1.03059578, -0.45088565, -0.22544271,  ..., -0.49919480,
            -0.61191624, -0.72463763]],

          [[-1.67766130, -1.66266882, -1.66266882,  ..., -1.49775124,
            -1.51274371, -1.52773619],
           [-1.64767623, -1.66266882, -1.66266882,  ..., -1.52773619,
            -1.54272878, -1.55772126],
           [-1.64767623, -1.64767623, -1.66266882,  ..., -1.55772126,
            -1.57271373, -1.58770621],
           ...,
           [-0.08845562, -0.19340314, -0.13343313,  ..., -0.53823084,
            -0.65817088, -0.76311839],
           [-0.55322337, -0.47826082, -0.29835078,  ..., -0.59820086,
            -0.67316341, -0.76311839],
           [-1.04797614, -0.52323836, -0.34332830,  ..., -0.61319339,
            -0.71814090, -0.80809593]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1177 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 30, vnnlib ID: 30 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.18480682, -14.47258854, -11.18161869, -14.32627869, -12.30105877,
         -15.18956566, -14.34846020, -16.43445969, -12.35407734, -15.00505161]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [778]; unstable size 778; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 155, 1, 778] with unstable size 154 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 778] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 778] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [154]; unstable size 154; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 154] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 154] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.25004578, 2.19217992, 5.06827354, 3.28106451, 5.71236134, 5.22400045,
         7.04772663, 3.23776221, 5.66314316]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0656 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 31, vnnlib ID: 31 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.54959202, -14.93725681,  -9.59988976, -11.64203358,  -7.25195312,
         -11.52101326, -11.52331543,  -9.14212132, -13.16885757, -13.51460266]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [559]; unstable size 559; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 280, 1, 559] with unstable size 279 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 559] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 559] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [279]; unstable size 279; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 279] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 279] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.93221855, 5.50633097, 1.10160100, 3.24869013, 3.06275201, 2.55501723,
         0.80379391, 3.91150236, 4.20123291]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0379 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 32, vnnlib ID: 32 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.27112675, -12.63512135,  -8.63367748,  -9.42183304,  -7.46700573,
          -9.92411232,  -9.37480068,  -7.93249464, -10.13228416, -10.65295982]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [673]; unstable size 673; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 673] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 673] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 673] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 249] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.22755599,  2.35429573, -1.18080187, -0.14742768, -1.67962337,
          0.47270072, -0.58272314, -0.47875667,  1.04633427]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.27112675, -12.63512135,  -8.63367748,  -9.42183304,  -7.46700573,
          -9.92411232,  -9.37480068,  -7.93249464, -10.13228416, -10.65295982]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.27112770, -12.63512135,  -8.63367748,  -9.42183399,  -7.46700478,
           -9.92411232,  -9.37480068,  -7.93249464, -10.13228512, -10.65296173],
         [-10.27112770, -12.63512135,  -8.63367748,  -9.42183399,  -7.46700478,
           -9.92411232,  -9.37480068,  -7.93249464, -10.13228512, -10.65296173]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.70118284,  1.48933935, -0.46548986,  1.44230604,  2.19979048]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]],


         [[[ 5.50793707e-01,  2.49206424e-01, -4.76180762e-03,  ...,
            -2.11111009e-01, -1.63491964e-01, -8.41268823e-02],
           [ 3.12698483e-01,  1.53968334e-01, -2.26984024e-01,  ...,
            -1.95237994e-01, -1.47618949e-01, -1.63491964e-01],
           [ 2.01587379e-01,  1.22222304e-01, -1.63491964e-01,  ...,
            -1.79364979e-01, -2.26984024e-01, -1.95237994e-01],
           ...,
           [ 1.11112073e-02, -3.65078375e-02, -5.23808524e-02,  ...,
            -1.15872920e-01, -8.41268823e-02, -3.65078375e-02],
           [-4.76180762e-03, -5.23808524e-02, -6.82538673e-02,  ...,
            -8.41268823e-02, -8.41268823e-02, -6.82538673e-02],
           [-8.41268823e-02, -1.31745934e-01, -1.15872920e-01,  ...,
             1.11112073e-02, -3.65078375e-02, -3.65078375e-02]],

          [[ 1.11111140e+00,  7.08534718e-01,  2.73752123e-01,  ...,
            -1.61030471e-01, -1.12721294e-01, -3.22059989e-02],
           [ 8.37359190e-01,  5.31401038e-01, -6.44121096e-02,  ...,
            -1.44927412e-01, -9.66182351e-02, -1.12721294e-01],
           [ 5.95813274e-01,  4.34782714e-01, -4.83090580e-02,  ...,
            -1.28824353e-01, -1.77133530e-01, -1.44927412e-01],
           ...,
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -1.44927412e-01, -1.28824353e-01, -8.05151686e-02],
           [-1.61029361e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.12721294e-01],
           [-9.66182351e-02, -1.44927412e-01, -1.28824353e-01,  ...,
            -3.22059989e-02, -6.44121096e-02, -8.05151686e-02]],

          [[ 1.56072009e+00,  1.17091501e+00,  6.61169589e-01,  ...,
             7.64619336e-02,  1.06446937e-01,  1.81409463e-01],
           [ 1.23088503e+00,  9.16042149e-01,  2.41379470e-01,  ...,
             7.64619336e-02,  1.21439442e-01,  1.06446937e-01],
           [ 9.01049674e-01,  7.21139610e-01,  1.96401969e-01,  ...,
             9.14544314e-02,  4.64769229e-02,  7.64619336e-02],
           ...,
           [-1.33433133e-01, -1.63418129e-01, -1.78410634e-01,  ...,
            -1.63418129e-01, -8.84556174e-02, -1.34930937e-02],
           [-1.33433133e-01, -1.78410634e-01, -1.93403140e-01,  ...,
            -1.18440613e-01, -7.34631121e-02, -2.84855980e-02],
           [-2.08395645e-01, -2.53373146e-01, -2.38380641e-01,  ...,
            -2.84855980e-02, -2.84855980e-02,  1.49940979e-03]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0909 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 33, vnnlib ID: 33 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.97903728, -15.47458935, -14.82082081, -16.93464851, -16.98804283,
         -18.22283363, -17.40720367, -19.39607430, -13.83522511, -16.04048157]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [961]; unstable size 961; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 147, 1, 961] with unstable size 146 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 961] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 961] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [146]; unstable size 146; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 146] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 146] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.36850739, 2.85024285, 4.83520412, 4.84200573, 5.83572006, 5.30677128,
         7.12614679, 1.81439674, 4.14064789]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0660 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 34, vnnlib ID: 34 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.24514103, -9.31445694, -4.68999958, -4.27805805, -4.32876205,
         -4.84132576, -4.94563007, -5.30884266, -9.89639282, -8.35261440]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [576]; unstable size 576; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 271, 1, 576] with unstable size 270 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 576] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 576] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [270]; unstable size 270; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 270] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 270] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.30363131,  2.67125273, -0.65277267, -0.97995400,  0.21614307,
         -0.59253985,  0.02449504,  3.50285625,  2.09800720]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.24514103, -9.31445694, -4.68999958, -4.27805805, -4.32876205,
         -4.84132576, -4.94563007, -5.30884266, -9.89639282, -8.35261440]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.15455532, -10.60125256,  -5.41358471,  -5.43196726,  -5.26921654,
           -5.97929192,  -6.01046705,  -6.31621122, -10.86349106,  -9.62036419],
         [ -9.15455532, -10.60125256,  -5.41358471,  -5.43196726,  -5.26921654,
           -5.97929192,  -6.01046705,  -6.31621122, -10.86349106,  -9.62036419]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.01838255, -0.16275072,  0.57849979]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0144 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0837 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 35, vnnlib ID: 35 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.70502281, -7.45960903, -2.49920797, -1.05304623, -3.13333511,
         -1.90231669, -1.12411547, -2.32658529, -5.78024006, -5.08773088]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 256, 1, 540] with unstable size 255 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 540] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [255]; unstable size 255; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 255] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 255] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.87189984,  3.69729805,  0.41519833,  1.04059911,  0.46059471,
         -1.19380581,  0.21724120,  2.69666767,  1.93056870]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.70502281, -7.45960903, -2.49920797, -1.05304623, -3.13333511,
         -1.90231669, -1.12411547, -2.32658529, -5.78024006, -5.08773088]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.05819893, -7.58267593, -2.72234511, -1.43960345, -3.43121195,
          -2.28614616, -0.89729089, -2.77882195, -6.09740543, -5.29890108]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.54231256]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0056 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0816 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 36, vnnlib ID: 36 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.26436710, -5.76788616, -1.08416247,  0.26655820, -2.02816391,
         -0.65419853, -1.94119561, -0.85351741, -4.12531948, -3.61707258]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [746]; unstable size 746; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 148, 1, 746] with unstable size 147 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 746] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 746] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [147]; unstable size 147; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 147] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 147] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.37818599,  3.92298722, -0.56011510, -1.79689848,  0.44506049,
         -0.89399874,  0.06454635,  2.27980351,  1.70670152]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.26436710, -5.76788616, -1.08416247,  0.26655820, -2.02816391,
         -0.65419853, -1.94119561, -0.85351741, -4.12531948, -3.61707258]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.26436663, -5.76788521, -1.08416212,  0.26655802, -2.02816391,
          -0.65419877, -1.94119525, -0.85351765, -4.12531900, -3.61707306],
         [-2.26436663, -5.76788521, -1.08416212,  0.26655802, -2.02816391,
          -0.65419877, -1.94119525, -0.85351765, -4.12531900, -3.61707306]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.23064446, -1.12007570, -0.19931889]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]],


         [[[ 1.85238123,  1.91587329,  1.88412726,  ...,  1.93174624,
             1.96349227,  1.90000021],
           [ 1.82063520,  1.88412726,  1.86825418,  ...,  1.90000021,
             1.93174624,  1.86825418],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  1.91587329,
             1.94761932,  1.90000021],
           ...,
           [ 1.85238123,  1.91587329,  1.88412726,  ..., -0.94126981,
            -1.13174593, -1.14761901],
           [ 1.85238123,  1.90000021,  1.88412726,  ..., -0.43333322,
            -0.90952379, -1.11587298],
           [ 1.83650815,  1.90000021,  1.86825418,  ...,  0.56666672,
            -0.44920623, -0.95714283]],

          [[ 1.90016127,  1.96457350,  1.93236744,  ...,  1.99677968,
             2.02898574,  1.96457350],
           [ 1.86795521,  1.93236744,  1.91626441,  ...,  1.96457350,
             1.99677968,  1.93236744],
           [ 1.88405824,  1.94847047,  1.91626441,  ...,  1.98067665,
             2.01288271,  1.96457350],
           ...,
           [ 1.91626441,  1.98067665,  1.94847047,  ..., -1.35265696,
            -1.44927526, -1.40096617],
           [ 1.91626441,  1.96457350,  1.94847047,  ..., -0.80515295,
            -1.32045078, -1.41706920],
           [ 1.90016127,  1.96457350,  1.93236744,  ...,  0.37037048,
            -0.88566822, -1.30434775]],

          [[ 1.98051023,  2.04048014,  2.01049519,  ...,  2.02548766,
             2.05547261,  1.99550271],
           [ 1.95052516,  2.01049519,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.96551764],
           [ 1.96551764,  2.02548766,  1.99550271,  ...,  1.99550271,
             2.02548766,  1.99550271],
           ...,
           [ 1.95052516,  2.01049519,  1.98051023,  ..., -1.51274371,
            -1.55772126, -1.54272878],
           [ 1.95052516,  1.99550271,  1.98051023,  ..., -1.01799107,
            -1.55772126, -1.52773619],
           [ 1.93553269,  1.99550271,  1.96551764,  ...,  0.27136448,
            -1.21289361, -1.48275876]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0933 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 37, vnnlib ID: 37 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.01291561, -12.13928890, -12.98730183, -15.90724564, -13.82077122,
         -17.84158707, -17.88521957, -16.36121368, -11.50735950, -12.93546104]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [566]; unstable size 566; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 566] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 566] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 566] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 180] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.04726744, 2.13469315, 4.88873720, 2.78446722, 6.62359524, 6.58985138,
         4.87536192, 0.22735929, 1.88157797]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0622 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 38, vnnlib ID: 38 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.67120075, -8.34336758, -2.96194768, -3.20485783, -2.59110832,
         -3.43676805, -1.38701296, -4.13833094, -8.45190620, -6.74960279]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [421]; unstable size 421; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 421] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 421] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 421] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 249] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.48716164,  5.17507648,  0.09683561,  0.57209575, -0.21805692,
          0.58378172,  1.18988395,  5.01148224,  3.44507027]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.67120075, -8.34336758, -2.96194768, -3.20485783, -2.59110832,
         -3.43676805, -1.38701296, -4.13833094, -8.45190620, -6.74960279]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.01it/s]100%|██████████| 1/1 [00:00<00:00,  9.00it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.36143351, -8.27827263, -2.67933655, -3.03170109, -2.11203384,
          -3.19349098, -1.59651995, -3.84145784, -8.13518906, -6.71451759]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.51551390]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1136 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 20.927518844604492
alpha/beta optimization time: 1.2116615772247314
initial alpha-crown bounds: tensor([[ 4.54304790,  5.26645279,  0.14525270,  0.62453961, -0.16246271,
          0.64612198,  1.25836921,  5.08361483,  3.52258158]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.16246271133422852
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6088399887085
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6088001728058
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.6087703704834
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.6087453365326
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.608726978302
Verifying property 4 with 1 instances.
##### Instance 38 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.16246271]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.67120075, -8.34336758, -2.96194768, -3.20485783, -2.59110832,
        -3.43676805, -1.38701296, -4.13833094, -8.45190620, -6.74960279],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.16246271]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 421
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 246
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 688
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010251998901367188
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1624596118927002
10 lb beta sum: 0.0, worst -0.16246414184570312
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0523    transfer 0.0001    finalize 0.0001    func 0.0528    
Accumulated time: func 0.0528    prepare 0.0002    bound 0.0523    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 51] 
split level 1: [/input-12, 41] 
split level 2: [/input-12, 60] 
split level 3: [/input-12, 35] 
split level 4: [/input-12, 92] 
split level 5: [/input-12, 29] 
split level 6: [/input-12, 11] 
split level 7: [/input-12, 6] 
split level 8: [/input-12, 38] 
split level 9: [/input-12, 37] 
split level 10: [/input-12, 17] 
split level 11: [/input-12, 33] 
split level 12: [/input-12, 46] 
split level 13: [/input-12, 26] 
split level 14: [/input-12, 54] 
split level 15: [/input-8, 299] 
split level 16: [/input-8, 1874] 
split level 17: [/input-8, 859] 
split level 18: [/input-8, 485] 
split level 19: [/input-8, 300] 
split level 20: [/input-8, 188] 
split level 21: [/input-8, 971] 
split level 22: [/input-8, 1114] 
split level 23: [/input-8, 921] 
split level 24: [/input-8, 809] 
split level 25: [/input-8, 89] 
split level 26: [/input-8, 429] 
split level 27: [/input-8, 1429] 
split level 28: [/input-8, 97] 
split level 29: [/input-8, 828] 
split level 30: [/input-8, 85] 
split level 31: [/input-8, 82] 
split level 32: [/input-8, 571] 
split level 33: [/input-8, 659] 
split level 34: [/input-8, 1426] 
split level 35: [/input-8, 187] 
split level 36: [/input-8, 481] 
split level 37: [/input-8, 994] 
split level 38: [/input-8, 964] 
split level 39: [/input-8, 1427] 
split level 40: [/input-8, 107] 
split level 41: [/input-8, 1978] 
split level 42: [/input-8, 938] 
split level 43: [/input-8, 1819] 
split level 44: [/input-8, 1150] 
split level 45: [/input-8, 1395] 
split level 46: [/input-8, 1130] 
split level 47: [/input-8, 1007] 
split level 48: [/input-8, 1865] 
split level 49: [/input-8, 282] 
split level 50: [/input-8, 1521] 
split level 51: [/input-8, 435] 
split level 52: [/input-8, 668] 
split level 53: [/input-8, 1010] 
split level 54: [/input-8, 1324] 
split level 55: [/input-8, 1388] 
split level 56: [/input-8, 1857] 
split level 57: [/input-8, 970] 
split level 58: [/input-8, 800] 
split level 59: [/input-8, 2024] 
split level 60: [/input-8, 1411] 
split level 61: [/input, 2280] 
split level 62: [/input-8, 842] 
split level 63: [/input-8, 1250] 
split level 64: [/input-8, 1866] 
split level 65: [/input-8, 1980] 
split level 66: [/input-8, 934] 
split level 67: [/input-8, 1947] 
split level 68: [/input-8, 1380] 
split level 69: [/input-8, 937] 
split level 70: [/input-8, 1030] 
split level 71: [/input-8, 2025] 
split level 72: [/input-8, 926] 
split level 73: [/input-8, 841] 
split level 74: [/input-8, 65] 
split level 75: [/input-8, 1837] 
split level 76: [/input, 484] 
split level 77: [/input-8, 494] 
split level 78: [/input-8, 688] 
split level 79: [/input-8, 963] 
split level 80: [/input-8, 544] 
split level 81: [/input-8, 522] 
split level 82: [/input-8, 505] 
split level 83: [/input-8, 1931] 
split level 84: [/input-8, 1417] 
split level 85: [/input, 1587] 
split level 86: [/input-8, 414] 
split level 87: [/input-8, 1983] 
split level 88: [/input-8, 310] 
split level 89: [/input-8, 493] 
split level 90: [/input-8, 99] 
split level 91: [/input-8, 1834] 
split level 92: [/input, 1638] 
split level 93: [/input-8, 1575] 
split level 94: [/input-8, 496] 
split level 95: [/input-8, 2004] 
split level 96: [/input-8, 1018] 
split level 97: [/input-8, 407] 
split level 98: [/input-8, 984] 
split level 99: [/input-8, 419] 
split level 100: [/input, 483] 
split level 101: [/input-8, 1582] 
split level 102: [/input-8, 2003] 
split level 103: [/input-8, 2021] 
split level 104: [/input-8, 1469] 
split level 105: [/input-8, 1434] 
split level 106: [/input-8, 119] 
split level 107: [/input-8, 514] 
split level 108: [/input, 1719] 
split level 109: [/input-8, 1996] 
split level 110: [/input, 2136] 
split level 111: [/input-8, 816] 
split level 112: [/input, 1718] 
split level 113: [/input-8, 1486] 
split level 114: [/input-8, 2045] 
split level 115: [/input-8, 1443] 
split level 116: [/input-8, 1795] 
split level 117: [/input-8, 1240] 
split level 118: [/input-8, 1533] 
split level 119: [/input-8, 503] 
split level 120: [/input, 1653] 
split level 121: [/input, 1575] 
split level 122: [/input-8, 479] 
split level 123: [/input, 3545] 
split level 124: [/input, 174] 
split level 125: [/input, 1702] 
split level 126: [/input-8, 508] 
split level 127: [/input-8, 638] 
split level 128: [/input-8, 2029] 
split level 129: [/input-8, 1363] 
split level 130: [/input, 2296] 
split level 131: [/input-8, 1242] 
split level 132: [/input-8, 914] 
split level 133: [/input-8, 1302] 
split level 134: [/input, 1669] 
split level 135: [/input-8, 1354] 
split level 136: [/input, 2602] 
split level 137: [/input-8, 1012] 
split level 138: [/input, 2374] 
split level 139: [/input, 431] 
split level 140: [/input, 2121] 
split level 141: [/input-8, 504] 
split level 142: [/input, 739] 
split level 143: [/input-8, 689] 
split level 144: [/input, 709] 
split level 145: [/input, 1610] 
split level 146: [/input, 1130] 
split level 147: [/input, 1743] 
split level 148: [/input, 1570] 
split level 149: [/input, 1468] 
split level 150: [/input, 1705] 
split level 151: [/input-8, 2023] 
split level 152: [/input, 3539] 
split level 153: [/input, 2008] 
split level 154: [/input, 1948] 
split level 155: [/input, 3517] 
split level 156: [/input, 2261] 
split level 157: [/input, 1756] 
split level 158: [/input, 1589] 
split level 159: [/input-8, 1529] 
split level 160: [/input-8, 1381] 
split level 161: [/input-8, 467] 
split level 162: [/input-8, 1823] 
split level 163: [/input, 3357] 
split level 164: [/input, 1469] 
split level 165: [/input, 1164] 
split level 166: [/input, 2322] 
split level 167: [/input-8, 577] 
split level 168: [/input, 3513] 
split level 169: [/input, 3533] 
split level 170: [/input-8, 76] 
split level 171: [/input, 1888] 
split level 172: [/input, 1302] 
split level 173: [/input, 1499] 
split level 174: [/input, 1105] 
split level 175: [/input-8, 951] 
split level 176: [/input, 1956] 
split level 177: [/input-8, 1398] 
split level 178: [/input-8, 1995] 
split level 179: [/input-8, 406] 
split level 180: [/input, 3561] 
split level 181: [/input, 1685] 
split level 182: [/input, 1937] 
split level 183: [/input, 1159] 
split level 184: [/input, 3069] 
split level 185: [/input, 1826] 
split level 186: [/input, 2341] 
split level 187: [/input-8, 1955] 
split level 188: [/input, 3350] 
split level 189: [/input, 3349] 
split level 190: [/input-8, 1442] 
split level 191: [/input-8, 1402] 
split level 192: [/input, 3869] 
split level 193: [/input, 1933] 
split level 194: [/input, 1196] 
split level 195: [/input, 376] 
split level 196: [/input, 2219] 
split level 197: [/input, 162] 
split level 198: [/input-8, 1047] 
split level 199: [/input, 2259] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1623849868774414
10 lb beta sum: 0.0, worst -0.1623828411102295
Time: prepare 0.0117    bound 0.0966    transfer 0.0032    finalize 0.0028    func 0.1169    
Accumulated time: func 0.1697    prepare 0.0219    bound 0.1489    transfer 0.0033    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.25878263) min lb tensor(-0.16237926)
Number of Verified Splits: 8 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.010721206665039062 
BICCOS Cumulative time: 0.010721206665039062
Preprocessing time: 0.009962797164916992 Inference time: 0.00035643577575683594 Add cuts time: 0.00012254714965820312 Cut analysis time: 0.00027942657470703125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14719 (1), -0.14710 (1), -0.14692 (1), -0.14686 (1), -0.14672 (1), -0.14623 (1), -0.14620 (1), -0.14517 (1), -0.14508 (1), -0.14418 (1), -0.14325 (1), -0.14313 (1), -0.14312 (1), -0.14254 (1), -0.14196 (1), -0.14144 (1), -0.14034 (1), -0.13998 (1), -0.13795 (1), -0.13717 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5121    set_bounds 0.0090    solve 0.1170    add 0.1180    
Accumulated time: pickout 0.0003    decision 0.5121    set_bounds 0.0090    solve 0.1170    add 0.1180    
Current (lb-rhs): -0.14719319343566895
50 domains visited
Cumulative time: 0.8296523094177246

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 35] [/input-12, 35] [/input-12, 92] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 29] [/input-12, 92] [/input-12, 92] [/input-12, 29] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 29] 
split level 2: [/input-12, 11] [/input-12, 29] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 29] [/input-12, 11] 
split level 3: [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 17] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1085362434387207
10 lb beta sum: 1.057102084159851, worst -0.04209482669830322
Time: prepare 0.0069    bound 0.1185    transfer 0.0008    finalize 0.0021    func 0.1309    
Accumulated time: func 0.3006    prepare 0.0291    bound 0.2674    transfer 0.0041    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.17490852) min lb tensor(-0.04197001)
Number of Verified Splits: 359 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03319072723388672 
BICCOS Cumulative time: 0.04391193389892578
Preprocessing time: 0.01198720932006836 Inference time: 0.013183832168579102 Add cuts time: 0.007792234420776367 Cut analysis time: 0.00022745132446289062
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0209    set_bounds 0.0126    solve 0.1310    add 0.0151    
Accumulated time: pickout 0.0014    decision 0.5330    set_bounds 0.0217    solve 0.2480    add 0.1331    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 92]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.82193281e+29, 4.78017777e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 92]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.82193281e+29, 1.53438136e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 92]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.82193281e+29, 1.21086404e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([35, 92]), tensor([1., 1.]), tensor([0, 0]), tensor([1.82193281e+29, 1.51232526e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.024697065353393555

all verified at 1th iter
Time: prepare 0.0003    bound 0.0145    transfer 0.0001    finalize 0.0001    func 0.0152    
Accumulated time: func 0.3158    prepare 0.0295    bound 0.2820    transfer 0.0042    finalize 0.0052    
After pruning, left:  0

Back to Regular BaB


Properties batch 5, size 1
Remaining timeout: 197.26071524620056
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.260639667511
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.2606165409088
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.26040363311768
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.7397 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 39, vnnlib ID: 39 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.08262920, -10.85117626,  -6.26876736,  -6.31408882,  -5.73352718,
          -6.74807501,  -3.77881598,  -7.22824049, -11.69428158, -10.35355473]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [375]; unstable size 375; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 375] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 375] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 375] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 208] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.36300135, 4.89374399, 1.18320298, 1.43400896, 0.60667586, 1.79556417,
         1.70379806, 5.56933117, 4.72802067]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0324 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 40, vnnlib ID: 40 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.55409622,  -9.96810532,  -6.92626286,  -8.56464005,  -8.43423653,
          -9.26128197, -10.86567974,  -8.56524467,  -8.85235691, -11.04646587]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [508]; unstable size 508; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 169, 1, 508] with unstable size 168 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 508] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 508] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [168]; unstable size 168; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 168] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 168] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.94185448, 0.70694846, 2.04573965, 1.92763722, 2.63131237, 4.18971443,
         1.79439902, 2.23234797, 4.28507805]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0621 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 41, vnnlib ID: 41 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.03971958, -11.64941406, -10.00275898,  -8.47386932,  -9.92812920,
          -8.93652153, -10.23073101, -10.63002968,  -4.10415173,  -9.58254910]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [504]; unstable size 504; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 504] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 504] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 504] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 206] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.82665849, 6.09783554, 4.47349644, 3.14197636, 4.34114456, 3.46894121,
         4.61985540, 4.88829041, 4.12811470]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0642 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 42, vnnlib ID: 42 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.23514986, -9.22857761, -3.75808716, -3.27435327, -4.29405165,
         -3.58545446, -2.41056466, -6.29414511, -6.66572762, -8.34386063]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [590]; unstable size 590; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 245, 1, 590] with unstable size 244 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 590] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 590] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [244]; unstable size 244; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 244] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 244] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.87620616,  4.30693960, -0.06645823, -0.26148725,  0.30728054,
         -0.24854940,  2.13002563,  1.88156343,  3.71216249]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.23514986, -9.22857761, -3.75808716, -3.27435327, -4.29405165,
         -3.58545446, -2.41056466, -6.29414511, -6.66572762, -8.34386063]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.01it/s]100%|██████████| 1/1 [00:00<00:00,  9.00it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.03449631, -9.09223366, -3.54179525, -2.84015751, -4.05080748,
          -3.00110483, -2.64081597, -5.93490744, -6.32542515, -8.11971188],
         [-6.03449631, -9.09223366, -3.54179525, -2.84015751, -4.05080748,
          -3.00110483, -2.64081597, -5.93490744, -6.32542515, -8.11971188]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.90097928, 0.19934154, 0.36028886]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1143 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 14.594411849975586
alpha/beta optimization time: 1.1932036876678467
initial alpha-crown bounds: tensor([[ 1.98166203,  4.46373367,  0.01902843, -0.21573001,  0.40181994,
         -0.18405610,  2.22683096,  2.03213978,  3.86898422]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.21573001146316528
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.61727952957153
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.61724162101746
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.61721467971802
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.61719036102295
Verifying property 3 with 1 instances.
##### Instance 42 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0., -1.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.21573001]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.23514986, -9.22857761, -3.75808716, -3.27435327, -4.29405165,
        -3.58545446, -2.41056466, -6.29414511, -6.66572762, -8.34386063],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.21573001]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 590
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 242
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 853
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010514259338378906
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21572822332382202
10 lb beta sum: 0.0, worst -0.21573132276535034
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0519    transfer 0.0001    finalize 0.0001    func 0.0523    
Accumulated time: func 0.0523    prepare 0.0002    bound 0.0519    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] 
split level 1: [/input-12, 1] 
split level 2: [/input-12, 11] 
split level 3: [/input-12, 51] 
split level 4: [/input-12, 41] 
split level 5: [/input-12, 10] 
split level 6: [/input-8, 109] 
split level 7: [/input-12, 13] 
split level 8: [/input-12, 45] 
split level 9: [/input-12, 82] 
split level 10: [/input-8, 540] 
split level 11: [/input-8, 850] 
split level 12: [/input-8, 1308] 
split level 13: [/input-8, 971] 
split level 14: [/input-8, 525] 
split level 15: [/input-8, 307] 
split level 16: [/input-8, 92] 
split level 17: [/input-8, 117] 
split level 18: [/input-8, 981] 
split level 19: [/input-8, 1909] 
split level 20: [/input-8, 483] 
split level 21: [/input-8, 1298] 
split level 22: [/input-8, 869] 
split level 23: [/input-8, 485] 
split level 24: [/input-12, 42] 
split level 25: [/input-8, 1389] 
split level 26: [/input-8, 1453] 
split level 27: [/input-8, 989] 
split level 28: [/input-8, 1461] 
split level 29: [/input-8, 94] 
split level 30: [/input, 3432] 
split level 31: [/input-8, 977] 
split level 32: [/input-8, 309] 
split level 33: [/input-8, 654] 
split level 34: [/input-8, 484] 
split level 35: [/input-8, 979] 
split level 36: [/input, 325] 
split level 37: [/input-8, 1940] 
split level 38: [/input-8, 486] 
split level 39: [/input-8, 530] 
split level 40: [/input-8, 1421] 
split level 41: [/input-8, 1523] 
split level 42: [/input-8, 1345] 
split level 43: [/input-8, 475] 
split level 44: [/input-8, 878] 
split level 45: [/input-8, 1828] 
split level 46: [/input-8, 985] 
split level 47: [/input-8, 1939] 
split level 48: [/input-8, 620] 
split level 49: [/input-8, 1247] 
split level 50: [/input-8, 1468] 
split level 51: [/input-8, 1142] 
split level 52: [/input-8, 828] 
split level 53: [/input-8, 1527] 
split level 54: [/input-8, 103] 
split level 55: [/input-8, 507] 
split level 56: [/input, 1366] 
split level 57: [/input-8, 541] 
split level 58: [/input-8, 124] 
split level 59: [/input-8, 86] 
split level 60: [/input-8, 91] 
split level 61: [/input, 3399] 
split level 62: [/input-8, 1254] 
split level 63: [/input-8, 998] 
split level 64: [/input-8, 506] 
split level 65: [/input-8, 113] 
split level 66: [/input-8, 1771] 
split level 67: [/input-8, 1390] 
split level 68: [/input, 391] 
split level 69: [/input-8, 1433] 
split level 70: [/input-8, 1903] 
split level 71: [/input-8, 524] 
split level 72: [/input-8, 1324] 
split level 73: [/input-8, 1255] 
split level 74: [/input-8, 997] 
split level 75: [/input-8, 310] 
split level 76: [/input-8, 1457] 
split level 77: [/input-8, 1348] 
split level 78: [/input-8, 428] 
split level 79: [/input-8, 522] 
split level 80: [/input-8, 1381] 
split level 81: [/input-8, 1904] 
split level 82: [/input-8, 1446] 
split level 83: [/input-8, 75] 
split level 84: [/input-8, 1467] 
split level 85: [/input-8, 1437] 
split level 86: [/input, 3417] 
split level 87: [/input, 316] 
split level 88: [/input, 2135] 
split level 89: [/input-8, 1246] 
split level 90: [/input-8, 1835] 
split level 91: [/input-8, 1076] 
split level 92: [/input-8, 1837] 
split level 93: [/input-8, 867] 
split level 94: [/input, 386] 
split level 95: [/input-8, 1754] 
split level 96: [/input-8, 624] 
split level 97: [/input-8, 1762] 
split level 98: [/input, 369] 
split level 99: [/input-8, 1844] 
split level 100: [/input-8, 923] 
split level 101: [/input-8, 487] 
split level 102: [/input, 406] 
split level 103: [/input-8, 1071] 
split level 104: [/input, 1382] 
split level 105: [/input-8, 1838] 
split level 106: [/input-8, 1347] 
split level 107: [/input, 355] 
split level 108: [/input-8, 1237] 
split level 109: [/input-8, 827] 
split level 110: [/input, 3960] 
split level 111: [/input-8, 573] 
split level 112: [/input-8, 602] 
split level 113: [/input-8, 501] 
split level 114: [/input-8, 505] 
split level 115: [/input, 309] 
split level 116: [/input-8, 125] 
split level 117: [/input, 1603] 
split level 118: [/input-8, 1009] 
split level 119: [/input-8, 415] 
split level 120: [/input-8, 83] 
split level 121: [/input, 1352] 
split level 122: [/input, 220] 
split level 123: [/input, 4045] 
split level 124: [/input-8, 1936] 
split level 125: [/input-8, 1736] 
split level 126: [/input, 404] 
split level 127: [/input-8, 862] 
split level 128: [/input-8, 922] 
split level 129: [/input, 2802] 
split level 130: [/input-8, 1440] 
split level 131: [/input-8, 887] 
split level 132: [/input-8, 1816] 
split level 133: [/input, 2098] 
split level 134: [/input, 1350] 
split level 135: [/input, 4013] 
split level 136: [/input, 1396] 
split level 137: [/input-8, 1235] 
split level 138: [/input, 1401] 
split level 139: [/input, 3510] 
split level 140: [/input-8, 840] 
split level 141: [/input-8, 958] 
split level 142: [/input, 3493] 
split level 143: [/input, 1333] 
split level 144: [/input, 174] 
split level 145: [/input-8, 1023] 
split level 146: [/input-8, 1406] 
split level 147: [/input-8, 435] 
split level 148: [/input, 3127] 
split level 149: [/input-8, 1551] 
split level 150: [/input-8, 2036] 
split level 151: [/input, 32] 
split level 152: [/input, 1416] 
split level 153: [/input-8, 1983] 
split level 154: [/input, 1960] 
split level 155: [/input, 3913] 
split level 156: [/input-8, 477] 
split level 157: [/input-8, 1744] 
split level 158: [/input, 1949] 
split level 159: [/input-8, 1323] 
split level 160: [/input, 2704] 
split level 161: [/input-8, 1770] 
split level 162: [/input-8, 74] 
split level 163: [/input, 2091] 
split level 164: [/input-8, 1787] 
split level 165: [/input-8, 563] 
split level 166: [/input-8, 786] 
split level 167: [/input, 1093] 
split level 168: [/input, 1347] 
split level 169: [/input, 2857] 
split level 170: [/input-8, 1442] 
split level 171: [/input, 300] 
split level 172: [/input, 4090] 
split level 173: [/input, 3329] 
split level 174: [/input, 1963] 
split level 175: [/input, 3908] 
split level 176: [/input-8, 1126] 
split level 177: [/input, 3371] 
split level 178: [/input, 4043] 
split level 179: [/input, 1964] 
split level 180: [/input, 1708] 
split level 181: [/input-8, 1477] 
split level 182: [/input, 3356] 
split level 183: [/input-8, 1919] 
split level 184: [/input, 3022] 
split level 185: [/input, 1725] 
split level 186: [/input-8, 1427] 
split level 187: [/input, 3694] 
split level 188: [/input, 506] 
split level 189: [/input, 3330] 
split level 190: [/input, 1371] 
split level 191: [/input, 3607] 
split level 192: [/input, 2962] 
split level 193: [/input, 3968] 
split level 194: [/input, 2916] 
split level 195: [/input-8, 876] 
split level 196: [/input, 3677] 
split level 197: [/input, 4052] 
split level 198: [/input, 4030] 
split level 199: [/input, 2841] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21565300226211548
10 lb beta sum: 0.0, worst -0.21565216779708862
Time: prepare 0.0117    bound 0.1010    transfer 0.0015    finalize 0.0027    func 0.1196    
Accumulated time: func 0.1719    prepare 0.0222    bound 0.1529    transfer 0.0016    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.23370576) min lb tensor(-0.21564704)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010766983032226562 
BICCOS Cumulative time: 0.010766983032226562
Preprocessing time: 0.009986400604248047 Inference time: 0.00015807151794433594 Add cuts time: 7.62939453125e-05 Cut analysis time: 0.0005462169647216797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20197 (1), -0.20187 (1), -0.20132 (1), -0.20050 (1), -0.20030 (1), -0.20022 (1), -0.20021 (1), -0.19973 (1), -0.19950 (1), -0.19921 (1), -0.19912 (1), -0.19872 (1), -0.19870 (1), -0.19763 (1), -0.19665 (1), -0.19640 (1), -0.19613 (1), -0.19596 (1), -0.19552 (1), -0.19497 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5115    set_bounds 0.0086    solve 0.1197    add 0.0722    
Accumulated time: pickout 0.0003    decision 0.5115    set_bounds 0.0086    solve 0.1197    add 0.0722    
Current (lb-rhs): -0.20197200775146484
50 domains visited
Cumulative time: 0.8010590076446533

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 11] [/input-12, 11] [/input-12, 33] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 11] [/input-12, 41] [/input-12, 41] [/input-12, 51] [/input-12, 11] [/input-12, 51] [/input-12, 51] [/input-12, 41] [/input-12, 51] [/input-12, 51] 
split level 2: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 51] [/input-12, 41] [/input-12, 41] 
split level 3: [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.193800687789917
10 lb beta sum: 0.5672595500946045, worst -0.1861373782157898
Time: prepare 0.0074    bound 0.1157    transfer 0.0007    finalize 0.0023    func 0.1288    
Accumulated time: func 0.3007    prepare 0.0298    bound 0.2686    transfer 0.0023    finalize 0.0052    
all_split False
======================Cut inference begins======================
max lb tensor(0.22112542) min lb tensor(-0.18612161)
Number of Verified Splits: 75 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 15
#cuts >= 20: 0
BICCOS time: 0.01675128936767578 
BICCOS Cumulative time: 0.027518272399902344
Preprocessing time: 0.011722564697265625 Inference time: 0.0026559829711914062 Add cuts time: 0.001905679702758789 Cut analysis time: 0.00046706199645996094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04529 (2), -0.04510 (2), -0.04461 (2), -0.04389 (2), -0.04372 (2), -0.04220 (2), -0.04216 (2), -0.04171 (2), -0.04116 (2), -0.04091 (2), -0.04036 (2), -0.03993 (2), -0.03971 (2), -0.03957 (2), -0.03933 (2), -0.03910 (2), -0.03808 (2), -0.03698 (2), -0.03679 (2), -0.03637 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0194    set_bounds 0.0119    solve 0.1288    add 0.2146    
Accumulated time: pickout 0.0013    decision 0.5309    set_bounds 0.0205    solve 0.2485    add 0.2867    
Current (lb-rhs): -0.045288145542144775
100 domains visited
Cumulative time: 1.2005553245544434

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 41] [/input-12, 51] [/input-12, 41] 
split level 2: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 51] [/input-12, 41] [/input-12, 13] 
split level 3: [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 45] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.053258299827575684
10 lb beta sum: 1.2031506299972534, worst -0.0839935839176178
Time: prepare 0.0074    bound 0.1345    transfer 0.0022    finalize 0.0025    func 0.1498    
Accumulated time: func 0.4504    prepare 0.0375    bound 0.4031    transfer 0.0045    finalize 0.0076    
all_split False
======================Cut inference begins======================
max lb tensor(0.50066936) min lb tensor(-0.02560961)
Number of Verified Splits: 383 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.03722548484802246 
BICCOS Cumulative time: 0.0647437572479248
Preprocessing time: 0.011774539947509766 Inference time: 0.01522207260131836 Add cuts time: 0.009779691696166992 Cut analysis time: 0.00044918060302734375
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0078    decision 0.0200    set_bounds 0.0156    solve 0.1499    add 0.0195    
Accumulated time: pickout 0.0092    decision 0.5508    set_bounds 0.0361    solve 0.3983    add 0.3062    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 33]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.84187301e-13, 2.32528076e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 33]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.84187301e-13, 1.39995087e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 13, 33]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.84187301e-13, 4.61612195e-02, 1.88430354e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 13, 33]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.84187301e-13, 4.61612195e-02, 6.21941909e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 13, 33]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.84187301e-13, 4.11807150e-02, 1.91048607e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 13, 33]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([1.84187301e-13, 4.11807150e-02, 7.28488192e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18854999542236328
10 lb beta sum: 0.4847224950790405, worst -0.1631869077682495
Time: prepare 0.0004    bound 0.1239    transfer 0.0002    finalize 0.0002    func 0.1247    
Accumulated time: func 0.5752    prepare 0.0379    bound 0.5270    transfer 0.0046    finalize 0.0078    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] 
split level 1: [/input-12, 51] 
split level 2: [/input-12, 41] 
split level 3: [/input-12, 13] 
split level 4: [/input-12, 45] 
split level 5: [/input-12, 82] 
split level 6: [/input-8, 1909] 
split level 7: [/input-8, 483] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9470595121383667, worst -0.09480029344558716
10 lb beta sum: 0.9550504088401794, worst -0.08700186014175415
Time: prepare 0.0110    bound 0.1264    transfer 0.0012    finalize 0.0012    func 0.1414    
Accumulated time: func 0.7166    prepare 0.0493    bound 0.6534    transfer 0.0058    finalize 0.0090    
all_split False
======================Cut inference begins======================
max lb tensor(0.36416966) min lb tensor(-0.07476813)
Number of Verified Splits: 226 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.9470595121383667, worst -0.16669362783432007
10 lb beta sum: 1.2163891792297363, worst -0.137168288230896
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 14
#cuts 4-6: 3
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.27370786666870117 
BICCOS Cumulative time: 0.338451623916626
Preprocessing time: 0.007177829742431641 Inference time: 0.25949645042419434 Add cuts time: 0.006337165832519531 Cut analysis time: 0.0006964206695556641
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07477 (8), -0.07202 (8), -0.07157 (8), -0.07037 (8), -0.06903 (8), -0.06820 (8), -0.06710 (8), -0.06513 (8), -0.03317 (8), -0.03226 (8), -0.02973 (8), -0.02852 (8), -0.02500 (8), -0.02394 (8), -0.02323 (8), -0.02176 (8), -0.02075 (8), -0.02025 (8), -0.01974 (8), -0.01766 (8), 
Length of domains: 30
Time: pickout 0.0005    decision 0.0215    set_bounds 0.0248    solve 0.1415    add 0.0542    
Accumulated time: pickout 0.0097    decision 0.5724    set_bounds 0.0609    solve 0.5398    add 0.3604    
Current (lb-rhs): -0.07476812601089478
130 domains visited
Cumulative time: 2.148446559906006

BaB round 2
batch: 30
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 850] [/input-8, 1308] [/input-8, 1308] [/input-8, 92] [/input-8, 92] [/input-8, 1308] [/input-8, 1308] 
split level 1: [/input-8, 92] [/input-8, 92] [/input-8, 117] [/input-8, 1308] [/input-8, 92] [/input-8, 94] [/input-8, 484] [/input-8, 654] [/input-8, 92] [/input-8, 92] 
split level 2: [/input-8, 94] [/input-8, 94] [/input-8, 92] [/input-8, 94] [/input-8, 620] [/input-8, 654] [/input-8, 654] [/input-8, 484] [/input-8, 94] [/input-8, 94] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06244713068008423
10 lb beta sum: 0.1808653622865677, worst -0.0589868426322937
Time: prepare 0.0047    bound 0.1331    transfer 0.0008    finalize 0.0012    func 0.1415    
Accumulated time: func 0.8580    prepare 0.0542    bound 0.7865    transfer 0.0066    finalize 0.0102    
all_split False
======================Cut inference begins======================
max lb tensor(0.04003221) min lb tensor(-0.05894321)
Number of Verified Splits: 159 of 240
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.025194168090820312 
BICCOS Cumulative time: 0.3636457920074463
Preprocessing time: 0.007283449172973633 Inference time: 0.015961885452270508 Add cuts time: 0.0016121864318847656 Cut analysis time: 0.00033664703369140625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05894 (11), -0.05798 (11), -0.05703 (11), -0.05698 (11), -0.05561 (11), -0.05473 (11), -0.05436 (11), -0.05400 (11), -0.05382 (11), -0.05339 (11), -0.05332 (11), -0.05312 (11), -0.05237 (11), -0.05100 (11), -0.05038 (11), -0.05015 (11), -0.05001 (11), -0.04949 (11), -0.04916 (11), -0.04681 (11), 
Length of domains: 81
Time: pickout 0.0066    decision 0.0148    set_bounds 0.0126    solve 0.1415    add 0.0755    
Accumulated time: pickout 0.0162    decision 0.5871    set_bounds 0.0735    solve 0.6813    add 0.4359    
Current (lb-rhs): -0.058943212032318115
211 domains visited
Cumulative time: 2.432417154312134

BaB round 3
batch: 81
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 92] [/input-8, 850] [/input-8, 92] [/input-8, 850] [/input-8, 92] [/input-8, 92] [/input-8, 92] [/input-8, 92] [/input-8, 92] [/input-8, 850] 
split level 1: [/input-8, 484] [/input-8, 92] [/input-8, 484] [/input-8, 92] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05301499366760254
10 lb beta sum: 0.3264102339744568, worst -0.04962438344955444
Time: prepare 0.0062    bound 0.1168    transfer 0.0018    finalize 0.0016    func 0.1285    
Accumulated time: func 0.9866    prepare 0.0606    bound 0.9034    transfer 0.0084    finalize 0.0118    
all_split False
======================Cut inference begins======================
max lb tensor(0.01270640) min lb tensor(-0.04954243)
Number of Verified Splits: 92 of 324
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 9
#cuts 4-6: 3
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.02181839942932129 
BICCOS Cumulative time: 0.3854641914367676
Preprocessing time: 0.009742259979248047 Inference time: 0.009939432144165039 Add cuts time: 0.001062631607055664 Cut analysis time: 0.001074075698852539
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04954 (13), -0.04881 (13), -0.04731 (13), -0.04605 (13), -0.04598 (13), -0.04536 (13), -0.04512 (13), -0.04494 (13), -0.04421 (13), -0.04398 (13), -0.04391 (13), -0.04255 (13), -0.04240 (13), -0.04238 (13), -0.04213 (13), -0.04139 (13), -0.04139 (13), -0.04137 (13), -0.04076 (13), -0.04018 (13), 
Length of domains: 232
Time: pickout 0.0146    decision 0.0177    set_bounds 0.0150    solve 0.1286    add 0.0762    
Accumulated time: pickout 0.0309    decision 0.6048    set_bounds 0.0885    solve 0.8099    add 0.5121    
Current (lb-rhs): -0.04954242706298828
443 domains visited
Cumulative time: 2.7139267921447754

BaB round 4
batch: 232
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 654] [/input-8, 979] [/input-8, 654] [/input-8, 979] [/input-8, 654] [/input-8, 979] [/input-8, 654] [/input-8, 979] [/input-8, 654] [/input-8, 979] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04744797945022583
10 lb beta sum: 0.3699769675731659, worst -0.044064223766326904
Time: prepare 0.0088    bound 0.1370    transfer 0.0019    finalize 0.0020    func 0.1528    
Accumulated time: func 1.1394    prepare 0.0696    bound 1.0404    transfer 0.0104    finalize 0.0138    
all_split False
======================Cut inference begins======================
max lb tensor(0.01129356) min lb tensor(-0.04402190)
Number of Verified Splits: 61 of 464
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 9
#cuts 4-6: 7
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.02366018295288086 
BICCOS Cumulative time: 0.40912437438964844
Preprocessing time: 0.013597249984741211 Inference time: 0.007364511489868164 Add cuts time: 0.0020334720611572266 Cut analysis time: 0.0006649494171142578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04402 (14), -0.04353 (14), -0.04199 (14), -0.04131 (14), -0.04090 (14), -0.04050 (14), -0.04035 (14), -0.03987 (14), -0.03948 (14), -0.03940 (14), -0.03939 (14), -0.03931 (14), -0.03894 (14), -0.03846 (14), -0.03832 (14), -0.03823 (14), -0.03765 (14), -0.03726 (14), -0.03716 (14), -0.03710 (14), 
Length of domains: 403
Time: pickout 0.0164    decision 0.0233    set_bounds 0.0204    solve 0.1529    add 0.0869    
Accumulated time: pickout 0.0473    decision 0.6282    set_bounds 0.1089    solve 0.9629    add 0.5990    
Current (lb-rhs): -0.04402190446853638
846 domains visited
Cumulative time: 3.0453765392303467

BaB round 5
batch: 403
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 979] [/input-8, 484] [/input-8, 979] [/input-8, 484] [/input-8, 475] [/input-8, 475] [/input-8, 475] [/input-8, 654] [/input-8, 475] [/input-8, 654] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0414888858795166
10 lb beta sum: 0.37894824147224426, worst -0.038208723068237305
Time: prepare 0.0157    bound 0.1411    transfer 0.0016    finalize 0.0034    func 0.1672    
Accumulated time: func 1.3066    prepare 0.0856    bound 1.1814    transfer 0.0119    finalize 0.0172    
all_split False
======================Cut inference begins======================
max lb tensor(0.01033786) min lb tensor(-0.03819257)
Number of Verified Splits: 117 of 806
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 28.
#cuts 1-3: 9
#cuts 4-6: 16
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.04529571533203125 
BICCOS Cumulative time: 0.4544200897216797
Preprocessing time: 0.023790359497070312 Inference time: 0.017679214477539062 Add cuts time: 0.0028357505798339844 Cut analysis time: 0.0009903907775878906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03819 (15), -0.03765 (15), -0.03727 (15), -0.03689 (15), -0.03576 (15), -0.03559 (15), -0.03538 (15), -0.03520 (15), -0.03499 (15), -0.03454 (15), -0.03453 (15), -0.03409 (15), -0.03402 (15), -0.03365 (15), -0.03364 (15), -0.03352 (15), -0.03344 (15), -0.03314 (15), -0.03303 (15), -0.03303 (15), 
Length of domains: 689
Time: pickout 0.0229    decision 0.1927    set_bounds 0.0354    solve 0.1674    add 0.1148    
Accumulated time: pickout 0.0701    decision 0.8209    set_bounds 0.1444    solve 1.1303    add 0.7138    
Current (lb-rhs): -0.038192570209503174
1535 domains visited
Cumulative time: 3.6322872638702393

BaB round 6
batch: 689
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 475] [/input-8, 475] [/input-8, 979] [/input-8, 979] [/input-8, 979] [/input-8, 475] [/input-8, 979] [/input-8, 475] [/input-8, 475] [/input-8, 475] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03588801622390747
10 lb beta sum: 0.34984660148620605, worst -0.03250604867935181
Time: prepare 0.0262    bound 0.1488    transfer 0.0043    finalize 0.0064    func 0.1950    
Accumulated time: func 1.5015    prepare 0.1121    bound 1.3302    transfer 0.0162    finalize 0.0236    
all_split False
======================Cut inference begins======================
max lb tensor(0.01078987) min lb tensor(-0.03242454)
Number of Verified Splits: 394 of 1378
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 12
#cuts 4-6: 11
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.10681962966918945 
BICCOS Cumulative time: 0.5612397193908691
Preprocessing time: 0.042510271072387695 Inference time: 0.05641937255859375 Add cuts time: 0.0067899227142333984 Cut analysis time: 0.0011000633239746094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03242 (16), -0.03198 (16), -0.03168 (16), -0.03163 (16), -0.03122 (16), -0.03122 (16), -0.03052 (16), -0.03008 (16), -0.02955 (16), -0.02953 (16), -0.02937 (16), -0.02927 (16), -0.02926 (16), -0.02918 (16), -0.02894 (16), -0.02889 (16), -0.02887 (16), -0.02875 (16), -0.02859 (16), -0.02847 (16), 
Length of domains: 984
Time: pickout 0.0765    decision 0.0492    set_bounds 0.0586    solve 0.1954    add 0.0804    
Accumulated time: pickout 0.1466    decision 0.8700    set_bounds 0.2030    solve 1.3257    add 0.7943    
Current (lb-rhs): -0.03242453932762146
2519 domains visited
Cumulative time: 4.203517198562622

BaB round 7
batch: 984
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 878] [/input-8, 878] [/input-8, 878] [/input-8, 117] [/input-8, 878] [/input-8, 878] [/input-8, 878] [/input-8, 878] [/input-8, 878] [/input-8, 1468] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03237104415893555
10 lb beta sum: 0.3631148040294647, worst -0.035510361194610596
Time: prepare 0.0374    bound 0.1697    transfer 0.0083    finalize 0.0087    func 0.2366    
Accumulated time: func 1.7382    prepare 0.1497    bound 1.5000    transfer 0.0245    finalize 0.0323    
all_split False
======================Cut inference begins======================
max lb tensor(0.01189440) min lb tensor(-0.02895418)
Number of Verified Splits: 529 of 1968
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 11
#cuts 4-6: 13
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.2984428405761719 
BICCOS Cumulative time: 0.859682559967041
Preprocessing time: 0.060880422592163086 Inference time: 0.22943520545959473 Add cuts time: 0.007093667984008789 Cut analysis time: 0.0010335445404052734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02895 (17), -0.02837 (17), -0.02821 (17), -0.02812 (17), -0.02770 (17), -0.02760 (17), -0.02696 (17), -0.02672 (17), -0.02654 (17), -0.02633 (17), -0.02603 (17), -0.02598 (17), -0.02591 (17), -0.02587 (17), -0.02582 (17), -0.02576 (17), -0.02558 (17), -0.02556 (17), -0.02553 (17), -0.02536 (17), 
Length of domains: 1439
Time: pickout 0.0224    decision 0.0639    set_bounds 0.0844    solve 0.2370    add 0.0075    
Accumulated time: pickout 0.1690    decision 0.9339    set_bounds 0.2874    solve 1.5627    add 0.8018    
Current (lb-rhs): -0.02895417809486389
3958 domains visited
Cumulative time: 4.923795700073242

BaB round 8
batch: 1439
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 117] [/input-8, 878] [/input-8, 117] [/input-8, 1468] [/input-8, 117] [/input-8, 117] [/input-8, 878] [/input-8, 117] [/input-8, 878] [/input-8, 117] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.030353009700775146
10 lb beta sum: 0.3479306995868683, worst -0.038215190172195435
Time: prepare 0.0566    bound 0.2198    transfer 0.0131    finalize 0.0148    func 0.3238    
Accumulated time: func 2.0619    prepare 0.2066    bound 1.7198    transfer 0.0377    finalize 0.0471    
all_split False
======================Cut inference begins======================
max lb tensor(0.02235043) min lb tensor(-0.02688748)
Number of Verified Splits: 1616 of 2878
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 12
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.32953453063964844 
BICCOS Cumulative time: 1.1892170906066895
Preprocessing time: 0.08930325508117676 Inference time: 0.22503209114074707 Add cuts time: 0.014462709426879883 Cut analysis time: 0.0007364749908447266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02689 (18), -0.02629 (18), -0.02614 (18), -0.02610 (18), -0.02564 (18), -0.02553 (18), -0.02492 (18), -0.02473 (18), -0.02449 (18), -0.02433 (18), -0.02397 (18), -0.02395 (18), -0.02393 (18), -0.02382 (18), -0.02374 (18), -0.02369 (18), -0.02357 (18), -0.02356 (18), -0.02345 (18), -0.02325 (18), 
Length of domains: 1262
Time: pickout 0.0241    decision 0.0874    set_bounds 0.1229    solve 0.3244    add 0.0242    
Accumulated time: pickout 0.1930    decision 1.0213    set_bounds 0.4103    solve 1.8870    add 0.8259    
Current (lb-rhs): -0.026887476444244385
5220 domains visited
Cumulative time: 5.852701902389526

BaB round 9
batch: 1262
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 620] [/input-8, 878] [/input-8, 485] [/input-8, 485] [/input-8, 485] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026483654975891113
10 lb beta sum: 0.3892504870891571, worst -0.03800678253173828
Time: prepare 0.0497    bound 0.2006    transfer 0.0054    finalize 0.0113    func 0.2835    
Accumulated time: func 2.3455    prepare 0.2565    bound 1.9203    transfer 0.0431    finalize 0.0585    
all_split False
======================Cut inference begins======================
max lb tensor(0.32103813) min lb tensor(-0.02312785)
Number of Verified Splits: 1448 of 2524
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 14
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.30359506607055664 
BICCOS Cumulative time: 1.492812156677246
Preprocessing time: 0.07798147201538086 Inference time: 0.2111668586730957 Add cuts time: 0.013671159744262695 Cut analysis time: 0.0007755756378173828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02313 (19), -0.02259 (19), -0.02245 (19), -0.02235 (19), -0.02203 (19), -0.02170 (19), -0.02144 (19), -0.02098 (19), -0.02093 (19), -0.02051 (19), -0.02043 (19), -0.02020 (19), -0.02018 (19), -0.02008 (19), -0.02005 (19), -0.01998 (19), -0.01995 (19), -0.01975 (19), -0.01957 (19), -0.01944 (19), 
Length of domains: 1076
Time: pickout 0.0260    decision 0.0779    set_bounds 0.2592    solve 0.2847    add 0.0278    
Accumulated time: pickout 0.2191    decision 1.0992    set_bounds 0.6695    solve 2.1717    add 0.8537    
Current (lb-rhs): -0.023127853870391846
6296 domains visited
Cumulative time: 6.847025632858276

BaB round 10
batch: 1076
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 620] [/input-8, 485] [/input-8, 878] [/input-8, 878] [/input-8, 485] [/input-8, 485] [/input-8, 878] [/input-8, 878] [/input-8, 878] [/input-8, 620] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023760855197906494
10 lb beta sum: 0.43816444277763367, worst -0.020446419715881348
Time: prepare 0.0417    bound 0.1763    transfer 0.0033    finalize 0.0098    func 0.2453    
Accumulated time: func 2.5907    prepare 0.2985    bound 2.0966    transfer 0.0464    finalize 0.0682    
all_split False
======================Cut inference begins======================
max lb tensor(0.32161322) min lb tensor(-0.02042687)
Number of Verified Splits: 1107 of 2152
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.23501014709472656 
BICCOS Cumulative time: 1.7278223037719727
Preprocessing time: 0.0671396255493164 Inference time: 0.15920042991638184 Add cuts time: 0.008401155471801758 Cut analysis time: 0.0002689361572265625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02043 (20), -0.01993 (20), -0.01964 (20), -0.01957 (20), -0.01882 (20), -0.01881 (20), -0.01879 (20), -0.01808 (20), -0.01751 (20), -0.01751 (20), -0.01738 (20), -0.01728 (20), -0.01726 (20), -0.01699 (20), -0.01689 (20), -0.01680 (20), -0.01676 (20), -0.01676 (20), -0.01669 (20), -0.01653 (20), 
Length of domains: 1045
Time: pickout 0.0176    decision 0.0678    set_bounds 0.0927    solve 0.2463    add 0.0097    
Accumulated time: pickout 0.2367    decision 1.1670    set_bounds 0.7622    solve 2.4180    add 0.8634    
Current (lb-rhs): -0.02042686939239502
7341 domains visited
Cumulative time: 7.526636838912964

BaB round 11
batch: 1045
splitting decisions: 
split level 0: [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] [/input-8, 485] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01853013038635254

all verified at 1th iter
Time: prepare 0.0434    bound 0.0190    transfer 0.0035    finalize 0.0106    func 0.0896    
Accumulated time: func 2.6804    prepare 0.3421    bound 2.1156    transfer 0.0499    finalize 0.0788    
all_split False
======================Cut inference begins======================
max lb tensor(0.05335073) min lb tensor(8.82148743e-06)
Number of Verified Splits: 2090 of 2090
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.0646517276763916 
BICCOS Cumulative time: 1.7924740314483643
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0204    decision 0.0695    set_bounds 0.2257    solve 0.0901    add 0.0005    
Accumulated time: pickout 0.2570    decision 1.2365    set_bounds 0.9879    solve 2.5081    add 0.8639    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
7341 domains visited
Cumulative time: 8.008705854415894


Properties batch 4, size 1
Remaining timeout: 190.29826474189758
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 190.29815816879272
Verifying property 5 with 1 instances.
##### Instance 42 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.18405610]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.23514986, -9.22857761, -3.75808716, -3.27435327, -4.29405165,
        -3.58545446, -2.41056466, -6.29414511, -6.66572762, -8.34386063],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.18405610]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 590
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 242
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 853
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00013375282287597656
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1840541958808899
10 lb beta sum: 0.0, worst -0.18407279253005981
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0529    transfer 0.0001    finalize 0.0001    func 0.0533    
Accumulated time: func 0.0533    prepare 0.0002    bound 0.0529    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] 
split level 1: [/input-12, 41] 
split level 2: [/input-12, 51] 
split level 3: [/input-12, 11] 
split level 4: [/input-12, 13] 
split level 5: [/input-8, 109] 
split level 6: [/input-12, 45] 
split level 7: [/input-8, 476] 
split level 8: [/input-12, 1] 
split level 9: [/input-8, 1940] 
split level 10: [/input-8, 483] 
split level 11: [/input-8, 92] 
split level 12: [/input-8, 850] 
split level 13: [/input-8, 540] 
split level 14: [/input-8, 1308] 
split level 15: [/input-8, 1939] 
split level 16: [/input-8, 525] 
split level 17: [/input-8, 1909] 
split level 18: [/input-8, 475] 
split level 19: [/input-8, 869] 
split level 20: [/input-8, 1461] 
split level 21: [/input-8, 1453] 
split level 22: [/input, 325] 
split level 23: [/input-8, 1389] 
split level 24: [/input-8, 91] 
split level 25: [/input, 3432] 
split level 26: [/input-8, 484] 
split level 27: [/input-8, 971] 
split level 28: [/input-8, 307] 
split level 29: [/input-8, 981] 
split level 30: [/input-8, 485] 
split level 31: [/input-8, 1828] 
split level 32: [/input-8, 1298] 
split level 33: [/input-8, 117] 
split level 34: [/input-8, 1345] 
split level 35: [/input-8, 989] 
split level 36: [/input-8, 530] 
split level 37: [/input-8, 309] 
split level 38: [/input, 3399] 
split level 39: [/input-8, 1468] 
split level 40: [/input-8, 428] 
split level 41: [/input-8, 878] 
split level 42: [/input-8, 427] 
split level 43: [/input-8, 94] 
split level 44: [/input-8, 977] 
split level 45: [/input, 1366] 
split level 46: [/input-8, 826] 
split level 47: [/input-8, 1142] 
split level 48: [/input-8, 923] 
split level 49: [/input-8, 1527] 
split level 50: [/input-8, 486] 
split level 51: [/input-8, 654] 
split level 52: [/input-8, 1390] 
split level 53: [/input, 2135] 
split level 54: [/input-8, 867] 
split level 55: [/input-8, 985] 
split level 56: [/input-8, 1523] 
split level 57: [/input-8, 979] 
split level 58: [/input-8, 103] 
split level 59: [/input-8, 828] 
split level 60: [/input-8, 507] 
split level 61: [/input-8, 624] 
split level 62: [/input-8, 310] 
split level 63: [/input, 3417] 
split level 64: [/input-8, 1237] 
split level 65: [/input-8, 1467] 
split level 66: [/input, 391] 
split level 67: [/input-8, 620] 
split level 68: [/input-8, 1903] 
split level 69: [/input-8, 1247] 
split level 70: [/input, 2117] 
split level 71: [/input-8, 1446] 
split level 72: [/input-8, 522] 
split level 73: [/input-8, 1381] 
split level 74: [/input-8, 1771] 
split level 75: [/input-8, 1324] 
split level 76: [/input-8, 1835] 
split level 77: [/input-8, 1254] 
split level 78: [/input-8, 997] 
split level 79: [/input-8, 1457] 
split level 80: [/input-8, 998] 
split level 81: [/input-8, 124] 
split level 82: [/input-8, 75] 
split level 83: [/input-8, 1348] 
split level 84: [/input-8, 1421] 
split level 85: [/input, 369] 
split level 86: [/input-8, 1433] 
split level 87: [/input-8, 506] 
split level 88: [/input, 355] 
split level 89: [/input-8, 86] 
split level 90: [/input-8, 1246] 
split level 91: [/input, 1382] 
split level 92: [/input-8, 1837] 
split level 93: [/input-8, 1071] 
split level 94: [/input-8, 1255] 
split level 95: [/input, 1334] 
split level 96: [/input-8, 922] 
split level 97: [/input-8, 113] 
split level 98: [/input-8, 487] 
split level 99: [/input-8, 827] 
split level 100: [/input-8, 1347] 
split level 101: [/input, 1352] 
split level 102: [/input-8, 541] 
split level 103: [/input-8, 1844] 
split level 104: [/input, 1350] 
split level 105: [/input-8, 435] 
split level 106: [/input-8, 2035] 
split level 107: [/input, 406] 
split level 108: [/input-8, 524] 
split level 109: [/input-8, 2036] 
split level 110: [/input, 3510] 
split level 111: [/input, 3960] 
split level 112: [/input-8, 862] 
split level 113: [/input-8, 1437] 
split level 114: [/input, 1333] 
split level 115: [/input-8, 1904] 
split level 116: [/input, 316] 
split level 117: [/input-8, 1323] 
split level 118: [/input-8, 1838] 
split level 119: [/input-8, 887] 
split level 120: [/input, 3127] 
split level 121: [/input, 32] 
split level 122: [/input, 309] 
split level 123: [/input-8, 1816] 
split level 124: [/input, 2802] 
split level 125: [/input-8, 1009] 
split level 126: [/input-8, 1076] 
split level 127: [/input-8, 505] 
split level 128: [/input-8, 415] 
split level 129: [/input-8, 477] 
split level 130: [/input-8, 1440] 
split level 131: [/input-8, 602] 
split level 132: [/input, 1751] 
split level 133: [/input-8, 1736] 
split level 134: [/input, 4045] 
split level 135: [/input, 1960] 
split level 136: [/input, 2376] 
split level 137: [/input, 1093] 
split level 138: [/input-8, 83] 
split level 139: [/input, 2098] 
split level 140: [/input, 1396] 
split level 141: [/input-8, 125] 
split level 142: [/input-8, 1936] 
split level 143: [/input-8, 74] 
split level 144: [/input, 2840] 
split level 145: [/input-8, 1551] 
split level 146: [/input, 3329] 
split level 147: [/input, 1401] 
split level 148: [/input-8, 1406] 
split level 149: [/input, 439] 
split level 150: [/input, 1603] 
split level 151: [/input, 3493] 
split level 152: [/input, 3913] 
split level 153: [/input-8, 1442] 
split level 154: [/input, 1708] 
split level 155: [/input, 404] 
split level 156: [/input-8, 1983] 
split level 157: [/input-8, 1023] 
split level 158: [/input, 2103] 
split level 159: [/input-8, 2044] 
split level 160: [/input, 3368] 
split level 161: [/input-8, 573] 
split level 162: [/input, 2342] 
split level 163: [/input, 3474] 
split level 164: [/input, 2857] 
split level 165: [/input, 3330] 
split level 166: [/input, 1949] 
split level 167: [/input, 2091] 
split level 168: [/input, 1963] 
split level 169: [/input, 1725] 
split level 170: [/input, 3607] 
split level 171: [/input, 4090] 
split level 172: [/input, 1961] 
split level 173: [/input-8, 1754] 
split level 174: [/input-8, 840] 
split level 175: [/input, 1371] 
split level 176: [/input, 506] 
split level 177: [/input, 3371] 
split level 178: [/input, 1347] 
split level 179: [/input, 1416] 
split level 180: [/input, 3356] 
split level 181: [/input, 4013] 
split level 182: [/input-8, 876] 
split level 183: [/input, 174] 
split level 184: [/input, 3345] 
split level 185: [/input-8, 2038] 
split level 186: [/input, 595] 
split level 187: [/input-8, 1235] 
split level 188: [/input, 1964] 
split level 189: [/input, 3908] 
split level 190: [/input-8, 958] 
split level 191: [/input, 3022] 
split level 192: [/input, 2962] 
split level 193: [/input, 3927] 
split level 194: [/input, 3642] 
split level 195: [/input, 3677] 
split level 196: [/input-8, 1427] 
split level 197: [/input, 2360] 
split level 198: [/input, 2024] 
split level 199: [/input, 2841] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1840137243270874
10 lb beta sum: 0.0, worst -0.184004008769989
Time: prepare 0.0118    bound 0.0960    transfer 0.0017    finalize 0.0027    func 0.1148    
Accumulated time: func 0.1681    prepare 0.0218    bound 0.1489    transfer 0.0018    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.32173240) min lb tensor(-0.18399495)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010395050048828125 
BICCOS Cumulative time: 0.010395050048828125
Preprocessing time: 0.009954452514648438 Inference time: 0.0001499652862548828 Add cuts time: 6.508827209472656e-05 Cut analysis time: 0.00022554397583007812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16754 (1), -0.16741 (1), -0.16697 (1), -0.16671 (1), -0.16658 (1), -0.16613 (1), -0.16596 (1), -0.16586 (1), -0.16554 (1), -0.16499 (1), -0.16489 (1), -0.16403 (1), -0.16267 (1), -0.16204 (1), -0.16173 (1), -0.16148 (1), -0.16055 (1), -0.16008 (1), -0.15985 (1), -0.15935 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5106    set_bounds 0.0085    solve 0.1149    add 0.1379    
Accumulated time: pickout 0.0003    decision 0.5106    set_bounds 0.0085    solve 0.1149    add 0.1379    
Current (lb-rhs): -0.16753846406936646
50 domains visited
Cumulative time: 0.8549578189849854

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 51] [/input-12, 11] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 11] 
split level 3: [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 13] [/input-12, 11] [/input-12, 13] [/input-12, 13] [/input-12, 51] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15656131505966187
10 lb beta sum: 0.5283015966415405, worst -0.14285185933113098
Time: prepare 0.0074    bound 0.1162    transfer 0.0019    finalize 0.0026    func 0.1308    
Accumulated time: func 0.2989    prepare 0.0295    bound 0.2651    transfer 0.0037    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.44220406) min lb tensor(-0.14283624)
Number of Verified Splits: 154 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.020194053649902344 
BICCOS Cumulative time: 0.03058910369873047
Preprocessing time: 0.011835575103759766 Inference time: 0.005799770355224609 Add cuts time: 0.0022125244140625 Cut analysis time: 0.00034618377685546875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05340 (2), -0.05327 (2), -0.05314 (2), -0.05305 (2), -0.05294 (2), -0.05276 (2), -0.05254 (2), -0.05229 (2), -0.05155 (2), -0.05155 (2), -0.05148 (2), -0.05137 (2), -0.05123 (2), -0.05062 (2), -0.05019 (2), -0.05009 (2), -0.05004 (2), -0.04967 (2), -0.04889 (2), -0.04887 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0195    set_bounds 0.0117    solve 0.1308    add 0.0892    
Accumulated time: pickout 0.0014    decision 0.5301    set_bounds 0.0202    solve 0.2458    add 0.2271    
Current (lb-rhs): -0.05340462923049927
100 domains visited
Cumulative time: 1.1276354789733887

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 51] [/input-12, 11] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 11] [/input-12, 51] [/input-12, 51] 
split level 3: [/input-12, 11] [/input-12, 51] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 51] [/input-12, 11] [/input-12, 11] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08483904600143433
10 lb beta sum: 0.9791825413703918, worst -0.030017435550689697
Time: prepare 0.0074    bound 0.1313    transfer 0.0008    finalize 0.0024    func 0.1444    
Accumulated time: func 0.4434    prepare 0.0375    bound 0.3964    transfer 0.0045    finalize 0.0078    
all_split False
======================Cut inference begins======================
max lb tensor(0.45036936) min lb tensor(-0.02982712)
Number of Verified Splits: 363 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 34
#cuts >= 20: 0
BICCOS time: 0.03691244125366211 
BICCOS Cumulative time: 0.06750154495239258
Preprocessing time: 0.01177978515625 Inference time: 0.013922452926635742 Add cuts time: 0.01047658920288086 Cut analysis time: 0.0007336139678955078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02777 (3), -0.02776 (3), -0.02776 (3), -0.02776 (3), -0.02775 (3), -0.02775 (3), -0.01185 (3), -0.01185 (3), -0.00451 (3), -0.00451 (3), -0.00451 (3), -0.00449 (3), -0.00446 (3), -0.00445 (3), -0.00443 (3), -0.00443 (3), 
Length of domains: 16
Time: pickout 0.0010    decision 0.0212    set_bounds 0.0156    solve 0.1445    add 0.1035    
Accumulated time: pickout 0.0024    decision 0.5513    set_bounds 0.0358    solve 0.3903    add 0.3306    
Current (lb-rhs): -0.027765512466430664
116 domains visited
Cumulative time: 1.450559377670288

Shallow-BaB round 4
batch: 16
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 33] [/input-12, 41] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 41] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 1: [/input-12, 41] [/input-12, 11] [/input-12, 41] [/input-12, 11] [/input-12, 41] [/input-12, 11] [/input-12, 11] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 11] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 11] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 11] [/input-12, 11] 
split level 3: [/input-8, 850] [/input-8, 1940] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 1940] [/input-8, 850] [/input-8, 850] [/input-8, 1940] [/input-8, 1940] 
split level 4: [/input-8, 1940] [/input-8, 92] [/input-8, 1940] [/input-8, 1940] [/input-8, 1940] [/input-8, 92] [/input-8, 1940] [/input-8, 1940] [/input-8, 483] [/input-8, 483] 
split level 5: [/input-8, 483] [/input-8, 850] [/input-8, 483] [/input-8, 483] [/input-8, 483] [/input-8, 850] [/input-8, 483] [/input-8, 483] [/input-8, 850] [/input-8, 850] 
split level 6: [/input-8, 92] [/input-8, 483] [/input-8, 92] [/input-8, 92] [/input-8, 92] [/input-8, 483] [/input-8, 92] [/input-8, 92] [/input-8, 92] [/input-8, 92] 
split level 7: [/input-8, 475] [/input-8, 475] [/input-8, 475] [/input-8, 1939] [/input-8, 475] [/input-8, 475] [/input-8, 1939] [/input-8, 475] [/input-8, 1939] [/input-8, 1939] 
split level 8: [/input-8, 1939] [/input-8, 1939] [/input-8, 1939] [/input-8, 475] [/input-8, 1939] [/input-8, 1939] [/input-8, 1909] [/input-8, 1939] [/input-8, 1909] [/input-8, 1909] 
split level 9: [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 1909] [/input-8, 475] [/input-8, 1909] [/input-8, 475] [/input-8, 475] 
split level 10: [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] [/input-8, 484] 
split level 11: [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] [/input-8, 1468] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07590669393539429
10 lb beta sum: 3.4928202629089355, worst -1.4066696166992188e-05
Time: prepare 0.0070    bound 0.1363    transfer 0.0008    finalize 0.0022    func 0.1486    
Accumulated time: func 0.5920    prepare 0.0451    bound 0.5326    transfer 0.0053    finalize 0.0100    
all_split False
======================Cut inference begins======================
max lb tensor(0.47916782) min lb tensor(1.78813934e-06)
Number of Verified Splits: 384 of 384
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 38
#cuts >= 20: 0
BICCOS time: 0.03774905204772949 
BICCOS Cumulative time: 0.10525059700012207
Preprocessing time: 0.011313199996948242 Inference time: 0.017043590545654297 Add cuts time: 0.008608341217041016 Cut analysis time: 0.0007839202880859375
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0007    decision 0.0399    set_bounds 0.0116    solve 0.1487    add 0.0268    
Accumulated time: pickout 0.0030    decision 0.5912    set_bounds 0.0474    solve 0.5390    add 0.3574    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
116 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 33]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.82192979e+29, 4.83849734e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 33]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.82192979e+29, 4.42469418e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 13, 33]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.82193281e+29, 1.05690822e-01, 4.63009357e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 13, 33, 41]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.82193281e+29, 1.05690822e-01, 3.92217487e-02, 1.71409119e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 13, 33, 41]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.82193281e+29, 1.05690822e-01, 3.92217487e-02, 3.91568989e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 13, 33]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.82193281e+29, 9.92308110e-02, 4.67709959e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 13, 33, 41]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.82193281e+29, 9.92308110e-02, 2.24333275e-02, 2.77696121e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 13, 33, 41]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([1.82193281e+29, 9.92308110e-02, 2.24333275e-02, 5.39625138e-02]), tensor([0, 1, 2, 3]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10114812850952148

all verified at 3th iter
Time: prepare 0.0005    bound 0.0320    transfer 0.0001    finalize 0.0002    func 0.0329    
Accumulated time: func 0.6249    prepare 0.0456    bound 0.5646    transfer 0.0054    finalize 0.0102    
After pruning, left:  0

Back to Regular BaB


Properties batch 6, size 1
Remaining timeout: 188.35053968429565
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 188.35030889511108
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 188.3502757549286
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 11.6498 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 43, vnnlib ID: 43 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.89999580, -8.55049229, -2.24591589, -3.50618315, -2.26213169,
         -3.34141207, -2.12596679, -3.44707155, -7.70838165, -6.43066359]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [559]; unstable size 559; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 276, 1, 559] with unstable size 275 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 559] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 559] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [275]; unstable size 275; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 275] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 275] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.40751809,  2.20469379, -2.32451963, -0.32005548, -2.33795691,
         -2.70371628, -1.07307458,  1.97626233,  0.69333458]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.89999580, -8.55049229, -2.24591589, -3.50618315, -2.26213169,
         -3.34141207, -2.12596679, -3.44707155, -7.70838165, -6.43066359]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.89999676, -8.55049229, -2.24591589, -3.50618315, -2.26213217,
          -3.34141254, -2.12596703, -3.44707155, -7.70838165, -6.43066359],
         [-5.89999676, -8.55049229, -2.24591589, -3.50618315, -2.26213217,
          -3.34141254, -2.12596703, -3.44707155, -7.70838165, -6.43066359]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.09549665,  0.16477060, -1.07928038, -1.21544552,  0.10565901]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]],


         [[[-7.82539666e-01, -7.50793636e-01, -7.50793636e-01,  ...,
            -9.57142830e-01, -7.66666651e-01, -5.92063487e-01],
           [-8.93650770e-01, -7.82539666e-01, -9.41269815e-01,  ...,
            -7.66666651e-01, -7.03174591e-01, -7.50793636e-01],
           [-7.98412681e-01, -7.82539666e-01, -8.61904740e-01,  ...,
            -1.95237994e-01,  2.69842222e-02,  1.38095319e-01],
           ...,
           [-6.55555546e-01, -4.80952382e-01, -2.74603069e-01,  ...,
            -1.05238092e+00, -1.06825387e+00, -9.41269815e-01],
           [-6.39682531e-01, -7.34920621e-01, -6.23809516e-01,  ...,
            -1.09999990e+00, -1.08412695e+00, -9.88888860e-01],
           [-7.19047606e-01, -7.19047606e-01, -5.92063487e-01,  ...,
            -9.41269815e-01, -1.09999990e+00, -1.16349196e+00]],

          [[ 1.61031820e-02,  1.22934580e-07,  1.61031820e-02,  ...,
            -4.83090580e-02,  9.66184735e-02,  2.09339887e-01],
           [-9.66182351e-02,  1.61031820e-02, -1.28824353e-01,  ...,
             4.83092964e-02,  9.66184735e-02,  3.22062373e-02],
           [-3.22059989e-02,  3.22062373e-02,  1.22934580e-07,  ...,
             6.11916363e-01,  8.69565308e-01,  9.33977544e-01],
           ...,
           [-1.61030471e-01,  1.61031820e-02,  2.25442946e-01,  ...,
            -6.92431509e-01, -4.83091772e-01, -3.05958003e-01],
           [ 1.61031820e-02, -6.44121096e-02,  3.22062373e-02,  ...,
            -5.63607037e-01, -4.02576357e-01, -2.73751885e-01],
           [-1.61029361e-02, -6.44121096e-02,  6.44123554e-02,  ...,
            -6.11916244e-01, -6.60225391e-01, -5.79710126e-01]],

          [[-7.18140900e-01, -6.58170879e-01, -7.93103397e-01,  ...,
            -1.03298354e+00, -7.93103397e-01, -5.68215847e-01],
           [-8.68065953e-01, -7.03148425e-01, -9.58020985e-01,  ...,
            -8.98050964e-01, -8.83058429e-01, -8.98050964e-01],
           [-7.18140900e-01, -5.68215847e-01, -7.18140900e-01,  ...,
            -5.23238361e-01, -3.43328297e-01, -2.23388135e-01],
           ...,
           [-6.88155890e-01, -5.23238361e-01, -2.83358276e-01,  ...,
            -1.13793111e+00, -1.12293863e+00, -1.00299859e+00],
           [-5.83208382e-01, -6.73163414e-01, -5.83208382e-01,  ...,
            -1.06296861e+00, -1.03298354e+00, -9.73013461e-01],
           [-5.98200858e-01, -6.58170879e-01, -5.83208382e-01,  ...,
            -9.28035975e-01, -1.01799107e+00, -1.04797614e+00]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0931 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 44, vnnlib ID: 44 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.03364277, -19.56793976, -11.80023479, -14.44734001, -11.96190071,
         -15.16267776, -13.56670475, -14.41914845, -17.25975418, -18.72661972]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [579]; unstable size 579; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 366, 1, 579] with unstable size 365 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 579] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 579] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [365]; unstable size 365; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 365] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 365] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.44665480,  4.78386021,  1.24888563, -0.92591417,  1.73357201,
          0.40172100,  0.80255318,  3.31306171,  4.20044661]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-15.03364277, -19.56793976, -11.80023479, -14.44734001, -11.96190071,
         -15.16267776, -13.56670475, -14.41914845, -17.25975418, -18.72661972]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-15.04666615, -19.50651550, -11.78564644, -14.38106823, -11.57203579,
          -15.05305195, -13.48137379, -14.08794785, -17.24640465, -18.64059067]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.21361065]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0059 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0751 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 45, vnnlib ID: 45 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.78477669, -6.78171825, -6.26888752, -6.35238361, -6.19891071,
         -6.76594496, -7.28494310, -7.20223379, -6.12016869, -6.41277218]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [523]; unstable size 523; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 523] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 523] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 523] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 203] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.61078978, -2.42233276, -2.06717396, -2.44244099, -1.87546444,
         -1.27228355, -1.18069983, -2.12183714, -1.19985127]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.78477669, -6.78171825, -6.26888752, -6.35238361, -6.19891071,
         -6.76594496, -7.28494310, -7.20223379, -6.12016869, -6.41277218]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.78477764, -6.78171730, -6.26888752, -6.35238314, -6.19891167,
          -6.76594448, -7.28494167, -7.20223379, -6.12016869, -6.41277170],
         [-6.78477764, -6.78171730, -6.26888752, -6.35238314, -6.19891167,
          -6.76594448, -7.28494167, -7.20223379, -6.12016869, -6.41277170]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.00306034, -0.51282978, -0.42933416, -0.58280563, -0.01577282,
           0.50322437,  0.42051649, -0.66154861, -0.36894560]]],
       device='cuda:0')
number of violation:  6
clean attack image tensor([[[[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         ...,


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]],


         [[[-0.90952379, -0.83015871, -0.84603173,  ..., -0.59206349,
            -0.54444444, -0.67142856],
           [-0.92539680, -0.87777776, -1.03650784,  ..., -0.54444444,
            -0.62380952, -0.68730158],
           [-0.97301590, -0.76666665, -0.94126981,  ..., -0.60793650,
            -0.60793650, -0.62380952],
           ...,
           [ 0.53492069,  0.42380959,  0.37619054,  ...,  0.96349210,
             0.96349210,  0.94761908],
           [ 0.75714290,  0.75714290,  0.64603180,  ...,  0.93174607,
             0.93174607,  0.93174607],
           [ 0.91587305,  0.90000004,  0.72539687,  ...,  0.94761908,
             0.93174607,  0.90000004]],

          [[-0.54750401, -0.46698871, -0.48309177,  ..., -0.24154577,
            -0.19323659, -0.32206106],
           [-0.56360704, -0.51529789, -0.67632848,  ..., -0.19323659,
            -0.27375188, -0.33816412],
           [-0.61191624, -0.40257636, -0.57971013,  ..., -0.25764883,
            -0.25764883, -0.27375188],
           ...,
           [ 0.62801939,  0.51529801,  0.46698883,  ...,  1.09500813,
             1.09500813,  1.07890511],
           [ 0.85346222,  0.85346222,  0.74074084,  ...,  1.06280196,
             1.06280196,  1.06280196],
           [ 1.01449287,  0.99838978,  0.82125610,  ...,  1.07890511,
             1.06280196,  1.03059590]],

          [[-0.65817088, -0.58320838, -0.59820086,  ..., -0.25337315,
            -0.20839565, -0.32833579],
           [-0.65817088, -0.61319339, -0.74812591,  ..., -0.20839565,
            -0.28335828, -0.34332830],
           [-0.65817088, -0.47826082, -0.64317840,  ..., -0.26836565,
            -0.26836565, -0.28335828],
           ...,
           [ 0.82608712,  0.72113961,  0.67616212,  ...,  1.24587750,
             1.24587750,  1.23088503],
           [ 1.03598225,  1.03598225,  0.93103468,  ...,  1.21589243,
             1.21589243,  1.21589243],
           [ 1.18590748,  1.17091501,  1.00599718,  ...,  1.23088503,
             1.21589243,  1.18590748]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0823 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 46, vnnlib ID: 46 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.35317993, -10.05822277,  -5.70741463,  -5.30954361,  -5.77602005,
          -5.75247955,  -5.90963793,  -7.28197336,  -9.95428562,  -8.67804050]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [767]; unstable size 767; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 280, 1, 767] with unstable size 279 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 767] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 767] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [279]; unstable size 279; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 279] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 279] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.12624121,  2.47288227, -1.31481647, -0.78547335, -1.26456189,
         -0.82690150,  0.44953948,  2.35486031,  1.43794250]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.35317993, -10.05822277,  -5.70741463,  -5.30954361,  -5.77602005,
          -5.75247955,  -5.90963793,  -7.28197336,  -9.95428562,  -8.67804050]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.35317993, -10.05822277,  -5.70741367,  -5.30954361,  -5.77602053,
           -5.75248098,  -5.90963840,  -7.28197336,  -9.95428562,  -8.67804050],
         [ -7.35317993, -10.05822277,  -5.70741367,  -5.30954361,  -5.77602053,
           -5.75248098,  -5.90963840,  -7.28197336,  -9.95428562,  -8.67804050]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04506731, -0.44293737,  0.02353954,  0.15715742]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]],


         [[[ 6.93650842e-01, -2.11111009e-01,  1.06349289e-01,  ...,
             5.87302521e-02,  7.46032670e-02,  1.22222304e-01],
           [ 7.57142901e-01, -1.47618949e-01,  7.46032670e-02,  ...,
             1.22222304e-01,  9.04762819e-02,  1.06349289e-01],
           [ 8.52380991e-01, -6.82538673e-02,  1.06349289e-01,  ...,
             9.04762819e-02,  9.04762819e-02,  1.22222304e-01],
           ...,
           [ 1.83650815e+00,  1.10634947e+00,  9.31746066e-01,  ...,
             9.47619081e-01,  9.31746066e-01,  8.20634961e-01],
           [ 1.82063520e+00,  1.09047651e+00,  9.31746066e-01,  ...,
             5.66666722e-01,  6.61904812e-01,  6.46031797e-01],
           [ 1.85238123e+00,  1.15396857e+00,  1.05873048e+00,  ...,
             5.50793707e-01,  5.66666722e-01,  5.34920692e-01]],

          [[ 6.60225511e-01, -4.99194801e-01, -2.73751885e-01,  ...,
            -6.44121096e-02, -4.83090580e-02,  1.22934580e-07],
           [ 7.24637747e-01, -4.34782475e-01, -3.05958003e-01,  ...,
             1.22934580e-07, -3.22059989e-02, -1.61029361e-02],
           [ 8.21256101e-01, -3.54267180e-01, -2.73751885e-01,  ...,
            -1.61029361e-02, -3.22059989e-02,  1.61031820e-02],
           ...,
           [ 1.98067665e+00,  1.17552364e+00,  9.33977544e-01,  ...,
             6.28019392e-01,  6.11916363e-01,  5.31401038e-01],
           [ 1.96457350e+00,  1.14331758e+00,  9.33977544e-01,  ...,
            -1.61029361e-02,  9.66184735e-02,  9.66184735e-02],
           [ 1.99677968e+00,  1.22383285e+00,  1.04669893e+00,  ...,
            -2.09339648e-01, -1.93236589e-01, -2.25442708e-01]],

          [[ 7.96102107e-01, -3.73313308e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -5.84706068e-02, -1.34930937e-02],
           [ 8.56072128e-01, -3.13343287e-01, -2.98350781e-01,  ...,
            -2.84855980e-02, -5.84706068e-02, -4.34781015e-02],
           [ 9.46027160e-01, -2.38380641e-01, -2.68365651e-01,  ...,
            -7.34631121e-02, -8.84556174e-02, -4.34781015e-02],
           ...,
           [ 2.04048014e+00,  1.29085493e+00,  1.00599718e+00,  ...,
             6.16192102e-01,  4.96252000e-01,  3.46327007e-01],
           [ 2.02548766e+00,  1.27586246e+00,  1.00599718e+00,  ...,
            -1.48425624e-01, -1.63418129e-01, -2.23388135e-01],
           [ 2.05547261e+00,  1.33583248e+00,  1.12593722e+00,  ...,
            -5.38230836e-01, -5.68215847e-01, -5.98200858e-01]]]]],
       device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0738 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 47, vnnlib ID: 47 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.96445751, -13.95264721, -11.88872242, -12.43732738, -11.28103065,
         -13.65725136, -13.27398205, -14.68500137,  -4.78945637, -13.98094654]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [407]; unstable size 407; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 136, 1, 407] with unstable size 135 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 407] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 407] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [135]; unstable size 135; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 135] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 135] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.02164316, 7.83872032, 5.93336439, 6.63180065, 5.40730762, 7.70184660,
         7.39634609, 8.62479115, 8.04601192]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0669 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 48, vnnlib ID: 48 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.38742971, -8.09583473, -4.17398930, -2.21849561, -4.56612682,
         -1.60451329, -3.84133196, -3.18707657, -8.22775269, -6.31927729]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [525]; unstable size 525; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 227, 1, 525] with unstable size 226 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 525] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 525] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [226]; unstable size 226; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 226] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 226] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.95492148, 4.49830723, 1.13714719, 0.18978077, 1.74934673, 0.88679516,
         0.59362912, 4.57968760, 2.70802188]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0627 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 49, vnnlib ID: 49 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.61658096,  -4.85169363, -11.21480465, -12.01975822, -10.98789406,
         -12.65254879, -10.85314465, -10.63402939,  -8.40850830,  -8.61452770]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [603]; unstable size 603; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 215, 1, 603] with unstable size 214 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 603] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 603] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [214]; unstable size 214; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 214] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 214] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.89015675, 3.85943127, 4.84163666, 3.92532921, 5.16841888, 3.74945831,
         3.27850246, 1.93241072, 2.38752627]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0658 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 50, vnnlib ID: 50 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.94205475, -17.04773521, -14.67247200, -15.90819740, -14.60353470,
         -15.82103157, -16.25810432, -18.06786919, -16.98810387, -17.41020012]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [822]; unstable size 822; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 273, 1, 822] with unstable size 272 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 822] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 822] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [272]; unstable size 272; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 272] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 272] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.36523747, -0.94602203, -2.17604661, -0.24087629, -2.33651757,
         -0.49621725,  0.76373523, -0.90574360, -0.11941814]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-14.94205475, -17.04773521, -14.67247200, -15.90819740, -14.60353470,
         -15.82103157, -16.25810432, -18.06786919, -16.98810387, -17.41020012]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-14.94205666, -17.04773521, -14.67247486, -15.90820122, -14.60353661,
          -15.82103348, -16.25810814, -18.06787491, -16.98810387, -17.41019821],
         [-14.94205666, -17.04773521, -14.67247486, -15.90820122, -14.60353661,
          -15.82103348, -16.25810814, -18.06787491, -16.98810387, -17.41019821]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.87897682,  1.22670174, -1.14855862,  0.08716774, -1.21749687,
           0.43707466,  1.16707039,  1.58916473]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         ...,


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]],


         [[[-1.09999990, -1.06825387, -1.08412695,  ..., -1.24285710,
            -1.25873005, -1.30634916],
           [-1.06825387, -1.05238092, -1.06825387,  ..., -1.14761901,
            -1.14761901, -1.16349196],
           [-1.08412695, -1.06825387, -1.08412695,  ..., -1.00476182,
            -0.98888886, -0.98888886],
           ...,
           [ 0.01111121,  0.05873025,  0.05873025,  ...,  0.29682547,
             0.39206356,  0.34444451],
           [-0.00476181,  0.01111121,  0.02698422,  ...,  0.43968260,
             0.43968260,  0.37619054],
           [-0.02063482,  0.01111121,  0.04285724,  ...,  0.42380959,
             0.40793657,  0.39206356]],

          [[-1.15942025, -1.12721407, -1.14331722,  ..., -1.28824472,
            -1.32045078, -1.35265696],
           [-1.12721407, -1.11111104, -1.12721407,  ..., -1.20772946,
            -1.20772946, -1.22383249],
           [-1.14331722, -1.12721407, -1.14331722,  ..., -1.09500802,
            -1.07890499, -1.07890499],
           ...,
           [-0.11272129, -0.06441211, -0.06441211,  ..., -0.01610294,
             0.16103071,  0.16103071],
           [-0.12882435, -0.11272129, -0.09661824,  ...,  0.14492765,
             0.20933989,  0.19323683],
           [-0.16103047, -0.12882435, -0.09661824,  ...,  0.14492765,
             0.16103071,  0.19323683]],

          [[-1.03298354, -1.00299859, -1.01799107,  ..., -1.10794616,
            -1.13793111, -1.16791618],
           [-1.00299859, -0.98800600, -1.00299859,  ..., -1.04797614,
            -1.04797614, -1.06296861],
           [-1.01799107, -1.00299859, -1.01799107,  ..., -0.97301346,
            -0.95802099, -0.95802099],
           ...,
           [-0.11844061, -0.07346311, -0.07346311,  ..., -0.08845562,
             0.06146942,  0.07646193],
           [-0.13343313, -0.11844061, -0.10344811,  ...,  0.06146942,
             0.10644694,  0.10644694],
           [-0.16341813, -0.11844061, -0.10344811,  ...,  0.04647692,
             0.07646193,  0.10644694]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0882 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 51, vnnlib ID: 51 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.99211121, -14.04107761,  -7.31353474,  -9.89678955,  -8.41009998,
         -10.75332451, -10.63476658, -14.15501976,  -8.49472427, -14.58970451]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [584]; unstable size 584; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 141, 1, 584] with unstable size 140 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 584] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 584] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [140]; unstable size 140; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 140] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 140] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.93474388, 0.60455739, 3.06741548, 1.66697347, 3.81925964, 3.66227579,
         7.25833130, 1.59742701, 7.46314812]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0665 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 52, vnnlib ID: 52 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.61421394, -9.33402538, -5.16767883, -2.64045858, -3.99503326,
         -2.02855682, -4.62166262, -4.60086203, -9.98200893, -8.04814816]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [560]; unstable size 560; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 560] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 560] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 560] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 249] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.83084631, 5.06325197, 1.78347683, 0.29397494, 0.66198206, 1.20087171,
         1.58306229, 5.80479527, 4.18815947]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0646 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 53, vnnlib ID: 53 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.78492880, -7.88765907, -5.16387463, -4.98481178, -5.33830261,
         -5.60749578, -4.95262003, -5.78874540, -8.26618099, -6.25775003]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [600]; unstable size 600; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 170, 1, 600] with unstable size 169 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 600] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 600] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [169]; unstable size 169; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 169] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 169] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.27218652,  1.68873858, -0.96977460, -0.89153826, -0.69919372,
         -0.37939465, -0.73812258,  2.16678524,  0.28935504]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.78492880, -7.88765907, -5.16387463, -4.98481178, -5.33830261,
         -5.60749578, -4.95262003, -5.78874540, -8.26618099, -6.25775003]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.78492785, -7.88765907, -5.16387367, -4.98481131, -5.33830214,
          -5.60749578, -4.95261955, -5.78874445, -8.26618099, -6.25774956],
         [-4.78492785, -7.88765907, -5.16387367, -4.98481131, -5.33830214,
          -5.60749578, -4.95261955, -5.78874445, -8.26618099, -6.25774956]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16769171,  0.21125412,  0.03219175,  0.38568258,  0.65487623,
           0.83612490]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]],


         [[[ 1.53492093,  1.47142887,  1.45555580,  ..., -0.78253967,
            -0.78253967, -0.51269841],
           [ 1.56666696,  1.53492093,  1.50317490,  ..., -0.73492062,
            -0.70317459, -0.36984116],
           [ 1.63015902,  1.59841299,  1.56666696,  ..., -0.63968253,
            -0.56031746, -0.14761895],
           ...,
           [ 1.48730183,  1.21746063,  1.09047651,  ...,  1.40793681,
             1.37619078,  1.34444475],
           [ 1.45555580,  1.28095269,  1.28095269,  ...,  1.45555580,
             1.40793681,  1.37619078],
           [ 1.39206374,  1.37619078,  1.37619078,  ...,  1.51904786,
             1.47142887,  1.42380977]],

          [[ 1.67471850,  1.61030626,  1.59420323,  ..., -0.48309177,
            -0.48309177, -0.24154577],
           [ 1.70692456,  1.65861547,  1.62640929,  ..., -0.43478248,
            -0.41867942, -0.08051517],
           [ 1.75523376,  1.72302771,  1.69082153,  ..., -0.33816412,
            -0.25764883,  0.12882459],
           ...,
           [ 1.65861547,  1.41706955,  1.22383285,  ...,  1.57810009,
             1.54589403,  1.52979100],
           [ 1.59420323,  1.43317258,  1.41706955,  ...,  1.61030626,
             1.57810009,  1.54589403],
           [ 1.52979100,  1.49758482,  1.52979100,  ...,  1.65861547,
             1.62640929,  1.59420323]],

          [[ 1.39580250,  1.33583248,  1.32084000,  ..., -0.97301346,
            -0.92803597, -0.61319339],
           [ 1.45577252,  1.41079497,  1.38081002,  ..., -0.94302845,
            -0.85307342, -0.46326834],
           [ 1.54572761,  1.51574254,  1.48575759,  ..., -0.83808094,
            -0.70314842, -0.26836565],
           ...,
           [ 1.51574254,  1.23088503,  0.91604215,  ...,  1.41079497,
             1.30584753,  1.29085493],
           [ 1.47076499,  1.26086998,  1.17091501,  ...,  1.53073502,
             1.39580250,  1.33583248],
           [ 1.32084000,  1.26086998,  1.29085493,  ...,  1.68066013,
             1.51574254,  1.42578757]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0700 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 54, vnnlib ID: 54 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.60030365, -9.18505859, -6.79131508, -6.88497829, -7.22082901,
         -7.05521584, -7.65325308, -6.61295652, -4.71676254, -8.33832359]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [638]; unstable size 638; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 201, 1, 638] with unstable size 200 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 638] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 638] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 200] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.26122451,  2.70693874, -0.04236603,  0.30218887,  0.55265069,
          0.28326559,  0.97746277, -0.14264715,  2.10263634]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.60030365, -9.18505859, -6.79131508, -6.88497829, -7.22082901,
         -7.05521584, -7.65325308, -6.61295652, -4.71676254, -8.33832359]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.34it/s]100%|██████████| 1/1 [00:00<00:00,  8.33it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.18685913, -9.02146721, -6.04399967, -6.18254805, -6.46242762,
          -6.28525734, -6.96298456, -5.72760868, -4.99939823, -8.02779961],
         [-8.18685913, -9.02146721, -6.04399967, -6.18254805, -6.46242762,
          -6.28525734, -6.96298456, -5.72760868, -4.99939823, -8.02779961]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[1.04460144, 0.72821045]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1230 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 9.889851570129395
alpha/beta optimization time: 1.2243759632110596
initial alpha-crown bounds: tensor([[ 2.37169123,  2.83057570,  0.08211184,  0.37143326,  0.65308714,
          0.37245858,  1.04918385, -0.03270340,  2.19201303]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.032703399658203125
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.58295917510986
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.58291935920715
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.58289170265198
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.58286833763123
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.58284997940063
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.58283066749573
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.58281207084656
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.5827922821045
Verifying property 7 with 1 instances.
##### Instance 54 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03270340]], device='cuda:0') need to verify.
Model prediction is: tensor([-8.60030365, -9.18505859, -6.79131508, -6.88497829, -7.22082901,
        -7.05521584, -7.65325308, -6.61295652, -4.71676254, -8.33832359],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03270340]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 638
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 196
Node /15 input 0: size torch.Size([100]) unstable 20
-----------------
# of unstable neurons: 854
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010395050048828125
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03270101547241211
10 lb beta sum: 0.0, worst -0.032733917236328125
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    func 0.0526    
Accumulated time: func 0.0526    prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] 
split level 1: [/input-12, 18] 
split level 2: [/input-12, 36] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 51] 
split level 5: [/input-12, 26] 
split level 6: [/input-8, 1891] 
split level 7: [/input-8, 860] 
split level 8: [/input-8, 1910] 
split level 9: [/input-8, 548] 
split level 10: [/input-8, 1884] 
split level 11: [/input-8, 1902] 
split level 12: [/input-8, 1892] 
split level 13: [/input-8, 875] 
split level 14: [/input-8, 876] 
split level 15: [/input-12, 1] 
split level 16: [/input, 2525] 
split level 17: [/input-8, 667] 
split level 18: [/input-8, 666] 
split level 19: [/input-8, 1879] 
split level 20: [/input, 2426] 
split level 21: [/input, 2422] 
split level 22: [/input, 2409] 
split level 23: [/input, 2442] 
split level 24: [/input-8, 1874] 
split level 25: [/input, 3511] 
split level 26: [/input, 2765] 
split level 27: [/input, 2526] 
split level 28: [/input-8, 649] 
split level 29: [/input-8, 1918] 
split level 30: [/input-8, 859] 
split level 31: [/input-8, 1861] 
split level 32: [/input, 1479] 
split level 33: [/input-8, 1057] 
split level 34: [/input, 2407] 
split level 35: [/input-8, 506] 
split level 36: [/input, 2518] 
split level 37: [/input-8, 1469] 
split level 38: [/input-8, 556] 
split level 39: [/input-8, 1890] 
split level 40: [/input, 2503] 
split level 41: [/input, 2519] 
split level 42: [/input-8, 1350] 
split level 43: [/input, 1480] 
split level 44: [/input-8, 690] 
split level 45: [/input, 2541] 
split level 46: [/input-8, 1648] 
split level 47: [/input-8, 1307] 
split level 48: [/input, 2540] 
split level 49: [/input, 1478] 
split level 50: [/input, 2472] 
split level 51: [/input, 2377] 
split level 52: [/input, 3302] 
split level 53: [/input, 2517] 
split level 54: [/input-8, 410] 
split level 55: [/input, 2536] 
split level 56: [/input, 2331] 
split level 57: [/input-8, 812] 
split level 58: [/input-8, 949] 
split level 59: [/input-8, 1656] 
split level 60: [/input-8, 1065] 
split level 61: [/input, 2247] 
split level 62: [/input, 1742] 
split level 63: [/input, 2521] 
split level 64: [/input-8, 1970] 
split level 65: [/input, 2348] 
split level 66: [/input, 3156] 
split level 67: [/input-8, 421] 
split level 68: [/input, 3300] 
split level 69: [/input-8, 964] 
split level 70: [/input, 2493] 
split level 71: [/input, 2263] 
split level 72: [/input-8, 147] 
split level 73: [/input, 3578] 
split level 74: [/input, 2343] 
split level 75: [/input, 2332] 
split level 76: [/input-8, 849] 
split level 77: [/input, 2902] 
split level 78: [/input, 102] 
split level 79: [/input-8, 388] 
split level 80: [/input, 2349] 
split level 81: [/input, 2952] 
split level 82: [/input-8, 1081] 
split level 83: [/input, 2510] 
split level 84: [/input, 3304] 
split level 85: [/input-8, 1862] 
split level 86: [/input-8, 420] 
split level 87: [/input, 2354] 
split level 88: [/input, 2370] 
split level 89: [/input, 2460] 
split level 90: [/input-8, 564] 
split level 91: [/input, 1758] 
split level 92: [/input, 2361] 
split level 93: [/input, 2365] 
split level 94: [/input, 2489] 
split level 95: [/input, 3384] 
split level 96: [/input, 2380] 
split level 97: [/input-8, 1984] 
split level 98: [/input-8, 1390] 
split level 99: [/input, 3386] 
split level 100: [/input, 1710] 
split level 101: [/input-12, 33] 
split level 102: [/input, 2389] 
split level 103: [/input, 2477] 
split level 104: [/input, 3224] 
split level 105: [/input-8, 944] 
split level 106: [/input-8, 1353] 
split level 107: [/input, 3576] 
split level 108: [/input, 3283] 
split level 109: [/input, 2443] 
split level 110: [/input, 3286] 
split level 111: [/input, 2363] 
split level 112: [/input-8, 463] 
split level 113: [/input, 1726] 
split level 114: [/input, 3126] 
split level 115: [/input-8, 1926] 
split level 116: [/input, 3139] 
split level 117: [/input, 4062] 
split level 118: [/input, 2444] 
split level 119: [/input, 3124] 
split level 120: [/input, 1355] 
split level 121: [/input, 3122] 
split level 122: [/input, 2398] 
split level 123: [/input, 1356] 
split level 124: [/input, 2397] 
split level 125: [/input, 1514] 
split level 126: [/input, 3208] 
split level 127: [/input, 3268] 
split level 128: [/input, 3128] 
split level 129: [/input, 2436] 
split level 130: [/input, 3113] 
split level 131: [/input-8, 1932] 
split level 132: [/input, 1345] 
split level 133: [/input, 2985] 
split level 134: [/input, 614] 
split level 135: [/input, 1669] 
split level 136: [/input, 3150] 
split level 137: [/input, 1678] 
split level 138: [/input, 2538] 
split level 139: [/input, 3356] 
split level 140: [/input, 1646] 
split level 141: [/input, 2922] 
split level 142: [/input, 2473] 
split level 143: [/input, 3171] 
split level 144: [/input-8, 1860] 
split level 145: [/input-8, 1925] 
split level 146: [/input, 1358] 
split level 147: [/input, 3272] 
split level 148: [/input, 1347] 
split level 149: [/input, 3299] 
split level 150: [/input, 356] 
split level 151: [/input-8, 1624] 
split level 152: [/input, 3137] 
split level 153: [/input, 2327] 
split level 154: [/input, 2552] 
split level 155: [/input, 3130] 
split level 156: [/input, 3106] 
split level 157: [/input-8, 1251] 
split level 158: [/input, 3404] 
split level 159: [/input, 2965] 
split level 160: [/input, 2347] 
split level 161: [/input, 3669] 
split level 162: [/input, 2554] 
split level 163: [/input, 3204] 
split level 164: [/input, 2921] 
split level 165: [/input, 3267] 
split level 166: [/input, 3374] 
split level 167: [/input, 3390] 
split level 168: [/input, 324] 
split level 169: [/input, 3403] 
split level 170: [/input, 3217] 
split level 171: [/input, 3364] 
split level 172: [/input-8, 1314] 
split level 173: [/input, 3289] 
split level 174: [/input, 1323] 
split level 175: [/input, 3117] 
split level 176: [/input-8, 1796] 
split level 177: [/input, 2340] 
split level 178: [/input, 1305] 
split level 179: [/input, 3574] 
split level 180: [/input, 3186] 
split level 181: [/input, 3575] 
split level 182: [/input, 2259] 
split level 183: [/input, 3170] 
split level 184: [/input, 2553] 
split level 185: [/input, 3133] 
split level 186: [/input, 1557] 
split level 187: [/input, 3815] 
split level 188: [/input, 3293] 
split level 189: [/input, 3529] 
split level 190: [/input, 3938] 
split level 191: [/input-8, 389] 
split level 192: [/input, 369] 
split level 193: [/input, 2089] 
split level 194: [/input, 3281] 
split level 195: [/input, 3817] 
split level 196: [/input-8, 1856] 
split level 197: [/input, 1367] 
split level 198: [/input, 2931] 
split level 199: [/input, 3816] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03267776966094971
10 lb beta sum: 0.0, worst -0.03266501426696777
Time: prepare 0.0117    bound 0.0968    transfer 0.0025    finalize 0.0026    func 0.1162    
Accumulated time: func 0.1689    prepare 0.0218    bound 0.1490    transfer 0.0026    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.17216039) min lb tensor(-0.03265893)
Number of Verified Splits: 26 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01178598403930664 
BICCOS Cumulative time: 0.01178598403930664
Preprocessing time: 0.009965658187866211 Inference time: 0.0010075569152832031 Add cuts time: 0.0003008842468261719 Cut analysis time: 0.0005118846893310547
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5073    set_bounds 0.0091    solve 0.1163    add 0.0100    
Accumulated time: pickout 0.0003    decision 0.5073    set_bounds 0.0091    solve 0.1163    add 0.0100    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31]), tensor([-1.]), tensor([0]), tensor([1.86976086e-13]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([31]), tensor([1.]), tensor([0]), tensor([1.86976086e-13]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.007801413536071777

all verified at 1th iter
Time: prepare 0.0003    bound 0.0164    transfer 0.0001    finalize 0.0001    func 0.0170    
Accumulated time: func 0.1859    prepare 0.0222    bound 0.1654    transfer 0.0027    finalize 0.0029    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 197.6412718296051
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.3588 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 55, vnnlib ID: 55 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.89316845, -11.06601906,  -5.14806175,  -6.90553761,  -5.56315517,
          -7.37682629,  -4.56512213,  -8.62777042, -10.82919407, -11.60672951]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [553]; unstable size 553; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 289, 1, 553] with unstable size 288 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 553] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 553] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [288]; unstable size 288; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 288] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 288] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.69566965,  4.02234936, -0.46736044,  1.18290877, -0.48098505,
          1.44691133,  2.02048278,  4.17298031,  4.86422539]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.89316845, -11.06601906,  -5.14806175,  -6.90553761,  -5.56315517,
          -7.37682629,  -4.56512213,  -8.62777042, -10.82919407, -11.60672951]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.06it/s]100%|██████████| 1/1 [00:00<00:00,  9.06it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.66092777, -10.91280365,  -4.69080067,  -6.58803511,  -5.26302862,
           -6.99822426,  -4.68125200,  -8.21521473, -10.48723888, -11.44526005],
         [ -8.66092777, -10.91280365,  -4.69080067,  -6.58803511,  -5.26302862,
           -6.99822426,  -4.68125200,  -8.21521473, -10.48723888, -11.44526005]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.00954866, 0.58177662]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1132 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 20.363889694213867
alpha/beta optimization time: 1.199101448059082
initial alpha-crown bounds: tensor([[ 2.79173636,  4.12782192, -0.40548414,  1.27908862, -0.38319337,
          1.54761791,  2.13197017,  4.29718542,  4.97714758]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.405484139919281
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.61839985847473
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.61835598945618
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.61832976341248
Verifying property 2 with 1 instances.
##### Instance 55 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.40548414]], device='cuda:0') need to verify.
Model prediction is: tensor([ -8.89316845, -11.06601906,  -5.14806175,  -6.90553761,  -5.56315517,
         -7.37682629,  -4.56512213,  -8.62777042, -10.82919407, -11.60672951],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.40548414]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 553
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 283
Node /15 input 0: size torch.Size([100]) unstable 20
-----------------
# of unstable neurons: 856
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010204315185546875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4054826498031616
10 lb beta sum: 0.0, worst -0.4054883122444153
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0528    transfer 0.0001    finalize 0.0001    func 0.0532    
Accumulated time: func 0.0532    prepare 0.0002    bound 0.0528    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] 
split level 1: [/input-12, 11] 
split level 2: [/input-12, 58] 
split level 3: [/input-12, 65] 
split level 4: [/input-12, 35] 
split level 5: [/input-8, 1894] 
split level 6: [/input-8, 626] 
split level 7: [/input-8, 1337] 
split level 8: [/input-8, 565] 
split level 9: [/input-8, 1370] 
split level 10: [/input-8, 1902] 
split level 11: [/input-8, 1563] 
split level 12: [/input-8, 1828] 
split level 13: [/input-8, 1371] 
split level 14: [/input-8, 1019] 
split level 15: [/input-8, 147] 
split level 16: [/input-8, 1386] 
split level 17: [/input-8, 1018] 
split level 18: [/input-8, 1436] 
split level 19: [/input-8, 1562] 
split level 20: [/input-8, 1564] 
split level 21: [/input-8, 1020] 
split level 22: [/input-8, 942] 
split level 23: [/input-8, 841] 
split level 24: [/input-8, 77] 
split level 25: [/input-8, 1292] 
split level 26: [/input-8, 933] 
split level 27: [/input-8, 650] 
split level 28: [/input-8, 1339] 
split level 29: [/input-8, 1903] 
split level 30: [/input-8, 485] 
split level 31: [/input-8, 1420] 
split level 32: [/input-8, 1428] 
split level 33: [/input-8, 1042] 
split level 34: [/input-8, 180] 
split level 35: [/input-8, 1340] 
split level 36: [/input-8, 84] 
split level 37: [/input-8, 1402] 
split level 38: [/input-8, 890] 
split level 39: [/input-8, 2004] 
split level 40: [/input-8, 1444] 
split level 41: [/input-8, 2013] 
split level 42: [/input-8, 1821] 
split level 43: [/input-8, 1131] 
split level 44: [/input-8, 105] 
split level 45: [/input-8, 162] 
split level 46: [/input-8, 1001] 
split level 47: [/input-8, 893] 
split level 48: [/input-8, 1291] 
split level 49: [/input-8, 795] 
split level 50: [/input-8, 1588] 
split level 51: [/input-8, 1404] 
split level 52: [/input-8, 989] 
split level 53: [/input-8, 981] 
split level 54: [/input-8, 924] 
split level 55: [/input-8, 1421] 
split level 56: [/input-8, 1589] 
split level 57: [/input-8, 1886] 
split level 58: [/input-8, 1149] 
split level 59: [/input-8, 937] 
split level 60: [/input-8, 1868] 
split level 61: [/input-8, 1422] 
split level 62: [/input-8, 923] 
split level 63: [/input-8, 1002] 
split level 64: [/input-8, 984] 
split level 65: [/input, 1675] 
split level 66: [/input-8, 76] 
split level 67: [/input-8, 573] 
split level 68: [/input-8, 2037] 
split level 69: [/input, 2732] 
split level 70: [/input-8, 878] 
split level 71: [/input-8, 1876] 
split level 72: [/input-8, 1022] 
split level 73: [/input, 1724] 
split level 74: [/input, 1942] 
split level 75: [/input, 1926] 
split level 76: [/input-8, 486] 
split level 77: [/input-8, 976] 
split level 78: [/input-8, 1811] 
split level 79: [/input-8, 803] 
split level 80: [/input-8, 1325] 
split level 81: [/input-8, 290] 
split level 82: [/input-8, 1590] 
split level 83: [/input-8, 1449] 
split level 84: [/input-8, 1582] 
split level 85: [/input-8, 1916] 
split level 86: [/input-8, 1012] 
split level 87: [/input-8, 67] 
split level 88: [/input-8, 1141] 
split level 89: [/input, 3416] 
split level 90: [/input-8, 1092] 
split level 91: [/input-8, 972] 
split level 92: [/input-8, 2038] 
split level 93: [/input-8, 432] 
split level 94: [/input, 2492] 
split level 95: [/input-8, 1419] 
split level 96: [/input-8, 1755] 
split level 97: [/input-8, 1014] 
split level 98: [/input-8, 1458] 
split level 99: [/input-8, 2030] 
split level 100: [/input, 1740] 
split level 101: [/input-8, 953] 
split level 102: [/input-8, 1960] 
split level 103: [/input-8, 1788] 
split level 104: [/input, 1400] 
split level 105: [/input, 1773] 
split level 106: [/input-8, 1764] 
split level 107: [/input, 359] 
split level 108: [/input-8, 113] 
split level 109: [/input, 2170] 
split level 110: [/input-8, 945] 
split level 111: [/input-8, 2045] 
split level 112: [/input, 2733] 
split level 113: [/input-8, 877] 
split level 114: [/input-8, 559] 
split level 115: [/input-8, 1982] 
split level 116: [/input-8, 1869] 
split level 117: [/input, 209] 
split level 118: [/input-8, 2008] 
split level 119: [/input-8, 167] 
split level 120: [/input-8, 1784] 
split level 121: [/input, 2153] 
split level 122: [/input, 1948] 
split level 123: [/input, 1946] 
split level 124: [/input, 3558] 
split level 125: [/input-8, 910] 
split level 126: [/input-8, 2044] 
split level 127: [/input-8, 2022] 
split level 128: [/input, 1622] 
split level 129: [/input-8, 1996] 
split level 130: [/input-8, 1906] 
split level 131: [/input-8, 2012] 
split level 132: [/input, 1725] 
split level 133: [/input, 2745] 
split level 134: [/input, 1606] 
split level 135: [/input, 3380] 
split level 136: [/input, 4044] 
split level 137: [/input, 470] 
split level 138: [/input, 2616] 
split level 139: [/input, 2995] 
split level 140: [/input, 1238] 
split level 141: [/input, 4045] 
split level 142: [/input-8, 1838] 
split level 143: [/input, 3779] 
split level 144: [/input-8, 1786] 
split level 145: [/input-8, 118] 
split level 146: [/input, 4048] 
split level 147: [/input-8, 1035] 
split level 148: [/input, 2788] 
split level 149: [/input-8, 393] 
split level 150: [/input-8, 1595] 
split level 151: [/input, 3016] 
split level 152: [/input-8, 1547] 
split level 153: [/input-8, 1998] 
split level 154: [/input, 3763] 
split level 155: [/input, 2286] 
split level 156: [/input-8, 1992] 
split level 157: [/input, 1577] 
split level 158: [/input-8, 1418] 
split level 159: [/input, 2989] 
split level 160: [/input, 2151] 
split level 161: [/input-8, 1552] 
split level 162: [/input, 485] 
split level 163: [/input, 1830] 
split level 164: [/input-8, 1093] 
split level 165: [/input-8, 1560] 
split level 166: [/input-8, 477] 
split level 167: [/input, 2302] 
split level 168: [/input, 3780] 
split level 169: [/input, 1530] 
split level 170: [/input-8, 1753] 
split level 171: [/input, 3608] 
split level 172: [/input, 4043] 
split level 173: [/input, 3764] 
split level 174: [/input, 1578] 
split level 175: [/input, 1589] 
split level 176: [/input, 2908] 
split level 177: [/input, 465] 
split level 178: [/input, 1925] 
split level 179: [/input-8, 1776] 
split level 180: [/input, 3677] 
split level 181: [/input, 2842] 
split level 182: [/input-8, 1877] 
split level 183: [/input, 1833] 
split level 184: [/input, 498] 
split level 185: [/input, 1816] 
split level 186: [/input, 2925] 
split level 187: [/input, 3600] 
split level 188: [/input, 4034] 
split level 189: [/input, 2825] 
split level 190: [/input, 3610] 
split level 191: [/input, 1719] 
split level 192: [/input, 2834] 
split level 193: [/input, 1648] 
split level 194: [/input, 1570] 
split level 195: [/input, 1829] 
split level 196: [/input, 1815] 
split level 197: [/input, 3601] 
split level 198: [/input, 3693] 
split level 199: [/input, 4016] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.40543144941329956
10 lb beta sum: 0.0, worst -0.4054263234138489
Time: prepare 0.0114    bound 0.0975    transfer 0.0026    finalize 0.0028    func 0.1169    
Accumulated time: func 0.1701    prepare 0.0215    bound 0.1503    transfer 0.0027    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(-0.13681197) min lb tensor(-0.40542024)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.010135650634765625 
BICCOS Cumulative time: 0.010135650634765625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.39305 (1), -0.39284 (1), -0.39271 (1), -0.39245 (1), -0.39200 (1), -0.39189 (1), -0.39170 (1), -0.39118 (1), -0.39084 (1), -0.39036 (1), -0.38996 (1), -0.38977 (1), -0.38922 (1), -0.38899 (1), -0.38844 (1), -0.38783 (1), -0.38301 (1), -0.38249 (1), -0.38197 (1), -0.38161 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5078    set_bounds 0.0090    solve 0.1170    add 0.0783    
Accumulated time: pickout 0.0003    decision 0.5078    set_bounds 0.0090    solve 0.1170    add 0.0783    
Current (lb-rhs): -0.3930544853210449
50 domains visited
Cumulative time: 0.7911176681518555

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 11] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
split level 1: [/input-12, 11] [/input-12, 35] [/input-12, 11] [/input-12, 58] [/input-12, 58] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 2: [/input-12, 35] [/input-8, 1563] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 3: [/input-8, 812] [/input-8, 1902] [/input-8, 1563] [/input-8, 1902] [/input-8, 1902] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.38472598791122437
10 lb beta sum: 0.0, worst -0.3844727873802185
Time: prepare 0.0127    bound 0.0954    transfer 0.0027    finalize 0.0021    func 0.1155    
Accumulated time: func 0.2856    prepare 0.0344    bound 0.2457    transfer 0.0054    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.08222032) min lb tensor(-0.38437366)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.012312173843383789 
BICCOS Cumulative time: 0.022447824478149414
Preprocessing time: 0.011835336685180664 Inference time: 0.0001494884490966797 Add cuts time: 6.961822509765625e-05 Cut analysis time: 0.00025773048400878906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10434 (2), -0.10361 (2), -0.10209 (2), -0.10152 (2), -0.10151 (2), -0.10098 (2), -0.10004 (2), -0.09958 (2), -0.09894 (2), -0.09736 (2), -0.09699 (2), -0.09688 (2), -0.09683 (2), -0.09666 (2), -0.09621 (2), -0.09578 (2), -0.09489 (2), -0.09320 (2), -0.09303 (2), -0.09298 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0193    set_bounds 0.0116    solve 0.1156    add 0.0792    
Accumulated time: pickout 0.0013    decision 0.5271    set_bounds 0.0205    solve 0.2326    add 0.1575    
Current (lb-rhs): -0.10433900356292725
100 domains visited
Cumulative time: 1.0308396816253662

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 11] [/input-12, 58] [/input-12, 58] [/input-12, 11] [/input-12, 60] [/input-12, 58] [/input-12, 60] 
split level 1: [/input-12, 35] [/input-12, 35] [/input-12, 11] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 11] 
split level 2: [/input-8, 650] [/input-8, 650] [/input-12, 35] [/input-8, 1563] [/input-8, 1563] [/input-8, 1563] [/input-8, 1563] [/input-8, 1902] [/input-8, 1902] [/input-12, 35] 
split level 3: [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 812] [/input-8, 1563] [/input-8, 812] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09616708755493164
10 lb beta sum: 0.15149150788784027, worst -0.10404634475708008
Time: prepare 0.0076    bound 0.1176    transfer 0.0007    finalize 0.0025    func 0.1312    
Accumulated time: func 0.4168    prepare 0.0423    bound 0.3633    transfer 0.0061    finalize 0.0075    
all_split False
======================Cut inference begins======================
max lb tensor(0.35993385) min lb tensor(-0.08286250)
Number of Verified Splits: 155 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 35
#cuts >= 20: 0
BICCOS time: 0.022580385208129883 
BICCOS Cumulative time: 0.0450282096862793
Preprocessing time: 0.011851310729980469 Inference time: 0.006494760513305664 Add cuts time: 0.0033740997314453125 Cut analysis time: 0.0008602142333984375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05482 (3), -0.05455 (3), -0.05424 (3), -0.05273 (3), -0.05203 (3), -0.05145 (3), -0.05072 (3), -0.05004 (3), -0.04715 (3), -0.04708 (3), -0.04661 (3), -0.04649 (3), -0.04220 (3), -0.04205 (3), -0.04114 (3), -0.03659 (3), -0.03200 (3), -0.02994 (3), -0.02796 (3), -0.02766 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0193    set_bounds 0.0152    solve 0.1314    add 0.0968    
Accumulated time: pickout 0.0022    decision 0.5464    set_bounds 0.0358    solve 0.3639    add 0.2544    
Current (lb-rhs): -0.054824233055114746
150 domains visited
Cumulative time: 1.3173801898956299

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 58] [/input-12, 58] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
split level 1: [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-8, 1902] [/input-8, 1902] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 2: [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1563] [/input-8, 1563] [/input-8, 650] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] 
split level 3: [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05264151096343994
10 lb beta sum: 0.6742841005325317, worst -0.08352810889482498
Time: prepare 0.0077    bound 0.1325    transfer 0.0007    finalize 0.0023    func 0.1459    
Accumulated time: func 0.5627    prepare 0.0503    bound 0.4958    transfer 0.0068    finalize 0.0098    
all_split False
======================Cut inference begins======================
max lb tensor(0.36450982) min lb tensor(-0.03632676)
Number of Verified Splits: 276 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.03234267234802246 
BICCOS Cumulative time: 0.07737088203430176
Preprocessing time: 0.011810302734375 Inference time: 0.012041330337524414 Add cuts time: 0.008210420608520508 Cut analysis time: 0.00028061866760253906
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0196    set_bounds 0.0151    solve 0.1460    add 0.0226    
Accumulated time: pickout 0.0032    decision 0.5660    set_bounds 0.0508    solve 0.5099    add 0.2770    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 60]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.82193281e+29, 2.39792932e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 60, 58]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.82193281e+29, 2.70653307e-01, 6.74022883e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 60, 58]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([1.82193281e+29, 2.70653307e-01, 2.57719029e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 58, 35, 60]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([1.82193281e+29, 2.57759035e-01, 4.23167199e-02, 2.40428168e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 58, 35, 60]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.82193281e+29, 2.57759035e-01, 4.23167199e-02, 1.55174777e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 58, 35, 60]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.82193281e+29, 2.57759035e-01, 4.88465279e-02, 1.83804501e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 58, 35, 60]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.82193281e+29, 2.57759035e-01, 4.88465279e-02, 1.56098172e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([11, 58]), tensor([1., 1.]), tensor([0, 0]), tensor([1.82193281e+29, 9.15895589e-03]), tensor([0, 1]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3150519132614136
10 lb beta sum: 0.2803649604320526, worst -0.2898138761520386
Time: prepare 0.0004    bound 0.1140    transfer 0.0001    finalize 0.0002    func 0.1148    
Accumulated time: func 0.6775    prepare 0.0507    bound 0.6098    transfer 0.0070    finalize 0.0100    
After pruning, left:  4

Back to Regular BaB

BaB round 1
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-8, 1902] [/input-8, 1902] [/input-12, 60] 
split level 1: [/input-12, 65] [/input-8, 1404] [/input-8, 1404] [/input-12, 65] 
split level 2: [/input-12, 35] [/input-8, 1340] [/input-8, 1340] [/input-12, 35] 
split level 3: [/input-8, 1902] [/input-8, 650] [/input-8, 650] [/input-8, 1902] 
split level 4: [/input-8, 1563] [/input-8, 1877] [/input-8, 1877] [/input-8, 1563] 
split level 5: [/input-8, 1371] [/input-8, 812] [/input-8, 812] [/input-8, 1903] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23732656240463257, worst -0.23657894134521484
10 lb beta sum: 0.23732656240463257, worst -0.236006498336792
Time: prepare 0.0110    bound 0.1152    transfer 0.0012    finalize 0.0016    func 0.1307    
Accumulated time: func 0.8083    prepare 0.0621    bound 0.7250    transfer 0.0082    finalize 0.0116    
all_split False
======================Cut inference begins======================
max lb tensor(0.30406004) min lb tensor(-0.23580617)
Number of Verified Splits: 192 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.23732659220695496, worst -0.32328999042510986
10 lb beta sum: 0.39661139249801636, worst -0.09172992408275604
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.24828529357910156 
BICCOS Cumulative time: 0.3256561756134033
Preprocessing time: 0.007471799850463867 Inference time: 0.2359161376953125 Add cuts time: 0.00463557243347168 Cut analysis time: 0.0002617835998535156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23581 (6), -0.23473 (6), -0.23197 (6), -0.23100 (6), -0.23087 (6), -0.23029 (6), -0.22717 (6), -0.22643 (6), -0.22340 (6), -0.22321 (6), -0.22213 (6), -0.22210 (6), -0.22178 (6), -0.21989 (6), -0.21956 (6), -0.21934 (6), -0.21903 (6), -0.21832 (6), -0.21791 (6), -0.21689 (6), 
Length of domains: 64
Time: pickout 0.0006    decision 0.0195    set_bounds 0.0184    solve 0.1308    add 0.0011    
Accumulated time: pickout 0.0038    decision 0.5855    set_bounds 0.0692    solve 0.6407    add 0.2781    
Current (lb-rhs): -0.2358061671257019
214 domains visited
Cumulative time: 2.107200860977173

BaB round 2
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1371] [/input-8, 147] [/input-8, 1371] [/input-8, 1370] [/input-8, 147] [/input-8, 147] [/input-8, 1371] [/input-8, 1370] [/input-8, 1371] [/input-8, 147] 
split level 1: [/input-8, 924] [/input-8, 924] [/input-8, 1020] [/input-8, 933] [/input-8, 923] [/input-8, 924] [/input-8, 1020] [/input-8, 933] [/input-8, 924] [/input-8, 924] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23732656240463257, worst -0.2254696488380432
10 lb beta sum: 0.23732656240463257, worst -0.2252446413040161
Time: prepare 0.0111    bound 0.1161    transfer 0.0006    finalize 0.0012    func 0.1308    
Accumulated time: func 0.9390    prepare 0.0733    bound 0.8411    transfer 0.0088    finalize 0.0128    
all_split False
======================Cut inference begins======================
max lb tensor(0.02963452) min lb tensor(-0.22510344)
Number of Verified Splits: 75 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.01600360870361328 
BICCOS Cumulative time: 0.3416597843170166
Preprocessing time: 0.007949113845825195 Inference time: 0.006685495376586914 Add cuts time: 0.0006196498870849609 Cut analysis time: 0.0007493495941162109
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22510 (8), -0.22395 (8), -0.22124 (8), -0.22042 (8), -0.22005 (8), -0.21959 (8), -0.21820 (8), -0.21750 (8), -0.21659 (8), -0.21570 (8), -0.21431 (8), -0.21421 (8), -0.21360 (8), -0.21352 (8), -0.21349 (8), -0.21326 (8), -0.21315 (8), -0.21271 (8), -0.21239 (8), -0.21157 (8), 
Length of domains: 181
Time: pickout 0.0015    decision 0.0195    set_bounds 0.1588    solve 0.1308    add 0.0031    
Accumulated time: pickout 0.0053    decision 0.6050    set_bounds 0.2280    solve 0.7715    add 0.2812    
Current (lb-rhs): -0.2251034379005432
395 domains visited
Cumulative time: 2.43778657913208

BaB round 3
batch: 181
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1370] [/input-8, 1436] [/input-8, 1370] [/input-8, 650] [/input-8, 1370] [/input-8, 1436] [/input-8, 1370] [/input-8, 650] [/input-8, 1370] [/input-8, 1436] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22116148471832275
10 lb beta sum: 0.0022116450127214193, worst -0.22106003761291504
Time: prepare 0.0074    bound 0.1354    transfer 0.0022    finalize 0.0016    func 0.1489    
Accumulated time: func 1.0879    prepare 0.0809    bound 0.9765    transfer 0.0109    finalize 0.0144    
all_split False
======================Cut inference begins======================
max lb tensor(0.02717465) min lb tensor(-0.22101349)
Number of Verified Splits: 89 of 362
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01949763298034668 
BICCOS Cumulative time: 0.3611574172973633
Preprocessing time: 0.010673761367797852 Inference time: 0.007879257202148438 Add cuts time: 0.0006957054138183594 Cut analysis time: 0.00024890899658203125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22101 (9), -0.22017 (9), -0.21723 (9), -0.21637 (9), -0.21624 (9), -0.21584 (9), -0.21410 (9), -0.21372 (9), -0.21260 (9), -0.21191 (9), -0.21045 (9), -0.21035 (9), -0.20993 (9), -0.20979 (9), -0.20948 (9), -0.20939 (9), -0.20872 (9), -0.20856 (9), -0.20851 (9), -0.20751 (9), 
Length of domains: 273
Time: pickout 0.0024    decision 0.0210    set_bounds 0.0159    solve 0.1490    add 0.0027    
Accumulated time: pickout 0.0077    decision 0.6260    set_bounds 0.2439    solve 0.9206    add 0.2839    
Current (lb-rhs): -0.22101348638534546
668 domains visited
Cumulative time: 2.649794340133667

BaB round 4
batch: 273
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 933] [/input-8, 1020] [/input-8, 933] [/input-8, 1436] [/input-8, 1436] [/input-8, 933] [/input-8, 933] [/input-8, 1436] [/input-8, 1436] [/input-8, 1020] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2171250581741333
10 lb beta sum: 0.0061432793736457825, worst -0.21710199117660522
Time: prepare 0.0105    bound 0.1253    transfer 0.0027    finalize 0.0023    func 0.1451    
Accumulated time: func 1.2330    prepare 0.0916    bound 1.1018    transfer 0.0137    finalize 0.0167    
all_split False
======================Cut inference begins======================
max lb tensor(0.00906175) min lb tensor(-0.21708858)
Number of Verified Splits: 22 of 546
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01920461654663086 
BICCOS Cumulative time: 0.38036203384399414
Preprocessing time: 0.015827655792236328 Inference time: 0.0021169185638427734 Add cuts time: 0.0002505779266357422 Cut analysis time: 0.0010094642639160156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21709 (10), -0.21316 (10), -0.21285 (10), -0.21243 (10), -0.21158 (10), -0.21018 (10), -0.20917 (10), -0.20879 (10), -0.20819 (10), -0.20769 (10), -0.20723 (10), -0.20670 (10), -0.20594 (10), -0.20584 (10), -0.20563 (10), -0.20549 (10), -0.20512 (10), -0.20480 (10), -0.20451 (10), -0.20361 (10), 
Length of domains: 524
Time: pickout 0.0035    decision 0.0257    set_bounds 0.0236    solve 0.1452    add 0.0042    
Accumulated time: pickout 0.0112    decision 0.6517    set_bounds 0.2676    solve 1.0658    add 0.2881    
Current (lb-rhs): -0.21708858013153076
1192 domains visited
Cumulative time: 2.8720459938049316

BaB round 5
batch: 524
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1436] [/input-8, 650] [/input-8, 1436] [/input-8, 1020] [/input-8, 933] [/input-8, 650] [/input-8, 1436] [/input-8, 933] [/input-8, 933] [/input-8, 650] 
cut re-enabled after branching node selection
0 lb beta sum: 0.005429919343441725, worst -0.2101472020149231
10 lb beta sum: 0.005429919343441725, worst -0.21012496948242188
Time: prepare 0.0445    bound 0.1261    transfer 0.0056    finalize 0.0046    func 0.1877    
Accumulated time: func 1.4207    prepare 0.1363    bound 1.2279    transfer 0.0193    finalize 0.0214    
all_split False
======================Cut inference begins======================
max lb tensor(0.03332813) min lb tensor(-0.21010923)
Number of Verified Splits: 23 of 1048
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.034813642501831055 
BICCOS Cumulative time: 0.4151756763458252
Preprocessing time: 0.032041311264038086 Inference time: 0.002286195755004883 Add cuts time: 0.0002186298370361328 Cut analysis time: 0.0002675056457519531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21011 (11), -0.20930 (11), -0.20844 (11), -0.20751 (11), -0.20584 (11), -0.20544 (11), -0.20492 (11), -0.20482 (11), -0.20421 (11), -0.20378 (11), -0.20317 (11), -0.20316 (11), -0.20312 (11), -0.20285 (11), -0.20151 (11), -0.20116 (11), -0.20105 (11), -0.20047 (11), -0.19957 (11), -0.19891 (11), 
Length of domains: 1025
Time: pickout 0.0089    decision 0.0399    set_bounds 0.0451    solve 0.1888    add 0.0079    
Accumulated time: pickout 0.0201    decision 0.6916    set_bounds 0.3127    solve 1.2546    add 0.2961    
Current (lb-rhs): -0.21010923385620117
2217 domains visited
Cumulative time: 3.198854923248291

BaB round 6
batch: 1025
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1018] [/input-8, 1903] [/input-8, 1018] [/input-8, 1903] [/input-8, 1018] [/input-8, 1020] [/input-8, 1018] [/input-8, 1020] [/input-8, 1018] [/input-8, 1903] 
cut re-enabled after branching node selection
0 lb beta sum: 0.00023153812799137086, worst -0.20811039209365845
10 lb beta sum: 0.00023153812799137086, worst -0.2081083059310913
Time: prepare 0.0863    bound 0.1490    transfer 0.0167    finalize 0.0105    func 0.2758    
Accumulated time: func 1.6965    prepare 0.2229    bound 1.3769    transfer 0.0360    finalize 0.0319    
all_split False
======================Cut inference begins======================
max lb tensor(0.00992639) min lb tensor(-0.20809537)
Number of Verified Splits: 2 of 2050
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.06301212310791016 
BICCOS Cumulative time: 0.47818779945373535
Preprocessing time: 0.06264686584472656 Inference time: 0.00028133392333984375 Add cuts time: 6.842613220214844e-05 Cut analysis time: 1.5497207641601562e-05
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20810 (12), -0.20715 (12), -0.20642 (12), -0.20536 (12), -0.20382 (12), -0.20341 (12), -0.20277 (12), -0.20268 (12), -0.20220 (12), -0.20176 (12), -0.20101 (12), -0.20099 (12), -0.20096 (12), -0.20048 (12), -0.19929 (12), -0.19913 (12), -0.19868 (12), -0.19830 (12), -0.19753 (12), -0.19676 (12), 
Length of domains: 2048
Time: pickout 0.0122    decision 0.0683    set_bounds 0.0859    solve 0.2767    add 0.0180    
Accumulated time: pickout 0.0323    decision 0.7599    set_bounds 0.3986    solve 1.5314    add 0.3141    
Current (lb-rhs): -0.20809537172317505
4265 domains visited
Cumulative time: 3.7248637676239014

BaB round 7
batch: 2048
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1340] [/input-8, 1292] [/input-8, 650] [/input-8, 1340] [/input-8, 1340] [/input-8, 1292] [/input-8, 650] [/input-8, 1131] [/input-8, 1340] [/input-8, 1292] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20146459341049194
10 lb beta sum: 0.0, worst -0.20146691799163818
Time: prepare 0.1752    bound 0.2326    transfer 0.0164    finalize 0.0179    func 0.4691    
Accumulated time: func 2.1656    prepare 0.3984    bound 1.6095    transfer 0.0524    finalize 0.0498    
all_split False
======================Cut inference begins======================
max lb tensor(-0.10684580) min lb tensor(-0.20145720)
Number of Verified Splits: 0 of 4096
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.12659072875976562 
BICCOS Cumulative time: 0.604778528213501
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20146 (13), -0.20053 (13), -0.19979 (13), -0.19952 (13), -0.19875 (13), -0.19855 (13), -0.19784 (13), -0.19717 (13), -0.19677 (13), -0.19676 (13), -0.19615 (13), -0.19607 (13), -0.19553 (13), -0.19522 (13), -0.19512 (13), -0.19484 (13), -0.19439 (13), -0.19437 (13), -0.19423 (13), -0.19416 (13), 
Length of domains: 4096
Time: pickout 0.0361    decision 0.2478    set_bounds 0.1759    solve 0.4703    add 0.0530    
Accumulated time: pickout 0.0684    decision 1.0077    set_bounds 0.5745    solve 2.0017    add 0.3671    
Current (lb-rhs): -0.2014572024345398
8361 domains visited
Cumulative time: 4.838944673538208

BaB round 8
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 650] [/input-8, 84] [/input-8, 1340] [/input-8, 1018] [/input-8, 650] [/input-8, 84] [/input-8, 1340] [/input-8, 1340] [/input-8, 795] [/input-8, 84] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19638913869857788
10 lb beta sum: 0.0, worst -0.19635999202728271
Time: prepare 0.3610    bound 0.3977    transfer 0.0410    finalize 0.0427    func 1.0516    
Accumulated time: func 3.2172    prepare 0.7597    bound 2.0072    transfer 0.0934    finalize 0.0925    
all_split False
======================Cut inference begins======================
max lb tensor(-0.07746112) min lb tensor(-0.19635445)
Number of Verified Splits: 0 of 8192
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.2570202350616455 
BICCOS Cumulative time: 0.8617987632751465
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19635 (14), -0.19501 (14), -0.19469 (14), -0.19440 (14), -0.19423 (14), -0.19322 (14), -0.19306 (14), -0.19302 (14), -0.19273 (14), -0.19253 (14), -0.19230 (14), -0.19205 (14), -0.19167 (14), -0.19128 (14), -0.19123 (14), -0.19107 (14), -0.19062 (14), -0.19058 (14), -0.19057 (14), -0.19048 (14), 
Length of domains: 8192
Time: pickout 0.0427    decision 0.4063    set_bounds 0.3594    solve 1.0537    add 0.0372    
Accumulated time: pickout 0.1110    decision 1.4141    set_bounds 0.9338    solve 3.0553    add 0.4042    
Current (lb-rhs): -0.1963544487953186
16553 domains visited
current_vram/total_varm: 9.5GB/99.9GB, batch_size increase to 8192
Cumulative time: 7.0050108432769775

BaB round 9
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 795] [/input-8, 1291] [/input-8, 795] [/input-8, 1292] [/input-8, 795] [/input-8, 1291] [/input-8, 795] [/input-8, 1018] [/input-8, 650] [/input-8, 1291] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19115865230560303
10 lb beta sum: 0.0, worst -0.19114452600479126
Time: prepare 0.7082    bound 0.7351    transfer 0.0805    finalize 0.0909    func 1.7202    
Accumulated time: func 4.9374    prepare 1.4683    bound 2.7423    transfer 0.1739    finalize 0.1835    
all_split False
======================Cut inference begins======================
max lb tensor(-0.06413174) min lb tensor(-0.19113487)
Number of Verified Splits: 0 of 16384
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.5227096080780029 
BICCOS Cumulative time: 1.3845083713531494
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19113 (15), -0.18984 (15), -0.18959 (15), -0.18947 (15), -0.18918 (15), -0.18897 (15), -0.18819 (15), -0.18789 (15), -0.18784 (15), -0.18760 (15), -0.18755 (15), -0.18752 (15), -0.18743 (15), -0.18741 (15), -0.18720 (15), -0.18702 (15), -0.18697 (15), -0.18646 (15), -0.18622 (15), -0.18586 (15), 
Length of domains: 16384
Time: pickout 0.0912    decision 0.6435    set_bounds 0.9389    solve 1.7232    add 0.0747    
Accumulated time: pickout 0.2023    decision 2.0576    set_bounds 1.8728    solve 4.7785    add 0.4789    
Current (lb-rhs): -0.19113487005233765
32937 domains visited
current_vram/total_varm: 19.4GB/99.9GB, batch_size increase to 16384
Cumulative time: 11.017719984054565

BaB round 10
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1131] [/input-8, 1018] [/input-8, 1131] [/input-8, 989] [/input-8, 1131] [/input-8, 1018] [/input-8, 1131] [/input-8, 1292] [/input-8, 1131] [/input-8, 1018] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1885906457901001
10 lb beta sum: 0.0, worst -0.18856340646743774
Time: prepare 1.4337    bound 1.4074    transfer 0.1591    finalize 0.4439    func 3.6538    
Accumulated time: func 8.5911    prepare 2.9025    bound 4.1498    transfer 0.3330    finalize 0.6274    
all_split False
======================Cut inference begins======================
max lb tensor(-0.05480480) min lb tensor(-0.18855566)
Number of Verified Splits: 0 of 32768
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 1.066559076309204 
BICCOS Cumulative time: 2.4510674476623535
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18856 (16), -0.18715 (16), -0.18698 (16), -0.18689 (16), -0.18634 (16), -0.18606 (16), -0.18550 (16), -0.18523 (16), -0.18485 (16), -0.18471 (16), -0.18469 (16), -0.18467 (16), -0.18458 (16), -0.18447 (16), -0.18439 (16), -0.18438 (16), -0.18387 (16), -0.18384 (16), -0.18308 (16), -0.18301 (16), 
Length of domains: 32768
Time: pickout 0.1751    decision 1.8573    set_bounds 1.9796    solve 3.6593    add 0.2816    
Accumulated time: pickout 0.3774    decision 3.9149    set_bounds 3.8524    solve 8.4378    add 0.7605    
Current (lb-rhs): -0.18855565786361694
65705 domains visited
current_vram/total_varm: 26.9GB/99.9GB, batch_size increase to 32768
Cumulative time: 20.07644009590149

BaB round 11
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1291] [/input-8, 1340] [/input-8, 1886] [/input-8, 893] [/input-8, 1291] [/input-8, 1340] [/input-8, 1886] [/input-8, 989] [/input-8, 1291] [/input-8, 1340] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18551939725875854
10 lb beta sum: 0.0, worst -0.18551361560821533
Time: prepare 2.8698    bound 7.9479    transfer 0.3214    finalize 0.8471    func 12.4040    
Accumulated time: func 20.9951    prepare 5.7729    bound 12.0977    transfer 0.6544    finalize 1.4744    
all_split False
======================Cut inference begins======================
max lb tensor(-0.04051542) min lb tensor(-0.18549067)
Number of Verified Splits: 0 of 65536
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 2.1998207569122314 
BICCOS Cumulative time: 4.650888204574585
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18549 (17), -0.18408 (17), -0.18383 (17), -0.18383 (17), -0.18327 (17), -0.18263 (17), -0.18241 (17), -0.18241 (17), -0.18207 (17), -0.18187 (17), -0.18161 (17), -0.18159 (17), -0.18151 (17), -0.18149 (17), -0.18136 (17), -0.18130 (17), -0.18099 (17), -0.18097 (17), -0.18094 (17), -0.18082 (17), 
Length of domains: 65536
Time: pickout 0.3558    decision 3.6448    set_bounds 3.9383    solve 12.4139    add 0.3957    
Accumulated time: pickout 0.7332    decision 7.5597    set_bounds 7.7908    solve 20.8517    add 1.1562    
Current (lb-rhs): -0.1854906678199768
131241 domains visited
Cumulative time: 43.11953544616699

BaB round 12
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1292] [/input-8, 893] [/input-8, 893] [/input-8, 84] [/input-8, 1292] [/input-8, 893] [/input-8, 893] [/input-8, 893] [/input-8, 1292] [/input-8, 893] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18209528923034668
10 lb beta sum: 0.0, worst -0.1820758581161499
Time: prepare 2.9047    bound 7.9524    transfer 0.3145    finalize 0.4247    func 12.7250    
Accumulated time: func 33.7201    prepare 8.6780    bound 20.0501    transfer 0.9689    finalize 1.8991    
all_split False
======================Cut inference begins======================
max lb tensor(-0.03073764) min lb tensor(-0.18206680)
Number of Verified Splits: 0 of 65536
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 2.190338134765625 
BICCOS Cumulative time: 6.84122633934021
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18263 (17), -0.18241 (17), -0.18207 (18), -0.18187 (17), -0.18136 (17), -0.18099 (17), -0.18097 (17), -0.18094 (17), -0.18077 (17), -0.18077 (18), -0.18041 (17), -0.18040 (18), -0.18021 (17), -0.18011 (17), -0.17984 (18), -0.17969 (17), -0.17966 (17), -0.17955 (17), -0.17948 (17), -0.17934 (17), 
Length of domains: 98304
Time: pickout 0.4486    decision 3.9466    set_bounds 4.4068    solve 12.7346    add 19.3787    
Accumulated time: pickout 1.1818    decision 11.5063    set_bounds 12.1976    solve 33.5863    add 20.5348    
Current (lb-rhs): -0.18263399600982666
196777 domains visited
Cumulative time: 86.33617424964905

BaB round 13
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1292] [/input-8, 893] [/input-8, 893] [/input-8, 84] [/input-8, 1292] [/input-8, 893] [/input-8, 893] [/input-8, 795] [/input-8, 1292] [/input-8, 893] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17947763204574585
10 lb beta sum: 0.0, worst -0.17947602272033691
Time: prepare 2.9705    bound 7.9574    transfer 0.3153    finalize 0.4612    func 12.1315    
Accumulated time: func 45.8517    prepare 11.6491    bound 28.0075    transfer 1.2842    finalize 2.3603    
all_split False
======================Cut inference begins======================
max lb tensor(-0.03256488) min lb tensor(-0.17946637)
Number of Verified Splits: 0 of 65536
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 2.3979737758636475 
BICCOS Cumulative time: 9.239200115203857
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18207 (18), -0.18077 (18), -0.18040 (18), -0.17984 (18), -0.17947 (18), -0.17911 (18), -0.17898 (18), -0.17860 (18), -0.17834 (18), -0.17827 (18), -0.17808 (18), -0.17806 (18), -0.17788 (18), -0.17775 (18), -0.17768 (18), -0.17738 (18), -0.17737 (18), -0.17733 (18), -0.17677 (18), -0.17677 (18), 
Length of domains: 131072
Time: pickout 0.4267    decision 3.7530    set_bounds 4.3883    solve 13.1104    add 0.3588    
Accumulated time: pickout 1.6085    decision 15.2593    set_bounds 16.5858    solve 46.6967    add 20.8936    
Current (lb-rhs): -0.18206679821014404
262313 domains visited
Cumulative time: 110.84647750854492

BaB round 14
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 84] [/input-8, 485] [/input-8, 924] [/input-8, 795] [/input-8, 84] [/input-8, 1131] [/input-8, 924] [/input-8, 84] [/input-8, 84] [/input-8, 485] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17472237348556519
10 lb beta sum: 0.0, worst -0.17469936609268188
Time: prepare 2.9436    bound 7.9957    transfer 0.3692    finalize 1.5527    func 13.2799    
Accumulated time: func 59.1316    prepare 14.5933    bound 36.0032    transfer 1.6534    finalize 3.9130    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02727795) min lb tensor(-0.17464703)
Number of Verified Splits: 0 of 65536
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 2.082766532897949 
BICCOS Cumulative time: 11.321966648101807
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18207 (18), -0.18077 (18), -0.18040 (18), -0.17984 (18), -0.17947 (18), -0.17911 (18), -0.17898 (18), -0.17860 (18), -0.17827 (18), -0.17808 (18), -0.17806 (18), -0.17788 (18), -0.17775 (18), -0.17768 (18), -0.17738 (18), -0.17737 (18), -0.17733 (18), -0.17677 (18), -0.17677 (18), -0.17664 (18), 
Length of domains: 163840
Time: pickout 0.4484    decision 3.3864    set_bounds 4.4680    solve 13.2906    add 0.4402    
Accumulated time: pickout 2.0569    decision 18.6457    set_bounds 21.0539    solve 59.9874    add 21.3338    
Current (lb-rhs): -0.18206679821014404
327849 domains visited
Cumulative time: 135.104718208313

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 84] [/input-8, 485] [/input-8, 924] [/input-8, 1131] [/input-8, 84] [/input-8, 1131] [/input-8, 924] [/input-8, 84] [/input-8, 84] [/input-8, 485] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1789017915725708
10 lb beta sum: 0.0, worst -0.17889297008514404
Time: prepare 2.9143    bound 7.9873    transfer 0.4273    finalize 0.4761    func 12.2270    
Accumulated time: func 71.3586    prepare 17.5082    bound 43.9905    transfer 2.0807    finalize 4.3891    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02491140) min lb tensor(-0.17888391)
Number of Verified Splits: 0 of 65536
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 2.1714437007904053 
BICCOS Cumulative time: 13.493410348892212
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17947 (18), -0.17898 (18), -0.17888 (19), -0.17808 (18), -0.17775 (18), -0.17768 (18), -0.17748 (19), -0.17737 (18), -0.17733 (18), -0.17718 (19), -0.17679 (19), -0.17677 (18), -0.17664 (18), -0.17639 (18), -0.17638 (18), -0.17630 (18), -0.17605 (18), -0.17580 (19), -0.17572 (18), -0.17572 (18), 
Length of domains: 196608
Time: pickout 0.4655    decision 4.2511    set_bounds 4.7640    solve 12.2369    add 0.4579    
Accumulated time: pickout 2.5224    decision 22.8968    set_bounds 25.8179    solve 72.2243    add 21.7917    
Current (lb-rhs): -0.1794663667678833
393385 domains visited
Cumulative time: 159.56751227378845

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 84] [/input-8, 485] [/input-8, 924] [/input-8, 1131] [/input-8, 84] [/input-8, 1131] [/input-8, 924] [/input-8, 84] [/input-8, 84] [/input-8, 485] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17276936769485474
10 lb beta sum: 0.0, worst -0.17274904251098633
Time: prepare 2.9758    bound 8.0031    transfer 0.4980    finalize 0.4691    func 14.0216    
Accumulated time: func 85.3802    prepare 20.4846    bound 51.9936    transfer 2.5787    finalize 4.8583    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02091706) min lb tensor(-0.17269558)
Number of Verified Splits: 0 of 65536
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 2.235095500946045 
BICCOS Cumulative time: 15.728505849838257
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17947 (18), -0.17898 (18), -0.17888 (19), -0.17808 (18), -0.17775 (18), -0.17768 (18), -0.17748 (19), -0.17737 (18), -0.17733 (18), -0.17718 (19), -0.17679 (19), -0.17677 (18), -0.17664 (18), -0.17638 (18), -0.17630 (18), -0.17605 (18), -0.17580 (19), -0.17572 (18), -0.17572 (18), -0.17555 (18), 
Length of domains: 229376
Time: pickout 0.4694    decision 4.6213    set_bounds 3.3564    solve 14.0334    add 0.6912    
Accumulated time: pickout 2.9918    decision 27.5181    set_bounds 29.1743    solve 86.2577    add 22.4829    
Current (lb-rhs): -0.1794663667678833
458921 domains visited
Cumulative time: 185.13856554031372

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 84] [/input-8, 485] [/input-8, 924] [/input-8, 1131] [/input-8, 84] [/input-8, 1131] [/input-8, 924] [/input-8, 84] [/input-8, 84] [/input-8, 485] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17691689729690552
10 lb beta sum: 0.0, worst -0.17689096927642822
Time: prepare 2.9851    bound 7.9885    transfer 0.5596    finalize 0.4905    func 12.4450    
Accumulated time: func 97.8252    prepare 23.4703    bound 59.9821    transfer 3.1383    finalize 5.3488    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02747822) min lb tensor(-0.17688137)
Number of Verified Splits: 0 of 65536
No cut inferred: All or none verified.
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 2.1944198608398438 
BICCOS Cumulative time: 17.9229257106781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17888 (19), -0.17748 (19), -0.17718 (19), -0.17688 (19), -0.17679 (19), -0.17580 (19), -0.17580 (19), -0.17549 (19), -0.17516 (19), -0.17512 (19), -0.17494 (19), -0.17491 (19), -0.17478 (19), -0.17465 (19), -0.17460 (19), -0.17438 (19), -0.17420 (19), -0.17409 (19), -0.17379 (19), -0.17370 (19), 
Length of domains: 262144
Time: pickout 0.4700    decision 3.3781    set_bounds 5.3568    solve 12.4547    add 0.5997    
Accumulated time: pickout 3.4618    decision 30.8961    set_bounds 34.5311    solve 98.7124    add 23.0827    
Current (lb-rhs): -0.17888391017913818
524457 domains visited
Time out!!!!!!!!
Result: unknown in 213.4263 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 56, vnnlib ID: 56 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.88202381, -15.77611637, -13.39399529, -17.09332085, -13.82697010,
         -18.11546516, -17.38292885, -15.74606514,  -9.08050442, -14.54284763]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [579]; unstable size 579; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 579] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 579] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 579] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 191] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.80924940,  2.66314459,  6.04739952,  2.98685837,  6.92152977,
          6.10498810,  4.46677589, -1.73226333,  3.55088139]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.88202381, -15.77611637, -13.39399529, -17.09332085, -13.82697010,
         -18.11546516, -17.38292885, -15.74606514,  -9.08050442, -14.54284763]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.88202381, -15.77611637, -13.39399529, -17.09332085, -13.82697010,
          -18.11546516, -17.38292885, -15.74606514,  -9.08050442, -14.54284763]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.80151939]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.24920666e+00,  1.67777801e+00,  1.32857168e+00,  ...,
             2.80952454e-01,  1.06349289e-01, -5.23808524e-02],
           [ 9.79365110e-01,  1.39206374e+00,  1.24920666e+00,  ...,
            -1.95237994e-01, -1.79364979e-01, -1.31745934e-01],
           [ 1.28095269e+00,  1.39206374e+00,  9.15873051e-01,  ...,
            -2.06348225e-02,  1.11112073e-02,  2.17460394e-01],
           ...,
           [-4.96825397e-01, -4.80952382e-01, -4.33333218e-01,  ...,
            -4.80952382e-01, -4.96825397e-01, -4.96825397e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.80952382e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01],
           [-4.33333218e-01, -4.65079248e-01, -4.96825397e-01,  ...,
            -4.65079248e-01, -4.49206233e-01, -4.49206233e-01]],

          [[ 1.91626441e+00,  2.06119204e+00,  1.70692456e+00,  ...,
             1.27214205e+00,  1.15942061e+00,  1.06280196e+00],
           [ 1.72302771e+00,  1.88405824e+00,  1.83574903e+00,  ...,
             1.07890511e+00,  1.06280196e+00,  1.04669893e+00],
           [ 1.94847047e+00,  1.91626441e+00,  1.69082153e+00,  ...,
             1.19162667e+00,  1.20772982e+00,  1.30434811e+00],
           ...,
           [-3.22059989e-02, -4.83090580e-02, -3.22059989e-02,  ...,
            -6.44121096e-02, -8.05151686e-02, -8.05151686e-02],
           [ 1.22934580e-07, -4.83090580e-02, -6.44121096e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -3.22059989e-02],
           [-6.44121096e-02, -6.44121096e-02, -8.05151686e-02,  ...,
            -3.22059989e-02, -1.61029361e-02, -1.61029361e-02]],

          [[ 2.10045004e+00,  2.08545780e+00,  1.81559265e+00,  ...,
             1.84557760e+00,  1.80060017e+00,  1.74063015e+00],
           [ 1.96551764e+00,  1.92054021e+00,  1.96551764e+00,  ...,
             1.87556267e+00,  1.86057019e+00,  1.81559265e+00],
           [ 2.08545780e+00,  1.96551764e+00,  1.96551764e+00,  ...,
             1.95052516e+00,  1.95052516e+00,  1.96551764e+00],
           ...,
           [ 2.11394474e-01,  1.21439442e-01,  1.81409463e-01,  ...,
             2.11394474e-01,  2.11394474e-01,  2.11394474e-01],
           [ 2.26386964e-01,  1.51424453e-01,  1.81409463e-01,  ...,
             2.26386964e-01,  2.26386964e-01,  2.41379470e-01],
           [ 1.81409463e-01,  1.66416958e-01,  1.96401969e-01,  ...,
             1.96401969e-01,  2.11394474e-01,  2.26386964e-01]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0778 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 57, vnnlib ID: 57 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.99673080, -8.42243385, -3.26751232, -2.50442123, -3.13881588,
         -2.46149969, -4.81901884, -3.50631714, -8.64563560, -7.38313150]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [561]; unstable size 561; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 250, 1, 561] with unstable size 249 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 561] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 561] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [249]; unstable size 249; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 249] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 249] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.82033300,  4.02014875, -0.46752286, -0.34412253, -0.36842299,
          1.16381526, -0.08054903,  4.18153238,  2.90686536]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.99673080, -8.42243385, -3.26751232, -2.50442123, -3.13881588,
         -2.46149969, -4.81901884, -3.50631714, -8.64563560, -7.38313150]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.66181135, -8.20787239, -3.11358619, -2.42211366, -2.97288847,
          -2.58318949, -4.48878956, -3.49081755, -8.25464249, -7.20841789],
         [-6.66181135, -8.20787239, -3.11358619, -2.42211366, -2.97288847,
          -2.58318949, -4.48878956, -3.49081755, -8.25464249, -7.20841789]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.53039670, -0.16107583,  0.38969898,  0.90762806]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0131 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0805 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 58, vnnlib ID: 58 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.83774090, -5.62437820, -5.73738670, -5.16293812, -7.36110210,
         -6.22037792, -5.42629576, -7.85859919, -5.66585159, -6.29455137]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [486]; unstable size 486; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 486] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 486] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 486] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 197] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.56799006, -1.02534294, -0.31647974,  1.51819468,  0.67600745,
         -0.32146618,  2.05102563, -1.13650227, -0.20026422]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.83774090, -5.62437820, -5.73738670, -5.16293812, -7.36110210,
         -6.22037792, -5.42629576, -7.85859919, -5.66585159, -6.29455137]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.00282240, -5.31585503, -6.18742752, -5.74986649, -7.84297562,
          -6.85040140, -5.90831709, -8.36210918, -5.61094189, -6.28945971],
         [-6.00282240, -5.31585503, -6.18742752, -5.74986649, -7.84297562,
          -6.85040140, -5.90831709, -8.36210918, -5.61094189, -6.28945971]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.25295591, -0.43401146,  0.43756104,  0.15845060, -0.13892460,
           0.53959322]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0113 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0747 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 59, vnnlib ID: 59 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.93982983, -9.67457962, -3.81645751, -4.62450838, -3.47099352,
         -5.53091383, -3.97788739, -6.31543112, -7.47973061, -9.39750957]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [610]; unstable size 610; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 203, 1, 610] with unstable size 202 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 610] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 610] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [202]; unstable size 202; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 202] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 202] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.79685736,  4.36240816, -0.97976065, -0.08943784, -1.19198751,
          0.69136417,  1.47140527,  2.15872240,  4.19818306]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.93982983, -9.67457962, -3.81645751, -4.62450838, -3.47099352,
         -5.53091383, -3.97788739, -6.31543112, -7.47973061, -9.39750957]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.93982983, -9.67457867, -3.81645751, -4.62450838, -3.47099352,
          -5.53091431, -3.97788668, -6.31543159, -7.47973061, -9.39750862],
         [-6.93982983, -9.67457867, -3.81645751, -4.62450838, -3.47099352,
          -5.53091431, -3.97788668, -6.31543159, -7.47973061, -9.39750862]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.16142917,  0.64662170, -0.50689316]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-1.44920623, -1.36984122, -1.52857137,  ..., -1.43333328,
            -1.35396814, -1.33809519],
           [-1.41746020, -1.40158725, -1.51269829,  ..., -1.38571417,
            -1.44920623, -1.33809519],
           [-1.57619035, -1.46507931, -1.48095226,  ..., -1.46507931,
            -1.51269829, -1.30634916],
           ...,
           [-1.78253973, -1.83015871, -1.84603179,  ..., -1.41746020,
            -1.33809519, -1.35396814],
           [-1.83015871, -1.86190474, -1.86190474,  ..., -1.65555561,
            -1.43333328, -1.46507931],
           [-1.87777781, -1.84603179, -1.83015871,  ..., -1.73492062,
            -1.43333328, -1.48095226]],

          [[-1.49758446, -1.41706920, -1.54589367,  ..., -1.49758446,
            -1.38486302, -1.32045078],
           [-1.43317223, -1.41706920, -1.49758446,  ..., -1.46537840,
            -1.49758446, -1.30434775],
           [-1.59420288, -1.48148143, -1.48148143,  ..., -1.54589367,
            -1.54589367, -1.23993552],
           ...,
           [-1.75523353, -1.81964576, -1.81964576,  ..., -1.41706920,
            -1.38486302, -1.36875999],
           [-1.78743970, -1.81964576, -1.83574879,  ..., -1.62640905,
            -1.46537840, -1.46537840],
           [-1.80354273, -1.78743970, -1.80354273,  ..., -1.69082129,
            -1.48148143, -1.46537840]],

          [[-1.31784117, -1.42278874, -1.40779614,  ..., -1.36281872,
            -1.21289361, -1.07796109],
           [-1.21289361, -1.33283365, -1.37781119,  ..., -1.39280367,
            -1.27286363, -1.06296861],
           [-1.36281872, -1.34782624, -1.39280367,  ..., -1.45277369,
            -1.31784117, -1.04797614],
           ...,
           [-1.42278874, -1.48275876, -1.46776617,  ..., -1.18290865,
            -1.30284870, -1.31784117],
           [-1.40779614, -1.43778121, -1.45277369,  ..., -1.27286363,
            -1.33283365, -1.36281872],
           [-1.42278874, -1.39280367, -1.45277369,  ..., -1.30284870,
            -1.30284870, -1.37781119]]],


         [[[-1.44920623, -1.36984122, -1.52857137,  ..., -1.43333328,
            -1.35396814, -1.33809519],
           [-1.41746020, -1.40158725, -1.51269829,  ..., -1.38571417,
            -1.44920623, -1.33809519],
           [-1.57619035, -1.46507931, -1.48095226,  ..., -1.46507931,
            -1.51269829, -1.30634916],
           ...,
           [-1.78253973, -1.83015871, -1.84603179,  ..., -1.41746020,
            -1.33809519, -1.35396814],
           [-1.83015871, -1.86190474, -1.86190474,  ..., -1.65555561,
            -1.43333328, -1.46507931],
           [-1.87777781, -1.84603179, -1.83015871,  ..., -1.73492062,
            -1.43333328, -1.48095226]],

          [[-1.49758446, -1.41706920, -1.54589367,  ..., -1.49758446,
            -1.38486302, -1.32045078],
           [-1.43317223, -1.41706920, -1.49758446,  ..., -1.46537840,
            -1.49758446, -1.30434775],
           [-1.59420288, -1.48148143, -1.48148143,  ..., -1.54589367,
            -1.54589367, -1.23993552],
           ...,
           [-1.75523353, -1.81964576, -1.81964576,  ..., -1.41706920,
            -1.38486302, -1.36875999],
           [-1.78743970, -1.81964576, -1.83574879,  ..., -1.62640905,
            -1.46537840, -1.46537840],
           [-1.80354273, -1.78743970, -1.80354273,  ..., -1.69082129,
            -1.48148143, -1.46537840]],

          [[-1.31784117, -1.42278874, -1.40779614,  ..., -1.36281872,
            -1.21289361, -1.07796109],
           [-1.21289361, -1.33283365, -1.37781119,  ..., -1.39280367,
            -1.27286363, -1.06296861],
           [-1.36281872, -1.34782624, -1.39280367,  ..., -1.45277369,
            -1.31784117, -1.04797614],
           ...,
           [-1.42278874, -1.48275876, -1.46776617,  ..., -1.18290865,
            -1.30284870, -1.31784117],
           [-1.40779614, -1.43778121, -1.45277369,  ..., -1.27286363,
            -1.33283365, -1.36281872],
           [-1.42278874, -1.39280367, -1.45277369,  ..., -1.30284870,
            -1.30284870, -1.37781119]]],


         [[[-1.44920623, -1.36984122, -1.52857137,  ..., -1.43333328,
            -1.35396814, -1.33809519],
           [-1.41746020, -1.40158725, -1.51269829,  ..., -1.38571417,
            -1.44920623, -1.33809519],
           [-1.57619035, -1.46507931, -1.48095226,  ..., -1.46507931,
            -1.51269829, -1.30634916],
           ...,
           [-1.78253973, -1.83015871, -1.84603179,  ..., -1.41746020,
            -1.33809519, -1.35396814],
           [-1.83015871, -1.86190474, -1.86190474,  ..., -1.65555561,
            -1.43333328, -1.46507931],
           [-1.87777781, -1.84603179, -1.83015871,  ..., -1.73492062,
            -1.43333328, -1.48095226]],

          [[-1.49758446, -1.41706920, -1.54589367,  ..., -1.49758446,
            -1.38486302, -1.32045078],
           [-1.43317223, -1.41706920, -1.49758446,  ..., -1.46537840,
            -1.49758446, -1.30434775],
           [-1.59420288, -1.48148143, -1.48148143,  ..., -1.54589367,
            -1.54589367, -1.23993552],
           ...,
           [-1.75523353, -1.81964576, -1.81964576,  ..., -1.41706920,
            -1.38486302, -1.36875999],
           [-1.78743970, -1.81964576, -1.83574879,  ..., -1.62640905,
            -1.46537840, -1.46537840],
           [-1.80354273, -1.78743970, -1.80354273,  ..., -1.69082129,
            -1.48148143, -1.46537840]],

          [[-1.31784117, -1.42278874, -1.40779614,  ..., -1.36281872,
            -1.21289361, -1.07796109],
           [-1.21289361, -1.33283365, -1.37781119,  ..., -1.39280367,
            -1.27286363, -1.06296861],
           [-1.36281872, -1.34782624, -1.39280367,  ..., -1.45277369,
            -1.31784117, -1.04797614],
           ...,
           [-1.42278874, -1.48275876, -1.46776617,  ..., -1.18290865,
            -1.30284870, -1.31784117],
           [-1.40779614, -1.43778121, -1.45277369,  ..., -1.27286363,
            -1.33283365, -1.36281872],
           [-1.42278874, -1.39280367, -1.45277369,  ..., -1.30284870,
            -1.30284870, -1.37781119]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0856 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 60, vnnlib ID: 60 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.75205898, -10.95473385, -15.05265713, -14.31469154, -16.47543526,
         -15.42162323, -16.59076691, -16.32046509, -12.06099701, -12.79094601]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [842]; unstable size 842; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 125, 1, 842] with unstable size 124 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 842] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 842] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [124]; unstable size 124; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 124] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 124] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.70171237,  2.55571413,  1.94688463,  4.01660633,  2.85764170,
          4.14926815,  3.74387598, -0.07238436,  1.06150925]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-13.75205898, -10.95473385, -15.05265713, -14.31469154, -16.47543526,
         -15.42162323, -16.59076691, -16.32046509, -12.06099701, -12.79094601]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.19it/s]100%|██████████| 1/1 [00:00<00:00,  9.18it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.24346066, -10.83120537, -14.41449451, -13.75822830, -15.91536617,
          -14.81918240, -15.97666645, -15.75282669, -11.26206684, -12.42083168]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.43086147]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1115 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 22.35385513305664
alpha/beta optimization time: 1.2059199810028076
initial alpha-crown bounds: tensor([[ 1.73520660,  2.60585356,  1.99403715,  4.06510353,  2.91426277,
          4.19391155,  3.79336524, -0.03199339,  1.08410871]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.03199338912963867
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.61296701431274
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.61292958259583
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.61290287971497
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.61288046836853
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.61286187171936
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.61284375190735
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.61282539367676
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.61280584335327
Verifying property 7 with 1 instances.
##### Instance 60 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03199339]], device='cuda:0') need to verify.
Model prediction is: tensor([-13.75205898, -10.95473385, -15.05265713, -14.31469154, -16.47543526,
        -15.42162323, -16.59076691, -16.32046509, -12.06099701, -12.79094601],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03199339]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 842
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 121
Node /15 input 0: size torch.Size([100]) unstable 11
-----------------
# of unstable neurons: 974
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00013375282287597656
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03199911117553711
10 lb beta sum: 0.0, worst -0.03199958801269531
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0556    transfer 0.0001    finalize 0.0002    func 0.0561    
Accumulated time: func 0.0561    prepare 0.0002    bound 0.0556    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] 
split level 1: [/input-12, 35] 
split level 2: [/input-12, 11] 
split level 3: [/input-12, 54] 
split level 4: [/input-12, 51] 
split level 5: [/input-12, 37] 
split level 6: [/input-8, 564] 
split level 7: [/input-8, 1445] 
split level 8: [/input-8, 1890] 
split level 9: [/input-8, 170] 
split level 10: [/input-12, 4] 
split level 11: [/input-8, 817] 
split level 12: [/input-8, 865] 
split level 13: [/input-8, 686] 
split level 14: [/input-8, 1404] 
split level 15: [/input-8, 162] 
split level 16: [/input, 2728] 
split level 17: [/input-8, 1427] 
split level 18: [/input-8, 678] 
split level 19: [/input-8, 1072] 
split level 20: [/input, 1684] 
split level 21: [/input, 2299] 
split level 22: [/input, 1668] 
split level 23: [/input-8, 1337] 
split level 24: [/input, 1788] 
split level 25: [/input-8, 1637] 
split level 26: [/input, 3769] 
split level 27: [/input, 3786] 
split level 28: [/input-8, 1914] 
split level 29: [/input-8, 1499] 
split level 30: [/input, 3737] 
split level 31: [/input, 1532] 
split level 32: [/input, 3401] 
split level 33: [/input-8, 1889] 
split level 34: [/input-8, 1085] 
split level 35: [/input-8, 996] 
split level 36: [/input-8, 1751] 
split level 37: [/input-8, 825] 
split level 38: [/input-8, 1500] 
split level 39: [/input, 2293] 
split level 40: [/input-8, 1297] 
split level 41: [/input, 1670] 
split level 42: [/input, 3764] 
split level 43: [/input-8, 1759] 
split level 44: [/input, 1531] 
split level 45: [/input-8, 849] 
split level 46: [/input, 3011] 
split level 47: [/input-8, 1834] 
split level 48: [/input, 4010] 
split level 49: [/input, 1530] 
split level 50: [/input-8, 1252] 
split level 51: [/input, 3765] 
split level 52: [/input-8, 1743] 
split level 53: [/input-8, 915] 
split level 54: [/input, 3143] 
split level 55: [/input-8, 1470] 
split level 56: [/input, 3749] 
split level 57: [/input-8, 986] 
split level 58: [/input-8, 916] 
split level 59: [/input, 3384] 
split level 60: [/input, 3994] 
split level 61: [/input, 1634] 
split level 62: [/input, 3559] 
split level 63: [/input-8, 1379] 
split level 64: [/input-8, 697] 
split level 65: [/input-8, 1105] 
split level 66: [/input-8, 1588] 
split level 67: [/input, 1666] 
split level 68: [/input-8, 1447] 
split level 69: [/input, 2359] 
split level 70: [/input, 3385] 
split level 71: [/input, 3735] 
split level 72: [/input, 2184] 
split level 73: [/input, 1789] 
split level 74: [/input-8, 436] 
split level 75: [/input, 3782] 
split level 76: [/input, 3738] 
split level 77: [/input, 3781] 
split level 78: [/input, 2362] 
split level 79: [/input, 3703] 
split level 80: [/input, 1595] 
split level 81: [/input, 2995] 
split level 82: [/input, 2301] 
split level 83: [/input, 3324] 
split level 84: [/input-8, 1868] 
split level 85: [/input, 2662] 
split level 86: [/input, 2028] 
split level 87: [/input, 1671] 
split level 88: [/input, 1512] 
split level 89: [/input, 1594] 
split level 90: [/input, 2556] 
split level 91: [/input, 1604] 
split level 92: [/input, 3453] 
split level 93: [/input-8, 641] 
split level 94: [/input, 2121] 
split level 95: [/input, 3128] 
split level 96: [/input-8, 1361] 
split level 97: [/input, 2969] 
split level 98: [/input, 3420] 
split level 99: [/input, 3705] 
split level 100: [/input, 2344] 
split level 101: [/input, 1353] 
split level 102: [/input, 2027] 
split level 103: [/input, 1529] 
split level 104: [/input, 3787] 
split level 105: [/input, 3747] 
split level 106: [/input, 3129] 
split level 107: [/input, 2357] 
split level 108: [/input, 1418] 
split level 109: [/input, 3387] 
split level 110: [/input, 348] 
split level 111: [/input, 2374] 
split level 112: [/input, 3688] 
split level 113: [/input, 3368] 
split level 114: [/input, 1528] 
split level 115: [/input, 2345] 
split level 116: [/input, 2358] 
split level 117: [/input, 3704] 
split level 118: [/input, 1759] 
split level 119: [/input-8, 593] 
split level 120: [/input, 2693] 
split level 121: [/input, 2332] 
split level 122: [/input, 2659] 
split level 123: [/input, 3687] 
split level 124: [/input, 2363] 
split level 125: [/input, 2887] 
split level 126: [/input-8, 866] 
split level 127: [/input, 3868] 
split level 128: [/input, 1417] 
split level 129: [/input, 3380] 
split level 130: [/input, 3861] 
split level 131: [/input-8, 2013] 
split level 132: [/input, 2330] 
split level 133: [/input, 3381] 
split level 134: [/input, 2325] 
split level 135: [/input, 2346] 
split level 136: [/input, 3789] 
split level 137: [/input, 3863] 
split level 138: [/input, 1524] 
split level 139: [/input, 1348] 
split level 140: [/input, 2328] 
split level 141: [/input, 76] 
split level 142: [/input, 2342] 
split level 143: [/input, 3367] 
split level 144: [/input, 2356] 
split level 145: [/input, 3866] 
split level 146: [/input, 3352] 
split level 147: [/input, 3862] 
split level 148: [/input, 2331] 
split level 149: [/input, 3948] 
split level 150: [/input, 3139] 
split level 151: [/input, 2364] 
split level 152: [/input, 1778] 
split level 153: [/input, 3867] 
split level 154: [/input, 2341] 
split level 155: [/input, 3395] 
split level 156: [/input, 3110] 
split level 157: [/input, 2026] 
split level 158: [/input, 110] 
split level 159: [/input, 2347] 
split level 160: [/input, 2329] 
split level 161: [/input, 126] 
split level 162: [/input, 3021] 
split level 163: [/input, 3379] 
split level 164: [/input, 3113] 
split level 165: [/input, 3864] 
split level 166: [/input, 1596] 
split level 167: [/input, 2343] 
split level 168: [/input, 3394] 
split level 169: [/input, 3865] 
split level 170: [/input, 3351] 
split level 171: [/input, 1777] 
split level 172: [/input, 3706] 
split level 173: [/input, 2323] 
split level 174: [/input, 2326] 
split level 175: [/input, 2386] 
split level 176: [/input, 2398] 
split level 177: [/input, 83] 
split level 178: [/input, 3755] 
split level 179: [/input-8, 2029] 
split level 180: [/input, 3330] 
split level 181: [/input, 2021] 
split level 182: [/input, 3020] 
split level 183: [/input, 3336] 
split level 184: [/input, 2385] 
split level 185: [/input-8, 1792] 
split level 186: [/input, 3702] 
split level 187: [/input-8, 79] 
split level 188: [/input, 17] 
split level 189: [/input, 3365] 
split level 190: [/input, 2348] 
split level 191: [/input, 77] 
split level 192: [/input, 3334] 
split level 193: [/input, 94] 
split level 194: [/input, 3719] 
split level 195: [/input, 3340] 
split level 196: [/input, 3333] 
split level 197: [/input, 3335] 
split level 198: [/input, 1288] 
split level 199: [/input, 1289] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.031957149505615234
10 lb beta sum: 0.0, worst -0.031964778900146484
Time: prepare 0.0114    bound 0.0966    transfer 0.0017    finalize 0.0027    func 0.1150    
Accumulated time: func 0.1711    prepare 0.0217    bound 0.1522    transfer 0.0018    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.23553181) min lb tensor(-0.03195381)
Number of Verified Splits: 12 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010987043380737305 
BICCOS Cumulative time: 0.010987043380737305
Preprocessing time: 0.010131120681762695 Inference time: 0.0004734992980957031 Add cuts time: 0.0001914501190185547 Cut analysis time: 0.00019097328186035156
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5147    set_bounds 0.0092    solve 0.1151    add 0.0099    
Accumulated time: pickout 0.0004    decision 0.5147    set_bounds 0.0092    solve 0.1151    add 0.0099    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([82]), tensor([-1.]), tensor([0]), tensor([7.50602913e-11]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([82]), tensor([1.]), tensor([0]), tensor([1.82193281e+29]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.12754154205322266

all verified at 0th iter
Time: prepare 0.0003    bound 0.0040    transfer 0.0001    finalize 0.0001    func 0.0046    
Accumulated time: func 0.1756    prepare 0.0220    bound 0.1562    transfer 0.0019    finalize 0.0030    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 197.65423226356506
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.3459 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 61, vnnlib ID: 61 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.10208607, -11.41786957, -13.13540363, -14.61515522, -12.72880554,
         -15.42352676, -14.81626129, -14.02141857, -10.58820438, -11.90863419]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [689]; unstable size 689; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 287, 1, 689] with unstable size 286 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 689] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 689] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [286]; unstable size 286; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 286] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 286] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.29984188, -0.42210960,  0.77767414, -0.92977905,  1.27496171,
          0.91095638, -0.04363680, -2.54635906, -1.79969788]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.10208607, -11.41786957, -13.13540363, -14.61515522, -12.72880554,
         -15.42352676, -14.81626129, -14.02141857, -10.58820438, -11.90863419]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.10208607, -11.41786957, -13.13540268, -14.61515522, -12.72880459,
          -15.42352581, -14.81626034, -14.02141666, -10.58820248, -11.90863228],
         [-12.10208607, -11.41786957, -13.13540268, -14.61515522, -12.72880459,
          -15.42352581, -14.81626034, -14.02141666, -10.58820248, -11.90863228]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.68421650,  1.03331661,  0.62671852,  1.91933060, -1.51388359,
          -0.19345379]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]],


         [[[ 1.24920666,  1.23333359,  1.24920666,  ...,  0.94761908,
             0.94761908,  1.01111114],
           [ 1.09047651,  1.07460344,  1.09047651,  ...,  0.67777783,
             0.64603180,  0.70952386],
           [ 0.86825401,  0.88412702,  0.91587305,  ...,  0.48730165,
             0.43968260,  0.50317466],
           ...,
           [-0.67142856, -0.59206349, -0.71904761,  ..., -1.14761901,
            -0.95714283, -0.94126981],
           [-0.92539680, -0.79841268, -0.84603173,  ..., -1.19523799,
            -1.03650784, -1.11587298],
           [-1.00476182, -0.83015871, -0.78253967,  ..., -1.22698402,
            -1.17936504, -1.21111107]],

          [[ 1.25603890,  1.23993587,  1.25603890,  ...,  0.82125610,
             0.82125610,  0.88566834],
           [ 1.07890511,  1.06280196,  1.09500813,  ...,  0.61191636,
             0.57971025,  0.64412248],
           [ 0.85346222,  0.86956531,  0.90177143,  ...,  0.45088577,
             0.40257660,  0.48309189],
           ...,
           [-0.83735907, -0.75684375, -0.88566822,  ..., -1.23993552,
            -1.06280184, -1.04669881],
           [-1.06280184, -0.91787434, -0.96618354,  ..., -1.27214170,
            -1.09500802, -1.17552328],
           [-1.07890499, -0.91787434, -0.85346210,  ..., -1.30434775,
            -1.19162631, -1.23993552]],

          [[ 1.20089996,  1.18590748,  1.21589243,  ...,  0.78110963,
             0.76611710,  0.81109464],
           [ 1.08095968,  1.06596720,  1.08095968,  ...,  0.66116959,
             0.60119957,  0.66116959],
           [ 0.90104967,  0.91604215,  0.94602716,  ...,  0.55622208,
             0.51124454,  0.57121456],
           ...,
           [-0.64317840, -0.56821585, -0.68815589,  ..., -1.00299859,
            -0.88305843, -0.86806595],
           [-0.86806595, -0.73313338, -0.79310340,  ..., -1.03298354,
            -0.92803597, -1.00299859],
           [-0.91304344, -0.74812591, -0.70314842,  ..., -1.07796109,
            -1.03298354, -1.06296861]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0840 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 62, vnnlib ID: 62 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.22134018, -15.56860352, -14.70451355, -17.13485336, -15.30204296,
         -19.28796387, -19.05625916, -17.42904091,  -7.39751339, -15.77822590]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [638]; unstable size 638; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 143, 1, 638] with unstable size 142 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 638] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 638] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [142]; unstable size 142; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 142] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 142] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.70733404,  6.82938242,  6.02555275,  8.45529175,  6.40188885,
         10.40295410, 10.22137833,  8.17284584,  6.93548441]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0745 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 63, vnnlib ID: 63 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.89003658, -14.52937984,  -8.65657139, -11.09509850,  -9.84154129,
         -10.49578381, -11.10558414, -12.61307526, -14.24301243, -14.45481777]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [532]; unstable size 532; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 158, 1, 532] with unstable size 157 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 532] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 532] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [157]; unstable size 157; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 157] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 157] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.66265583,  2.43688107, -3.43360925, -0.71080720, -2.08376074,
         -1.43809295,  0.69530207,  2.01353693,  2.55464077]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.89003658, -14.52937984,  -8.65657139, -11.09509850,  -9.84154129,
         -10.49578381, -11.10558414, -12.61307526, -14.24301243, -14.45481777]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.89003754, -14.52938080,  -8.65657139, -11.09509850,  -9.84154224,
          -10.49578571, -11.10558605, -12.61307430, -14.24301243, -14.45481777],
         [-12.89003754, -14.52938080,  -8.65657139, -11.09509850,  -9.84154224,
          -10.49578571, -11.10558605, -12.61307430, -14.24301243, -14.45481777]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-2.44901466, -0.01048756, -1.26404381, -0.60980034]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]],


         [[[-8.77777755e-01, -7.66666651e-01, -8.46031725e-01,  ...,
             1.72539711e+00,  1.48730183e+00,  5.98412752e-01],
           [-8.77777755e-01, -8.14285696e-01, -8.61904740e-01,  ...,
             1.67777801e+00,  1.67777801e+00,  1.40793681e+00],
           [-8.61904740e-01, -8.30158710e-01, -8.61904740e-01,  ...,
             1.72539711e+00,  1.63015902e+00,  1.69365108e+00],
           ...,
           [-1.17936504e+00, -1.13174593e+00, -5.28571427e-01,  ...,
             3.92063558e-01,  3.76190543e-01,  3.60317528e-01],
           [-1.17936504e+00, -1.17936504e+00, -8.93650770e-01,  ...,
             3.44444513e-01,  3.28571498e-01,  3.28571498e-01],
           [-1.14761901e+00, -1.25873005e+00, -1.25873005e+00,  ...,
             2.96825469e-01,  2.96825469e-01,  3.12698483e-01]],

          [[ 1.22934580e-07,  9.66184735e-02,  4.83092964e-02,  ...,
             1.96457350e+00,  1.77133679e+00,  8.85668337e-01],
           [-1.61029361e-02,  4.83092964e-02,  1.61031820e-02,  ...,
             1.94847047e+00,  1.96457350e+00,  1.70692456e+00],
           [ 1.22934580e-07,  3.22062373e-02,  1.61031820e-02,  ...,
             1.96457350e+00,  1.85185218e+00,  1.91626441e+00],
           ...,
           [-3.86473298e-01, -3.54267180e-01,  2.41546005e-01,  ...,
             7.89049983e-01,  7.72946954e-01,  7.72946954e-01],
           [-3.86473298e-01, -4.02576357e-01, -1.28824353e-01,  ...,
             7.40740836e-01,  7.24637747e-01,  7.24637747e-01],
           [-3.54267180e-01, -4.83091772e-01, -5.15297890e-01,  ...,
             6.76328599e-01,  6.92431629e-01,  6.92431629e-01]],

          [[-1.10794616e+00, -1.04797614e+00, -1.15292358e+00,  ...,
             5.86207092e-01,  4.96252000e-01, -8.84556174e-02],
           [-1.10794616e+00, -1.09295356e+00, -1.18290865e+00,  ...,
             6.61169589e-01,  6.76162124e-01,  4.51274544e-01],
           [-1.09295356e+00, -1.10794616e+00, -1.16791618e+00,  ...,
             1.05097473e+00,  9.16042149e-01,  8.71064663e-01],
           ...,
           [-1.48275876e+00, -1.42278874e+00, -7.18140900e-01,  ...,
             1.44078004e+00,  1.42578757e+00,  1.41079497e+00],
           [-1.48275876e+00, -1.46776617e+00, -1.06296861e+00,  ...,
             1.42578757e+00,  1.41079497e+00,  1.41079497e+00],
           [-1.45277369e+00, -1.54272878e+00, -1.42278874e+00,  ...,
             1.41079497e+00,  1.41079497e+00,  1.42578757e+00]]]]],
       device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0767 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 64, vnnlib ID: 64 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.45442581, -10.84073353,  -2.11443281,  -5.11572742,  -2.45199776,
          -5.34400368,  -5.73184919,  -6.24624300,  -8.44986820, -10.21909809]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 540] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 540] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 216] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.34607959,  7.68123960,  1.94801569, -0.41767776,  2.08386660,
          2.53074312,  2.96769238,  4.98291540,  6.93700123]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.45442581, -10.84073353,  -2.11443281,  -5.11572742,  -2.45199776,
          -5.34400368,  -5.73184919,  -6.24624300,  -8.44986820, -10.21909809]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.50799370, -10.83770275,  -2.31181240,  -5.03916931,  -2.23600197,
           -5.28817987,  -5.62893534,  -6.05531979,  -8.43694019, -10.15128231]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.07581043]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0737 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 65, vnnlib ID: 65 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.03724480, -11.18434811,  -9.06159973,  -6.82672215,  -8.31060886,
          -7.42542219,  -7.49326038,  -8.39577389,  -8.11735439,  -9.31811810]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 166, 1, 540] with unstable size 165 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 540] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [165]; unstable size 165; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 165] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 165] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.06153655,  2.03039956,  0.34189332, -1.49903512, -0.37442589,
         -0.95892555, -0.33255053, -0.89728737,  0.12400341]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.03724480, -11.18434811,  -9.06159973,  -6.82672215,  -8.31060886,
          -7.42542219,  -7.49326038,  -8.39577389,  -8.11735439,  -9.31811810]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.03724575, -11.18434811,  -9.06159973,  -6.82672262,  -8.31061077,
           -7.42542219,  -7.49326038,  -8.39577389,  -8.11735439,  -9.31811714],
         [ -9.03724575, -11.18434811,  -9.06159973,  -6.82672262,  -8.31061077,
           -7.42542219,  -7.49326038,  -8.39577389,  -8.11735439,  -9.31811714]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.66653776,  0.81735039, -0.06783819,  0.90251350,  0.62409401]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]],


         [[[0.47142863, 0.45555562, 0.47142863,  ..., 0.43968260,
            0.45555562, 0.39206356],
           [0.42380959, 0.40793657, 0.42380959,  ..., 0.36031753,
            0.36031753, 0.31269848],
           [0.39206356, 0.36031753, 0.37619054,  ..., 0.31269848,
            0.29682547, 0.28095245],
           ...,
           [1.40793681, 1.31269872, 1.37619078,  ..., 1.31269872,
            1.29682565, 1.32857168],
           [1.45555580, 1.43968284, 1.43968284,  ..., 1.37619078,
            1.32857168, 1.40793681],
           [1.47142887, 1.43968284, 1.51904786,  ..., 1.40793681,
            1.37619078, 1.47142887]],

          [[1.03059590, 0.99838978, 1.03059590,  ..., 0.95008057,
            0.95008057, 0.90177143],
           [0.98228669, 0.95008057, 0.96618366,  ..., 0.86956531,
            0.86956531, 0.83735919],
           [0.93397754, 0.90177143, 0.91787446,  ..., 0.83735919,
            0.82125610, 0.82125610],
           ...,
           [1.75523376, 1.65861547, 1.73913074,  ..., 1.64251232,
            1.64251232, 1.67471850],
           [1.80354297, 1.78743994, 1.80354297,  ..., 1.69082153,
            1.64251232, 1.72302771],
           [1.81964600, 1.78743994, 1.86795521,  ..., 1.72302771,
            1.69082153, 1.78743994]],

          [[1.29085493, 1.26086998, 1.27586246,  ..., 1.27586246,
            1.27586246, 1.23088503],
           [1.32084000, 1.27586246, 1.30584753,  ..., 1.26086998,
            1.26086998, 1.23088503],
           [1.32084000, 1.29085493, 1.30584753,  ..., 1.26086998,
            1.24587750, 1.24587750],
           ...,
           [1.95052516, 1.84557760, 1.87556267,  ..., 1.84557760,
            1.83058512, 1.83058512],
           [1.98051023, 1.95052516, 1.93553269,  ..., 1.95052516,
            1.89055514, 1.92054021],
           [1.96551764, 1.93553269, 2.01049519,  ..., 1.95052516,
            1.90554762, 1.96551764]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0889 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 66, vnnlib ID: 66 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.38867235, -7.83663368, -1.97538805, -3.76285219, -1.67582381,
         -3.71006250, -2.32488132, -4.60400915, -6.09743786, -7.12869167]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [547]; unstable size 547; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 271, 1, 547] with unstable size 270 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 547] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 547] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [270]; unstable size 270; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 270] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 270] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.79902196,  3.61575794, -1.01848125,  0.80863667,  0.56699300,
         -0.88418770,  1.54361463,  1.63250875,  3.27348614]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.38867235, -7.83663368, -1.97538805, -3.76285219, -1.67582381,
         -3.71006250, -2.32488132, -4.60400915, -6.09743786, -7.12869167]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.28951979, -7.94430733, -1.78465533, -3.82200527, -2.04371023,
          -3.80613995, -2.29286313, -4.79971743, -6.22282410, -7.35304642],
         [-4.28951979, -7.94430733, -1.78465533, -3.82200527, -2.04371023,
          -3.80613995, -2.29286313, -4.79971743, -6.22282410, -7.35304642]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.25905490,  0.24915290]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0743 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 67, vnnlib ID: 67 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.84932995, -17.33446884,  -8.64849091, -12.04424667,  -9.06044197,
         -11.72052956, -11.48574638, -12.39857960, -14.52266598, -15.66392040]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [629]; unstable size 629; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 205, 1, 629] with unstable size 204 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 629] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 629] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [204]; unstable size 204; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 204] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 204] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.34933925,  7.33656406,  2.46383572, -0.40431595,  2.07216454,
          1.93970644,  2.30366564,  4.55638123,  5.68612194]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.84932995, -17.33446884,  -8.64849091, -12.04424667,  -9.06044197,
         -11.72052956, -11.48574638, -12.39857960, -14.52266598, -15.66392040]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-13.19249630, -17.56005859,  -9.06513023, -12.28880787,  -9.06449413,
          -11.96904278, -11.70427704, -12.37436962, -14.73856831, -15.87618923]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00063610]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0087 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0708 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 68, vnnlib ID: 68 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-17.69871712, -20.69267273, -15.76616573, -14.43220711, -12.67657566,
         -14.10208035, -15.81092930,  -9.57836342, -21.12655640, -18.97427750]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [565]; unstable size 565; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 220, 1, 565] with unstable size 219 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 565] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 565] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [219]; unstable size 219; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 219] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 219] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.13234711, 8.93222618, 4.50618696, 3.55561495, 1.94738865, 3.30281448,
         4.49555826, 9.35066795, 7.40655947]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0822 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 69, vnnlib ID: 69 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.06598377, -12.28655052, -10.90278053, -11.53813744,  -9.47263813,
         -13.18623543, -12.00863743, -11.38340187,  -8.27437782, -11.53199673]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [870]; unstable size 870; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 870] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 870] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 870] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 184] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.42442572,  2.45793104,  1.12414610,  1.64930069, -0.25776613,
          3.05331612,  2.07846880,  1.21149397,  1.63006830]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.06598377, -12.28655052, -10.90278053, -11.53813744,  -9.47263813,
         -13.18623543, -12.00863743, -11.38340187,  -8.27437782, -11.53199673]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.06598473, -12.28655148, -10.90278149, -11.53813839,  -9.47263718,
          -13.18623447, -12.00863838, -11.38340282,  -8.27437973, -11.53199673],
         [ -8.06598473, -12.28655148, -10.90278149, -11.53813839,  -9.47263718,
          -13.18623447, -12.00863838, -11.38340282,  -8.27437973, -11.53199673]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.20839500,  1.19825745]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           [ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           [ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           ...,
           [-0.29047608, -0.46507925, -0.11587292,  ...,  0.13809532,
             0.02698422, -0.13174593],
           [ 0.97936511,  0.94761908,  0.99523818,  ...,  0.67777783,
             0.63015878,  0.67777783],
           [ 1.31269872,  1.29682565,  1.26507962,  ..., -0.09999990,
             0.01111121,  0.02698422]],

          [[ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           [ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           [ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           ...,
           [-0.27375188, -0.46698871, -0.12882435,  ..., -0.27375188,
            -0.32206106, -0.53140092],
           [ 0.95008057,  0.88566834,  0.91787446,  ...,  0.12882459,
             0.12882459,  0.11272153],
           [ 1.20772982,  1.17552364,  1.14331758,  ..., -0.40257636,
            -0.25764883, -0.30595800]],

          [[ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           [ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           [ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           ...,
           [-0.26836565, -0.44827583, -0.11844061,  ..., -0.64317840,
            -0.68815589, -0.85307342],
           [ 0.82608712,  0.79610211,  0.82608712,  ..., -0.46326834,
            -0.44827583, -0.44827583],
           [ 1.09595215,  1.06596720,  1.03598225,  ..., -0.73313338,
            -0.61319339, -0.65817088]]],


         [[[ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           [ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           [ 1.80476213,  1.80476213,  1.80476213,  ...,  1.78888917,
             1.78888917,  1.78888917],
           ...,
           [-0.29047608, -0.46507925, -0.11587292,  ...,  0.13809532,
             0.02698422, -0.13174593],
           [ 0.97936511,  0.94761908,  0.99523818,  ...,  0.67777783,
             0.63015878,  0.67777783],
           [ 1.31269872,  1.29682565,  1.26507962,  ..., -0.09999990,
             0.01111121,  0.02698422]],

          [[ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           [ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           [ 1.86795521,  1.86795521,  1.86795521,  ...,  1.78743994,
             1.78743994,  1.78743994],
           ...,
           [-0.27375188, -0.46698871, -0.12882435,  ..., -0.27375188,
            -0.32206106, -0.53140092],
           [ 0.95008057,  0.88566834,  0.91787446,  ...,  0.12882459,
             0.12882459,  0.11272153],
           [ 1.20772982,  1.17552364,  1.14331758,  ..., -0.40257636,
            -0.25764883, -0.30595800]],

          [[ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           [ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           [ 1.87556267,  1.87556267,  1.87556267,  ...,  1.81559265,
             1.81559265,  1.81559265],
           ...,
           [-0.26836565, -0.44827583, -0.11844061,  ..., -0.64317840,
            -0.68815589, -0.85307342],
           [ 0.82608712,  0.79610211,  0.82608712,  ..., -0.46326834,
            -0.44827583, -0.44827583],
           [ 1.09595215,  1.06596720,  1.03598225,  ..., -0.73313338,
            -0.61319339, -0.65817088]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0733 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 70, vnnlib ID: 70 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.38531876,  -9.15226841,  -4.51170063,  -6.71956348,  -3.59781837,
          -7.57347631,  -2.96594071,  -8.17208290,  -9.44402599, -10.74759960]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [479]; unstable size 479; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 181, 1, 479] with unstable size 180 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 479] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 479] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [180]; unstable size 180; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 180] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 180] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.27840710,  4.92119646,  0.44459963,  2.50914407, -0.39846039,
          3.07961321,  3.62197185,  4.85315371,  6.55421734]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.38531876,  -9.15226841,  -4.51170063,  -6.71956348,  -3.59781837,
          -7.57347631,  -2.96594071,  -8.17208290,  -9.44402599, -10.74759960]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.15it/s]100%|██████████| 1/1 [00:00<00:00,  9.14it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.24103546,  -9.04660034,  -4.27138662,  -6.51826477,  -3.25499344,
           -7.24183655,  -3.20547986,  -7.74103117,  -9.34854984, -10.61530590]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.04951358]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1118 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 29.355342864990234
alpha/beta optimization time: 1.2007770538330078
initial alpha-crown bounds: tensor([[ 3.32722855,  4.96577787,  0.48747492,  2.55622959, -0.35164094,
          3.13634443,  3.69880342,  4.92325354,  6.61187267]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.3516409397125244
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6174132823944
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6173758506775
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.61734867095947
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.61732530593872
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.61730694770813
Verifying property 4 with 1 instances.
##### Instance 70 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.35164094]], device='cuda:0') need to verify.
Model prediction is: tensor([ -7.38531876,  -9.15226841,  -4.51170063,  -6.71956348,  -3.59781837,
         -7.57347631,  -2.96594071,  -8.17208290,  -9.44402599, -10.74759960],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.35164094]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 479
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 180
Node /15 input 0: size torch.Size([100]) unstable 14
-----------------
# of unstable neurons: 673
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010704994201660156
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3516392707824707
10 lb beta sum: 0.0, worst -0.35164403915405273
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0518    transfer 0.0001    finalize 0.0001    func 0.0523    
Accumulated time: func 0.0523    prepare 0.0002    bound 0.0518    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 51] 
split level 2: [/input-12, 11] 
split level 3: [/input-12, 45] 
split level 4: [/input-12, 46] 
split level 5: [/input-12, 26] 
split level 6: [/input-12, 37] 
split level 7: [/input-12, 33] 
split level 8: [/input-8, 101] 
split level 9: [/input-8, 475] 
split level 10: [/input-8, 931] 
split level 11: [/input-8, 100] 
split level 12: [/input-8, 106] 
split level 13: [/input-8, 614] 
split level 14: [/input-8, 867] 
split level 15: [/input-8, 859] 
split level 16: [/input-8, 1902] 
split level 17: [/input-8, 613] 
split level 18: [/input-8, 604] 
split level 19: [/input-8, 490] 
split level 20: [/input-8, 792] 
split level 21: [/input-8, 980] 
split level 22: [/input-8, 820] 
split level 23: [/input-8, 1819] 
split level 24: [/input-8, 435] 
split level 25: [/input-8, 876] 
split level 26: [/input-8, 102] 
split level 27: [/input-8, 821] 
split level 28: [/input-8, 987] 
split level 29: [/input-8, 426] 
split level 30: [/input-8, 290] 
split level 31: [/input-8, 114] 
split level 32: [/input-8, 1001] 
split level 33: [/input-8, 1282] 
split level 34: [/input-8, 1827] 
split level 35: [/input-8, 878] 
split level 36: [/input-8, 1449] 
split level 37: [/input-8, 1828] 
split level 38: [/input-8, 596] 
split level 39: [/input-8, 979] 
split level 40: [/input-8, 439] 
split level 41: [/input-8, 801] 
split level 42: [/input-8, 1291] 
split level 43: [/input-8, 308] 
split level 44: [/input-8, 486] 
split level 45: [/input-8, 1389] 
split level 46: [/input, 157] 
split level 47: [/input-8, 1444] 
split level 48: [/input-8, 1289] 
split level 49: [/input-8, 1299] 
split level 50: [/input-8, 1467] 
split level 51: [/input-8, 851] 
split level 52: [/input-8, 1908] 
split level 53: [/input-8, 988] 
split level 54: [/input-8, 1378] 
split level 55: [/input-8, 938] 
split level 56: [/input-8, 1818] 
split level 57: [/input-8, 1910] 
split level 58: [/input, 354] 
split level 59: [/input-8, 1007] 
split level 60: [/input-8, 1461] 
split level 61: [/input-8, 1301] 
split level 62: [/input, 3940] 
split level 63: [/input-8, 473] 
split level 64: [/input-8, 1756] 
split level 65: [/input-8, 82] 
split level 66: [/input-8, 497] 
split level 67: [/input-8, 1014] 
split level 68: [/input-8, 1300] 
split level 69: [/input-8, 419] 
split level 70: [/input-8, 1425] 
split level 71: [/input, 3543] 
split level 72: [/input, 119] 
split level 73: [/input-8, 418] 
split level 74: [/input, 3477] 
split level 75: [/input, 3945] 
split level 76: [/input, 1753] 
split level 77: [/input, 3413] 
split level 78: [/input, 3938] 
split level 79: [/input, 1431] 
split level 80: [/input, 1368] 
split level 81: [/input-8, 998] 
split level 82: [/input, 2151] 
split level 83: [/input, 679] 
split level 84: [/input-8, 407] 
split level 85: [/input, 1195] 
split level 86: [/input-8, 1820] 
split level 87: [/input-8, 425] 
split level 88: [/input, 173] 
split level 89: [/input-8, 1302] 
split level 90: [/input-8, 1450] 
split level 91: [/input, 2281] 
split level 92: [/input-8, 526] 
split level 93: [/input, 2135] 
split level 94: [/input-8, 2022] 
split level 95: [/input-8, 962] 
split level 96: [/input-8, 995] 
split level 97: [/input-8, 2039] 
split level 98: [/input, 3561] 
split level 99: [/input, 3957] 
split level 100: [/input, 408] 
split level 101: [/input-8, 120] 
split level 102: [/input-8, 1893] 
split level 103: [/input, 99] 
split level 104: [/input, 3975] 
split level 105: [/input, 3527] 
split level 106: [/input-8, 993] 
split level 107: [/input-8, 1258] 
split level 108: [/input, 98] 
split level 109: [/input, 2394] 
split level 110: [/input-8, 104] 
split level 111: [/input-8, 504] 
split level 112: [/input, 1432] 
split level 113: [/input, 3787] 
split level 114: [/input-8, 466] 
split level 115: [/input-8, 1398] 
split level 116: [/input, 137] 
split level 117: [/input, 1510] 
split level 118: [/input-8, 399] 
split level 119: [/input-8, 1437] 
split level 120: [/input-8, 592] 
split level 121: [/input, 3925] 
split level 122: [/input, 1526] 
split level 123: [/input, 2393] 
split level 124: [/input-8, 1293] 
split level 125: [/input, 2391] 
split level 126: [/input, 1847] 
split level 127: [/input, 3786] 
split level 128: [/input-8, 1925] 
split level 129: [/input-8, 521] 
split level 130: [/input-8, 2015] 
split level 131: [/input, 1848] 
split level 132: [/input, 2183] 
split level 133: [/input-8, 1441] 
split level 134: [/input, 1382] 
split level 135: [/input-8, 1433] 
split level 136: [/input, 2010] 
split level 137: [/input, 2009] 
split level 138: [/input, 2167] 
split level 139: [/input-8, 1277] 
split level 140: [/input-8, 510] 
split level 141: [/input-8, 507] 
split level 142: [/input, 3021] 
split level 143: [/input, 4011] 
split level 144: [/input, 1865] 
split level 145: [/input, 3513] 
split level 146: [/input-8, 1137] 
split level 147: [/input, 1726] 
split level 148: [/input-8, 305] 
split level 149: [/input, 1864] 
split level 150: [/input, 3475] 
split level 151: [/input, 2013] 
split level 152: [/input, 1850] 
split level 153: [/input, 2363] 
split level 154: [/input-8, 1799] 
split level 155: [/input, 1907] 
split level 156: [/input, 2997] 
split level 157: [/input, 1802] 
split level 158: [/input, 1863] 
split level 159: [/input, 1121] 
split level 160: [/input-8, 532] 
split level 161: [/input, 2028] 
split level 162: [/input, 1478] 
split level 163: [/input-8, 513] 
split level 164: [/input, 1995] 
split level 165: [/input, 3953] 
split level 166: [/input-8, 1027] 
split level 167: [/input, 2266] 
split level 168: [/input, 3921] 
split level 169: [/input, 1845] 
split level 170: [/input, 1934] 
split level 171: [/input, 1917] 
split level 172: [/input, 3132] 
split level 173: [/input, 3006] 
split level 174: [/input, 1604] 
split level 175: [/input, 1829] 
split level 176: [/input, 1882] 
split level 177: [/input-8, 1405] 
split level 178: [/input, 1957] 
split level 179: [/input, 1884] 
split level 180: [/input, 111] 
split level 181: [/input, 1827] 
split level 182: [/input-8, 1307] 
split level 183: [/input, 3159] 
split level 184: [/input, 378] 
split level 185: [/input, 1552] 
split level 186: [/input, 1862] 
split level 187: [/input, 1994] 
split level 188: [/input, 1977] 
split level 189: [/input, 1587] 
split level 190: [/input, 1866] 
split level 191: [/input, 3709] 
split level 192: [/input, 1900] 
split level 193: [/input-8, 127] 
split level 194: [/input-8, 698] 
split level 195: [/input, 1857] 
split level 196: [/input-8, 65] 
split level 197: [/input, 2051] 
split level 198: [/input, 1852] 
split level 199: [/input, 2179] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3516082763671875
10 lb beta sum: 0.0, worst -0.3516120910644531
Time: prepare 0.0136    bound 0.0969    transfer 0.0015    finalize 0.0026    func 0.1172    
Accumulated time: func 0.1695    prepare 0.0236    bound 0.1486    transfer 0.0016    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.19675648) min lb tensor(-0.35160828)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010469436645507812 
BICCOS Cumulative time: 0.010469436645507812
Preprocessing time: 0.010107040405273438 Inference time: 8.20159912109375e-05 Add cuts time: 6.67572021484375e-05 Cut analysis time: 0.000213623046875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.33823 (1), -0.33715 (1), -0.33635 (1), -0.33631 (1), -0.33497 (1), -0.33488 (1), -0.33475 (1), -0.33452 (1), -0.33412 (1), -0.33336 (1), -0.33330 (1), -0.33300 (1), -0.33253 (1), -0.33237 (1), -0.33209 (1), -0.33160 (1), -0.33035 (1), -0.32820 (1), -0.32744 (1), -0.32738 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5079    set_bounds 0.0114    solve 0.1173    add 0.1367    
Accumulated time: pickout 0.0003    decision 0.5079    set_bounds 0.0114    solve 0.1173    add 0.1367    
Current (lb-rhs): -0.33823060989379883
50 domains visited
Cumulative time: 0.8676409721374512

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] 
split level 1: [/input-12, 45] [/input-12, 45] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 2: [/input-12, 46] [/input-12, 46] [/input-12, 45] [/input-12, 46] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 3: [/input-12, 37] [/input-12, 37] [/input-12, 46] [/input-12, 37] [/input-12, 37] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.31209230422973633
10 lb beta sum: 0.19730766117572784, worst -0.3110325336456299
Time: prepare 0.0086    bound 0.1149    transfer 0.0013    finalize 0.0024    func 0.1298    
Accumulated time: func 0.2993    prepare 0.0324    bound 0.2636    transfer 0.0030    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.04131973) min lb tensor(-0.31071353)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.012863397598266602 
BICCOS Cumulative time: 0.023332834243774414
Preprocessing time: 0.011916875839233398 Inference time: 0.00013971328735351562 Add cuts time: 7.295608520507812e-05 Cut analysis time: 0.0007338523864746094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10087 (2), -0.10067 (2), -0.09642 (2), -0.09587 (2), -0.09548 (2), -0.09443 (2), -0.09401 (2), -0.09333 (2), -0.09282 (2), -0.09238 (2), -0.09181 (2), -0.09103 (2), -0.09060 (2), -0.08926 (2), -0.08910 (2), -0.08712 (2), -0.08649 (2), -0.08588 (2), -0.08549 (2), -0.08474 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0195    set_bounds 0.0122    solve 0.1299    add 0.2096    
Accumulated time: pickout 0.0014    decision 0.5273    set_bounds 0.0236    solve 0.2472    add 0.3463    
Current (lb-rhs): -0.10086727142333984
100 domains visited
Cumulative time: 1.260265588760376

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 45] [/input-12, 46] [/input-12, 46] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 2: [/input-12, 46] [/input-12, 26] [/input-12, 26] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 26] 
split level 3: [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07437515258789062
10 lb beta sum: 0.34651732444763184, worst -0.10823667049407959
Time: prepare 0.0075    bound 0.1170    transfer 0.0016    finalize 0.0022    func 0.1309    
Accumulated time: func 0.4302    prepare 0.0401    bound 0.3806    transfer 0.0046    finalize 0.0073    
all_split False
======================Cut inference begins======================
max lb tensor(0.12435746) min lb tensor(-0.06651616)
Number of Verified Splits: 163 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 14
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.023169279098510742 
BICCOS Cumulative time: 0.046502113342285156
Preprocessing time: 0.011742591857910156 Inference time: 0.007064104080200195 Add cuts time: 0.0038199424743652344 Cut analysis time: 0.0005426406860351562
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01719 (3), -0.01693 (3), -0.01683 (3), -0.01673 (3), -0.01668 (3), -0.01633 (3), -0.01573 (3), -0.01454 (3), -0.01393 (3), -0.01387 (3), -0.01358 (3), -0.01354 (3), -0.01352 (3), -0.01336 (3), -0.01320 (3), -0.01291 (3), -0.01257 (3), -0.01256 (3), -0.01248 (3), -0.01243 (3), 
Length of domains: 50
Time: pickout 0.0084    decision 0.0195    set_bounds 0.0160    solve 0.1310    add 0.2234    
Accumulated time: pickout 0.0098    decision 0.5468    set_bounds 0.0396    solve 0.3781    add 0.5696    
Current (lb-rhs): -0.017193317413330078
150 domains visited
Cumulative time: 1.6886918544769287

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 51] [/input-12, 51] [/input-12, 11] [/input-12, 51] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 46] [/input-12, 45] [/input-12, 45] 
split level 2: [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 46] [/input-12, 26] [/input-12, 26] [/input-12, 46] 
split level 3: [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 26] [/input-12, 37] [/input-12, 37] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.027193665504455566
10 lb beta sum: 1.7352899312973022, worst -0.08835995197296143
Time: prepare 0.0069    bound 0.1311    transfer 0.0007    finalize 0.0020    func 0.1434    
Accumulated time: func 0.5736    prepare 0.0473    bound 0.5117    transfer 0.0053    finalize 0.0093    
all_split False
======================Cut inference begins======================
max lb tensor(0.35901773) min lb tensor(-0.00745595)
Number of Verified Splits: 394 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.03955245018005371 
BICCOS Cumulative time: 0.08605456352233887
Preprocessing time: 0.01162266731262207 Inference time: 0.017731666564941406 Add cuts time: 0.00986790657043457 Cut analysis time: 0.00033020973205566406
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0078    decision 0.0194    set_bounds 0.0159    solve 0.1435    add 0.0225    
Accumulated time: pickout 0.0176    decision 0.5663    set_bounds 0.0555    solve 0.5216    add 0.5921    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 11]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.82193281e+29, 1.81833670e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 11]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.82193281e+29, 2.68197525e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 45, 26, 11]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([1.82193281e+29, 4.24886197e-02, 6.31905049e-02, 6.54132813e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 45, 26, 11]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.82193281e+29, 4.24886197e-02, 6.31905049e-02, 3.81675214e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 45, 26, 11]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.82193281e+29, 4.24886197e-02, 5.91843575e-02, 6.37386292e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 45, 26, 11]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.82193281e+29, 4.24886197e-02, 5.91843575e-02, 3.76280993e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 45, 11]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.82193281e+29, 8.52187127e-02, 8.89881104e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([51, 45, 11]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([1.82193281e+29, 8.52187127e-02, 3.09939850e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2871675491333008
10 lb beta sum: 0.4049459397792816, worst -0.28638696670532227
Time: prepare 0.0004    bound 0.1249    transfer 0.0001    finalize 0.0002    func 0.1257    
Accumulated time: func 0.6992    prepare 0.0477    bound 0.6366    transfer 0.0054    finalize 0.0095    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-12, 45] 
split level 1: [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 26] [/input-12, 26] 
split level 3: [/input-12, 37] [/input-12, 37] 
split level 4: [/input-8, 101] [/input-8, 101] 
split level 5: [/input-12, 33] [/input-12, 33] 
split level 6: [/input-8, 859] [/input-8, 100] 
cut re-enabled after branching node selection
0 lb beta sum: 0.26958614587783813, worst -0.1382303237915039
10 lb beta sum: 0.26958614587783813, worst -0.13773703575134277
Time: prepare 0.0109    bound 0.1284    transfer 0.0007    finalize 0.0013    func 0.1430    
Accumulated time: func 0.8422    prepare 0.0590    bound 0.7650    transfer 0.0061    finalize 0.0108    
all_split False
======================Cut inference begins======================
max lb tensor(0.09360066) min lb tensor(-0.13751173)
Number of Verified Splits: 132 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.2998906075954437, worst -0.14200076460838318
10 lb beta sum: 0.2998906075954437, worst -0.06607064604759216
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 4
#cuts 4-6: 7
#cuts 7-9: 24
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.3783893585205078 
BICCOS Cumulative time: 0.4644439220428467
Preprocessing time: 0.007252216339111328 Inference time: 0.3638420104980469 Add cuts time: 0.005382537841796875 Cut analysis time: 0.0019125938415527344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13751 (7), -0.13348 (7), -0.12868 (7), -0.12706 (7), -0.12462 (7), -0.12373 (7), -0.12079 (7), -0.12073 (7), -0.11761 (7), -0.11636 (7), -0.11150 (7), -0.10982 (7), -0.10619 (7), -0.10553 (7), -0.10545 (7), -0.10203 (7), -0.10143 (7), -0.09971 (7), -0.09961 (7), -0.09841 (7), 
Length of domains: 124
Time: pickout 0.0005    decision 0.0194    set_bounds 0.0228    solve 0.1430    add 0.0026    
Accumulated time: pickout 0.0181    decision 0.5856    set_bounds 0.0783    solve 0.6647    add 0.5948    
Current (lb-rhs): -0.1375117301940918
274 domains visited
Cumulative time: 2.683112859725952

BaB round 2
batch: 124
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 106] [/input-8, 613] [/input-8, 106] [/input-8, 106] [/input-8, 614] [/input-8, 613] [/input-8, 859] [/input-8, 613] [/input-8, 614] [/input-8, 604] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13276410102844238
10 lb beta sum: 0.18776050209999084, worst -0.13209915161132812
Time: prepare 0.0050    bound 0.1361    transfer 0.0006    finalize 0.0013    func 0.1447    
Accumulated time: func 0.9869    prepare 0.0642    bound 0.9011    transfer 0.0067    finalize 0.0121    
all_split False
======================Cut inference begins======================
max lb tensor(0.01643610) min lb tensor(-0.13194013)
Number of Verified Splits: 21 of 248
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13643312454223633
10 lb beta sum: 0.25663477182388306, worst -0.08968043327331543
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 39.
#cuts 1-3: 4
#cuts 4-6: 7
#cuts 7-9: 25
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 0.1519181728363037 
BICCOS Cumulative time: 0.6163620948791504
Preprocessing time: 0.007662296295166016 Inference time: 0.14077496528625488 Add cuts time: 0.0013680458068847656 Cut analysis time: 0.002112865447998047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13194 (8), -0.12796 (8), -0.12298 (8), -0.12114 (8), -0.12043 (8), -0.11893 (8), -0.11734 (8), -0.11706 (8), -0.11537 (8), -0.11410 (8), -0.11390 (8), -0.11298 (8), -0.11105 (8), -0.11089 (8), -0.10990 (8), -0.10941 (8), -0.10770 (8), -0.10641 (8), -0.10519 (8), -0.10469 (8), 
Length of domains: 227
Time: pickout 0.0025    decision 0.0179    set_bounds 0.0109    solve 0.1448    add 0.0049    
Accumulated time: pickout 0.0206    decision 0.6035    set_bounds 0.0891    solve 0.8094    add 0.5997    
Current (lb-rhs): -0.13194012641906738
501 domains visited
Cumulative time: 3.0165011882781982

BaB round 3
batch: 227
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 614] [/input-8, 106] [/input-8, 614] [/input-8, 613] [/input-8, 820] [/input-8, 614] [/input-8, 859] [/input-8, 613] [/input-8, 614] [/input-8, 614] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12386775016784668
10 lb beta sum: 0.18383508920669556, worst -0.12325382232666016
Time: prepare 0.0088    bound 0.1366    transfer 0.0027    finalize 0.0020    func 0.1531    
Accumulated time: func 1.1399    prepare 0.0732    bound 1.0376    transfer 0.0094    finalize 0.0141    
all_split False
======================Cut inference begins======================
max lb tensor(0.01288795) min lb tensor(-0.12314034)
Number of Verified Splits: 41 of 454
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 4
#cuts 4-6: 14
#cuts 7-9: 23
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.023107290267944336 
BICCOS Cumulative time: 0.6394693851470947
Preprocessing time: 0.013273000717163086 Inference time: 0.003983974456787109 Add cuts time: 0.0036468505859375 Cut analysis time: 0.0022034645080566406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12314 (9), -0.12243 (9), -0.11961 (9), -0.11798 (9), -0.11658 (9), -0.11300 (9), -0.11260 (9), -0.11154 (9), -0.11080 (9), -0.11015 (9), -0.10865 (9), -0.10833 (9), -0.10815 (9), -0.10777 (9), -0.10765 (9), -0.10745 (9), -0.10701 (9), -0.10568 (9), -0.10523 (9), -0.10496 (9), 
Length of domains: 413
Time: pickout 0.0029    decision 0.0225    set_bounds 0.0199    solve 0.1532    add 0.0065    
Accumulated time: pickout 0.0234    decision 0.6261    set_bounds 0.1091    solve 0.9626    add 0.6061    
Current (lb-rhs): -0.12314033508300781
914 domains visited
Cumulative time: 3.245331048965454

BaB round 4
batch: 413
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 613] [/input-8, 613] [/input-8, 102] [/input-8, 614] [/input-8, 102] [/input-8, 820] [/input-8, 102] [/input-8, 613] [/input-8, 613] [/input-8, 859] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11777067184448242
10 lb beta sum: 0.18744589388370514, worst -0.11735129356384277
Time: prepare 0.0158    bound 0.1366    transfer 0.0015    finalize 0.0032    func 0.1632    
Accumulated time: func 1.3031    prepare 0.0892    bound 1.1743    transfer 0.0109    finalize 0.0173    
all_split False
======================Cut inference begins======================
max lb tensor(0.05035834) min lb tensor(-0.11733413)
Number of Verified Splits: 109 of 826
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 5
#cuts 4-6: 15
#cuts 7-9: 26
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.044518470764160156 
BICCOS Cumulative time: 0.6839878559112549
Preprocessing time: 0.023745298385620117 Inference time: 0.014024019241333008 Add cuts time: 0.004361629486083984 Cut analysis time: 0.002387523651123047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11733 (10), -0.11665 (10), -0.11359 (10), -0.11340 (10), -0.11202 (10), -0.11198 (10), -0.11022 (10), -0.10808 (10), -0.10795 (10), -0.10741 (10), -0.10720 (10), -0.10587 (10), -0.10497 (10), -0.10379 (10), -0.10376 (10), -0.10343 (10), -0.10256 (10), -0.10224 (10), -0.10223 (10), -0.10176 (10), 
Length of domains: 717
Time: pickout 0.0049    decision 0.0340    set_bounds 0.0350    solve 0.1634    add 0.0083    
Accumulated time: pickout 0.0284    decision 0.6600    set_bounds 0.1441    solve 1.1260    add 0.6144    
Current (lb-rhs): -0.11733412742614746
1631 domains visited
Cumulative time: 3.536846399307251

BaB round 5
batch: 717
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 102] [/input-8, 102] [/input-8, 859] [/input-8, 859] [/input-8, 613] [/input-8, 604] [/input-8, 820] [/input-8, 859] [/input-8, 102] [/input-8, 859] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11258554458618164
10 lb beta sum: 0.18941079080104828, worst -0.11204218864440918
Time: prepare 0.0272    bound 0.1533    transfer 0.0062    finalize 0.0065    func 0.2026    
Accumulated time: func 1.5057    prepare 0.1167    bound 1.3276    transfer 0.0171    finalize 0.0238    
all_split False
======================Cut inference begins======================
max lb tensor(0.29664111) min lb tensor(-0.11199665)
Number of Verified Splits: 303 of 1434
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 15
#cuts 4-6: 2
#cuts 7-9: 2
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.08445858955383301 
BICCOS Cumulative time: 0.7684464454650879
Preprocessing time: 0.04354596138000488 Inference time: 0.0338590145111084 Add cuts time: 0.006264448165893555 Cut analysis time: 0.0007891654968261719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.11200 (11), -0.11127 (11), -0.10911 (11), -0.10839 (11), -0.10822 (11), -0.10790 (11), -0.10649 (11), -0.10629 (11), -0.10534 (11), -0.10490 (11), -0.10470 (11), -0.10351 (11), -0.10313 (11), -0.10251 (11), -0.10248 (11), -0.10211 (11), -0.10171 (11), -0.10024 (11), -0.09963 (11), -0.09946 (11), 
Length of domains: 1131
Time: pickout 0.0113    decision 0.0507    set_bounds 0.0611    solve 0.2029    add 0.0136    
Accumulated time: pickout 0.0397    decision 0.7108    set_bounds 0.2052    solve 1.3289    add 0.6281    
Current (lb-rhs): -0.11199665069580078
2762 domains visited
Cumulative time: 3.9641313552856445

BaB round 6
batch: 1131
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 820] [/input-8, 820] [/input-8, 821] [/input-8, 820] [/input-8, 820] [/input-8, 859] [/input-8, 820] [/input-8, 820] [/input-8, 613] [/input-8, 820] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1063380241394043
10 lb beta sum: 1.2637720108032227, worst -0.10156619548797607
Time: prepare 0.2015    bound 0.1852    transfer 0.0047    finalize 0.0099    func 0.4159    
Accumulated time: func 1.9216    prepare 0.3184    bound 1.5128    transfer 0.0218    finalize 0.0337    
all_split False
======================Cut inference begins======================
max lb tensor(0.68523633) min lb tensor(-0.10149208)
Number of Verified Splits: 1950 of 2262
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.3085973262786865 
BICCOS Cumulative time: 1.0770437717437744
Preprocessing time: 0.07021212577819824 Inference time: 0.21357989311218262 Add cuts time: 0.02449941635131836 Cut analysis time: 0.0003058910369873047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10149 (12), -0.09830 (12), -0.09797 (12), -0.09656 (12), -0.09476 (12), -0.09444 (12), -0.09353 (12), -0.09301 (12), -0.09261 (12), -0.09091 (12), -0.09058 (12), -0.08997 (12), -0.08908 (12), -0.08876 (12), -0.08813 (12), -0.08707 (12), -0.08616 (12), -0.08524 (12), -0.08459 (12), -0.08456 (12), 
Length of domains: 312
Time: pickout 0.0137    decision 0.0710    set_bounds 0.0963    solve 0.4170    add 0.0094    
Accumulated time: pickout 0.0534    decision 0.7818    set_bounds 0.3015    solve 1.7459    add 0.6374    
Current (lb-rhs): -0.10149207711219788
3074 domains visited
Cumulative time: 4.895876884460449

BaB round 7
batch: 312
splitting decisions: 
split level 0: [/input-8, 821] [/input-8, 604] [/input-8, 106] [/input-8, 821] [/input-8, 821] [/input-8, 821] [/input-8, 604] [/input-8, 859] [/input-8, 821] [/input-8, 821] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10453104972839355

all verified at 5th iter
Time: prepare 0.0122    bound 0.0372    transfer 0.0027    finalize 0.0026    func 0.0586    
Accumulated time: func 1.9802    prepare 0.3308    bound 1.5500    transfer 0.0245    finalize 0.0363    
all_split False
======================Cut inference begins======================
max lb tensor(0.17633323) min lb tensor(0.00207782)
Number of Verified Splits: 624 of 624
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01865410804748535 
BICCOS Cumulative time: 1.0956978797912598
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0051    decision 0.0284    set_bounds 0.0267    solve 0.0587    add 0.0010    
Accumulated time: pickout 0.0585    decision 0.8102    set_bounds 0.3282    solve 1.8046    add 0.6384    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
3074 domains visited
Cumulative time: 5.03775429725647


Properties batch 5, size 1
Remaining timeout: 193.3750925064087
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 193.3750035762787
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 193.37497663497925
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 193.37457966804504
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 6.6255 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 71, vnnlib ID: 71 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.23181081, -6.13865471, -5.08255959, -5.81894684, -5.10377789,
         -6.43214750, -5.88667679, -5.84751606, -6.03846073, -6.48124504]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [600]; unstable size 600; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 134, 1, 600] with unstable size 133 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 600] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 600] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [133]; unstable size 133; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 133] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 133] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.68216133, 2.01670456, 2.51456118, 1.81788015, 2.98190999, 2.39753675,
         2.20995522, 2.77434278, 3.16959429]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.1029 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 72, vnnlib ID: 72 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.04805279, -11.81328869,  -6.59518147,  -6.36475563,  -7.03116512,
          -6.60425329,  -7.20965433,  -8.31397438,  -8.97400188, -10.04430199]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [644]; unstable size 644; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 218, 1, 644] with unstable size 217 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 644] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 644] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [217]; unstable size 217; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 217] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 217] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.59573573,  3.84289074, -0.66203922, -0.35017097, -0.20632467,
          0.11054745,  0.49438119,  0.95489424,  1.85776711]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.04805279, -11.81328869,  -6.59518147,  -6.36475563,  -7.03116512,
          -6.60425329,  -7.20965433,  -8.31397438,  -8.97400188, -10.04430199]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.45969152, -12.50387001,  -6.75212955,  -7.02717876,  -7.47408676,
           -7.30156040,  -7.84784174,  -8.79535866,  -9.60956287, -10.84120369],
         [ -7.45969152, -12.50387001,  -6.75212955,  -7.02717876,  -7.47408676,
           -7.30156040,  -7.84784174,  -8.79535866,  -9.60956287, -10.84120369]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.43251276, -0.27504921,  0.44690800,  0.27438164]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0063 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0785 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 73, vnnlib ID: 73 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.91584206, -11.23733044,  -4.95584011,  -5.17609406,  -4.67090321,
          -5.68216658,  -2.94505668,  -7.65497255, -10.49558067, -10.30911922]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [530]; unstable size 530; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 286, 1, 530] with unstable size 285 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 530] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 530] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [285]; unstable size 285; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 285] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 285] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.01592445, 5.78018904, 0.67337418, 0.94682002, 0.40892148, 1.18366730,
         2.78911257, 4.93772984, 4.91414595]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0673 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 74, vnnlib ID: 74 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.75821781, -13.33421040,  -9.89368343,  -9.90017796,  -8.64980602,
          -9.78042221,  -9.99710751,  -4.75752258, -13.64687443, -11.43529987]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [557]; unstable size 557; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 217, 1, 557] with unstable size 216 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 557] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 557] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [216]; unstable size 216; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 216] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 216] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.65111113, 6.98895836, 3.93457890, 3.96870184, 2.90565825, 3.92689180,
         3.80601025, 7.22786188, 5.19847059]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0693 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 75, vnnlib ID: 75 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.29954243, -11.45261860, -13.34986973, -13.67515564, -13.40554333,
         -14.42231846, -13.27403164, -13.71299839, -10.82265949, -11.58751392]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [682]; unstable size 682; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 682] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 682] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 682] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 184] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.10945821,  1.98779738,  2.28032899,  1.90550256,  2.75677061,
          1.69960511,  1.94380927, -0.60779363, -0.09704113]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.29954243, -11.45261860, -13.34986973, -13.67515564, -13.40554333,
         -14.42231846, -13.27403164, -13.71299839, -10.82265949, -11.58751392]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.56808662, -11.42974663, -13.45270157, -13.65275669, -13.48646450,
          -14.33638859, -13.28952789, -13.75271511, -10.36225224, -11.49094582],
         [-10.56808662, -11.42974663, -13.45270157, -13.65275669, -13.48646450,
          -14.33638859, -13.28952789, -13.75271511, -10.36225224, -11.49094582]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.86166000, -0.20583439,  0.92285919]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0060 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0693 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 76, vnnlib ID: 76 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.85307121, -8.24333668, -2.96728778, -1.66786790, -3.85206652,
         -1.00410879, -4.09244967, -4.12650394, -7.75833988, -6.65997744]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [554]; unstable size 554; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 227, 1, 554] with unstable size 226 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 554] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 554] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [226]; unstable size 226; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 226] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 226] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.37778544, 5.08529758, 0.43795538, 0.25316501, 1.50299835, 1.94422317,
         2.22069502, 4.52716494, 3.75112414]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0800 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 77, vnnlib ID: 77 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.27097034, -11.59263897, -13.77681637, -13.17456245, -13.49902725,
         -13.92919827, -14.42542553, -14.19969749,  -9.72965145,  -9.57371902]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [484]; unstable size 484; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 175, 1, 484] with unstable size 174 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 484] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 484] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [174]; unstable size 174; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 174] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 174] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.28471613,  1.18307221,  2.52050591,  2.22602749,  2.26000166,
          2.91944122,  3.25191498,  3.06435537, -1.13768911]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.27097034, -11.59263897, -13.77681637, -13.17456245, -13.49902725,
         -13.92919827, -14.42542553, -14.19969749,  -9.72965145,  -9.57371902]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.00729084, -11.61149406, -13.44780445, -12.92614937, -13.19767094,
          -13.75501728, -14.04838467, -14.12834930,  -9.19971180,  -9.85693741]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.65722561]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0057 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0699 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 78, vnnlib ID: 78 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.73918152, -8.53411102, -3.85345960, -3.82583189, -3.55089569,
         -4.12887335, -4.16478586, -5.91378498, -8.29353142, -8.77650642]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [613]; unstable size 613; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 281, 1, 613] with unstable size 280 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 613] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 613] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [280]; unstable size 280; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 280] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 280] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.07348061,  1.60172319, -1.32437325, -1.43540144, -0.22906235,
         -0.94617897,  0.48511827,  2.09677744,  2.21030140]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.73918152, -8.53411102, -3.85345960, -3.82583189, -3.55089569,
         -4.12887335, -4.16478586, -5.91378498, -8.29353142, -8.77650642]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.73918104, -8.53411007, -3.85345936, -3.82583237, -3.55089521,
          -4.12887335, -4.16478539, -5.91378498, -8.29353142, -8.77650642],
         [-5.73918104, -8.53411007, -3.85345936, -3.82583237, -3.55089521,
          -4.12887335, -4.16478539, -5.91378498, -8.29353142, -8.77650642]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.91334867,  0.02762699, -0.27493715,  0.30304098,  0.33895302]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]],


         [[[-0.00476181,  0.01111121,  0.02698422,  ..., -0.51269841,
            -0.56031746, -0.62380952],
           [ 0.04285724, -0.00476181,  0.05873025,  ..., -0.59206349,
            -0.63968253, -0.71904761],
           [ 0.01111121, -0.05238085,  0.09047628,  ..., -0.71904761,
            -0.73492062, -0.71904761],
           ...,
           [ 0.02698422, -0.00476181,  0.10634929,  ..., -1.02063489,
            -1.08412695, -1.51269829],
           [-0.02063482, -0.00476181,  0.05873025,  ..., -0.95714283,
            -1.11587298, -1.48095226],
           [ 0.01111121,  0.02698422,  0.05873025,  ..., -0.94126981,
            -1.19523799, -1.48095226]],

          [[-0.90177131, -0.96618354, -0.96618354,  ..., -1.33655393,
            -1.33655393, -1.36875999],
           [-0.91787434, -0.98228657, -0.86956519,  ..., -1.35265696,
            -1.38486302, -1.43317223],
           [-1.01449275, -1.04669881, -0.80515295,  ..., -1.44927526,
            -1.44927526, -1.44927526],
           ...,
           [-0.99838966, -0.96618354, -0.96618354,  ..., -1.38486302,
            -1.41706920, -1.78743970],
           [-1.03059578, -0.99838966, -1.04669881,  ..., -1.32045078,
            -1.44927526, -1.75523353],
           [-0.99838966, -1.01449275, -1.07890499,  ..., -1.27214170,
            -1.49758446, -1.73913050]],

          [[-1.00299859, -1.03298354, -1.03298354,  ..., -1.27286363,
            -1.27286363, -1.30284870],
           [-1.00299859, -1.03298354, -0.91304344,  ..., -1.28785622,
            -1.31784117, -1.33283365],
           [-1.09295356, -1.07796109, -0.82308841,  ..., -1.39280367,
            -1.37781119, -1.31784117],
           ...,
           [-1.06296861, -1.12293863, -1.09295356,  ..., -1.12293863,
            -1.13793111, -1.43778121],
           [-1.12293863, -1.13793111, -1.12293863,  ..., -1.04797614,
            -1.16791618, -1.43778121],
           [-1.09295356, -1.10794616, -1.09295356,  ..., -1.00299859,
            -1.21289361, -1.46776617]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0808 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 79, vnnlib ID: 79 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.05248165, -11.65894604, -12.25777149, -10.95008183,  -9.94209957,
         -10.12332249, -11.05361462,  -6.32633877, -14.71703625, -10.15004635]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [432]; unstable size 432; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 201, 1, 432] with unstable size 200 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 432] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 432] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [200]; unstable size 200; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 200] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 200] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.82437611, 2.96819687, 4.11948061, 3.11231136, 2.39884806, 2.32051992,
         2.91186953, 6.36293125, 1.88987482]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0649 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 80, vnnlib ID: 80 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.44930172, -15.25463963,  -9.82252502, -12.00500107,  -9.42480278,
         -12.67968750, -10.39871120, -11.85678768, -11.46559906, -13.09015942]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [742]; unstable size 742; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 301, 1, 742] with unstable size 300 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 742] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 742] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [300]; unstable size 300; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 300] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 300] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.98650265, -1.78932357,  0.26673242, -2.52717829,  0.69541454,
         -1.41547871, -0.58254170, -0.39011747,  1.13849354]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.44930172, -15.25463963,  -9.82252502, -12.00500107,  -9.42480278,
         -12.67968750, -10.39871120, -11.85678768, -11.46559906, -13.09015942]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.44930172, -15.25463867,  -9.82252502, -12.00500011,  -9.42480087,
          -12.67968464, -10.39871025, -11.85678864, -11.46559906, -13.09015942],
         [-10.44930172, -15.25463867,  -9.82252502, -12.00500011,  -9.42480087,
          -12.67968464, -10.39871025, -11.85678864, -11.46559906, -13.09015942]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.62677670, -1.02450085, -0.05059147,  1.40748692,  1.01629734]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]],


         [[[-0.13174593, -0.13174593, -0.11587292,  ...,  0.18571436,
             0.20158738,  0.21746039],
           [-0.09999990, -0.09999990, -0.08412688,  ...,  0.20158738,
             0.21746039,  0.23333341],
           [-0.06825387, -0.08412688, -0.06825387,  ...,  0.12222230,
             0.13809532,  0.10634929],
           ...,
           [-0.78253967, -0.78253967, -0.78253967,  ..., -0.43333322,
            -0.43333322, -0.43333322],
           [-0.84603173, -0.83015871, -0.81428570,  ..., -0.44920623,
            -0.41746020, -0.41746020],
           [-0.78253967, -0.78253967, -0.75079364,  ..., -0.49682540,
            -0.48095238, -0.48095238]],

          [[ 0.24154601,  0.24154601,  0.25764906,  ...,  0.62801939,
             0.64412248,  0.64412248],
           [ 0.24154601,  0.24154601,  0.25764906,  ...,  0.61191636,
             0.62801939,  0.61191636],
           [ 0.25764906,  0.24154601,  0.25764906,  ...,  0.40257660,
             0.41867965,  0.37037048],
           ...,
           [-0.74074072, -0.74074072, -0.74074072,  ..., -0.37037024,
            -0.35426718, -0.37037024],
           [-0.82125598, -0.80515295, -0.77294683,  ..., -0.40257636,
            -0.37037024, -0.37037024],
           [-0.77294683, -0.78904986, -0.72463763,  ..., -0.46698871,
            -0.45088565, -0.45088565]],

          [[ 0.69115460,  0.69115460,  0.69115460,  ...,  1.02098966,
             1.03598225,  1.03598225],
           [ 0.66116959,  0.64617711,  0.66116959,  ...,  0.97601217,
             0.97601217,  0.97601217],
           [ 0.63118458,  0.60119957,  0.63118458,  ...,  0.69115460,
             0.70614707,  0.66116959],
           ...,
           [-0.64317840, -0.64317840, -0.65817088,  ..., -0.41829082,
            -0.41829082, -0.43328333],
           [-0.70314842, -0.70314842, -0.68815589,  ..., -0.43328333,
            -0.40329832, -0.40329832],
           [-0.65817088, -0.65817088, -0.62818587,  ..., -0.44827583,
            -0.43328333, -0.44827583]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0812 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 81, vnnlib ID: 81 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.10813904, -15.89954853,  -7.31516552, -10.82333755,  -8.54076099,
         -10.33981800, -11.38731098, -12.22146320, -14.46312428, -15.25714493]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [595]; unstable size 595; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 191, 1, 595] with unstable size 190 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 595] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 595] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [190]; unstable size 190; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 190] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 190] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.01580000, 7.21389246, 2.88120985, 0.47409204, 2.25944805, 3.19084287,
         3.74374318, 5.93748617, 6.55921412]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0673 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 82, vnnlib ID: 82 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.24675894, -8.88183308, -4.39334679, -3.84514856, -4.41373539,
         -4.05639076, -4.91783571, -6.25871420, -9.17700768, -7.08661222]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [586]; unstable size 586; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 303, 1, 586] with unstable size 302 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 586] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 586] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [302]; unstable size 302; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 302] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 302] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.48434639,  2.69666767, -0.88318086, -0.67275077, -1.05266595,
         -0.60235119,  1.16763568,  2.82550168,  1.08651733]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.24675894, -8.88183308, -4.39334679, -3.84514856, -4.41373539,
         -4.05639076, -4.91783571, -6.25871420, -9.17700768, -7.08661222]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.24675846, -8.88183308, -4.39334631, -3.84514809, -4.41373491,
          -4.05638981, -4.91783571, -6.25871420, -9.17700863, -7.08661318],
         [-6.24675846, -8.88183308, -4.39334631, -3.84514809, -4.41373491,
          -4.05638981, -4.91783571, -6.25871420, -9.17700863, -7.08661318]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.33695650, -0.21124172,  0.35734510,  0.86144590]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]],


         [[[ 0.42380959,  0.39206356,  0.47142863,  ..., -0.57619047,
             0.16984135,  0.28095245],
           [ 0.29682547,  0.36031753,  0.53492069,  ..., -0.81428570,
            -0.43333322,  0.34444451],
           [ 0.20158738,  0.39206356,  0.55079371,  ..., -0.76666665,
            -0.79841268, -0.27460307],
           ...,
           [ 0.34444451,  0.50317466,  0.36031753,  ...,  0.36031753,
             0.40793657,  0.28095245],
           [ 0.48730165,  0.58253974,  0.43968260,  ...,  0.69365084,
             0.59841275,  0.50317466],
           [ 0.55079371,  0.61428577,  0.48730165,  ...,  0.80476195,
             0.67777783,  0.66190481]],

          [[ 0.48309189,  0.46698883,  0.57971025,  ..., -0.66022539,
             0.22544295,  0.37037048],
           [ 0.33816436,  0.41867965,  0.64412248,  ..., -1.01449275,
            -0.53140092,  0.35426742],
           [ 0.22544295,  0.45088577,  0.64412248,  ..., -0.95008045,
            -0.96618354, -0.32206106],
           ...,
           [ 0.66022551,  0.82125610,  0.66022551,  ...,  0.70853472,
             0.74074084,  0.59581327],
           [ 0.80515307,  0.90177143,  0.74074084,  ...,  1.06280196,
             0.96618366,  0.86956531],
           [ 0.86956531,  0.93397754,  0.78904998,  ...,  1.20772982,
             1.07890511,  1.06280196]],

          [[ 0.54122955,  0.54122955,  0.67616212,  ..., -0.64317840,
             0.31634200,  0.58620709],
           [ 0.37631202,  0.49625200,  0.69115460,  ..., -1.12293863,
            -0.52323836,  0.51124454],
           [ 0.27136448,  0.49625200,  0.67616212,  ..., -1.13793111,
            -1.04797614, -0.26836565],
           ...,
           [ 0.99100471,  1.14092970,  0.97601217,  ...,  1.05097473,
             1.11094475,  1.00599718],
           [ 1.14092970,  1.21589243,  1.06596720,  ...,  1.36581755,
             1.32084000,  1.26086998],
           [ 1.18590748,  1.24587750,  1.11094475,  ...,  1.54572761,
             1.45577252,  1.47076499]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1101 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 83, vnnlib ID: 83 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.36881924, -3.89865160, -7.93544197, -6.23400021, -6.74230671,
         -6.96568727, -8.17397594, -6.56449556, -5.37149715, -2.30208302]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [592]; unstable size 592; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 220, 1, 592] with unstable size 219 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 28, 1, 592] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 592] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [219]; unstable size 219; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 28, 1, 219] with unstable size 27 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 219] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [27]; unstable size 27; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 27] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.89441204, 0.29969525, 2.93555880, 1.68636417, 1.92623043, 2.15194607,
         3.21918011, 1.75679517, 0.56472826]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.1030 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 84, vnnlib ID: 84 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.80086327, -15.88022327,  -7.39093113,  -9.48237228,  -6.51979351,
          -9.19186211,  -7.76570368, -10.53886223, -14.64324093, -15.33413029]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [570]; unstable size 570; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 179, 1, 570] with unstable size 178 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 570] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 570] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [178]; unstable size 178; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 178] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 178] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.99768209,  7.91173935, -0.14131758,  2.21972251,  1.75214767,
          0.21274066,  3.05064726,  6.73370552,  7.60544586]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.80086327, -15.88022327,  -7.39093113,  -9.48237228,  -6.51979351,
          -9.19186211,  -7.76570368, -10.53886223, -14.64324093, -15.33413029]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.02it/s]100%|██████████| 1/1 [00:00<00:00,  9.01it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.14176750, -15.39953613,  -6.68415260,  -9.07587337,  -6.41280174,
           -8.82754326,  -7.32056284, -10.51403236, -14.15463734, -15.02766609]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.27135086]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1134 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 33.62461471557617
alpha/beta optimization time: 1.1971626281738281
initial alpha-crown bounds: tensor([[ 4.04458427,  7.94689703, -0.11414784,  2.23972225,  1.77452922,
          0.24281144,  3.07658219,  6.77713537,  7.63649988]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.1141478419303894
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.61081385612488
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.61077451705933
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.61074686050415
Verifying property 2 with 1 instances.
##### Instance 84 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.11414784]], device='cuda:0') need to verify.
Model prediction is: tensor([-11.80086327, -15.88022327,  -7.39093113,  -9.48237228,  -6.51979351,
         -9.19186211,  -7.76570368, -10.53886223, -14.64324093, -15.33413029],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.11414784]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 570
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 175
Node /15 input 0: size torch.Size([100]) unstable 11
-----------------
# of unstable neurons: 756
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011730194091796875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11414378881454468
10 lb beta sum: 0.0, worst -0.11414992809295654
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0547    transfer 0.0001    finalize 0.0001    func 0.0552    
Accumulated time: func 0.0552    prepare 0.0002    bound 0.0547    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] 
split level 1: [/input-12, 93] 
split level 2: [/input-12, 15] 
split level 3: [/input-12, 26] 
split level 4: [/input-12, 6] 
split level 5: [/input-8, 1892] 
split level 6: [/input-12, 11] 
split level 7: [/input-12, 68] 
split level 8: [/input-8, 1908] 
split level 9: [/input-8, 1919] 
split level 10: [/input-12, 9] 
split level 11: [/input-8, 1081] 
split level 12: [/input-8, 1884] 
split level 13: [/input, 2780] 
split level 14: [/input-8, 1878] 
split level 15: [/input-8, 1877] 
split level 16: [/input-8, 1917] 
split level 17: [/input-8, 1915] 
split level 18: [/input-8, 1895] 
split level 19: [/input-8, 1057] 
split level 20: [/input-8, 1893] 
split level 21: [/input-8, 1354] 
split level 22: [/input-8, 101] 
split level 23: [/input-8, 1083] 
split level 24: [/input-8, 1901] 
split level 25: [/input-8, 1918] 
split level 26: [/input-8, 1138] 
split level 27: [/input-8, 1365] 
split level 28: [/input-8, 1366] 
split level 29: [/input-8, 699] 
split level 30: [/input, 2747] 
split level 31: [/input, 1758] 
split level 32: [/input-8, 1870] 
split level 33: [/input-8, 1316] 
split level 34: [/input-8, 1074] 
split level 35: [/input-8, 1869] 
split level 36: [/input-8, 689] 
split level 37: [/input-8, 1076] 
split level 38: [/input-8, 1358] 
split level 39: [/input-8, 1369] 
split level 40: [/input-8, 1337] 
split level 41: [/input, 2520] 
split level 42: [/input-8, 94] 
split level 43: [/input, 2456] 
split level 44: [/input, 2440] 
split level 45: [/input-8, 1025] 
split level 46: [/input, 2796] 
split level 47: [/input-8, 553] 
split level 48: [/input-8, 524] 
split level 49: [/input-8, 674] 
split level 50: [/input-8, 573] 
split level 51: [/input-8, 1913] 
split level 52: [/input-8, 1516] 
split level 53: [/input-8, 642] 
split level 54: [/input-8, 532] 
split level 55: [/input, 1773] 
split level 56: [/input-8, 1150] 
split level 57: [/input, 2505] 
split level 58: [/input, 1703] 
split level 59: [/input-8, 516] 
split level 60: [/input-8, 651] 
split level 61: [/input-8, 1881] 
split level 62: [/input, 1739] 
split level 63: [/input, 2745] 
split level 64: [/input-8, 474] 
split level 65: [/input-8, 147] 
split level 66: [/input, 2491] 
split level 67: [/input-8, 1897] 
split level 68: [/input-8, 1904] 
split level 69: [/input, 2409] 
split level 70: [/input, 2414] 
split level 71: [/input, 2535] 
split level 72: [/input, 2518] 
split level 73: [/input-8, 1889] 
split level 74: [/input, 2510] 
split level 75: [/input-8, 1914] 
split level 76: [/input, 3314] 
split level 77: [/input, 2490] 
split level 78: [/input-8, 1342] 
split level 79: [/input, 2439] 
split level 80: [/input-8, 969] 
split level 81: [/input-8, 1114] 
split level 82: [/input, 2458] 
split level 83: [/input, 2812] 
split level 84: [/input-8, 1377] 
split level 85: [/input, 2489] 
split level 86: [/input-8, 122] 
split level 87: [/input, 2684] 
split level 88: [/input, 2468] 
split level 89: [/input-8, 693] 
split level 90: [/input-8, 1374] 
split level 91: [/input-8, 886] 
split level 92: [/input, 2533] 
split level 93: [/input, 1767] 
split level 94: [/input-8, 974] 
split level 95: [/input, 1656] 
split level 96: [/input, 220] 
split level 97: [/input, 2493] 
split level 98: [/input, 1752] 
split level 99: [/input, 1626] 
split level 100: [/input-8, 1880] 
split level 101: [/input-8, 1888] 
split level 102: [/input, 2445] 
split level 103: [/input-8, 1027] 
split level 104: [/input, 3576] 
split level 105: [/input, 4072] 
split level 106: [/input, 2897] 
split level 107: [/input-8, 889] 
split level 108: [/input-8, 1293] 
split level 109: [/input, 2463] 
split level 110: [/input, 1641] 
split level 111: [/input, 757] 
split level 112: [/input, 1642] 
split level 113: [/input, 3283] 
split level 114: [/input-12, 53] 
split level 115: [/input-8, 1803] 
split level 116: [/input, 1522] 
split level 117: [/input, 498] 
split level 118: [/input-8, 1468] 
split level 119: [/input, 1743] 
split level 120: [/input-8, 1424] 
split level 121: [/input, 2546] 
split level 122: [/input-8, 1106] 
split level 123: [/input-8, 1015] 
split level 124: [/input-8, 953] 
split level 125: [/input, 2993] 
split level 126: [/input-8, 1023] 
split level 127: [/input-8, 1079] 
split level 128: [/input, 2363] 
split level 129: [/input, 2444] 
split level 130: [/input, 1700] 
split level 131: [/input-8, 74] 
split level 132: [/input, 1784] 
split level 133: [/input, 2184] 
split level 134: [/input, 2881] 
split level 135: [/input, 2707] 
split level 136: [/input, 3262] 
split level 137: [/input-8, 907] 
split level 138: [/input, 4060] 
split level 139: [/input, 3538] 
split level 140: [/input-8, 1302] 
split level 141: [/input, 3293] 
split level 142: [/input, 2715] 
split level 143: [/input, 1596] 
split level 144: [/input, 1189] 
split level 145: [/input, 2930] 
split level 146: [/input, 226] 
split level 147: [/input, 2898] 
split level 148: [/input, 4027] 
split level 149: [/input, 4075] 
split level 150: [/input, 3397] 
split level 151: [/input, 2977] 
split level 152: [/input, 2475] 
split level 153: [/input, 690] 
split level 154: [/input, 2913] 
split level 155: [/input, 3297] 
split level 156: [/input, 3266] 
split level 157: [/input-8, 1448] 
split level 158: [/input, 3310] 
split level 159: [/input, 1367] 
split level 160: [/input, 292] 
split level 161: [/input-8, 1400] 
split level 162: [/input, 2464] 
split level 163: [/input, 1088] 
split level 164: [/input-8, 913] 
split level 165: [/input, 1595] 
split level 166: [/input, 1441] 
split level 167: [/input, 2553] 
split level 168: [/input, 2945] 
split level 169: [/input, 2515] 
split level 170: [/input-8, 856] 
split level 171: [/input, 2928] 
split level 172: [/input, 673] 
split level 173: [/input, 3308] 
split level 174: [/input, 2216] 
split level 175: [/input, 1682] 
split level 176: [/input-8, 1912] 
split level 177: [/input-8, 579] 
split level 178: [/input-8, 1137] 
split level 179: [/input, 2183] 
split level 180: [/input, 3232] 
split level 181: [/input, 4026] 
split level 182: [/input, 2994] 
split level 183: [/input-8, 1974] 
split level 184: [/input, 2480] 
split level 185: [/input, 3319] 
split level 186: [/input, 22] 
split level 187: [/input, 2843] 
split level 188: [/input, 1489] 
split level 189: [/input, 3216] 
split level 190: [/input, 2192] 
split level 191: [/input, 3506] 
split level 192: [/input, 3076] 
split level 193: [/input, 1648] 
split level 194: [/input, 2961] 
split level 195: [/input, 2453] 
split level 196: [/input, 2400] 
split level 197: [/input, 2946] 
split level 198: [/input, 2975] 
split level 199: [/input, 2944] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11412632465362549
10 lb beta sum: 0.0, worst -0.11412906646728516
Time: prepare 0.0143    bound 0.1014    transfer 0.0040    finalize 0.0032    func 0.1257    
Accumulated time: func 0.1809    prepare 0.0250    bound 0.1561    transfer 0.0041    finalize 0.0034    
all_split False
======================Cut inference begins======================
max lb tensor(0.25377679) min lb tensor(-0.11412358)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.011773347854614258 
BICCOS Cumulative time: 0.011773347854614258
Preprocessing time: 0.010483980178833008 Inference time: 0.0003020763397216797 Add cuts time: 0.00019431114196777344 Cut analysis time: 0.0007929801940917969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10323 (1), -0.10322 (1), -0.10258 (1), -0.10253 (1), -0.10239 (1), -0.10214 (1), -0.10202 (1), -0.10190 (1), -0.10184 (1), -0.10125 (1), -0.10074 (1), -0.09905 (1), -0.09812 (1), -0.09754 (1), -0.09714 (1), -0.09656 (1), -0.09614 (1), -0.09574 (1), -0.09571 (1), -0.09492 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5267    set_bounds 0.0096    solve 0.1258    add 0.1280    
Accumulated time: pickout 0.0003    decision 0.5267    set_bounds 0.0096    solve 0.1258    add 0.1280    
Current (lb-rhs): -0.10322904586791992
50 domains visited
Cumulative time: 0.8624627590179443

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 1] [/input-12, 15] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 1: [/input-12, 15] [/input-12, 15] [/input-12, 26] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] 
split level 2: [/input-12, 26] [/input-12, 26] [/input-12, 6] [/input-12, 26] [/input-12, 26] [/input-12, 6] [/input-12, 6] [/input-12, 26] [/input-12, 26] [/input-12, 26] 
split level 3: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 6] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08700892329216003

all verified at 4th iter
Time: prepare 0.0076    bound 0.0291    transfer 0.0007    finalize 0.0025    func 0.0424    
Accumulated time: func 0.2233    prepare 0.0328    bound 0.1852    transfer 0.0049    finalize 0.0058    
all_split False
======================Cut inference begins======================
max lb tensor(0.19232935) min lb tensor(0.00054628)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03441667556762695 
BICCOS Cumulative time: 0.04619002342224121
Preprocessing time: 0.011916875839233398 Inference time: 0.013801813125610352 Add cuts time: 0.008483171463012695 Cut analysis time: 0.0002148151397705078
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0011    decision 0.0198    set_bounds 0.0117    solve 0.0425    add 0.0154    
Accumulated time: pickout 0.0015    decision 0.5466    set_bounds 0.0213    solve 0.1683    add 0.1433    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26,  1]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.82192979e+29, 7.87373632e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26,  1]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.82192979e+29, 1.28915057e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26,  1]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.82193281e+29, 7.73041099e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26,  1]), tensor([1., 1.]), tensor([0, 0]), tensor([1.82193281e+29, 1.30506709e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.005819082260131836

all verified at 0th iter
Time: prepare 0.0004    bound 0.0046    transfer 0.0001    finalize 0.0001    func 0.0053    
Accumulated time: func 0.2286    prepare 0.0332    bound 0.1899    transfer 0.0050    finalize 0.0060    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.3917281627655
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.39165377616882
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.3916311264038
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.39160680770874
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.39158606529236
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 197.39156699180603
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.6087 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 85, vnnlib ID: 85 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.42035007, -11.01566029, -16.78618240, -17.08073235, -15.94405842,
         -18.31308746, -16.60547638, -16.45758438, -12.49265862, -13.06334209]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [534]; unstable size 534; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 534] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 534] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 534] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 197] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.66741276, 3.53291798, 4.23365211, 2.83012772, 5.27459383, 3.79739285,
         3.37451887, 0.14124298, 1.17811859]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0829 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 86, vnnlib ID: 86 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-15.28128910, -17.14933395, -11.40331554, -14.08204365, -14.06262875,
         -13.41378117, -16.03304672, -13.62230492, -16.91720581, -17.59583473]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [674]; unstable size 674; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 194, 1, 674] with unstable size 193 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 674] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 674] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [193]; unstable size 193; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 193] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 193] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.10949612, 4.45415783, 2.07507992, 2.01375389, 1.43745160, 3.63756847,
         1.59498572, 4.70254707, 5.05546284]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0653 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 87, vnnlib ID: 87 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.75811863, -7.24076557, -3.96754313, -3.75479078, -2.71305084,
         -3.64833927, -3.95274568, -3.04537916, -8.23825359, -5.63892746]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [434]; unstable size 434; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 222, 1, 434] with unstable size 221 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 27, 1, 434] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 434] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [221]; unstable size 221; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 27, 1, 221] with unstable size 26 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 221] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [26]; unstable size 26; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 26] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.55352402,  1.36358595, -0.76676714, -0.70900601, -1.60512829,
         -0.78009820, -1.31760633,  2.84528303,  0.56516743]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.75811863, -7.24076557, -3.96754313, -3.75479078, -2.71305084,
         -3.64833927, -3.95274568, -3.04537916, -8.23825359, -5.63892746]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.75811815, -7.24076557, -3.96754289, -3.75479031, -2.71305084,
          -3.64833879, -3.95274591, -3.04537868, -8.23825359, -5.63892746],
         [-7.75811815, -7.24076557, -3.96754289, -3.75479031, -2.71305084,
          -3.64833879, -3.95274591, -3.04537868, -8.23825359, -5.63892746]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.92216420,  0.70941162, -0.33232784,  0.60296011,  0.90736723]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]],


         [[[-1.06825387e+00, -1.29047608e+00, -9.25396800e-01,  ...,
            -6.55555546e-01, -8.14285696e-01, -7.50793636e-01],
           [-9.88888860e-01, -1.02063489e+00, -1.00476182e+00,  ...,
            -7.34920621e-01, -1.17936504e+00, -1.02063489e+00],
           [-1.00476182e+00, -7.66666651e-01, -8.14285696e-01,  ...,
            -1.00476182e+00, -1.17936504e+00, -1.09999990e+00],
           ...,
           [-1.51269829e+00, -2.90476084e-01,  9.00000036e-01,  ...,
             5.66666722e-01,  6.77777827e-01,  6.14285767e-01],
           [-7.66666651e-01,  5.98412752e-01,  9.31746066e-01,  ...,
             2.17460394e-01,  2.65079439e-01,  5.50793707e-01],
           [-1.79364979e-01,  9.63492095e-01,  8.84127021e-01,  ...,
             2.96825469e-01,  2.17460394e-01,  5.98412752e-01]],

          [[-9.33977425e-01, -1.27214170e+00, -9.33977425e-01,  ...,
            -7.08534598e-01, -8.85668218e-01, -8.21255982e-01],
           [-8.37359071e-01, -9.98389661e-01, -1.01449275e+00,  ...,
            -7.56843746e-01, -1.20772946e+00, -1.06280184e+00],
           [-8.53462100e-01, -7.40740716e-01, -8.21255982e-01,  ...,
            -9.82286572e-01, -1.15942025e+00, -1.09500802e+00],
           ...,
           [-1.65861523e+00, -5.15297890e-01,  5.95813274e-01,  ...,
             1.93236828e-01,  2.89855182e-01,  1.93236828e-01],
           [-9.17874336e-01,  3.70370477e-01,  6.11916363e-01,  ...,
            -1.93236589e-01, -1.44927412e-01,  1.61030710e-01],
           [-4.18679416e-01,  6.44122481e-01,  5.15298009e-01,  ...,
            -1.28824353e-01, -1.93236589e-01,  1.93236828e-01]],

          [[-6.28185868e-01, -1.06296861e+00, -8.38080943e-01,  ...,
            -5.53223372e-01, -6.88155890e-01, -5.98200858e-01],
           [-6.73163414e-01, -8.68065953e-01, -8.83058429e-01,  ...,
            -5.08245826e-01, -8.98050964e-01, -7.18140900e-01],
           [-6.28185868e-01, -6.13193393e-01, -7.18140900e-01,  ...,
            -7.93103397e-01, -9.28035975e-01, -8.23088408e-01],
           ...,
           [-1.48275876e+00, -7.48125911e-01,  2.11394474e-01,  ...,
             1.49940979e-03,  1.06446937e-01, -1.34930937e-02],
           [-8.98050964e-01,  1.49940979e-03,  1.81409463e-01,  ...,
            -3.73313308e-01, -3.58320802e-01, -1.18440613e-01],
           [-4.63268340e-01,  3.16341996e-01,  1.36431947e-01,  ...,
            -2.83358276e-01, -3.73313308e-01, -4.34781015e-02]]]]],
       device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0790 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 88, vnnlib ID: 88 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.13618565, -7.95294571, -3.64413977, -3.37936306, -3.17752457,
         -3.15863037, -5.09549570, -2.59429359, -6.38139343, -5.47579718]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [416]; unstable size 416; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 168, 1, 416] with unstable size 167 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 416] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 416] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [167]; unstable size 167; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 167] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 167] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.65106153,  3.34274721, -0.95804238, -1.22589231, -1.23296690,
          0.48913777, -2.05695343,  1.96782136,  0.53511143]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.13618565, -7.95294571, -3.64413977, -3.37936306, -3.17752457,
         -3.15863037, -5.09549570, -2.59429359, -6.38139343, -5.47579718]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.13618565, -7.95294476, -3.64413953, -3.37936282, -3.17752457,
          -3.15863037, -5.09549522, -2.59429312, -6.38139343, -5.47579718],
         [-6.13618565, -7.95294476, -3.64413953, -3.37936282, -3.17752457,
          -3.15863037, -5.09549522, -2.59429312, -6.38139343, -5.47579718]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.26477671, -0.46661496, -0.48550916, -1.04984641]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]],


         [[[ 1.55079389,  1.50317490,  1.53492093,  ...,  1.24920666,
             1.13809550,  1.47142887],
           [ 1.53492093,  1.50317490,  1.50317490,  ...,  1.02698421,
             1.24920666,  1.45555580],
           [ 1.55079389,  1.51904786,  1.51904786,  ...,  0.77301592,
             1.32857168,  1.48730183],
           ...,
           [-0.98888886,  0.21746039, -0.24285704,  ...,  1.13809550,
            -0.38571417,  1.21746063],
           [-1.24285710, -1.11587298, -1.09999990,  ...,  0.20158738,
            -0.65555555,  0.86825401],
           [-1.27460313, -1.33809519, -1.13174593,  ...,  0.50317466,
             0.21746039,  0.48730165]],

          [[ 2.10950065,  2.06119204,  2.09339786,  ...,  1.65861547,
             1.67471850,  2.07729483],
           [ 2.10144925,  2.06119204,  2.06119204,  ...,  1.43317258,
             1.80354297,  2.06119204],
           [ 2.10950065,  2.07729483,  2.07729483,  ...,  1.17552364,
             1.86795521,  2.09339786],
           ...,
           [-1.11111104,  0.35426742, -0.09661824,  ...,  1.64251232,
            -0.01610294,  1.56199706],
           [-1.40096617, -1.04669881, -0.99838966,  ...,  0.70853472,
            -0.27375188,  1.20772982],
           [-1.43317223, -1.27214170, -1.04669881,  ...,  1.04669893,
             0.61191636,  0.88566834]],

          [[ 2.10045004,  2.09295392,  2.10045004,  ...,  1.57571256,
             1.71064508,  2.10045004],
           [ 2.10045004,  2.08545780,  2.09295392,  ...,  1.36581755,
             1.81559265,  2.10045004],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  1.12593722,
             1.87556267,  2.10045004],
           ...,
           [-1.25787115,  0.03148442, -0.32833579,  ...,  1.68066013,
             0.01649191,  1.69565260],
           [-1.46776617, -1.18290865, -1.06296861,  ...,  0.88605714,
            -0.10344811,  1.44078004],
           [-1.34782624, -1.27286363, -1.03298354,  ...,  1.21589243,
             0.88605714,  1.18590748]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0802 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 89, vnnlib ID: 89 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.58886576, -2.20369244, -8.07431412, -7.83337307, -7.94223309,
         -9.24308968, -8.43767738, -8.89227295, -3.14519000, -4.67166090]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [472]; unstable size 472; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 211, 1, 472] with unstable size 210 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 472] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 472] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [210]; unstable size 210; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 210] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 210] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.69297743,  3.94914818,  3.92555141,  4.07342148,  5.17004490,
          4.61111021,  4.71607924, -0.48206663,  1.52207398]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.58886576, -2.20369244, -8.07431412, -7.83337307, -7.94223309,
         -9.24308968, -8.43767738, -8.89227295, -3.14519000, -4.67166090]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.97it/s]100%|██████████| 1/1 [00:00<00:00,  8.96it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.60659981, -2.84582663, -8.02860737, -7.76232910, -7.95765686,
          -9.17981625, -8.46953678, -8.89545727, -2.92662191, -5.02388382]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.08079529]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1142 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 29.900592803955078
alpha/beta optimization time: 1.2129392623901367
initial alpha-crown bounds: tensor([[ 1.81915092,  4.04639578,  4.01018715,  4.15022850,  5.26251221,
          4.67265797,  4.80006504, -0.42642975,  1.56582594]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.42642974853515625
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6172387599945
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.61719298362732
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.6171591281891
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.61713528633118
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.61711645126343
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.61709761619568
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.6170792579651
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.6170597076416
Verifying property 7 with 1 instances.
##### Instance 89 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.42642975]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.58886576, -2.20369244, -8.07431412, -7.83337307, -7.94223309,
        -9.24308968, -8.43767738, -8.89227295, -3.14519000, -4.67166090],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.42642975]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 472
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 206
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 696
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010442733764648438
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.42643070220947266
10 lb beta sum: 0.0, worst -0.42643117904663086
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    func 0.0530    
Accumulated time: func 0.0530    prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] 
split level 1: [/input-12, 35] 
split level 2: [/input-12, 80] 
split level 3: [/input-12, 74] 
split level 4: [/input-12, 10] 
split level 5: [/input-12, 11] 
split level 6: [/input-12, 60] 
split level 7: [/input-12, 54] 
split level 8: [/input-12, 1] 
split level 9: [/input-12, 6] 
split level 10: [/input-12, 93] 
split level 11: [/input-8, 827] 
split level 12: [/input-8, 1075] 
split level 13: [/input-8, 684] 
split level 14: [/input-8, 812] 
split level 15: [/input-8, 106] 
split level 16: [/input-8, 1126] 
split level 17: [/input-8, 1074] 
split level 18: [/input-8, 1611] 
split level 19: [/input, 2725] 
split level 20: [/input-8, 66] 
split level 21: [/input-8, 844] 
split level 22: [/input-8, 852] 
split level 23: [/input-8, 1331] 
split level 24: [/input-8, 1077] 
split level 25: [/input-8, 65] 
split level 26: [/input-8, 678] 
split level 27: [/input, 226] 
split level 28: [/input, 1790] 
split level 29: [/input-8, 64] 
split level 30: [/input-8, 403] 
split level 31: [/input, 2726] 
split level 32: [/input-8, 270] 
split level 33: [/input-8, 793] 
split level 34: [/input-8, 1026] 
split level 35: [/input-8, 861] 
split level 36: [/input-8, 1332] 
split level 37: [/input-8, 817] 
split level 38: [/input, 481] 
split level 39: [/input-8, 75] 
split level 40: [/input-8, 85] 
split level 41: [/input, 3190] 
split level 42: [/input, 2135] 
split level 43: [/input-8, 108] 
split level 44: [/input, 3994] 
split level 45: [/input, 2422] 
split level 46: [/input, 3191] 
split level 47: [/input, 800] 
split level 48: [/input, 435] 
split level 49: [/input, 3158] 
split level 50: [/input-8, 87] 
split level 51: [/input-8, 1629] 
split level 52: [/input, 2133] 
split level 53: [/input-8, 1838] 
split level 54: [/input, 2421] 
split level 55: [/input, 635] 
split level 56: [/input, 436] 
split level 57: [/input, 2392] 
split level 58: [/input, 2137] 
split level 59: [/input-8, 1734] 
split level 60: [/input, 3160] 
split level 61: [/input, 2423] 
split level 62: [/input, 3173] 
split level 63: [/input, 1651] 
split level 64: [/input, 2425] 
split level 65: [/input-8, 72] 
split level 66: [/input, 2410] 
split level 67: [/input, 3192] 
split level 68: [/input, 784] 
split level 69: [/input-8, 1618] 
split level 70: [/input-8, 1943] 
split level 71: [/input-8, 1847] 
split level 72: [/input-8, 1521] 
split level 73: [/input, 449] 
split level 74: [/input-8, 970] 
split level 75: [/input-8, 110] 
split level 76: [/input-8, 1870] 
split level 77: [/input-8, 1392] 
split level 78: [/input-8, 1935] 
split level 79: [/input, 3976] 
split level 80: [/input-8, 67] 
split level 81: [/input, 2028] 
split level 82: [/input, 225] 
split level 83: [/input, 2393] 
split level 84: [/input, 1655] 
split level 85: [/input-8, 432] 
split level 86: [/input, 3418] 
split level 87: [/input, 2027] 
split level 88: [/input, 3995] 
split level 89: [/input, 3161] 
split level 90: [/input, 1756] 
split level 91: [/input, 1653] 
split level 92: [/input-8, 1027] 
split level 93: [/input, 2420] 
split level 94: [/input, 4051] 
split level 95: [/input-8, 846] 
split level 96: [/input, 1192] 
split level 97: [/input-8, 86] 
split level 98: [/input-8, 1046] 
split level 99: [/input, 832] 
split level 100: [/input, 2030] 
split level 101: [/input, 1657] 
split level 102: [/input, 2388] 
split level 103: [/input, 2394] 
split level 104: [/input, 1652] 
split level 105: [/input, 1654] 
split level 106: [/input-8, 961] 
split level 107: [/input-8, 1445] 
split level 108: [/input, 2131] 
split level 109: [/input, 3207] 
split level 110: [/input-8, 1642] 
split level 111: [/input-8, 1861] 
split level 112: [/input, 163] 
split level 113: [/input, 843] 
split level 114: [/input, 2013] 
split level 115: [/input, 1656] 
split level 116: [/input-8, 600] 
split level 117: [/input, 3188] 
split level 118: [/input-8, 452] 
split level 119: [/input-8, 445] 
split level 120: [/input-8, 439] 
split level 121: [/input, 1055] 
split level 122: [/input-8, 1937] 
split level 123: [/input, 3746] 
split level 124: [/input-8, 1034] 
split level 125: [/input, 2014] 
split level 126: [/input, 4016] 
split level 127: [/input, 1619] 
split level 128: [/input, 424] 
split level 129: [/input, 3203] 
split level 130: [/input, 2225] 
split level 131: [/input-8, 1454] 
split level 132: [/input-8, 1035] 
split level 133: [/input, 1770] 
split level 134: [/input, 544] 
split level 135: [/input, 3143] 
split level 136: [/input-8, 615] 
split level 137: [/input, 2268] 
split level 138: [/input, 2292] 
split level 139: [/input-8, 1588] 
split level 140: [/input-8, 962] 
split level 141: [/input, 4002] 
split level 142: [/input, 2047] 
split level 143: [/input, 950] 
split level 144: [/input-8, 408] 
split level 145: [/input, 3144] 
split level 146: [/input-8, 504] 
split level 147: [/input, 2183] 
split level 148: [/input, 1288] 
split level 149: [/input, 2156] 
split level 150: [/input, 2877] 
split level 151: [/input-8, 1090] 
split level 152: [/input, 3810] 
split level 153: [/input, 1800] 
split level 154: [/input, 810] 
split level 155: [/input, 2122] 
split level 156: [/input, 2841] 
split level 157: [/input, 1934] 
split level 158: [/input-8, 394] 
split level 159: [/input-8, 1493] 
split level 160: [/input, 1853] 
split level 161: [/input-8, 971] 
split level 162: [/input, 3458] 
split level 163: [/input-8, 983] 
split level 164: [/input-8, 258] 
split level 165: [/input, 179] 
split level 166: [/input-8, 1644] 
split level 167: [/input, 517] 
split level 168: [/input-8, 1831] 
split level 169: [/input, 1997] 
split level 170: [/input, 2140] 
split level 171: [/input-8, 1729] 
split level 172: [/input, 2359] 
split level 173: [/input-8, 81] 
split level 174: [/input, 1950] 
split level 175: [/input, 1111] 
split level 176: [/input, 1533] 
split level 177: [/input, 2700] 
split level 178: [/input, 2172] 
split level 179: [/input, 1981] 
split level 180: [/input, 3828] 
split level 181: [/input, 2143] 
split level 182: [/input-8, 1852] 
split level 183: [/input-8, 833] 
split level 184: [/input, 3613] 
split level 185: [/input, 2177] 
split level 186: [/input, 2344] 
split level 187: [/input, 2435] 
split level 188: [/input, 1966] 
split level 189: [/input, 3745] 
split level 190: [/input-8, 692] 
split level 191: [/input, 2328] 
split level 192: [/input, 2556] 
split level 193: [/input, 3646] 
split level 194: [/input, 3080] 
split level 195: [/input, 3255] 
split level 196: [/input, 849] 
split level 197: [/input, 1982] 
split level 198: [/input, 1998] 
split level 199: [/input-8, 1227] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4264073371887207
10 lb beta sum: 0.0, worst -0.42641162872314453
Time: prepare 0.0115    bound 0.0982    transfer 0.0059    finalize 0.0028    func 0.1211    
Accumulated time: func 0.1740    prepare 0.0216    bound 0.1507    transfer 0.0060    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.19878721) min lb tensor(-0.42640734)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010543584823608398 
BICCOS Cumulative time: 0.010543584823608398
Preprocessing time: 0.010104656219482422 Inference time: 0.00014328956604003906 Add cuts time: 6.890296936035156e-05 Cut analysis time: 0.00022673606872558594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.41315 (1), -0.41290 (1), -0.41277 (1), -0.41251 (1), -0.41245 (1), -0.41178 (1), -0.41120 (1), -0.41097 (1), -0.41089 (1), -0.41057 (1), -0.41010 (1), -0.40992 (1), -0.40988 (1), -0.40921 (1), -0.40902 (1), -0.40865 (1), -0.40837 (1), -0.40821 (1), -0.40723 (1), -0.40678 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5102    set_bounds 0.0097    solve 0.1212    add 0.0880    
Accumulated time: pickout 0.0004    decision 0.5102    set_bounds 0.0097    solve 0.1212    add 0.0880    
Current (lb-rhs): -0.4131460189819336
50 domains visited
Cumulative time: 0.8128657341003418

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 35] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] 
split level 1: [/input-12, 60] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 11] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 2: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 60] [/input-12, 60] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 3: [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.41123390197753906
10 lb beta sum: 0.5693191885948181, worst -0.3877304196357727
Time: prepare 0.0073    bound 0.1205    transfer 0.0008    finalize 0.0026    func 0.1340    
Accumulated time: func 0.3080    prepare 0.0292    bound 0.2712    transfer 0.0068    finalize 0.0056    
all_split False
======================Cut inference begins======================
max lb tensor(0.58580577) min lb tensor(-0.38760677)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.016210317611694336 
BICCOS Cumulative time: 0.026753902435302734
Preprocessing time: 0.011959075927734375 Inference time: 0.0021805763244628906 Add cuts time: 0.0016393661499023438 Cut analysis time: 0.00043129920959472656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10933 (2), -0.10824 (2), -0.10767 (2), -0.10732 (2), -0.10568 (2), -0.10527 (2), -0.10460 (2), -0.10427 (2), -0.10357 (2), -0.10321 (2), -0.10083 (2), -0.10051 (2), -0.09945 (2), -0.09928 (2), -0.09745 (2), -0.09685 (2), -0.09679 (2), -0.09650 (2), -0.09623 (2), -0.09375 (2), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0195    set_bounds 0.0122    solve 0.1341    add 0.2075    
Accumulated time: pickout 0.0015    decision 0.5297    set_bounds 0.0219    solve 0.2552    add 0.2955    
Current (lb-rhs): -0.10933178663253784
100 domains visited
Cumulative time: 1.2108073234558105

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 21] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 10] [/input-12, 60] [/input-12, 11] [/input-12, 11] [/input-12, 10] [/input-12, 60] [/input-12, 10] [/input-12, 60] [/input-12, 10] [/input-12, 60] 
split level 2: [/input-12, 11] [/input-12, 11] [/input-12, 1] [/input-12, 60] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 3: [/input-12, 1] [/input-12, 1] [/input-12, 6] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13398361206054688
10 lb beta sum: 1.2089718580245972, worst -0.07511645555496216
Time: prepare 0.0074    bound 0.1168    transfer 0.0007    finalize 0.0022    func 0.1297    
Accumulated time: func 0.4377    prepare 0.0369    bound 0.3880    transfer 0.0075    finalize 0.0079    
all_split False
======================Cut inference begins======================
max lb tensor(0.34411538) min lb tensor(-0.07275051)
Number of Verified Splits: 387 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 7
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.038997650146484375 
BICCOS Cumulative time: 0.06575155258178711
Preprocessing time: 0.011712789535522461 Inference time: 0.017057180404663086 Add cuts time: 0.009819984436035156 Cut analysis time: 0.0004076957702636719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07275 (3), -0.04744 (3), -0.03880 (3), -0.03626 (3), 
Length of domains: 4
Time: pickout 0.0078    decision 0.0197    set_bounds 0.0156    solve 0.1298    add 0.1841    
Accumulated time: pickout 0.0093    decision 0.5495    set_bounds 0.0375    solve 0.3850    add 0.4796    
Current (lb-rhs): -0.0727505087852478
104 domains visited
Cumulative time: 1.6141481399536133

Shallow-BaB round 4
batch: 4
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 80] 
split level 1: [/input-12, 80] [/input-12, 80] [/input-12, 80] [/input-12, 74] 
split level 2: [/input-12, 74] [/input-12, 74] [/input-12, 74] [/input-12, 10] 
split level 3: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 11] 
split level 4: [/input-12, 60] [/input-12, 11] [/input-12, 11] [/input-12, 60] 
split level 5: [/input-12, 1] [/input-12, 1] [/input-12, 60] [/input-12, 1] 
split level 6: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 7: [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
split level 8: [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] 
split level 9: [/input-8, 1075] [/input-8, 1075] [/input-8, 1075] [/input-8, 1075] 
split level 10: [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] 
split level 11: [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] 
split level 12: [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] 
split level 13: [/input-8, 106] [/input-8, 106] [/input-8, 106] [/input-8, 106] 
split level 14: [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] 
split level 15: [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] 
split level 16: [/input-8, 678] [/input-8, 678] [/input, 1790] [/input-8, 678] 
split level 17: [/input, 1790] [/input, 1790] [/input, 2726] [/input, 1790] 
split level 18: [/input, 2726] [/input, 2726] [/input-8, 403] [/input, 2726] 
split level 19: [/input-8, 1332] [/input-8, 403] [/input-8, 1332] [/input-8, 403] 
split level 20: [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 1332] 
split level 21: [/input-8, 403] [/input-8, 1332] [/input, 481] [/input-8, 270] 
split level 22: [/input, 481] [/input, 481] [/input, 3158] [/input, 481] 
split level 23: [/input, 3158] [/input, 3158] [/input, 2133] [/input, 3158] 
split level 24: [/input-8, 1734] [/input, 2133] [/input-8, 1734] [/input, 2133] 
split level 25: [/input, 2422] [/input-8, 1734] [/input, 2392] [/input-8, 1734] 
split level 26: [/input, 2133] [/input, 635] [/input, 449] [/input, 449] 
split level 27: [/input, 449] [/input, 449] [/input, 635] [/input, 635] 
split level 28: [/input-8, 1618] [/input-8, 1618] [/input, 3173] [/input, 3173] 
split level 29: [/input, 3173] [/input-8, 1629] [/input-8, 1618] [/input-8, 1618] 
split level 30: [/input, 635] [/input, 3173] [/input-8, 1629] [/input-8, 1629] 
split level 31: [/input-8, 1629] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] 
split level 32: [/input-8, 1861] [/input-8, 1046] [/input-8, 1046] [/input-8, 1046] 
split level 33: [/input-8, 1046] [/input, 2388] [/input-8, 846] [/input, 2388] 
split level 34: [/input, 2388] [/input-8, 1445] [/input-8, 1445] [/input-8, 846] 
split level 35: [/input-8, 846] [/input, 163] [/input, 2388] [/input-8, 1937] 
split level 36: [/input-8, 1445] [/input-8, 846] [/input-8, 1937] [/input, 2131] 
split level 37: [/input-8, 1937] [/input-8, 1937] [/input, 2131] [/input, 163] 
split level 38: [/input, 163] [/input, 2131] [/input, 163] [/input, 1653] 
split level 39: [/input, 2131] [/input, 1653] [/input, 1655] [/input-8, 1445] 
split level 40: [/input, 1653] [/input, 1756] [/input, 1653] [/input, 1655] 
split level 41: [/input, 1655] [/input, 1655] [/input, 1756] [/input, 1756] 
split level 42: [/input, 1756] [/input, 1619] [/input, 1619] [/input, 1619] 
split level 43: [/input, 1619] [/input, 1654] [/input, 1654] [/input, 1654] 
split level 44: [/input, 1654] [/input-8, 394] [/input, 2268] [/input, 2268] 
split level 45: [/input, 2268] [/input, 2268] [/input, 2359] [/input, 2359] 
split level 46: [/input, 2359] [/input, 2359] [/input, 2115] [/input, 2115] 
split level 47: [/input, 2115] [/input, 3255] [/input, 3255] [/input, 3255] 
split level 48: [/input, 3255] [/input, 2115] [/input, 1604] [/input, 2386] 
split level 49: [/input, 2386] [/input, 2386] [/input, 2386] [/input, 1604] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09561347961425781

all verified at 7th iter
Time: prepare 0.0077    bound 0.0466    transfer 0.0008    finalize 0.0025    func 0.0601    
Accumulated time: func 0.4978    prepare 0.0471    bound 0.4346    transfer 0.0084    finalize 0.0103    
all_split False
======================Cut inference begins======================
max lb tensor(0.39963290) min lb tensor(0.00250196)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.03719925880432129 
BICCOS Cumulative time: 0.1029508113861084
Preprocessing time: 0.011621713638305664 Inference time: 0.017279386520385742 Add cuts time: 0.007960796356201172 Cut analysis time: 0.00033736228942871094
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0006    decision 0.1366    set_bounds 0.0120    solve 0.0602    add 0.0240    
Accumulated time: pickout 0.0099    decision 0.6860    set_bounds 0.0495    solve 0.4452    add 0.5036    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
104 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([93]), tensor([-1.]), tensor([0]), tensor([1.16447902e-42]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([93, 21, 35, 80]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([1.27899913e-11, 1.52636990e-01, 2.14402541e-03, 1.33354649e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([93, 21, 35, 80]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.27899913e-11, 1.52636990e-01, 2.14402541e-03, 1.06363431e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([93, 21, 35]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.27899913e-11, 1.52636990e-01, 1.45336732e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([93, 21]), tensor([1., 1.]), tensor([0, 0]), tensor([1.27899913e-11, 2.89271891e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  5
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4164619445800781
10 lb beta sum: 1.2698872089385986, worst -0.25039464235305786
Time: prepare 0.0003    bound 0.1178    transfer 0.0002    finalize 0.0002    func 0.1185    
Accumulated time: func 0.6164    prepare 0.0475    bound 0.5524    transfer 0.0085    finalize 0.0105    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] 
split level 1: [/input-12, 35] 
split level 2: [/input-12, 74] 
split level 3: [/input-12, 10] 
split level 4: [/input-12, 11] 
split level 5: [/input-12, 60] 
split level 6: [/input-12, 1] 
split level 7: [/input-12, 6] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4877684116363525, worst -0.09554636478424072
10 lb beta sum: 1.4877684116363525, worst -0.0947953462600708
Time: prepare 0.0095    bound 0.1116    transfer 0.0023    finalize 0.0013    func 0.1264    
Accumulated time: func 0.7428    prepare 0.0574    bound 0.6640    transfer 0.0108    finalize 0.0118    
all_split False
======================Cut inference begins======================
max lb tensor(1.24170291) min lb tensor(-0.09456551)
Number of Verified Splits: 251 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.4877684116363525, worst -0.19425928592681885
10 lb beta sum: 1.5720990896224976, worst -0.18371689319610596
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.4409337043762207 
BICCOS Cumulative time: 0.5438845157623291
Preprocessing time: 0.006621837615966797 Inference time: 0.42618536949157715 Add cuts time: 0.0070378780364990234 Cut analysis time: 0.0010886192321777344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09457 (8), -0.05377 (8), -0.03191 (8), -0.01184 (8), -0.00286 (8), 
Length of domains: 5
Time: pickout 0.0005    decision 0.0219    set_bounds 0.0211    solve 0.1265    add 0.0259    
Accumulated time: pickout 0.0105    decision 0.7080    set_bounds 0.0706    solve 0.5718    add 0.5295    
Current (lb-rhs): -0.0945655107498169
109 domains visited
Cumulative time: 2.69577956199646

BaB round 2
batch: 5
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 80] [/input-12, 80] [/input-12, 80] [/input-12, 80] [/input-12, 80] 
split level 1: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 2: [/input-8, 1075] [/input-8, 827] [/input-8, 1075] [/input-8, 1075] [/input-8, 827] 
split level 3: [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] [/input-8, 684] 
split level 4: [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] [/input-8, 812] 
split level 5: [/input-8, 106] [/input-8, 106] [/input-8, 106] [/input-8, 106] [/input-8, 1332] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.062107086181640625
10 lb beta sum: 0.004316105507314205, worst -0.06164360046386719
Time: prepare 0.0062    bound 0.1136    transfer 0.0019    finalize 0.0013    func 0.1252    
Accumulated time: func 0.8680    prepare 0.0640    bound 0.7777    transfer 0.0127    finalize 0.0132    
all_split False
======================Cut inference begins======================
max lb tensor(0.42137814) min lb tensor(-0.06143427)
Number of Verified Splits: 299 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18591880798339844
10 lb beta sum: 0.48178717494010925, worst -0.7559908628463745
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 44.
#cuts 1-3: 8
#cuts 4-6: 14
#cuts 7-9: 11
#cuts 10-12: 11
#cuts >= 20: 0
BICCOS time: 0.3510720729827881 
BICCOS Cumulative time: 0.8949565887451172
Preprocessing time: 0.009489774703979492 Inference time: 0.325206995010376 Add cuts time: 0.01400899887084961 Cut analysis time: 0.002366304397583008
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06143 (14), -0.05436 (14), -0.05301 (14), -0.05097 (14), -0.04840 (14), -0.04040 (14), -0.03973 (14), -0.03671 (14), -0.02143 (14), -0.01823 (14), -0.01770 (14), -0.01589 (14), -0.01556 (14), -0.01417 (14), -0.01089 (14), -0.00909 (14), -0.00788 (14), -0.00374 (14), -0.00201 (14), -0.00170 (14), 
Length of domains: 21
Time: pickout 0.0011    decision 0.0179    set_bounds 0.0273    solve 0.1253    add 0.0475    
Accumulated time: pickout 0.0116    decision 0.7259    set_bounds 0.0979    solve 0.6971    add 0.5770    
Current (lb-rhs): -0.061434268951416016
130 domains visited
Cumulative time: 3.2752087116241455

BaB round 3
batch: 21
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] [/input-8, 827] 
split level 1: [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] [/input-8, 1074] 
split level 2: [/input-8, 108] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] [/input-8, 1332] 
split level 3: [/input-8, 1332] [/input-8, 861] [/input-8, 108] [/input-8, 108] [/input-8, 861] [/input-8, 108] [/input-8, 861] [/input-8, 108] [/input-8, 861] [/input-8, 108] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.047364234924316406
10 lb beta sum: 0.0, worst -0.0470738410949707
Time: prepare 0.0064    bound 0.1362    transfer 0.0012    finalize 0.0016    func 0.1477    
Accumulated time: func 1.0156    prepare 0.0706    bound 0.9139    transfer 0.0139    finalize 0.0148    
all_split False
======================Cut inference begins======================
max lb tensor(0.06533909) min lb tensor(-0.04691648)
Number of Verified Splits: 269 of 336
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 12
#cuts 4-6: 9
#cuts 7-9: 6
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 0.048888444900512695 
BICCOS Cumulative time: 0.9438450336456299
Preprocessing time: 0.01001119613647461 Inference time: 0.033591508865356445 Add cuts time: 0.00400853157043457 Cut analysis time: 0.0012772083282470703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04692 (18), -0.04513 (18), -0.04314 (18), -0.04189 (18), -0.03987 (18), -0.03901 (18), -0.03822 (18), -0.03580 (18), -0.03567 (18), -0.03531 (18), -0.03517 (18), -0.03467 (18), -0.03432 (18), -0.03381 (18), -0.03340 (18), -0.03335 (18), -0.03258 (18), -0.03243 (18), -0.03229 (18), -0.03113 (18), 
Length of domains: 67
Time: pickout 0.0011    decision 0.0173    set_bounds 0.0197    solve 0.1478    add 0.0191    
Accumulated time: pickout 0.0126    decision 0.7432    set_bounds 0.1176    solve 0.8448    add 0.5962    
Current (lb-rhs): -0.04691648483276367
197 domains visited
Cumulative time: 3.5310723781585693

BaB round 4
batch: 67
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 403] [/input-8, 817] [/input-8, 817] 
split level 1: [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] [/input-8, 270] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.041077613830566406
10 lb beta sum: 0.07951203733682632, worst -0.040903568267822266
Time: prepare 0.0052    bound 0.1317    transfer 0.0008    finalize 0.0012    func 0.1407    
Accumulated time: func 1.1563    prepare 0.0760    bound 1.0456    transfer 0.0146    finalize 0.0160    
all_split False
======================Cut inference begins======================
max lb tensor(0.01046228) min lb tensor(-0.04081249)
Number of Verified Splits: 73 of 268
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 12
#cuts 4-6: 9
#cuts 7-9: 6
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 0.023012638092041016 
BICCOS Cumulative time: 0.9668576717376709
Preprocessing time: 0.00839996337890625 Inference time: 0.010294914245605469 Add cuts time: 0.002994537353515625 Cut analysis time: 0.0013232231140136719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04081 (20), -0.03886 (20), -0.03832 (20), -0.03701 (20), -0.03637 (20), -0.03563 (20), -0.03452 (20), -0.03393 (20), -0.03390 (20), -0.03315 (20), -0.03293 (20), -0.03224 (20), -0.03197 (20), -0.03142 (20), -0.03141 (20), -0.03044 (20), -0.03013 (20), -0.02982 (20), -0.02975 (20), -0.02952 (20), 
Length of domains: 195
Time: pickout 0.0016    decision 0.0166    set_bounds 0.0127    solve 0.1408    add 0.0024    
Accumulated time: pickout 0.0142    decision 0.7598    set_bounds 0.1303    solve 0.9856    add 0.5986    
Current (lb-rhs): -0.04081249237060547
392 domains visited
Cumulative time: 3.728990077972412

BaB round 5
batch: 195
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 403] [/input-8, 64] [/input-8, 64] [/input-8, 64] [/input-8, 64] [/input-8, 64] [/input-8, 403] [/input-8, 64] [/input-8, 64] [/input-8, 64] 
cut re-enabled after branching node selection
0 lb beta sum: 0.08120144158601761, worst -0.03967857360839844
10 lb beta sum: 0.08120144158601761, worst -0.03955793380737305
Time: prepare 0.0166    bound 0.1367    transfer 0.0014    finalize 0.0017    func 0.1590    
Accumulated time: func 1.3153    prepare 0.0928    bound 1.1823    transfer 0.0160    finalize 0.0177    
all_split False
======================Cut inference begins======================
max lb tensor(0.00872374) min lb tensor(-0.03951454)
Number of Verified Splits: 111 of 390
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 14
#cuts 4-6: 10
#cuts 7-9: 6
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 0.03250551223754883 
BICCOS Cumulative time: 0.9993631839752197
Preprocessing time: 0.011490106582641602 Inference time: 0.016672372817993164 Add cuts time: 0.0029823780059814453 Cut analysis time: 0.0013606548309326172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03951 (21), -0.03746 (21), -0.03702 (21), -0.03571 (21), -0.03497 (21), -0.03420 (21), -0.03321 (21), -0.03271 (21), -0.03205 (21), -0.03171 (21), -0.03168 (21), -0.03103 (21), -0.03022 (21), -0.02999 (21), -0.02952 (21), -0.02918 (21), -0.02864 (21), -0.02854 (21), -0.02824 (21), -0.02823 (21), 
Length of domains: 279
Time: pickout 0.0045    decision 0.0215    set_bounds 0.0173    solve 0.1591    add 0.0050    
Accumulated time: pickout 0.0188    decision 0.7813    set_bounds 0.1476    solve 1.1447    add 0.6036    
Current (lb-rhs): -0.03951454162597656
671 domains visited
Cumulative time: 3.969836950302124

BaB round 6
batch: 279
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 403] [/input-8, 64] [/input-8, 403] [/input-8, 403] [/input-8, 817] [/input-8, 817] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.037689208984375
10 lb beta sum: 0.039560891687870026, worst -0.03763628005981445
Time: prepare 0.0108    bound 0.1368    transfer 0.0026    finalize 0.0023    func 0.1561    
Accumulated time: func 1.4714    prepare 0.1039    bound 1.3191    transfer 0.0185    finalize 0.0201    
all_split False
======================Cut inference begins======================
max lb tensor(0.01166487) min lb tensor(-0.03759003)
Number of Verified Splits: 230 of 558
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 36.
#cuts 1-3: 17
#cuts 4-6: 10
#cuts 7-9: 6
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 0.05720019340515137 
BICCOS Cumulative time: 1.056563377380371
Preprocessing time: 0.016288042068481445 Inference time: 0.03520965576171875 Add cuts time: 0.004264116287231445 Cut analysis time: 0.0014383792877197266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03759 (22), -0.03546 (22), -0.03509 (22), -0.03378 (22), -0.03296 (22), -0.03214 (22), -0.03128 (22), -0.03088 (22), -0.02991 (22), -0.02980 (22), -0.02964 (22), -0.02916 (22), -0.02837 (22), -0.02778 (22), -0.02737 (22), -0.02729 (22), -0.02680 (22), -0.02666 (22), -0.02628 (22), -0.02612 (22), 
Length of domains: 328
Time: pickout 0.0055    decision 0.0269    set_bounds 0.0242    solve 0.1563    add 0.0969    
Accumulated time: pickout 0.0243    decision 0.8082    set_bounds 0.1718    solve 1.3010    add 0.7005    
Current (lb-rhs): -0.03759002685546875
999 domains visited
Cumulative time: 4.347721338272095

BaB round 7
batch: 328
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] [/input, 2133] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03457069396972656
10 lb beta sum: 0.04501756280660629, worst -0.03452587127685547
Time: prepare 0.0164    bound 0.1635    transfer 0.0047    finalize 0.0039    func 0.1929    
Accumulated time: func 1.6642    prepare 0.1206    bound 1.4826    transfer 0.0232    finalize 0.0239    
all_split False
======================Cut inference begins======================
max lb tensor(0.00774479) min lb tensor(-0.03450298)
Number of Verified Splits: 145 of 656
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 18
#cuts 4-6: 10
#cuts 7-9: 6
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 0.04790663719177246 
BICCOS Cumulative time: 1.1044700145721436
Preprocessing time: 0.019800424575805664 Inference time: 0.023082494735717773 Add cuts time: 0.0033991336822509766 Cut analysis time: 0.0016245841979980469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03450 (23), -0.03385 (23), -0.03228 (23), -0.03205 (23), -0.03163 (23), -0.03112 (23), -0.03069 (23), -0.03005 (23), -0.02983 (23), -0.02893 (23), -0.02890 (23), -0.02828 (23), -0.02824 (23), -0.02784 (23), -0.02731 (23), -0.02719 (23), -0.02674 (23), -0.02666 (23), -0.02648 (23), -0.02610 (23), 
Length of domains: 511
Time: pickout 0.0166    decision 0.0339    set_bounds 0.0185    solve 0.1931    add 0.0588    
Accumulated time: pickout 0.0409    decision 0.8421    set_bounds 0.1903    solve 1.4941    add 0.7594    
Current (lb-rhs): -0.03450298309326172
1510 domains visited
Cumulative time: 4.725379705429077

BaB round 8
batch: 511
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 424] [/input, 481] [/input, 424] [/input-8, 1331] [/input-8, 1618] [/input, 481] [/input-8, 1618] [/input-8, 1331] [/input-8, 1331] [/input, 481] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.032196998596191406
10 lb beta sum: 0.04382363706827164, worst -0.03219413757324219
Time: prepare 0.0258    bound 0.1602    transfer 0.0133    finalize 0.0073    func 0.2135    
Accumulated time: func 1.8777    prepare 0.1466    bound 1.6428    transfer 0.0366    finalize 0.0313    
all_split False
======================Cut inference begins======================
max lb tensor(0.01592159) min lb tensor(-0.03217697)
Number of Verified Splits: 252 of 1022
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 39.
#cuts 1-3: 20
#cuts 4-6: 10
#cuts 7-9: 6
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 0.07654047012329102 
BICCOS Cumulative time: 1.1810104846954346
Preprocessing time: 0.032393455505371094 Inference time: 0.03722429275512695 Add cuts time: 0.005301237106323242 Cut analysis time: 0.0016214847564697266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03218 (24), -0.03154 (24), -0.02989 (24), -0.02973 (24), -0.02967 (24), -0.02926 (24), -0.02904 (24), -0.02881 (24), -0.02779 (24), -0.02745 (24), -0.02739 (24), -0.02723 (24), -0.02715 (24), -0.02675 (24), -0.02652 (24), -0.02630 (24), -0.02604 (24), -0.02552 (24), -0.02541 (24), -0.02535 (24), 
Length of domains: 770
Time: pickout 0.0128    decision 0.0416    set_bounds 0.0462    solve 0.2138    add 0.0068    
Accumulated time: pickout 0.0537    decision 0.8837    set_bounds 0.2364    solve 1.7078    add 0.7662    
Current (lb-rhs): -0.032176971435546875
2280 domains visited
Cumulative time: 5.124935865402222

BaB round 9
batch: 770
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 481] [/input, 481] [/input-8, 861] [/input, 481] [/input-8, 1331] [/input-8, 861] [/input, 481] [/input-8, 861] [/input-8, 1331] [/input-8, 861] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02964639663696289
10 lb beta sum: 0.06986172497272491, worst -0.029644012451171875
Time: prepare 0.0397    bound 0.2015    transfer 0.0115    finalize 0.0092    func 0.5447    
Accumulated time: func 2.4224    prepare 0.1866    bound 1.8443    transfer 0.0481    finalize 0.0404    
all_split False
======================Cut inference begins======================
max lb tensor(0.24866104) min lb tensor(-0.02963591)
Number of Verified Splits: 548 of 1540
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 15
#cuts 4-6: 10
#cuts 7-9: 6
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 0.1464385986328125 
BICCOS Cumulative time: 1.327449083328247
Preprocessing time: 0.0505518913269043 Inference time: 0.0864112377166748 Add cuts time: 0.007789134979248047 Cut analysis time: 0.0016863346099853516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02964 (25), -0.02901 (25), -0.02866 (25), -0.02804 (25), -0.02731 (25), -0.02720 (25), -0.02712 (25), -0.02669 (25), -0.02649 (25), -0.02634 (25), -0.02628 (25), -0.02623 (25), -0.02615 (25), -0.02572 (25), -0.02552 (25), -0.02539 (25), -0.02530 (25), -0.02488 (25), -0.02480 (25), -0.02477 (25), 
Length of domains: 992
Time: pickout 0.0187    decision 0.0553    set_bounds 0.0658    solve 0.5453    add 0.0747    
Accumulated time: pickout 0.0724    decision 0.9390    set_bounds 0.3023    solve 2.2531    add 0.8408    
Current (lb-rhs): -0.029635906219482422
3272 domains visited
Cumulative time: 6.038879871368408

BaB round 10
batch: 992
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 449] [/input, 449] [/input, 449] [/input, 2726] [/input, 449] [/input, 449] [/input, 2726] [/input, 2726] [/input, 449] [/input, 449] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028369426727294922
10 lb beta sum: 0.05378822982311249, worst -0.028347492218017578
Time: prepare 0.0498    bound 0.1696    transfer 0.0040    finalize 0.0109    func 0.2479    
Accumulated time: func 2.6703    prepare 0.2366    bound 2.0139    transfer 0.0521    finalize 0.0514    
all_split False
======================Cut inference begins======================
max lb tensor(0.01622868) min lb tensor(-0.02834225)
Number of Verified Splits: 968 of 1984
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 20
#cuts 4-6: 9
#cuts 7-9: 6
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 0.23404192924499512 
BICCOS Cumulative time: 1.5614910125732422
Preprocessing time: 0.06505107879638672 Inference time: 0.15555787086486816 Add cuts time: 0.011884927749633789 Cut analysis time: 0.0015480518341064453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02834 (26), -0.02773 (26), -0.02738 (26), -0.02677 (26), -0.02592 (26), -0.02586 (26), -0.02581 (26), -0.02525 (26), -0.02521 (26), -0.02499 (26), -0.02496 (26), -0.02490 (26), -0.02486 (26), -0.02429 (26), -0.02425 (26), -0.02402 (26), -0.02343 (26), -0.02339 (26), -0.02334 (26), -0.02284 (26), 
Length of domains: 1016
Time: pickout 0.0220    decision 0.0658    set_bounds 0.0871    solve 0.2485    add 0.0591    
Accumulated time: pickout 0.0944    decision 1.0048    set_bounds 0.3893    solve 2.5016    add 0.8999    
Current (lb-rhs): -0.028342247009277344
4288 domains visited
Cumulative time: 6.769620895385742

BaB round 11
batch: 1016
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input-8, 861] [/input-8, 1331] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026739120483398438
10 lb beta sum: 0.175425186753273, worst -0.02670764923095703
Time: prepare 0.0525    bound 0.2240    transfer 0.0088    finalize 0.0124    func 0.3108    
Accumulated time: func 2.9811    prepare 0.2894    bound 2.2379    transfer 0.0608    finalize 0.0637    
all_split False
======================Cut inference begins======================
max lb tensor(0.02326532) min lb tensor(-0.02669477)
Number of Verified Splits: 985 of 2032
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 39.
#cuts 1-3: 21
#cuts 4-6: 9
#cuts 7-9: 6
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 0.24399375915527344 
BICCOS Cumulative time: 1.8054847717285156
Preprocessing time: 0.06548023223876953 Inference time: 0.16570734977722168 Add cuts time: 0.011263608932495117 Cut analysis time: 0.0015425682067871094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02669 (27), -0.02608 (27), -0.02573 (27), -0.02513 (27), -0.02425 (27), -0.02415 (27), -0.02354 (27), -0.02333 (27), -0.02330 (27), -0.02320 (27), -0.02274 (27), -0.02265 (27), -0.02259 (27), -0.02239 (27), -0.02238 (27), -0.02199 (27), -0.02179 (27), -0.02172 (27), -0.02171 (27), -0.02144 (27), 
Length of domains: 1047
Time: pickout 0.0817    decision 0.0667    set_bounds 0.0894    solve 0.3114    add 0.0119    
Accumulated time: pickout 0.1761    decision 1.0715    set_bounds 0.4787    solve 2.8130    add 0.9117    
Current (lb-rhs): -0.026694774627685547
5335 domains visited
Cumulative time: 7.584182024002075

BaB round 12
batch: 1047
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2726] [/input-8, 861] [/input, 2726] [/input-8, 861] [/input-8, 75] [/input-8, 861] [/input-8, 1618] [/input-8, 75] [/input-8, 75] [/input-8, 75] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02359771728515625
10 lb beta sum: 0.16624802350997925, worst -0.023595809936523438
Time: prepare 0.0540    bound 0.2307    transfer 0.0068    finalize 0.0123    func 0.3203    
Accumulated time: func 3.3014    prepare 0.3437    bound 2.4686    transfer 0.0677    finalize 0.0760    
all_split False
======================Cut inference begins======================
max lb tensor(0.01759043) min lb tensor(-0.02358341)
Number of Verified Splits: 771 of 2094
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 19
#cuts 4-6: 9
#cuts 7-9: 6
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 0.2119760513305664 
BICCOS Cumulative time: 2.017460823059082
Preprocessing time: 0.06694555282592773 Inference time: 0.13338327407836914 Add cuts time: 0.010020971298217773 Cut analysis time: 0.0016262531280517578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02358 (28), -0.02349 (28), -0.02323 (28), -0.02283 (28), -0.02263 (28), -0.02254 (28), -0.02227 (28), -0.02188 (28), -0.02123 (28), -0.02109 (28), -0.02105 (28), -0.02103 (28), -0.02099 (28), -0.02094 (28), -0.02073 (28), -0.02068 (28), -0.02063 (28), -0.02033 (28), -0.02029 (28), -0.02028 (28), 
Length of domains: 1323
Time: pickout 0.0211    decision 0.0686    set_bounds 0.2815    solve 0.3210    add 0.0608    
Accumulated time: pickout 0.1972    decision 1.1400    set_bounds 0.7602    solve 3.1340    add 0.9726    
Current (lb-rhs): -0.023583412170410156
6658 domains visited
Cumulative time: 8.558747053146362

BaB round 13
batch: 1323
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 75] [/input-8, 75] [/input-8, 1618] [/input-8, 75] [/input-8, 75] [/input-8, 1618] [/input-8, 1618] [/input-8, 1618] [/input-8, 75] [/input-8, 1618] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.021579265594482422
10 lb beta sum: 0.13049449026584625, worst -0.021587371826171875
Time: prepare 0.0669    bound 0.2130    transfer 0.0097    finalize 0.0154    func 0.3230    
Accumulated time: func 3.6244    prepare 0.4109    bound 2.6816    transfer 0.0773    finalize 0.0914    
all_split False
======================Cut inference begins======================
max lb tensor(0.00714391) min lb tensor(-0.02157450)
Number of Verified Splits: 834 of 2646
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 19
#cuts 4-6: 9
#cuts 7-9: 7
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 0.24426531791687012 
BICCOS Cumulative time: 2.261726140975952
Preprocessing time: 0.08331513404846191 Inference time: 0.14927005767822266 Add cuts time: 0.01010894775390625 Cut analysis time: 0.0015711784362792969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02157 (29), -0.02149 (29), -0.02122 (29), -0.02082 (29), -0.02061 (29), -0.02053 (29), -0.02026 (29), -0.01986 (29), -0.01953 (29), -0.01945 (29), -0.01931 (29), -0.01906 (29), -0.01901 (29), -0.01898 (29), -0.01893 (29), -0.01870 (29), -0.01868 (29), -0.01865 (29), -0.01858 (29), -0.01850 (29), 
Length of domains: 1812
Time: pickout 0.0322    decision 0.0834    set_bounds 0.1188    solve 0.3237    add 0.0115    
Accumulated time: pickout 0.2294    decision 1.2234    set_bounds 0.8790    solve 3.4577    add 0.9840    
Current (lb-rhs): -0.02157449722290039
8470 domains visited
Cumulative time: 9.38252568244934

BaB round 14
batch: 1812
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2726] [/input, 3994] [/input, 2726] [/input-8, 1629] [/input, 2726] [/input, 3994] [/input-8, 1629] [/input, 2726] [/input, 3994] [/input-8, 970] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.018721580505371094
10 lb beta sum: 0.09659019857645035, worst -0.018603801727294922
Time: prepare 0.0954    bound 0.3453    transfer 0.0105    finalize 0.0224    func 0.4969    
Accumulated time: func 4.1213    prepare 0.5065    bound 3.0269    transfer 0.0879    finalize 0.1139    
all_split False
======================Cut inference begins======================
max lb tensor(0.00815535) min lb tensor(-0.01858425)
Number of Verified Splits: 1355 of 3624
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 44.
#cuts 1-3: 25
#cuts 4-6: 10
#cuts 7-9: 6
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 0.38374924659729004 
BICCOS Cumulative time: 2.645475387573242
Preprocessing time: 0.11653017997741699 Inference time: 0.24813532829284668 Add cuts time: 0.017429351806640625 Cut analysis time: 0.0016543865203857422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01858 (30), -0.01850 (30), -0.01844 (30), -0.01836 (30), -0.01822 (30), -0.01808 (30), -0.01783 (30), -0.01768 (30), -0.01762 (30), -0.01754 (30), -0.01748 (30), -0.01740 (30), -0.01726 (30), -0.01711 (30), -0.01687 (30), -0.01678 (30), -0.01671 (30), -0.01650 (30), -0.01641 (30), -0.01636 (30), 
Length of domains: 2269
Time: pickout 0.0439    decision 0.1112    set_bounds 0.3296    solve 0.4979    add 0.0179    
Accumulated time: pickout 0.2733    decision 1.3346    set_bounds 1.2087    solve 3.9557    add 1.0019    
Current (lb-rhs): -0.018584251403808594
10739 domains visited
Cumulative time: 10.78171968460083

BaB round 15
batch: 2269
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 1618] [/input, 2726] [/input-8, 678] [/input-8, 1618] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.017379283905029297
10 lb beta sum: 0.3640061616897583, worst -0.016440391540527344
Time: prepare 0.1245    bound 0.4162    transfer 0.0131    finalize 0.0254    func 0.6091    
Accumulated time: func 4.7303    prepare 0.6314    bound 3.4432    transfer 0.1009    finalize 0.1393    
all_split False
======================Cut inference begins======================
max lb tensor(0.48588079) min lb tensor(-0.01643085)
Number of Verified Splits: 3686 of 4538
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 44.
#cuts 1-3: 30
#cuts 4-6: 9
#cuts 7-9: 3
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 1.0719785690307617 
BICCOS Cumulative time: 3.717453956604004
Preprocessing time: 0.35433006286621094 Inference time: 0.6823897361755371 Add cuts time: 0.0337674617767334 Cut analysis time: 0.0014913082122802734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01643 (31), -0.01635 (31), -0.01634 (31), -0.01626 (31), -0.01607 (31), -0.01597 (31), -0.01567 (31), -0.01558 (31), -0.01548 (31), -0.01539 (31), -0.01539 (31), -0.01530 (31), -0.01511 (31), -0.01502 (31), -0.01472 (31), -0.01462 (31), -0.01431 (31), -0.01424 (31), -0.01423 (31), -0.01417 (31), 
Length of domains: 852
Time: pickout 0.0459    decision 0.1345    set_bounds 0.2008    solve 0.6100    add 0.0384    
Accumulated time: pickout 0.3192    decision 1.4691    set_bounds 1.4095    solve 4.5656    add 1.0403    
Current (lb-rhs): -0.01643085479736328
11591 domains visited
Cumulative time: 12.916309356689453

BaB round 16
batch: 852
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input, 2726] [/input-8, 678] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6110509037971497, worst -0.016431808471679688
10 lb beta sum: 1.0722459554672241, worst -0.013171911239624023
Time: prepare 0.0815    bound 0.1985    transfer 0.0089    finalize 0.0090    func 0.3090    
Accumulated time: func 5.0393    prepare 0.7131    bound 3.6417    transfer 0.1098    finalize 0.1483    
all_split False
======================Cut inference begins======================
max lb tensor(0.48498702) min lb tensor(-0.01316893)
Number of Verified Splits: 1502 of 1704
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 32
#cuts 4-6: 9
#cuts 7-9: 3
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.3374440670013428 
BICCOS Cumulative time: 4.054898023605347
Preprocessing time: 0.05587959289550781 Inference time: 0.27016115188598633 Add cuts time: 0.010049819946289062 Cut analysis time: 0.0013535022735595703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01317 (32), -0.01308 (32), -0.01305 (32), -0.01296 (32), -0.01279 (32), -0.01269 (32), -0.01243 (32), -0.01233 (32), -0.01221 (32), -0.01211 (32), -0.01209 (32), -0.01199 (32), -0.01183 (32), -0.01173 (32), -0.01147 (32), -0.01138 (32), -0.01110 (32), -0.01109 (32), -0.01104 (32), -0.01102 (32), 
Length of domains: 202
Time: pickout 0.0202    decision 0.0565    set_bounds 0.0733    solve 0.3092    add 0.0020    
Accumulated time: pickout 0.3393    decision 1.5255    set_bounds 1.4828    solve 4.8749    add 1.0423    
Current (lb-rhs): -0.013168931007385254
11793 domains visited
Cumulative time: 13.724459648132324

BaB round 17
batch: 202
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input-8, 678] [/input, 1790] [/input, 1790] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.015286922454833984
10 lb beta sum: 0.788742184638977, worst -0.011844873428344727
Time: prepare 0.0103    bound 0.1532    transfer 0.0009    finalize 0.0023    func 0.1694    
Accumulated time: func 5.2087    prepare 0.7236    bound 3.7949    transfer 0.1108    finalize 0.1506    
all_split False
======================Cut inference begins======================
max lb tensor(0.24295831) min lb tensor(-0.01183480)
Number of Verified Splits: 304 of 404
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 32
#cuts 4-6: 9
#cuts 7-9: 3
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.07546424865722656 
BICCOS Cumulative time: 4.130362272262573
Preprocessing time: 0.012805938720703125 Inference time: 0.05802011489868164 Add cuts time: 0.0034058094024658203 Cut analysis time: 0.0012323856353759766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01183 (33), -0.01174 (33), -0.01171 (33), -0.01162 (33), -0.01087 (33), -0.01078 (33), -0.01075 (33), -0.01066 (33), -0.00976 (33), -0.00975 (33), -0.00968 (33), -0.00967 (33), -0.00926 (33), -0.00917 (33), -0.00915 (33), -0.00905 (33), -0.00880 (33), -0.00879 (33), -0.00873 (33), -0.00871 (33), 
Length of domains: 100
Time: pickout 0.0065    decision 0.0231    set_bounds 0.0177    solve 0.1695    add 0.0019    
Accumulated time: pickout 0.3458    decision 1.5486    set_bounds 1.5004    solve 5.0443    add 1.0442    
Current (lb-rhs): -0.011834800243377686
11893 domains visited
Cumulative time: 14.020479917526245

BaB round 18
batch: 100
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input, 1790] [/input, 1790] 
split level 1: [/input-8, 1629] [/input-8, 1629] [/input-8, 1629] [/input-8, 1629] [/input-8, 1618] [/input-8, 1618] [/input-8, 1629] [/input-8, 1629] [/input-8, 970] [/input-8, 970] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9500755071640015, worst -0.011837661266326904
10 lb beta sum: 0.9500755071640015, worst -0.011844336986541748
Time: prepare 0.0192    bound 0.1499    transfer 0.0008    finalize 0.0017    func 0.1744    
Accumulated time: func 5.3830    prepare 0.7430    bound 3.9448    transfer 0.1116    finalize 0.1523    
all_split False
======================Cut inference begins======================
max lb tensor(0.01344705) min lb tensor(-0.01183099)
Number of Verified Splits: 210 of 400
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 46.
#cuts 1-3: 32
#cuts 4-6: 9
#cuts 7-9: 3
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.05974388122558594 
BICCOS Cumulative time: 4.190106153488159
Preprocessing time: 0.011977434158325195 Inference time: 0.0433650016784668 Add cuts time: 0.0031332969665527344 Cut analysis time: 0.001268148422241211
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01183 (35), -0.01174 (35), -0.01171 (35), -0.01162 (35), -0.01087 (35), -0.01078 (35), -0.01075 (35), -0.01066 (35), -0.01060 (35), -0.01051 (35), -0.01050 (35), -0.01041 (35), -0.00975 (35), -0.00974 (35), -0.00967 (35), -0.00966 (35), -0.00965 (35), -0.00955 (35), -0.00954 (35), -0.00945 (35), 
Length of domains: 190
Time: pickout 0.0037    decision 0.0173    set_bounds 0.0293    solve 0.1745    add 0.0828    
Accumulated time: pickout 0.3496    decision 1.5659    set_bounds 1.5298    solve 5.2188    add 1.1271    
Current (lb-rhs): -0.01183098554611206
12083 domains visited
Cumulative time: 14.393025875091553

BaB round 19
batch: 190
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 844] [/input-8, 67] [/input-8, 67] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8902374505996704, worst -0.010998904705047607
10 lb beta sum: 0.8902374505996704, worst -0.011005580425262451
Time: prepare 0.0181    bound 0.1508    transfer 0.0007    finalize 0.0017    func 0.1739    
Accumulated time: func 5.5570    prepare 0.7614    bound 4.0956    transfer 0.1123    finalize 0.1540    
all_split False
======================Cut inference begins======================
max lb tensor(0.01153064) min lb tensor(-0.01099890)
Number of Verified Splits: 234 of 380
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 33
#cuts 4-6: 9
#cuts 7-9: 3
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.06300044059753418 
BICCOS Cumulative time: 4.253106594085693
Preprocessing time: 0.011558771133422852 Inference time: 0.04682731628417969 Add cuts time: 0.0033082962036132812 Cut analysis time: 0.0013060569763183594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01100 (36), -0.01088 (36), -0.01088 (36), -0.01076 (36), -0.01004 (36), -0.00992 (36), -0.00992 (36), -0.00980 (36), -0.00976 (36), -0.00966 (36), -0.00963 (36), -0.00955 (36), -0.00887 (36), -0.00887 (36), -0.00881 (36), -0.00876 (36), -0.00875 (36), -0.00871 (36), -0.00867 (36), -0.00859 (36), 
Length of domains: 146
Time: pickout 0.0176    decision 0.0218    set_bounds 0.0166    solve 0.1740    add 0.0038    
Accumulated time: pickout 0.3672    decision 1.5877    set_bounds 1.5464    solve 5.3928    add 1.1308    
Current (lb-rhs): -0.010998904705047607
12229 domains visited
Cumulative time: 14.691235303878784

BaB round 20
batch: 146
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 67] [/input-8, 67] [/input-8, 67] [/input-8, 67] [/input-8, 67] [/input-8, 67] [/input-8, 67] [/input-8, 67] [/input, 3994] [/input-8, 67] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.009248733520507812
10 lb beta sum: 0.22974181175231934, worst -0.009253889322280884
Time: prepare 0.0077    bound 0.1483    transfer 0.0014    finalize 0.0020    func 0.1614    
Accumulated time: func 5.7184    prepare 0.7693    bound 4.2439    transfer 0.1137    finalize 0.1561    
all_split False
======================Cut inference begins======================
max lb tensor(0.00426650) min lb tensor(-0.00924544)
Number of Verified Splits: 141 of 292
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 33
#cuts 4-6: 9
#cuts 7-9: 3
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.04202842712402344 
BICCOS Cumulative time: 4.295135021209717
Preprocessing time: 0.008884429931640625 Inference time: 0.029196739196777344 Add cuts time: 0.0026760101318359375 Cut analysis time: 0.0012712478637695312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00925 (37), -0.00913 (37), -0.00912 (37), -0.00900 (37), -0.00829 (37), -0.00817 (37), -0.00815 (37), -0.00804 (37), -0.00794 (37), -0.00787 (37), -0.00782 (37), -0.00775 (37), -0.00722 (37), -0.00714 (37), -0.00714 (37), -0.00710 (37), -0.00704 (37), -0.00703 (37), -0.00703 (37), -0.00699 (37), 
Length of domains: 151
Time: pickout 0.0041    decision 0.0186    set_bounds 0.0125    solve 0.1615    add 0.0022    
Accumulated time: pickout 0.3713    decision 1.6063    set_bounds 1.5589    solve 5.5544    add 1.1330    
Current (lb-rhs): -0.009245440363883972
12380 domains visited
Cumulative time: 14.933155536651611

BaB round 21
batch: 151
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] [/input-8, 1847] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4379315972328186, worst -0.007869765162467957
10 lb beta sum: 0.45622506737709045, worst -0.007860228419303894
Time: prepare 0.0146    bound 0.1493    transfer 0.0018    finalize 0.0016    func 0.1693    
Accumulated time: func 5.8877    prepare 0.7841    bound 4.3931    transfer 0.1156    finalize 0.1577    
all_split False
======================Cut inference begins======================
max lb tensor(0.00263071) min lb tensor(-0.00784306)
Number of Verified Splits: 79 of 302
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 47.
#cuts 1-3: 33
#cuts 4-6: 9
#cuts 7-9: 3
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.03006267547607422 
BICCOS Cumulative time: 4.325197696685791
Preprocessing time: 0.009408235549926758 Inference time: 0.016234636306762695 Add cuts time: 0.003164529800415039 Cut analysis time: 0.0012552738189697266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00784 (38), -0.00773 (38), -0.00772 (38), -0.00760 (38), -0.00689 (38), -0.00677 (38), -0.00676 (38), -0.00664 (38), -0.00654 (38), -0.00647 (38), -0.00641 (38), -0.00635 (38), -0.00623 (38), -0.00611 (38), -0.00610 (38), -0.00598 (38), -0.00574 (38), -0.00573 (38), -0.00573 (38), -0.00563 (38), 
Length of domains: 223
Time: pickout 0.0045    decision 0.0188    set_bounds 0.0128    solve 0.1694    add 0.0048    
Accumulated time: pickout 0.3758    decision 1.6251    set_bounds 1.5717    solve 5.7238    add 1.1378    
Current (lb-rhs): -0.007843062281608582
12603 domains visited
Cumulative time: 15.174272060394287

BaB round 22
batch: 223
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] [/input-8, 1611] 
cut re-enabled after branching node selection
0 lb beta sum: 0.4299126863479614, worst -0.007022425532341003
10 lb beta sum: 0.4299126863479614, worst -0.007016703486442566
Time: prepare 0.0214    bound 0.1507    transfer 0.0021    finalize 0.0023    func 0.1794    
Accumulated time: func 6.0672    prepare 0.8057    bound 4.5439    transfer 0.1176    finalize 0.1600    
all_split False
======================Cut inference begins======================
max lb tensor(0.01052594) min lb tensor(-0.00700049)
Number of Verified Splits: 265 of 446
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 49.
#cuts 1-3: 35
#cuts 4-6: 9
#cuts 7-9: 3
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.07628679275512695 
BICCOS Cumulative time: 4.401484489440918
Preprocessing time: 0.013295888900756836 Inference time: 0.0579533576965332 Add cuts time: 0.0037393569946289062 Cut analysis time: 0.0012981891632080078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00700 (39), -0.00689 (39), -0.00688 (39), -0.00676 (39), -0.00605 (39), -0.00593 (39), -0.00593 (39), -0.00581 (39), -0.00558 (39), -0.00550 (39), -0.00547 (39), -0.00539 (39), -0.00538 (39), -0.00528 (39), -0.00528 (39), -0.00515 (39), -0.00488 (39), -0.00487 (39), -0.00484 (39), -0.00476 (39), 
Length of domains: 181
Time: pickout 0.0060    decision 0.0225    set_bounds 0.0197    solve 0.1795    add 0.0042    
Accumulated time: pickout 0.3818    decision 1.6476    set_bounds 1.5914    solve 5.9033    add 1.1420    
Current (lb-rhs): -0.00700049102306366
12784 domains visited
Cumulative time: 15.483996152877808

BaB round 23
batch: 181
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.005360603332519531
10 lb beta sum: 0.22773729264736176, worst -0.005318552255630493
Time: prepare 0.0091    bound 0.1464    transfer 0.0011    finalize 0.0025    func 0.1614    
Accumulated time: func 6.2286    prepare 0.8151    bound 4.6902    transfer 0.1187    finalize 0.1625    
all_split False
======================Cut inference begins======================
max lb tensor(0.23576827) min lb tensor(-0.00529607)
Number of Verified Splits: 240 of 362
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 50.
#cuts 1-3: 36
#cuts 4-6: 9
#cuts 7-9: 3
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.06986618041992188 
BICCOS Cumulative time: 4.47135066986084
Preprocessing time: 0.010996818542480469 Inference time: 0.05373740196228027 Add cuts time: 0.003809213638305664 Cut analysis time: 0.0013227462768554688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00530 (40), -0.00517 (40), -0.00517 (40), -0.00505 (40), -0.00434 (40), -0.00422 (40), -0.00422 (40), -0.00410 (40), -0.00387 (40), -0.00379 (40), -0.00377 (40), -0.00370 (40), -0.00367 (40), -0.00357 (40), -0.00357 (40), -0.00353 (40), -0.00345 (40), -0.00341 (40), -0.00340 (40), -0.00329 (40), 
Length of domains: 122
Time: pickout 0.0046    decision 0.0181    set_bounds 0.0157    solve 0.1616    add 0.0014    
Accumulated time: pickout 0.3865    decision 1.6657    set_bounds 1.6071    solve 6.0648    add 1.1434    
Current (lb-rhs): -0.005296066403388977
12906 domains visited
Cumulative time: 15.756383657455444

BaB round 24
batch: 122
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1935] [/input-8, 1935] [/input-8, 1935] [/input-8, 1734] [/input-8, 1734] [/input-8, 1734] [/input-8, 1734] [/input-8, 1734] [/input-8, 1734] [/input-8, 1734] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.004163265228271484
10 lb beta sum: 0.11967841535806656, worst -0.0040992796421051025
Time: prepare 0.0063    bound 0.1485    transfer 0.0005    finalize 0.0013    func 0.1583    
Accumulated time: func 6.3869    prepare 0.8215    bound 4.8387    transfer 0.1192    finalize 0.1638    
all_split False
======================Cut inference begins======================
max lb tensor(0.23089118) min lb tensor(-0.00408387)
Number of Verified Splits: 192 of 244
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 51.
#cuts 1-3: 37
#cuts 4-6: 9
#cuts 7-9: 3
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.05612635612487793 
BICCOS Cumulative time: 4.527477025985718
Preprocessing time: 0.0076406002044677734 Inference time: 0.04404878616333008 Add cuts time: 0.003114938735961914 Cut analysis time: 0.001322031021118164
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00408 (41), -0.00397 (41), -0.00396 (41), -0.00384 (41), -0.00313 (41), -0.00301 (41), -0.00301 (41), -0.00289 (41), -0.00266 (41), -0.00258 (41), -0.00254 (41), -0.00247 (41), -0.00246 (41), -0.00235 (41), -0.00235 (41), -0.00223 (41), -0.00197 (41), -0.00196 (41), -0.00184 (41), -0.00183 (41), 
Length of domains: 52
Time: pickout 0.0035    decision 0.0181    set_bounds 0.0106    solve 0.1583    add 0.0019    
Accumulated time: pickout 0.3900    decision 1.6837    set_bounds 1.6177    solve 6.2232    add 1.1452    
Current (lb-rhs): -0.004083871841430664
12958 domains visited
Cumulative time: 16.00583291053772

BaB round 25
batch: 52
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3192] [/input, 3192] [/input, 3192] [/input, 3192] [/input, 3192] [/input, 3192] [/input, 3192] [/input, 3192] [/input, 3192] [/input, 3192] 
split level 1: [/input, 424] [/input, 424] [/input, 424] [/input, 424] [/input, 424] [/input, 424] [/input, 424] [/input, 424] [/input, 424] [/input, 424] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -7.295608520507812e-05

all verified at 4th iter
Time: prepare 0.0052    bound 0.0389    transfer 0.0008    finalize 0.0011    func 0.0473    
Accumulated time: func 6.4342    prepare 0.8269    bound 4.8776    transfer 0.1200    finalize 0.1649    
all_split False
======================Cut inference begins======================
max lb tensor(0.00514984) min lb tensor(1.79409981e-05)
Number of Verified Splits: 208 of 208
No cut inferred: All or none verified.
Total number of valid cuts: 51.
#cuts 1-3: 37
#cuts 4-6: 9
#cuts 7-9: 3
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.006464242935180664 
BICCOS Cumulative time: 4.533941268920898
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0021    decision 0.0153    set_bounds 0.0101    solve 0.0474    add 0.0001    
Accumulated time: pickout 0.3920    decision 1.6991    set_bounds 1.6278    solve 6.2706    add 1.1453    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
12958 domains visited
Cumulative time: 16.08827304840088


Properties batch 8, size 1
Remaining timeout: 182.31130051612854
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 17.6888 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 90, vnnlib ID: 90 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.92437601, -4.53821707, -1.81814766, -0.89523673, -2.18286943,
         -1.50445235, -2.81978679, -2.90949965, -4.78050327, -3.54446316]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [640]; unstable size 640; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 228, 1, 640] with unstable size 227 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 640] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 640] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [227]; unstable size 227; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 227] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 227] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.54901552, -0.55123186, -2.14694452, -2.65342474, -1.82377052,
         -2.15827703, -1.06202698,  0.01771510, -1.15435910]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.92437601, -4.53821707, -1.81814766, -0.89523673, -2.18286943,
         -1.50445235, -2.81978679, -2.90949965, -4.78050327, -3.54446316]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.92437601, -4.53821659, -1.81814742, -0.89523673, -2.18286896,
          -1.50445259, -2.81978631, -2.90949917, -4.78050327, -3.54446268],
         [-3.92437601, -4.53821659, -1.81814742, -0.89523673, -2.18286896,
          -1.50445259, -2.81978631, -2.90949917, -4.78050327, -3.54446268]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.10458970,  1.71843028, -1.00163889, -1.92454958, -0.63691735,
          -1.31533372,  0.08971286,  0.72467637]]], device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         ...,


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]],


         [[[ 1.26507962,  1.26507962,  1.28095269,  ..., -1.87777781,
            -1.87777781, -1.87777781],
           [ 1.23333359,  1.18571460,  1.34444475,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           [ 1.36031771,  1.09047651,  1.23333359,  ..., -1.86190474,
            -1.86190474, -1.86190474],
           ...,
           [-1.38571417, -1.21111107, -1.02063489,  ...,  0.42380959,
            -0.11587292, -0.17936498],
           [-1.79841268, -1.73492062, -1.63968253,  ...,  0.05873025,
            -0.54444444, -0.89365077],
           [-1.86190474, -1.86190474, -1.84603179,  ..., -0.86190474,
            -1.24285710, -1.57619035]],

          [[ 0.98228669,  0.98228669,  0.99838978,  ..., -1.86795497,
            -1.86795497, -1.86795497],
           [ 0.95008057,  0.90177143,  1.06280196,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           [ 1.07890511,  0.80515307,  0.95008057,  ..., -1.85185194,
            -1.85185194, -1.85185194],
           ...,
           [-1.44927526, -1.36875999, -1.25603855,  ..., -0.33816412,
            -0.72463763, -0.70853460],
           [-1.80354273, -1.80354273, -1.75523353,  ..., -0.57971013,
            -0.99838966, -1.25603855],
           [-1.85185194, -1.85185194, -1.86795497,  ..., -1.28824472,
            -1.54589367, -1.72302747]],

          [[ 1.12593722,  1.12593722,  1.14092970,  ..., -1.60269880,
            -1.60269880, -1.60269880],
           [ 1.09595215,  1.05097473,  1.20089996,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           [ 1.21589243,  0.96101969,  1.09595215,  ..., -1.58770621,
            -1.58770621, -1.58770621],
           ...,
           [-1.28785622, -1.18290865, -1.04797614,  ..., -0.07346311,
            -0.47826082, -0.49325335],
           [-1.57271373, -1.54272878, -1.49775124,  ..., -0.32833579,
            -0.77811092, -1.04797614],
           [-1.58770621, -1.58770621, -1.58770621,  ..., -1.01799107,
            -1.28785622, -1.49775124]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0459 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 91, vnnlib ID: 91 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.28595638,  -5.88002491, -13.45972347, -12.72046280, -11.91884041,
         -13.39254284, -13.69190216, -11.92345619, -11.07378769,  -5.33333635]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [628]; unstable size 628; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 195, 1, 628] with unstable size 194 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 628] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 628] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [194]; unstable size 194; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 194] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 194] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.77330256,  5.60239124,  4.83423805,  3.93323231,  5.32919073,
          5.82401609,  3.69637251,  3.85418439, -1.36576104]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.28595638,  -5.88002491, -13.45972347, -12.72046280, -11.91884041,
         -13.39254284, -13.69190216, -11.92345619, -11.07378769,  -5.33333635]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.28595638,  -5.88002491, -13.45972347, -12.72046280, -11.91884041,
          -13.39254284, -13.69190216, -11.92345619, -11.07378769,  -5.33333635]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.54668856]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.32222211, -1.24285710, -1.14761901,  ..., -1.32222211,
            -1.32222211, -1.21111107],
           [-1.25873005, -1.24285710, -1.16349196,  ..., -1.32222211,
            -1.32222211, -1.32222211],
           [-1.22698402, -1.22698402, -1.21111107,  ..., -1.33809519,
            -1.32222211, -1.21111107],
           ...,
           [ 0.97936511,  0.99523818,  0.99523818,  ...,  1.04285717,
             1.05873048,  1.04285717],
           [ 1.04285717,  1.04285717,  1.02698421,  ...,  1.05873048,
             1.10634947,  1.13809550],
           [ 1.04285717,  1.04285717,  1.04285717,  ...,  1.01111114,
             1.07460344,  1.07460344]],

          [[-1.56199670, -1.48148143, -1.38486302,  ..., -1.46537840,
            -1.46537840, -1.35265696],
           [-1.44927526, -1.43317223, -1.35265696,  ..., -1.46537840,
            -1.46537840, -1.46537840],
           [-1.40096617, -1.40096617, -1.38486302,  ..., -1.48148143,
            -1.46537840, -1.35265696],
           ...,
           [ 0.72463775,  0.74074084,  0.74074084,  ...,  0.86956531,
             0.88566834,  0.86956531],
           [ 0.78904998,  0.78904998,  0.77294695,  ...,  0.88566834,
             0.93397754,  0.96618366],
           [ 0.78904998,  0.78904998,  0.78904998,  ...,  0.83735919,
             0.90177143,  0.90177143]],

          [[-1.30284870, -1.22788620, -1.13793111,  ..., -1.25787115,
            -1.25787115, -1.15292358],
           [-1.21289361, -1.19790113, -1.12293863,  ..., -1.25787115,
            -1.25787115, -1.25787115],
           [-1.16791618, -1.16791618, -1.15292358,  ..., -1.27286363,
            -1.25787115, -1.15292358],
           ...,
           [ 0.84107965,  0.85607213,  0.85607213,  ...,  0.94602716,
             0.96101969,  0.94602716],
           [ 0.90104967,  0.90104967,  0.88605714,  ...,  0.96101969,
             1.00599718,  1.03598225],
           [ 0.90104967,  0.90104967,  0.90104967,  ...,  0.91604215,
             0.97601217,  0.97601217]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0678 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 92, vnnlib ID: 92 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.22173882,  -9.89736652,  -4.68373394,  -3.01329088,  -4.28179979,
          -2.86711979,  -5.53003645,  -5.05347300, -11.67127705,  -7.88633108]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [485]; unstable size 485; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 197, 1, 485] with unstable size 196 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 485] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 485] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [196]; unstable size 196; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 196] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 196] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.00222683,  5.24682665,  0.82175922, -0.20462835,  0.32712030,
          1.14493704,  1.33189201,  7.36666632,  3.64896512]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.22173882,  -9.89736652,  -4.68373394,  -3.01329088,  -4.28179979,
          -2.86711979,  -5.53003645,  -5.05347300, -11.67127705,  -7.88633108]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.24767017,  -9.97193718,  -4.73787022,  -3.23425245,  -4.31496525,
           -3.29052877,  -5.42143679,  -5.31018877, -11.66250134,  -7.98117399]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.05627632]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0061 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0707 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 93, vnnlib ID: 93 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.15195465,  -9.58116150, -14.61256504, -15.32470417, -14.07134438,
         -16.02833176, -16.91090012, -13.49322128, -10.77580357, -11.62801266]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [531]; unstable size 531; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 531] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 531] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 531] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 184] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.31977224, 3.21350312, 3.97968650, 2.74568701, 4.38296080, 5.60134363,
         1.73482811, 0.05008912, 1.12907457]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0658 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 94, vnnlib ID: 94 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.19431782, -14.89802456,  -8.13741684,  -9.92391682,  -9.58477306,
          -9.65702534, -11.04900360, -13.72198963,  -7.17759037, -14.95812511]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [488]; unstable size 488; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 144, 1, 488] with unstable size 143 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 488] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 488] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [143]; unstable size 143; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 143] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 143] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.41919065,  6.05724716,  1.13111067,  0.98754251,  0.83572471,
          2.28893924,  4.95927334, -1.78601420,  6.10188103]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.19431782, -14.89802456,  -8.13741684,  -9.92391682,  -9.58477306,
          -9.65702534, -11.04900360, -13.72198963,  -7.17759037, -14.95812511]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.19431925, -14.89802551,  -8.13741779,  -9.92391777,  -9.58477402,
           -9.65702629, -11.04900360, -13.72199059,  -7.17759132, -14.95812702],
         [ -6.19431925, -14.89802551,  -8.13741779,  -9.92391777,  -9.58477402,
           -9.65702629, -11.04900360, -13.72199059,  -7.17759132, -14.95812702]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-1.94309855, -0.95982647]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]],


         [[[-9.88888860e-01, -8.93650770e-01, -7.66666651e-01,  ...,
            -5.12698412e-01, -2.26984024e-01,  1.36031771e+00],
           [-9.73015904e-01, -9.09523785e-01, -8.14285696e-01,  ...,
            -5.76190472e-01, -4.33333218e-01,  1.53968334e-01],
           [-8.77777755e-01, -8.61904740e-01, -7.82539666e-01,  ...,
            -5.12698412e-01, -4.49206233e-01, -6.82538673e-02],
           ...,
           [-1.27460313e+00, -1.16349196e+00, -1.09999990e+00,  ...,
            -1.14761901e+00, -9.73015904e-01, -8.41268823e-02],
           [-9.73015904e-01, -9.25396800e-01, -8.93650770e-01,  ...,
            -9.25396800e-01, -7.66666651e-01, -6.82538673e-02],
           [ 8.84127021e-01, -1.31745934e-01, -1.95237994e-01,  ...,
            -2.26984024e-01, -2.11111009e-01,  1.53968334e-01]],

          [[ 1.93236828e-01,  3.54267418e-01,  4.34782714e-01,  ...,
             6.60225511e-01,  6.44122481e-01,  1.57810009e+00],
           [ 3.22061300e-01,  4.34782714e-01,  4.83091891e-01,  ...,
             6.76328599e-01,  5.79710245e-01,  4.66988832e-01],
           [ 3.38164359e-01,  4.18679655e-01,  4.50885773e-01,  ...,
             6.44122481e-01,  5.31401038e-01,  2.25442946e-01],
           ...,
           [ 1.22934580e-07,  1.12721533e-01,  1.28824592e-01,  ...,
             2.41546005e-01,  1.12721533e-01,  1.44927651e-01],
           [ 3.22062373e-02, -1.61029361e-02,  1.61031820e-02,  ...,
             1.28824592e-01,  1.61031820e-02,  1.12721533e-01],
           [ 1.30434811e+00,  1.12721533e-01,  9.66184735e-02,  ...,
             1.44927651e-01,  9.66184735e-02,  1.44927651e-01]],

          [[ 1.11094475e+00,  1.24587750e+00,  1.23088503e+00,  ...,
             1.47076499e+00,  1.33583248e+00,  1.84557760e+00],
           [ 1.23088503e+00,  1.32084000e+00,  1.29085493e+00,  ...,
             1.54572761e+00,  1.45577252e+00,  1.00599718e+00],
           [ 1.15592217e+00,  1.21589243e+00,  1.17091501e+00,  ...,
             1.47076499e+00,  1.41079497e+00,  8.11094642e-01],
           ...,
           [ 7.81109631e-01,  1.06596720e+00,  1.06596720e+00,  ...,
             1.06596720e+00,  9.46027160e-01,  8.26087117e-01],
           [ 6.91154599e-01,  8.56072128e-01,  8.56072128e-01,  ...,
             8.86057138e-01,  7.81109631e-01,  7.81109631e-01],
           [ 1.59070504e+00,  7.81109631e-01,  7.06147075e-01,  ...,
             7.21139610e-01,  6.61169589e-01,  7.06147075e-01]]]]],
       device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0717 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 95, vnnlib ID: 95 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.28730583,  -6.10024929,  -9.28009796,  -8.44915771,  -9.51987553,
          -8.47933578,  -8.97727776, -11.69865417,  -9.80428314,  -9.38548374]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [510]; unstable size 510; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 179, 1, 510] with unstable size 178 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 510] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 510] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [178]; unstable size 178; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 178] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 178] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.50108552,  1.35111046,  0.54155397,  1.42684984,  0.50430441,
          1.14256835,  3.30734301,  2.23950100,  2.31573248]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.28730583,  -6.10024929,  -9.28009796,  -8.44915771,  -9.51987553,
          -8.47933578,  -8.97727776, -11.69865417,  -9.80428314,  -9.38548374]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.14it/s]100%|██████████| 1/1 [00:00<00:00,  9.13it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.63890123,  -6.32812786,  -8.66560364,  -7.82581139,  -8.96019840,
           -7.87306643,  -8.56936741, -11.11590290,  -9.56170082,  -9.26755810]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.31077337]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1120 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 12.91925048828125
alpha/beta optimization time: 1.1881909370422363
initial alpha-crown bounds: tensor([[-0.44016135,  1.42102575,  0.61154604,  1.51242924,  0.57645798,
          1.21278524,  3.40189791,  2.28027201,  2.34299707]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.4401613473892212
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6360113620758
Verifying property 0 with 1 instances.
##### Instance 95 first 10 spec matrices: 
tensor([[[-1.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.44016135]], device='cuda:0') need to verify.
Model prediction is: tensor([ -7.28730583,  -6.10024929,  -9.28009796,  -8.44915771,  -9.51987553,
         -8.47933578,  -8.97727776, -11.69865417,  -9.80428314,  -9.38548374],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.44016135]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 510
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 175
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 703
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.918212890625e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.440157413482666
10 lb beta sum: 0.0, worst -0.4401658773422241
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0526    transfer 0.0001    finalize 0.0001    func 0.0531    
Accumulated time: func 0.0531    prepare 0.0002    bound 0.0526    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 28] 
split level 2: [/input-12, 6] 
split level 3: [/input-12, 15] 
split level 4: [/input-12, 58] 
split level 5: [/input-12, 29] 
split level 6: [/input-12, 35] 
split level 7: [/input-12, 82] 
split level 8: [/input-12, 45] 
split level 9: [/input-12, 93] 
split level 10: [/input-8, 1428] 
split level 11: [/input-12, 11] 
split level 12: [/input-8, 781] 
split level 13: [/input-8, 893] 
split level 14: [/input-8, 1422] 
split level 15: [/input-12, 90] 
split level 16: [/input-8, 162] 
split level 17: [/input-8, 173] 
split level 18: [/input-8, 1421] 
split level 19: [/input-8, 894] 
split level 20: [/input-8, 697] 
split level 21: [/input, 1771] 
split level 22: [/input-8, 1916] 
split level 23: [/input-8, 557] 
split level 24: [/input-8, 790] 
split level 25: [/input-8, 655] 
split level 26: [/input-8, 1019] 
split level 27: [/input-8, 597] 
split level 28: [/input-8, 130] 
split level 29: [/input-8, 938] 
split level 30: [/input-8, 797] 
split level 31: [/input-8, 1010] 
split level 32: [/input-8, 793] 
split level 33: [/input-8, 565] 
split level 34: [/input-8, 672] 
split level 35: [/input-8, 1938] 
split level 36: [/input-8, 661] 
split level 37: [/input-8, 618] 
split level 38: [/input-8, 1466] 
split level 39: [/input-8, 1875] 
split level 40: [/input, 2537] 
split level 41: [/input-8, 680] 
split level 42: [/input-8, 1868] 
split level 43: [/input, 995] 
split level 44: [/input-8, 1431] 
split level 45: [/input, 2131] 
split level 46: [/input-8, 1090] 
split level 47: [/input, 1772] 
split level 48: [/input-8, 129] 
split level 49: [/input, 1457] 
split level 50: [/input, 1640] 
split level 51: [/input-8, 1619] 
split level 52: [/input, 3523] 
split level 53: [/input-8, 68] 
split level 54: [/input-8, 936] 
split level 55: [/input, 3505] 
split level 56: [/input-8, 1135] 
split level 57: [/input-8, 503] 
split level 58: [/input, 1708] 
split level 59: [/input, 2541] 
split level 60: [/input, 404] 
split level 61: [/input, 2520] 
split level 62: [/input-8, 1576] 
split level 63: [/input-8, 591] 
split level 64: [/input, 2456] 
split level 65: [/input, 3254] 
split level 66: [/input, 2540] 
split level 67: [/input-8, 985] 
split level 68: [/input, 3255] 
split level 69: [/input, 916] 
split level 70: [/input, 3990] 
split level 71: [/input, 822] 
split level 72: [/input, 2750] 
split level 73: [/input-8, 944] 
split level 74: [/input, 3397] 
split level 75: [/input, 2510] 
split level 76: [/input, 1474] 
split level 77: [/input, 2726] 
split level 78: [/input-8, 1011] 
split level 79: [/input, 2150] 
split level 80: [/input, 2252] 
split level 81: [/input, 2766] 
split level 82: [/input, 1369] 
split level 83: [/input, 3489] 
split level 84: [/input, 1502] 
split level 85: [/input, 2536] 
split level 86: [/input, 238] 
split level 87: [/input-8, 1423] 
split level 88: [/input, 2747] 
split level 89: [/input, 3995] 
split level 90: [/input, 2524] 
split level 91: [/input, 2542] 
split level 92: [/input, 3550] 
split level 93: [/input, 2745] 
split level 94: [/input, 966] 
split level 95: [/input-8, 1631] 
split level 96: [/input, 2772] 
split level 97: [/input, 3504] 
split level 98: [/input, 2525] 
split level 99: [/input-8, 1478] 
split level 100: [/input, 1013] 
split level 101: [/input, 4051] 
split level 102: [/input, 3267] 
split level 103: [/input, 4025] 
split level 104: [/input, 227] 
split level 105: [/input, 242] 
split level 106: [/input-8, 1279] 
split level 107: [/input, 180] 
split level 108: [/input, 957] 
split level 109: [/input, 2538] 
split level 110: [/input, 830] 
split level 111: [/input-8, 1623] 
split level 112: [/input, 3393] 
split level 113: [/input, 2279] 
split level 114: [/input, 241] 
split level 115: [/input-8, 1474] 
split level 116: [/input, 197] 
split level 117: [/input-8, 1597] 
split level 118: [/input, 1575] 
split level 119: [/input-8, 835] 
split level 120: [/input, 3564] 
split level 121: [/input-8, 1446] 
split level 122: [/input, 2526] 
split level 123: [/input, 986] 
split level 124: [/input, 806] 
split level 125: [/input, 3249] 
split level 126: [/input, 4052] 
split level 127: [/input, 580] 
split level 128: [/input-8, 871] 
split level 129: [/input, 2509] 
split level 130: [/input, 3418] 
split level 131: [/input, 170] 
split level 132: [/input, 4059] 
split level 133: [/input, 228] 
split level 134: [/input-8, 510] 
split level 135: [/input, 1019] 
split level 136: [/input, 3553] 
split level 137: [/input, 3473] 
split level 138: [/input, 970] 
split level 139: [/input, 3434] 
split level 140: [/input, 499] 
split level 141: [/input, 3304] 
split level 142: [/input, 979] 
split level 143: [/input, 1401] 
split level 144: [/input, 933] 
split level 145: [/input, 229] 
split level 146: [/input, 950] 
split level 147: [/input, 4066] 
split level 148: [/input-8, 905] 
split level 149: [/input, 1516] 
split level 150: [/input, 3251] 
split level 151: [/input, 3306] 
split level 152: [/input-8, 934] 
split level 153: [/input, 1343] 
split level 154: [/input-8, 296] 
split level 155: [/input, 3265] 
split level 156: [/input, 1425] 
split level 157: [/input-8, 1947] 
split level 158: [/input, 2678] 
split level 159: [/input, 3270] 
split level 160: [/input, 4040] 
split level 161: [/input, 1399] 
split level 162: [/input-8, 1617] 
split level 163: [/input, 3268] 
split level 164: [/input, 2126] 
split level 165: [/input, 1014] 
split level 166: [/input, 1490] 
split level 167: [/input, 972] 
split level 168: [/input-8, 973] 
split level 169: [/input, 1137] 
split level 170: [/input, 815] 
split level 171: [/input-8, 1594] 
split level 172: [/input, 1501] 
split level 173: [/input, 2255] 
split level 174: [/input-8, 990] 
split level 175: [/input, 1154] 
split level 176: [/input-8, 511] 
split level 177: [/input, 2481] 
split level 178: [/input, 1008] 
split level 179: [/input, 4074] 
split level 180: [/input, 3172] 
split level 181: [/input-8, 1596] 
split level 182: [/input, 4065] 
split level 183: [/input, 2111] 
split level 184: [/input, 1770] 
split level 185: [/input, 3554] 
split level 186: [/input, 3281] 
split level 187: [/input, 2556] 
split level 188: [/input, 3305] 
split level 189: [/input-8, 1432] 
split level 190: [/input, 3520] 
split level 191: [/input, 1837] 
split level 192: [/input, 145] 
split level 193: [/input, 1500] 
split level 194: [/input-8, 1584] 
split level 195: [/input, 3974] 
split level 196: [/input, 3494] 
split level 197: [/input, 1051] 
split level 198: [/input, 2204] 
split level 199: [/input, 1788] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.44006967544555664
10 lb beta sum: 0.0, worst -0.44007253646850586
Time: prepare 0.0118    bound 0.0979    transfer 0.0020    finalize 0.0026    func 0.1169    
Accumulated time: func 0.1700    prepare 0.0220    bound 0.1505    transfer 0.0021    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.35097420) min lb tensor(-0.44006526)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010990142822265625 
BICCOS Cumulative time: 0.010990142822265625
Preprocessing time: 0.010148286819458008 Inference time: 0.000164031982421875 Add cuts time: 8.296966552734375e-05 Cut analysis time: 0.0005948543548583984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.42516 (1), -0.42422 (1), -0.42385 (1), -0.42276 (1), -0.42272 (1), -0.42075 (1), -0.42058 (1), -0.42047 (1), -0.42042 (1), -0.42036 (1), -0.41967 (1), -0.41944 (1), -0.41851 (1), -0.41801 (1), -0.41658 (1), -0.41579 (1), -0.41558 (1), -0.41538 (1), -0.41488 (1), -0.41405 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5123    set_bounds 0.0110    solve 0.1170    add 0.0704    
Accumulated time: pickout 0.0003    decision 0.5123    set_bounds 0.0110    solve 0.1170    add 0.0704    
Current (lb-rhs): -0.42515623569488525
50 domains visited
Cumulative time: 0.7902328968048096

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 6] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] 
split level 1: [/input-12, 15] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 15] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
split level 2: [/input-12, 35] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 35] [/input-12, 35] [/input-12, 15] [/input-12, 15] [/input-12, 15] [/input-12, 15] 
split level 3: [/input-12, 82] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 82] [/input-12, 82] [/input-12, 35] [/input-12, 82] [/input-12, 82] [/input-12, 35] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.37531232833862305
10 lb beta sum: 0.6084479093551636, worst -0.36283358931541443
Time: prepare 0.0072    bound 0.1158    transfer 0.0008    finalize 0.0023    func 0.1286    
Accumulated time: func 0.2986    prepare 0.0294    bound 0.2663    transfer 0.0029    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.36320043) min lb tensor(-0.36278141)
Number of Verified Splits: 75 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 11
#cuts >= 20: 0
BICCOS time: 0.016960620880126953 
BICCOS Cumulative time: 0.027950763702392578
Preprocessing time: 0.011905431747436523 Inference time: 0.0027861595153808594 Add cuts time: 0.0018875598907470703 Cut analysis time: 0.0003814697265625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.14133 (2), -0.14125 (2), -0.14114 (2), -0.14068 (2), -0.14013 (2), -0.14011 (2), -0.13621 (2), -0.13579 (2), -0.13516 (2), -0.13380 (2), -0.12988 (2), -0.12910 (2), -0.12674 (2), -0.12670 (2), -0.12171 (2), -0.12058 (2), -0.11937 (2), -0.11934 (2), -0.11858 (2), -0.11746 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0195    set_bounds 0.0127    solve 0.1287    add 0.1019    
Accumulated time: pickout 0.0014    decision 0.5319    set_bounds 0.0237    solve 0.2457    add 0.1723    
Current (lb-rhs): -0.14132505655288696
100 domains visited
Cumulative time: 1.0712790489196777

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 28] [/input-12, 28] [/input-12, 6] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] [/input-12, 28] 
split level 1: [/input-12, 6] [/input-12, 6] [/input-12, 15] [/input-12, 15] [/input-12, 6] [/input-12, 15] [/input-12, 15] [/input-12, 29] [/input-12, 6] [/input-12, 6] 
split level 2: [/input-12, 15] [/input-12, 15] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 15] [/input-12, 35] [/input-12, 29] 
split level 3: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.13347864151000977
10 lb beta sum: 1.1943857669830322, worst -0.04298520088195801
Time: prepare 0.0065    bound 0.1156    transfer 0.0007    finalize 0.0024    func 0.1278    
Accumulated time: func 0.4264    prepare 0.0361    bound 0.3819    transfer 0.0036    finalize 0.0075    
all_split False
======================Cut inference begins======================
max lb tensor(0.56122589) min lb tensor(-0.00378966)
Number of Verified Splits: 399 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.03670835494995117 
BICCOS Cumulative time: 0.06465911865234375
Preprocessing time: 0.011623144149780273 Inference time: 0.01717829704284668 Add cuts time: 0.007575273513793945 Cut analysis time: 0.00033164024353027344
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0192    set_bounds 0.0154    solve 0.1280    add 0.0192    
Accumulated time: pickout 0.0023    decision 0.5511    set_bounds 0.0392    solve 0.3737    add 0.1915    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 15]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.85760478e-13, 7.73149580e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 15, 28]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.85760478e-13, 2.51430392e-01, 1.56405315e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 15, 28]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([1.85760478e-13, 2.51430392e-01, 2.63936877e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 35, 28]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 1.21988997e-01, 1.84670672e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 35, 28]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 1.21988997e-01, 2.85532832e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 35, 28]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 1.40181467e-01, 2.02154443e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([ 6, 35, 28]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 1.40181467e-01, 2.94486701e-01]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  7
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3290797472000122
10 lb beta sum: 1.0122582912445068, worst -0.14498043060302734
Time: prepare 0.0004    bound 0.1181    transfer 0.0002    finalize 0.0002    func 0.1189    
Accumulated time: func 0.5453    prepare 0.0365    bound 0.5000    transfer 0.0037    finalize 0.0076    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 28] 
split level 2: [/input-12, 58] 
split level 3: [/input-12, 29] 
split level 4: [/input-12, 35] 
split level 5: [/input-12, 82] 
split level 6: [/input-12, 93] 
split level 7: [/input-8, 173] 
cut re-enabled after branching node selection
0 lb beta sum: 2.389012336730957, worst 0.0322951078414917

all verified at 0th iter
Time: prepare 0.0110    bound 0.0052    transfer 0.0013    finalize 0.0012    func 0.0203    
Accumulated time: func 0.5656    prepare 0.0479    bound 0.5052    transfer 0.0050    finalize 0.0088    
all_split False
======================Cut inference begins======================
max lb tensor(1.61310661) min lb tensor(0.03229511)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 10.
#cuts 1-3: 10
#cuts >= 20: 0
BICCOS time: 0.0072596073150634766 
BICCOS Cumulative time: 0.07191872596740723
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.0216    set_bounds 0.0261    solve 0.0204    add 0.0003    
Accumulated time: pickout 0.0027    decision 0.5727    set_bounds 0.0653    solve 0.3940    add 0.1918    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
Cumulative time: 1.5031826496124268


Properties batch 1, size 1
Remaining timeout: 196.91812133789062
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 196.91804194450378
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 196.9175524711609
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 196.9175145626068
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 196.91749501228333
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 196.91747570037842
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 196.91745734214783
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 196.9174382686615
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.0826 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 96, vnnlib ID: 96 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.44995165, -10.24393463,  -3.02499723,  -5.52738094,  -3.64600706,
          -4.67218781,  -4.64619398,  -5.73077822, -10.13163280,  -9.56945515]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [457]; unstable size 457; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 224, 1, 457] with unstable size 223 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 457] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 457] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [223]; unstable size 223; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 223] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 223] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.06982172,  3.56651115, -3.10427308, -0.30050802, -2.24185705,
         -1.43835652, -0.57025623,  3.45370197,  3.13693833]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.44995165, -10.24393463,  -3.02499723,  -5.52738094,  -3.64600706,
          -4.67218781,  -4.64619398,  -5.73077822, -10.13163280,  -9.56945515]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -5.44995213, -10.24393463,  -3.02499771,  -5.52738142,  -3.64600754,
           -4.67218828,  -4.64619493,  -5.73077869, -10.13163280,  -9.56945324],
         [ -5.44995213, -10.24393463,  -3.02499771,  -5.52738142,  -3.64600754,
           -4.67218828,  -4.64619493,  -5.73077869, -10.13163280,  -9.56945324]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.80375719, -1.62119722,  0.88118649, -1.00018740,  0.02599335,
           1.08458376]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]],


         [[[ 0.58253974,  0.59841275,  0.64603180,  ...,  0.97936511,
             1.09047651,  1.01111114],
           [ 0.69365084,  0.63015878,  0.66190481,  ...,  1.05873048,
             1.12222254,  1.07460344],
           [ 0.90000004,  0.69365084,  0.67777783,  ...,  1.04285717,
             1.04285717,  0.99523818],
           ...,
           [-0.14761895, -0.02063482,  0.13809532,  ...,  0.42380959,
             0.50317466,  0.64603180],
           [-0.68730158, -0.36984116, -0.02063482,  ...,  0.55079371,
             0.53492069,  0.61428577],
           [-0.71904761, -0.49682540, -0.09999990,  ...,  0.69365084,
             0.61428577,  0.64603180]],

          [[ 1.07890511,  1.11111140,  1.12721443,  ...,  1.46537876,
             1.54589403,  1.48148179],
           [ 1.17552364,  1.11111140,  1.15942061,  ...,  1.52979100,
             1.57810009,  1.54589403],
           [ 1.35265732,  1.17552364,  1.15942061,  ...,  1.51368785,
             1.52979100,  1.51368785],
           ...,
           [-0.43478248, -0.30595800, -0.12882435,  ...,  0.62801939,
             0.82125610,  1.09500813],
           [-0.88566822, -0.61191624, -0.19323659,  ...,  1.01449287,
             0.96618366,  0.83735919],
           [-0.90177131, -0.70853460, -0.14492741,  ...,  1.20772982,
             0.90177143,  0.83735919]],

          [[-0.26836565, -0.37331331, -0.44827583,  ...,  0.25637197,
             0.48125952,  0.37631202],
           [-0.28335828, -0.56821585, -0.73313338,  ...,  0.25637197,
             0.33133450,  0.16641696],
           [ 0.01649191, -0.74812591, -1.24287868,  ...,  0.04647692,
            -0.04347810, -0.22338814],
           ...,
           [-1.03298354, -1.03298354, -1.15292358,  ..., -0.71814090,
            -0.95802099, -0.91304344],
           [-1.46776617, -1.31784117, -1.25787115,  ..., -1.03298354,
            -0.97301346, -0.62818587],
           [-1.31784117, -1.28785622, -1.33283365,  ..., -0.74812591,
            -0.53823084, -0.40329832]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0859 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 97, vnnlib ID: 97 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.42443323, -12.86629391,  -5.06406689,  -6.59175348,  -5.65273857,
          -7.37562561,  -6.97437239,  -7.97660685,  -9.45366764, -11.25179768]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [815]; unstable size 815; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 348, 1, 815] with unstable size 347 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 815] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 815] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [347]; unstable size 347; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 347] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 347] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.99483001,  5.88476849,  0.52514827, -0.25146756,  1.10865986,
          0.87214220,  1.88426137,  2.11473441,  4.06170082]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.42443323, -12.86629391,  -5.06406689,  -6.59175348,  -5.65273857,
          -7.37562561,  -6.97437239,  -7.97660685,  -9.45366764, -11.25179768]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.15it/s]100%|██████████| 1/1 [00:00<00:00,  9.14it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.91634750, -12.22560024,  -4.62670612,  -5.97058296,  -4.77927256,
           -6.74498940,  -6.27670527,  -7.29330587,  -8.81531429, -10.70232105]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.15256643]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1121 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 18.19915771484375
alpha/beta optimization time: 1.2075231075286865
initial alpha-crown bounds: tensor([[ 1.10888255,  6.06384802,  0.59163487, -0.20346987,  1.20185697,
          0.91255474,  1.97026205,  2.29743767,  4.25615025]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.2034698724746704
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.61088228225708
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.61084270477295
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.6108160018921
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.61079263687134
Verifying property 3 with 1 instances.
##### Instance 97 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.20346987]], device='cuda:0') need to verify.
Model prediction is: tensor([ -7.42443323, -12.86629391,  -5.06406689,  -6.59175348,  -5.65273857,
         -7.37562561,  -6.97437239,  -7.97660685,  -9.45366764, -11.25179768],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.20346987]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 815
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 334
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 1167
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010895729064941406
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20346948504447937
10 lb beta sum: 0.0, worst -0.20347553491592407
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0527    transfer 0.0001    finalize 0.0001    func 0.0532    
Accumulated time: func 0.0532    prepare 0.0002    bound 0.0527    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 32] 
split level 3: [/input-12, 33] 
split level 4: [/input-8, 289] 
split level 5: [/input-8, 457] 
split level 6: [/input-12, 60] 
split level 7: [/input-8, 290] 
split level 8: [/input-8, 843] 
split level 9: [/input-8, 1412] 
split level 10: [/input-8, 1003] 
split level 11: [/input, 2628] 
split level 12: [/input, 2629] 
split level 13: [/input-8, 116] 
split level 14: [/input-8, 421] 
split level 15: [/input-8, 866] 
split level 16: [/input-8, 1420] 
split level 17: [/input-8, 1749] 
split level 18: [/input-8, 1748] 
split level 19: [/input-8, 618] 
split level 20: [/input-8, 1756] 
split level 21: [/input, 476] 
split level 22: [/input-8, 1322] 
split level 23: [/input, 2630] 
split level 24: [/input-8, 2008] 
split level 25: [/input-8, 617] 
split level 26: [/input-8, 1490] 
split level 27: [/input-8, 310] 
split level 28: [/input-8, 619] 
split level 29: [/input-8, 1859] 
split level 30: [/input-8, 858] 
split level 31: [/input-8, 1443] 
split level 32: [/input, 2105] 
split level 33: [/input-8, 429] 
split level 34: [/input-8, 1747] 
split level 35: [/input, 3947] 
split level 36: [/input, 460] 
split level 37: [/input, 329] 
split level 38: [/input-8, 117] 
split level 39: [/input-8, 1004] 
split level 40: [/input, 475] 
split level 41: [/input-8, 1459] 
split level 42: [/input, 620] 
split level 43: [/input-8, 1966] 
split level 44: [/input, 330] 
split level 45: [/input-8, 489] 
split level 46: [/input-8, 2036] 
split level 47: [/input-8, 995] 
split level 48: [/input-8, 1482] 
split level 49: [/input-8, 932] 
split level 50: [/input, 2965] 
split level 51: [/input-8, 477] 
split level 52: [/input, 2326] 
split level 53: [/input-8, 456] 
split level 54: [/input-8, 473] 
split level 55: [/input-8, 928] 
split level 56: [/input, 3148] 
split level 57: [/input-8, 874] 
split level 58: [/input-8, 1331] 
split level 59: [/input, 2122] 
split level 60: [/input-8, 1460] 
split level 61: [/input, 3494] 
split level 62: [/input-8, 978] 
split level 63: [/input-8, 291] 
split level 64: [/input, 2642] 
split level 65: [/input, 3692] 
split level 66: [/input, 1097] 
split level 67: [/input, 236] 
split level 68: [/input, 458] 
split level 69: [/input-8, 1757] 
split level 70: [/input-8, 963] 
split level 71: [/input, 1302] 
split level 72: [/input-8, 1011] 
split level 73: [/input, 2137] 
split level 74: [/input-8, 481] 
split level 75: [/input-8, 414] 
split level 76: [/input, 1557] 
split level 77: [/input-8, 929] 
split level 78: [/input-8, 413] 
split level 79: [/input, 2981] 
split level 80: [/input, 1590] 
split level 81: [/input, 2359] 
split level 82: [/input, 426] 
split level 83: [/input, 3163] 
split level 84: [/input, 102] 
split level 85: [/input, 1370] 
split level 86: [/input, 3130] 
split level 87: [/input-8, 1427] 
split level 88: [/input-8, 264] 
split level 89: [/input, 3178] 
split level 90: [/input, 361] 
split level 91: [/input, 313] 
split level 92: [/input, 3515] 
split level 93: [/input, 2949] 
split level 94: [/input-8, 994] 
split level 95: [/input, 2155] 
split level 96: [/input-8, 2037] 
split level 97: [/input, 408] 
split level 98: [/input, 2087] 
split level 99: [/input-8, 1491] 
split level 100: [/input, 2236] 
split level 101: [/input-8, 1570] 
split level 102: [/input-8, 2033] 
split level 103: [/input-8, 940] 
split level 104: [/input, 132] 
split level 105: [/input, 252] 
split level 106: [/input, 2232] 
split level 107: [/input, 3195] 
split level 108: [/input, 1556] 
split level 109: [/input-8, 1323] 
split level 110: [/input-8, 2000] 
split level 111: [/input, 1368] 
split level 112: [/input, 3946] 
split level 113: [/input, 3096] 
split level 114: [/input-8, 474] 
split level 115: [/input-8, 948] 
split level 116: [/input-8, 620] 
split level 117: [/input-8, 2001] 
split level 118: [/input, 2392] 
split level 119: [/input-8, 586] 
split level 120: [/input, 2235] 
split level 121: [/input-8, 1483] 
split level 122: [/input, 3400] 
split level 123: [/input-8, 1489] 
split level 124: [/input-8, 859] 
split level 125: [/input, 2343] 
split level 126: [/input, 2342] 
split level 127: [/input-8, 1950] 
split level 128: [/input, 3180] 
split level 129: [/input, 3912] 
split level 130: [/input-8, 1765] 
split level 131: [/input-8, 1568] 
split level 132: [/input, 2357] 
split level 133: [/input, 134] 
split level 134: [/input-8, 1554] 
split level 135: [/input, 3177] 
split level 136: [/input, 2325] 
split level 137: [/input, 2071] 
split level 138: [/input-8, 1576] 
split level 139: [/input, 3131] 
split level 140: [/input-8, 1426] 
split level 141: [/input, 2154] 
split level 142: [/input, 3690] 
split level 143: [/input-8, 1986] 
split level 144: [/input, 3923] 
split level 145: [/input-8, 397] 
split level 146: [/input, 2361] 
split level 147: [/input, 1317] 
split level 148: [/input-8, 979] 
split level 149: [/input, 2268] 
split level 150: [/input, 2950] 
split level 151: [/input-8, 1006] 
split level 152: [/input, 2373] 
split level 153: [/input, 3655] 
split level 154: [/input-8, 126] 
split level 155: [/input, 2425] 
split level 156: [/input, 1446] 
split level 157: [/input, 3192] 
split level 158: [/input, 2067] 
split level 159: [/input-8, 450] 
split level 160: [/input-8, 1553] 
split level 161: [/input, 3658] 
split level 162: [/input-8, 1552] 
split level 163: [/input, 2262] 
split level 164: [/input, 2072] 
split level 165: [/input, 4009] 
split level 166: [/input, 2422] 
split level 167: [/input, 3095] 
split level 168: [/input, 2360] 
split level 169: [/input, 3113] 
split level 170: [/input, 3724] 
split level 171: [/input, 3708] 
split level 172: [/input, 2948] 
split level 173: [/input, 2982] 
split level 174: [/input-8, 495] 
split level 175: [/input, 2421] 
split level 176: [/input, 3189] 
split level 177: [/input, 3492] 
split level 178: [/input, 2243] 
split level 179: [/input-8, 867] 
split level 180: [/input, 2227] 
split level 181: [/input, 114] 
split level 182: [/input, 3660] 
split level 183: [/input, 2563] 
split level 184: [/input, 220] 
split level 185: [/input, 1338] 
split level 186: [/input, 2967] 
split level 187: [/input, 1572] 
split level 188: [/input, 116] 
split level 189: [/input, 2054] 
split level 190: [/input, 2375] 
split level 191: [/input, 360] 
split level 192: [/input, 3212] 
split level 193: [/input, 3350] 
split level 194: [/input-8, 1001] 
split level 195: [/input, 117] 
split level 196: [/input, 3642] 
split level 197: [/input, 1484] 
split level 198: [/input, 2884] 
split level 199: [/input, 2997] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20346960425376892
10 lb beta sum: 0.0, worst -0.20347502827644348
Time: prepare 0.0118    bound 0.0974    transfer 0.0021    finalize 0.0030    func 0.1169    
Accumulated time: func 0.1701    prepare 0.0221    bound 0.1501    transfer 0.0022    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.04398483) min lb tensor(-0.20346943)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010545492172241211 
BICCOS Cumulative time: 0.010545492172241211
Preprocessing time: 0.010137081146240234 Inference time: 0.00012087821960449219 Add cuts time: 5.888938903808594e-05 Cut analysis time: 0.00022864341735839844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.19579 (1), -0.19577 (1), -0.19563 (1), -0.19537 (1), -0.19524 (1), -0.19520 (1), -0.19499 (1), -0.19495 (1), -0.19479 (1), -0.19442 (1), -0.19434 (1), -0.19433 (1), -0.19426 (1), -0.19424 (1), -0.19423 (1), -0.19393 (1), -0.19365 (1), -0.19335 (1), -0.19321 (1), -0.19306 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5245    set_bounds 0.0092    solve 0.1171    add 0.0870    
Accumulated time: pickout 0.0003    decision 0.5245    set_bounds 0.0092    solve 0.1171    add 0.0870    
Current (lb-rhs): -0.19579467177391052
50 domains visited
Cumulative time: 0.8177073001861572

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 46] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 1: [/input-12, 46] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
split level 3: [/input-8, 429] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-8, 290] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1901341676712036
10 lb beta sum: 0.40796828269958496, worst -0.1628500074148178
Time: prepare 0.0076    bound 0.1171    transfer 0.0008    finalize 0.0024    func 0.1305    
Accumulated time: func 0.3006    prepare 0.0299    bound 0.2672    transfer 0.0030    finalize 0.0056    
all_split False
======================Cut inference begins======================
max lb tensor(0.22742003) min lb tensor(-0.16281155)
Number of Verified Splits: 99 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01758098602294922 
BICCOS Cumulative time: 0.02812647819519043
Preprocessing time: 0.011923551559448242 Inference time: 0.00350189208984375 Add cuts time: 0.001909017562866211 Cut analysis time: 0.0002465248107910156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04542 (2), -0.04449 (2), -0.04439 (2), -0.04424 (2), -0.04379 (2), -0.04361 (2), -0.04301 (2), -0.04264 (2), -0.04241 (2), -0.04182 (2), -0.04168 (2), -0.04151 (2), -0.04139 (2), -0.04121 (2), -0.04113 (2), -0.04091 (2), -0.04069 (2), -0.04058 (2), -0.04027 (2), -0.03996 (2), 
Length of domains: 50
Time: pickout 0.0016    decision 0.0196    set_bounds 0.0114    solve 0.1305    add 0.0831    
Accumulated time: pickout 0.0019    decision 0.5441    set_bounds 0.0206    solve 0.2476    add 0.1701    
Current (lb-rhs): -0.045421987771987915
100 domains visited
Cumulative time: 1.081786870956421

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 1: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
split level 2: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-8, 289] [/input-12, 33] [/input-8, 289] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 3: [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input, 2072] [/input-8, 290] [/input-8, 290] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0777910053730011
10 lb beta sum: 0.5109068751335144, worst -0.047895222902297974
Time: prepare 0.0083    bound 0.1175    transfer 0.0007    finalize 0.0024    func 0.1321    
Accumulated time: func 0.4327    prepare 0.0385    bound 0.3847    transfer 0.0037    finalize 0.0080    
all_split False
======================Cut inference begins======================
max lb tensor(0.17879480) min lb tensor(-0.04343298)
Number of Verified Splits: 108 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 6
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.020851612091064453 
BICCOS Cumulative time: 0.04897809028625488
Preprocessing time: 0.011818170547485352 Inference time: 0.0040051937103271484 Add cuts time: 0.004508256912231445 Cut analysis time: 0.0005199909210205078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01233 (3), -0.01228 (3), -0.01217 (3), -0.01176 (3), -0.01173 (3), -0.01172 (3), -0.01160 (3), -0.01152 (3), -0.01137 (3), -0.01133 (3), -0.01128 (3), -0.01122 (3), -0.01106 (3), -0.01089 (3), -0.01088 (3), -0.01078 (3), -0.01067 (3), -0.01060 (3), -0.01049 (3), -0.01025 (3), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0191    set_bounds 0.0153    solve 0.1322    add 0.0898    
Accumulated time: pickout 0.0030    decision 0.5632    set_bounds 0.0359    solve 0.3799    add 0.2600    
Current (lb-rhs): -0.012331217527389526
150 domains visited
Cumulative time: 1.3603699207305908

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 1: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] 
split level 2: [/input-8, 290] [/input-8, 289] [/input-8, 289] [/input-8, 290] [/input-8, 289] [/input-12, 33] [/input-8, 289] [/input-8, 289] [/input-8, 289] [/input-8, 289] 
split level 3: [/input, 2072] [/input-8, 290] [/input-8, 290] [/input, 2630] [/input-8, 290] [/input, 2071] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05123329162597656
10 lb beta sum: 0.5603710412979126, worst -0.1045907735824585
Time: prepare 0.0083    bound 0.1335    transfer 0.0008    finalize 0.0029    func 0.1486    
Accumulated time: func 0.5813    prepare 0.0470    bound 0.5183    transfer 0.0045    finalize 0.0109    
all_split False
======================Cut inference begins======================
max lb tensor(0.20295930) min lb tensor(-0.00795206)
Number of Verified Splits: 316 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 45.
#cuts 1-3: 11
#cuts 4-6: 34
#cuts >= 20: 0
BICCOS time: 0.040007829666137695 
BICCOS Cumulative time: 0.08898591995239258
Preprocessing time: 0.012980461120605469 Inference time: 0.014767169952392578 Add cuts time: 0.010800600051879883 Cut analysis time: 0.0014595985412597656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00795 (4), -0.00793 (4), -0.00736 (4), -0.00732 (4), -0.00727 (4), -0.00722 (4), -0.00478 (4), -0.00461 (4), -0.00450 (4), -0.00258 (4), -0.00124 (4), -0.00124 (4), 
Length of domains: 12
Time: pickout 0.0012    decision 0.0195    set_bounds 0.0157    solve 0.1487    add 0.2677    
Accumulated time: pickout 0.0042    decision 0.5827    set_bounds 0.0516    solve 0.5285    add 0.5277    
Current (lb-rhs): -0.007952064275741577
162 domains visited
Cumulative time: 1.853400707244873

Shallow-BaB round 5
batch: 12
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 32] [/input-12, 41] [/input-12, 32] 
split level 1: [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-12, 32] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] 
split level 2: [/input-8, 457] [/input-8, 289] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 289] [/input-8, 289] [/input-8, 289] [/input-8, 289] 
split level 3: [/input-8, 289] [/input-8, 457] [/input-8, 289] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 290] [/input-8, 843] 
split level 4: [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 843] [/input-8, 290] 
split level 5: [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] 
split level 6: [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] [/input-8, 116] 
split level 7: [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] 
split level 8: [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 1748] [/input-8, 117] 
split level 9: [/input-8, 117] [/input-8, 117] [/input-8, 1490] [/input-8, 117] [/input-8, 117] [/input-8, 1490] [/input-8, 117] [/input-8, 117] [/input-8, 117] [/input-8, 1748] 
split level 10: [/input-8, 1331] [/input-8, 1490] [/input-8, 117] [/input-8, 1331] [/input-8, 1490] [/input-8, 117] [/input-8, 1331] [/input-8, 1331] [/input-8, 1490] [/input-8, 1490] 
split level 11: [/input-8, 995] [/input-8, 1331] [/input-8, 1331] [/input-8, 995] [/input-8, 1331] [/input-8, 1331] [/input-8, 995] [/input-8, 995] [/input-8, 1331] [/input-8, 1331] 
split level 12: [/input-8, 874] [/input-8, 1859] [/input-8, 874] [/input-8, 874] [/input-8, 1859] [/input-8, 874] [/input-8, 874] [/input-8, 874] [/input-8, 1859] [/input-8, 1859] 
split level 13: [/input, 2087] [/input-8, 995] [/input-8, 995] [/input, 2087] [/input-8, 995] [/input-8, 995] [/input, 2087] [/input-8, 1323] [/input-8, 995] [/input-8, 874] 
split level 14: [/input-8, 1323] [/input-8, 874] [/input-8, 1323] [/input-8, 1323] [/input-8, 874] [/input-8, 1323] [/input-8, 1323] [/input, 2087] [/input-8, 874] [/input-8, 995] 
split level 15: [/input, 3400] [/input-8, 1323] [/input, 3961] [/input, 3400] [/input-8, 1323] [/input, 3961] [/input, 3400] [/input, 3400] [/input-8, 1323] [/input-8, 1323] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04878717660903931
10 lb beta sum: 0.5864256620407104, worst -0.12579530477523804
Time: prepare 0.0080    bound 0.1477    transfer 0.0019    finalize 0.0032    func 0.1634    
Accumulated time: func 0.7446    prepare 0.0559    bound 0.6660    transfer 0.0064    finalize 0.0140    
all_split False
======================Cut inference begins======================
max lb tensor(0.19631249) min lb tensor(0.00010207)
Number of Verified Splits: 384 of 384
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 57.
#cuts 1-3: 11
#cuts 4-6: 46
#cuts >= 20: 0
BICCOS time: 0.044721126556396484 
BICCOS Cumulative time: 0.13370704650878906
Preprocessing time: 0.011435508728027344 Inference time: 0.017734289169311523 Add cuts time: 0.013847112655639648 Cut analysis time: 0.0017042160034179688
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0008    decision 0.0513    set_bounds 0.0168    solve 0.1635    add 0.0331    
Accumulated time: pickout 0.0050    decision 0.6340    set_bounds 0.0684    solve 0.6920    add 0.5608    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
162 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1420]), tensor([-1.]), tensor([0]), tensor([5.79798987e-11]), tensor([0])), '/input-12': ([], [], [], [], [])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1420], [1.0], [0], [5.312644768551422e-11], [0]), '/input-12': (tensor([46, 33, 41, 32]), tensor([-1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([6.35063043e-05, 2.20847595e-02, 4.44470486e-03, 2.44936217e-02]), tensor([1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1420], [1.0], [0], [5.312644768551422e-11], [0]), '/input-12': (tensor([46, 33, 41, 32]), tensor([-1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([6.35063043e-05, 2.20847595e-02, 4.44470486e-03, 8.56806524e-03]), tensor([1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1420], [1.0], [0], [5.312644768551422e-11], [0]), '/input-12': (tensor([46, 33, 41]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([6.35063043e-05, 2.20847595e-02, 1.54619023e-01]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1420], [1.0], [0], [5.312644768551422e-11], [0]), '/input-12': (tensor([46, 33, 41]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([6.35063043e-05, 3.19292992e-02, 7.51961907e-03]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1420], [1.0], [0], [5.312644768551422e-11], [0]), '/input-12': (tensor([46, 33, 41]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([6.35063043e-05, 3.19292992e-02, 1.56621054e-01]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1420], [1.0], [0], [5.312644768551422e-11], [0]), '/input-12': (tensor([46]), tensor([1.]), tensor([0]), tensor([0.06958763]), tensor([1]))}
Shallow branching resets to n domains:  7
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2022700309753418
10 lb beta sum: 0.3724118769168854, worst -0.16113588213920593
Time: prepare 0.0004    bound 0.1417    transfer 0.0002    finalize 0.0002    func 0.1426    
Accumulated time: func 0.8872    prepare 0.0563    bound 0.8077    transfer 0.0066    finalize 0.0142    
After pruning, left:  3

Back to Regular BaB

BaB round 1
batch: 3
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 32] [/input-12, 41] 
split level 1: [/input-12, 46] [/input-8, 457] [/input-12, 32] 
split level 2: [/input-12, 32] [/input-8, 289] [/input-12, 33] 
split level 3: [/input-12, 33] [/input-8, 290] [/input-8, 289] 
split level 4: [/input-8, 289] [/input-8, 116] [/input-8, 290] 
split level 5: [/input-8, 290] [/input-8, 1749] [/input-8, 1748] 
split level 6: [/input-8, 1748] [/input-8, 1748] [/input-8, 429] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7602428197860718, worst -0.09997272491455078
10 lb beta sum: 0.762776255607605, worst -0.14715692400932312
Time: prepare 0.0164    bound 0.1441    transfer 0.0024    finalize 0.0021    func 0.1675    
Accumulated time: func 1.0547    prepare 0.0731    bound 0.9517    transfer 0.0091    finalize 0.0163    
all_split False
======================Cut inference begins======================
max lb tensor(0.47318998) min lb tensor(-0.09931511)
Number of Verified Splits: 332 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.7534724473953247, worst -0.15750789642333984
10 lb beta sum: 0.8059867024421692, worst -0.14806914329528809
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 59.
#cuts 1-3: 11
#cuts 4-6: 48
#cuts >= 20: 0
BICCOS time: 0.38590288162231445 
BICCOS Cumulative time: 0.5196099281311035
Preprocessing time: 0.010476350784301758 Inference time: 0.3590681552886963 Add cuts time: 0.014587163925170898 Cut analysis time: 0.0017712116241455078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09932 (7), -0.09594 (7), -0.09544 (7), -0.09433 (7), -0.09311 (7), -0.09095 (7), -0.09040 (7), -0.08816 (7), -0.08244 (7), -0.08218 (7), -0.08161 (7), -0.08068 (7), -0.07908 (7), -0.07882 (7), -0.07863 (7), -0.07843 (7), -0.07834 (7), -0.07771 (7), -0.07715 (7), -0.07660 (7), 
Length of domains: 52
Time: pickout 0.0006    decision 0.0201    set_bounds 0.0410    solve 0.1676    add 0.0021    
Accumulated time: pickout 0.0056    decision 0.6541    set_bounds 0.1093    solve 0.8596    add 0.5628    
Current (lb-rhs): -0.0993151068687439
214 domains visited
Cumulative time: 2.9433493614196777

BaB round 2
batch: 52
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] [/input-8, 457] 
split level 1: [/input-8, 421] [/input-8, 421] [/input-8, 421] [/input-8, 421] [/input-8, 421] [/input-8, 421] [/input-8, 421] [/input-8, 1749] [/input-8, 421] [/input-8, 421] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09626975655555725
10 lb beta sum: 0.19171741604804993, worst -0.13815848529338837
Time: prepare 0.0041    bound 0.1441    transfer 0.0013    finalize 0.0012    func 0.1522    
Accumulated time: func 1.2068    prepare 0.0774    bound 1.0958    transfer 0.0103    finalize 0.0175    
all_split False
======================Cut inference begins======================
max lb tensor(0.01299274) min lb tensor(-0.09477453)
Number of Verified Splits: 13 of 208
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.009402036666870117 
BICCOS Cumulative time: 0.5290119647979736
Preprocessing time: 0.006490230560302734 Inference time: 0.0013570785522460938 Add cuts time: 0.0012562274932861328 Cut analysis time: 0.00029850006103515625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09477 (9), -0.09134 (9), -0.09061 (9), -0.09034 (9), -0.08980 (9), -0.08801 (9), -0.08717 (9), -0.08637 (9), -0.08581 (9), -0.08559 (9), -0.08533 (9), -0.08355 (9), -0.08301 (9), -0.08216 (9), -0.08080 (9), -0.07855 (9), -0.07776 (9), -0.07747 (9), -0.07684 (9), -0.07633 (9), 
Length of domains: 195
Time: pickout 0.0019    decision 0.0135    set_bounds 0.0099    solve 0.1522    add 0.0757    
Accumulated time: pickout 0.0075    decision 0.6676    set_bounds 0.1192    solve 1.0118    add 0.6385    
Current (lb-rhs): -0.094774529337883
409 domains visited
Cumulative time: 3.213165760040283

BaB round 3
batch: 195
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] [/input-8, 1749] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.094149649143219
10 lb beta sum: 0.1993313431739807, worst -0.09274336695671082
Time: prepare 0.0075    bound 0.1165    transfer 0.0011    finalize 0.0018    func 0.1295    
Accumulated time: func 1.3364    prepare 0.0851    bound 1.2124    transfer 0.0114    finalize 0.0193    
all_split False
======================Cut inference begins======================
max lb tensor(0.04909846) min lb tensor(-0.09268980)
Number of Verified Splits: 6 of 390
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.012800455093383789 
BICCOS Cumulative time: 0.5418124198913574
Preprocessing time: 0.01141214370727539 Inference time: 0.0005643367767333984 Add cuts time: 0.0001246929168701172 Cut analysis time: 0.0006992816925048828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09269 (10), -0.08888 (10), -0.08846 (10), -0.08771 (10), -0.08592 (10), -0.08501 (10), -0.08464 (10), -0.08389 (10), -0.08365 (10), -0.08342 (10), -0.08269 (10), -0.08151 (10), -0.08101 (10), -0.08097 (10), -0.08056 (10), -0.08025 (10), -0.07999 (10), -0.07966 (10), -0.07934 (10), -0.07861 (10), 
Length of domains: 384
Time: pickout 0.0162    decision 0.0192    set_bounds 0.0173    solve 0.1296    add 0.0831    
Accumulated time: pickout 0.0237    decision 0.6868    set_bounds 0.1365    solve 1.1414    add 0.7216    
Current (lb-rhs): -0.09268979728221893
793 domains visited
Cumulative time: 3.4986252784729004

BaB round 4
batch: 384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1003] [/input-8, 1003] [/input-8, 1859] [/input-8, 1003] [/input-8, 429] [/input-8, 1859] [/input-8, 1003] [/input-8, 1003] [/input-8, 1859] [/input-8, 1003] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23534691333770752, worst -0.09055136144161224
10 lb beta sum: 0.23534691333770752, worst -0.09047846496105194
Time: prepare 0.0341    bound 0.1237    transfer 0.0053    finalize 0.0039    func 0.1720    
Accumulated time: func 1.5084    prepare 0.1195    bound 1.3360    transfer 0.0167    finalize 0.0233    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00824174) min lb tensor(-0.09045090)
Number of Verified Splits: 0 of 768
No cut inferred: All or none verified.
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.022395849227905273 
BICCOS Cumulative time: 0.5642082691192627
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09045 (11), -0.08662 (11), -0.08616 (11), -0.08557 (11), -0.08377 (11), -0.08301 (11), -0.08233 (11), -0.08176 (11), -0.08126 (11), -0.08112 (11), -0.08100 (11), -0.08022 (11), -0.07935 (11), -0.07898 (11), -0.07823 (11), -0.07818 (11), -0.07807 (11), -0.07801 (11), -0.07749 (11), -0.07735 (11), 
Length of domains: 768
Time: pickout 0.0182    decision 0.0319    set_bounds 0.0342    solve 0.1722    add 0.1126    
Accumulated time: pickout 0.0419    decision 0.7187    set_bounds 0.1707    solve 1.3136    add 0.8342    
Current (lb-rhs): -0.09045089781284332
1561 domains visited
Cumulative time: 3.898792028427124

BaB round 5
batch: 768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1859] [/input-8, 1859] [/input, 620] [/input-8, 1859] [/input-8, 1003] [/input, 620] [/input-8, 1859] [/input-8, 1859] [/input, 620] [/input-8, 1859] 
cut re-enabled after branching node selection
0 lb beta sum: 0.23534691333770752, worst -0.08636762201786041
10 lb beta sum: 0.23534691333770752, worst -0.08628116548061371
Time: prepare 0.0667    bound 0.1354    transfer 0.0116    finalize 0.0079    func 0.2322    
Accumulated time: func 1.7406    prepare 0.1864    bound 1.4714    transfer 0.0283    finalize 0.0312    
all_split False
======================Cut inference begins======================
max lb tensor(0.01116405) min lb tensor(-0.08624052)
Number of Verified Splits: 16 of 1536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.05100893974304199 
BICCOS Cumulative time: 0.6152172088623047
Preprocessing time: 0.04784035682678223 Inference time: 0.0020210742950439453 Add cuts time: 0.0006680488586425781 Cut analysis time: 0.0004794597625732422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08624 (12), -0.08584 (12), -0.08379 (12), -0.08213 (12), -0.08185 (12), -0.08184 (12), -0.08134 (12), -0.08125 (12), -0.08093 (12), -0.08090 (12), -0.07925 (12), -0.07894 (12), -0.07838 (12), -0.07831 (12), -0.07740 (12), -0.07740 (12), -0.07719 (12), -0.07699 (12), -0.07677 (12), -0.07656 (12), 
Length of domains: 1520
Time: pickout 0.0575    decision 0.0547    set_bounds 0.0637    solve 0.2326    add 0.0177    
Accumulated time: pickout 0.0995    decision 0.7734    set_bounds 0.2344    solve 1.5462    add 0.8519    
Current (lb-rhs): -0.08624051511287689
3081 domains visited
Cumulative time: 4.377878665924072

BaB round 6
batch: 1520
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1490] [/input-8, 1490] [/input, 330] [/input-8, 1490] [/input-8, 843] [/input, 330] [/input-8, 1490] [/input-8, 1490] [/input, 330] [/input-8, 1490] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08567151427268982
10 lb beta sum: 0.1953962743282318, worst -0.08433210849761963
Time: prepare 0.0677    bound 0.2308    transfer 0.0092    finalize 0.0177    func 0.3459    
Accumulated time: func 2.0865    prepare 0.2544    bound 1.7022    transfer 0.0375    finalize 0.0489    
all_split False
======================Cut inference begins======================
max lb tensor(0.01365392) min lb tensor(-0.08430976)
Number of Verified Splits: 171 of 3040
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 4
#cuts 4-6: 6
#cuts 7-9: 13
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.1260843276977539 
BICCOS Cumulative time: 0.7413015365600586
Preprocessing time: 0.09603762626647949 Inference time: 0.0237886905670166 Add cuts time: 0.004759073257446289 Cut analysis time: 0.0014989376068115234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08431 (13), -0.08390 (13), -0.08183 (13), -0.08023 (13), -0.08001 (13), -0.07990 (13), -0.07958 (13), -0.07935 (13), -0.07934 (13), -0.07897 (13), -0.07892 (13), -0.07806 (13), -0.07774 (13), -0.07696 (13), -0.07685 (13), -0.07684 (13), -0.07633 (13), -0.07601 (13), -0.07589 (13), -0.07586 (13), 
Length of domains: 2869
Time: pickout 0.0260    decision 0.2810    set_bounds 0.1245    solve 0.3464    add 0.1060    
Accumulated time: pickout 0.1255    decision 1.0544    set_bounds 0.3589    solve 1.8926    add 0.9579    
Current (lb-rhs): -0.08430975675582886
5950 domains visited
Cumulative time: 5.398615598678589

BaB round 7
batch: 2869
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 620] [/input-8, 429] [/input-8, 843] [/input, 620] [/input-8, 1859] [/input-8, 1003] [/input, 620] [/input-8, 429] [/input-8, 843] [/input, 620] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08283203840255737
10 lb beta sum: 0.19470784068107605, worst -0.08151261508464813
Time: prepare 0.1368    bound 0.5076    transfer 0.0293    finalize 0.0388    func 0.7513    
Accumulated time: func 2.8378    prepare 0.3914    bound 2.2098    transfer 0.0668    finalize 0.0877    
all_split False
======================Cut inference begins======================
max lb tensor(0.01461668) min lb tensor(-0.08150291)
Number of Verified Splits: 378 of 5738
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 4
#cuts 4-6: 9
#cuts 7-9: 22
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.25545787811279297 
BICCOS Cumulative time: 0.9967594146728516
Preprocessing time: 0.18346953392028809 Inference time: 0.059005022048950195 Add cuts time: 0.01078176498413086 Cut analysis time: 0.002201557159423828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08150 (14), -0.08109 (14), -0.07965 (14), -0.07924 (14), -0.07763 (14), -0.07743 (14), -0.07723 (14), -0.07710 (14), -0.07676 (14), -0.07669 (14), -0.07654 (14), -0.07653 (14), -0.07612 (14), -0.07586 (14), -0.07569 (14), -0.07558 (14), -0.07531 (14), -0.07529 (14), -0.07488 (14), -0.07471 (14), 
Length of domains: 5360
Time: pickout 0.0543    decision 0.1687    set_bounds 0.4022    solve 0.7524    add 0.1478    
Accumulated time: pickout 0.1798    decision 1.2232    set_bounds 0.7612    solve 2.6450    add 1.1057    
Current (lb-rhs): -0.08150291442871094
11310 domains visited
Cumulative time: 7.194226503372192

BaB round 8
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 995] [/input, 620] [/input-8, 1003] [/input-8, 995] [/input, 620] [/input-8, 843] [/input, 330] [/input, 620] [/input-8, 1003] [/input, 330] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08250731229782104
10 lb beta sum: 0.1946151703596115, worst -0.08119186758995056
Time: prepare 0.1987    bound 0.6927    transfer 0.0363    finalize 0.0512    func 1.0326    
Accumulated time: func 3.8704    prepare 0.5904    bound 2.9025    transfer 0.1031    finalize 0.1388    
all_split False
======================Cut inference begins======================
max lb tensor(0.00713529) min lb tensor(-0.08118233)
Number of Verified Splits: 464 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 83.
#cuts 1-3: 4
#cuts 4-6: 15
#cuts 7-9: 54
#cuts 10-12: 10
#cuts >= 20: 0
BICCOS time: 0.5901141166687012 
BICCOS Cumulative time: 1.5868735313415527
Preprocessing time: 0.4870870113372803 Inference time: 0.07740283012390137 Add cuts time: 0.02084517478942871 Cut analysis time: 0.00477910041809082
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08118 (15), -0.08077 (15), -0.07932 (15), -0.07891 (15), -0.07729 (15), -0.07688 (15), -0.07678 (15), -0.07637 (15), -0.07621 (15), -0.07580 (15), -0.07537 (15), -0.07531 (14), -0.07496 (15), -0.07488 (14), -0.07463 (15), -0.07456 (15), -0.07436 (15), -0.07395 (15), -0.07372 (15), -0.07371 (15), 
Length of domains: 8992
Time: pickout 0.0607    decision 0.4259    set_bounds 0.3498    solve 1.0348    add 0.0741    
Accumulated time: pickout 0.2405    decision 1.6490    set_bounds 1.1110    solve 3.6798    add 1.1799    
Current (lb-rhs): -0.0811823308467865
19038 domains visited
current_vram/total_varm: 10.7GB/99.9GB, batch_size increase to 8192
Cumulative time: 9.744641065597534

BaB round 9
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 477] [/input, 330] [/input-8, 477] [/input-8, 473] [/input-8, 116] [/input-8, 477] [/input-8, 995] [/input-8, 477] [/input-8, 116] [/input-8, 473] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08028832077980042
10 lb beta sum: 0.19291147589683533, worst -0.07897180318832397
Time: prepare 0.4029    bound 1.3469    transfer 0.0762    finalize 0.1010    func 2.2895    
Accumulated time: func 6.1599    prepare 0.9936    bound 4.2495    transfer 0.1794    finalize 0.2398    
all_split False
======================Cut inference begins======================
max lb tensor(0.01604874) min lb tensor(-0.07895984)
Number of Verified Splits: 1641 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 186.
#cuts 1-3: 4
#cuts 4-6: 33
#cuts 7-9: 117
#cuts 10-12: 32
#cuts >= 20: 0
BICCOS time: 0.8857619762420654 
BICCOS Cumulative time: 2.472635507583618
Preprocessing time: 0.5288217067718506 Inference time: 0.264538049697876 Add cuts time: 0.08067679405212402 Cut analysis time: 0.011725425720214844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07896 (16), -0.07855 (16), -0.07713 (16), -0.07710 (16), -0.07672 (16), -0.07669 (16), -0.07529 (16), -0.07508 (16), -0.07500 (15), -0.07489 (16), -0.07467 (16), -0.07457 (15), -0.07387 (16), -0.07348 (16), -0.07341 (16), -0.07324 (16), -0.07314 (16), -0.07310 (16), -0.07308 (15), -0.07299 (16), 
Length of domains: 15543
Time: pickout 0.1136    decision 0.4472    set_bounds 0.9361    solve 2.2926    add 0.2155    
Accumulated time: pickout 0.3541    decision 2.0962    set_bounds 2.0471    solve 5.9724    add 1.3954    
Current (lb-rhs): -0.07895983755588531
33781 domains visited
current_vram/total_varm: 21.8GB/99.9GB, batch_size increase to 16384
Cumulative time: 14.670754194259644

BaB round 10
batch: 15543
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 617] [/input, 330] [/input-8, 843] [/input-8, 477] [/input-8, 617] [/input-8, 995] [/input-8, 843] [/input-8, 473] [/input-8, 477] [/input-8, 617] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0788407027721405
10 lb beta sum: 0.19094371795654297, worst -0.077509805560112
Time: prepare 0.7943    bound 2.7164    transfer 0.1439    finalize 0.5046    func 4.3628    
Accumulated time: func 10.5227    prepare 1.7883    bound 6.9659    transfer 0.3232    finalize 0.7444    
all_split False
======================Cut inference begins======================
max lb tensor(0.20649223) min lb tensor(-0.07750124)
Number of Verified Splits: 4033 of 31086
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 364.
#cuts 1-3: 4
#cuts 4-6: 45
#cuts 7-9: 242
#cuts 10-12: 73
#cuts >= 20: 0
BICCOS time: 2.346735715866089 
BICCOS Cumulative time: 4.819371223449707
Preprocessing time: 1.3719687461853027 Inference time: 0.679417610168457 Add cuts time: 0.2734982967376709 Cut analysis time: 0.021851062774658203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07750 (17), -0.07709 (17), -0.07564 (17), -0.07553 (17), -0.07523 (17), -0.07513 (17), -0.07367 (17), -0.07360 (17), -0.07326 (17), -0.07319 (17), -0.07285 (17), -0.07238 (17), -0.07235 (17), -0.07209 (16), -0.07200 (17), -0.07195 (17), -0.07195 (17), -0.07173 (17), -0.07168 (16), -0.07159 (17), 
Length of domains: 27053
Time: pickout 0.3324    decision 1.1158    set_bounds 1.6712    solve 4.3688    add 0.1390    
Accumulated time: pickout 0.6865    decision 3.2120    set_bounds 3.7183    solve 10.3411    add 1.5344    
Current (lb-rhs): -0.07750123739242554
60834 domains visited
Cumulative time: 24.712294578552246

BaB round 11
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 473] [/input-8, 617] [/input, 620] [/input-8, 473] [/input-8, 116] [/input-8, 617] [/input, 620] [/input-8, 473] [/input-8, 1490] [/input-8, 617] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07636234164237976
10 lb beta sum: 0.18696726858615875, worst -0.07503797113895416
Time: prepare 0.8834    bound 3.1908    transfer 0.1248    finalize 0.2505    func 4.6621    
Accumulated time: func 15.1847    prepare 2.6721    bound 10.1567    transfer 0.4480    finalize 0.9949    
all_split False
======================Cut inference begins======================
max lb tensor(0.22552241) min lb tensor(-0.07503244)
Number of Verified Splits: 4679 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 477.
#cuts 1-3: 4
#cuts 4-6: 50
#cuts 7-9: 320
#cuts 10-12: 103
#cuts >= 20: 0
BICCOS time: 2.8099281787872314 
BICCOS Cumulative time: 7.6292994022369385
Preprocessing time: 1.565929651260376 Inference time: 0.7868616580963135 Add cuts time: 0.42797064781188965 Cut analysis time: 0.029166221618652344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07503 (18), -0.07462 (18), -0.07324 (18), -0.07315 (18), -0.07306 (18), -0.07283 (18), -0.07273 (18), -0.07265 (18), -0.07136 (18), -0.07127 (18), -0.07117 (18), -0.07105 (18), -0.07095 (18), -0.07089 (17), -0.07086 (18), -0.07078 (18), -0.07064 (18), -0.07047 (17), -0.07038 (18), -0.07006 (17), 
Length of domains: 38758
Time: pickout 0.2532    decision 1.7946    set_bounds 1.9325    solve 4.6685    add 0.2202    
Accumulated time: pickout 0.9397    decision 5.0066    set_bounds 5.6507    solve 15.0096    add 1.7546    
Current (lb-rhs): -0.07503244280815125
88923 domains visited
Cumulative time: 36.479079484939575

BaB round 12
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 330] [/input, 330] [/input, 330] [/input, 330] [/input-12, 60] [/input, 330] [/input, 330] [/input, 2105] [/input-8, 843] [/input, 330] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07278653979301453
10 lb beta sum: 0.18179446458816528, worst -0.07145965099334717
Time: prepare 0.9040    bound 3.4287    transfer 0.1273    finalize 0.7920    func 5.4672    
Accumulated time: func 20.6520    prepare 3.5765    bound 13.5854    transfer 0.5753    finalize 1.7869    
all_split False
======================Cut inference begins======================
max lb tensor(0.24309739) min lb tensor(-0.07140355)
Number of Verified Splits: 5567 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 589.
#cuts 1-3: 4
#cuts 4-6: 60
#cuts 7-9: 421
#cuts 10-12: 104
#cuts >= 20: 0
BICCOS time: 3.343442440032959 
BICCOS Cumulative time: 10.972741842269897
Preprocessing time: 1.1286051273345947 Inference time: 1.5426087379455566 Add cuts time: 0.6374931335449219 Cut analysis time: 0.03473544120788574
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07503 (18), -0.07462 (18), -0.07315 (18), -0.07306 (18), -0.07273 (18), -0.07265 (18), -0.07140 (19), -0.07136 (18), -0.07117 (18), -0.07105 (18), -0.07099 (19), -0.07095 (18), -0.07078 (18), -0.07064 (18), -0.07047 (17), -0.07038 (18), -0.07006 (17), -0.06987 (18), -0.06966 (18), -0.06953 (18), 
Length of domains: 49575
Time: pickout 0.2747    decision 1.9342    set_bounds 1.5110    solve 5.4745    add 0.1721    
Accumulated time: pickout 1.2144    decision 6.9408    set_bounds 7.1617    solve 20.4841    add 1.9266    
Current (lb-rhs): -0.07503244280815125
116124 domains visited
Cumulative time: 49.281089782714844

BaB round 13
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 617] [/input-8, 843] [/input-12, 60] [/input, 458] [/input-8, 843] [/input-8, 617] [/input, 458] [/input-8, 843] [/input-12, 60] [/input, 458] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07457214593887329
10 lb beta sum: 0.17867746949195862, worst -0.0732240080833435
Time: prepare 0.9292    bound 3.6558    transfer 0.1312    finalize 0.2708    func 5.2047    
Accumulated time: func 25.8567    prepare 4.5061    bound 17.2412    transfer 0.7065    finalize 2.0577    
all_split False
======================Cut inference begins======================
max lb tensor(0.23712920) min lb tensor(-0.07321253)
Number of Verified Splits: 5993 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 589.
#cuts 1-3: 4
#cuts 4-6: 60
#cuts 7-9: 421
#cuts 10-12: 104
#cuts >= 20: 0
BICCOS time: 0.0013194084167480469 
BICCOS Cumulative time: 10.974061250686646
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07321 (19), -0.07315 (18), -0.07279 (19), -0.07273 (18), -0.07140 (19), -0.07125 (19), -0.07117 (18), -0.07099 (19), -0.07083 (19), -0.07078 (18), -0.06987 (18), -0.06951 (19), -0.06948 (18), -0.06945 (19), -0.06923 (19), -0.06915 (18), -0.06914 (19), -0.06906 (19), -0.06882 (19), -0.06874 (18), 
Length of domains: 59966
Time: pickout 0.2651    decision 1.6600    set_bounds 2.2190    solve 5.2123    add 0.1259    
Accumulated time: pickout 1.4796    decision 8.6008    set_bounds 9.3807    solve 25.6964    add 2.0525    
Current (lb-rhs): -0.07321253418922424
142899 domains visited
Cumulative time: 58.86516332626343

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 473] [/input-8, 473] [/input-8, 473] [/input, 330] [/input-8, 473] [/input-8, 473] [/input, 330] [/input-8, 473] [/input-8, 473] [/input-8, 473] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07269361615180969
10 lb beta sum: 0.17632026970386505, worst -0.07143473625183105
Time: prepare 0.9180    bound 3.6549    transfer 0.1595    finalize 1.0196    func 5.9645    
Accumulated time: func 31.8212    prepare 5.4245    bound 20.8961    transfer 0.8660    finalize 3.0774    
all_split False
======================Cut inference begins======================
max lb tensor(0.23914525) min lb tensor(-0.07131200)
Number of Verified Splits: 6305 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 589.
#cuts 1-3: 4
#cuts 4-6: 60
#cuts 7-9: 421
#cuts 10-12: 104
#cuts >= 20: 0
BICCOS time: 0.001222848892211914 
BICCOS Cumulative time: 10.975284099578857
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07321 (19), -0.07279 (19), -0.07140 (19), -0.07131 (19), -0.07125 (19), -0.07099 (19), -0.07089 (19), -0.07083 (19), -0.06951 (19), -0.06945 (19), -0.06934 (19), -0.06923 (19), -0.06914 (19), -0.06906 (19), -0.06891 (19), -0.06882 (19), -0.06856 (19), -0.06843 (18), -0.06817 (19), -0.06805 (19), 
Length of domains: 70045
Time: pickout 0.2693    decision 2.1194    set_bounds 1.5717    solve 5.9716    add 0.2479    
Accumulated time: pickout 1.7488    decision 10.7202    set_bounds 10.9524    solve 31.6680    add 2.3004    
Current (lb-rhs): -0.07321253418922424
169362 domains visited
Cumulative time: 69.1460554599762

BaB round 15
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 995] [/input-8, 843] [/input-8, 1490] [/input-8, 995] [/input-8, 843] [/input-8, 617] [/input-8, 995] [/input-8, 843] [/input-8, 477] [/input-8, 843] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.070985347032547
10 lb beta sum: 0.16677884757518768, worst -0.07101091742515564
Time: prepare 0.9301    bound 3.6553    transfer 0.1582    finalize 0.2305    func 5.1966    
Accumulated time: func 37.0178    prepare 6.3551    bound 24.5514    transfer 1.0241    finalize 3.3078    
all_split False
======================Cut inference begins======================
max lb tensor(0.24004403) min lb tensor(-0.07095519)
Number of Verified Splits: 6603 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 589.
#cuts 1-3: 4
#cuts 4-6: 60
#cuts 7-9: 421
#cuts 10-12: 104
#cuts >= 20: 0
BICCOS time: 0.001325368881225586 
BICCOS Cumulative time: 10.976609468460083
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07321 (19), -0.07279 (19), -0.07131 (19), -0.07125 (19), -0.07096 (20), -0.07089 (19), -0.07083 (19), -0.06951 (19), -0.06934 (19), -0.06923 (19), -0.06914 (19), -0.06900 (20), -0.06891 (19), -0.06882 (19), -0.06856 (19), -0.06846 (20), -0.06805 (19), -0.06800 (18), -0.06776 (20), -0.06771 (19), 
Length of domains: 79826
Time: pickout 0.2826    decision 1.6685    set_bounds 2.3078    solve 5.2044    add 0.2649    
Accumulated time: pickout 2.0314    decision 12.3887    set_bounds 13.2602    solve 36.8725    add 2.5653    
Current (lb-rhs): -0.07321253418922424
195527 domains visited
Cumulative time: 78.99192070960999

BaB round 16
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 995] [/input, 458] [/input, 458] [/input, 475] [/input-8, 473] [/input, 458] [/input-8, 473] [/input, 458] [/input, 458] [/input, 475] 
cut re-enabled after branching node selection
0 lb beta sum: 0.20534060895442963, worst -0.07279407978057861
10 lb beta sum: 0.20901143550872803, worst -0.0727948546409607
Time: prepare 1.6924    bound 3.6535    transfer 0.1623    finalize 0.2580    func 5.9853    
Accumulated time: func 43.0031    prepare 8.0479    bound 28.2049    transfer 1.1865    finalize 3.5659    
all_split False
======================Cut inference begins======================
max lb tensor(0.24369538) min lb tensor(-0.07278731)
Number of Verified Splits: 5852 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 589.
#cuts 1-3: 4
#cuts 4-6: 60
#cuts 7-9: 421
#cuts 10-12: 104
#cuts >= 20: 0
BICCOS time: 0.001247406005859375 
BICCOS Cumulative time: 10.977856874465942
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07279 (20), -0.07131 (19), -0.07096 (20), -0.07089 (19), -0.07082 (20), -0.07029 (20), -0.06935 (20), -0.06934 (19), -0.06906 (20), -0.06900 (20), -0.06891 (19), -0.06881 (20), -0.06846 (20), -0.06833 (20), -0.06805 (19), -0.06800 (18), -0.06776 (20), -0.06770 (20), -0.06765 (19), -0.06760 (18), 
Length of domains: 90358
Time: pickout 0.2861    decision 2.2409    set_bounds 1.5381    solve 6.9058    add 0.1060    
Accumulated time: pickout 2.3175    decision 14.6296    set_bounds 14.7983    solve 43.7782    add 2.6713    
Current (lb-rhs): -0.0727873146533966
222443 domains visited
Cumulative time: 90.16276097297668

BaB round 17
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 995] [/input-8, 995] [/input-12, 60] [/input-8, 116] [/input-12, 60] [/input-12, 60] [/input-8, 874] [/input-8, 116] [/input-12, 60] [/input-12, 60] 
cut re-enabled after branching node selection
0 lb beta sum: 0.22381877899169922, worst -0.07089167833328247
10 lb beta sum: 0.22380249202251434, worst -0.07096755504608154
Time: prepare 1.7150    bound 3.6538    transfer 0.1636    finalize 0.2682    func 7.0046    
Accumulated time: func 50.0077    prepare 9.7633    bound 31.8587    transfer 1.3500    finalize 3.8341    
all_split False
======================Cut inference begins======================
max lb tensor(0.24037857) min lb tensor(-0.07088014)
Number of Verified Splits: 7098 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 589.
#cuts 1-3: 4
#cuts 4-6: 60
#cuts 7-9: 421
#cuts 10-12: 104
#cuts >= 20: 0
BICCOS time: 0.0012159347534179688 
BICCOS Cumulative time: 10.97907280921936
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07279 (20), -0.07096 (20), -0.07088 (20), -0.07082 (20), -0.07029 (20), -0.06935 (20), -0.06906 (20), -0.06900 (20), -0.06891 (20), -0.06881 (20), -0.06846 (20), -0.06838 (20), -0.06833 (20), -0.06776 (20), -0.06770 (20), -0.06764 (20), -0.06752 (20), -0.06744 (20), -0.06740 (20), -0.06724 (20), 
Length of domains: 99644
Time: pickout 0.2863    decision 1.6599    set_bounds 1.5886    solve 7.0124    add 0.1033    
Accumulated time: pickout 2.6038    decision 16.2894    set_bounds 16.3869    solve 50.7907    add 2.7745    
Current (lb-rhs): -0.0727873146533966
248113 domains visited
Cumulative time: 100.91548752784729

BaB round 18
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 473] [/input-8, 617] [/input-8, 995] [/input, 458] [/input-8, 617] [/input-12, 60] [/input-8, 995] [/input-8, 617] [/input-8, 473] [/input-8, 1003] 
cut re-enabled after branching node selection
0 lb beta sum: 0.21291208267211914, worst -0.06437581777572632
10 lb beta sum: 0.21290713548660278, worst -0.06434452533721924
Time: prepare 1.7086    bound 3.6559    transfer 0.1602    finalize 1.2511    func 6.9937    
Accumulated time: func 57.0014    prepare 11.4722    bound 35.5147    transfer 1.5103    finalize 5.0852    
all_split False
======================Cut inference begins======================
max lb tensor(0.23457710) min lb tensor(-0.06426412)
Number of Verified Splits: 6468 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 589.
#cuts 1-3: 4
#cuts 4-6: 60
#cuts 7-9: 421
#cuts 10-12: 104
#cuts >= 20: 0
BICCOS time: 0.0012123584747314453 
BICCOS Cumulative time: 10.980285167694092
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07279 (20), -0.07096 (20), -0.07088 (20), -0.07082 (20), -0.07029 (20), -0.06935 (20), -0.06906 (20), -0.06900 (20), -0.06891 (20), -0.06881 (20), -0.06846 (20), -0.06838 (20), -0.06833 (20), -0.06776 (20), -0.06770 (20), -0.06764 (20), -0.06752 (20), -0.06744 (20), -0.06740 (20), -0.06724 (20), 
Length of domains: 109560
Time: pickout 0.2832    decision 1.6571    set_bounds 1.5650    solve 7.0019    add 0.1001    
Accumulated time: pickout 2.8870    decision 17.9465    set_bounds 17.9518    solve 57.7925    add 2.8746    
Current (lb-rhs): -0.0727873146533966
274413 domains visited
Cumulative time: 111.62612080574036

BaB round 19
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 330] [/input, 330] [/input-8, 116] [/input, 458] [/input-8, 995] [/input, 330] [/input-12, 60] [/input, 330] [/input, 458] [/input, 458] 
cut re-enabled after branching node selection
0 lb beta sum: 0.20146745443344116, worst -0.07010909914970398
10 lb beta sum: 0.20146922767162323, worst -0.07017076015472412
Time: prepare 2.0889    bound 3.6548    transfer 0.2030    finalize 1.6965    func 7.8656    
Accumulated time: func 64.8670    prepare 13.5615    bound 39.1695    transfer 1.7132    finalize 6.7817    
all_split False
======================Cut inference begins======================
max lb tensor(0.23896126) min lb tensor(-0.07010651)
Number of Verified Splits: 6699 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 589.
#cuts 1-3: 4
#cuts 4-6: 60
#cuts 7-9: 421
#cuts 10-12: 104
#cuts >= 20: 0
BICCOS time: 0.0013248920440673828 
BICCOS Cumulative time: 10.98161005973816
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07279 (20), -0.07088 (20), -0.07082 (20), -0.07029 (20), -0.07011 (21), -0.06935 (20), -0.06906 (20), -0.06891 (20), -0.06881 (20), -0.06846 (20), -0.06838 (20), -0.06833 (20), -0.06816 (21), -0.06770 (20), -0.06764 (20), -0.06750 (21), -0.06744 (20), -0.06740 (20), -0.06724 (20), -0.06709 (20), 
Length of domains: 119245
Time: pickout 0.2882    decision 1.7180    set_bounds 1.8013    solve 7.8779    add 0.1385    
Accumulated time: pickout 3.1752    decision 19.6645    set_bounds 19.7531    solve 65.6704    add 3.0132    
Current (lb-rhs): -0.0727873146533966
300482 domains visited
Cumulative time: 123.61131381988525

BaB round 20
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 473] [/input-12, 60] [/input-8, 617] [/input-8, 473] [/input-12, 60] [/input-8, 617] [/input-8, 473] [/input-8, 617] [/input-8, 477] [/input-8, 617] 
cut re-enabled after branching node selection
0 lb beta sum: 0.20462366938591003, worst -0.06846308708190918
10 lb beta sum: 0.20462185144424438, worst -0.0685090720653534
Time: prepare 1.7809    bound 3.6531    transfer 0.1872    finalize 1.7610    func 7.6026    
Accumulated time: func 72.4696    prepare 15.3428    bound 42.8226    transfer 1.9004    finalize 8.5426    
all_split False
======================Cut inference begins======================
max lb tensor(0.24663918) min lb tensor(-0.06844524)
Number of Verified Splits: 7796 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 589.
#cuts 1-3: 4
#cuts 4-6: 60
#cuts 7-9: 421
#cuts 10-12: 104
#cuts >= 20: 0
BICCOS time: 0.0013382434844970703 
BICCOS Cumulative time: 10.982948303222656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07279 (20), -0.07088 (20), -0.07082 (20), -0.07029 (20), -0.07011 (21), -0.06935 (20), -0.06906 (20), -0.06891 (20), -0.06881 (20), -0.06845 (21), -0.06838 (20), -0.06833 (20), -0.06816 (21), -0.06770 (20), -0.06764 (20), -0.06750 (21), -0.06744 (20), -0.06740 (20), -0.06724 (20), -0.06709 (20), 
Length of domains: 127833
Time: pickout 0.3156    decision 1.6872    set_bounds 1.6623    solve 7.6137    add 0.1743    
Accumulated time: pickout 3.4908    decision 21.3517    set_bounds 21.4154    solve 73.2841    add 3.1874    
Current (lb-rhs): -0.0727873146533966
325454 domains visited
Cumulative time: 135.18227195739746

BaB round 21
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 458] [/input-8, 617] [/input-8, 473] [/input, 458] [/input-8, 617] [/input-12, 60] [/input-8, 617] [/input-8, 473] [/input-8, 1490] [/input-8, 617] 
cut re-enabled after branching node selection
0 lb beta sum: 0.20977653563022614, worst -0.07194125652313232
10 lb beta sum: 0.20977173745632172, worst -0.07194337248802185
Time: prepare 1.7326    bound 3.6527    transfer 0.1615    finalize 0.2587    func 7.3625    
Accumulated time: func 79.8321    prepare 17.0759    bound 46.4752    transfer 2.0619    finalize 8.8013    
all_split False
======================Cut inference begins======================
max lb tensor(0.24820222) min lb tensor(-0.07193440)
Number of Verified Splits: 7285 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 589.
#cuts 1-3: 4
#cuts 4-6: 60
#cuts 7-9: 421
#cuts 10-12: 104
#cuts >= 20: 0
BICCOS time: 0.001298666000366211 
BICCOS Cumulative time: 10.984246969223022
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07193 (21), -0.07088 (20), -0.07029 (20), -0.07011 (21), -0.06997 (21), -0.06933 (21), -0.06891 (20), -0.06879 (21), -0.06845 (21), -0.06838 (20), -0.06833 (20), -0.06821 (21), -0.06816 (21), -0.06797 (21), -0.06764 (20), -0.06750 (21), -0.06744 (20), -0.06739 (21), -0.06696 (21), -0.06690 (21), 
Length of domains: 136932
Time: pickout 0.3162    decision 1.6914    set_bounds 1.6400    solve 7.3704    add 0.1082    
Accumulated time: pickout 3.8070    decision 23.0431    set_bounds 23.0554    solve 80.6544    add 3.2956    
Current (lb-rhs): -0.07193440198898315
350937 domains visited
Cumulative time: 146.4079840183258

BaB round 22
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 458] [/input, 458] [/input, 458] [/input, 458] [/input, 458] [/input-8, 874] [/input, 458] [/input-12, 60] [/input, 458] [/input-12, 60] 
cut re-enabled after branching node selection
0 lb beta sum: 0.21501688659191132, worst -0.07029065489768982
10 lb beta sum: 0.2150212973356247, worst -0.07028195261955261
Time: prepare 1.7462    bound 3.6518    transfer 0.1631    finalize 0.2414    func 6.0184    
Accumulated time: func 85.8506    prepare 18.8225    bound 50.1270    transfer 2.2250    finalize 9.0428    
all_split False
======================Cut inference begins======================
max lb tensor(0.24042514) min lb tensor(-0.07027233)
Number of Verified Splits: 8418 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 589.
#cuts 1-3: 4
#cuts 4-6: 60
#cuts 7-9: 421
#cuts 10-12: 104
#cuts >= 20: 0
BICCOS time: 0.0017588138580322266 
BICCOS Cumulative time: 10.986005783081055
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07193 (21), -0.07088 (20), -0.07027 (21), -0.07011 (21), -0.06997 (21), -0.06933 (21), -0.06891 (20), -0.06879 (21), -0.06845 (21), -0.06838 (20), -0.06832 (21), -0.06821 (21), -0.06816 (21), -0.06797 (21), -0.06764 (20), -0.06750 (21), -0.06744 (20), -0.06739 (21), -0.06696 (21), -0.06690 (21), 
Length of domains: 144898
Time: pickout 0.2962    decision 1.6707    set_bounds 1.5919    solve 6.0282    add 0.1559    
Accumulated time: pickout 4.1033    decision 24.7138    set_bounds 24.6473    solve 86.6827    add 3.4515    
Current (lb-rhs): -0.07193440198898315
375287 domains visited
Cumulative time: 156.2743330001831

BaB round 23
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 473] [/input-12, 60] [/input-12, 60] [/input, 330] [/input, 458] [/input, 330] [/input, 3400] [/input-8, 874] [/input-8, 995] [/input-12, 60] 
cut re-enabled after branching node selection
0 lb beta sum: 0.22189517319202423, worst -0.07003378868103027
10 lb beta sum: 0.22189275920391083, worst -0.0700625479221344
Time: prepare 1.7606    bound 3.6542    transfer 0.1617    finalize 0.2363    func 6.0302    
Accumulated time: func 91.8807    prepare 20.5835    bound 53.7813    transfer 2.3866    finalize 9.2791    
all_split False
======================Cut inference begins======================
max lb tensor(0.24487108) min lb tensor(-0.07001767)
Number of Verified Splits: 9246 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 589.
#cuts 1-3: 4
#cuts 4-6: 60
#cuts 7-9: 421
#cuts 10-12: 104
#cuts >= 20: 0
BICCOS time: 0.0017268657684326172 
BICCOS Cumulative time: 10.987732648849487
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07193 (21), -0.07027 (21), -0.07011 (21), -0.07002 (21), -0.06997 (21), -0.06933 (21), -0.06879 (21), -0.06845 (21), -0.06836 (21), -0.06832 (21), -0.06821 (21), -0.06816 (21), -0.06805 (21), -0.06797 (21), -0.06750 (21), -0.06741 (21), -0.06739 (21), -0.06696 (21), -0.06690 (21), -0.06689 (21), 
Length of domains: 152036
Time: pickout 0.3055    decision 2.9898    set_bounds 1.5908    solve 6.0387    add 0.0995    
Accumulated time: pickout 4.4088    decision 27.7036    set_bounds 26.2381    solve 92.7213    add 3.5510    
Current (lb-rhs): -0.07193440198898315
398809 domains visited
Cumulative time: 167.4097182750702

BaB round 24
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 995] [/input, 458] [/input-8, 995] [/input, 458] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input, 458] [/input-8, 995] [/input-12, 60] 
cut re-enabled after branching node selection
0 lb beta sum: 0.2130562663078308, worst -0.06341812014579773
10 lb beta sum: 0.21305638551712036, worst -0.06353035569190979
Time: prepare 1.7627    bound 3.6524    transfer 0.1546    finalize 0.2500    func 6.0387    
Accumulated time: func 97.9195    prepare 22.3466    bound 57.4336    transfer 2.5412    finalize 9.5291    
all_split False
======================Cut inference begins======================
max lb tensor(0.24506639) min lb tensor(-0.06341812)
Number of Verified Splits: 8185 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 589.
#cuts 1-3: 4
#cuts 4-6: 60
#cuts 7-9: 421
#cuts 10-12: 104
#cuts >= 20: 0
BICCOS time: 0.0017485618591308594 
BICCOS Cumulative time: 10.989481210708618
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07193 (21), -0.07027 (21), -0.07011 (21), -0.07002 (21), -0.06997 (21), -0.06933 (21), -0.06879 (21), -0.06845 (21), -0.06836 (21), -0.06832 (21), -0.06821 (21), -0.06816 (21), -0.06805 (21), -0.06797 (21), -0.06750 (21), -0.06741 (21), -0.06739 (21), -0.06696 (21), -0.06690 (21), -0.06689 (21), 
Length of domains: 160235
Time: pickout 0.3127    decision 2.8464    set_bounds 1.5937    solve 6.0469    add 0.1784    
Accumulated time: pickout 4.7215    decision 30.5500    set_bounds 27.8319    solve 98.7682    add 3.7294    
Current (lb-rhs): -0.07193440198898315
423392 domains visited
Cumulative time: 178.50865387916565

BaB round 25
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-8, 116] [/input-12, 60] [/input-12, 60] [/input, 475] [/input, 330] [/input-8, 874] [/input, 475] [/input-8, 473] [/input-8, 874] 
cut re-enabled after branching node selection
0 lb beta sum: 0.20648229122161865, worst -0.0666610598564148
10 lb beta sum: 0.20648495852947235, worst -0.06674569845199585
Time: prepare 1.7500    bound 3.6534    transfer 0.1597    finalize 0.2434    func 6.0276    
Accumulated time: func 103.9471    prepare 24.0970    bound 61.0870    transfer 2.7009    finalize 9.7725    
all_split False
======================Cut inference begins======================
max lb tensor(0.24166891) min lb tensor(-0.06660765)
Number of Verified Splits: 9380 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 589.
#cuts 1-3: 4
#cuts 4-6: 60
#cuts 7-9: 421
#cuts 10-12: 104
#cuts >= 20: 0
BICCOS time: 0.0016803741455078125 
BICCOS Cumulative time: 10.991161584854126
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07193 (21), -0.07027 (21), -0.07011 (21), -0.07002 (21), -0.06997 (21), -0.06933 (21), -0.06879 (21), -0.06845 (21), -0.06836 (21), -0.06832 (21), -0.06821 (21), -0.06816 (21), -0.06805 (21), -0.06797 (21), -0.06741 (21), -0.06739 (21), -0.06690 (21), -0.06689 (21), -0.06683 (21), -0.06679 (21), 
Length of domains: 167239
Time: pickout 0.3051    decision 1.6782    set_bounds 3.1686    solve 6.0357    add 0.0923    
Accumulated time: pickout 5.0266    decision 32.2282    set_bounds 31.0005    solve 104.8039    add 3.8217    
Current (lb-rhs): -0.07193440198898315
446780 domains visited
Cumulative time: 189.93435430526733

BaB round 26
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 995] [/input-8, 473] [/input, 458] [/input-8, 473] [/input-12, 60] [/input-12, 60] [/input, 2137] [/input-12, 60] [/input-12, 60] [/input-8, 874] 
cut re-enabled after branching node selection
0 lb beta sum: 0.18937242031097412, worst -0.06828266382217407
10 lb beta sum: 0.18936949968338013, worst -0.06823727488517761
Time: prepare 1.7593    bound 3.6526    transfer 0.1555    finalize 0.2433    func 6.0237    
Accumulated time: func 109.9708    prepare 25.8568    bound 64.7396    transfer 2.8564    finalize 10.0158    
all_split False
======================Cut inference begins======================
max lb tensor(0.24404791) min lb tensor(-0.06819701)
Number of Verified Splits: 8108 of 32768
Stop inferencing: Max cuts number reached.
Total number of valid cuts: 589.
#cuts 1-3: 4
#cuts 4-6: 60
#cuts 7-9: 421
#cuts 10-12: 104
#cuts >= 20: 0
BICCOS time: 0.0012717247009277344 
BICCOS Cumulative time: 10.992433309555054
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07193 (21), -0.07027 (21), -0.07002 (21), -0.06997 (21), -0.06933 (21), -0.06879 (21), -0.06845 (21), -0.06836 (21), -0.06832 (21), -0.06821 (21), -0.06820 (22), -0.06805 (21), -0.06797 (21), -0.06741 (21), -0.06739 (21), -0.06689 (21), -0.06683 (21), -0.06679 (21), -0.06661 (22), -0.06653 (21), 
Length of domains: 175515
Time: pickout 0.3186    decision 1.6670    set_bounds 1.6077    solve 7.6861    add 0.2550    
Accumulated time: pickout 5.3452    decision 33.8952    set_bounds 32.6082    solve 112.4900    add 4.0767    
Current (lb-rhs): -0.07193440198898315
471440 domains visited
Time out!!!!!!!!
Result: unknown in 204.7157 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 98, vnnlib ID: 98 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.97282171, -9.59043694, -6.44806576, -4.78952980, -4.97297287,
         -4.42642069, -6.68016386, -6.68106413, -7.70960140, -9.47742367]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [664]; unstable size 664; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 664] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 664] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 664] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 239] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.04075253,  2.86903548,  0.75436497,  0.06829169, -0.61994475,
          1.08730936,  0.85343808,  1.25660920,  3.10610723]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.97282171, -9.59043694, -6.44806576, -4.78952980, -4.97297287,
         -4.42642069, -6.68016386, -6.68106413, -7.70960140, -9.47742367]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.18765354, -9.77073288, -6.59089756, -5.29431868, -4.97382355,
          -4.98171186, -7.01910067, -6.92423296, -7.98603344, -9.82796764]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00788832]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0079 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0729 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 99, vnnlib ID: 99 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.23901796, -6.11622238, -0.89747995, -2.37960625, -1.48292530,
         -3.00284576, -1.44222963, -3.95331812, -5.41394901, -6.03653765]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [445]; unstable size 445; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 180, 1, 445] with unstable size 179 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 445] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 445] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [179]; unstable size 179; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 179] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 179] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.11019564,  3.76489139, -1.18024492,  0.25222456, -0.68485975,
          0.81499958,  1.69955838,  2.79094529,  3.59716272]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.23901796, -6.11622238, -0.89747995, -2.37960625, -1.48292530,
         -3.00284576, -1.44222963, -3.95331812, -5.41394901, -6.03653765]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.23901796, -6.11622334, -0.89747965, -2.37960601, -1.48292530,
          -3.00284576, -1.44222927, -3.95331812, -5.41394997, -6.03653717],
         [-4.23901796, -6.11622334, -0.89747965, -2.37960601, -1.48292530,
          -3.00284576, -1.44222927, -3.95331812, -5.41394997, -6.03653717]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.54474962,  0.04069602]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.05873025,  0.34444451,  0.05873025,  ..., -1.52857137,
            -1.48095226, -1.48095226],
           [ 0.04285724, -0.30634910, -0.44920623,  ..., -1.54444432,
            -1.56031740, -1.52857137],
           [-0.25873005, -0.63968253, -0.94126981,  ..., -1.54444432,
            -1.56031740, -1.54444432],
           ...,
           [-1.92539680, -1.92539680, -1.95714283,  ..., -1.73492062,
            -1.73492062, -1.75079370],
           [-1.90952384, -1.95714283, -1.96507931,  ..., -1.73492062,
            -1.75079370, -1.76666665],
           [-1.89365077, -1.90952384, -1.92539680,  ..., -1.76666665,
            -1.78253973, -1.78253973]],

          [[-0.16103047,  0.11272153, -0.20933965,  ..., -1.41706920,
            -1.36875999, -1.36875999],
           [-0.25764883, -0.56360704, -0.64412236,  ..., -1.43317223,
            -1.44927526, -1.41706920],
           [-0.51529789, -0.80515295, -1.03059578,  ..., -1.43317223,
            -1.44927526, -1.41706920],
           ...,
           [-1.88405800, -1.90016103, -1.91626418,  ..., -1.88405800,
            -1.90016103, -1.88405800],
           [-1.88405800, -1.93236721, -1.94847023,  ..., -1.90016103,
            -1.90016103, -1.90016103],
           [-1.91626418, -1.94847023, -1.95652175,  ..., -1.88405800,
            -1.91626418, -1.91626418]],

          [[-0.92803597, -0.65817088, -0.97301346,  ..., -1.68515754,
            -1.64767623, -1.64767623],
           [-1.00299859, -1.27286363, -1.34782624,  ..., -1.69265378,
            -1.68515754, -1.68515754],
           [-1.25787115, -1.48275876, -1.61769128,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.68515754, -1.68515754, -1.69265378,  ..., -1.64767623,
            -1.66266882, -1.67766130],
           [-1.68515754, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.67766130, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.66266882,
            -1.67766130, -1.68515754]]],


         [[[ 0.05873025,  0.34444451,  0.05873025,  ..., -1.52857137,
            -1.48095226, -1.48095226],
           [ 0.04285724, -0.30634910, -0.44920623,  ..., -1.54444432,
            -1.56031740, -1.52857137],
           [-0.25873005, -0.63968253, -0.94126981,  ..., -1.54444432,
            -1.56031740, -1.54444432],
           ...,
           [-1.92539680, -1.92539680, -1.95714283,  ..., -1.73492062,
            -1.73492062, -1.75079370],
           [-1.90952384, -1.95714283, -1.96507931,  ..., -1.73492062,
            -1.75079370, -1.76666665],
           [-1.89365077, -1.90952384, -1.92539680,  ..., -1.76666665,
            -1.78253973, -1.78253973]],

          [[-0.16103047,  0.11272153, -0.20933965,  ..., -1.41706920,
            -1.36875999, -1.36875999],
           [-0.25764883, -0.56360704, -0.64412236,  ..., -1.43317223,
            -1.44927526, -1.41706920],
           [-0.51529789, -0.80515295, -1.03059578,  ..., -1.43317223,
            -1.44927526, -1.41706920],
           ...,
           [-1.88405800, -1.90016103, -1.91626418,  ..., -1.88405800,
            -1.90016103, -1.88405800],
           [-1.88405800, -1.93236721, -1.94847023,  ..., -1.90016103,
            -1.90016103, -1.90016103],
           [-1.91626418, -1.94847023, -1.95652175,  ..., -1.88405800,
            -1.91626418, -1.91626418]],

          [[-0.92803597, -0.65817088, -0.97301346,  ..., -1.68515754,
            -1.64767623, -1.64767623],
           [-1.00299859, -1.27286363, -1.34782624,  ..., -1.69265378,
            -1.68515754, -1.68515754],
           [-1.25787115, -1.48275876, -1.61769128,  ..., -1.69265378,
            -1.69265378, -1.68515754],
           ...,
           [-1.68515754, -1.68515754, -1.69265378,  ..., -1.64767623,
            -1.66266882, -1.67766130],
           [-1.68515754, -1.69265378, -1.69265378,  ..., -1.66266882,
            -1.67766130, -1.67766130],
           [-1.69265378, -1.68515754, -1.68515754,  ..., -1.66266882,
            -1.67766130, -1.68515754]]]]], device='cuda:0') torch.Size([1, 2, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0703 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 100, vnnlib ID: 100 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.53976345, -13.16501808,  -7.78616238,  -7.53348351,  -7.22956753,
          -7.13146210,  -9.51203918,  -8.66154480, -12.44145298, -11.93621635]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [583]; unstable size 583; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 279, 1, 583] with unstable size 278 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 583] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 583] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [278]; unstable size 278; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 278] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 278] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.95121795,  2.65530014, -1.12760592, -1.74681783, -0.90773952,
          0.75648594, -0.87717164,  2.33981276,  1.64043403]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.53976345, -13.16501808,  -7.78616238,  -7.53348351,  -7.22956753,
          -7.13146210,  -9.51203918,  -8.66154480, -12.44145298, -11.93621635]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.53976154, -13.16501617,  -7.78616142,  -7.53348160,  -7.22956657,
           -7.13146067,  -9.51203918,  -8.66154480, -12.44145107, -11.93621540],
         [-10.53976154, -13.16501617,  -7.78616142,  -7.53348160,  -7.22956657,
           -7.13146067,  -9.51203918,  -8.66154480, -12.44145107, -11.93621540]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.25267982, -0.30391502, -0.40202093,  1.12806320]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]],


         [[[ 0.20158738,  0.32857150, -0.76666665,  ...,  0.31269848,
             0.53492069,  1.04285717],
           [ 0.26507944,  0.37619054, -0.73492062,  ...,  0.97936511,
             0.77301592,  0.91587305],
           [ 0.29682547,  0.36031753, -0.70317459,  ...,  1.16984153,
             1.15396857,  1.05873048],
           ...,
           [ 0.16984135,  0.15396833,  0.04285724,  ...,  0.32857150,
             0.53492069,  0.55079371],
           [ 0.15396833,  0.13809532,  0.01111121,  ...,  0.39206356,
             0.50317466,  0.51904768],
           [ 0.07460327,  0.05873025, -0.06825387,  ...,  0.45555562,
             0.51904768,  0.53492069]],

          [[ 0.08051541,  0.30595824, -0.83735907,  ...,  0.67632860,
             0.74074084,  0.95008057],
           [ 0.12882459,  0.32206130, -0.83735907,  ...,  0.98228669,
             0.70853472,  0.82125610],
           [ 0.12882459,  0.30595824, -0.83735907,  ...,  1.12721443,
             1.09500813,  1.03059590],
           ...,
           [ 0.01610318, -0.03220600, -0.56360704,  ..., -0.19323659,
            -0.09661824, -0.06441211],
           [ 0.01610318, -0.04830906, -0.59581316,  ..., -0.17713353,
            -0.14492741, -0.11272129],
           [-0.04830906, -0.09661824, -0.66022539,  ..., -0.14492741,
            -0.09661824, -0.06441211]],

          [[-0.17841063,  0.03148442, -0.92803597,  ...,  0.25637197,
             0.43628204,  0.96101969],
           [-0.13343313,  0.04647692, -0.92803597,  ...,  1.00599718,
             0.72113961,  0.78110963],
           [-0.11844061,  0.04647692, -0.97301346,  ...,  1.06596720,
             1.06596720,  0.99100471],
           ...,
           [ 0.01649191, -0.01349309, -0.67316341,  ...,  0.03148442,
             0.10644694,  0.18140946],
           [ 0.01649191, -0.02848560, -0.70314842,  ...,  0.00149941,
            -0.01349309,  0.07646193],
           [-0.02848560, -0.04347810, -0.77811092,  ...,  0.03148442,
             0.07646193,  0.15142445]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0860 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 101, vnnlib ID: 101 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.08083820, -14.74164295, -15.41894627, -16.35571480, -15.69711781,
         -17.93531990, -17.23896980, -18.14307785, -10.66590214, -14.52196217]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [682]; unstable size 682; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 178, 1, 682] with unstable size 177 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 682] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 682] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [177]; unstable size 177; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 177] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 177] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.62306958,  3.08736968,  3.49406028,  4.42359066,  3.72971201,
          5.79383659,  5.18702269,  5.91974640,  2.72902703]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.08083820, -14.74164295, -15.41894627, -16.35571480, -15.69711781,
         -17.93531990, -17.23896980, -18.14307785, -10.66590214, -14.52196217]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.86083126, -14.65515518, -15.32081318, -16.32747269, -15.65061283,
          -17.88081551, -17.16146469, -17.99161720, -10.98882198, -14.44098759]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12799072]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0053 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0370 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 102, vnnlib ID: 102 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.08662319, -10.92296124,  -4.84066486,  -5.63669729,  -5.64046621,
          -5.76534128,  -7.64309168,  -7.17506170,  -8.36095524,  -9.82923794]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [704]; unstable size 704; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 251, 1, 704] with unstable size 250 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 704] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 704] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [250]; unstable size 250; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 250] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 250] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.20884323,  3.62872148, -1.65299881, -0.98555768, -1.01563966,
          0.82072133,  0.33104634,  1.38739467,  2.34938645]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.08662319, -10.92296124,  -4.84066486,  -5.63669729,  -5.64046621,
          -5.76534128,  -7.64309168,  -7.17506170,  -8.36095524,  -9.82923794]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.08662319, -10.92296028,  -4.84066582,  -5.63669777,  -5.64046764,
           -5.76534081,  -7.64309168,  -7.17506170,  -8.36095524,  -9.82923794],
         [ -7.08662319, -10.92296028,  -4.84066582,  -5.63669777,  -5.64046764,
           -5.76534081,  -7.64309168,  -7.17506170,  -8.36095524,  -9.82923794]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.79980183, -0.00376987,  0.12487316]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]],


         [[[ 1.05873048,  1.48730183,  1.43968284,  ...,  1.12222254,
             0.82063496,  1.02698421],
           [ 1.29682565,  1.50317490,  1.55079389,  ...,  0.70952386,
             1.01111114,  1.37619078],
           [ 1.24920666,  1.50317490,  1.63015902,  ...,  0.58253974,
             1.04285717,  1.15396857],
           ...,
           [ 0.47142863,  0.64603180,  0.37619054,  ..., -0.35396814,
            -0.43333322, -0.44920623],
           [ 0.23333341,  0.42380959,  0.28095245,  ..., -0.48095238,
            -0.44920623, -0.52857143],
           [ 0.15396833,  0.32857150,  0.21746039,  ..., -0.49682540,
            -0.44920623, -0.54444444]],

          [[ 1.06280196,  1.51368785,  1.48148179,  ...,  1.07890511,
             0.78904998,  0.99838978],
           [ 1.32045114,  1.52979100,  1.57810009,  ...,  0.66022551,
             0.98228669,  1.35265732],
           [ 1.27214205,  1.52979100,  1.67471850,  ...,  0.54750413,
             0.99838978,  1.11111140],
           ...,
           [ 0.43478271,  0.61191636,  0.32206130,  ..., -0.48309177,
            -0.49919480, -0.49919480],
           [ 0.20933989,  0.40257660,  0.24154601,  ..., -0.56360704,
            -0.51529789, -0.57971013],
           [ 0.11272153,  0.30595824,  0.17713377,  ..., -0.56360704,
            -0.51529789, -0.61191624]],

          [[ 0.99100471,  1.36581755,  1.29085493,  ...,  0.76611710,
             0.54122955,  0.73613209],
           [ 1.20089996,  1.35082495,  1.36581755,  ...,  0.37631202,
             0.75112462,  1.11094475],
           [ 1.12593722,  1.33583248,  1.41079497,  ...,  0.24137947,
             0.79610211,  0.91604215],
           ...,
           [ 0.07646193,  0.25637197,  0.06146942,  ..., -0.52323836,
            -0.61319339, -0.61319339],
           [-0.16341813,  0.01649191, -0.07346311,  ..., -0.62818587,
            -0.59820086, -0.64317840],
           [-0.25337315, -0.11844061, -0.16341813,  ..., -0.62818587,
            -0.58320838, -0.65817088]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0830 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 103, vnnlib ID: 103 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.82976532, -12.37597370,  -4.80148506,  -8.27321815,  -4.32335472,
          -8.39564705,  -7.14005709,  -8.87581921, -10.65055561, -11.85609341]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [682]; unstable size 682; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 257, 1, 682] with unstable size 256 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 682] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 682] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [256]; unstable size 256; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 256] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 256] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.48958635,  6.85282898, -0.38445073,  3.19247007,  3.10144329,
          1.89875412,  3.66963363,  5.16848564,  6.31332350]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.82976532, -12.37597370,  -4.80148506,  -8.27321815,  -4.32335472,
          -8.39564705,  -7.14005709,  -8.87581921, -10.65055561, -11.85609341]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.23it/s]100%|██████████| 1/1 [00:00<00:00,  9.22it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.09303856, -12.88755322,  -4.96290588,  -8.65058517,  -4.84228325,
           -8.76727962,  -7.62690067,  -9.28729725, -11.05305099, -12.33880711]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.12062263]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1109 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 32.900123596191406
alpha/beta optimization time: 1.1979176998138428
initial alpha-crown bounds: tensor([[ 2.57450914,  6.94005299, -0.32821178,  3.23324680,  3.14502001,
          1.95601845,  3.71171594,  5.26033783,  6.40743446]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.32821178436279297
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6267101764679
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.6266713142395
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.6266438961029
Verifying property 2 with 1 instances.
##### Instance 103 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.32821178]], device='cuda:0') need to verify.
Model prediction is: tensor([ -7.82976532, -12.37597370,  -4.80148506,  -8.27321815,  -4.32335472,
         -8.39564705,  -7.14005709,  -8.87581921, -10.65055561, -11.85609341],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.32821178]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 682
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 253
Node /15 input 0: size torch.Size([100]) unstable 14
-----------------
# of unstable neurons: 949
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011563301086425781
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.32820814847946167
10 lb beta sum: 0.0, worst -0.32821354269981384
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0527    transfer 0.0001    finalize 0.0001    func 0.0532    
Accumulated time: func 0.0532    prepare 0.0002    bound 0.0527    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 1] 
split level 2: [/input-12, 37] 
split level 3: [/input-12, 72] 
split level 4: [/input-12, 26] 
split level 5: [/input-12, 44] 
split level 6: [/input-12, 51] 
split level 7: [/input-8, 1892] 
split level 8: [/input-8, 1365] 
split level 9: [/input-8, 542] 
split level 10: [/input-8, 533] 
split level 11: [/input-8, 1308] 
split level 12: [/input-8, 1363] 
split level 13: [/input-8, 523] 
split level 14: [/input-8, 1052] 
split level 15: [/input-8, 86] 
split level 16: [/input-8, 1886] 
split level 17: [/input-8, 1357] 
split level 18: [/input-8, 1891] 
split level 19: [/input-8, 1364] 
split level 20: [/input-8, 1356] 
split level 21: [/input-8, 1373] 
split level 22: [/input-8, 77] 
split level 23: [/input-8, 1370] 
split level 24: [/input-8, 1828] 
split level 25: [/input-8, 1067] 
split level 26: [/input-8, 1899] 
split level 27: [/input-8, 539] 
split level 28: [/input-8, 476] 
split level 29: [/input-8, 1812] 
split level 30: [/input-8, 1379] 
split level 31: [/input-8, 1900] 
split level 32: [/input-8, 76] 
split level 33: [/input-8, 1374] 
split level 34: [/input-8, 1068] 
split level 35: [/input-8, 1369] 
split level 36: [/input-8, 1366] 
split level 37: [/input-8, 1358] 
split level 38: [/input-8, 1044] 
split level 39: [/input-8, 1292] 
split level 40: [/input-8, 1894] 
split level 41: [/input-8, 1901] 
split level 42: [/input-8, 1378] 
split level 43: [/input-8, 1893] 
split level 44: [/input-8, 1346] 
split level 45: [/input-8, 1381] 
split level 46: [/input-8, 1876] 
split level 47: [/input-8, 916] 
split level 48: [/input-8, 1861] 
split level 49: [/input-8, 1310] 
split level 50: [/input-8, 517] 
split level 51: [/input-8, 1882] 
split level 52: [/input-8, 1289] 
split level 53: [/input-8, 1890] 
split level 54: [/input-8, 1349] 
split level 55: [/input-8, 1910] 
split level 56: [/input-8, 669] 
split level 57: [/input-8, 990] 
split level 58: [/input-8, 939] 
split level 59: [/input-8, 85] 
split level 60: [/input-8, 1902] 
split level 61: [/input-8, 1889] 
split level 62: [/input-8, 944] 
split level 63: [/input-8, 1382] 
split level 64: [/input-8, 1868] 
split level 65: [/input-8, 1019] 
split level 66: [/input-8, 1339] 
split level 67: [/input-8, 571] 
split level 68: [/input-8, 1350] 
split level 69: [/input-8, 1401] 
split level 70: [/input-8, 572] 
split level 71: [/input-8, 1090] 
split level 72: [/input-8, 92] 
split level 73: [/input-8, 1361] 
split level 74: [/input, 2492] 
split level 75: [/input-8, 931] 
split level 76: [/input-8, 936] 
split level 77: [/input-8, 518] 
split level 78: [/input-8, 932] 
split level 79: [/input-8, 951] 
split level 80: [/input-8, 1405] 
split level 81: [/input-8, 1353] 
split level 82: [/input-8, 969] 
split level 83: [/input, 2455] 
split level 84: [/input-8, 1080] 
split level 85: [/input-8, 1402] 
split level 86: [/input-8, 1827] 
split level 87: [/input-8, 868] 
split level 88: [/input-8, 1318] 
split level 89: [/input-8, 558] 
split level 90: [/input-8, 1396] 
split level 91: [/input-8, 1888] 
split level 92: [/input-8, 977] 
split level 93: [/input, 2536] 
split level 94: [/input-8, 943] 
split level 95: [/input, 2460] 
split level 96: [/input-8, 1880] 
split level 97: [/input, 1687] 
split level 98: [/input-8, 1326] 
split level 99: [/input-8, 1389] 
split level 100: [/input-8, 546] 
split level 101: [/input-12, 53] 
split level 102: [/input-8, 1430] 
split level 103: [/input, 3547] 
split level 104: [/input-8, 404] 
split level 105: [/input, 2475] 
split level 106: [/input-8, 844] 
split level 107: [/input, 2474] 
split level 108: [/input-8, 832] 
split level 109: [/input-8, 985] 
split level 110: [/input-8, 528] 
split level 111: [/input-8, 545] 
split level 112: [/input, 1689] 
split level 113: [/input-8, 537] 
split level 114: [/input-8, 915] 
split level 115: [/input, 1685] 
split level 116: [/input, 2522] 
split level 117: [/input, 3451] 
split level 118: [/input, 437] 
split level 119: [/input, 1723] 
split level 120: [/input-8, 566] 
split level 121: [/input, 2424] 
split level 122: [/input, 1684] 
split level 123: [/input-8, 564] 
split level 124: [/input, 2462] 
split level 125: [/input, 2477] 
split level 126: [/input, 487] 
split level 127: [/input-8, 561] 
split level 128: [/input, 3272] 
split level 129: [/input, 2883] 
split level 130: [/input, 2487] 
split level 131: [/input, 2523] 
split level 132: [/input, 2723] 
split level 133: [/input, 3303] 
split level 134: [/input, 3269] 
split level 135: [/input, 2472] 
split level 136: [/input, 1497] 
split level 137: [/input-8, 1424] 
split level 138: [/input, 4019] 
split level 139: [/input, 1513] 
split level 140: [/input, 1515] 
split level 141: [/input, 2533] 
split level 142: [/input-8, 64] 
split level 143: [/input-8, 1416] 
split level 144: [/input, 1132] 
split level 145: [/input, 471] 
split level 146: [/input, 2518] 
split level 147: [/input, 2554] 
split level 148: [/input, 2516] 
split level 149: [/input, 613] 
split level 150: [/input, 1668] 
split level 151: [/input, 2505] 
split level 152: [/input, 486] 
split level 153: [/input-8, 121] 
split level 154: [/input, 3531] 
split level 155: [/input, 2634] 
split level 156: [/input-8, 980] 
split level 157: [/input, 2264] 
split level 158: [/input, 2555] 
split level 159: [/input, 2551] 
split level 160: [/input, 474] 
split level 161: [/input, 455] 
split level 162: [/input-8, 1875] 
split level 163: [/input-8, 521] 
split level 164: [/input, 2244] 
split level 165: [/input, 438] 
split level 166: [/input, 2506] 
split level 167: [/input, 458] 
split level 168: [/input-8, 935] 
split level 169: [/input, 2500] 
split level 170: [/input, 2443] 
split level 171: [/input, 1674] 
split level 172: [/input, 3575] 
split level 173: [/input, 2553] 
split level 174: [/input, 1403] 
split level 175: [/input, 3577] 
split level 176: [/input, 3467] 
split level 177: [/input, 1499] 
split level 178: [/input-8, 1045] 
split level 179: [/input, 2539] 
split level 180: [/input, 489] 
split level 181: [/input, 2280] 
split level 182: [/input-8, 998] 
split level 183: [/input-8, 84] 
split level 184: [/input, 1117] 
split level 185: [/input, 3290] 
split level 186: [/input, 1751] 
split level 187: [/input, 2428] 
split level 188: [/input, 2249] 
split level 189: [/input, 1419] 
split level 190: [/input, 3256] 
split level 191: [/input, 2470] 
split level 192: [/input, 2429] 
split level 193: [/input, 3321] 
split level 194: [/input, 521] 
split level 195: [/input, 3579] 
split level 196: [/input, 2549] 
split level 197: [/input-8, 529] 
split level 198: [/input, 149] 
split level 199: [/input, 3572] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3281738758087158
10 lb beta sum: 0.0, worst -0.32816755771636963
Time: prepare 0.0116    bound 0.0962    transfer 0.0022    finalize 0.0029    func 0.1156    
Accumulated time: func 0.1688    prepare 0.0218    bound 0.1490    transfer 0.0023    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(-0.02066183) min lb tensor(-0.32815859)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.01032400131225586 
BICCOS Cumulative time: 0.01032400131225586
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.31694 (1), -0.31648 (1), -0.31636 (1), -0.31617 (1), -0.31571 (1), -0.31507 (1), -0.31478 (1), -0.31361 (1), -0.31352 (1), -0.31339 (1), -0.31337 (1), -0.31321 (1), -0.31234 (1), -0.31215 (1), -0.31212 (1), -0.31073 (1), -0.31035 (1), -0.31021 (1), -0.30959 (1), -0.30912 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5086    set_bounds 0.0093    solve 0.1157    add 0.0675    
Accumulated time: pickout 0.0003    decision 0.5086    set_bounds 0.0093    solve 0.1157    add 0.0675    
Current (lb-rhs): -0.31693676114082336
50 domains visited
Cumulative time: 0.7698438167572021

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 37] [/input-12, 37] [/input-12, 1] [/input-12, 37] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 37] 
split level 2: [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 37] [/input-12, 37] [/input-12, 26] [/input-12, 26] 
split level 3: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 26] [/input-12, 51] [/input-12, 51] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2959621250629425
10 lb beta sum: 0.0, worst -0.2958839237689972
Time: prepare 0.0126    bound 0.0951    transfer 0.0007    finalize 0.0022    func 0.1133    
Accumulated time: func 0.2821    prepare 0.0346    bound 0.2441    transfer 0.0030    finalize 0.0053    
all_split False
======================Cut inference begins======================
max lb tensor(0.16014147) min lb tensor(-0.29586673)
Number of Verified Splits: 27 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.013658285140991211 
BICCOS Cumulative time: 0.02398228645324707
Preprocessing time: 0.01183938980102539 Inference time: 0.0011661052703857422 Add cuts time: 0.00035071372985839844 Cut analysis time: 0.0003020763397216797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.13613 (2), -0.13576 (2), -0.13384 (2), -0.13356 (2), -0.13349 (2), -0.13302 (2), -0.13233 (2), -0.13217 (2), -0.13213 (2), -0.13045 (2), -0.13022 (2), -0.12939 (2), -0.12920 (2), -0.12847 (2), -0.12797 (2), -0.12766 (2), -0.12625 (2), -0.12470 (2), -0.12452 (2), -0.12318 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0211    set_bounds 0.0123    solve 0.1134    add 0.1852    
Accumulated time: pickout 0.0013    decision 0.5298    set_bounds 0.0216    solve 0.2290    add 0.2528    
Current (lb-rhs): -0.13613444566726685
100 domains visited
Cumulative time: 1.11674165725708

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 1] [/input-12, 37] [/input-12, 1] [/input-12, 54] [/input-12, 37] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 1: [/input-12, 37] [/input-12, 37] [/input-12, 26] [/input-12, 37] [/input-12, 1] [/input-12, 26] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
split level 2: [/input-12, 26] [/input-12, 26] [/input-12, 44] [/input-12, 26] [/input-12, 26] [/input-12, 44] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 44] 
split level 3: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-8, 1364] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12922590970993042
10 lb beta sum: 0.41224050521850586, worst -0.2834317088127136
Time: prepare 0.0069    bound 0.1157    transfer 0.0012    finalize 0.0020    func 0.1289    
Accumulated time: func 0.4110    prepare 0.0417    bound 0.3598    transfer 0.0042    finalize 0.0073    
all_split False
======================Cut inference begins======================
max lb tensor(0.25799450) min lb tensor(-0.08397068)
Number of Verified Splits: 172 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 18
#cuts 4-6: 5
#cuts >= 20: 0
BICCOS time: 0.02274465560913086 
BICCOS Cumulative time: 0.04672694206237793
Preprocessing time: 0.011812210083007812 Inference time: 0.007576465606689453 Add cuts time: 0.0026521682739257812 Cut analysis time: 0.0007038116455078125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01667 (3), -0.01619 (3), -0.01580 (3), -0.01579 (3), -0.01490 (3), -0.01458 (3), -0.01404 (3), -0.01403 (3), -0.01355 (3), -0.01336 (3), -0.01333 (3), -0.01322 (3), -0.01313 (3), -0.01236 (3), -0.01230 (3), -0.01227 (3), -0.01207 (3), -0.01174 (3), -0.01152 (3), -0.01142 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0193    set_bounds 0.0155    solve 0.1290    add 0.0968    
Accumulated time: pickout 0.0022    decision 0.5491    set_bounds 0.0371    solve 0.3580    add 0.3495    
Current (lb-rhs): -0.016674786806106567
150 domains visited
Cumulative time: 1.401298999786377

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 1] [/input-12, 54] 
split level 1: [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
split level 2: [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] 
split level 3: [/input-8, 1373] [/input-12, 51] [/input-8, 1373] [/input-12, 51] [/input-8, 1364] [/input-12, 51] [/input-12, 51] [/input-8, 1373] [/input-12, 51] [/input-12, 51] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.076223224401474
10 lb beta sum: 0.47118520736694336, worst -0.24702151119709015
Time: prepare 0.0071    bound 0.1304    transfer 0.0018    finalize 0.0020    func 0.1439    
Accumulated time: func 0.5549    prepare 0.0490    bound 0.4902    transfer 0.0060    finalize 0.0093    
all_split False
======================Cut inference begins======================
max lb tensor(0.70417631) min lb tensor(-0.01223513)
Number of Verified Splits: 359 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 6
#cuts 4-6: 18
#cuts >= 20: 0
BICCOS time: 0.03981924057006836 
BICCOS Cumulative time: 0.08654618263244629
Preprocessing time: 0.011717796325683594 Inference time: 0.01692652702331543 Add cuts time: 0.010361671447753906 Cut analysis time: 0.0008132457733154297
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0192    set_bounds 0.0153    solve 0.1440    add 0.0241    
Accumulated time: pickout 0.0032    decision 0.5683    set_bounds 0.0525    solve 0.5020    add 0.3736    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 51]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([6.03131989e-11, 4.65825945e-02, 1.17932037e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 51,  1]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([6.03131989e-11, 4.65825945e-02, 9.54549760e-02, 7.20525086e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 51,  1]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([6.03131989e-11, 4.65825945e-02, 9.54549760e-02, 6.75307354e-03]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 51]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([6.03131989e-11, 5.04806191e-02, 1.12179413e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 51,  1]), tensor([-1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([6.03131989e-11, 5.04806191e-02, 9.66284424e-02, 7.08840936e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 51,  1]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([6.03131989e-11, 5.04806191e-02, 9.66284424e-02, 7.65389344e-03]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54,  1, 26]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([6.03131989e-11, 1.52891785e-01, 5.69480807e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54,  1, 26, 37]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([6.03131989e-11, 1.52891785e-01, 9.16092992e-02, 8.94327313e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54,  1, 26, 37]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([6.03131989e-11, 1.52891785e-01, 9.16092992e-02, 4.36757645e-03]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54,  1]), tensor([1., 1.]), tensor([0, 0]), tensor([6.03131989e-11, 4.99393195e-02]), tensor([0, 1]))}
Shallow branching resets to n domains:  10
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20287156105041504
10 lb beta sum: 0.4709600508213043, worst -0.1919955611228943
Time: prepare 0.0004    bound 0.1250    transfer 0.0002    finalize 0.0002    func 0.1259    
Accumulated time: func 0.6808    prepare 0.0495    bound 0.6152    transfer 0.0062    finalize 0.0095    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 37] [/input-12, 37] 
split level 1: [/input-12, 44] [/input-12, 26] 
split level 2: [/input-12, 51] [/input-12, 51] 
split level 3: [/input-8, 1892] [/input-12, 44] 
split level 4: [/input-8, 1373] [/input-8, 1892] 
split level 5: [/input-8, 1364] [/input-8, 1364] 
split level 6: [/input-8, 1381] [/input-8, 1373] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5557711720466614, worst -0.10239963233470917
10 lb beta sum: 0.5842674970626831, worst -0.10126446187496185
Time: prepare 0.0109    bound 0.1271    transfer 0.0012    finalize 0.0017    func 0.1426    
Accumulated time: func 0.8234    prepare 0.0607    bound 0.7423    transfer 0.0074    finalize 0.0112    
all_split False
======================Cut inference begins======================
max lb tensor(0.24758446) min lb tensor(-0.10077350)
Number of Verified Splits: 224 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.5655500888824463, worst -0.22499333322048187
10 lb beta sum: 0.9899500608444214, worst -0.10590177774429321
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 43.
#cuts 1-3: 6
#cuts 4-6: 35
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.4371058940887451 
BICCOS Cumulative time: 0.5236520767211914
Preprocessing time: 0.007176399230957031 Inference time: 0.418839693069458 Add cuts time: 0.009469270706176758 Cut analysis time: 0.0016205310821533203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10077 (7), -0.09811 (7), -0.09760 (7), -0.09500 (7), -0.08136 (7), -0.07868 (7), -0.07765 (7), -0.07497 (7), -0.06026 (7), -0.05894 (7), -0.05442 (7), -0.05400 (7), -0.04899 (7), -0.04678 (7), -0.04666 (7), -0.04465 (7), -0.04421 (7), -0.04300 (7), -0.03768 (7), -0.03718 (7), 
Length of domains: 32
Time: pickout 0.0005    decision 0.0194    set_bounds 0.0228    solve 0.1427    add 0.0011    
Accumulated time: pickout 0.0037    decision 0.5877    set_bounds 0.0753    solve 0.6447    add 0.3747    
Current (lb-rhs): -0.10077349841594696
182 domains visited
Cumulative time: 2.4200856685638428

BaB round 2
batch: 32
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 1: [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1363] [/input-8, 1891] [/input-8, 1363] 
split level 2: [/input-8, 1891] [/input-8, 1886] [/input-8, 1891] [/input-8, 1886] [/input-8, 1891] [/input-8, 1886] [/input-8, 1891] [/input-8, 1886] [/input-8, 1363] [/input-8, 1886] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0913478434085846
10 lb beta sum: 0.020039061084389687, worst -0.09075906872749329
Time: prepare 0.0056    bound 0.1293    transfer 0.0006    finalize 0.0012    func 0.1384    
Accumulated time: func 0.9618    prepare 0.0666    bound 0.8717    transfer 0.0080    finalize 0.0124    
all_split False
======================Cut inference begins======================
max lb tensor(0.47393441) min lb tensor(-0.09044260)
Number of Verified Splits: 146 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 7
#cuts 4-6: 11
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.024656295776367188 
BICCOS Cumulative time: 0.5483083724975586
Preprocessing time: 0.0076558589935302734 Inference time: 0.013993978500366211 Add cuts time: 0.0022487640380859375 Cut analysis time: 0.0007576942443847656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09044 (10), -0.08769 (10), -0.08655 (10), -0.08445 (10), -0.08270 (10), -0.08212 (10), -0.08039 (10), -0.07927 (10), -0.07892 (10), -0.07615 (10), -0.07253 (10), -0.07146 (10), -0.07131 (10), -0.07009 (10), -0.06996 (10), -0.06946 (10), -0.06751 (10), -0.06688 (10), -0.06563 (10), -0.06452 (10), 
Length of domains: 110
Time: pickout 0.0013    decision 0.0161    set_bounds 0.0212    solve 0.1385    add 0.0013    
Accumulated time: pickout 0.0050    decision 0.6038    set_bounds 0.0965    solve 0.7832    add 0.3760    
Current (lb-rhs): -0.09044259786605835
292 domains visited
Cumulative time: 2.624171257019043

BaB round 3
batch: 110
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1886] [/input-8, 1052] [/input-8, 1356] [/input-8, 539] [/input-8, 1356] [/input-8, 1052] [/input-8, 1067] [/input-8, 1356] [/input-8, 1052] [/input-8, 1356] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08683469891548157
10 lb beta sum: 0.2185591608285904, worst -0.08649873733520508
Time: prepare 0.0044    bound 0.1349    transfer 0.0005    finalize 0.0011    func 0.1425    
Accumulated time: func 1.1043    prepare 0.0712    bound 1.0066    transfer 0.0085    finalize 0.0135    
all_split False
======================Cut inference begins======================
max lb tensor(0.31174004) min lb tensor(-0.08637652)
Number of Verified Splits: 156 of 220
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 12
#cuts 4-6: 4
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.0246889591217041 
BICCOS Cumulative time: 0.5729973316192627
Preprocessing time: 0.006734132766723633 Inference time: 0.01545405387878418 Add cuts time: 0.0019271373748779297 Cut analysis time: 0.0005736351013183594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08638 (11), -0.08255 (11), -0.08239 (11), -0.07953 (11), -0.07859 (11), -0.07825 (11), -0.07687 (11), -0.07656 (11), -0.07610 (11), -0.07422 (11), -0.07356 (11), -0.07259 (11), -0.07201 (11), -0.07171 (11), -0.07041 (11), -0.06882 (11), -0.06852 (11), -0.06813 (11), -0.06718 (11), -0.06633 (11), 
Length of domains: 64
Time: pickout 0.0020    decision 0.0168    set_bounds 0.0097    solve 0.1426    add 0.0014    
Accumulated time: pickout 0.0070    decision 0.6205    set_bounds 0.1062    solve 0.9258    add 0.3774    
Current (lb-rhs): -0.08637651801109314
356 domains visited
Cumulative time: 2.8222603797912598

BaB round 4
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1886] [/input-8, 1886] [/input-8, 1356] [/input-8, 1357] [/input-8, 1356] [/input-8, 1886] [/input-8, 1357] [/input-8, 1067] [/input-8, 1886] [/input-8, 1067] 
split level 1: [/input-8, 539] [/input-8, 539] [/input-8, 1886] [/input-8, 1356] [/input-8, 1891] [/input-8, 1356] [/input-8, 1886] [/input-8, 1886] [/input-8, 539] [/input-8, 1891] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07730820775032043
10 lb beta sum: 0.6077225208282471, worst -0.07697001099586487
Time: prepare 0.0050    bound 0.1269    transfer 0.0012    finalize 0.0011    func 0.1359    
Accumulated time: func 1.2402    prepare 0.0763    bound 1.1335    transfer 0.0097    finalize 0.0146    
all_split False
======================Cut inference begins======================
max lb tensor(0.45176244) min lb tensor(-0.07684317)
Number of Verified Splits: 204 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 17
#cuts 4-6: 4
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.03401350975036621 
BICCOS Cumulative time: 0.6070108413696289
Preprocessing time: 0.007998228073120117 Inference time: 0.02234482765197754 Add cuts time: 0.0030298233032226562 Cut analysis time: 0.0006406307220458984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07684 (13), -0.06919 (13), -0.06870 (13), -0.06854 (13), -0.06743 (13), -0.06680 (13), -0.06316 (13), -0.06291 (13), -0.05999 (13), -0.05976 (13), -0.05909 (13), -0.05865 (13), -0.05739 (13), -0.05725 (13), -0.05673 (13), -0.05648 (13), -0.05582 (13), -0.05407 (13), -0.05185 (13), -0.05119 (13), 
Length of domains: 52
Time: pickout 0.0016    decision 0.0139    set_bounds 0.0118    solve 0.1359    add 0.0014    
Accumulated time: pickout 0.0086    decision 0.6344    set_bounds 0.1179    solve 1.0617    add 0.3788    
Current (lb-rhs): -0.07684317231178284
408 domains visited
Cumulative time: 3.021815061569214

BaB round 5
batch: 52
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1052] [/input-8, 1052] [/input-8, 1067] [/input-8, 1067] [/input-8, 1357] [/input-8, 1357] 
split level 1: [/input-8, 1356] [/input-8, 1067] [/input-8, 1067] [/input-8, 1067] [/input-8, 1067] [/input-8, 1891] [/input-8, 1357] [/input-8, 1357] [/input-8, 1067] [/input-8, 539] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07072564959526062
10 lb beta sum: 0.8597195148468018, worst -0.06758370995521545
Time: prepare 0.0042    bound 0.1277    transfer 0.0015    finalize 0.0011    func 0.1359    
Accumulated time: func 1.3761    prepare 0.0807    bound 1.2612    transfer 0.0112    finalize 0.0157    
all_split False
======================Cut inference begins======================
max lb tensor(0.93552256) min lb tensor(-0.06750089)
Number of Verified Splits: 190 of 208
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 17
#cuts 4-6: 4
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.03198838233947754 
BICCOS Cumulative time: 0.6389992237091064
Preprocessing time: 0.0062868595123291016 Inference time: 0.02244853973388672 Add cuts time: 0.0026407241821289062 Cut analysis time: 0.0006122589111328125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06750 (15), -0.06485 (15), -0.05795 (15), -0.05622 (15), -0.05496 (15), -0.04872 (15), -0.04793 (15), -0.04523 (15), -0.04223 (15), -0.03803 (15), -0.03679 (15), -0.03538 (15), -0.02909 (15), -0.02272 (15), -0.02087 (15), -0.01214 (15), -0.01032 (15), -0.00538 (15), 
Length of domains: 18
Time: pickout 0.0014    decision 0.0143    set_bounds 0.0097    solve 0.1360    add 0.0008    
Accumulated time: pickout 0.0100    decision 0.6487    set_bounds 0.1276    solve 1.1977    add 0.3796    
Current (lb-rhs): -0.06750088930130005
426 domains visited
Cumulative time: 3.217060089111328

BaB round 6
batch: 18
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] [/input-8, 542] 
split level 1: [/input-8, 1067] [/input-8, 1356] [/input-8, 539] [/input-8, 539] [/input-8, 1357] [/input-8, 1828] [/input-8, 1357] [/input-8, 539] [/input-8, 539] [/input-8, 1357] 
split level 2: [/input-8, 1292] [/input-8, 1292] [/input-8, 1292] [/input-8, 1292] [/input-8, 1292] [/input-8, 1893] [/input-8, 1292] [/input-8, 1893] [/input-8, 1292] [/input-8, 1893] 
split level 3: [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1893] [/input-8, 1894] [/input-8, 1893] [/input-8, 1292] [/input-8, 1893] [/input-8, 1292] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6958720684051514, worst -0.05476143956184387
10 lb beta sum: 0.6958720684051514, worst -0.05463084578514099
Time: prepare 0.0121    bound 0.1339    transfer 0.0017    finalize 0.0014    func 0.1511    
Accumulated time: func 1.5272    prepare 0.0930    bound 1.3951    transfer 0.0129    finalize 0.0171    
all_split False
======================Cut inference begins======================
max lb tensor(0.27136964) min lb tensor(-0.05459121)
Number of Verified Splits: 205 of 288
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 19
#cuts 4-6: 4
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.03842663764953613 
BICCOS Cumulative time: 0.6774258613586426
Preprocessing time: 0.008642911911010742 Inference time: 0.027675867080688477 Add cuts time: 0.0014879703521728516 Cut analysis time: 0.0006198883056640625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05459 (19), -0.05344 (19), -0.05319 (19), -0.05250 (19), -0.05204 (19), -0.05100 (19), -0.05031 (19), -0.04883 (19), -0.04631 (19), -0.04482 (19), -0.04467 (19), -0.04330 (19), -0.04216 (19), -0.04205 (19), -0.04080 (19), -0.04063 (19), -0.04057 (19), -0.04043 (19), -0.03929 (19), -0.03904 (19), 
Length of domains: 83
Time: pickout 0.0010    decision 0.0142    set_bounds 0.0166    solve 0.1512    add 0.0686    
Accumulated time: pickout 0.0110    decision 0.6629    set_bounds 0.1442    solve 1.3489    add 0.4483    
Current (lb-rhs): -0.054591208696365356
509 domains visited
Cumulative time: 3.5145187377929688

BaB round 7
batch: 83
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1828] [/input-8, 1052] 
split level 1: [/input-8, 1381] [/input-8, 1381] [/input-8, 1381] [/input-8, 1381] [/input-8, 1381] [/input-8, 1381] [/input-8, 1381] [/input-8, 931] [/input-8, 1381] [/input-8, 1381] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04957360029220581
10 lb beta sum: 0.2757553160190582, worst -0.04951369762420654
Time: prepare 0.0064    bound 0.1279    transfer 0.0018    finalize 0.0015    func 0.1402    
Accumulated time: func 1.6674    prepare 0.0996    bound 1.5230    transfer 0.0147    finalize 0.0186    
all_split False
======================Cut inference begins======================
max lb tensor(0.01739943) min lb tensor(-0.04948923)
Number of Verified Splits: 169 of 332
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 18
#cuts 4-6: 4
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.03746223449707031 
BICCOS Cumulative time: 0.7148880958557129
Preprocessing time: 0.009603738784790039 Inference time: 0.02532339096069336 Add cuts time: 0.0019135475158691406 Cut analysis time: 0.0006215572357177734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04949 (21), -0.04856 (21), -0.04844 (21), -0.04829 (21), -0.04756 (21), -0.04735 (21), -0.04732 (21), -0.04722 (21), -0.04658 (21), -0.04636 (21), -0.04634 (21), -0.04543 (21), -0.04505 (21), -0.04430 (21), -0.04411 (21), -0.04318 (21), -0.04104 (21), -0.04026 (21), -0.04005 (21), -0.03956 (21), 
Length of domains: 163
Time: pickout 0.0149    decision 0.0155    set_bounds 0.0151    solve 0.1403    add 0.0757    
Accumulated time: pickout 0.0259    decision 0.6784    set_bounds 0.1593    solve 1.4892    add 0.5239    
Current (lb-rhs): -0.049489229917526245
672 domains visited
Cumulative time: 3.820962429046631

BaB round 8
batch: 163
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1044] [/input-8, 1894] [/input-8, 1894] [/input-8, 1044] [/input-8, 1894] [/input-8, 1044] [/input-8, 1894] [/input-8, 1044] [/input-8, 1894] [/input-8, 1044] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04573342204093933
10 lb beta sum: 0.26691004633903503, worst -0.04567354917526245
Time: prepare 0.0064    bound 0.1341    transfer 0.0015    finalize 0.0015    func 0.1456    
Accumulated time: func 1.8131    prepare 0.1062    bound 1.6571    transfer 0.0162    finalize 0.0201    
all_split False
======================Cut inference begins======================
max lb tensor(0.01044297) min lb tensor(-0.04563931)
Number of Verified Splits: 82 of 326
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 19
#cuts 4-6: 4
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.02409815788269043 
BICCOS Cumulative time: 0.7389862537384033
Preprocessing time: 0.009636878967285156 Inference time: 0.012070894241333008 Add cuts time: 0.0011196136474609375 Cut analysis time: 0.0012707710266113281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04564 (22), -0.04545 (22), -0.04529 (22), -0.04444 (22), -0.04443 (22), -0.04441 (22), -0.04428 (22), -0.04345 (22), -0.04340 (22), -0.04298 (22), -0.04273 (22), -0.04177 (22), -0.04116 (22), -0.04093 (22), -0.04081 (22), -0.04069 (22), -0.04041 (22), -0.04015 (22), -0.03999 (22), -0.03975 (22), 
Length of domains: 244
Time: pickout 0.0161    decision 0.0196    set_bounds 0.0138    solve 0.1457    add 0.0030    
Accumulated time: pickout 0.0419    decision 0.6980    set_bounds 0.1731    solve 1.6349    add 0.5269    
Current (lb-rhs): -0.04563930630683899
916 domains visited
Cumulative time: 4.044044733047485

BaB round 9
batch: 244
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1894] [/input-8, 1894] [/input-8, 1894] [/input-8, 1044] [/input-8, 1894] [/input-8, 1044] [/input-8, 1894] [/input-8, 1044] [/input-8, 1044] [/input-8, 1894] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04259997606277466
10 lb beta sum: 0.27331963181495667, worst -0.04256114363670349
Time: prepare 0.0094    bound 0.1360    transfer 0.0022    finalize 0.0021    func 0.1528    
Accumulated time: func 1.9659    prepare 0.1158    bound 1.7931    transfer 0.0184    finalize 0.0222    
all_split False
======================Cut inference begins======================
max lb tensor(0.01037621) min lb tensor(-0.04254767)
Number of Verified Splits: 101 of 488
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 19
#cuts 4-6: 4
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.032915592193603516 
BICCOS Cumulative time: 0.7719018459320068
Preprocessing time: 0.014176368713378906 Inference time: 0.01569843292236328 Add cuts time: 0.0023827552795410156 Cut analysis time: 0.0006580352783203125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04255 (23), -0.04162 (23), -0.04152 (23), -0.04060 (23), -0.04023 (23), -0.03991 (23), -0.03991 (23), -0.03963 (23), -0.03946 (23), -0.03907 (23), -0.03903 (23), -0.03890 (23), -0.03889 (23), -0.03873 (23), -0.03862 (23), -0.03828 (23), -0.03805 (23), -0.03802 (23), -0.03771 (23), -0.03771 (23), 
Length of domains: 387
Time: pickout 0.0040    decision 0.0242    set_bounds 0.0206    solve 0.1536    add 0.0049    
Accumulated time: pickout 0.0459    decision 0.7222    set_bounds 0.1937    solve 1.7885    add 0.5319    
Current (lb-rhs): -0.04254767298698425
1303 domains visited
Cumulative time: 4.285183906555176

BaB round 10
batch: 387
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] [/input-8, 931] 
cut re-enabled after branching node selection
0 lb beta sum: 0.38012826442718506, worst -0.0382520854473114
10 lb beta sum: 0.38114792108535767, worst -0.03816315531730652
Time: prepare 0.0327    bound 0.1366    transfer 0.0017    finalize 0.0037    func 0.1798    
Accumulated time: func 2.1457    prepare 0.1487    bound 1.9297    transfer 0.0201    finalize 0.0260    
all_split False
======================Cut inference begins======================
max lb tensor(0.00889891) min lb tensor(-0.03813231)
Number of Verified Splits: 116 of 774
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 19
#cuts 4-6: 4
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.044312238693237305 
BICCOS Cumulative time: 0.8162140846252441
Preprocessing time: 0.022157907485961914 Inference time: 0.020117759704589844 Add cuts time: 0.0014030933380126953 Cut analysis time: 0.0006334781646728516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03813 (24), -0.03725 (24), -0.03716 (24), -0.03712 (24), -0.03666 (24), -0.03629 (24), -0.03623 (24), -0.03621 (24), -0.03614 (24), -0.03589 (24), -0.03578 (24), -0.03565 (24), -0.03549 (24), -0.03532 (24), -0.03527 (24), -0.03520 (24), -0.03509 (24), -0.03499 (24), -0.03477 (24), -0.03461 (24), 
Length of domains: 658
Time: pickout 0.0082    decision 0.0317    set_bounds 0.0330    solve 0.1800    add 0.0051    
Accumulated time: pickout 0.0542    decision 0.7538    set_bounds 0.2266    solve 1.9685    add 0.5369    
Current (lb-rhs): -0.038132309913635254
1961 domains visited
Cumulative time: 4.588827848434448

BaB round 11
batch: 658
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1901] [/input-8, 1901] [/input-8, 571] [/input-8, 1901] [/input-8, 571] [/input-8, 1901] [/input-8, 1901] [/input-8, 571] [/input-8, 1901] [/input-8, 571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.36358097195625305, worst -0.035493046045303345
10 lb beta sum: 0.36358097195625305, worst -0.03545987606048584
Time: prepare 0.0552    bound 0.1461    transfer 0.0043    finalize 0.0058    func 0.2200    
Accumulated time: func 2.3657    prepare 0.2042    bound 2.0758    transfer 0.0244    finalize 0.0318    
all_split False
======================Cut inference begins======================
max lb tensor(0.00493315) min lb tensor(-0.03544080)
Number of Verified Splits: 231 of 1316
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 19
#cuts 4-6: 4
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.08255338668823242 
BICCOS Cumulative time: 0.8987674713134766
Preprocessing time: 0.03979921340942383 Inference time: 0.04005908966064453 Add cuts time: 0.0019390583038330078 Cut analysis time: 0.0007560253143310547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03544 (25), -0.03453 (25), -0.03446 (25), -0.03443 (25), -0.03424 (25), -0.03376 (25), -0.03357 (25), -0.03351 (25), -0.03344 (25), -0.03335 (25), -0.03323 (25), -0.03321 (25), -0.03306 (25), -0.03286 (25), -0.03281 (25), -0.03275 (25), -0.03256 (25), -0.03240 (25), -0.03233 (25), -0.03227 (25), 
Length of domains: 1085
Time: pickout 0.0106    decision 0.0458    set_bounds 0.0556    solve 0.2203    add 0.0070    
Accumulated time: pickout 0.0648    decision 0.7997    set_bounds 0.2823    solve 2.1888    add 0.5439    
Current (lb-rhs): -0.035440802574157715
3046 domains visited
Cumulative time: 5.013179540634155

BaB round 12
batch: 1085
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] [/input-8, 1358] 
cut re-enabled after branching node selection
0 lb beta sum: 0.3331386148929596, worst -0.032712966203689575
10 lb beta sum: 0.3331386148929596, worst -0.03265661001205444
Time: prepare 0.0927    bound 0.1798    transfer 0.0068    finalize 0.0096    func 0.3036    
Accumulated time: func 2.6692    prepare 0.2971    bound 2.2556    transfer 0.0312    finalize 0.0414    
all_split False
======================Cut inference begins======================
max lb tensor(0.00890389) min lb tensor(-0.03262755)
Number of Verified Splits: 668 of 2170
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 25.
#cuts 1-3: 19
#cuts 4-6: 5
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.19025826454162598 
BICCOS Cumulative time: 1.0890257358551025
Preprocessing time: 0.0668020248413086 Inference time: 0.11779046058654785 Add cuts time: 0.004915952682495117 Cut analysis time: 0.0007498264312744141
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03263 (26), -0.03175 (26), -0.03171 (26), -0.03163 (26), -0.03137 (26), -0.03089 (26), -0.03084 (26), -0.03075 (26), -0.03074 (26), -0.03050 (26), -0.03048 (26), -0.03025 (26), -0.03018 (26), -0.03002 (26), -0.03000 (26), -0.02999 (26), -0.02986 (26), -0.02961 (26), -0.02937 (26), -0.02936 (26), 
Length of domains: 1502
Time: pickout 0.0184    decision 0.0678    set_bounds 0.2614    solve 0.3040    add 0.0083    
Accumulated time: pickout 0.0832    decision 0.8674    set_bounds 0.5436    solve 2.4927    add 0.5522    
Current (lb-rhs): -0.03262755274772644
4548 domains visited
Cumulative time: 5.869756698608398

BaB round 13
batch: 1502
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] [/input-8, 1369] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03059062361717224
10 lb beta sum: 0.16751490533351898, worst -0.03048214316368103
Time: prepare 0.0588    bound 0.2276    transfer 0.0114    finalize 0.0136    func 0.3313    
Accumulated time: func 3.0005    prepare 0.3562    bound 2.4832    transfer 0.0426    finalize 0.0550    
all_split False
======================Cut inference begins======================
max lb tensor(0.00637698) min lb tensor(-0.03045386)
Number of Verified Splits: 807 of 3004
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 20
#cuts 4-6: 5
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.3894920349121094 
BICCOS Cumulative time: 1.478517770767212
Preprocessing time: 0.09213900566101074 Inference time: 0.2893369197845459 Add cuts time: 0.007218837738037109 Cut analysis time: 0.000797271728515625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03045 (27), -0.02969 (27), -0.02958 (27), -0.02945 (27), -0.02918 (27), -0.02881 (27), -0.02871 (27), -0.02870 (27), -0.02858 (27), -0.02845 (27), -0.02831 (27), -0.02808 (27), -0.02800 (27), -0.02796 (27), -0.02784 (27), -0.02783 (27), -0.02783 (27), -0.02757 (27), -0.02735 (27), -0.02720 (27), 
Length of domains: 2197
Time: pickout 0.0324    decision 0.0902    set_bounds 0.1292    solve 0.3319    add 0.0160    
Accumulated time: pickout 0.1156    decision 0.9576    set_bounds 0.6728    solve 2.8246    add 0.5682    
Current (lb-rhs): -0.030453860759735107
6745 domains visited
Cumulative time: 6.870154857635498

BaB round 14
batch: 2197
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1910] [/input-8, 1910] [/input-8, 1910] [/input-8, 1910] [/input-8, 1910] [/input-8, 1910] [/input-8, 1381] [/input-8, 1910] [/input-8, 1910] [/input-8, 1910] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026462972164154053
10 lb beta sum: 0.15334229171276093, worst -0.026437073945999146
Time: prepare 0.0869    bound 0.3006    transfer 0.0183    finalize 0.0219    func 0.4565    
Accumulated time: func 3.4570    prepare 0.4433    bound 2.7838    transfer 0.0609    finalize 0.0769    
all_split False
======================Cut inference begins======================
max lb tensor(0.00652051) min lb tensor(-0.02641833)
Number of Verified Splits: 1225 of 4394
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 22
#cuts 4-6: 4
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.5365433692932129 
BICCOS Cumulative time: 2.015061140060425
Preprocessing time: 0.13683199882507324 Inference time: 0.23647665977478027 Add cuts time: 0.16233015060424805 Cut analysis time: 0.0009045600891113281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02642 (28), -0.02597 (28), -0.02579 (28), -0.02569 (28), -0.02566 (28), -0.02554 (28), -0.02523 (28), -0.02510 (28), -0.02502 (28), -0.02496 (28), -0.02491 (28), -0.02482 (28), -0.02478 (28), -0.02463 (28), -0.02435 (28), -0.02430 (28), -0.02418 (28), -0.02414 (28), -0.02409 (28), -0.02409 (28), 
Length of domains: 3169
Time: pickout 0.0371    decision 0.1263    set_bounds 0.1953    solve 0.4579    add 0.0212    
Accumulated time: pickout 0.1527    decision 1.0839    set_bounds 0.8682    solve 3.2825    add 0.5894    
Current (lb-rhs): -0.026418328285217285
9914 domains visited
Cumulative time: 8.26104187965393

BaB round 15
batch: 3169
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] [/input-8, 1308] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025020182132720947
10 lb beta sum: 0.09354016929864883, worst -0.025009632110595703
Time: prepare 0.1283    bound 0.4041    transfer 0.0123    finalize 0.0315    func 0.6171    
Accumulated time: func 4.0741    prepare 0.5718    bound 3.1880    transfer 0.0732    finalize 0.1084    
all_split False
======================Cut inference begins======================
max lb tensor(0.01719987) min lb tensor(-0.02499524)
Number of Verified Splits: 3742 of 6338
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 26
#cuts 4-6: 4
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.9499144554138184 
BICCOS Cumulative time: 2.964975595474243
Preprocessing time: 0.20203375816345215 Inference time: 0.7238149642944336 Add cuts time: 0.023037433624267578 Cut analysis time: 0.001028299331665039
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02500 (29), -0.02439 (29), -0.02437 (29), -0.02424 (29), -0.02413 (29), -0.02412 (29), -0.02355 (29), -0.02352 (29), -0.02350 (29), -0.02350 (29), -0.02341 (29), -0.02337 (29), -0.02325 (29), -0.02319 (29), -0.02275 (29), -0.02273 (29), -0.02268 (29), -0.02267 (29), -0.02262 (29), -0.02253 (29), 
Length of domains: 2596
Time: pickout 0.0703    decision 0.1781    set_bounds 0.2857    solve 0.7784    add 0.0212    
Accumulated time: pickout 0.2230    decision 1.2620    set_bounds 1.1539    solve 4.0609    add 0.6107    
Current (lb-rhs): -0.024995237588882446
12510 domains visited
Cumulative time: 10.586299896240234

BaB round 16
batch: 2596
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 533] [/input-8, 533] [/input-8, 533] [/input-8, 533] [/input-8, 533] [/input-8, 533] [/input-8, 533] [/input-8, 533] [/input-8, 1374] [/input-8, 533] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02403542399406433
10 lb beta sum: 0.33962610363960266, worst -0.021783888339996338
Time: prepare 0.1055    bound 0.3445    transfer 0.0095    finalize 0.0236    func 0.5184    
Accumulated time: func 4.5924    prepare 0.6777    bound 3.5325    transfer 0.0827    finalize 0.1320    
all_split False
======================Cut inference begins======================
max lb tensor(0.47695547) min lb tensor(-0.02176154)
Number of Verified Splits: 3891 of 5192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 28
#cuts 4-6: 2
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.9523320198059082 
BICCOS Cumulative time: 3.9173076152801514
Preprocessing time: 0.1664142608642578 Inference time: 0.7661468982696533 Add cuts time: 0.01894378662109375 Cut analysis time: 0.0008270740509033203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02176 (30), -0.02123 (30), -0.02114 (30), -0.02114 (30), -0.02090 (30), -0.02088 (30), -0.02078 (30), -0.02034 (30), -0.02031 (30), -0.02023 (30), -0.02016 (30), -0.02014 (30), -0.02005 (30), -0.01991 (30), -0.01990 (30), -0.01984 (30), -0.01962 (30), -0.01960 (30), -0.01945 (30), -0.01933 (30), 
Length of domains: 1301
Time: pickout 0.0473    decision 0.1486    set_bounds 0.4126    solve 0.5193    add 0.0096    
Accumulated time: pickout 0.2703    decision 1.4107    set_bounds 1.5665    solve 4.5803    add 0.6203    
Current (lb-rhs): -0.021761536598205566
13811 domains visited
Cumulative time: 12.719385623931885

BaB round 17
batch: 1301
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] [/input-8, 1374] 
cut re-enabled after branching node selection
0 lb beta sum: 0.7349373698234558, worst -0.021761387586593628
10 lb beta sum: 1.1375148296356201, worst -0.021746665239334106
Time: prepare 0.1116    bound 0.2061    transfer 0.0035    finalize 0.1606    func 0.4998    
Accumulated time: func 5.0922    prepare 0.7895    bound 3.7386    transfer 0.0862    finalize 0.2927    
all_split False
======================Cut inference begins======================
max lb tensor(0.24636269) min lb tensor(-0.02172786)
Number of Verified Splits: 1360 of 2602
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 28
#cuts 4-6: 2
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.35423779487609863 
BICCOS Cumulative time: 4.27154541015625
Preprocessing time: 0.08362054824829102 Inference time: 0.26354122161865234 Add cuts time: 0.006321907043457031 Cut analysis time: 0.0007541179656982422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02173 (31), -0.02110 (31), -0.02087 (31), -0.02086 (31), -0.02074 (31), -0.02023 (31), -0.02011 (31), -0.02004 (31), -0.01989 (31), -0.01987 (31), -0.01984 (31), -0.01960 (31), -0.01959 (31), -0.01942 (31), -0.01927 (31), -0.01923 (31), -0.01913 (31), -0.01905 (31), -0.01903 (31), -0.01898 (31), 
Length of domains: 1242
Time: pickout 0.0287    decision 0.0815    set_bounds 0.1146    solve 0.5002    add 0.0098    
Accumulated time: pickout 0.2990    decision 1.4921    set_bounds 1.6811    solve 5.0805    add 0.6301    
Current (lb-rhs): -0.02172785997390747
15053 domains visited
Cumulative time: 13.823173999786377

BaB round 18
batch: 1242
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1910] [/input-8, 1861] [/input-8, 1910] [/input-8, 571] [/input-8, 1861] [/input-8, 571] [/input-8, 1910] [/input-8, 1910] [/input-8, 1861] [/input-8, 533] 
cut re-enabled after branching node selection
0 lb beta sum: 1.3166000843048096, worst -0.01931631565093994
10 lb beta sum: 1.325416922569275, worst -0.01926174759864807
Time: prepare 0.1056    bound 0.1976    transfer 0.0049    finalize 0.0110    func 0.3351    
Accumulated time: func 5.4273    prepare 0.8954    bound 3.9362    transfer 0.0911    finalize 0.3037    
all_split False
======================Cut inference begins======================
max lb tensor(0.01484203) min lb tensor(-0.01921648)
Number of Verified Splits: 776 of 2484
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 28
#cuts 4-6: 2
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.2390899658203125 
BICCOS Cumulative time: 4.5106353759765625
Preprocessing time: 0.07787942886352539 Inference time: 0.155914306640625 Add cuts time: 0.004557132720947266 Cut analysis time: 0.0007390975952148438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01922 (32), -0.01888 (32), -0.01835 (32), -0.01831 (32), -0.01822 (32), -0.01801 (32), -0.01767 (32), -0.01762 (32), -0.01748 (32), -0.01735 (32), -0.01733 (32), -0.01707 (32), -0.01691 (32), -0.01689 (32), -0.01681 (32), -0.01677 (32), -0.01675 (32), -0.01654 (32), -0.01652 (32), -0.01649 (32), 
Length of domains: 1708
Time: pickout 0.0255    decision 0.0782    set_bounds 0.1072    solve 0.3362    add 0.0123    
Accumulated time: pickout 0.3246    decision 1.5704    set_bounds 1.7882    solve 5.4167    add 0.6424    
Current (lb-rhs): -0.019216477870941162
16761 domains visited
Cumulative time: 14.630964279174805

BaB round 19
batch: 1708
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1812] [/input-8, 1890] [/input-8, 1890] 
cut re-enabled after branching node selection
0 lb beta sum: 1.2574962377548218, worst -0.017202049493789673
10 lb beta sum: 1.2574962377548218, worst -0.017150551080703735
Time: prepare 0.1482    bound 0.2495    transfer 0.0111    finalize 0.0144    func 0.4464    
Accumulated time: func 5.8737    prepare 1.0438    bound 4.1857    transfer 0.1022    finalize 0.3181    
all_split False
======================Cut inference begins======================
max lb tensor(0.00936782) min lb tensor(-0.01711273)
Number of Verified Splits: 1982 of 3416
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 32.
#cuts 1-3: 29
#cuts 4-6: 2
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.5251462459564209 
BICCOS Cumulative time: 5.035781621932983
Preprocessing time: 0.10584330558776855 Inference time: 0.40807271003723145 Add cuts time: 0.010455846786499023 Cut analysis time: 0.000774383544921875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01711 (33), -0.01681 (33), -0.01625 (33), -0.01624 (33), -0.01603 (33), -0.01594 (33), -0.01556 (33), -0.01554 (33), -0.01540 (33), -0.01518 (33), -0.01516 (33), -0.01499 (33), -0.01497 (33), -0.01486 (33), -0.01480 (33), -0.01471 (33), -0.01467 (33), -0.01465 (33), -0.01448 (33), -0.01446 (33), 
Length of domains: 1434
Time: pickout 0.0334    decision 0.1029    set_bounds 0.2866    solve 0.4476    add 0.0118    
Accumulated time: pickout 0.3580    decision 1.6733    set_bounds 2.0748    solve 5.8643    add 0.6543    
Current (lb-rhs): -0.01711273193359375
18195 domains visited
Cumulative time: 16.05579376220703

BaB round 20
batch: 1434
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1812] [/input-8, 1812] [/input-8, 1890] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014956623315811157
10 lb beta sum: 0.2855044901371002, worst -0.01484370231628418
Time: prepare 0.0563    bound 0.2193    transfer 0.0046    finalize 0.1499    func 0.4489    
Accumulated time: func 6.3225    prepare 1.1004    bound 4.4050    transfer 0.1068    finalize 0.4679    
all_split False
======================Cut inference begins======================
max lb tensor(0.00836286) min lb tensor(-0.01482680)
Number of Verified Splits: 1229 of 2868
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 33.
#cuts 1-3: 30
#cuts 4-6: 2
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.35697507858276367 
BICCOS Cumulative time: 5.392756700515747
Preprocessing time: 0.09006738662719727 Inference time: 0.2596273422241211 Add cuts time: 0.006490945816040039 Cut analysis time: 0.0007894039154052734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01483 (34), -0.01453 (34), -0.01405 (34), -0.01400 (34), -0.01374 (34), -0.01372 (34), -0.01331 (34), -0.01327 (34), -0.01326 (34), -0.01295 (34), -0.01291 (34), -0.01273 (34), -0.01265 (34), -0.01262 (34), -0.01257 (34), -0.01251 (34), -0.01244 (34), -0.01232 (34), -0.01220 (34), -0.01219 (34), 
Length of domains: 1639
Time: pickout 0.0369    decision 0.0871    set_bounds 0.1258    solve 0.4501    add 0.0982    
Accumulated time: pickout 0.3949    decision 1.7604    set_bounds 2.2006    solve 6.3143    add 0.7524    
Current (lb-rhs): -0.014826804399490356
19834 domains visited
Cumulative time: 17.233695030212402

BaB round 21
batch: 1639
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] [/input-8, 1861] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.012666106224060059
10 lb beta sum: 0.2184348702430725, worst -0.012620538473129272
Time: prepare 0.0678    bound 0.2437    transfer 0.0047    finalize 0.0166    func 0.3542    
Accumulated time: func 6.6767    prepare 1.1684    bound 4.6487    transfer 0.1115    finalize 0.4846    
all_split False
======================Cut inference begins======================
max lb tensor(0.23592755) min lb tensor(-0.01259729)
Number of Verified Splits: 1946 of 3278
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 34.
#cuts 1-3: 31
#cuts 4-6: 2
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.6898820400238037 
BICCOS Cumulative time: 6.082638740539551
Preprocessing time: 0.10318756103515625 Inference time: 0.5784945487976074 Add cuts time: 0.0074024200439453125 Cut analysis time: 0.0007975101470947266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01260 (35), -0.01183 (35), -0.01175 (35), -0.01131 (35), -0.01104 (35), -0.01081 (35), -0.01053 (35), -0.01049 (35), -0.01047 (35), -0.01043 (35), -0.01038 (35), -0.01029 (35), -0.01019 (35), -0.00998 (35), -0.00998 (35), -0.00996 (35), -0.00996 (35), -0.00995 (35), -0.00983 (35), -0.00977 (35), 
Length of domains: 1332
Time: pickout 0.0476    decision 0.0979    set_bounds 0.1452    solve 0.3555    add 0.0945    
Accumulated time: pickout 0.4425    decision 1.8583    set_bounds 2.3459    solve 6.6698    add 0.8469    
Current (lb-rhs): -0.01259729266166687
21166 domains visited
Cumulative time: 18.685731410980225

BaB round 22
batch: 1332
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] [/input-8, 1876] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.010219156742095947
10 lb beta sum: 0.16242332756519318, worst -0.010138541460037231
Time: prepare 0.0544    bound 0.2108    transfer 0.0071    finalize 0.0121    func 0.3015    
Accumulated time: func 6.9782    prepare 1.2231    bound 4.8596    transfer 0.1186    finalize 0.4967    
all_split False
======================Cut inference begins======================
max lb tensor(0.23897466) min lb tensor(-0.01012605)
Number of Verified Splits: 2089 of 2664
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 35
#cuts 4-6: 2
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.5392906665802002 
BICCOS Cumulative time: 6.621929407119751
Preprocessing time: 0.08419036865234375 Inference time: 0.44817066192626953 Add cuts time: 0.0061054229736328125 Cut analysis time: 0.0008242130279541016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01013 (36), -0.00934 (36), -0.00927 (36), -0.00887 (36), -0.00856 (36), -0.00833 (36), -0.00808 (36), -0.00803 (36), -0.00802 (36), -0.00802 (36), -0.00788 (36), -0.00781 (36), -0.00772 (36), -0.00751 (36), -0.00748 (36), -0.00747 (36), -0.00742 (36), -0.00734 (36), -0.00730 (36), -0.00729 (36), 
Length of domains: 575
Time: pickout 0.0335    decision 0.0815    set_bounds 0.1182    solve 0.3027    add 0.0176    
Accumulated time: pickout 0.4760    decision 1.9398    set_bounds 2.4641    solve 6.9725    add 0.8645    
Current (lb-rhs): -0.010126054286956787
21741 domains visited
Cumulative time: 19.797373294830322

BaB round 23
batch: 575
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1350] [/input-8, 1350] [/input-8, 1902] [/input-8, 1350] [/input-8, 1350] [/input-8, 1350] [/input-8, 1350] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.006722480058670044
10 lb beta sum: 0.1501253992319107, worst -0.006694197654724121
Time: prepare 0.0223    bound 0.1417    transfer 0.0048    finalize 0.0055    func 0.1819    
Accumulated time: func 7.1601    prepare 1.2456    bound 5.0013    transfer 0.1234    finalize 0.5022    
all_split False
======================Cut inference begins======================
max lb tensor(0.71172720) min lb tensor(-0.00667682)
Number of Verified Splits: 1073 of 1150
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 35
#cuts 4-6: 2
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.27102136611938477 
BICCOS Cumulative time: 6.892950773239136
Preprocessing time: 0.03603172302246094 Inference time: 0.23154902458190918 Add cuts time: 0.002645254135131836 Cut analysis time: 0.0007953643798828125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00668 (37), -0.00590 (37), -0.00582 (37), -0.00549 (37), -0.00511 (37), -0.00471 (37), -0.00464 (37), -0.00458 (37), -0.00457 (37), -0.00401 (37), -0.00392 (37), -0.00387 (37), -0.00385 (37), -0.00377 (37), -0.00371 (37), -0.00338 (37), -0.00325 (37), -0.00318 (37), -0.00318 (37), -0.00313 (37), 
Length of domains: 77
Time: pickout 0.0147    decision 0.0417    set_bounds 0.0506    solve 0.1829    add 0.0015    
Accumulated time: pickout 0.4906    decision 1.9815    set_bounds 2.5148    solve 7.1554    add 0.8661    
Current (lb-rhs): -0.006676822900772095
21818 domains visited
Cumulative time: 20.366663694381714

BaB round 24
batch: 77
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] 
split level 1: [/input-8, 1902] [/input-8, 1350] [/input-8, 1019] [/input-8, 1902] [/input-8, 1902] [/input-8, 1019] [/input-8, 1019] [/input-8, 1019] [/input-8, 1902] [/input-8, 1350] 
cut re-enabled after branching node selection
0 lb beta sum: 0.3967825770378113, worst -0.001824021339416504
10 lb beta sum: 0.3967825770378113, worst -0.0017979145050048828
Time: prepare 0.0132    bound 0.1330    transfer 0.0015    finalize 0.0016    func 0.1520    
Accumulated time: func 7.3121    prepare 1.2591    bound 5.1343    transfer 0.1249    finalize 0.5038    
all_split False
======================Cut inference begins======================
max lb tensor(0.24769711) min lb tensor(-0.00178364)
Number of Verified Splits: 294 of 308
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 38.
#cuts 1-3: 35
#cuts 4-6: 2
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.07982039451599121 
BICCOS Cumulative time: 6.972771167755127
Preprocessing time: 0.009333610534667969 Inference time: 0.06819295883178711 Add cuts time: 0.0012090206146240234 Cut analysis time: 0.0010848045349121094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00178 (39), -0.00154 (39), -0.00153 (39), -0.00098 (39), -0.00090 (39), -0.00071 (39), -0.00070 (39), -0.00066 (39), -0.00065 (39), -0.00042 (39), -0.00039 (39), -0.00026 (39), -0.00026 (39), -0.00017 (39), 
Length of domains: 14
Time: pickout 0.0031    decision 0.0185    set_bounds 0.0145    solve 0.1520    add 0.0009    
Accumulated time: pickout 0.4937    decision 2.0000    set_bounds 2.5293    solve 7.3074    add 0.8670    
Current (lb-rhs): -0.0017836391925811768
21832 domains visited
Cumulative time: 20.637210369110107

BaB round 25
batch: 14
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] [/input-8, 1068] 
split level 1: [/input-8, 944] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 944] [/input-8, 1019] [/input-8, 1019] [/input-8, 1019] [/input-8, 944] 
split level 2: [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1902] [/input-8, 1019] [/input-8, 868] [/input-8, 868] [/input-8, 868] [/input-8, 1902] 
split level 3: [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] 
cut re-enabled after branching node selection
0 lb beta sum: 0.27123039960861206, worst 0.007381141185760498

all verified at 0th iter
Time: prepare 0.0096    bound 0.0051    transfer 0.0005    finalize 0.0011    func 0.0177    
Accumulated time: func 7.3298    prepare 1.2689    bound 5.1394    transfer 0.1254    finalize 0.5049    
all_split False
======================Cut inference begins======================
max lb tensor(0.02002358) min lb tensor(0.00738114)
Number of Verified Splits: 224 of 224
No cut inferred: All or none verified.
Total number of valid cuts: 38.
#cuts 1-3: 35
#cuts 4-6: 2
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.006792545318603516 
BICCOS Cumulative time: 6.9795637130737305
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0014    decision 0.0142    set_bounds 0.0131    solve 0.0178    add 0.0003    
Accumulated time: pickout 0.4951    decision 2.0142    set_bounds 2.5424    solve 7.3252    add 0.8672    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
21832 domains visited
Cumulative time: 20.691553831100464


Properties batch 3, size 1
Remaining timeout: 177.73040676116943
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 177.73031520843506
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 177.73029232025146
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 177.73027229309082
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 177.7302496433258
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 177.73023056983948
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 22.2698 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 104, vnnlib ID: 104 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.93376207, -6.71706390, -2.45791340, -1.94786179, -3.43069839,
         -0.01497591, -4.77984476, -2.99772120, -6.68260002, -5.67084932]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [775]; unstable size 775; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 265, 1, 775] with unstable size 264 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 775] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 775] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [264]; unstable size 264; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 264] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 264] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.31793880, 4.18651628, 1.24683046, 1.51535201, 1.97004509, 3.30763984,
         1.65014243, 4.22077990, 3.37990856]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0639 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 105, vnnlib ID: 105 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.58880043, -10.13493252,  -4.93114376,  -6.19413185,  -6.14457750,
          -6.40420198,  -6.35660315,  -6.51874971,  -8.22681046,  -9.13034344]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [623]; unstable size 623; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 253, 1, 623] with unstable size 252 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 623] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 623] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [252]; unstable size 252; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 252] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 252] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.65812528,  1.61883986, -2.82501435, -1.14642143, -1.45474672,
         -0.98869801, -1.28088379, -0.29947889,  0.88783264]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.58880043, -10.13493252,  -4.93114376,  -6.19413185,  -6.14457750,
          -6.40420198,  -6.35660315,  -6.51874971,  -8.22681046,  -9.13034344]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.58880091, -10.13493347,  -4.93114376,  -6.19413280,  -6.14457798,
           -6.40420198,  -6.35660315,  -6.51874971,  -8.22680950,  -9.13034534],
         [ -6.58880091, -10.13493347,  -4.93114376,  -6.19413280,  -6.14457798,
           -6.40420198,  -6.35660315,  -6.51874971,  -8.22680950,  -9.13034534]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.07005119, -1.58760595, -0.32461691, -0.37417173, -0.11454773,
          -0.16214657,  1.70805979]]], device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         ...,


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]],


         [[[-0.79841268, -0.78253967, -0.76666665,  ..., -0.73492062,
            -0.75079364, -0.79841268],
           [-0.79841268, -0.76666665, -0.78253967,  ..., -0.81428570,
            -0.83015871, -0.83015871],
           [-0.75079364, -0.79841268, -0.83015871,  ..., -0.83015871,
            -0.86190474, -0.86190474],
           ...,
           [-1.03650784, -0.98888886, -0.90952379,  ...,  0.39206356,
             0.40793657,  0.34444451],
           [-0.98888886, -1.11587298, -1.05238092,  ...,  0.66190481,
             0.69365084,  0.67777783],
           [-0.92539680, -1.06825387, -1.08412695,  ...,  0.37619054,
             0.42380959,  0.47142863]],

          [[-0.51529789, -0.49919480, -0.48309177,  ..., -0.46698871,
            -0.46698871, -0.49919480],
           [-0.51529789, -0.48309177, -0.49919480,  ..., -0.56360704,
            -0.54750401, -0.54750401],
           [-0.46698871, -0.51529789, -0.53140092,  ..., -0.57971013,
            -0.57971013, -0.56360704],
           ...,
           [-0.95008045, -0.90177131, -0.82125598,  ...,  0.19323683,
             0.24154601,  0.28985518],
           [-0.88566822, -1.01449275, -0.95008045,  ...,  0.53140104,
             0.54750413,  0.57971025],
           [-0.82125598, -0.96618354, -0.99838966,  ...,  0.32206130,
             0.33816436,  0.35426742]],

          [[-0.10344811, -0.07346311, -0.07346311,  ..., -0.01349309,
            -0.01349309, -0.04347810],
           [-0.10344811, -0.07346311, -0.08845562,  ..., -0.10344811,
            -0.08845562, -0.10344811],
           [-0.05847061, -0.10344811, -0.11844061,  ..., -0.10344811,
            -0.11844061, -0.11844061],
           ...,
           [-0.64317840, -0.55322337, -0.46326834,  ...,  0.48125952,
             0.54122955,  0.61619210],
           [-0.62818587, -0.70314842, -0.61319339,  ...,  0.73613209,
             0.76611710,  0.81109464],
           [-0.55322337, -0.67316341, -0.68815589,  ...,  0.52623707,
             0.55622208,  0.57121456]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0983 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 106, vnnlib ID: 106 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.73701859,  -4.31693745,  -8.52546501,  -9.33157349,  -8.00366402,
         -10.34507942,  -9.10334110,  -9.12430954,  -4.68865204,  -6.33631182]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [549]; unstable size 549; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 168, 1, 549] with unstable size 167 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 549] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 549] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [167]; unstable size 167; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 167] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 167] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.18720961,  2.73354006,  3.30611420,  2.10224724,  4.03056717,
          3.46064472,  2.85602856, -0.83577156,  1.03666806]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.73701859,  -4.31693745,  -8.52546501,  -9.33157349,  -8.00366402,
         -10.34507942,  -9.10334110,  -9.12430954,  -4.68865204,  -6.33631182]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.89133787,  -4.93664169,  -8.66371727,  -9.56306934,  -8.16865921,
          -10.62470722,  -9.37549400,  -9.37268066,  -4.54248905,  -6.85806894]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.39415264]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0061 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0697 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 107, vnnlib ID: 107 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.25630188, -18.41019440, -14.19659901, -16.87197685, -15.07205296,
         -17.43015480, -17.99939728, -16.44446564, -13.78191662, -17.80060196]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [636]; unstable size 636; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 232, 1, 636] with unstable size 231 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 636] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 636] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [231]; unstable size 231; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 231] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 231] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.34137344,  0.70376396,  3.10112000,  1.09246922,  3.41379404,
          3.82853699,  1.99575400, -0.16639996,  3.65535474]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.25630188, -18.41019440, -14.19659901, -16.87197685, -15.07205296,
         -17.43015480, -17.99939728, -16.44446564, -13.78191662, -17.80060196]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.58it/s]100%|██████████| 1/1 [00:00<00:00,  7.58it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.98635578, -17.72829819, -13.82835865, -16.31543732, -14.73994732,
          -16.84854698, -17.46200371, -16.24205780, -12.71058083, -17.06022263]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.72422504]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1348 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 22.566566467285156
alpha/beta optimization time: 1.383321762084961
initial alpha-crown bounds: tensor([[ 4.41341734,  0.78251934,  3.14730644,  1.16422820,  3.46807456,
          3.87461948,  2.07521415, -0.08283931,  3.72402596]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.08283931016921997
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.40790915489197
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.407865524292
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.4078209400177
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.40778732299805
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.4077606201172
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.4077386856079
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.4077181816101
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.40769386291504
Verifying property 7 with 1 instances.
##### Instance 107 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.08283931]], device='cuda:0') need to verify.
Model prediction is: tensor([-12.25630188, -18.41019440, -14.19659901, -16.87197685, -15.07205296,
        -17.43015480, -17.99939728, -16.44446564, -13.78191662, -17.80060196],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.08283931]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 636
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 225
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 879
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010251998901367188
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0828375518321991
10 lb beta sum: 0.0, worst -0.08285471796989441
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    func 0.0529    
Accumulated time: func 0.0529    prepare 0.0002    bound 0.0525    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 44] 
split level 1: [/input-12, 17] 
split level 2: [/input-12, 46] 
split level 3: [/input-12, 78] 
split level 4: [/input-12, 9] 
split level 5: [/input-8, 1516] 
split level 6: [/input-8, 1388] 
split level 7: [/input-8, 1523] 
split level 8: [/input-12, 99] 
split level 9: [/input-8, 1323] 
split level 10: [/input-8, 1386] 
split level 11: [/input-8, 1396] 
split level 12: [/input-8, 1076] 
split level 13: [/input-8, 618] 
split level 14: [/input-8, 1069] 
split level 15: [/input-8, 1077] 
split level 16: [/input-8, 1342] 
split level 17: [/input-8, 1395] 
split level 18: [/input-8, 1339] 
split level 19: [/input-8, 1390] 
split level 20: [/input-12, 40] 
split level 21: [/input-8, 1084] 
split level 22: [/input-8, 294] 
split level 23: [/input-8, 421] 
split level 24: [/input-8, 666] 
split level 25: [/input-8, 1070] 
split level 26: [/input-8, 673] 
split level 27: [/input-8, 571] 
split level 28: [/input-8, 1340] 
split level 29: [/input, 1659] 
split level 30: [/input-8, 1443] 
split level 31: [/input-8, 657] 
split level 32: [/input-8, 1341] 
split level 33: [/input-8, 1133] 
split level 34: [/input-8, 687] 
split level 35: [/input-8, 403] 
split level 36: [/input, 1660] 
split level 37: [/input-12, 32] 
split level 38: [/input-8, 1514] 
split level 39: [/input-8, 797] 
split level 40: [/input-8, 484] 
split level 41: [/input, 1625] 
split level 42: [/input-8, 1905] 
split level 43: [/input-8, 402] 
split level 44: [/input-8, 295] 
split level 45: [/input-8, 796] 
split level 46: [/input, 4066] 
split level 47: [/input-8, 278] 
split level 48: [/input, 3399] 
split level 49: [/input-8, 1085] 
split level 50: [/input-8, 846] 
split level 51: [/input, 199] 
split level 52: [/input-8, 803] 
split level 53: [/input-8, 1134] 
split level 54: [/input-8, 1573] 
split level 55: [/input-8, 871] 
split level 56: [/input, 168] 
split level 57: [/input-8, 1138] 
split level 58: [/input-8, 924] 
split level 59: [/input, 447] 
split level 60: [/input, 1595] 
split level 61: [/input-8, 486] 
split level 62: [/input-8, 1436] 
split level 63: [/input-8, 932] 
split level 64: [/input-8, 1402] 
split level 65: [/input-8, 1056] 
split level 66: [/input-8, 1264] 
split level 67: [/input-8, 1136] 
split level 68: [/input-8, 1130] 
split level 69: [/input-8, 1513] 
split level 70: [/input-8, 404] 
split level 71: [/input-8, 1334] 
split level 72: [/input-8, 993] 
split level 73: [/input, 462] 
split level 74: [/input, 1624] 
split level 75: [/input-8, 483] 
split level 76: [/input, 1365] 
split level 77: [/input, 190] 
split level 78: [/input, 2136] 
split level 79: [/input-8, 521] 
split level 80: [/input-8, 1110] 
split level 81: [/input-8, 97] 
split level 82: [/input, 4069] 
split level 83: [/input, 407] 
split level 84: [/input-8, 77] 
split level 85: [/input, 226] 
split level 86: [/input-8, 1446] 
split level 87: [/input, 4049] 
split level 88: [/input-8, 1307] 
split level 89: [/input, 2135] 
split level 90: [/input, 2244] 
split level 91: [/input, 1335] 
split level 92: [/input, 459] 
split level 93: [/input, 4035] 
split level 94: [/input-8, 795] 
split level 95: [/input, 1629] 
split level 96: [/input-8, 1378] 
split level 97: [/input, 3157] 
split level 98: [/input, 2152] 
split level 99: [/input, 4050] 
split level 100: [/input, 2753] 
split level 101: [/input, 1643] 
split level 102: [/input, 3492] 
split level 103: [/input, 4056] 
split level 104: [/input, 4067] 
split level 105: [/input, 2214] 
split level 106: [/input-8, 1485] 
split level 107: [/input, 225] 
split level 108: [/input-8, 1141] 
split level 109: [/input, 3753] 
split level 110: [/input-8, 2025] 
split level 111: [/input-8, 1615] 
split level 112: [/input, 3429] 
split level 113: [/input, 2187] 
split level 114: [/input-8, 685] 
split level 115: [/input, 358] 
split level 116: [/input, 488] 
split level 117: [/input-8, 2034] 
split level 118: [/input, 3277] 
split level 119: [/input-8, 1040] 
split level 120: [/input-8, 1438] 
split level 121: [/input, 3140] 
split level 122: [/input, 3781] 
split level 123: [/input, 1430] 
split level 124: [/input-8, 461] 
split level 125: [/input-8, 81] 
split level 126: [/input, 2360] 
split level 127: [/input, 3142] 
split level 128: [/input, 2139] 
split level 129: [/input, 242] 
split level 130: [/input, 492] 
split level 131: [/input, 457] 
split level 132: [/input, 2198] 
split level 133: [/input, 458] 
split level 134: [/input-8, 2033] 
split level 135: [/input, 2119] 
split level 136: [/input, 296] 
split level 137: [/input, 2373] 
split level 138: [/input-8, 302] 
split level 139: [/input, 3125] 
split level 140: [/input-8, 975] 
split level 141: [/input, 3709] 
split level 142: [/input-8, 642] 
split level 143: [/input-8, 1472] 
split level 144: [/input-8, 2037] 
split level 145: [/input, 3797] 
split level 146: [/input, 3737] 
split level 147: [/input, 3960] 
split level 148: [/input, 3445] 
split level 149: [/input-8, 1473] 
split level 150: [/input-8, 423] 
split level 151: [/input-8, 1346] 
split level 152: [/input-8, 1021] 
split level 153: [/input, 3263] 
split level 154: [/input, 3126] 
split level 155: [/input, 3292] 
split level 156: [/input, 3231] 
split level 157: [/input, 280] 
split level 158: [/input, 312] 
split level 159: [/input-8, 839] 
split level 160: [/input, 1446] 
split level 161: [/input, 3411] 
split level 162: [/input, 279] 
split level 163: [/input, 2256] 
split level 164: [/input, 2548] 
split level 165: [/input, 227] 
split level 166: [/input-8, 1818] 
split level 167: [/input, 2513] 
split level 168: [/input, 1439] 
split level 169: [/input, 3187] 
split level 170: [/input, 2165] 
split level 171: [/input, 2228] 
split level 172: [/input, 1966] 
split level 173: [/input, 876] 
split level 174: [/input, 136] 
split level 175: [/input-8, 2032] 
split level 176: [/input, 1455] 
split level 177: [/input-8, 1240] 
split level 178: [/input-8, 864] 
split level 179: [/input, 2794] 
split level 180: [/input, 2530] 
split level 181: [/input, 1160] 
split level 182: [/input, 4076] 
split level 183: [/input, 3870] 
split level 184: [/input, 1437] 
split level 185: [/input, 293] 
split level 186: [/input, 1469] 
split level 187: [/input, 3260] 
split level 188: [/input-8, 2038] 
split level 189: [/input, 3307] 
split level 190: [/input, 2181] 
split level 191: [/input, 2532] 
split level 192: [/input, 1414] 
split level 193: [/input, 2374] 
split level 194: [/input, 2586] 
split level 195: [/input, 3813] 
split level 196: [/input, 1347] 
split level 197: [/input-8, 945] 
split level 198: [/input, 877] 
split level 199: [/input, 282] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08275991678237915
10 lb beta sum: 0.0, worst -0.08275341987609863
Time: prepare 0.0117    bound 0.0962    transfer 0.0026    finalize 0.0030    func 0.1160    
Accumulated time: func 0.1690    prepare 0.0217    bound 0.1486    transfer 0.0027    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.28787661) min lb tensor(-0.08274728)
Number of Verified Splits: 11 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010895967483520508 
BICCOS Cumulative time: 0.010895967483520508
Preprocessing time: 0.010108232498168945 Inference time: 0.0004572868347167969 Add cuts time: 0.0001621246337890625 Cut analysis time: 0.00016832351684570312
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5056    set_bounds 0.0094    solve 0.1161    add 0.0099    
Accumulated time: pickout 0.0003    decision 0.5056    set_bounds 0.0094    solve 0.1161    add 0.0099    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([44]), tensor([-1.]), tensor([0]), tensor([1.82192979e+29]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([44]), tensor([1.]), tensor([0]), tensor([4.16346211e-07]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.007995963096618652

all verified at 1th iter
Time: prepare 0.0003    bound 0.0096    transfer 0.0001    finalize 0.0001    func 0.0102    
Accumulated time: func 0.1791    prepare 0.0220    bound 0.1582    transfer 0.0028    finalize 0.0032    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 197.42386841773987
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 2.5762 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 108, vnnlib ID: 108 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.67031240,  -9.52653027,  -5.79421425,  -5.15730333,  -5.24825621,
          -5.88681936,  -4.92760229,  -6.80504274, -10.24907398,  -9.07698536]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [634]; unstable size 634; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 245, 1, 634] with unstable size 244 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 634] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 634] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [244]; unstable size 244; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 244] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 244] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.24761403,  2.93305993, -0.23562050, -0.90710044,  0.36504617,
         -1.18999672,  0.08451054,  3.42949867,  2.57326126]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.67031240,  -9.52653027,  -5.79421425,  -5.15730333,  -5.24825621,
          -5.88681936,  -4.92760229,  -6.80504274, -10.24907398,  -9.07698536]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.67031288,  -9.52653027,  -5.79421329,  -5.15730429,  -5.24825621,
           -5.88681889,  -4.92760229,  -6.80504179, -10.24907398,  -9.07698536],
         [ -7.67031288,  -9.52653027,  -5.79421329,  -5.15730429,  -5.24825621,
           -5.88681889,  -4.92760229,  -6.80504179, -10.24907398,  -9.07698536]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.63690901,  0.09095192, -0.22970200]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]],


         [[[-0.97301590, -1.03650784, -1.13174593,  ..., -0.84603173,
            -0.46507925, -0.29047608],
           [-0.97301590, -1.03650784, -1.14761901,  ..., -0.94126981,
            -0.41746020, -0.03650784],
           [-0.95714283, -1.02063489, -1.13174593,  ..., -1.06825387,
            -0.25873005,  0.09047628],
           ...,
           [-0.43333322,  0.15396833,  0.13809532,  ..., -1.63968253,
            -0.83015871, -0.09999990],
           [-0.16349196,  0.10634929, -0.13174593,  ..., -1.40158725,
            -0.79841268, -0.09999990],
           [-0.06825387,  0.05873025,  0.09047628,  ..., -1.00476182,
            -0.73492062, -0.09999990]],

          [[-1.49758446, -1.52979064, -1.54589367,  ..., -1.12721407,
            -0.88566822, -0.77294683],
           [-1.49758446, -1.52979064, -1.57809973,  ..., -1.20772946,
            -0.82125598, -0.53140092],
           [-1.48148143, -1.49758446, -1.54589367,  ..., -1.35265696,
            -0.64412236, -0.40257636],
           ...,
           [-1.11111104, -0.37037024, -0.48309177,  ..., -1.78743970,
            -0.90177131, -0.28985494],
           [-0.90177131, -0.43478248, -0.75684375,  ..., -1.64251208,
            -0.88566822, -0.27375188],
           [-0.83735907, -0.49919480, -0.51529789,  ..., -1.35265696,
            -0.83735907, -0.25764883]],

          [[-0.23838064, -0.38830581, -0.40329832,  ..., -1.00299859,
            -1.03298354, -1.03298354],
           [-0.25337315, -0.40329832, -0.43328333,  ..., -1.06296861,
            -0.95802099, -0.80809593],
           [-0.23838064, -0.37331331, -0.41829082,  ..., -1.22788620,
            -0.76311839, -0.68815589],
           ...,
           [ 0.07646193, -0.01349309, -0.44827583,  ..., -1.07796109,
            -0.67316341, -0.35832080],
           [ 0.25637197, -0.07346311, -0.65817088,  ..., -0.86806595,
            -0.64317840, -0.34332830],
           [ 0.31634200, -0.04347810, -0.29835078,  ..., -0.52323836,
            -0.58320838, -0.34332830]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0775 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 109, vnnlib ID: 109 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -4.68137455, -11.11765766,  -8.01337242,  -9.71148872,  -8.79326439,
         -10.48354340, -10.25170231, -11.03672123,  -9.45322895, -10.81242466]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [555]; unstable size 555; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 118, 1, 555] with unstable size 117 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 555] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 555] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [117]; unstable size 117; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 117] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 117] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.02142048, 2.59467435, 4.01387167, 3.15092158, 4.53091240, 4.70333385,
         4.88892984, 3.85758591, 5.04689932]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0669 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 110, vnnlib ID: 110 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.59310770, -8.98699856, -1.98446643, -1.86275947, -2.02259350,
         -2.92739010,  0.91057259, -5.46356249, -8.21526527, -9.22765255]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [455]; unstable size 455; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 269, 1, 455] with unstable size 268 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 455] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 455] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [268]; unstable size 268; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 268] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 268] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.81164742, 7.72943878, 1.56485319, 1.38150668, 1.52279830, 2.12491894,
         4.28514671, 7.13579130, 8.30116081]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0347 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 111, vnnlib ID: 111 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.92330647, -14.34430218,  -7.27562428, -10.29554081,  -6.15860891,
         -10.20837307,  -9.93119907,  -8.65463638, -13.25779629, -14.20930576]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [611]; unstable size 611; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 254, 1, 611] with unstable size 253 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 611] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 611] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [253]; unstable size 253; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 253] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 253] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.99095154,  5.73210239, -0.06892401,  3.12794542,  2.97227120,
          2.38821363,  1.26657891,  4.99652910,  5.76884413]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.92330647, -14.34430218,  -7.27562428, -10.29554081,  -6.15860891,
         -10.20837307,  -9.93119907,  -8.65463638, -13.25779629, -14.20930576]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.15it/s]100%|██████████| 1/1 [00:00<00:00,  9.14it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.49070644, -14.02054882,  -6.77474308, -10.01947308,  -6.14811516,
           -9.94418907,  -9.79620838,  -8.69151878, -12.92936230, -13.88387489]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.62662792]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1119 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 9th iter
best_l after optimization: 29.920612335205078
alpha/beta optimization time: 0.1158607006072998
initial alpha-crown bounds: tensor([[3.09697342e+00, 5.84763956e+00, 1.91938877e-03, 3.17881131e+00,
         3.02511549e+00, 2.45539451e+00, 1.32388163e+00, 5.10637760e+00,
         5.88450003e+00]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 0 ; Worst class: (+ rhs) 0.001919388771057129
verified with init bound!
Result: safe-incomplete in 0.2959 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 112, vnnlib ID: 112 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.39937687, -6.31978703, -7.08044434, -6.31649590, -8.13005733,
         -7.18079948, -7.62912607, -6.36020851, -5.32509041, -4.25607824]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [646]; unstable size 646; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 172, 1, 646] with unstable size 171 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 646] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 646] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [171]; unstable size 171; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 171] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 171] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.06740272,  0.96642971,  1.28222084,  0.65053320,  2.26329446,
          1.44973636,  2.01239872,  0.51638031, -0.32224488]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.39937687, -6.31978703, -7.08044434, -6.31649590, -8.13005733,
         -7.18079948, -7.62912607, -6.36020851, -5.32509041, -4.25607824]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.20it/s]100%|██████████| 1/1 [00:00<00:00,  9.20it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.57936287, -6.66815186, -7.30564022, -6.68102264, -8.49092770,
          -7.56898642, -7.92801905, -6.75226736, -5.11898041, -4.89544821]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.22353220]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1113 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.232049942016602
alpha/beta optimization time: 1.2016000747680664
initial alpha-crown bounds: tensor([[ 1.09233880,  1.00209773,  1.32075119,  0.68928766,  2.30610132,
          1.48740554,  2.04873109,  0.55730546, -0.27196860]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.2719686031341553
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.6186249256134
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.61858749389648
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.61855912208557
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.61853647232056
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.61851811408997
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.6184983253479
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.61848044395447
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.61845922470093
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 198.61844110488892
Verifying property 8 with 1 instances.
##### Instance 112 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.27196860]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.39937687, -6.31978703, -7.08044434, -6.31649590, -8.13005733,
        -7.18079948, -7.62912607, -6.36020851, -5.32509041, -4.25607824],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.27196860]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 646
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 166
Node /15 input 0: size torch.Size([100]) unstable 15
-----------------
# of unstable neurons: 827
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010013580322265625
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.27196741104125977
10 lb beta sum: 0.0, worst -0.2719733715057373
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0520    transfer 0.0001    finalize 0.0001    func 0.0524    
Accumulated time: func 0.0524    prepare 0.0002    bound 0.0520    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 78] 
split level 3: [/input-12, 1] 
split level 4: [/input-12, 51] 
split level 5: [/input-8, 1890] 
split level 6: [/input-12, 55] 
split level 7: [/input-8, 1121] 
split level 8: [/input-8, 477] 
split level 9: [/input-8, 1124] 
split level 10: [/input-8, 1888] 
split level 11: [/input-8, 1331] 
split level 12: [/input-8, 1132] 
split level 13: [/input-8, 1131] 
split level 14: [/input-8, 1840] 
split level 15: [/input-8, 1381] 
split level 16: [/input-8, 1898] 
split level 17: [/input-8, 1506] 
split level 18: [/input-8, 802] 
split level 19: [/input-8, 1069] 
split level 20: [/input-8, 1113] 
split level 21: [/input-8, 932] 
split level 22: [/input, 1787] 
split level 23: [/input, 1518] 
split level 24: [/input-12, 54] 
split level 25: [/input, 2676] 
split level 26: [/input, 1770] 
split level 27: [/input-8, 1067] 
split level 28: [/input-8, 1049] 
split level 29: [/input-8, 1062] 
split level 30: [/input, 762] 
split level 31: [/input-8, 413] 
split level 32: [/input, 3581] 
split level 33: [/input, 1768] 
split level 34: [/input, 3383] 
split level 35: [/input, 1517] 
split level 36: [/input-8, 1035] 
split level 37: [/input-8, 942] 
split level 38: [/input, 1637] 
split level 39: [/input-8, 1894] 
split level 40: [/input-8, 1509] 
split level 41: [/input-8, 1332] 
split level 42: [/input-8, 1382] 
split level 43: [/input, 2168] 
split level 44: [/input, 3566] 
split level 45: [/input-8, 808] 
split level 46: [/input, 3580] 
split level 47: [/input-8, 623] 
split level 48: [/input, 2420] 
split level 49: [/input, 2269] 
split level 50: [/input, 2362] 
split level 51: [/input-8, 769] 
split level 52: [/input-8, 1897] 
split level 53: [/input-8, 1906] 
split level 54: [/input-8, 1857] 
split level 55: [/input, 2283] 
split level 56: [/input, 2617] 
split level 57: [/input, 4075] 
split level 58: [/input-8, 1465] 
split level 59: [/input, 1368] 
split level 60: [/input-8, 2041] 
split level 61: [/input, 1769] 
split level 62: [/input-8, 409] 
split level 63: [/input, 3914] 
split level 64: [/input-8, 81] 
split level 65: [/input-8, 2033] 
split level 66: [/input, 2683] 
split level 67: [/input, 3550] 
split level 68: [/input-8, 89] 
split level 69: [/input, 1753] 
split level 70: [/input, 2954] 
split level 71: [/input, 3043] 
split level 72: [/input-8, 1581] 
split level 73: [/input, 2798] 
split level 74: [/input-8, 1482] 
split level 75: [/input, 1519] 
split level 76: [/input-8, 1080] 
split level 77: [/input, 2884] 
split level 78: [/input, 2392] 
split level 79: [/input, 3942] 
split level 80: [/input-8, 2046] 
split level 81: [/input-8, 1441] 
split level 82: [/input-8, 893] 
split level 83: [/input-8, 96] 
split level 84: [/input, 1534] 
split level 85: [/input, 1987] 
split level 86: [/input-8, 1498] 
split level 87: [/input, 3929] 
split level 88: [/input-8, 1910] 
split level 89: [/input, 2691] 
split level 90: [/input, 3945] 
split level 91: [/input, 2393] 
split level 92: [/input-8, 72] 
split level 93: [/input-8, 1743] 
split level 94: [/input-8, 1440] 
split level 95: [/input, 2712] 
split level 96: [/input, 1949] 
split level 97: [/input, 2039] 
split level 98: [/input, 1622] 
split level 99: [/input, 1980] 
split level 100: [/input, 581] 
split level 101: [/input, 2005] 
split level 102: [/input, 3415] 
split level 103: [/input, 3578] 
split level 104: [/input, 1503] 
split level 105: [/input, 3928] 
split level 106: [/input, 1651] 
split level 107: [/input, 2359] 
split level 108: [/input, 1995] 
split level 109: [/input, 2949] 
split level 110: [/input-8, 1751] 
split level 111: [/input, 2932] 
split level 112: [/input, 2377] 
split level 113: [/input, 3907] 
split level 114: [/input, 3722] 
split level 115: [/input, 3796] 
split level 116: [/input, 1948] 
split level 117: [/input, 3779] 
split level 118: [/input, 310] 
split level 119: [/input-8, 2031] 
split level 120: [/input, 1964] 
split level 121: [/input, 1212] 
split level 122: [/input, 2011] 
split level 123: [/input, 4078] 
split level 124: [/input, 1685] 
split level 125: [/input, 1988] 
split level 126: [/input, 1752] 
split level 127: [/input, 2407] 
split level 128: [/input-8, 789] 
split level 129: [/input, 2826] 
split level 130: [/input-8, 2035] 
split level 131: [/input, 2388] 
split level 132: [/input, 3978] 
split level 133: [/input, 3718] 
split level 134: [/input, 1767] 
split level 135: [/input, 3310] 
split level 136: [/input, 1791] 
split level 137: [/input, 2542] 
split level 138: [/input, 3927] 
split level 139: [/input, 628] 
split level 140: [/input-8, 1371] 
split level 141: [/input-8, 2019] 
split level 142: [/input-8, 2037] 
split level 143: [/input, 2711] 
split level 144: [/input, 2994] 
split level 145: [/input, 3110] 
split level 146: [/input-8, 936] 
split level 147: [/input, 1592] 
split level 148: [/input-8, 2034] 
split level 149: [/input, 2024] 
split level 150: [/input, 2550] 
split level 151: [/input, 1502] 
split level 152: [/input, 2008] 
split level 153: [/input, 3979] 
split level 154: [/input, 3180] 
split level 155: [/input, 2900] 
split level 156: [/input, 3997] 
split level 157: [/input, 3730] 
split level 158: [/input, 3996] 
split level 159: [/input, 3027] 
split level 160: [/input-8, 2036] 
split level 161: [/input, 4012] 
split level 162: [/input, 2004] 
split level 163: [/input, 2023] 
split level 164: [/input, 2006] 
split level 165: [/input, 3398] 
split level 166: [/input, 2916] 
split level 167: [/input-8, 1488] 
split level 168: [/input, 2868] 
split level 169: [/input, 231] 
split level 170: [/input, 2184] 
split level 171: [/input, 3128] 
split level 172: [/input-8, 1974] 
split level 173: [/input, 3143] 
split level 174: [/input-8, 1032] 
split level 175: [/input, 3159] 
split level 176: [/input, 2007] 
split level 177: [/input, 2380] 
split level 178: [/input, 1400] 
split level 179: [/input, 3111] 
split level 180: [/input, 1873] 
split level 181: [/input, 1383] 
split level 182: [/input, 2021] 
split level 183: [/input, 3890] 
split level 184: [/input, 2022] 
split level 185: [/input, 3926] 
split level 186: [/input, 3723] 
split level 187: [/input-8, 1618] 
split level 188: [/input-8, 1449] 
split level 189: [/input, 2010] 
split level 190: [/input, 3156] 
split level 191: [/input, 1287] 
split level 192: [/input-8, 157] 
split level 193: [/input-8, 1501] 
split level 194: [/input, 2137] 
split level 195: [/input, 2918] 
split level 196: [/input, 2858] 
split level 197: [/input-8, 1416] 
split level 198: [/input, 618] 
split level 199: [/input, 1260] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2719728946685791
10 lb beta sum: 0.0, worst -0.27196812629699707
Time: prepare 0.0116    bound 0.0964    transfer 0.0035    finalize 0.0026    func 0.1167    
Accumulated time: func 0.1691    prepare 0.0217    bound 0.1484    transfer 0.0036    finalize 0.0027    
all_split False
======================Cut inference begins======================
max lb tensor(0.31708169) min lb tensor(-0.27196550)
Number of Verified Splits: 6 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.011008501052856445 
BICCOS Cumulative time: 0.011008501052856445
Preprocessing time: 0.010010242462158203 Inference time: 0.00027942657470703125 Add cuts time: 9.703636169433594e-05 Cut analysis time: 0.000621795654296875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26064 (1), -0.26059 (1), -0.26033 (1), -0.26030 (1), -0.26028 (1), -0.25987 (1), -0.25971 (1), -0.25969 (1), -0.25931 (1), -0.25924 (1), -0.25868 (1), -0.25818 (1), -0.25742 (1), -0.25723 (1), -0.25699 (1), -0.25688 (1), -0.25671 (1), -0.25577 (1), -0.25550 (1), -0.25478 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5066    set_bounds 0.0098    solve 0.1168    add 0.0933    
Accumulated time: pickout 0.0003    decision 0.5066    set_bounds 0.0098    solve 0.1168    add 0.0933    
Current (lb-rhs): -0.26063990592956543
50 domains visited
Cumulative time: 0.8079037666320801

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] [/input-12, 68] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] 
split level 1: [/input-12, 68] [/input-12, 1] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 2: [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] 
split level 3: [/input-12, 1] [/input-8, 1890] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24576592445373535
10 lb beta sum: 1.026896357536316, worst -0.03687143325805664
Time: prepare 0.0076    bound 0.1158    transfer 0.0007    finalize 0.0024    func 0.1292    
Accumulated time: func 0.2983    prepare 0.0296    bound 0.2642    transfer 0.0043    finalize 0.0051    
all_split False
======================Cut inference begins======================
max lb tensor(0.53193116) min lb tensor(-0.03660280)
Number of Verified Splits: 241 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.025239229202270508 
BICCOS Cumulative time: 0.03624773025512695
Preprocessing time: 0.01230931282043457 Inference time: 0.008659601211547852 Add cuts time: 0.0038306713104248047 Cut analysis time: 0.00043964385986328125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01758 (2), -0.01758 (2), -0.01755 (2), -0.01755 (2), -0.01752 (2), -0.01737 (2), -0.01686 (2), -0.01683 (2), -0.01682 (2), -0.01671 (2), -0.01540 (2), -0.01537 (2), -0.01537 (2), -0.01519 (2), -0.01439 (2), -0.01438 (2), -0.01436 (2), -0.01429 (2), -0.01428 (2), -0.01426 (2), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0191    set_bounds 0.0113    solve 0.1293    add 0.0924    
Accumulated time: pickout 0.0013    decision 0.5257    set_bounds 0.0211    solve 0.2460    add 0.1857    
Current (lb-rhs): -0.01758432388305664
100 domains visited
Cumulative time: 1.0865185260772705

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 68] [/input-12, 68] [/input-12, 21] [/input-12, 21] [/input-12, 21] [/input-12, 21] 
split level 1: [/input-12, 1] [/input-12, 68] [/input-12, 78] [/input-12, 68] [/input-12, 1] [/input-12, 1] [/input-12, 78] [/input-12, 68] [/input-12, 68] [/input-12, 78] 
split level 2: [/input-12, 78] [/input-12, 78] [/input-12, 1] [/input-12, 1] [/input-12, 78] [/input-12, 78] [/input-12, 1] [/input-12, 78] [/input-12, 1] [/input-12, 1] 
split level 3: [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] [/input-8, 1890] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22661614418029785

all verified at 8th iter
Time: prepare 0.0081    bound 0.0593    transfer 0.0008    finalize 0.0022    func 0.0729    
Accumulated time: func 0.3712    prepare 0.0380    bound 0.3234    transfer 0.0051    finalize 0.0074    
all_split False
======================Cut inference begins======================
max lb tensor(0.42622256) min lb tensor(0.00039840)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 67.
#cuts 1-3: 67
#cuts >= 20: 0
BICCOS time: 0.03749513626098633 
BICCOS Cumulative time: 0.07374286651611328
Preprocessing time: 0.01203465461730957 Inference time: 0.015070438385009766 Add cuts time: 0.00909280776977539 Cut analysis time: 0.0012972354888916016
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0010    decision 0.0188    set_bounds 0.0157    solve 0.0730    add 0.0234    
Accumulated time: pickout 0.0024    decision 0.5445    set_bounds 0.0368    solve 0.3190    add 0.2091    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([1331], [-1.0], [0], [8.328415734837336e-11], [0]), '/input-12': (tensor([21, 68]), tensor([-1., -1.]), tensor([0, 0]), tensor([9.01222430e-11, 1.58575103e-01]), tensor([1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1331], [-1.0], [0], [8.328415734837336e-11], [0]), '/input-12': (tensor([21, 68]), tensor([-1.,  1.]), tensor([0, 0]), tensor([9.01222430e-11, 1.85789336e-02]), tensor([1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1331], [-1.0], [0], [8.328415734837336e-11], [0]), '/input-12': (tensor([21]), tensor([1.]), tensor([0]), tensor([1.35928459e-14]), tensor([1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1331]), tensor([1.]), tensor([0]), tensor([9.51742019e-11]), tensor([0])), '/input-12': ([], [], [], [], [])}
Shallow branching resets to n domains:  4
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2700917720794678
10 lb beta sum: 2.5609655380249023, worst -0.008572101593017578
Time: prepare 0.0004    bound 0.1387    transfer 0.0001    finalize 0.0002    func 0.1394    
Accumulated time: func 0.5106    prepare 0.0384    bound 0.4621    transfer 0.0052    finalize 0.0075    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 21] 
split level 1: [/input-12, 68] 
split level 2: [/input-12, 78] 
split level 3: [/input-12, 1] 
split level 4: [/input-8, 1890] 
split level 5: [/input-8, 1132] 
split level 6: [/input-8, 1131] 
split level 7: [/input-8, 1898] 
cut re-enabled after branching node selection
0 lb beta sum: 5.261077880859375, worst 0.020541667938232422

all verified at 0th iter
Time: prepare 0.0111    bound 0.0057    transfer 0.0017    finalize 0.0014    func 0.0215    
Accumulated time: func 0.5321    prepare 0.0498    bound 0.4679    transfer 0.0069    finalize 0.0089    
all_split False
======================Cut inference begins======================
max lb tensor(1.32206082) min lb tensor(0.02054167)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 67.
#cuts 1-3: 67
#cuts >= 20: 0
BICCOS time: 0.007452487945556641 
BICCOS Cumulative time: 0.08119535446166992
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.0215    set_bounds 0.0272    solve 0.0216    add 0.0001    
Accumulated time: pickout 0.0028    decision 0.5659    set_bounds 0.0639    solve 0.3406    add 0.2092    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
Cumulative time: 1.4846899509429932

Result: safe in 3.0860 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 113, vnnlib ID: 113 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.78284311, -8.25498867, -3.91874337, -1.90788758, -4.97474670,
         -1.46400177, -6.09554291, -3.89886856, -8.36994171, -6.97793961]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [667]; unstable size 667; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 214, 1, 667] with unstable size 213 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 667] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 667] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [213]; unstable size 213; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 213] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 213] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.60612822,  4.23385572,  0.99936318,  2.04068398, -0.70643753,
          3.00155067,  1.31167328,  4.90406227,  3.47214937]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.78284311, -8.25498867, -3.91874337, -1.90788758, -4.97474670,
         -1.46400177, -6.09554291, -3.89886856, -8.36994171, -6.97793961]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.78284311, -8.25498867, -3.91874337, -1.90788758, -4.97474670,
          -1.46400177, -6.09554291, -3.89886856, -8.36994171, -6.97793961]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.44388580]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.03650784, -1.00476182, -0.75079364,  ..., -0.68730158,
            -0.90952379, -1.62380958],
           [-0.44920623, -0.95714283, -0.67142856,  ..., -0.32222211,
            -0.65555555, -1.62380958],
           [-0.09999990, -0.92539680, -0.63968253,  ..., -0.22698402,
            -0.57619047, -1.63968253],
           ...,
           [-0.27460307, -0.29047608, -0.33809513,  ..., -0.87777776,
            -0.51269841, -0.48095238],
           [-0.30634910, -0.30634910, -0.33809513,  ..., -1.09999990,
            -0.65555555, -0.49682540],
           [-0.40158719, -0.40158719, -0.41746020,  ..., -1.29047608,
            -0.87777776, -0.62380952]],

          [[-1.62640905, -1.72302747, -1.65861523,  ..., -1.49758446,
            -1.57809973, -1.75523353],
           [-1.38486302, -1.77133656, -1.61030602,  ..., -1.35265696,
            -1.49758446, -1.75523353],
           [-1.09500802, -1.80354273, -1.62640905,  ..., -1.22383249,
            -1.40096617, -1.75523353],
           ...,
           [-1.25603855, -1.25603855, -1.28824472,  ..., -0.72463763,
            -0.43478248, -0.51529789],
           [-1.28824472, -1.25603855, -1.28824472,  ..., -0.88566822,
            -0.48309177, -0.45088565],
           [-1.33655393, -1.33655393, -1.33655393,  ..., -1.12721407,
            -0.67632848, -0.46698871]],

          [[-1.48275876, -1.52773619, -1.49775124,  ..., -1.28785622,
            -1.34782624, -1.42278874],
           [-1.15292358, -1.55772126, -1.54272878,  ..., -1.12293863,
            -1.19790113, -1.42278874],
           [-0.89805096, -1.54272878, -1.51274371,  ..., -1.06296861,
            -1.13793111, -1.43778121],
           ...,
           [-0.94302845, -0.94302845, -0.95802099,  ..., -0.61319339,
            -0.38830581, -0.52323836],
           [-0.94302845, -0.94302845, -0.94302845,  ..., -0.70314842,
            -0.34332830, -0.38830581],
           [-0.98800600, -1.00299859, -1.00299859,  ..., -0.89805096,
            -0.52323836, -0.31334329]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0694 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 114, vnnlib ID: 114 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.20003605, -18.01286888, -15.99082375, -17.43127060, -15.99804783,
         -18.05647850, -17.26184273, -18.19654465, -14.18293667, -18.52462387]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [575]; unstable size 575; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 278, 1, 575] with unstable size 277 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 575] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 575] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [277]; unstable size 277; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 277] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 277] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.64699459, 2.80865240, 4.23958683, 2.61277103, 4.73358536, 3.88175774,
         4.35204315, 1.01147723, 5.09978390]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0621 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 115, vnnlib ID: 115 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.36256695, -13.41296291,  -7.44461441,  -8.80130768,  -6.03208971,
          -9.45968819,  -8.73321247,  -9.01270103, -12.02322006, -13.37573814]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [544]; unstable size 544; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 300, 1, 544] with unstable size 299 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 544] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 544] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [299]; unstable size 299; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 299] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 299] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.81327713, 5.48521519, 0.46946669, 1.82796860, 2.35864878, 1.48084867,
         1.92163324, 4.35953045, 5.34309340]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0390 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 116, vnnlib ID: 116 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.81765366, -7.31970978, -3.61689496, -2.33775973, -4.04815769,
         -1.70513523, -4.43761539, -2.28235054, -5.83187103, -5.49887180]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [659]; unstable size 659; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 163, 1, 659] with unstable size 162 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 659] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 659] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [162]; unstable size 162; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 162] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 162] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.62464428,  3.89426327,  0.79460716,  0.29400682,  1.47056723,
          1.78599679, -0.22968006,  2.20870399,  2.15642929]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.81765366, -7.31970978, -3.61689496, -2.33775973, -4.04815769,
         -1.70513523, -4.43761539, -2.28235054, -5.83187103, -5.49887180]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.18it/s]100%|██████████| 1/1 [00:00<00:00,  9.17it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.89979172, -7.36104774, -3.67233706, -2.66874647, -4.12950802,
          -2.08822346, -4.72593451, -2.15821362, -6.01429844, -5.55949211]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.06999016]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1117 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 16.39248275756836
alpha/beta optimization time: 1.2085819244384766
initial alpha-crown bounds: tensor([[ 3.67620111,  3.94920158,  0.83800292,  0.30350500,  1.50147009,
          1.81741762, -0.19317818,  2.29632831,  2.20353317]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.1931781768798828
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.61083269119263
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.61079287528992
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.6107575893402
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.61072945594788
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.61071062088013
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.6106915473938
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.6106734275818
Verifying property 6 with 1 instances.
##### Instance 116 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  1.,  0., -1.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.19317818]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.81765366, -7.31970978, -3.61689496, -2.33775973, -4.04815769,
        -1.70513523, -4.43761539, -2.28235054, -5.83187103, -5.49887180],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.19317818]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 659
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 159
Node /15 input 0: size torch.Size([100]) unstable 16
-----------------
# of unstable neurons: 834
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010347366333007812
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1931779384613037
10 lb beta sum: 0.0, worst -0.19318103790283203
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    func 0.0526    
Accumulated time: func 0.0526    prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] 
split level 1: [/input-12, 6] 
split level 2: [/input-12, 1] 
split level 3: [/input-12, 68] 
split level 4: [/input-12, 10] 
split level 5: [/input-12, 53] 
split level 6: [/input-8, 110] 
split level 7: [/input-8, 926] 
split level 8: [/input-8, 1460] 
split level 9: [/input-8, 162] 
split level 10: [/input-12, 64] 
split level 11: [/input-8, 486] 
split level 12: [/input-8, 1001] 
split level 13: [/input-8, 573] 
split level 14: [/input-8, 1017] 
split level 15: [/input-8, 1506] 
split level 16: [/input-8, 1058] 
split level 17: [/input-8, 998] 
split level 18: [/input-8, 102] 
split level 19: [/input-8, 1453] 
split level 20: [/input-8, 93] 
split level 21: [/input-8, 2036] 
split level 22: [/input-8, 619] 
split level 23: [/input-8, 1461] 
split level 24: [/input-8, 1329] 
split level 25: [/input, 2375] 
split level 26: [/input-8, 1523] 
split level 27: [/input-8, 598] 
split level 28: [/input, 481] 
split level 29: [/input-8, 1018] 
split level 30: [/input-8, 1009] 
split level 31: [/input-8, 2024] 
split level 32: [/input-8, 1421] 
split level 33: [/input-8, 993] 
split level 34: [/input-8, 1869] 
split level 35: [/input-8, 105] 
split level 36: [/input, 436] 
split level 37: [/input, 2430] 
split level 38: [/input, 1724] 
split level 39: [/input-8, 490] 
split level 40: [/input-8, 1765] 
split level 41: [/input, 2748] 
split level 42: [/input-8, 979] 
split level 43: [/input-8, 924] 
split level 44: [/input-8, 479] 
split level 45: [/input, 2071] 
split level 46: [/input-8, 1265] 
split level 47: [/input-8, 1467] 
split level 48: [/input, 497] 
split level 49: [/input, 2747] 
split level 50: [/input, 2397] 
split level 51: [/input-8, 892] 
split level 52: [/input-8, 521] 
split level 53: [/input-8, 1662] 
split level 54: [/input-8, 985] 
split level 55: [/input-8, 1466] 
split level 56: [/input-8, 1525] 
split level 57: [/input, 2446] 
split level 58: [/input-8, 497] 
split level 59: [/input-8, 585] 
split level 60: [/input-8, 969] 
split level 61: [/input, 1658] 
split level 62: [/input, 126] 
split level 63: [/input-8, 2041] 
split level 64: [/input, 455] 
split level 65: [/input, 285] 
split level 66: [/input-8, 1774] 
split level 67: [/input-8, 1518] 
split level 68: [/input, 1925] 
split level 69: [/input, 3027] 
split level 70: [/input-8, 698] 
split level 71: [/input, 2719] 
split level 72: [/input-8, 1514] 
split level 73: [/input-8, 2039] 
split level 74: [/input-8, 1805] 
split level 75: [/input, 196] 
split level 76: [/input-8, 78] 
split level 77: [/input-8, 1396] 
split level 78: [/input, 2215] 
split level 79: [/input, 3880] 
split level 80: [/input, 1642] 
split level 81: [/input-8, 481] 
split level 82: [/input, 2072] 
split level 83: [/input-8, 111] 
split level 84: [/input, 3021] 
split level 85: [/input, 2329] 
split level 86: [/input, 2380] 
split level 87: [/input-8, 2006] 
split level 88: [/input, 2749] 
split level 89: [/input, 440] 
split level 90: [/input-8, 1860] 
split level 91: [/input, 2763] 
split level 92: [/input, 2245] 
split level 93: [/input, 2463] 
split level 94: [/input-8, 2026] 
split level 95: [/input, 3811] 
split level 96: [/input, 3025] 
split level 97: [/input, 2984] 
split level 98: [/input, 3815] 
split level 99: [/input-8, 564] 
split level 100: [/input, 3223] 
split level 101: [/input-8, 1470] 
split level 102: [/input, 2280] 
split level 103: [/input, 2989] 
split level 104: [/input, 2597] 
split level 105: [/input, 3967] 
split level 106: [/input, 1246] 
split level 107: [/input-8, 529] 
split level 108: [/input, 3096] 
split level 109: [/input, 1560] 
split level 110: [/input, 1784] 
split level 111: [/input, 2714] 
split level 112: [/input-8, 121] 
split level 113: [/input, 3966] 
split level 114: [/input, 3099] 
split level 115: [/input, 2294] 
split level 116: [/input, 2248] 
split level 117: [/input-8, 454] 
split level 118: [/input, 2371] 
split level 119: [/input, 3198] 
split level 120: [/input, 2426] 
split level 121: [/input, 2089] 
split level 122: [/input, 3998] 
split level 123: [/input, 3000] 
split level 124: [/input, 3795] 
split level 125: [/input-8, 103] 
split level 126: [/input, 2381] 
split level 127: [/input, 3876] 
split level 128: [/input, 3197] 
split level 129: [/input, 3793] 
split level 130: [/input, 2302] 
split level 131: [/input, 2238] 
split level 132: [/input, 1941] 
split level 133: [/input, 2815] 
split level 134: [/input, 1783] 
split level 135: [/input, 1518] 
split level 136: [/input, 3112] 
split level 137: [/input, 2615] 
split level 138: [/input, 273] 
split level 139: [/input, 3233] 
split level 140: [/input, 2585] 
split level 141: [/input, 2973] 
split level 142: [/input, 1307] 
split level 143: [/input, 1878] 
split level 144: [/input-8, 987] 
split level 145: [/input, 3100] 
split level 146: [/input, 1481] 
split level 147: [/input, 1657] 
split level 148: [/input, 2587] 
split level 149: [/input, 1785] 
split level 150: [/input, 4043] 
split level 151: [/input, 3104] 
split level 152: [/input, 4051] 
split level 153: [/input-8, 527] 
split level 154: [/input, 3794] 
split level 155: [/input, 3140] 
split level 156: [/input, 2298] 
split level 157: [/input, 2244] 
split level 158: [/input, 3115] 
split level 159: [/input, 474] 
split level 160: [/input, 1801] 
split level 161: [/input, 3826] 
split level 162: [/input, 2372] 
split level 163: [/input, 1942] 
split level 164: [/input, 1493] 
split level 165: [/input, 1305] 
split level 166: [/input-8, 1413] 
split level 167: [/input, 3185] 
split level 168: [/input, 3980] 
split level 169: [/input, 2415] 
split level 170: [/input, 3866] 
split level 171: [/input, 3043] 
split level 172: [/input, 2354] 
split level 173: [/input, 3102] 
split level 174: [/input, 2368] 
split level 175: [/input, 3825] 
split level 176: [/input, 2988] 
split level 177: [/input-8, 1397] 
split level 178: [/input, 2257] 
split level 179: [/input, 3881] 
split level 180: [/input, 3107] 
split level 181: [/input-8, 2033] 
split level 182: [/input-8, 525] 
split level 183: [/input, 2807] 
split level 184: [/input, 3790] 
split level 185: [/input, 3822] 
split level 186: [/input, 3054] 
split level 187: [/input, 3169] 
split level 188: [/input, 1247] 
split level 189: [/input, 2053] 
split level 190: [/input, 95] 
split level 191: [/input-8, 2025] 
split level 192: [/input, 3820] 
split level 193: [/input, 1653] 
split level 194: [/input-8, 1554] 
split level 195: [/input, 3092] 
split level 196: [/input, 2311] 
split level 197: [/input, 2097] 
split level 198: [/input, 3136] 
split level 199: [/input, 3088] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.19308733940124512
10 lb beta sum: 0.0, worst -0.1930907964706421
Time: prepare 0.0116    bound 0.0990    transfer 0.0023    finalize 0.0033    func 0.1189    
Accumulated time: func 0.1715    prepare 0.0218    bound 0.1512    transfer 0.0024    finalize 0.0034    
all_split False
======================Cut inference begins======================
max lb tensor(0.22567368) min lb tensor(-0.19308734)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010854482650756836 
BICCOS Cumulative time: 0.010854482650756836
Preprocessing time: 0.010326862335205078 Inference time: 0.00017452239990234375 Add cuts time: 9.250640869140625e-05 Cut analysis time: 0.0002605915069580078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18751 (1), -0.18750 (1), -0.18735 (1), -0.18653 (1), -0.18647 (1), -0.18629 (1), -0.18606 (1), -0.18601 (1), -0.18572 (1), -0.18517 (1), -0.18504 (1), -0.18486 (1), -0.18453 (1), -0.18438 (1), -0.18432 (1), -0.18384 (1), -0.18302 (1), -0.18255 (1), -0.18144 (1), -0.18126 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5126    set_bounds 0.0089    solve 0.1190    add 0.1121    
Accumulated time: pickout 0.0003    decision 0.5126    set_bounds 0.0089    solve 0.1190    add 0.1121    
Current (lb-rhs): -0.18751466274261475
50 domains visited
Cumulative time: 0.8318479061126709

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 68] [/input-12, 10] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 10] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
split level 3: [/input-12, 10] [/input-12, 53] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 53] [/input-12, 53] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1729569435119629
10 lb beta sum: 0.4636729657649994, worst -0.1574350893497467
Time: prepare 0.0075    bound 0.1177    transfer 0.0007    finalize 0.0024    func 0.1309    
Accumulated time: func 0.3024    prepare 0.0295    bound 0.2689    transfer 0.0031    finalize 0.0059    
all_split False
======================Cut inference begins======================
max lb tensor(0.18049026) min lb tensor(-0.15740469)
Number of Verified Splits: 99 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.01763010025024414 
BICCOS Cumulative time: 0.028484582901000977
Preprocessing time: 0.012080669403076172 Inference time: 0.003556966781616211 Add cuts time: 0.001722097396850586 Cut analysis time: 0.0002703666687011719
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08632 (2), -0.08597 (2), -0.08590 (2), -0.08574 (2), -0.08545 (2), -0.08521 (2), -0.08519 (2), -0.08503 (2), -0.08444 (2), -0.08343 (2), -0.08339 (2), -0.08241 (2), -0.08170 (2), -0.08161 (2), -0.08091 (2), -0.08059 (2), -0.07997 (2), -0.07902 (2), -0.07889 (2), -0.07888 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0195    set_bounds 0.0119    solve 0.1310    add 0.0830    
Accumulated time: pickout 0.0015    decision 0.5322    set_bounds 0.0209    solve 0.2499    add 0.1952    
Current (lb-rhs): -0.08631563186645508
100 domains visited
Cumulative time: 1.096323013305664

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 1] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 68] [/input-12, 68] [/input-12, 1] [/input-12, 6] [/input-12, 6] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 68] [/input-12, 10] [/input-12, 68] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 1] [/input-12, 1] [/input-12, 10] [/input-12, 10] 
split level 3: [/input-12, 53] [/input-8, 93] [/input-12, 53] [/input-12, 53] [/input-8, 93] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11711311340332031
10 lb beta sum: 0.6051169037818909, worst -0.09011596441268921
Time: prepare 0.0075    bound 0.1166    transfer 0.0017    finalize 0.0025    func 0.1314    
Accumulated time: func 0.4338    prepare 0.0372    bound 0.3855    transfer 0.0048    finalize 0.0084    
all_split False
======================Cut inference begins======================
max lb tensor(0.41294897) min lb tensor(-0.08440268)
Number of Verified Splits: 118 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 6
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.019548416137695312 
BICCOS Cumulative time: 0.04803299903869629
Preprocessing time: 0.01182246208190918 Inference time: 0.005257368087768555 Add cuts time: 0.0020864009857177734 Cut analysis time: 0.0003821849822998047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04234 (3), -0.04202 (3), -0.04166 (3), -0.04158 (3), -0.04147 (3), -0.04021 (3), -0.04018 (3), -0.04015 (3), -0.04011 (3), -0.04009 (3), -0.03978 (3), -0.03923 (3), -0.03896 (3), -0.03805 (3), -0.03781 (3), -0.03720 (3), -0.03689 (3), -0.03670 (3), -0.03658 (3), -0.03657 (3), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0192    set_bounds 0.0156    solve 0.1315    add 0.0886    
Accumulated time: pickout 0.0025    decision 0.5514    set_bounds 0.0364    solve 0.3814    add 0.2838    
Current (lb-rhs): -0.04233938455581665
150 domains visited
Cumulative time: 1.3721013069152832

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 1] [/input-12, 1] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 6] [/input-12, 6] [/input-12, 1] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 6] 
split level 2: [/input-12, 53] [/input-12, 53] [/input-12, 1] [/input-12, 1] [/input-12, 10] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 1] 
split level 3: [/input-8, 93] [/input-8, 93] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-8, 93] [/input-8, 93] [/input-8, 93] [/input-8, 93] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07732832431793213
10 lb beta sum: 0.5559889078140259, worst -0.05340200662612915
Time: prepare 0.0075    bound 0.1331    transfer 0.0008    finalize 0.0023    func 0.1463    
Accumulated time: func 0.5801    prepare 0.0450    bound 0.5185    transfer 0.0056    finalize 0.0107    
all_split False
======================Cut inference begins======================
max lb tensor(0.23799753) min lb tensor(-0.04202390)
Number of Verified Splits: 173 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 4
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.023535966873168945 
BICCOS Cumulative time: 0.07156896591186523
Preprocessing time: 0.011736392974853516 Inference time: 0.008200645446777344 Add cuts time: 0.0032434463500976562 Cut analysis time: 0.0003554821014404297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02283 (4), -0.02269 (4), -0.02267 (4), -0.02227 (4), -0.02098 (4), -0.02087 (4), -0.01982 (4), -0.01952 (4), -0.01951 (4), -0.01926 (4), -0.01910 (4), -0.01906 (4), -0.01898 (4), -0.01866 (4), -0.01862 (4), -0.01845 (4), -0.01758 (4), -0.01741 (4), -0.01710 (4), -0.01649 (4), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0189    set_bounds 0.0155    solve 0.1464    add 0.2824    
Accumulated time: pickout 0.0036    decision 0.5703    set_bounds 0.0520    solve 0.5279    add 0.5662    
Current (lb-rhs): -0.02283424139022827
200 domains visited
Cumulative time: 1.8602161407470703

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
split level 1: [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] [/input-12, 6] 
split level 2: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 3: [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05912494659423828
10 lb beta sum: 0.4171781837940216, worst -0.03885728120803833
Time: prepare 0.0082    bound 0.1351    transfer 0.0007    finalize 0.0023    func 0.1495    
Accumulated time: func 0.7296    prepare 0.0534    bound 0.6536    transfer 0.0064    finalize 0.0129    
all_split False
======================Cut inference begins======================
max lb tensor(0.26322222) min lb tensor(-0.02283424)
Number of Verified Splits: 171 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 4
#cuts 4-6: 11
#cuts >= 20: 0
BICCOS time: 0.02489447593688965 
BICCOS Cumulative time: 0.09646344184875488
Preprocessing time: 0.011972904205322266 Inference time: 0.008544445037841797 Add cuts time: 0.0036368370056152344 Cut analysis time: 0.0007402896881103516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00650 (5), -0.00638 (5), -0.00629 (5), -0.00629 (5), -0.00628 (5), -0.00626 (5), -0.00624 (5), -0.00623 (5), -0.00617 (5), -0.00616 (5), -0.00608 (5), -0.00606 (5), -0.00605 (5), -0.00604 (5), -0.00595 (5), -0.00590 (5), -0.00587 (5), -0.00580 (5), -0.00575 (5), -0.00574 (5), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0194    set_bounds 0.0164    solve 0.1496    add 0.2270    
Accumulated time: pickout 0.0048    decision 0.5897    set_bounds 0.0683    solve 0.6774    add 0.7932    
Current (lb-rhs): -0.006501436233520508
250 domains visited
Cumulative time: 2.3057146072387695

Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [1.82193281265207e+29], [0]), '/input-12': (tensor([68, 11]), tensor([-1., -1.]), tensor([0, 0]), tensor([0.06779365, 0.23546486]), tensor([1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [1.82193281265207e+29], [0]), '/input-12': (tensor([68, 11]), tensor([-1.,  1.]), tensor([0, 0]), tensor([0.06779365, 0.00042020]), tensor([1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [1.82193281265207e+29], [0]), '/input-12': (tensor([68, 10, 53, 11]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([1.35199629e-10, 1.84613336e-02, 2.99709309e-02, 2.66100585e-01]), tensor([1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [1.82193281265207e+29], [0]), '/input-12': (tensor([68, 10, 53, 11]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.35199629e-10, 1.84613336e-02, 2.99709309e-02, 7.87721714e-04]), tensor([1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [1.82193281265207e+29], [0]), '/input-12': (tensor([68, 10, 53]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.35199629e-10, 1.84613336e-02, 8.56797583e-03]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [1.82193281265207e+29], [0]), '/input-12': (tensor([68, 10, 11]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.35199629e-10, 3.44693512e-02, 2.31149003e-01]), tensor([1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [1.82193281265207e+29], [0]), '/input-12': (tensor([68, 10, 11,  6]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.35199629e-10, 3.44693512e-02, 1.03090866e-03, 6.35319799e-02]), tensor([1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([110], [-1.0], [0], [1.82193281265207e+29], [0]), '/input-12': (tensor([68, 10, 11,  6]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([1.35199629e-10, 3.44693512e-02, 1.03090866e-03, 1.01705058e-03]), tensor([1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([110]), tensor([1.]), tensor([0]), tensor([1.82193281e+29]), tensor([0])), '/input-12': ([], [], [], [], [])}
Shallow branching resets to n domains:  9
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1924130916595459
10 lb beta sum: 0.42814913392066956, worst -0.15427064895629883
Time: prepare 0.0006    bound 0.1425    transfer 0.0001    finalize 0.0002    func 0.1435    
Accumulated time: func 0.8731    prepare 0.0540    bound 0.7961    transfer 0.0065    finalize 0.0131    
After pruning, left:  5

Back to Regular BaB

BaB round 1
batch: 5
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 6] [/input-12, 6] [/input-12, 11] [/input-12, 1] [/input-12, 11] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 6] [/input-12, 53] [/input-12, 6] 
split level 2: [/input-12, 10] [/input-8, 1460] [/input-12, 1] [/input-8, 1460] [/input-12, 1] 
split level 3: [/input-12, 53] [/input-12, 64] [/input-8, 1460] [/input-8, 1506] [/input-12, 68] 
split level 4: [/input-8, 1460] [/input-8, 1461] [/input-8, 1506] [/input, 1724] [/input-12, 10] 
split level 5: [/input, 1724] [/input, 1724] [/input, 1724] [/input-8, 993] [/input-12, 53] 
cut re-enabled after branching node selection
0 lb beta sum: 0.754446804523468, worst -0.10215747356414795
10 lb beta sum: 0.754482090473175, worst -0.10201430320739746
Time: prepare 0.0151    bound 0.1433    transfer 0.0024    finalize 0.0019    func 0.1647    
Accumulated time: func 1.0378    prepare 0.0694    bound 0.9394    transfer 0.0089    finalize 0.0150    
all_split False
======================Cut inference begins======================
max lb tensor(0.39982098) min lb tensor(-0.10198605)
Number of Verified Splits: 290 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.7476013898849487, worst -0.14157044887542725
10 lb beta sum: 0.897563636302948, worst -0.11921501159667969
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 4
#cuts 4-6: 11
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.3451724052429199 
BICCOS Cumulative time: 0.4416358470916748
Preprocessing time: 0.009395360946655273 Inference time: 0.3259866237640381 Add cuts time: 0.008743762969970703 Cut analysis time: 0.0010466575622558594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10199 (6), -0.08960 (6), -0.07879 (6), -0.07339 (6), -0.06771 (6), -0.04962 (6), -0.04822 (6), -0.04684 (6), -0.04025 (6), -0.04012 (6), -0.03997 (6), -0.03689 (6), -0.03289 (6), -0.03212 (6), -0.03160 (6), -0.02447 (6), -0.02298 (6), -0.01996 (6), -0.01472 (6), -0.01423 (6), 
Length of domains: 30
Time: pickout 0.0007    decision 0.0182    set_bounds 0.0361    solve 0.1648    add 0.0539    
Accumulated time: pickout 0.0055    decision 0.6078    set_bounds 0.1044    solve 0.8422    add 0.8472    
Current (lb-rhs): -0.10198605060577393
280 domains visited
Cumulative time: 3.179462432861328

BaB round 2
batch: 30
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1058] [/input-8, 1058] [/input-8, 926] [/input-8, 1460] [/input-8, 926] [/input-8, 926] [/input-8, 926] [/input-8, 1460] [/input-8, 1453] [/input-8, 1058] 
split level 1: [/input-8, 1453] [/input-8, 1461] [/input-8, 1461] [/input-8, 1453] [/input-8, 1506] [/input-8, 1506] [/input-8, 1461] [/input-12, 64] [/input-8, 1461] [/input-8, 1461] 
split level 2: [/input-8, 1461] [/input, 2238] [/input, 2238] [/input-8, 1461] [/input-8, 1461] [/input, 2238] [/input, 2238] [/input-8, 1461] [/input, 2238] [/input, 2238] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09362304210662842
10 lb beta sum: 0.1318330019712448, worst -0.09104244410991669
Time: prepare 0.0059    bound 0.1480    transfer 0.0006    finalize 0.0015    func 0.1576    
Accumulated time: func 1.1954    prepare 0.0755    bound 1.0874    transfer 0.0095    finalize 0.0165    
all_split False
======================Cut inference begins======================
max lb tensor(0.10232022) min lb tensor(-0.09101874)
Number of Verified Splits: 107 of 240
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 5
#cuts 4-6: 16
#cuts >= 20: 0
BICCOS time: 0.02220630645751953 
BICCOS Cumulative time: 0.46384215354919434
Preprocessing time: 0.009090662002563477 Inference time: 0.009768962860107422 Add cuts time: 0.0023169517517089844 Cut analysis time: 0.0010297298431396484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09102 (9), -0.08884 (9), -0.08471 (9), -0.08359 (9), -0.08290 (9), -0.08253 (9), -0.08074 (9), -0.07651 (9), -0.07636 (9), -0.07554 (9), -0.07437 (9), -0.06848 (9), -0.06754 (9), -0.06458 (9), -0.06377 (9), -0.06034 (9), -0.06032 (9), -0.05861 (9), -0.05683 (9), -0.05642 (9), 
Length of domains: 133
Time: pickout 0.0054    decision 0.0126    set_bounds 0.0183    solve 0.1577    add 0.0756    
Accumulated time: pickout 0.0109    decision 0.6204    set_bounds 0.1227    solve 0.9998    add 0.9227    
Current (lb-rhs): -0.09101873636245728
413 domains visited
Cumulative time: 3.478670120239258

BaB round 3
batch: 133
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 926] [/input-8, 162] [/input-12, 64] [/input-12, 64] [/input-8, 926] [/input-12, 64] [/input-8, 162] [/input-12, 64] [/input-12, 64] [/input-8, 926] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09125316143035889
10 lb beta sum: 0.1357094943523407, worst -0.0887318104505539
Time: prepare 0.0064    bound 0.1519    transfer 0.0008    finalize 0.0017    func 0.1625    
Accumulated time: func 1.3579    prepare 0.0822    bound 1.2392    transfer 0.0102    finalize 0.0182    
all_split False
======================Cut inference begins======================
max lb tensor(0.09131058) min lb tensor(-0.08871314)
Number of Verified Splits: 88 of 266
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 6
#cuts 4-6: 17
#cuts >= 20: 0
BICCOS time: 0.019060611724853516 
BICCOS Cumulative time: 0.48290276527404785
Preprocessing time: 0.00812220573425293 Inference time: 0.007936239242553711 Add cuts time: 0.0020716190338134766 Cut analysis time: 0.0009305477142333984
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08871 (10), -0.08654 (10), -0.08251 (10), -0.08164 (10), -0.08052 (10), -0.08028 (10), -0.07831 (10), -0.07428 (10), -0.07420 (10), -0.07348 (10), -0.07190 (10), -0.06765 (10), -0.06607 (10), -0.06552 (10), -0.06523 (10), -0.06242 (10), -0.06160 (10), -0.06136 (10), -0.06077 (10), -0.06000 (10), 
Length of domains: 178
Time: pickout 0.0154    decision 0.0199    set_bounds 0.0115    solve 0.1626    add 0.0805    
Accumulated time: pickout 0.0263    decision 0.6403    set_bounds 0.1342    solve 1.1624    add 1.0032    
Current (lb-rhs): -0.088713139295578
591 domains visited
Cumulative time: 3.7956128120422363

BaB round 4
batch: 178
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-12, 64] [/input-8, 162] [/input-8, 993] [/input-8, 926] [/input-12, 64] [/input-8, 162] [/input-8, 993] [/input-8, 162] [/input, 436] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08917617797851562
10 lb beta sum: 0.09089706093072891, worst -0.08658865094184875
Time: prepare 0.0081    bound 0.1503    transfer 0.0021    finalize 0.0021    func 0.1649    
Accumulated time: func 1.5228    prepare 0.0906    bound 1.3895    transfer 0.0123    finalize 0.0203    
all_split False
======================Cut inference begins======================
max lb tensor(0.12054308) min lb tensor(-0.08657770)
Number of Verified Splits: 138 of 356
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 6
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.027931690216064453 
BICCOS Cumulative time: 0.5108344554901123
Preprocessing time: 0.010524749755859375 Inference time: 0.013936996459960938 Add cuts time: 0.0024385452270507812 Cut analysis time: 0.0010313987731933594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08658 (11), -0.08441 (11), -0.07993 (11), -0.07944 (11), -0.07837 (11), -0.07768 (11), -0.07613 (11), -0.07211 (11), -0.07157 (11), -0.07106 (11), -0.06926 (11), -0.06530 (11), -0.06525 (11), -0.06501 (11), -0.06405 (11), -0.06369 (11), -0.06315 (11), -0.06295 (11), -0.06210 (11), -0.06192 (11), 
Length of domains: 218
Time: pickout 0.0173    decision 0.0209    set_bounds 0.0157    solve 0.1650    add 0.0412    
Accumulated time: pickout 0.0436    decision 0.6612    set_bounds 0.1499    solve 1.3275    add 1.0444    
Current (lb-rhs): -0.08657769858837128
809 domains visited
Cumulative time: 4.085463047027588

BaB round 5
batch: 218
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 162] [/input-8, 1453] [/input-8, 1453] [/input-8, 1461] [/input-12, 64] [/input-8, 162] [/input-8, 993] [/input-8, 1453] [/input-8, 162] [/input-12, 64] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0865781307220459
10 lb beta sum: 0.027988649904727936, worst -0.0865710973739624
Time: prepare 0.0098    bound 0.1530    transfer 0.0021    finalize 0.0025    func 0.1702    
Accumulated time: func 1.6930    prepare 0.1005    bound 1.5425    transfer 0.0144    finalize 0.0228    
all_split False
======================Cut inference begins======================
max lb tensor(0.08543481) min lb tensor(-0.08656907)
Number of Verified Splits: 105 of 436
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 35.
#cuts 1-3: 6
#cuts 4-6: 27
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.029950618743896484 
BICCOS Cumulative time: 0.5407850742340088
Preprocessing time: 0.01282358169555664 Inference time: 0.011546134948730469 Add cuts time: 0.003997325897216797 Cut analysis time: 0.0015835762023925781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08657 (12), -0.08440 (12), -0.07992 (12), -0.07835 (12), -0.07767 (12), -0.07685 (12), -0.07611 (12), -0.07404 (12), -0.07157 (12), -0.06926 (12), -0.06924 (12), -0.06853 (12), -0.06672 (12), -0.06557 (12), -0.06521 (12), -0.06506 (12), -0.06372 (12), -0.06305 (12), -0.06278 (12), -0.06256 (12), 
Length of domains: 331
Time: pickout 0.0050    decision 0.0232    set_bounds 0.0194    solve 0.1703    add 0.0032    
Accumulated time: pickout 0.0486    decision 0.6844    set_bounds 0.1693    solve 1.4978    add 1.0475    
Current (lb-rhs): -0.08656907081604004
1140 domains visited
Cumulative time: 4.337608814239502

BaB round 6
batch: 331
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1058] [/input-8, 1329] [/input, 436] [/input-8, 1453] [/input-8, 1265] [/input-8, 1058] [/input-8, 1453] [/input-8, 1265] [/input-8, 162] [/input-8, 1329] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08437395095825195
10 lb beta sum: 0.00773954950273037, worst -0.08433473110198975
Time: prepare 0.0149    bound 0.1535    transfer 0.0042    finalize 0.0035    func 0.1813    
Accumulated time: func 1.8743    prepare 0.1156    bound 1.6960    transfer 0.0186    finalize 0.0262    
all_split False
======================Cut inference begins======================
max lb tensor(0.02427602) min lb tensor(-0.08431435)
Number of Verified Splits: 122 of 662
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 41.
#cuts 1-3: 8
#cuts 4-6: 29
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.03883695602416992 
BICCOS Cumulative time: 0.5796220302581787
Preprocessing time: 0.019140958786010742 Inference time: 0.01416468620300293 Add cuts time: 0.003847837448120117 Cut analysis time: 0.0016834735870361328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08431 (13), -0.08190 (13), -0.07811 (13), -0.07767 (13), -0.07689 (13), -0.07593 (13), -0.07574 (13), -0.07517 (13), -0.07328 (13), -0.07265 (13), -0.07144 (13), -0.07084 (13), -0.07015 (13), -0.06984 (13), -0.06956 (13), -0.06917 (13), -0.06808 (13), -0.06735 (13), -0.06644 (13), -0.06544 (13), 
Length of domains: 540
Time: pickout 0.0058    decision 0.0316    set_bounds 0.0301    solve 0.1814    add 0.0046    
Accumulated time: pickout 0.0544    decision 0.7160    set_bounds 0.1994    solve 1.6792    add 1.0521    
Current (lb-rhs): -0.08431434631347656
1680 domains visited
Cumulative time: 4.631333351135254

BaB round 7
batch: 540
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1329] [/input, 436] [/input-8, 1329] [/input-8, 1467] [/input-8, 1506] [/input-8, 1329] [/input-8, 1467] [/input-8, 1329] [/input-8, 162] [/input, 436] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08217108249664307
10 lb beta sum: 0.01146621722728014, worst -0.0820763111114502
Time: prepare 0.0247    bound 0.1607    transfer 0.0053    finalize 0.0065    func 0.2044    
Accumulated time: func 2.0786    prepare 0.1406    bound 1.8567    transfer 0.0239    finalize 0.0327    
all_split False
======================Cut inference begins======================
max lb tensor(0.00871062) min lb tensor(-0.08206022)
Number of Verified Splits: 129 of 1080
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 8
#cuts 4-6: 37
#cuts 7-9: 11
#cuts >= 20: 0
BICCOS time: 0.056642770767211914 
BICCOS Cumulative time: 0.6362648010253906
Preprocessing time: 0.03335070610046387 Inference time: 0.0160367488861084 Add cuts time: 0.004986763000488281 Cut analysis time: 0.002268552780151367
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08206 (14), -0.07964 (14), -0.07581 (14), -0.07535 (14), -0.07530 (14), -0.07458 (14), -0.07431 (14), -0.07371 (14), -0.07288 (14), -0.07284 (14), -0.07159 (14), -0.07126 (14), -0.07107 (14), -0.06913 (14), -0.06905 (14), -0.06902 (14), -0.06851 (14), -0.06851 (14), -0.06778 (14), -0.06776 (14), 
Length of domains: 951
Time: pickout 0.0074    decision 0.0395    set_bounds 0.0435    solve 0.2047    add 0.0051    
Accumulated time: pickout 0.0618    decision 0.7555    set_bounds 0.2429    solve 1.8840    add 1.0572    
Current (lb-rhs): -0.08206021785736084
2631 domains visited
Cumulative time: 4.990057706832886

BaB round 8
batch: 951
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1506] [/input-8, 993] [/input, 436] [/input, 2748] [/input-8, 1329] [/input, 436] [/input-8, 1453] [/input-8, 598] [/input-8, 598] [/input-8, 993] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08081281185150146
10 lb beta sum: 0.005063320975750685, worst -0.0808185338973999
Time: prepare 0.0467    bound 0.2194    transfer 0.0049    finalize 0.0092    func 0.2937    
Accumulated time: func 2.3723    prepare 0.1875    bound 2.0761    transfer 0.0289    finalize 0.0420    
all_split False
======================Cut inference begins======================
max lb tensor(0.01363683) min lb tensor(-0.08079553)
Number of Verified Splits: 307 of 1902
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 69.
#cuts 1-3: 10
#cuts 4-6: 40
#cuts 7-9: 19
#cuts >= 20: 0
BICCOS time: 0.10982632637023926 
BICCOS Cumulative time: 0.7460911273956299
Preprocessing time: 0.05906510353088379 Inference time: 0.0380096435546875 Add cuts time: 0.009777307510375977 Cut analysis time: 0.002974271774291992
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08080 (15), -0.07837 (15), -0.07742 (15), -0.07499 (15), -0.07454 (15), -0.07332 (15), -0.07330 (15), -0.07326 (15), -0.07264 (15), -0.07246 (15), -0.07244 (15), -0.07158 (15), -0.07114 (15), -0.07091 (15), -0.07076 (15), -0.07021 (15), -0.06987 (15), -0.06979 (15), -0.06977 (15), -0.06942 (15), 
Length of domains: 1595
Time: pickout 0.0171    decision 0.2384    set_bounds 0.0766    solve 0.2941    add 0.0525    
Accumulated time: pickout 0.0789    decision 0.9939    set_bounds 0.3195    solve 2.1781    add 1.1098    
Current (lb-rhs): -0.0807955265045166
4226 domains visited
Cumulative time: 5.782639980316162

BaB round 9
batch: 1595
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 598] [/input-8, 479] [/input-8, 993] [/input-8, 1453] [/input-8, 598] [/input-8, 993] [/input, 2748] [/input-8, 479] [/input-8, 993] [/input-8, 1453] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07737934589385986
10 lb beta sum: 0.011918660253286362, worst -0.07738029956817627
Time: prepare 0.0815    bound 0.3195    transfer 0.0088    finalize 0.0170    func 0.4480    
Accumulated time: func 2.8203    prepare 0.2692    bound 2.3957    transfer 0.0377    finalize 0.0590    
all_split False
======================Cut inference begins======================
max lb tensor(0.01397708) min lb tensor(-0.07737041)
Number of Verified Splits: 420 of 3190
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 87.
#cuts 1-3: 10
#cuts 4-6: 40
#cuts 7-9: 37
#cuts >= 20: 0
BICCOS time: 0.1808316707611084 
BICCOS Cumulative time: 0.9269227981567383
Preprocessing time: 0.1085660457611084 Inference time: 0.05402994155883789 Add cuts time: 0.014332294464111328 Cut analysis time: 0.0039033889770507812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07737 (16), -0.07693 (16), -0.07495 (16), -0.07451 (16), -0.07385 (16), -0.07372 (16), -0.07142 (16), -0.07130 (16), -0.07108 (16), -0.07064 (16), -0.07043 (16), -0.06991 (16), -0.06985 (16), -0.06982 (16), -0.06940 (16), -0.06940 (16), -0.06926 (16), -0.06914 (16), -0.06902 (16), -0.06892 (16), 
Length of domains: 2770
Time: pickout 0.0233    decision 0.0959    set_bounds 0.1299    solve 0.4487    add 0.0203    
Accumulated time: pickout 0.1022    decision 1.0898    set_bounds 0.4494    solve 2.6268    add 1.1301    
Current (lb-rhs): -0.07737040519714355
6996 domains visited
Cumulative time: 6.688021183013916

BaB round 10
batch: 2770
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 436] [/input-8, 1009] [/input-8, 1009] [/input, 436] [/input, 2748] [/input-8, 1009] [/input, 2748] [/input-8, 1009] [/input-8, 1009] [/input-8, 979] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07543349266052246
10 lb beta sum: 0.00978279858827591, worst -0.07541656494140625
Time: prepare 0.1429    bound 0.5066    transfer 0.0221    finalize 0.0319    func 0.7395    
Accumulated time: func 3.5598    prepare 0.4124    bound 2.9023    transfer 0.0598    finalize 0.0908    
all_split False
======================Cut inference begins======================
max lb tensor(0.01774359) min lb tensor(-0.07540488)
Number of Verified Splits: 714 of 5540
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 131.
#cuts 1-3: 11
#cuts 4-6: 71
#cuts 7-9: 48
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.31104183197021484 
BICCOS Cumulative time: 1.2379646301269531
Preprocessing time: 0.17563080787658691 Inference time: 0.0986032485961914 Add cuts time: 0.03089594841003418 Cut analysis time: 0.005911827087402344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07540 (17), -0.07497 (17), -0.07278 (17), -0.07233 (17), -0.07203 (17), -0.07191 (17), -0.07076 (17), -0.07032 (17), -0.06925 (17), -0.06912 (17), -0.06907 (17), -0.06863 (17), -0.06856 (17), -0.06810 (17), -0.06804 (17), -0.06798 (17), -0.06771 (17), -0.06763 (17), -0.06732 (17), -0.06726 (17), 
Length of domains: 4826
Time: pickout 0.0408    decision 0.3260    set_bounds 0.2413    solve 0.7411    add 0.0403    
Accumulated time: pickout 0.1430    decision 1.4158    set_bounds 0.6907    solve 3.3679    add 1.1704    
Current (lb-rhs): -0.07540488243103027
11822 domains visited
Cumulative time: 8.40020203590393

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1265] [/input-8, 93] [/input-8, 479] [/input-8, 993] [/input-8, 1009] [/input-8, 479] [/input-8, 93] [/input-8, 479] [/input-8, 598] [/input-8, 993] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07285726070404053
10 lb beta sum: 0.008768713101744652, worst -0.07286977767944336
Time: prepare 0.2210    bound 0.7350    transfer 0.0143    finalize 0.0510    func 1.0755    
Accumulated time: func 4.6353    prepare 0.6338    bound 3.6373    transfer 0.0741    finalize 0.1419    
all_split False
======================Cut inference begins======================
max lb tensor(0.13998508) min lb tensor(-0.07285392)
Number of Verified Splits: 1357 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 179.
#cuts 1-3: 13
#cuts 4-6: 90
#cuts 7-9: 72
#cuts 10-12: 4
#cuts >= 20: 0
BICCOS time: 0.730276346206665 
BICCOS Cumulative time: 1.9682409763336182
Preprocessing time: 0.2630484104156494 Inference time: 0.40045595169067383 Add cuts time: 0.058751821517944336 Cut analysis time: 0.008020162582397461
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07285 (18), -0.07241 (18), -0.07221 (18), -0.07176 (18), -0.07082 (18), -0.07038 (18), -0.06947 (18), -0.06936 (18), -0.06882 (18), -0.06881 (18), -0.06870 (18), -0.06837 (18), -0.06742 (18), -0.06731 (18), -0.06721 (17), -0.06711 (18), -0.06667 (18), -0.06582 (18), -0.06575 (18), -0.06573 (18), 
Length of domains: 7565
Time: pickout 0.0664    decision 0.4308    set_bounds 0.3646    solve 1.0774    add 0.0815    
Accumulated time: pickout 0.2094    decision 1.8466    set_bounds 1.0553    solve 4.4453    add 1.2519    
Current (lb-rhs): -0.0728539228439331
18657 domains visited
current_vram/total_varm: 11.1GB/99.9GB, batch_size increase to 8192
Cumulative time: 11.171727180480957

BaB round 12
batch: 7565
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 479] [/input-8, 598] [/input-8, 479] [/input, 436] [/input, 455] [/input-8, 979] [/input, 2446] [/input, 455] [/input-8, 1518] [/input, 2446] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2793409824371338
10 lb beta sum: 0.010603598318994045, worst -0.07160508632659912
Time: prepare 0.4242    bound 1.3327    transfer 0.0773    finalize 0.0929    func 2.0268    
Accumulated time: func 6.6620    prepare 1.0583    bound 4.9700    transfer 0.1515    finalize 0.2348    
all_split False
======================Cut inference begins======================
max lb tensor(0.17884755) min lb tensor(-0.07159531)
Number of Verified Splits: 3003 of 15130
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 288.
#cuts 1-3: 5
#cuts 4-6: 119
#cuts 7-9: 161
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 1.3922533988952637 
BICCOS Cumulative time: 3.360494375228882
Preprocessing time: 0.4915482997894287 Inference time: 0.733529806137085 Add cuts time: 0.15313720703125 Cut analysis time: 0.0140380859375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07160 (19), -0.07115 (19), -0.07095 (19), -0.07051 (19), -0.06827 (19), -0.06823 (19), -0.06811 (19), -0.06783 (19), -0.06762 (19), -0.06758 (19), -0.06745 (19), -0.06718 (19), -0.06625 (19), -0.06581 (19), -0.06560 (19), -0.06540 (18), -0.06516 (19), -0.06487 (19), -0.06476 (19), -0.06453 (19), 
Length of domains: 12127
Time: pickout 0.1467    decision 0.4161    set_bounds 0.9188    solve 2.0301    add 0.1715    
Accumulated time: pickout 0.3561    decision 2.2627    set_bounds 1.9742    solve 6.4755    add 1.4234    
Current (lb-rhs): -0.07159531116485596
30784 domains visited
Cumulative time: 16.290380001068115

BaB round 13
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1009] [/input, 455] [/input-8, 598] [/input-8, 1265] [/input-8, 1009] [/input-8, 1466] [/input-8, 479] [/input-8, 1506] [/input-8, 1329] [/input-8, 479] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06967532634735107
10 lb beta sum: 0.02158285304903984, worst -0.06968367099761963
Time: prepare 0.4561    bound 1.5518    transfer 0.0957    finalize 0.1132    func 2.3256    
Accumulated time: func 8.9876    prepare 1.5148    bound 6.5218    transfer 0.2472    finalize 0.3479    
all_split False
======================Cut inference begins======================
max lb tensor(0.29194480) min lb tensor(-0.06967533)
Number of Verified Splits: 2744 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 377.
#cuts 1-3: 6
#cuts 4-6: 148
#cuts 7-9: 216
#cuts 10-12: 7
#cuts >= 20: 0
BICCOS time: 1.5518109798431396 
BICCOS Cumulative time: 4.9123053550720215
Preprocessing time: 0.5410759449005127 Inference time: 0.7405667304992676 Add cuts time: 0.25165414810180664 Cut analysis time: 0.018514156341552734
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06968 (20), -0.06924 (20), -0.06903 (20), -0.06859 (20), -0.06795 (20), -0.06751 (20), -0.06730 (20), -0.06702 (20), -0.06686 (20), -0.06658 (20), -0.06637 (20), -0.06630 (20), -0.06619 (20), -0.06593 (20), -0.06564 (20), -0.06560 (19), -0.06553 (20), -0.06516 (19), -0.06500 (20), -0.06457 (20), 
Length of domains: 17575
Time: pickout 0.1399    decision 0.4506    set_bounds 1.0210    solve 2.3290    add 0.0810    
Accumulated time: pickout 0.4960    decision 2.7133    set_bounds 2.9952    solve 8.8045    add 1.5043    
Current (lb-rhs): -0.06967532634735107
44424 domains visited
current_vram/total_varm: 28.1GB/99.9GB, batch_size increase to 16384
Cumulative time: 21.908949851989746

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 479] [/input, 455] [/input-8, 598] [/input-8, 479] [/input-8, 993] [/input-8, 479] [/input, 2430] [/input-8, 93] [/input-8, 1017] [/input-8, 1017] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06840872764587402
10 lb beta sum: 0.07681736350059509, worst -0.06839430332183838
Time: prepare 0.9095    bound 3.1968    transfer 0.1185    finalize 0.5229    func 4.9597    
Accumulated time: func 13.9473    prepare 2.4247    bound 9.7185    transfer 0.3657    finalize 0.8708    
all_split False
======================Cut inference begins======================
max lb tensor(0.40235239) min lb tensor(-0.06837142)
Number of Verified Splits: 10433 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 257.
#cuts 1-3: 8
#cuts 4-6: 85
#cuts 7-9: 157
#cuts 10-12: 7
#cuts >= 20: 0
BICCOS time: 3.5818605422973633 
BICCOS Cumulative time: 8.494165897369385
Preprocessing time: 1.4669103622436523 Inference time: 1.6503269672393799 Add cuts time: 0.45157647132873535 Cut analysis time: 0.013046741485595703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06837 (21), -0.06793 (21), -0.06742 (21), -0.06698 (21), -0.06663 (21), -0.06619 (21), -0.06569 (21), -0.06525 (21), -0.06499 (21), -0.06498 (21), -0.06487 (21), -0.06454 (21), -0.06405 (21), -0.06404 (21), -0.06392 (21), -0.06361 (21), -0.06326 (21), -0.06325 (21), -0.06313 (21), -0.06309 (20), 
Length of domains: 23526
Time: pickout 0.2631    decision 1.6444    set_bounds 1.8558    solve 4.9659    add 0.0931    
Accumulated time: pickout 0.7591    decision 4.3578    set_bounds 4.8509    solve 13.7704    add 1.5974    
Current (lb-rhs): -0.06837141513824463
66759 domains visited
current_vram/total_varm: 42.1GB/99.9GB, batch_size increase to 32768
Cumulative time: 34.442997217178345

BaB round 15
batch: 23526
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1017] [/input-8, 1467] [/input, 2430] [/input-8, 1329] [/input, 2430] [/input-8, 93] [/input-8, 479] [/input, 2748] [/input-8, 479] [/input-8, 479] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0666358470916748
10 lb beta sum: 0.2123691737651825, worst -0.06497776508331299
Time: prepare 1.2746    bound 4.2474    transfer 0.2890    finalize 0.7321    func 6.8510    
Accumulated time: func 20.7983    prepare 3.6997    bound 13.9659    transfer 0.6546    finalize 1.6029    
all_split False
======================Cut inference begins======================
max lb tensor(0.66391289) min lb tensor(-0.06497264)
Number of Verified Splits: 23480 of 47052
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 329.
#cuts 1-3: 8
#cuts 4-6: 128
#cuts 7-9: 152
#cuts 10-12: 41
#cuts >= 20: 0
BICCOS time: 7.294163703918457 
BICCOS Cumulative time: 15.788329601287842
Preprocessing time: 2.0957953929901123 Inference time: 3.782917022705078 Add cuts time: 1.39859938621521 Cut analysis time: 0.01685190200805664
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06497 (22), -0.06453 (22), -0.06444 (22), -0.06400 (22), -0.06324 (22), -0.06279 (22), -0.06270 (22), -0.06227 (22), -0.06227 (22), -0.06202 (22), -0.06182 (22), -0.06158 (22), -0.06158 (22), -0.06147 (22), -0.06131 (22), -0.06104 (22), -0.06092 (22), -0.06084 (22), -0.06077 (22), -0.06053 (22), 
Length of domains: 23572
Time: pickout 0.4999    decision 2.4312    set_bounds 2.6712    solve 6.8616    add 0.1252    
Accumulated time: pickout 1.2590    decision 6.7890    set_bounds 7.5221    solve 20.6319    add 1.7226    
Current (lb-rhs): -0.0649726390838623
90331 domains visited
Cumulative time: 54.61081147193909

BaB round 16
batch: 23572
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1265] [/input, 2430] [/input, 2430] [/input, 455] [/input-8, 969] [/input-8, 1017] [/input, 2430] [/input, 2430] [/input-8, 969] [/input, 455] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06567907333374023
10 lb beta sum: 0.18622058629989624, worst -0.06453454494476318
Time: prepare 1.3274    bound 4.4351    transfer 0.2949    finalize 0.8563    func 7.2240    
Accumulated time: func 28.0222    prepare 5.0275    bound 18.4010    transfer 0.9495    finalize 2.4591    
all_split False
======================Cut inference begins======================
max lb tensor(0.43746662) min lb tensor(-0.06452787)
Number of Verified Splits: 13935 of 47144
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 296.
#cuts 1-3: 11
#cuts 4-6: 150
#cuts 7-9: 123
#cuts 10-12: 12
#cuts >= 20: 0
BICCOS time: 5.299454927444458 
BICCOS Cumulative time: 21.0877845287323
Preprocessing time: 1.7110803127288818 Inference time: 3.040334463119507 Add cuts time: 0.5342278480529785 Cut analysis time: 0.01381230354309082
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06453 (23), -0.06443 (23), -0.06398 (23), -0.06397 (23), -0.06269 (23), -0.06227 (23), -0.06225 (23), -0.06224 (23), -0.06200 (23), -0.06182 (23), -0.06177 (23), -0.06157 (23), -0.06157 (23), -0.06146 (23), -0.06130 (23), -0.06103 (23), -0.06092 (23), -0.06083 (23), -0.06076 (23), -0.06053 (23), 
Length of domains: 33209
Time: pickout 0.4265    decision 2.3774    set_bounds 2.8054    solve 7.2346    add 0.2601    
Accumulated time: pickout 1.6855    decision 9.1664    set_bounds 10.3276    solve 27.8665    add 1.9827    
Current (lb-rhs): -0.06452786922454834
123540 domains visited
Cumulative time: 73.22150802612305

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1329] [/input-8, 1017] [/input-8, 969] [/input-8, 969] [/input, 2430] [/input-8, 1009] [/input-8, 1017] [/input-8, 1017] [/input, 2430] [/input-8, 969] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06397473812103271
10 lb beta sum: 0.21535973250865936, worst -0.06397521495819092
Time: prepare 1.8613    bound 11.1531    transfer 0.4806    finalize 1.1577    func 15.0838    
Accumulated time: func 43.1060    prepare 6.8893    bound 29.5541    transfer 1.4301    finalize 3.6169    
all_split False
======================Cut inference begins======================
max lb tensor(0.78700399) min lb tensor(-0.06396675)
Number of Verified Splits: 39857 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 12.144857168197632 
BICCOS Cumulative time: 33.23264169692993
Preprocessing time: 3.050126314163208 Inference time: 7.150936126708984 Add cuts time: 1.943188190460205 Cut analysis time: 0.000606536865234375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06397 (24), -0.06350 (24), -0.06344 (24), -0.06296 (24), -0.06224 (24), -0.06177 (24), -0.06170 (24), -0.06126 (24), -0.06123 (24), -0.06100 (24), -0.06079 (24), -0.06060 (24), -0.06054 (24), -0.06045 (24), -0.06006 (24), -0.05991 (24), -0.05953 (24), -0.05928 (24), -0.05906 (24), -0.05886 (24), 
Length of domains: 26120
Time: pickout 0.6068    decision 3.4521    set_bounds 3.8773    solve 15.0984    add 0.2653    
Accumulated time: pickout 2.2923    decision 12.6185    set_bounds 14.2049    solve 42.9649    add 2.2481    
Current (lb-rhs): -0.06396675109863281
149219 domains visited
Cumulative time: 109.1830313205719

BaB round 18
batch: 26120
splitting decisions: 
split level 0: [/input-8, 486] [/input-8, 1017] [/input-8, 1058] [/input, 1642] [/input, 455] [/input, 1642] [/input, 455] [/input, 2273] [/input, 2273] [/input-8, 1017] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.062209248542785645
10 lb beta sum: 0.19743143022060394, worst -0.01025894284248352
Time: prepare 1.5079    bound 2.1892    transfer 0.2960    finalize 0.3799    func 5.3520    
Accumulated time: func 48.4580    prepare 8.3976    bound 31.7433    transfer 1.7261    finalize 3.9968    
all_split False
======================Cut inference begins======================
max lb tensor(0.34373367) min lb tensor(4.76837158e-07)
Number of Verified Splits: 52240 of 52240
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 1.918062686920166 
BICCOS Cumulative time: 35.1507043838501
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.5053    decision 2.6514    set_bounds 3.2310    solve 5.3637    add 0.0288    
Accumulated time: pickout 2.7976    decision 15.2699    set_bounds 17.4359    solve 48.3286    add 2.2769    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
149219 domains visited
Cumulative time: 123.43700003623962


Properties batch 7, size 1
Remaining timeout: 74.94291520118713
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 74.94275736808777
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 125.0573 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 117, vnnlib ID: 117 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.05410433,  -7.98528099,  -7.76803017,  -8.62869644,  -7.58290386,
          -9.83789062,  -8.41322899, -10.12581921,  -1.82107425,  -8.20621872]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [462]; unstable size 462; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 196, 1, 462] with unstable size 195 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 462] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 462] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [195]; unstable size 195; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 195] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 195] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.12438536, 5.28402185, 4.66859245, 5.64474773, 4.65305614, 6.76825285,
         5.48563194, 7.03934669, 5.25850201]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0374 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 118, vnnlib ID: 118 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.12188244,  -7.11672592, -10.05889606, -10.35688305, -11.79731369,
          -9.88283920, -13.23313427,  -9.69955254,  -9.69626141,  -8.79122162]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [485]; unstable size 485; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 133, 1, 485] with unstable size 132 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 485] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 485] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [132]; unstable size 132; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 132] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 132] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.78854370, 1.30756712, 1.88600969, 3.26214123, 1.25751114, 4.64157391,
         1.15222800, 1.10766864, 0.93016052]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0759 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 119, vnnlib ID: 119 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.32807446, -12.10395241,  -6.98160744,  -7.09187889,  -7.17572021,
          -7.24349356,  -7.85012865,  -8.02880383, -10.09511280, -10.98221016]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [818]; unstable size 818; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 292, 1, 818] with unstable size 291 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 818] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 818] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [291]; unstable size 291; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 291] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 291] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.75854349,  3.26663303, -1.20437777, -1.10650206, -0.29332364,
         -0.34117436, -0.69933540,  1.05337358,  1.86989903]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.32807446, -12.10395241,  -6.98160744,  -7.09187889,  -7.17572021,
          -7.24349356,  -7.85012865,  -8.02880383, -10.09511280, -10.98221016]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.32807541, -12.10395432,  -6.98160744,  -7.09188032,  -7.17572117,
           -7.24349451,  -7.85012913,  -8.02880478, -10.09511280, -10.98221016],
         [ -9.32807541, -12.10395432,  -6.98160744,  -7.09188032,  -7.17572117,
           -7.24349451,  -7.85012913,  -8.02880478, -10.09511280, -10.98221016]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.11027288,  0.08384085,  0.15161419,  0.75824881,  0.93692446]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.11587298, -1.08412695, -0.89365077,  ..., -1.14761901,
            -1.21111107, -1.29047608],
           [-1.05238092, -1.00476182, -0.84603173,  ..., -0.51269841,
            -0.56031746, -0.63968253],
           [-0.41746020, -0.33809513, -0.29047608,  ...,  0.01111121,
            -0.06825387, -0.19523799],
           ...,
           [-0.48095238, -0.49682540, -0.49682540,  ..., -0.68730158,
            -0.71904761, -0.78253967],
           [-0.46507925, -0.48095238, -0.46507925,  ..., -0.60793650,
            -0.63968253, -0.71904761],
           [-0.38571417, -0.36984116, -0.35396814,  ..., -0.46507925,
            -0.49682540, -0.56031746]],

          [[-0.90177131, -0.93397743, -0.72463763,  ..., -1.17552328,
            -1.25603855, -1.36875999],
           [-0.88566822, -0.88566822, -0.67632848,  ..., -0.57971013,
            -0.64412236, -0.75684375],
           [-0.37037024, -0.28985494, -0.17713353,  ..., -0.09661824,
            -0.19323659, -0.35426718],
           ...,
           [-0.59581316, -0.61191624, -0.61191624,  ..., -0.98228657,
            -0.98228657, -0.98228657],
           [-0.59581316, -0.61191624, -0.59581316,  ..., -0.99838966,
            -0.95008045, -1.03059578],
           [-0.59581316, -0.57971013, -0.54750401,  ..., -0.70853460,
            -0.67632848, -0.75684375]],

          [[-0.49325335, -0.52323836, -0.28335828,  ..., -0.86806595,
            -0.95802099, -1.07796109],
           [-0.53823084, -0.52323836, -0.28335828,  ..., -0.34332830,
            -0.43328333, -0.55322337],
           [-0.14842562, -0.05847061,  0.10644694,  ...,  0.04647692,
            -0.05847061, -0.20839565],
           ...,
           [-0.55322337, -0.56821585, -0.56821585,  ..., -0.92803597,
            -0.91304344, -0.91304344],
           [-0.55322337, -0.56821585, -0.55322337,  ..., -0.86806595,
            -0.85307342, -0.92803597],
           [-0.53823084, -0.50824583, -0.49325335,  ..., -0.58320838,
            -0.58320838, -0.67316341]]],


         [[[-1.11587298, -1.08412695, -0.89365077,  ..., -1.14761901,
            -1.21111107, -1.29047608],
           [-1.05238092, -1.00476182, -0.84603173,  ..., -0.51269841,
            -0.56031746, -0.63968253],
           [-0.41746020, -0.33809513, -0.29047608,  ...,  0.01111121,
            -0.06825387, -0.19523799],
           ...,
           [-0.48095238, -0.49682540, -0.49682540,  ..., -0.68730158,
            -0.71904761, -0.78253967],
           [-0.46507925, -0.48095238, -0.46507925,  ..., -0.60793650,
            -0.63968253, -0.71904761],
           [-0.38571417, -0.36984116, -0.35396814,  ..., -0.46507925,
            -0.49682540, -0.56031746]],

          [[-0.90177131, -0.93397743, -0.72463763,  ..., -1.17552328,
            -1.25603855, -1.36875999],
           [-0.88566822, -0.88566822, -0.67632848,  ..., -0.57971013,
            -0.64412236, -0.75684375],
           [-0.37037024, -0.28985494, -0.17713353,  ..., -0.09661824,
            -0.19323659, -0.35426718],
           ...,
           [-0.59581316, -0.61191624, -0.61191624,  ..., -0.98228657,
            -0.98228657, -0.98228657],
           [-0.59581316, -0.61191624, -0.59581316,  ..., -0.99838966,
            -0.95008045, -1.03059578],
           [-0.59581316, -0.57971013, -0.54750401,  ..., -0.70853460,
            -0.67632848, -0.75684375]],

          [[-0.49325335, -0.52323836, -0.28335828,  ..., -0.86806595,
            -0.95802099, -1.07796109],
           [-0.53823084, -0.52323836, -0.28335828,  ..., -0.34332830,
            -0.43328333, -0.55322337],
           [-0.14842562, -0.05847061,  0.10644694,  ...,  0.04647692,
            -0.05847061, -0.20839565],
           ...,
           [-0.55322337, -0.56821585, -0.56821585,  ..., -0.92803597,
            -0.91304344, -0.91304344],
           [-0.55322337, -0.56821585, -0.55322337,  ..., -0.86806595,
            -0.85307342, -0.92803597],
           [-0.53823084, -0.50824583, -0.49325335,  ..., -0.58320838,
            -0.58320838, -0.67316341]]],


         [[[-1.11587298, -1.08412695, -0.89365077,  ..., -1.14761901,
            -1.21111107, -1.29047608],
           [-1.05238092, -1.00476182, -0.84603173,  ..., -0.51269841,
            -0.56031746, -0.63968253],
           [-0.41746020, -0.33809513, -0.29047608,  ...,  0.01111121,
            -0.06825387, -0.19523799],
           ...,
           [-0.48095238, -0.49682540, -0.49682540,  ..., -0.68730158,
            -0.71904761, -0.78253967],
           [-0.46507925, -0.48095238, -0.46507925,  ..., -0.60793650,
            -0.63968253, -0.71904761],
           [-0.38571417, -0.36984116, -0.35396814,  ..., -0.46507925,
            -0.49682540, -0.56031746]],

          [[-0.90177131, -0.93397743, -0.72463763,  ..., -1.17552328,
            -1.25603855, -1.36875999],
           [-0.88566822, -0.88566822, -0.67632848,  ..., -0.57971013,
            -0.64412236, -0.75684375],
           [-0.37037024, -0.28985494, -0.17713353,  ..., -0.09661824,
            -0.19323659, -0.35426718],
           ...,
           [-0.59581316, -0.61191624, -0.61191624,  ..., -0.98228657,
            -0.98228657, -0.98228657],
           [-0.59581316, -0.61191624, -0.59581316,  ..., -0.99838966,
            -0.95008045, -1.03059578],
           [-0.59581316, -0.57971013, -0.54750401,  ..., -0.70853460,
            -0.67632848, -0.75684375]],

          [[-0.49325335, -0.52323836, -0.28335828,  ..., -0.86806595,
            -0.95802099, -1.07796109],
           [-0.53823084, -0.52323836, -0.28335828,  ..., -0.34332830,
            -0.43328333, -0.55322337],
           [-0.14842562, -0.05847061,  0.10644694,  ...,  0.04647692,
            -0.05847061, -0.20839565],
           ...,
           [-0.55322337, -0.56821585, -0.56821585,  ..., -0.92803597,
            -0.91304344, -0.91304344],
           [-0.55322337, -0.56821585, -0.55322337,  ..., -0.86806595,
            -0.85307342, -0.92803597],
           [-0.53823084, -0.50824583, -0.49325335,  ..., -0.58320838,
            -0.58320838, -0.67316341]]],


         [[[-1.11587298, -1.08412695, -0.89365077,  ..., -1.14761901,
            -1.21111107, -1.29047608],
           [-1.05238092, -1.00476182, -0.84603173,  ..., -0.51269841,
            -0.56031746, -0.63968253],
           [-0.41746020, -0.33809513, -0.29047608,  ...,  0.01111121,
            -0.06825387, -0.19523799],
           ...,
           [-0.48095238, -0.49682540, -0.49682540,  ..., -0.68730158,
            -0.71904761, -0.78253967],
           [-0.46507925, -0.48095238, -0.46507925,  ..., -0.60793650,
            -0.63968253, -0.71904761],
           [-0.38571417, -0.36984116, -0.35396814,  ..., -0.46507925,
            -0.49682540, -0.56031746]],

          [[-0.90177131, -0.93397743, -0.72463763,  ..., -1.17552328,
            -1.25603855, -1.36875999],
           [-0.88566822, -0.88566822, -0.67632848,  ..., -0.57971013,
            -0.64412236, -0.75684375],
           [-0.37037024, -0.28985494, -0.17713353,  ..., -0.09661824,
            -0.19323659, -0.35426718],
           ...,
           [-0.59581316, -0.61191624, -0.61191624,  ..., -0.98228657,
            -0.98228657, -0.98228657],
           [-0.59581316, -0.61191624, -0.59581316,  ..., -0.99838966,
            -0.95008045, -1.03059578],
           [-0.59581316, -0.57971013, -0.54750401,  ..., -0.70853460,
            -0.67632848, -0.75684375]],

          [[-0.49325335, -0.52323836, -0.28335828,  ..., -0.86806595,
            -0.95802099, -1.07796109],
           [-0.53823084, -0.52323836, -0.28335828,  ..., -0.34332830,
            -0.43328333, -0.55322337],
           [-0.14842562, -0.05847061,  0.10644694,  ...,  0.04647692,
            -0.05847061, -0.20839565],
           ...,
           [-0.55322337, -0.56821585, -0.56821585,  ..., -0.92803597,
            -0.91304344, -0.91304344],
           [-0.55322337, -0.56821585, -0.55322337,  ..., -0.86806595,
            -0.85307342, -0.92803597],
           [-0.53823084, -0.50824583, -0.49325335,  ..., -0.58320838,
            -0.58320838, -0.67316341]]],


         [[[-1.11587298, -1.08412695, -0.89365077,  ..., -1.14761901,
            -1.21111107, -1.29047608],
           [-1.05238092, -1.00476182, -0.84603173,  ..., -0.51269841,
            -0.56031746, -0.63968253],
           [-0.41746020, -0.33809513, -0.29047608,  ...,  0.01111121,
            -0.06825387, -0.19523799],
           ...,
           [-0.48095238, -0.49682540, -0.49682540,  ..., -0.68730158,
            -0.71904761, -0.78253967],
           [-0.46507925, -0.48095238, -0.46507925,  ..., -0.60793650,
            -0.63968253, -0.71904761],
           [-0.38571417, -0.36984116, -0.35396814,  ..., -0.46507925,
            -0.49682540, -0.56031746]],

          [[-0.90177131, -0.93397743, -0.72463763,  ..., -1.17552328,
            -1.25603855, -1.36875999],
           [-0.88566822, -0.88566822, -0.67632848,  ..., -0.57971013,
            -0.64412236, -0.75684375],
           [-0.37037024, -0.28985494, -0.17713353,  ..., -0.09661824,
            -0.19323659, -0.35426718],
           ...,
           [-0.59581316, -0.61191624, -0.61191624,  ..., -0.98228657,
            -0.98228657, -0.98228657],
           [-0.59581316, -0.61191624, -0.59581316,  ..., -0.99838966,
            -0.95008045, -1.03059578],
           [-0.59581316, -0.57971013, -0.54750401,  ..., -0.70853460,
            -0.67632848, -0.75684375]],

          [[-0.49325335, -0.52323836, -0.28335828,  ..., -0.86806595,
            -0.95802099, -1.07796109],
           [-0.53823084, -0.52323836, -0.28335828,  ..., -0.34332830,
            -0.43328333, -0.55322337],
           [-0.14842562, -0.05847061,  0.10644694,  ...,  0.04647692,
            -0.05847061, -0.20839565],
           ...,
           [-0.55322337, -0.56821585, -0.56821585,  ..., -0.92803597,
            -0.91304344, -0.91304344],
           [-0.55322337, -0.56821585, -0.55322337,  ..., -0.86806595,
            -0.85307342, -0.92803597],
           [-0.53823084, -0.50824583, -0.49325335,  ..., -0.58320838,
            -0.58320838, -0.67316341]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0747 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 120, vnnlib ID: 120 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -3.83905172, -12.57908535,  -3.68583417,  -3.78964639,  -5.75812435,
          -4.08564281,  -7.30590010,  -4.61561012, -11.22108173, -10.78313065]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [686]; unstable size 686; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 99, 1, 686] with unstable size 98 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 6, 1, 686] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 686] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [98]; unstable size 98; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 6, 1, 98] with unstable size 5 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 98] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [5]; unstable size 5; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 5] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 7.90750694, -0.64292002, -0.82822919,  1.19824767, -0.54596633,
          2.64874268, -0.17078620,  6.71303511,  6.26933956]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -3.83905172, -12.57908535,  -3.68583417,  -3.78964639,  -5.75812435,
          -4.08564281,  -7.30590010,  -4.61561012, -11.22108173, -10.78313065]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -3.83905125, -12.57908630,  -3.68583441,  -3.78964591,  -5.75812483,
           -4.08564281,  -7.30589867,  -4.61561012, -11.22108078, -10.78313160],
         [ -3.83905125, -12.57908630,  -3.68583441,  -3.78964591,  -5.75812483,
           -4.08564281,  -7.30589867,  -4.61561012, -11.22108078, -10.78313160]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.15321684, -0.04940534,  0.24659157,  0.77655888]]],
       device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]],


         [[[1.51904786, 1.48730183, 1.48730183,  ..., 1.53492093,
            1.55079389, 1.56666696],
           [1.55079389, 1.53492093, 1.51904786,  ..., 1.58253992,
            1.61428595, 1.63015902],
           [1.58253992, 1.56666696, 1.56666696,  ..., 1.67777801,
            1.70952404, 1.72539711],
           ...,
           [1.51904786, 1.45555580, 1.45555580,  ..., 1.67777801,
            1.66190505, 1.66190505],
           [1.48730183, 1.42380977, 1.42380977,  ..., 1.69365108,
            1.66190505, 1.66190505],
           [1.50317490, 1.43968284, 1.43968284,  ..., 1.72539711,
            1.69365108, 1.67777801]],

          [[1.51368785, 1.48148179, 1.48148179,  ..., 1.51368785,
            1.51368785, 1.54589403],
           [1.54589403, 1.51368785, 1.51368785,  ..., 1.57810009,
            1.61030626, 1.62640929],
           [1.57810009, 1.56199706, 1.57810009,  ..., 1.72302771,
            1.73913074, 1.75523376],
           ...,
           [1.44927561, 1.38486338, 1.38486338,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.41706955, 1.35265732, 1.36876035,  ..., 1.72302771,
            1.72302771, 1.72302771],
           [1.43317258, 1.36876035, 1.38486338,  ..., 1.75523376,
            1.73913074, 1.73913074]],

          [[1.36581755, 1.33583248, 1.33583248,  ..., 1.36581755,
            1.36581755, 1.39580250],
           [1.39580250, 1.38081002, 1.36581755,  ..., 1.42578757,
            1.45577252, 1.47076499],
           [1.41079497, 1.41079497, 1.41079497,  ..., 1.54572761,
            1.56072009, 1.57571256],
           ...,
           [1.29085493, 1.23088503, 1.23088503,  ..., 1.54572761,
            1.56072009, 1.56072009],
           [1.26086998, 1.20089996, 1.20089996,  ..., 1.56072009,
            1.56072009, 1.56072009],
           [1.27586246, 1.21589243, 1.21589243,  ..., 1.57571256,
            1.57571256, 1.57571256]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0818 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 121, vnnlib ID: 121 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.86313248,  -8.44097900, -13.20821190, -13.39188290, -12.26532078,
         -13.55902863, -14.16451168, -12.10001564, -14.36103153, -11.35003471]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [533]; unstable size 533; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 226, 1, 533] with unstable size 225 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 533] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 533] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [225]; unstable size 225; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 225] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 225] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.58184433, 2.47265053, 2.70894527, 1.52923870, 2.67172718, 3.54394722,
         1.39660072, 3.88951111, 1.85305738]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0622 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 122, vnnlib ID: 122 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.28887367,  -8.90356731, -12.90353107, -13.19761372, -12.63090992,
         -13.74266148, -14.50664043, -13.25693512,  -8.36382961, -11.89731884]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [470]; unstable size 470; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 191, 1, 470] with unstable size 190 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 470] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 470] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [190]; unstable size 190; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 190] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 190] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.83597183,  1.88928556,  2.30730486,  1.75963211,  2.61177778,
          3.72314787,  2.18467140, -1.76713800,  1.99258900]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.28887367,  -8.90356731, -12.90353107, -13.19761372, -12.63090992,
         -13.74266148, -14.50664043, -13.25693512,  -8.36382961, -11.89731884]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.28887367,  -8.90356731, -12.90353107, -13.19761372, -12.63090992,
          -13.74266148, -14.50664043, -13.25693512,  -8.36382961, -11.89731884]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.53973770]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.17936504, -0.97301590, -0.90952379,  ..., -1.27460313,
            -1.46507931, -1.29047608],
           [-1.13174593, -1.05238092, -0.83015871,  ..., -1.56031740,
            -1.65555561, -1.41746020],
           [-1.19523799, -1.17936504, -1.03650784,  ..., -1.44920623,
            -1.65555561, -1.52857137],
           ...,
           [ 0.69365084,  0.70952386,  0.72539687,  ..., -1.38571417,
            -1.43333328, -1.44920623],
           [ 0.74126989,  0.75714290,  0.77301592,  ..., -1.35396814,
            -1.41746020, -1.44920623],
           [ 0.77301592,  0.75714290,  0.72539687,  ..., -1.33809519,
            -1.38571417, -1.40158725]],

          [[-1.25603855, -0.91787434, -0.70853460,  ..., -0.91787434,
            -1.11111104, -0.91787434],
           [-1.20772946, -1.03059578, -0.67632848,  ..., -1.25603855,
            -1.38486302, -1.09500802],
           [-1.27214170, -1.23993552, -0.98228657,  ..., -1.17552328,
            -1.38486302, -1.23993552],
           ...,
           [ 0.53140104,  0.54750413,  0.56360716,  ..., -1.27214170,
            -1.32045078, -1.33655393],
           [ 0.57971025,  0.59581327,  0.61191636,  ..., -1.23993552,
            -1.30434775, -1.32045078],
           [ 0.61191636,  0.59581327,  0.57971025,  ..., -1.22383249,
            -1.28824472, -1.28824472]],

          [[-1.28785622, -1.07796109, -1.01799107,  ..., -1.37781119,
            -1.51274371, -1.42278874],
           [-1.22788620, -1.15292358, -0.92803597,  ..., -1.52773619,
            -1.55772126, -1.43778121],
           [-1.27286363, -1.28785622, -1.10794616,  ..., -1.21289361,
            -1.34782624, -1.36281872],
           ...,
           [ 0.54122955,  0.55622208,  0.57121456,  ..., -0.86806595,
            -0.91304344, -0.92803597],
           [ 0.58620709,  0.60119957,  0.60119957,  ..., -0.83808094,
            -0.89805096, -0.92803597],
           [ 0.61619210,  0.60119957,  0.58620709,  ..., -0.82308841,
            -0.88305843, -0.89805096]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0488 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 123, vnnlib ID: 123 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-21.10229683, -25.38055038, -21.73574066, -24.28678703, -25.19532585,
         -24.57376480, -24.21175194, -26.78511238, -20.36679649, -26.62832260]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [535]; unstable size 535; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 289, 1, 535] with unstable size 288 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 535] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 535] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [288]; unstable size 288; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 288] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 288] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.20215011,  3.29560685, -0.48173213,  2.02197981,  2.71108103,
          2.06478977,  1.99369478,  3.83842325,  4.76781845]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-21.10229683, -25.38055038, -21.73574066, -24.28678703, -25.19532585,
         -24.57376480, -24.21175194, -26.78511238, -20.36679649, -26.62832260]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-19.90987015, -24.70122147, -20.82708359, -23.43597221, -24.32200050,
          -23.68591499, -23.38396645, -25.73447037, -20.12191963, -25.80022812],
         [-19.90987015, -24.70122147, -20.82708359, -23.43597221, -24.32200050,
          -23.68591499, -23.38396645, -25.73447037, -20.12191963, -25.80022812]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.21204948,  0.70516396]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0082 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0713 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 124, vnnlib ID: 124 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.82584620, -7.63018703, -7.73003864, -7.25304461, -6.31065321,
         -8.23791885, -6.43050718, -6.84701109, -9.17996407, -7.64501524]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [632]; unstable size 632; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 261, 1, 632] with unstable size 260 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 632] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 632] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [260]; unstable size 260; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 260] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 260] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.27221322, -1.34621942, -1.80932045, -2.15861130, -2.98624802,
         -1.27028847, -2.80886555, -2.57974672, -0.39991713]], device='cuda:0') None
Remain 9 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.82584620, -7.63018703, -7.73003864, -7.25304461, -6.31065321,
         -8.23791885, -6.43050718, -6.84701109, -9.17996407, -7.64501524]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.82584524, -7.63018608, -7.73003769, -7.25304365, -6.31065226,
          -8.23791599, -6.43050575, -6.84701014, -9.17996311, -7.64501333],
         [-7.82584524, -7.63018608, -7.73003769, -7.25304365, -6.31065226,
          -8.23791599, -6.43050575, -6.84701014, -9.17996311, -7.64501333]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.18083191, -0.01482725,  0.08502436, -0.39196968, -1.33436108,
           0.59290266, -1.21450758, -0.79800320,  1.53494978]]],
       device='cuda:0')
number of violation:  5
clean attack image tensor([[[[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         ...,


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]],


         [[[-0.08412688, -0.29047608, -0.92539680,  ...,  2.02698421,
             2.01111126,  2.02698421],
           [ 0.45555562, -0.27460307, -0.94126981,  ...,  2.04285717,
             2.04285717,  2.04285717],
           [-0.16349196, -0.92539680, -0.89365077,  ...,  2.04285717,
             2.03492069,  2.04285717],
           ...,
           [ 0.74126989,  0.55079371,  0.43968260,  ...,  1.02698421,
             1.05873048,  1.21746063],
           [ 0.74126989,  0.51904768,  0.45555562,  ...,  0.90000004,
             1.01111114,  1.07460344],
           [ 0.66190481,  0.67777783,  0.66190481,  ...,  0.82063496,
             0.82063496,  0.97936511]],

          [[ 0.03220624, -0.09661824, -0.74074072,  ...,  2.09339786,
             2.07729483,  2.09339786],
           [ 0.56360716, -0.14492741, -0.80515295,  ...,  2.10950065,
             2.10950065,  2.10950065],
           [-0.04830906, -0.78904986, -0.74074072,  ...,  2.10950065,
             2.10144925,  2.10950065],
           ...,
           [ 0.35426742,  0.12882459,  0.04830930,  ...,  0.69243163,
             0.72463775,  0.91787446],
           [ 0.32206130,  0.12882459,  0.08051541,  ...,  0.54750413,
             0.66022551,  0.74074084],
           [ 0.27375212,  0.27375212,  0.20933989,  ...,  0.46698883,
             0.48309189,  0.66022551]],

          [[ 0.06146942, -0.11844061, -0.80809593,  ...,  2.08545780,
             2.08545780,  2.08545780],
           [ 0.61619210, -0.16341813, -0.86806595,  ...,  2.10045004,
             2.10045004,  2.10045004],
           [-0.02848560, -0.79310340, -0.82308841,  ...,  2.10045004,
             2.08545780,  2.10045004],
           ...,
           [ 0.09145443, -0.08845562, -0.13343313,  ...,  0.52623707,
             0.55622208,  0.67616212],
           [ 0.07646193, -0.10344811, -0.11844061,  ...,  0.37631202,
             0.49625200,  0.51124454],
           [ 0.03148442,  0.01649191, -0.04347810,  ...,  0.28635699,
             0.27136448,  0.43628204]]]]], device='cuda:0') torch.Size([1, 9, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0761 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 125, vnnlib ID: 125 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.10437679,  -8.96013069,  -8.69070339,  -8.62474823,  -9.76555538,
          -8.77996826, -10.66582012,  -9.75414944,  -7.47076607,  -8.44103909]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [743]; unstable size 743; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 170, 1, 743] with unstable size 169 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 743] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 743] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [169]; unstable size 169; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 169] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 169] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.60137320, -0.36385405, -1.25714493, -1.13711500, -0.05323410,
         -1.18301010,  0.78644753, -0.01430035, -2.42923403]], device='cuda:0') None
Remain 8 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.10437679,  -8.96013069,  -8.69070339,  -8.62474823,  -9.76555538,
          -8.77996826, -10.66582012,  -9.75414944,  -7.47076607,  -8.44103909]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.10437679,  -8.96013069,  -8.69070339,  -8.62474823,  -9.76555729,
           -8.77996826, -10.66582012,  -9.75414848,  -7.47076511,  -8.44103909],
         [ -8.10437679,  -8.96013069,  -8.69070339,  -8.62474823,  -9.76555729,
           -8.77996826, -10.66582012,  -9.75414848,  -7.47076511,  -8.44103909]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.33666229,  0.51909161,  0.24966431,  0.18370914,  1.32451820,
           0.33892918,  1.31310940, -0.97027397]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         ...,


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]],


         [[[ 1.94761932,  1.93174624,  1.91587329,  ...,  1.78888917,
             1.42380977,  0.66190481],
           [ 1.88412726,  1.86825418,  1.85238123,  ...,  1.26507962,
             0.36031753,  0.15396833],
           [ 1.91587329,  1.91587329,  1.90000021,  ...,  0.63015878,
             0.04285724,  0.04285724],
           ...,
           [ 1.21746063,  1.18571460,  1.16984153,  ..., -1.22698402,
            -1.29047608, -1.35396814],
           [ 1.16984153,  1.13809550,  1.12222254,  ..., -1.25873005,
            -1.09999990, -1.09999990],
           [ 1.10634947,  1.05873048,  0.96349210,  ..., -1.08412695,
            -0.75079364, -0.29047608]],

          [[ 2.07729483,  2.06119204,  2.06119204,  ...,  1.91626441,
             1.54589403,  0.77294695],
           [ 2.01288271,  1.99677968,  1.98067665,  ...,  1.27214205,
             0.35426742,  0.17713377],
           [ 2.04508877,  2.04508877,  2.02898574,  ...,  0.64412248,
             0.04830930,  0.11272153],
           ...,
           [ 1.12721443,  1.12721443,  1.15942061,  ..., -1.17552328,
            -1.23993552, -1.27214170],
           [ 1.11111140,  1.11111140,  1.14331758,  ..., -1.19162631,
            -1.03059578, -0.98228657],
           [ 1.11111140,  1.07890511,  1.01449287,  ..., -0.95008045,
            -0.59581316, -0.19323659]],

          [[ 2.08545780,  2.07046509,  2.07046509,  ...,  1.96551764,
             1.62069011,  0.91604215],
           [ 2.02548766,  2.01049519,  1.99550271,  ...,  1.29085493,
             0.43628204,  0.24137947],
           [ 2.05547261,  2.05547261,  2.04048014,  ...,  0.70614707,
             0.15142445,  0.19640197],
           ...,
           [ 1.20089996,  1.20089996,  1.20089996,  ..., -1.03298354,
            -1.09295356, -1.13793111],
           [ 1.17091501,  1.17091501,  1.17091501,  ..., -1.00299859,
            -0.85307342, -0.82308841],
           [ 1.14092970,  1.12593722,  1.05097473,  ..., -0.76311839,
            -0.43328333, -0.04347810]]]]], device='cuda:0') torch.Size([1, 8, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1016 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 126, vnnlib ID: 126 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.85289669, -8.00897789, -3.25385118, -4.58932209, -3.74074745,
         -4.14678431, -4.96510458, -4.05580473, -7.93344116, -6.89174938]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [508]; unstable size 508; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 186, 1, 508] with unstable size 185 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 508] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 508] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [185]; unstable size 185; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 185] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 185] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.07057738,  2.60909200, -1.19970751,  0.02767652, -0.45064366,
          0.08406520, -0.38396752,  2.78343821,  1.49663746]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.85289669, -8.00897789, -3.25385118, -4.58932209, -3.74074745,
         -4.14678431, -4.96510458, -4.05580473, -7.93344116, -6.89174938]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.85289764, -8.00897884, -3.25385094, -4.58932209, -3.74074745,
          -4.14678431, -4.96510506, -4.05580473, -7.93344021, -6.89175034],
         [-6.85289764, -8.00897884, -3.25385094, -4.58932209, -3.74074745,
          -4.14678431, -4.96510506, -4.05580473, -7.93344021, -6.89175034]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.48689651,  0.40603685,  0.31505728]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]],


         [[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]],


         [[[-1.15872920e-01, -8.41268823e-02, -1.15872920e-01,  ...,
             4.71428633e-01, -5.44444442e-01, -7.82539666e-01],
           [ 5.03174663e-01,  2.01587379e-01,  5.87302521e-02,  ...,
             7.09523857e-01, -5.12698412e-01, -8.30158710e-01],
           [ 8.20634961e-01,  5.03174663e-01,  2.96825469e-01,  ...,
             7.57142901e-01, -6.39682531e-01, -8.46031725e-01],
           ...,
           [-4.96825397e-01, -4.96825397e-01, -5.44444442e-01,  ...,
            -9.73015904e-01, -9.57142830e-01, -8.93650770e-01],
           [-5.76190472e-01, -6.23809516e-01, -6.07936502e-01,  ...,
            -7.66666651e-01, -9.25396800e-01, -9.57142830e-01],
           [-4.17460203e-01, -7.19047606e-01, -6.71428561e-01,  ...,
            -8.46031725e-01, -9.41269815e-01, -9.25396800e-01]],

          [[ 6.44122481e-01,  4.66988832e-01,  1.44927651e-01,  ...,
             9.82286692e-01, -5.79710126e-01, -8.69565189e-01],
           [ 1.14331758e+00,  8.69565308e-01,  4.34782714e-01,  ...,
             1.03059590e+00, -5.47504008e-01, -9.33977425e-01],
           [ 1.35265732e+00,  1.01449287e+00,  4.34782714e-01,  ...,
             7.72946954e-01, -6.92431509e-01, -9.50080454e-01],
           ...,
           [-9.66182351e-02,  1.22934580e-07,  1.22934580e-07,  ...,
            -1.51368749e+00, -1.35265696e+00, -1.09500802e+00],
           [-3.38164121e-01, -3.38164121e-01, -2.41545767e-01,  ...,
            -1.04669881e+00, -1.14331722e+00, -1.17552328e+00],
           [-3.22061062e-01, -4.83091772e-01, -3.22061062e-01,  ...,
            -9.33977425e-01, -1.06280184e+00, -1.07890499e+00]],

          [[-5.98200858e-01, -7.78110921e-01, -9.73013461e-01,  ...,
            -5.83208382e-01, -1.21289361e+00, -1.34782624e+00],
           [-2.38380641e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -4.33283329e-01, -1.27286363e+00, -1.28785622e+00],
           [-1.63418129e-01, -3.58320802e-01, -4.63268340e-01,  ...,
             1.51424453e-01, -1.42278874e+00, -1.34782624e+00],
           ...,
           [-8.08095932e-01, -7.03148425e-01, -9.88005996e-01,  ...,
            -1.49775124e+00, -1.43778121e+00, -1.40779614e+00],
           [-8.08095932e-01, -4.78260815e-01, -5.53223372e-01,  ...,
            -1.22788620e+00, -1.34782624e+00, -1.40779614e+00],
           [-7.48125911e-01, -8.83058429e-01, -1.04797614e+00,  ...,
            -1.24287868e+00, -1.30284870e+00, -1.24287868e+00]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0857 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 127, vnnlib ID: 127 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.57729053, -10.22089481,  -8.00115299,  -7.89926720,  -8.22076607,
          -9.08212662,  -9.97586060,  -9.23946381,  -7.82561684,  -9.45760345]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [685]; unstable size 685; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 209, 1, 685] with unstable size 208 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 685] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 685] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [208]; unstable size 208; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 208] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 208] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-1.39561689,  1.13157153, -1.32989621, -1.52063799, -1.36703992,
         -0.59409851,  0.40751314, -0.57752180,  0.47539353]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.57729053, -10.22089481,  -8.00115299,  -7.89926720,  -8.22076607,
          -9.08212662,  -9.97586060,  -9.23946381,  -7.82561684,  -9.45760345]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.57729101, -10.22089481,  -8.00115299,  -7.89926624,  -8.22076702,
           -9.08212757,  -9.97586155,  -9.23946476,  -7.82561779,  -9.45760345],
         [ -7.57729101, -10.22089481,  -8.00115299,  -7.89926624,  -8.22076702,
           -9.08212757,  -9.97586155,  -9.23946476,  -7.82561779,  -9.45760345]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.24832678,  0.17553520,  0.07364845,  0.39514923,  1.25650978,
           1.41384697]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]],


         [[[1.09047651, 1.07460344, 1.10634947,  ..., 0.94761908,
            0.90000004, 0.88412702],
           [1.16984153, 1.12222254, 1.12222254,  ..., 0.97936511,
            0.93174607, 0.91587305],
           [1.16984153, 1.10634947, 1.10634947,  ..., 0.93174607,
            0.90000004, 0.88412702],
           ...,
           [0.70952386, 0.66190481, 0.67777783,  ..., 0.50317466,
            0.47142863, 0.45555562],
           [0.77301592, 0.72539687, 0.72539687,  ..., 0.58253974,
            0.56666672, 0.53492069],
           [0.82063496, 0.75714290, 0.72539687,  ..., 0.64603180,
            0.59841275, 0.51904768]],

          [[1.01449287, 1.01449287, 1.03059590,  ..., 0.88566834,
            0.83735919, 0.82125610],
           [1.09500813, 1.04669893, 1.04669893,  ..., 0.90177143,
            0.86956531, 0.85346222],
           [1.09500813, 1.03059590, 1.03059590,  ..., 0.86956531,
            0.83735919, 0.80515307],
           ...,
           [0.69243163, 0.64412248, 0.66022551,  ..., 0.46698883,
            0.43478271, 0.41867965],
           [0.74074084, 0.69243163, 0.70853472,  ..., 0.51529801,
            0.49919492, 0.45088577],
           [0.75684386, 0.67632860, 0.69243163,  ..., 0.59581327,
            0.54750413, 0.48309189]],

          [[0.91604215, 0.91604215, 0.93103468,  ..., 0.84107965,
            0.79610211, 0.78110963],
           [0.99100471, 0.94602716, 0.94602716,  ..., 0.85607213,
            0.82608712, 0.81109464],
           [0.99100471, 0.93103468, 0.93103468,  ..., 0.82608712,
            0.79610211, 0.76611710],
           ...,
           [0.72113961, 0.69115460, 0.70614707,  ..., 0.52623707,
            0.49625200, 0.48125952],
           [0.78110963, 0.73613209, 0.75112462,  ..., 0.58620709,
            0.55622208, 0.52623707],
           [0.81109464, 0.73613209, 0.73613209,  ..., 0.64617711,
            0.60119957, 0.54122955]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0851 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 128, vnnlib ID: 128 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.12257195, -8.18585014, -3.72392344, -4.82489967, -3.27657938,
         -4.91832876, -4.09014797, -4.34730959, -7.98648739, -6.16137838]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [563]; unstable size 563; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 239, 1, 563] with unstable size 238 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 563] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 563] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [238]; unstable size 238; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 238] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 238] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.90272850,  1.91782308, -1.66059637, -0.46604258, -2.21083879,
         -0.55527329, -1.51988959,  1.75675321, -0.03911400]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.12257195, -8.18585014, -3.72392344, -4.82489967, -3.27657938,
         -4.91832876, -4.09014797, -4.34730959, -7.98648739, -6.16137838]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.12257195, -8.18585014, -3.72392321, -4.82489920, -3.27657890,
          -4.91832876, -4.09014797, -4.34730911, -7.98648739, -6.16137838],
         [-5.12257195, -8.18585014, -3.72392321, -4.82489920, -3.27657890,
          -4.91832876, -4.09014797, -4.34730911, -7.98648739, -6.16137838]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.03242397, -0.36622477,  0.73475122, -0.81356907,  0.82818079,
           0.25716114,  2.07123041]]], device='cuda:0')
number of violation:  2
clean attack image tensor([[[[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]],


         [[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]],


         [[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]],


         ...,


         [[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]],


         [[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]],


         [[[ 4.28572372e-02,  5.87302521e-02, -4.76180762e-03,  ...,
            -1.15872920e-01, -4.76180762e-03,  2.01587379e-01],
           [ 2.17460394e-01,  1.53968334e-01,  1.85714364e-01,  ...,
            -1.95237994e-01, -8.41268823e-02,  4.28572372e-02],
           [ 1.11112073e-02,  1.69841349e-01,  5.34920692e-01,  ...,
            -2.90476084e-01, -8.41268823e-02, -1.15872920e-01],
           ...,
           [ 5.34920692e-01, -1.16349196e+00, -1.95714283e+00,  ...,
            -4.49206233e-01, -5.28571427e-01, -3.85714173e-01],
           [ 1.69841349e-01, -1.05238092e+00, -1.63968253e+00,  ...,
            -2.74603069e-01, -6.07936502e-01, -4.80952382e-01],
           [ 7.46032670e-02, -5.28571427e-01, -9.73015904e-01,  ...,
            -2.74603069e-01, -3.85714173e-01, -3.69841158e-01]],

          [[ 1.93236828e-01,  1.61030710e-01,  4.83092964e-02,  ...,
            -1.28824353e-01, -1.61029361e-02,  1.61030710e-01],
           [ 3.05958241e-01,  2.09339887e-01,  2.41546005e-01,  ...,
            -1.28824353e-01, -3.22059989e-02,  6.44123554e-02],
           [ 4.83092964e-02,  1.77133769e-01,  6.11916363e-01,  ...,
            -1.77133530e-01,  3.22062373e-02, -4.83090580e-02],
           ...,
           [ 4.66988832e-01, -1.22383249e+00, -1.95652175e+00,  ...,
            -5.79710126e-01, -7.08534598e-01, -5.79710126e-01],
           [ 1.12721533e-01, -1.11111104e+00, -1.65861523e+00,  ...,
            -4.02576357e-01, -7.89049864e-01, -6.60225391e-01],
           [ 3.22062373e-02, -5.95813155e-01, -1.03059578e+00,  ...,
            -4.34782475e-01, -5.63607037e-01, -4.99194801e-01]],

          [[ 2.86356986e-01,  1.81409463e-01,  9.14544314e-02,  ...,
             1.49940979e-03, -4.34781015e-02,  4.64769229e-02],
           [ 2.86356986e-01,  1.36431947e-01,  2.56371975e-01,  ...,
             3.14844176e-02, -1.34930937e-02,  3.14844176e-02],
           [-2.98350781e-01, -1.93403140e-01,  3.91304523e-01,  ...,
            -1.34930937e-02,  6.14694245e-02, -2.84855980e-02],
           ...,
           [ 1.96401969e-01, -1.12293863e+00, -1.69265378e+00,  ...,
            -9.43028450e-01, -9.13043439e-01, -8.68065953e-01],
           [-1.33433133e-01, -1.06296861e+00, -1.52773619e+00,  ...,
            -7.48125911e-01, -1.01799107e+00, -9.88005996e-01],
           [-1.93403140e-01, -6.43178403e-01, -1.07796109e+00,  ...,
            -7.33133376e-01, -9.28035975e-01, -8.68065953e-01]]]]],
       device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.1118 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 129, vnnlib ID: 129 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.31356716, -13.91007519,  -9.13539219,  -8.59541893,  -8.22070026,
          -8.21194839, -10.18828583, -10.88986969, -10.20756531, -12.20699596]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [584]; unstable size 584; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 263, 1, 584] with unstable size 262 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 584] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 584] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [262]; unstable size 262; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 262] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 262] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.54147238,  3.51588058, -0.48492002, -0.11444455, -1.27845073,
          0.64233291,  1.06292868,  0.06253459,  1.78522682]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.31356716, -13.91007519,  -9.13539219,  -8.59541893,  -8.22070026,
          -8.21194839, -10.18828583, -10.88986969, -10.20756531, -12.20699596]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.32136536, -13.92663002,  -9.13717842,  -8.60724545,  -8.21953201,
           -8.22270298, -10.20281887, -10.89065933, -10.21816635, -12.22472954],
         [ -9.32136536, -13.92663002,  -9.13717842,  -8.60724545,  -8.21953201,
           -8.22270298, -10.20281887, -10.89065933, -10.21816635, -12.22472954]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.09866238,  0.91447544,  0.38454247, -0.00317097]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0045 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0706 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 130, vnnlib ID: 130 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.37966061, -10.86174870,  -6.27118492,  -7.18504333,  -4.88041210,
          -7.02919436,  -7.02008009,  -5.68175220, -12.22475624,  -9.74924088]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [468]; unstable size 468; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 468] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 468] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 468] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 197] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.92446530,  1.83843040, -1.80397630, -0.25452483, -3.28706455,
         -1.12619328, -2.72712851,  3.37554121,  1.23327684]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.37966061, -10.86174870,  -6.27118492,  -7.18504333,  -4.88041210,
          -7.02919436,  -7.02008009,  -5.68175220, -12.22475624,  -9.74924088]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.37965965, -10.86174679,  -6.27118492,  -7.18504381,  -4.88041258,
           -7.02919531,  -7.02007914,  -5.68175268, -12.22475624,  -9.74924088],
         [ -9.37965965, -10.86174679,  -6.27118492,  -7.18504381,  -4.88041258,
           -7.02919531,  -7.02007914,  -5.68175268, -12.22475624,  -9.74924088]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.75801039,  0.15584850, -2.14878273, -0.00911617, -1.34744263]]],
       device='cuda:0')
number of violation:  4
clean attack image tensor([[[[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]],


         [[[ 0.21746039,  0.43968260,  0.59841275,  ...,  0.75714290,
             0.69365084,  0.67777783],
           [ 0.01111121,  0.13809532,  0.24920642,  ...,  0.72539687,
             0.70952386,  1.02698421],
           [ 0.05873025,  0.23333341,  0.09047628,  ...,  0.43968260,
             0.63015878,  0.78888893],
           ...,
           [ 0.88412702,  0.83650798,  0.83650798,  ...,  0.77301592,
             0.85238099,  0.90000004],
           [ 0.96349210,  0.97936511,  0.94761908,  ...,  0.72539687,
             0.67777783,  0.69365084],
           [ 1.02698421,  1.09047651,  0.90000004,  ...,  0.59841275,
             0.32857150,  0.53492069]],

          [[ 0.20933989,  0.46698883,  0.74074084,  ...,  1.25603890,
             1.09500813,  0.98228669],
           [ 0.11272153,  0.28985518,  0.51529801,  ...,  1.12721443,
             1.03059590,  1.28824508],
           [ 0.25764906,  0.45088577,  0.46698883,  ...,  0.78904998,
             0.91787446,  1.03059590],
           ...,
           [ 1.54589403,  1.49758482,  1.48148179,  ...,  1.40096653,
             1.48148179,  1.51368785],
           [ 1.61030626,  1.61030626,  1.59420323,  ...,  1.36876035,
             1.32045114,  1.32045114],
           [ 1.62640929,  1.69082153,  1.49758482,  ...,  1.23993587,
             0.96618366,  1.15942061]],

          [[-0.32833579, -0.19340314,  0.03148442,  ...,  0.58620709,
             0.07646193, -0.08845562],
           [-0.43328333, -0.37331331, -0.23838064,  ...,  0.39130452,
             0.04647692,  0.28635699],
           [-0.43328333, -0.31334329, -0.44827583,  ...,  0.09145443,
             0.01649191,  0.12143944],
           ...,
           [ 0.66116959,  0.66116959,  0.66116959,  ...,  0.64617711,
             0.73613209,  0.81109464],
           [ 0.82608712,  0.84107965,  0.82608712,  ...,  0.63118458,
             0.60119957,  0.64617711],
           [ 0.91604215,  0.96101969,  0.75112462,  ...,  0.51124454,
             0.27136448,  0.49625200]]]]], device='cuda:0') torch.Size([1, 5, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0784 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 131, vnnlib ID: 131 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.35881138, -13.11242390,  -9.13916874, -10.32992744,  -9.78460979,
         -10.37751198, -11.98755741, -12.49197388,  -5.29605007, -12.74240780]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [574]; unstable size 574; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 574] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 574] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 574] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 192] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.78351951, 6.23856401, 2.09941578, 3.41462445, 2.79624557, 3.32999039,
         5.10516357, 5.41959763, 6.04746437]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0684 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 132, vnnlib ID: 132 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.14653015,  -8.83935356, -17.06118393, -16.39709473, -15.91677952,
         -18.22977066, -16.70629501, -16.62640762, -11.32539654,  -9.82044125]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [660]; unstable size 660; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 143, 1, 660] with unstable size 142 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 660] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 660] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [142]; unstable size 142; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 142] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 142] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.91259813,  6.46374798,  5.83736515,  5.29915905,  7.56130886,
          6.20057487,  5.96402264,  1.06313610, -0.07201374]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.14653015,  -8.83935356, -17.06118393, -16.39709473, -15.91677952,
         -18.22977066, -16.70629501, -16.62640762, -11.32539654,  -9.82044125]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.11it/s]100%|██████████| 1/1 [00:00<00:00,  9.11it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.66808319,  -8.80762291, -16.54941559, -15.81319427, -15.26967907,
          -17.61644936, -16.17386246, -15.95940590, -11.03059864,  -9.22308636]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.41546345]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1123 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 39.909873962402344
alpha/beta optimization time: 1.2084181308746338
initial alpha-crown bounds: tensor([[ 0.98155403,  6.54999447,  5.92335844,  5.37160397,  7.64936447,
          6.28046989,  6.04217529,  1.13449574, -0.02314508]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.023145079612731934
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.61035656929016
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.61031866073608
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.61029410362244
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.61026978492737
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.6102511882782
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.61023211479187
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 198.61021423339844
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 198.61019468307495
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 198.61017632484436
Verifying property 8 with 1 instances.
##### Instance 132 first 10 spec matrices: 
tensor([[[ 0.,  1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.02314508]], device='cuda:0') need to verify.
Model prediction is: tensor([-11.14653015,  -8.83935356, -17.06118393, -16.39709473, -15.91677952,
        -18.22977066, -16.70629501, -16.62640762, -11.32539654,  -9.82044125],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.02314508]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 660
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 139
Node /15 input 0: size torch.Size([100]) unstable 12
-----------------
# of unstable neurons: 811
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010204315185546875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023143768310546875
10 lb beta sum: 0.0, worst -0.023145556449890137
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0538    transfer 0.0001    finalize 0.0002    func 0.0543    
Accumulated time: func 0.0543    prepare 0.0002    bound 0.0538    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 32] 
split level 1: [/input-12, 37] 
split level 2: [/input-8, 1436] 
split level 3: [/input-12, 25] 
split level 4: [/input-8, 796] 
split level 5: [/input-8, 1438] 
split level 6: [/input-12, 26] 
split level 7: [/input-8, 987] 
split level 8: [/input-12, 90] 
split level 9: [/input-12, 11] 
split level 10: [/input-8, 563] 
split level 11: [/input-8, 812] 
split level 12: [/input-8, 690] 
split level 13: [/input-8, 1076] 
split level 14: [/input-8, 821] 
split level 15: [/input-8, 169] 
split level 16: [/input-8, 1425] 
split level 17: [/input, 360] 
split level 18: [/input-12, 78] 
split level 19: [/input-12, 60] 
split level 20: [/input-8, 1646] 
split level 21: [/input-8, 788] 
split level 22: [/input-8, 1964] 
split level 23: [/input-8, 797] 
split level 24: [/input-8, 1326] 
split level 25: [/input, 1416] 
split level 26: [/input-8, 1322] 
split level 27: [/input-8, 1947] 
split level 28: [/input-8, 179] 
split level 29: [/input, 2454] 
split level 30: [/input, 364] 
split level 31: [/input, 2471] 
split level 32: [/input-8, 1519] 
split level 33: [/input-8, 787] 
split level 34: [/input, 420] 
split level 35: [/input, 3272] 
split level 36: [/input-8, 884] 
split level 37: [/input, 4065] 
split level 38: [/input, 3239] 
split level 39: [/input-8, 681] 
split level 40: [/input, 343] 
split level 41: [/input, 2184] 
split level 42: [/input, 1617] 
split level 43: [/input-8, 1962] 
split level 44: [/input-8, 1454] 
split level 45: [/input, 449] 
split level 46: [/input, 3269] 
split level 47: [/input-8, 1520] 
split level 48: [/input, 448] 
split level 49: [/input, 645] 
split level 50: [/input, 1495] 
split level 51: [/input-8, 1305] 
split level 52: [/input-8, 571] 
split level 53: [/input, 421] 
split level 54: [/input, 1431] 
split level 55: [/input, 4066] 
split level 56: [/input-8, 573] 
split level 57: [/input, 398] 
split level 58: [/input-8, 1289] 
split level 59: [/input-8, 1318] 
split level 60: [/input, 3287] 
split level 61: [/input, 3383] 
split level 62: [/input, 380] 
split level 63: [/input, 1404] 
split level 64: [/input, 1618] 
split level 65: [/input, 2121] 
split level 66: [/input, 1494] 
split level 67: [/input, 419] 
split level 68: [/input, 2469] 
split level 69: [/input, 404] 
split level 70: [/input, 422] 
split level 71: [/input-8, 570] 
split level 72: [/input, 2505] 
split level 73: [/input-8, 1508] 
split level 74: [/input, 2489] 
split level 75: [/input-8, 1505] 
split level 76: [/input, 3541] 
split level 77: [/input, 2266] 
split level 78: [/input, 1769] 
split level 79: [/input, 2507] 
split level 80: [/input, 3253] 
split level 81: [/input-8, 1353] 
split level 82: [/input, 2625] 
split level 83: [/input, 3221] 
split level 84: [/input, 3257] 
split level 85: [/input, 3527] 
split level 86: [/input, 3283] 
split level 87: [/input, 1447] 
split level 88: [/input-8, 2010] 
split level 89: [/input-8, 1039] 
split level 90: [/input-8, 540] 
split level 91: [/input, 1185] 
split level 92: [/input, 1500] 
split level 93: [/input, 2120] 
split level 94: [/input, 3166] 
split level 95: [/input, 2119] 
split level 96: [/input, 2200] 
split level 97: [/input, 4064] 
split level 98: [/input-8, 822] 
split level 99: [/input, 2504] 
split level 100: [/input, 110] 
split level 101: [/input, 1509] 
split level 102: [/input, 1367] 
split level 103: [/input, 3865] 
split level 104: [/input, 3219] 
split level 105: [/input, 3302] 
split level 106: [/input, 3385] 
split level 107: [/input, 929] 
split level 108: [/input, 4014] 
split level 109: [/input, 2538] 
split level 110: [/input, 1379] 
split level 111: [/input, 415] 
split level 112: [/input, 3547] 
split level 113: [/input-8, 679] 
split level 114: [/input, 3386] 
split level 115: [/input, 1451] 
split level 116: [/input, 3384] 
split level 117: [/input, 3542] 
split level 118: [/input, 1770] 
split level 119: [/input, 2530] 
split level 120: [/input, 1381] 
split level 121: [/input, 1403] 
split level 122: [/input, 2104] 
split level 123: [/input, 3284] 
split level 124: [/input, 41] 
split level 125: [/input, 227] 
split level 126: [/input, 3305] 
split level 127: [/input, 3291] 
split level 128: [/input, 3308] 
split level 129: [/input, 3282] 
split level 130: [/input, 3866] 
split level 131: [/input, 2523] 
split level 132: [/input, 373] 
split level 133: [/input, 3345] 
split level 134: [/input, 2346] 
split level 135: [/input, 3329] 
split level 136: [/input, 3150] 
split level 137: [/input, 3881] 
split level 138: [/input, 2534] 
split level 139: [/input-8, 546] 
split level 140: [/input, 2332] 
split level 141: [/input, 3556] 
split level 142: [/input, 2514] 
split level 143: [/input, 4067] 
split level 144: [/input, 4032] 
split level 145: [/input, 40] 
split level 146: [/input, 2345] 
split level 147: [/input, 2146] 
split level 148: [/input, 1335] 
split level 149: [/input, 3559] 
split level 150: [/input, 3868] 
split level 151: [/input, 2257] 
split level 152: [/input, 3884] 
split level 153: [/input, 3867] 
split level 154: [/input, 3915] 
split level 155: [/input, 2099] 
split level 156: [/input, 3883] 
split level 157: [/input, 2519] 
split level 158: [/input, 2155] 
split level 159: [/input, 2397] 
split level 160: [/input, 3304] 
split level 161: [/input, 3934] 
split level 162: [/input, 3165] 
split level 163: [/input, 3364] 
split level 164: [/input, 2329] 
split level 165: [/input-8, 1378] 
split level 166: [/input, 2539] 
split level 167: [/input, 2347] 
split level 168: [/input, 3864] 
split level 169: [/input-8, 1354] 
split level 170: [/input, 3199] 
split level 171: [/input, 2331] 
split level 172: [/input, 3330] 
split level 173: [/input, 3097] 
split level 174: [/input, 2348] 
split level 175: [/input, 3882] 
split level 176: [/input, 899] 
split level 177: [/input, 713] 
split level 178: [/input, 3863] 
split level 179: [/input, 3202] 
split level 180: [/input, 3870] 
split level 181: [/input, 3861] 
split level 182: [/input, 3363] 
split level 183: [/input, 3879] 
split level 184: [/input, 87] 
split level 185: [/input, 3354] 
split level 186: [/input, 3880] 
split level 187: [/input, 1775] 
split level 188: [/input, 3862] 
split level 189: [/input, 3296] 
split level 190: [/input, 3860] 
split level 191: [/input, 3332] 
split level 192: [/input, 2327] 
split level 193: [/input, 3349] 
split level 194: [/input, 1282] 
split level 195: [/input, 498] 
split level 196: [/input, 3398] 
split level 197: [/input, 2856] 
split level 198: [/input, 1515] 
split level 199: [/input, 2855] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02312624454498291
10 lb beta sum: 0.0, worst -0.023123860359191895
Time: prepare 0.0117    bound 0.0974    transfer 0.0018    finalize 0.0030    func 0.1166    
Accumulated time: func 0.1709    prepare 0.0219    bound 0.1512    transfer 0.0019    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.22483665) min lb tensor(-0.02311850)
Number of Verified Splits: 17 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011351823806762695 
BICCOS Cumulative time: 0.011351823806762695
Preprocessing time: 0.009938716888427734 Inference time: 0.0006861686706542969 Add cuts time: 0.0002129077911376953 Cut analysis time: 0.0005140304565429688
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5204    set_bounds 0.0091    solve 0.1167    add 0.0100    
Accumulated time: pickout 0.0004    decision 0.5204    set_bounds 0.0091    solve 0.1167    add 0.0100    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([32]), tensor([-1.]), tensor([0]), tensor([1.71936900e-13]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([32]), tensor([1.]), tensor([0]), tensor([1.39795509e-10]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.12833523750305176

all verified at 0th iter
Time: prepare 0.0003    bound 0.0040    transfer 0.0001    finalize 0.0001    func 0.0045    
Accumulated time: func 0.1754    prepare 0.0222    bound 0.1551    transfer 0.0020    finalize 0.0033    
After pruning, left:  0

Back to Regular BaB

Result: safe in 2.4621 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 133, vnnlib ID: 133 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-16.25358391, -24.01944351, -13.62016106, -15.25064659, -19.34745598,
         -15.90201569, -19.20198250, -17.42230415, -21.89736557, -21.49999237]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [554]; unstable size 554; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 98, 1, 554] with unstable size 97 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 3, 1, 554] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 554] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [97]; unstable size 97; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 3, 1, 97] with unstable size 2 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 97] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [2]; unstable size 2; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 2] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.17917991, 9.69885063, 1.01258576, 5.11245012, 1.56947887, 4.91068316,
         3.15387392, 7.60085821, 7.21997833]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0726 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 134, vnnlib ID: 134 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.00686455, -14.29141140, -14.37695026, -15.86271286, -15.28532314,
         -17.60468292, -14.91024494, -17.65866089, -10.37097645, -14.77221203]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [752]; unstable size 752; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 224, 1, 752] with unstable size 223 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 752] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 752] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [223]; unstable size 223; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 223] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 223] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.77094460,  1.88772726,  3.21973848,  2.86656570,  4.79594231,
          2.18563223,  4.89809704, -1.79894888,  2.22324061]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.00686455, -14.29141140, -14.37695026, -15.86271286, -15.28532314,
         -17.60468292, -14.91024494, -17.65866089, -10.37097645, -14.77221203]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.00686455, -14.29141140, -14.37695026, -15.86271286, -15.28532314,
          -17.60468292, -14.91024494, -17.65866089, -10.37097645, -14.77221203]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.63588810]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 1.15396857,  1.01111114,  1.01111114,  ...,  1.02698421,
             1.04285717,  1.10634947],
           [ 1.02698421,  0.94761908,  0.94761908,  ...,  1.12222254,
             1.12222254,  1.16984153],
           [ 0.99523818,  0.91587305,  0.86825401,  ...,  1.12222254,
             1.13809550,  1.16984153],
           ...,
           [-0.14761895, -0.41746020, -0.43333322,  ..., -0.36984116,
            -0.33809513, -0.41746020],
           [-0.30634910, -0.56031746, -0.57619047,  ..., -0.68730158,
            -0.54444444, -0.36984116],
           [-0.22698402, -0.33809513, -0.40158719,  ..., -0.59206349,
            -0.32222211, -0.14761895]],

          [[ 1.20772982,  1.06280196,  1.06280196,  ...,  1.07890511,
             1.09500813,  1.15942061],
           [ 1.07890511,  0.99838978,  0.99838978,  ...,  1.17552364,
             1.17552364,  1.22383285],
           [ 1.04669893,  0.96618366,  0.91787446,  ...,  1.17552364,
             1.19162667,  1.22383285],
           ...,
           [-0.11272129, -0.38647330, -0.40257636,  ..., -0.33816412,
            -0.30595800, -0.38647330],
           [-0.27375188, -0.53140092, -0.54750401,  ..., -0.66022539,
            -0.51529789, -0.33816412],
           [-0.19323659, -0.30595800, -0.37037024,  ..., -0.56360704,
            -0.28985494, -0.11272129]],

          [[ 1.26086998,  1.12593722,  1.12593722,  ...,  1.14092970,
             1.15592217,  1.21589243],
           [ 1.14092970,  1.06596720,  1.06596720,  ...,  1.23088503,
             1.23088503,  1.27586246],
           [ 1.11094475,  1.03598225,  0.99100471,  ...,  1.23088503,
             1.24587750,  1.27586246],
           ...,
           [ 0.03148442, -0.22338814, -0.23838064,  ..., -0.17841063,
            -0.14842562, -0.22338814],
           [-0.11844061, -0.35832080, -0.37331331,  ..., -0.47826082,
            -0.34332830, -0.17841063],
           [-0.04347810, -0.14842562, -0.20839565,  ..., -0.38830581,
            -0.13343313,  0.03148442]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0843 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 135, vnnlib ID: 135 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.44892406,  -4.04770756, -11.04793358,  -9.86121178,  -9.30945015,
         -10.61656761, -11.13577747,  -9.78641891,  -8.20079136,  -4.34282255]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [511]; unstable size 511; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 204, 1, 511] with unstable size 203 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 511] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 511] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [203]; unstable size 203; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 203] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 203] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.79137373,  4.81029129,  3.58750868,  3.09708118,  4.12102699,
          5.00578547,  3.13694286,  2.81165600, -0.60362864]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.44892406,  -4.04770756, -11.04793358,  -9.86121178,  -9.30945015,
         -10.61656761, -11.13577747,  -9.78641891,  -8.20079136,  -4.34282255]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.17292595, -3.44921255, -9.58248615, -8.45668793, -7.94491386,
          -9.12796783, -9.80561256, -8.33679199, -7.18043041, -3.17307949]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.27613306]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0056 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0715 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 136, vnnlib ID: 136 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.25000286, -9.54972458, -6.18170929, -5.75074911, -6.05999041,
         -5.86923456, -7.27043962, -7.67426729, -6.16280842, -8.88309860]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [683]; unstable size 683; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 150, 1, 683] with unstable size 149 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 683] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 683] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [149]; unstable size 149; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 149] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 149] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.00514317, 1.08236039, 0.27113527, 0.77234709, 0.24157673, 1.78406525,
         1.89451647, 0.67536855, 3.36466622]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0624 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 137, vnnlib ID: 137 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.10846710, -8.76792812, -2.56949711, -3.15299773, -2.80712223,
         -3.16891909, -2.61646676, -4.73773241, -8.38235092, -7.32381153]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [508]; unstable size 508; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 298, 1, 508] with unstable size 297 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 508] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 508] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [297]; unstable size 297; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 297] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 297] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.63653457,  3.73463702, -1.26144528, -0.64267176, -1.08236980,
         -0.74575412,  0.71406722,  3.06178999,  2.80589008]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.10846710, -8.76792812, -2.56949711, -3.15299773, -2.80712223,
         -3.16891909, -2.61646676, -4.73773241, -8.38235092, -7.32381153]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.10846806, -8.76792812, -2.56949711, -3.15299821, -2.80712175,
          -3.16891956, -2.61646700, -4.73773289, -8.38235092, -7.32381201],
         [-6.10846806, -8.76792812, -2.56949711, -3.15299821, -2.80712175,
          -3.16891956, -2.61646700, -4.73773289, -8.38235092, -7.32381201]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.04696989,  0.53653121,  0.19065475,  0.55245256]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.24285710, -1.30634916, -1.09999990,  ...,  0.05873025,
            -0.46507925, -0.57619047],
           [-1.11587298, -1.16349196, -1.09999990,  ..., -0.24285704,
            -0.65555555, -0.79841268],
           [-1.19523799, -1.13174593, -0.84603173,  ..., -0.14761895,
            -0.84603173, -0.75079364],
           ...,
           [ 1.15396857, -0.57619047, -1.44920623,  ..., -0.70317459,
            -0.68730158, -0.48095238],
           [ 1.63015902,  0.58253974, -0.02063482,  ..., -0.86190474,
            -0.79841268, -0.43333322],
           [ 1.67777801,  1.39206374,  1.16984153,  ..., -1.03650784,
            -1.08412695, -0.89365077]],

          [[-1.11111104, -1.20772946, -1.01449275,  ...,  0.08051541,
            -0.53140092, -0.62801927],
           [-1.01449275, -1.06280184, -0.98228657,  ..., -0.22544271,
            -0.64412236, -0.77294683],
           [-1.11111104, -1.01449275, -0.72463763,  ..., -0.11272129,
            -0.77294683, -0.72463763],
           ...,
           [ 0.99838978, -0.66022539, -1.30434775,  ..., -0.78904986,
            -0.85346210, -0.66022539],
           [ 1.52979100,  0.43478271, -0.06441211,  ..., -0.80515295,
            -0.77294683, -0.57971013],
           [ 1.64251232,  1.27214205,  0.95008057,  ..., -0.93397743,
            -1.04669881, -0.96618354]],

          [[-0.55322337, -0.70314842, -0.55322337,  ...,  0.60119957,
            -0.17841063, -0.23838064],
           [-0.52323836, -0.55322337, -0.46326834,  ...,  0.33133450,
            -0.17841063, -0.35832080],
           [-0.64317840, -0.58320838, -0.22338814,  ...,  0.40629703,
            -0.20839565, -0.28335828],
           ...,
           [ 1.08095968, -0.31334329, -0.65817088,  ..., -0.35832080,
            -0.56821585, -0.38830581],
           [ 1.53073502,  0.60119957,  0.40629703,  ..., -0.26836565,
            -0.35832080, -0.22338814],
           [ 1.66566753,  1.26086998,  1.03598225,  ..., -0.31334329,
            -0.55322337, -0.52323836]]],


         [[[-1.24285710, -1.30634916, -1.09999990,  ...,  0.05873025,
            -0.46507925, -0.57619047],
           [-1.11587298, -1.16349196, -1.09999990,  ..., -0.24285704,
            -0.65555555, -0.79841268],
           [-1.19523799, -1.13174593, -0.84603173,  ..., -0.14761895,
            -0.84603173, -0.75079364],
           ...,
           [ 1.15396857, -0.57619047, -1.44920623,  ..., -0.70317459,
            -0.68730158, -0.48095238],
           [ 1.63015902,  0.58253974, -0.02063482,  ..., -0.86190474,
            -0.79841268, -0.43333322],
           [ 1.67777801,  1.39206374,  1.16984153,  ..., -1.03650784,
            -1.08412695, -0.89365077]],

          [[-1.11111104, -1.20772946, -1.01449275,  ...,  0.08051541,
            -0.53140092, -0.62801927],
           [-1.01449275, -1.06280184, -0.98228657,  ..., -0.22544271,
            -0.64412236, -0.77294683],
           [-1.11111104, -1.01449275, -0.72463763,  ..., -0.11272129,
            -0.77294683, -0.72463763],
           ...,
           [ 0.99838978, -0.66022539, -1.30434775,  ..., -0.78904986,
            -0.85346210, -0.66022539],
           [ 1.52979100,  0.43478271, -0.06441211,  ..., -0.80515295,
            -0.77294683, -0.57971013],
           [ 1.64251232,  1.27214205,  0.95008057,  ..., -0.93397743,
            -1.04669881, -0.96618354]],

          [[-0.55322337, -0.70314842, -0.55322337,  ...,  0.60119957,
            -0.17841063, -0.23838064],
           [-0.52323836, -0.55322337, -0.46326834,  ...,  0.33133450,
            -0.17841063, -0.35832080],
           [-0.64317840, -0.58320838, -0.22338814,  ...,  0.40629703,
            -0.20839565, -0.28335828],
           ...,
           [ 1.08095968, -0.31334329, -0.65817088,  ..., -0.35832080,
            -0.56821585, -0.38830581],
           [ 1.53073502,  0.60119957,  0.40629703,  ..., -0.26836565,
            -0.35832080, -0.22338814],
           [ 1.66566753,  1.26086998,  1.03598225,  ..., -0.31334329,
            -0.55322337, -0.52323836]]],


         [[[-1.24285710, -1.30634916, -1.09999990,  ...,  0.05873025,
            -0.46507925, -0.57619047],
           [-1.11587298, -1.16349196, -1.09999990,  ..., -0.24285704,
            -0.65555555, -0.79841268],
           [-1.19523799, -1.13174593, -0.84603173,  ..., -0.14761895,
            -0.84603173, -0.75079364],
           ...,
           [ 1.15396857, -0.57619047, -1.44920623,  ..., -0.70317459,
            -0.68730158, -0.48095238],
           [ 1.63015902,  0.58253974, -0.02063482,  ..., -0.86190474,
            -0.79841268, -0.43333322],
           [ 1.67777801,  1.39206374,  1.16984153,  ..., -1.03650784,
            -1.08412695, -0.89365077]],

          [[-1.11111104, -1.20772946, -1.01449275,  ...,  0.08051541,
            -0.53140092, -0.62801927],
           [-1.01449275, -1.06280184, -0.98228657,  ..., -0.22544271,
            -0.64412236, -0.77294683],
           [-1.11111104, -1.01449275, -0.72463763,  ..., -0.11272129,
            -0.77294683, -0.72463763],
           ...,
           [ 0.99838978, -0.66022539, -1.30434775,  ..., -0.78904986,
            -0.85346210, -0.66022539],
           [ 1.52979100,  0.43478271, -0.06441211,  ..., -0.80515295,
            -0.77294683, -0.57971013],
           [ 1.64251232,  1.27214205,  0.95008057,  ..., -0.93397743,
            -1.04669881, -0.96618354]],

          [[-0.55322337, -0.70314842, -0.55322337,  ...,  0.60119957,
            -0.17841063, -0.23838064],
           [-0.52323836, -0.55322337, -0.46326834,  ...,  0.33133450,
            -0.17841063, -0.35832080],
           [-0.64317840, -0.58320838, -0.22338814,  ...,  0.40629703,
            -0.20839565, -0.28335828],
           ...,
           [ 1.08095968, -0.31334329, -0.65817088,  ..., -0.35832080,
            -0.56821585, -0.38830581],
           [ 1.53073502,  0.60119957,  0.40629703,  ..., -0.26836565,
            -0.35832080, -0.22338814],
           [ 1.66566753,  1.26086998,  1.03598225,  ..., -0.31334329,
            -0.55322337, -0.52323836]]],


         [[[-1.24285710, -1.30634916, -1.09999990,  ...,  0.05873025,
            -0.46507925, -0.57619047],
           [-1.11587298, -1.16349196, -1.09999990,  ..., -0.24285704,
            -0.65555555, -0.79841268],
           [-1.19523799, -1.13174593, -0.84603173,  ..., -0.14761895,
            -0.84603173, -0.75079364],
           ...,
           [ 1.15396857, -0.57619047, -1.44920623,  ..., -0.70317459,
            -0.68730158, -0.48095238],
           [ 1.63015902,  0.58253974, -0.02063482,  ..., -0.86190474,
            -0.79841268, -0.43333322],
           [ 1.67777801,  1.39206374,  1.16984153,  ..., -1.03650784,
            -1.08412695, -0.89365077]],

          [[-1.11111104, -1.20772946, -1.01449275,  ...,  0.08051541,
            -0.53140092, -0.62801927],
           [-1.01449275, -1.06280184, -0.98228657,  ..., -0.22544271,
            -0.64412236, -0.77294683],
           [-1.11111104, -1.01449275, -0.72463763,  ..., -0.11272129,
            -0.77294683, -0.72463763],
           ...,
           [ 0.99838978, -0.66022539, -1.30434775,  ..., -0.78904986,
            -0.85346210, -0.66022539],
           [ 1.52979100,  0.43478271, -0.06441211,  ..., -0.80515295,
            -0.77294683, -0.57971013],
           [ 1.64251232,  1.27214205,  0.95008057,  ..., -0.93397743,
            -1.04669881, -0.96618354]],

          [[-0.55322337, -0.70314842, -0.55322337,  ...,  0.60119957,
            -0.17841063, -0.23838064],
           [-0.52323836, -0.55322337, -0.46326834,  ...,  0.33133450,
            -0.17841063, -0.35832080],
           [-0.64317840, -0.58320838, -0.22338814,  ...,  0.40629703,
            -0.20839565, -0.28335828],
           ...,
           [ 1.08095968, -0.31334329, -0.65817088,  ..., -0.35832080,
            -0.56821585, -0.38830581],
           [ 1.53073502,  0.60119957,  0.40629703,  ..., -0.26836565,
            -0.35832080, -0.22338814],
           [ 1.66566753,  1.26086998,  1.03598225,  ..., -0.31334329,
            -0.55322337, -0.52323836]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0882 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 138, vnnlib ID: 138 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.98990536, -11.53243732,  -9.55218792,  -9.34306908,  -9.59223843,
         -10.21041489,  -9.89879131, -10.73451996, -10.49936199,  -8.82808018]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [578]; unstable size 578; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 578] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 578] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 578] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 188] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 9.28026795e-01, -4.45046544e-01, -7.57262230e-01, -6.84045792e-01,
         -8.51392746e-04, -3.69360209e-01,  3.41859937e-01,  4.21400428e-01,
         -1.54338741e+00]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.98990536, -11.53243732,  -9.55218792,  -9.34306908,  -9.59223843,
         -10.21041489,  -9.89879131, -10.73451996, -10.49936199,  -8.82808018]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.98990536, -11.53243637,  -9.55218792,  -9.34306812,  -9.59223938,
          -10.21041393,  -9.89879227, -10.73451996, -10.49936199,  -8.82808018],
         [ -8.98990536, -11.53243637,  -9.55218792,  -9.34306812,  -9.59223938,
          -10.21041393,  -9.89879227, -10.73451996, -10.49936199,  -8.82808018]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.56228256,  0.35316277,  0.60233402,  1.22050858,  0.90888691,
          -0.16182518]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]],


         [[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]],


         [[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]],


         [[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]],


         [[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]],


         [[[-0.81428570, -0.87777776, -0.94126981,  ...,  0.16984135,
             0.72539687,  1.91587329],
           [-0.94126981, -1.06825387, -1.11587298,  ...,  0.10634929,
             0.67777783,  1.88412726],
           [-1.03650784, -1.11587298, -1.08412695,  ...,  0.09047628,
             0.66190481,  1.90000021],
           ...,
           [ 1.21746063,  1.29682565,  1.40793681,  ...,  0.70952386,
             1.15396857,  1.96349227],
           [ 1.93174624,  1.86825418,  1.86825418,  ...,  1.83650815,
             1.93174624,  2.03492069],
           [ 2.04285717,  2.04285717,  2.04285717,  ...,  2.04285717,
             2.04285717,  2.04285717]],

          [[-0.38647330, -0.41867942, -0.43478248,  ...,  0.59581327,
             0.96618366,  2.01288271],
           [-0.45088565, -0.49919480, -0.51529789,  ...,  0.54750413,
             0.93397754,  1.99677968],
           [-0.49919480, -0.53140092, -0.54750401,  ...,  0.51529801,
             0.91787446,  2.01288271],
           ...,
           [ 1.30434811,  1.38486338,  1.49758482,  ...,  0.98228669,
             1.28824508,  2.02898574],
           [ 1.99677968,  1.93236744,  1.93236744,  ...,  1.98067665,
             1.99677968,  2.07729483],
           [ 2.10950065,  2.10950065,  2.10950065,  ...,  2.10950065,
             2.10950065,  2.10950065]],

          [[ 0.25637197,  0.27136448,  0.21139447,  ...,  1.05097473,
             1.21589243,  2.02548766],
           [ 0.18140946,  0.24137947,  0.16641696,  ...,  0.99100471,
             1.17091501,  2.01049519],
           [ 0.13643195,  0.21139447,  0.06146942,  ...,  0.97601217,
             1.17091501,  2.01049519],
           ...,
           [ 1.45577252,  1.53073502,  1.65067506,  ...,  1.24587750,
             1.42578757,  2.04048014],
           [ 2.02548766,  1.98051023,  1.98051023,  ...,  2.01049519,
             2.01049519,  2.08545780],
           [ 2.10045004,  2.10045004,  2.10045004,  ...,  2.10045004,
             2.09295392,  2.09295392]]]]], device='cuda:0') torch.Size([1, 6, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0802 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 139, vnnlib ID: 139 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.46985912, -9.78631687, -3.83598518, -5.51694536, -3.54354000,
         -5.34781790, -2.52311063, -5.68112326, -9.51543331, -9.21476460]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [439]; unstable size 439; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 276, 1, 439] with unstable size 275 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 439] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 439] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [275]; unstable size 275; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 275] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 275] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.63731956,  4.43945408, -0.32903957,  1.63714957, -0.59455490,
          1.22534394,  1.17066205,  4.56741524,  4.21444416]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.46985912, -9.78631687, -3.83598518, -5.51694536, -3.54354000,
         -5.34781790, -2.52311063, -5.68112326, -9.51543331, -9.21476460]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  9.06it/s]100%|██████████| 1/1 [00:00<00:00,  9.05it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.29665041, -9.85951042, -3.74907804, -5.51449394, -3.18303251,
          -5.30622292, -2.97571468, -5.53970671, -9.34093189, -9.30280685],
         [-7.29665041, -9.85951042, -3.74907804, -5.51449394, -3.18303251,
          -5.30622292, -2.97571468, -5.53970671, -9.34093189, -9.30280685]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.77336335, 0.20731783]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1131 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.83037567138672
alpha/beta optimization time: 1.208615779876709
initial alpha-crown bounds: tensor([[ 2.76347375,  4.57243538, -0.24465704,  1.68950629, -0.50626087,
          1.28860581,  1.25143027,  4.69473267,  4.32111073]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.506260871887207
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.609445810318
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.60940670967102
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.60938334465027
Verifying property 2 with 1 instances.
##### Instance 139 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  0.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.24465704]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.46985912, -9.78631687, -3.83598518, -5.51694536, -3.54354000,
        -5.34781790, -2.52311063, -5.68112326, -9.51543331, -9.21476460],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.24465704]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 439
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 269
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 731
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.894371032714844e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24465274810791016
10 lb beta sum: 0.0, worst -0.24466276168823242
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0521    transfer 0.0001    finalize 0.0001    func 0.0525    
Accumulated time: func 0.0525    prepare 0.0002    bound 0.0521    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 38] 
split level 2: [/input-12, 10] 
split level 3: [/input-12, 60] 
split level 4: [/input-12, 51] 
split level 5: [/input-12, 26] 
split level 6: [/input-12, 1] 
split level 7: [/input-12, 17] 
split level 8: [/input-12, 25] 
split level 9: [/input-12, 92] 
split level 10: [/input-12, 68] 
split level 11: [/input-8, 850] 
split level 12: [/input-12, 33] 
split level 13: [/input-8, 1828] 
split level 14: [/input-8, 923] 
split level 15: [/input-8, 932] 
split level 16: [/input-8, 88] 
split level 17: [/input-8, 95] 
split level 18: [/input-8, 859] 
split level 19: [/input-8, 1902] 
split level 20: [/input-8, 809] 
split level 21: [/input-8, 85] 
split level 22: [/input-8, 867] 
split level 23: [/input-8, 1370] 
split level 24: [/input-8, 1427] 
split level 25: [/input-8, 666] 
split level 26: [/input-8, 1362] 
split level 27: [/input-8, 674] 
split level 28: [/input-8, 988] 
split level 29: [/input-8, 292] 
split level 30: [/input-8, 1497] 
split level 31: [/input-8, 933] 
split level 32: [/input-8, 291] 
split level 33: [/input-8, 1357] 
split level 34: [/input-8, 985] 
split level 35: [/input-8, 485] 
split level 36: [/input-8, 682] 
split level 37: [/input-8, 1829] 
split level 38: [/input-8, 858] 
split level 39: [/input-8, 522] 
split level 40: [/input-8, 491] 
split level 41: [/input-8, 1364] 
split level 42: [/input-8, 660] 
split level 43: [/input-8, 1307] 
split level 44: [/input-8, 80] 
split level 45: [/input-8, 531] 
split level 46: [/input-8, 1373] 
split level 47: [/input-8, 542] 
split level 48: [/input-8, 1019] 
split level 49: [/input-8, 1021] 
split level 50: [/input-8, 989] 
split level 51: [/input-8, 994] 
split level 52: [/input-8, 1894] 
split level 53: [/input-8, 1306] 
split level 54: [/input-8, 2008] 
split level 55: [/input-8, 1876] 
split level 56: [/input-8, 1873] 
split level 57: [/input-8, 541] 
split level 58: [/input-8, 1910] 
split level 59: [/input-8, 1426] 
split level 60: [/input-8, 1428] 
split level 61: [/input, 1674] 
split level 62: [/input-8, 427] 
split level 63: [/input-8, 66] 
split level 64: [/input-8, 110] 
split level 65: [/input-8, 1429] 
split level 66: [/input-8, 1886] 
split level 67: [/input-8, 1486] 
split level 68: [/input-8, 1495] 
split level 69: [/input-8, 530] 
split level 70: [/input-8, 817] 
split level 71: [/input-8, 89] 
split level 72: [/input-8, 972] 
split level 73: [/input-8, 1515] 
split level 74: [/input-8, 1420] 
split level 75: [/input-8, 918] 
split level 76: [/input-8, 1012] 
split level 77: [/input-8, 1301] 
split level 78: [/input-8, 307] 
split level 79: [/input-8, 1874] 
split level 80: [/input-8, 1291] 
split level 81: [/input-8, 1433] 
split level 82: [/input, 1603] 
split level 83: [/input-8, 1498] 
split level 84: [/input-8, 841] 
split level 85: [/input, 1671] 
split level 86: [/input-8, 1421] 
split level 87: [/input-8, 1506] 
split level 88: [/input-8, 1437] 
split level 89: [/input-8, 973] 
split level 90: [/input-8, 1885] 
split level 91: [/input-8, 1142] 
split level 92: [/input-8, 893] 
split level 93: [/input-8, 1869] 
split level 94: [/input-8, 1425] 
split level 95: [/input-8, 981] 
split level 96: [/input-8, 658] 
split level 97: [/input-8, 297] 
split level 98: [/input-8, 1139] 
split level 99: [/input, 1637] 
split level 100: [/input-8, 849] 
split level 101: [/input-8, 942] 
split level 102: [/input-8, 637] 
split level 103: [/input-8, 1011] 
split level 104: [/input, 482] 
split level 105: [/input-8, 1081] 
split level 106: [/input-8, 73] 
split level 107: [/input-8, 2024] 
split level 108: [/input-8, 953] 
split level 109: [/input-8, 1860] 
split level 110: [/input-8, 1911] 
split level 111: [/input-8, 565] 
split level 112: [/input-8, 1811] 
split level 113: [/input-8, 111] 
split level 114: [/input-8, 1417] 
split level 115: [/input-8, 916] 
split level 116: [/input-8, 65] 
split level 117: [/input, 1705] 
split level 118: [/input-8, 127] 
split level 119: [/input-8, 1352] 
split level 120: [/input-8, 1861] 
split level 121: [/input-8, 635] 
split level 122: [/input-8, 945] 
split level 123: [/input, 1669] 
split level 124: [/input-8, 1867] 
split level 125: [/input, 2169] 
split level 126: [/input-8, 495] 
split level 127: [/input-8, 2009] 
split level 128: [/input, 1721] 
split level 129: [/input-8, 1865] 
split level 130: [/input-8, 494] 
split level 131: [/input, 1641] 
split level 132: [/input-8, 471] 
split level 133: [/input-8, 436] 
split level 134: [/input, 1654] 
split level 135: [/input-8, 116] 
split level 136: [/input-8, 2000] 
split level 137: [/input, 2698] 
split level 138: [/input-8, 470] 
split level 139: [/input, 2291] 
split level 140: [/input-8, 2033] 
split level 141: [/input-8, 1302] 
split level 142: [/input-8, 559] 
split level 143: [/input-8, 936] 
split level 144: [/input-8, 1940] 
split level 145: [/input, 1602] 
split level 146: [/input, 2116] 
split level 147: [/input-8, 1533] 
split level 148: [/input-8, 1039] 
split level 149: [/input-8, 1881] 
split level 150: [/input-8, 1360] 
split level 151: [/input, 570] 
split level 152: [/input-8, 786] 
split level 153: [/input, 2115] 
split level 154: [/input, 2168] 
split level 155: [/input-8, 943] 
split level 156: [/input-8, 2032] 
split level 157: [/input-8, 699] 
split level 158: [/input, 2185] 
split level 159: [/input-8, 1787] 
split level 160: [/input-8, 1490] 
split level 161: [/input-8, 1788] 
split level 162: [/input-8, 1947] 
split level 163: [/input-8, 281] 
split level 164: [/input-8, 415] 
split level 165: [/input, 2699] 
split level 166: [/input, 2343] 
split level 167: [/input-8, 885] 
split level 168: [/input-8, 1465] 
split level 169: [/input, 676] 
split level 170: [/input-8, 1530] 
split level 171: [/input-8, 1120] 
split level 172: [/input-8, 905] 
split level 173: [/input-8, 1440] 
split level 174: [/input-8, 122] 
split level 175: [/input-8, 574] 
split level 176: [/input-8, 1350] 
split level 177: [/input, 293] 
split level 178: [/input, 1524] 
split level 179: [/input-8, 949] 
split level 180: [/input, 95] 
split level 181: [/input, 2345] 
split level 182: [/input-8, 1232] 
split level 183: [/input-8, 1872] 
split level 184: [/input, 2592] 
split level 185: [/input-8, 1448] 
split level 186: [/input-8, 1975] 
split level 187: [/input, 2700] 
split level 188: [/input, 2613] 
split level 189: [/input-8, 426] 
split level 190: [/input, 4] 
split level 191: [/input, 2260] 
split level 192: [/input, 1352] 
split level 193: [/input, 4049] 
split level 194: [/input-8, 961] 
split level 195: [/input, 647] 
split level 196: [/input-8, 1812] 
split level 197: [/input, 11] 
split level 198: [/input, 2359] 
split level 199: [/input, 3841] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.24462175369262695
10 lb beta sum: 0.0, worst -0.24462032318115234
Time: prepare 0.0117    bound 0.0964    transfer 0.0023    finalize 0.0026    func 0.1156    
Accumulated time: func 0.1682    prepare 0.0218    bound 0.1485    transfer 0.0024    finalize 0.0028    
all_split False
======================Cut inference begins======================
max lb tensor(0.41849947) min lb tensor(-0.24461079)
Number of Verified Splits: 5 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.010637760162353516 
BICCOS Cumulative time: 0.010637760162353516
Preprocessing time: 0.010040521621704102 Inference time: 0.0002372264862060547 Add cuts time: 0.00011038780212402344 Cut analysis time: 0.00024962425231933594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22439 (1), -0.22387 (1), -0.22345 (1), -0.22296 (1), -0.22291 (1), -0.22271 (1), -0.22150 (1), -0.22143 (1), -0.22069 (1), -0.22037 (1), -0.22016 (1), -0.21997 (1), -0.21990 (1), -0.21947 (1), -0.21886 (1), -0.21814 (1), -0.21752 (1), -0.21725 (1), -0.21681 (1), -0.21676 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5103    set_bounds 0.0133    solve 0.1157    add 0.2008    
Accumulated time: pickout 0.0003    decision 0.5103    set_bounds 0.0133    solve 0.1157    add 0.2008    
Current (lb-rhs): -0.22439241409301758
50 domains visited
Cumulative time: 0.9347219467163086

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 51] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 51] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 1] [/input-12, 51] [/input-12, 1] [/input-12, 51] [/input-12, 51] [/input-12, 1] [/input-12, 1] [/input-12, 51] [/input-12, 51] [/input-12, 51] 
split level 2: [/input-12, 17] [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 1] 
split level 3: [/input-12, 92] [/input-12, 17] [/input-12, 92] [/input-12, 92] [/input-12, 17] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 17] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.18611526489257812
10 lb beta sum: 0.7892306447029114, worst -0.1330769658088684
Time: prepare 0.0074    bound 0.1350    transfer 0.0014    finalize 0.0028    func 0.1493    
Accumulated time: func 0.3175    prepare 0.0295    bound 0.2834    transfer 0.0038    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.18590927) min lb tensor(-0.13278598)
Number of Verified Splits: 218 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.026511192321777344 
BICCOS Cumulative time: 0.03714895248413086
Preprocessing time: 0.013053655624389648 Inference time: 0.009161233901977539 Add cuts time: 0.004083395004272461 Cut analysis time: 0.0002129077911376953
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0082    decision 0.0238    set_bounds 0.0150    solve 0.1494    add 0.0169    
Accumulated time: pickout 0.0085    decision 0.5341    set_bounds 0.0283    solve 0.2652    add 0.2177    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 51]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.82193281e+29, 1.56261966e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 51]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.82193281e+29, 2.12775275e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 51]), tensor([ 1., -1.]), tensor([0, 0]), tensor([1.82307511e-13, 1.68939635e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 51]), tensor([1., 1.]), tensor([0, 0]), tensor([1.82307511e-13, 1.94098517e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.06447458267211914

all verified at 0th iter
Time: prepare 0.0005    bound 0.0049    transfer 0.0001    finalize 0.0002    func 0.0057    
Accumulated time: func 0.3232    prepare 0.0300    bound 0.2883    transfer 0.0039    finalize 0.0057    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 197.09878849983215
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 197.09869837760925
Verifying property 4 with 1 instances.
##### Instance 139 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  1.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.50626087]], device='cuda:0') need to verify.
Model prediction is: tensor([-7.46985912, -9.78631687, -3.83598518, -5.51694536, -3.54354000,
        -5.34781790, -2.52311063, -5.68112326, -9.51543331, -9.21476460],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.50626087]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 439
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 269
Node /15 input 0: size torch.Size([100]) unstable 23
-----------------
# of unstable neurons: 731
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010180473327636719
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5062594413757324
10 lb beta sum: 0.0, worst -0.5062627792358398
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    func 0.0526    
Accumulated time: func 0.0526    prepare 0.0002    bound 0.0522    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] 
split level 1: [/input-12, 51] 
split level 2: [/input-12, 41] 
split level 3: [/input-12, 92] 
split level 4: [/input-12, 38] 
split level 5: [/input-12, 1] 
split level 6: [/input-12, 26] 
split level 7: [/input-12, 17] 
split level 8: [/input-12, 54] 
split level 9: [/input-12, 46] 
split level 10: [/input-12, 33] 
split level 11: [/input-12, 10] 
split level 12: [/input-8, 850] 
split level 13: [/input-8, 88] 
split level 14: [/input-8, 1427] 
split level 15: [/input-8, 95] 
split level 16: [/input-8, 923] 
split level 17: [/input-8, 932] 
split level 18: [/input-8, 859] 
split level 19: [/input-8, 292] 
split level 20: [/input-8, 988] 
split level 21: [/input-8, 660] 
split level 22: [/input-12, 68] 
split level 23: [/input-8, 289] 
split level 24: [/input-8, 867] 
split level 25: [/input-8, 809] 
split level 26: [/input-8, 1420] 
split level 27: [/input-8, 989] 
split level 28: [/input, 1603] 
split level 29: [/input-8, 858] 
split level 30: [/input-8, 1873] 
split level 31: [/input-12, 40] 
split level 32: [/input-8, 291] 
split level 33: [/input-8, 434] 
split level 34: [/input-8, 933] 
split level 35: [/input-8, 1828] 
split level 36: [/input-8, 1428] 
split level 37: [/input-8, 2008] 
split level 38: [/input, 1637] 
split level 39: [/input-8, 80] 
split level 40: [/input-8, 994] 
split level 41: [/input-8, 1437] 
split level 42: [/input-8, 297] 
split level 43: [/input-8, 972] 
split level 44: [/input-8, 981] 
split level 45: [/input-8, 307] 
split level 46: [/input, 1669] 
split level 47: [/input-8, 485] 
split level 48: [/input, 1674] 
split level 49: [/input-8, 1426] 
split level 50: [/input-8, 1005] 
split level 51: [/input-8, 985] 
split level 52: [/input-8, 1865] 
split level 53: [/input-8, 85] 
split level 54: [/input-8, 973] 
split level 55: [/input-8, 1497] 
split level 56: [/input-8, 1421] 
split level 57: [/input-8, 817] 
split level 58: [/input-8, 1429] 
split level 59: [/input-8, 302] 
split level 60: [/input-8, 1011] 
split level 61: [/input-8, 1829] 
split level 62: [/input-8, 1874] 
split level 63: [/input, 1654] 
split level 64: [/input-8, 436] 
split level 65: [/input-8, 849] 
split level 66: [/input-8, 2024] 
split level 67: [/input-8, 427] 
split level 68: [/input-8, 841] 
split level 69: [/input-8, 470] 
split level 70: [/input-8, 471] 
split level 71: [/input-8, 110] 
split level 72: [/input-8, 89] 
split level 73: [/input, 1671] 
split level 74: [/input-8, 522] 
split level 75: [/input-8, 1012] 
split level 76: [/input-8, 1142] 
split level 77: [/input-8, 281] 
split level 78: [/input-8, 674] 
split level 79: [/input-8, 293] 
split level 80: [/input-8, 1947] 
split level 81: [/input-8, 1019] 
split level 82: [/input-8, 565] 
split level 83: [/input-8, 1139] 
split level 84: [/input-8, 1486] 
split level 85: [/input, 1705] 
split level 86: [/input, 1721] 
split level 87: [/input-8, 116] 
split level 88: [/input-8, 1454] 
split level 89: [/input-8, 491] 
split level 90: [/input-8, 942] 
split level 91: [/input-8, 426] 
split level 92: [/input-8, 1857] 
split level 93: [/input-8, 1495] 
split level 94: [/input-8, 1425] 
split level 95: [/input, 2693] 
split level 96: [/input-8, 2000] 
split level 97: [/input-8, 415] 
split level 98: [/input-8, 1413] 
split level 99: [/input-8, 531] 
split level 100: [/input, 1556] 
split level 101: [/input, 2168] 
split level 102: [/input-8, 786] 
split level 103: [/input-8, 936] 
split level 104: [/input-8, 438] 
split level 105: [/input-8, 530] 
split level 106: [/input, 1767] 
split level 107: [/input, 2085] 
split level 108: [/input, 2613] 
split level 109: [/input-8, 1433] 
split level 110: [/input-8, 1452] 
split level 111: [/input-8, 997] 
split level 112: [/input-8, 916] 
split level 113: [/input, 2115] 
split level 114: [/input, 1641] 
split level 115: [/input, 2152] 
split level 116: [/input-8, 66] 
split level 117: [/input-8, 111] 
split level 118: [/input, 1734] 
split level 119: [/input, 2698] 
split level 120: [/input-8, 445] 
split level 121: [/input, 174] 
split level 122: [/input-8, 1417] 
split level 123: [/input, 2116] 
split level 124: [/input-8, 457] 
split level 125: [/input, 1735] 
split level 126: [/input, 300] 
split level 127: [/input-8, 65] 
split level 128: [/input, 482] 
split level 129: [/input, 2069] 
split level 130: [/input-8, 1533] 
split level 131: [/input, 1589] 
split level 132: [/input-8, 494] 
split level 133: [/input, 3862] 
split level 134: [/input-8, 495] 
split level 135: [/input-8, 1133] 
split level 136: [/input-8, 2033] 
split level 137: [/input, 2185] 
split level 138: [/input, 1718] 
split level 139: [/input-8, 1232] 
split level 140: [/input, 2150] 
split level 141: [/input, 2133] 
split level 142: [/input-8, 2032] 
split level 143: [/input-8, 1856] 
split level 144: [/input, 1602] 
split level 145: [/input-8, 1864] 
split level 146: [/input-8, 834] 
split level 147: [/input, 2291] 
split level 148: [/input-8, 1498] 
split level 149: [/input, 1100] 
split level 150: [/input-8, 1530] 
split level 151: [/input, 1765] 
split level 152: [/input-8, 1975] 
split level 153: [/input-8, 430] 
split level 154: [/input, 2090] 
split level 155: [/input-8, 1872] 
split level 156: [/input, 2699] 
split level 157: [/input-8, 1409] 
split level 158: [/input-8, 949] 
split level 159: [/input, 3861] 
split level 160: [/input-8, 2009] 
split level 161: [/input, 2108] 
split level 162: [/input, 2088] 
split level 163: [/input, 2592] 
split level 164: [/input, 2260] 
split level 165: [/input, 3892] 
split level 166: [/input, 282] 
split level 167: [/input, 3878] 
split level 168: [/input, 1352] 
split level 169: [/input-8, 635] 
split level 170: [/input, 46] 
split level 171: [/input, 3869] 
split level 172: [/input, 2101] 
split level 173: [/input-8, 1360] 
split level 174: [/input-8, 1787] 
split level 175: [/input-8, 73] 
split level 176: [/input, 4049] 
split level 177: [/input, 1524] 
split level 178: [/input-8, 1352] 
split level 179: [/input-8, 1490] 
split level 180: [/input, 1754] 
split level 181: [/input, 2182] 
split level 182: [/input, 1513] 
split level 183: [/input, 676] 
split level 184: [/input-8, 1120] 
split level 185: [/input, 1452] 
split level 186: [/input, 3357] 
split level 187: [/input-8, 1291] 
split level 188: [/input, 3448] 
split level 189: [/input, 3867] 
split level 190: [/input, 2203] 
split level 191: [/input, 2107] 
split level 192: [/input-8, 1008] 
split level 193: [/input, 647] 
split level 194: [/input, 2188] 
split level 195: [/input, 3560] 
split level 196: [/input, 3021] 
split level 197: [/input, 3386] 
split level 198: [/input, 1455] 
split level 199: [/input-8, 1839] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5061740875244141
10 lb beta sum: 0.0, worst -0.5061821937561035
Time: prepare 0.0117    bound 0.0972    transfer 0.0009    finalize 0.0028    func 0.1153    
Accumulated time: func 0.1679    prepare 0.0217    bound 0.1494    transfer 0.0010    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.40367413) min lb tensor(-0.50617170)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010911226272583008 
BICCOS Cumulative time: 0.010911226272583008
Preprocessing time: 0.01012730598449707 Inference time: 0.000156402587890625 Add cuts time: 6.67572021484375e-05 Cut analysis time: 0.000560760498046875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.48849 (1), -0.48792 (1), -0.48754 (1), -0.48726 (1), -0.48583 (1), -0.48515 (1), -0.48433 (1), -0.48392 (1), -0.48386 (1), -0.48346 (1), -0.48335 (1), -0.48328 (1), -0.48165 (1), -0.48136 (1), -0.48094 (1), -0.48011 (1), -0.47983 (1), -0.47808 (1), -0.47807 (1), -0.47700 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5122    set_bounds 0.0098    solve 0.1154    add 0.1504    
Accumulated time: pickout 0.0003    decision 0.5122    set_bounds 0.0098    solve 0.1154    add 0.1504    
Current (lb-rhs): -0.4884915351867676
50 domains visited
Cumulative time: 0.867100715637207

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 41] [/input-12, 41] [/input-12, 51] [/input-12, 51] [/input-12, 51] 
split level 1: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 92] [/input-12, 41] [/input-12, 92] [/input-12, 92] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 3: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4442729949951172
10 lb beta sum: 0.580084502696991, worst -0.43155229091644287
Time: prepare 0.0069    bound 0.1148    transfer 0.0024    finalize 0.0021    func 0.1288    
Accumulated time: func 0.2967    prepare 0.0289    bound 0.2641    transfer 0.0034    finalize 0.0050    
all_split False
======================Cut inference begins======================
max lb tensor(0.06436861) min lb tensor(-0.43132174)
Number of Verified Splits: 12 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.013596773147583008 
BICCOS Cumulative time: 0.024507999420166016
Preprocessing time: 0.012000322341918945 Inference time: 0.0005474090576171875 Add cuts time: 0.0002543926239013672 Cut analysis time: 0.0007946491241455078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23470 (2), -0.23435 (2), -0.23302 (2), -0.23191 (2), -0.23077 (2), -0.22997 (2), -0.22991 (2), -0.22731 (2), -0.22637 (2), -0.22625 (2), -0.22572 (2), -0.22556 (2), -0.22311 (2), -0.22236 (2), -0.22210 (2), -0.22113 (2), -0.21566 (2), -0.21550 (2), -0.21354 (2), -0.20685 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0198    set_bounds 0.0149    solve 0.1289    add 0.0770    
Accumulated time: pickout 0.0014    decision 0.5320    set_bounds 0.0247    solve 0.2442    add 0.2274    
Current (lb-rhs): -0.23469796776771545
100 domains visited
Cumulative time: 1.1226437091827393

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 51] [/input-12, 41] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 41] [/input-12, 92] 
split level 1: [/input-12, 92] [/input-12, 92] [/input-12, 41] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 92] [/input-12, 1] 
split level 2: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 17] 
split level 3: [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 46] [/input-12, 17] [/input-12, 46] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.222747802734375
10 lb beta sum: 0.9273459911346436, worst -0.20668578147888184
Time: prepare 0.0063    bound 0.1146    transfer 0.0007    finalize 0.0020    func 0.1267    
Accumulated time: func 0.4234    prepare 0.0354    bound 0.3788    transfer 0.0041    finalize 0.0070    
all_split False
======================Cut inference begins======================
max lb tensor(0.14580679) min lb tensor(-0.19941115)
Number of Verified Splits: 61 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 9
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.015824317932128906 
BICCOS Cumulative time: 0.04033231735229492
Preprocessing time: 0.011792659759521484 Inference time: 0.0028166770935058594 Add cuts time: 0.0008165836334228516 Cut analysis time: 0.00039839744567871094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04815 (3), -0.04722 (3), -0.04629 (3), -0.04446 (3), -0.04413 (3), -0.04390 (3), -0.04357 (3), -0.04349 (3), -0.04334 (3), -0.04209 (3), -0.04107 (3), -0.04066 (3), -0.03809 (3), -0.03803 (3), -0.03509 (3), -0.03503 (3), -0.03434 (3), -0.03413 (3), -0.03267 (3), -0.03225 (3), 
Length of domains: 50
Time: pickout 0.0009    decision 0.0192    set_bounds 0.0155    solve 0.1269    add 0.0853    
Accumulated time: pickout 0.0023    decision 0.5512    set_bounds 0.0401    solve 0.3711    add 0.3127    
Current (lb-rhs): -0.04814642667770386
150 domains visited
Cumulative time: 1.3864412307739258

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 1: [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 17] [/input-12, 17] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 17] [/input-12, 46] [/input-12, 46] [/input-12, 17] [/input-12, 17] [/input-12, 17] [/input-12, 46] [/input-12, 46] [/input-12, 17] [/input-12, 17] 
split level 3: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 46] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.052874088287353516
10 lb beta sum: 0.7248147130012512, worst -0.03690361976623535
Time: prepare 0.0061    bound 0.1155    transfer 0.0007    finalize 0.0020    func 0.1269    
Accumulated time: func 0.5503    prepare 0.0418    bound 0.4943    transfer 0.0048    finalize 0.0090    
all_split False
======================Cut inference begins======================
max lb tensor(0.29559505) min lb tensor(-0.00389838)
Number of Verified Splits: 398 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 13
#cuts 4-6: 13
#cuts >= 20: 0
BICCOS time: 0.039885520935058594 
BICCOS Cumulative time: 0.08021783828735352
Preprocessing time: 0.011627674102783203 Inference time: 0.01979517936706543 Add cuts time: 0.007680654525756836 Cut analysis time: 0.000782012939453125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0009    decision 0.0190    set_bounds 0.0156    solve 0.1270    add 0.0245    
Accumulated time: pickout 0.0032    decision 0.5702    set_bounds 0.0557    solve 0.4981    add 0.3373    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51]), tensor([-1., -1.]), tensor([0, 0]), tensor([2.55207855e-10, 1.29910454e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.55207855e-10, 1.85313627e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51,  1]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([6.92103042e-11, 1.48648635e-01, 5.45019656e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51,  1, 92]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([6.92103042e-11, 1.48648635e-01, 1.35761753e-01, 1.36166796e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51,  1, 92]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([6.92103042e-11, 1.48648635e-01, 1.35761753e-01, 5.62622398e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51, 92]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([6.92103042e-11, 1.67331621e-01, 1.41800091e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51, 92,  1]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([6.92103042e-11, 1.67331621e-01, 9.29239839e-02, 5.78576177e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41, 51, 92,  1]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([6.92103042e-11, 1.67331621e-01, 9.29239839e-02, 6.04494661e-02]), tensor([0, 1, 2, 3]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.32529211044311523
10 lb beta sum: 2.1049885749816895, worst -0.3018186688423157
Time: prepare 0.0005    bound 0.1247    transfer 0.0001    finalize 0.0002    func 0.1255    
Accumulated time: func 0.6758    prepare 0.0422    bound 0.6189    transfer 0.0049    finalize 0.0092    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 92] [/input-12, 92] 
split level 1: [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 26] [/input-12, 26] 
split level 3: [/input-12, 17] [/input-12, 17] 
split level 4: [/input-12, 46] [/input-12, 33] 
split level 5: [/input-12, 33] [/input-12, 46] 
split level 6: [/input-12, 10] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 1.317943811416626, worst -0.08894610404968262
10 lb beta sum: 1.3190900087356567, worst -0.08775210380554199
Time: prepare 0.0095    bound 0.1268    transfer 0.0013    finalize 0.0012    func 0.1406    
Accumulated time: func 0.8164    prepare 0.0521    bound 0.7457    transfer 0.0062    finalize 0.0104    
all_split False
======================Cut inference begins======================
max lb tensor(0.34541583) min lb tensor(-0.08725953)
Number of Verified Splits: 246 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.320529580116272, worst -0.41070806980133057
10 lb beta sum: 1.6369553804397583, worst -0.2733590006828308
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 52.
#cuts 1-3: 14
#cuts 4-6: 35
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.43074750900268555 
BICCOS Cumulative time: 0.5109653472900391
Preprocessing time: 0.006505727767944336 Inference time: 0.41169166564941406 Add cuts time: 0.010863304138183594 Cut analysis time: 0.0016868114471435547
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08726 (7), -0.07200 (7), -0.03899 (7), -0.03200 (7), -0.02979 (7), -0.02331 (7), -0.01331 (7), -0.01069 (7), -0.00672 (7), -0.00424 (7), 
Length of domains: 10
Time: pickout 0.0005    decision 0.0191    set_bounds 0.0188    solve 0.1414    add 0.0009    
Accumulated time: pickout 0.0037    decision 0.5893    set_bounds 0.0746    solve 0.6395    add 0.3381    
Current (lb-rhs): -0.08725953102111816
160 domains visited
Cumulative time: 2.371290445327759

BaB round 2
batch: 10
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
split level 1: [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] [/input-12, 38] 
split level 2: [/input-8, 859] [/input-8, 988] [/input-8, 859] [/input-8, 859] [/input-8, 859] [/input-8, 859] [/input-8, 988] [/input-8, 859] [/input-8, 859] [/input-8, 859] 
split level 3: [/input-8, 867] [/input-8, 859] [/input-8, 291] [/input-8, 291] [/input-8, 291] [/input-8, 988] [/input-8, 859] [/input-8, 291] [/input-8, 291] [/input-8, 291] 
split level 4: [/input-8, 858] [/input-8, 291] [/input-8, 858] [/input-8, 858] [/input-8, 427] [/input-8, 858] [/input-8, 291] [/input-8, 858] [/input-8, 858] [/input-8, 281] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06752157211303711
10 lb beta sum: 0.0431610532104969, worst -0.06465768814086914
Time: prepare 0.0062    bound 0.1306    transfer 0.0017    finalize 0.0014    func 0.1420    
Accumulated time: func 0.9585    prepare 0.0586    bound 0.8763    transfer 0.0080    finalize 0.0118    
all_split False
======================Cut inference begins======================
max lb tensor(0.36717796) min lb tensor(-0.06448555)
Number of Verified Splits: 291 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3358311653137207
10 lb beta sum: 0.8137511014938354, worst -0.21785202622413635
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 58.
#cuts 1-3: 14
#cuts 4-6: 35
#cuts 7-9: 9
#cuts >= 20: 0
BICCOS time: 0.35442495346069336 
BICCOS Cumulative time: 0.8653903007507324
Preprocessing time: 0.009523630142211914 Inference time: 0.3286728858947754 Add cuts time: 0.014194011688232422 Cut analysis time: 0.002034425735473633
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06449 (12), -0.06180 (12), -0.05758 (12), -0.05614 (12), -0.05462 (12), -0.05102 (12), -0.05003 (12), -0.04844 (12), -0.04719 (12), -0.04606 (12), -0.04193 (12), -0.04159 (12), -0.04014 (12), -0.03833 (12), -0.03563 (12), -0.03331 (12), -0.01188 (12), -0.01088 (12), -0.00966 (12), -0.00853 (12), 
Length of domains: 29
Time: pickout 0.0011    decision 0.0160    set_bounds 0.0255    solve 0.1421    add 0.0469    
Accumulated time: pickout 0.0048    decision 0.6053    set_bounds 0.1001    solve 0.7816    add 0.3850    
Current (lb-rhs): -0.06448554992675781
189 domains visited
Cumulative time: 2.9664769172668457

BaB round 3
batch: 29
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 809] [/input-8, 809] [/input-8, 988] [/input-8, 809] [/input-8, 809] [/input-8, 988] [/input-8, 809] [/input-8, 809] [/input-8, 988] [/input-8, 809] 
split level 1: [/input-8, 994] [/input-8, 858] [/input-8, 1873] [/input-8, 994] [/input-8, 994] [/input-8, 1873] [/input-8, 994] [/input-8, 994] [/input-8, 1873] [/input-8, 994] 
split level 2: [/input-8, 858] [/input-8, 994] [/input-12, 40] [/input-8, 858] [/input-8, 858] [/input-12, 40] [/input-8, 858] [/input-8, 858] [/input-12, 40] [/input-8, 858] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05118846893310547
10 lb beta sum: 0.21771880984306335, worst -0.04849576950073242
Time: prepare 0.0047    bound 0.1340    transfer 0.0015    finalize 0.0014    func 0.1432    
Accumulated time: func 1.1017    prepare 0.0635    bound 1.0103    transfer 0.0095    finalize 0.0132    
all_split False
======================Cut inference begins======================
max lb tensor(0.02909088) min lb tensor(-0.04841518)
Number of Verified Splits: 152 of 232
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 37.
#cuts 1-3: 16
#cuts 4-6: 17
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.030541181564331055 
BICCOS Cumulative time: 0.8959314823150635
Preprocessing time: 0.0071108341217041016 Inference time: 0.018319129943847656 Add cuts time: 0.003889799118041992 Cut analysis time: 0.0012214183807373047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04842 (15), -0.04576 (15), -0.04570 (15), -0.04458 (15), -0.04212 (15), -0.04168 (15), -0.04166 (15), -0.04115 (15), -0.04043 (15), -0.03865 (15), -0.03797 (15), -0.03756 (15), -0.03726 (15), -0.03636 (15), -0.03628 (15), -0.03617 (15), -0.03432 (15), -0.03422 (15), -0.03366 (15), -0.03319 (15), 
Length of domains: 80
Time: pickout 0.0018    decision 0.0153    set_bounds 0.0161    solve 0.1432    add 0.0754    
Accumulated time: pickout 0.0066    decision 0.6206    set_bounds 0.1161    solve 0.9248    add 0.4604    
Current (lb-rhs): -0.048415184020996094
269 domains visited
Cumulative time: 3.2562389373779297

BaB round 4
batch: 80
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] [/input-8, 1873] 
split level 1: [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.040911197662353516
10 lb beta sum: 0.31019264459609985, worst -0.038138389587402344
Time: prepare 0.0064    bound 0.1284    transfer 0.0006    finalize 0.0014    func 0.1388    
Accumulated time: func 1.2405    prepare 0.0701    bound 1.1387    transfer 0.0101    finalize 0.0146    
all_split False
======================Cut inference begins======================
max lb tensor(0.02789402) min lb tensor(-0.03804111)
Number of Verified Splits: 184 of 320
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 53.
#cuts 1-3: 15
#cuts 4-6: 34
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.041568756103515625 
BICCOS Cumulative time: 0.9375002384185791
Preprocessing time: 0.009401321411132812 Inference time: 0.025155305862426758 Add cuts time: 0.005237579345703125 Cut analysis time: 0.0017745494842529297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03804 (17), -0.03541 (17), -0.03513 (17), -0.03425 (17), -0.03150 (17), -0.03136 (17), -0.03135 (17), -0.03042 (17), -0.03016 (17), -0.02818 (17), -0.02756 (17), -0.02700 (17), -0.02688 (17), -0.02598 (17), -0.02590 (17), -0.02556 (17), -0.02398 (17), -0.02387 (17), -0.02372 (17), -0.02332 (17), 
Length of domains: 136
Time: pickout 0.0148    decision 0.0155    set_bounds 0.0233    solve 0.1389    add 0.0757    
Accumulated time: pickout 0.0215    decision 0.6361    set_bounds 0.1395    solve 1.0637    add 0.5361    
Current (lb-rhs): -0.038041114807128906
405 domains visited
Cumulative time: 3.5779194831848145

BaB round 5
batch: 136
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 867] [/input-8, 867] [/input-8, 1428] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 1428] [/input-8, 1428] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.035848140716552734
10 lb beta sum: 0.3074636161327362, worst -0.03321123123168945
Time: prepare 0.0058    bound 0.1624    transfer 0.0035    finalize 0.0017    func 0.1753    
Accumulated time: func 1.4158    prepare 0.0762    bound 1.3012    transfer 0.0136    finalize 0.0162    
all_split False
======================Cut inference begins======================
max lb tensor(0.01716665) min lb tensor(-0.03314686)
Number of Verified Splits: 137 of 272
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 64.
#cuts 1-3: 18
#cuts 4-6: 42
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.036483049392700195 
BICCOS Cumulative time: 0.9739832878112793
Preprocessing time: 0.00880885124206543 Inference time: 0.020214080810546875 Add cuts time: 0.005227088928222656 Cut analysis time: 0.0022330284118652344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03315 (18), -0.03102 (18), -0.02946 (18), -0.02901 (18), -0.02715 (18), -0.02681 (18), -0.02677 (18), -0.02614 (18), -0.02591 (18), -0.02548 (18), -0.02327 (18), -0.02252 (18), -0.02244 (18), -0.02224 (18), -0.02206 (18), -0.02154 (18), -0.02149 (18), -0.01949 (18), -0.01880 (18), -0.01873 (18), 
Length of domains: 135
Time: pickout 0.0156    decision 0.0239    set_bounds 0.0144    solve 0.1754    add 0.0760    
Accumulated time: pickout 0.0370    decision 0.6599    set_bounds 0.1538    solve 1.2391    add 0.6122    
Current (lb-rhs): -0.03314685821533203
540 domains visited
Cumulative time: 3.9278504848480225

BaB round 6
batch: 135
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1428] [/input-8, 1428] [/input-8, 1428] [/input-8, 1428] [/input-8, 1428] [/input-8, 867] [/input-8, 867] [/input-8, 1428] [/input-8, 1428] [/input-8, 1428] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02974843978881836
10 lb beta sum: 0.293114572763443, worst -0.035054564476013184
Time: prepare 0.0056    bound 0.1517    transfer 0.0043    finalize 0.0015    func 0.1649    
Accumulated time: func 1.5807    prepare 0.0820    bound 1.4528    transfer 0.0179    finalize 0.0177    
all_split False
======================Cut inference begins======================
max lb tensor(0.01638937) min lb tensor(-0.02716541)
Number of Verified Splits: 127 of 270
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 63.
#cuts 1-3: 25
#cuts 4-6: 33
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.033277034759521484 
BICCOS Cumulative time: 1.0072603225708008
Preprocessing time: 0.008262395858764648 Inference time: 0.018213748931884766 Add cuts time: 0.004752159118652344 Cut analysis time: 0.0020487308502197266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02717 (19), -0.02503 (19), -0.02403 (19), -0.02395 (19), -0.02349 (19), -0.02182 (19), -0.02118 (19), -0.02118 (19), -0.02079 (19), -0.02070 (19), -0.02039 (19), -0.02037 (19), -0.01936 (19), -0.01817 (19), -0.01799 (19), -0.01755 (19), -0.01734 (19), -0.01722 (19), -0.01684 (19), -0.01642 (19), 
Length of domains: 143
Time: pickout 0.0118    decision 0.0201    set_bounds 0.0125    solve 0.1649    add 0.0752    
Accumulated time: pickout 0.0488    decision 0.6800    set_bounds 0.1664    solve 1.4041    add 0.6874    
Current (lb-rhs): -0.02716541290283203
683 domains visited
Cumulative time: 4.253349781036377

BaB round 7
batch: 143
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 1865] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.024634361267089844
10 lb beta sum: 0.27914342284202576, worst -0.022062301635742188
Time: prepare 0.0058    bound 0.1582    transfer 0.0029    finalize 0.0016    func 0.1704    
Accumulated time: func 1.7511    prepare 0.0880    bound 1.6110    transfer 0.0208    finalize 0.0193    
all_split False
======================Cut inference begins======================
max lb tensor(0.00520420) min lb tensor(-0.02202129)
Number of Verified Splits: 129 of 286
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 66.
#cuts 1-3: 25
#cuts 4-6: 37
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.03503227233886719 
BICCOS Cumulative time: 1.042292594909668
Preprocessing time: 0.00871419906616211 Inference time: 0.01919102668762207 Add cuts time: 0.004917621612548828 Cut analysis time: 0.0022094249725341797
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02202 (20), -0.02179 (20), -0.01988 (20), -0.01956 (20), -0.01881 (20), -0.01872 (20), -0.01854 (20), -0.01835 (20), -0.01816 (20), -0.01657 (20), -0.01605 (20), -0.01604 (20), -0.01597 (20), -0.01577 (20), -0.01557 (20), -0.01550 (20), -0.01528 (20), -0.01525 (20), -0.01505 (20), -0.01505 (20), 
Length of domains: 157
Time: pickout 0.0157    decision 0.0202    set_bounds 0.0125    solve 0.1705    add 0.0762    
Accumulated time: pickout 0.0645    decision 0.7001    set_bounds 0.1788    solve 1.5746    add 0.7636    
Current (lb-rhs): -0.02202129364013672
840 domains visited
Cumulative time: 4.59241247177124

BaB round 8
batch: 157
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1865] [/input-8, 1865] [/input-8, 1865] [/input-8, 1865] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 973] [/input-8, 1865] [/input-8, 973] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02254962921142578
10 lb beta sum: 0.28043633699417114, worst -0.03208986669778824
Time: prepare 0.0062    bound 0.1581    transfer 0.0033    finalize 0.0019    func 0.1718    
Accumulated time: func 1.9228    prepare 0.0945    bound 1.7692    transfer 0.0241    finalize 0.0212    
all_split False
======================Cut inference begins======================
max lb tensor(0.01863195) min lb tensor(-0.01978016)
Number of Verified Splits: 165 of 314
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 50.
#cuts 1-3: 24
#cuts 4-6: 25
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.04318523406982422 
BICCOS Cumulative time: 1.0854778289794922
Preprocessing time: 0.010597944259643555 Inference time: 0.02631998062133789 Add cuts time: 0.004606485366821289 Cut analysis time: 0.0016608238220214844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01978 (21), -0.01761 (21), -0.01658 (21), -0.01644 (21), -0.01642 (21), -0.01613 (21), -0.01427 (21), -0.01415 (21), -0.01390 (21), -0.01386 (21), -0.01381 (21), -0.01325 (21), -0.01323 (21), -0.01314 (21), -0.01303 (21), -0.01298 (21), -0.01277 (21), -0.01276 (21), -0.01188 (21), -0.01169 (21), 
Length of domains: 149
Time: pickout 0.0149    decision 0.0212    set_bounds 0.0136    solve 0.1719    add 0.0406    
Accumulated time: pickout 0.0793    decision 0.7214    set_bounds 0.1924    solve 1.7465    add 0.8042    
Current (lb-rhs): -0.01978015899658203
989 domains visited
Cumulative time: 4.899652004241943

BaB round 9
batch: 149
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] [/input-8, 985] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.01844501495361328
10 lb beta sum: 0.2748563587665558, worst -0.015841960906982422
Time: prepare 0.0060    bound 0.1539    transfer 0.0007    finalize 0.0019    func 0.1645    
Accumulated time: func 2.0874    prepare 0.1007    bound 1.9231    transfer 0.0248    finalize 0.0231    
all_split False
======================Cut inference begins======================
max lb tensor(0.01712847) min lb tensor(-0.01579142)
Number of Verified Splits: 202 of 298
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 44.
#cuts 1-3: 22
#cuts 4-6: 21
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.04719281196594238 
BICCOS Cumulative time: 1.1326706409454346
Preprocessing time: 0.009893655776977539 Inference time: 0.03207039833068848 Add cuts time: 0.0039904117584228516 Cut analysis time: 0.0012383460998535156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01579 (22), -0.01365 (22), -0.01249 (22), -0.01237 (22), -0.01233 (22), -0.01196 (22), -0.01024 (22), -0.01022 (22), -0.00993 (22), -0.00992 (22), -0.00965 (22), -0.00910 (22), -0.00899 (22), -0.00898 (22), -0.00896 (22), -0.00891 (22), -0.00867 (22), -0.00856 (22), -0.00771 (22), -0.00749 (22), 
Length of domains: 96
Time: pickout 0.0032    decision 0.0211    set_bounds 0.0137    solve 0.1647    add 0.0907    
Accumulated time: pickout 0.0825    decision 0.7425    set_bounds 0.2061    solve 1.9112    add 0.8949    
Current (lb-rhs): -0.01579141616821289
1085 domains visited
Cumulative time: 5.248708486557007

BaB round 10
batch: 96
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] [/input-8, 850] 
split level 1: [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] [/input-8, 817] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.014037132263183594
10 lb beta sum: 0.10179530084133148, worst -0.0113677978515625
Time: prepare 0.0075    bound 0.1303    transfer 0.0013    finalize 0.0018    func 0.1434    
Accumulated time: func 2.2308    prepare 0.1084    bound 2.0534    transfer 0.0261    finalize 0.0249    
all_split False
======================Cut inference begins======================
max lb tensor(0.03285360) min lb tensor(-0.01132774)
Number of Verified Splits: 339 of 384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 42.
#cuts 1-3: 28
#cuts 4-6: 13
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.07188224792480469 
BICCOS Cumulative time: 1.2045528888702393
Preprocessing time: 0.011316299438476562 Inference time: 0.05475425720214844 Add cuts time: 0.004370212554931641 Cut analysis time: 0.0014414787292480469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01133 (24), -0.00916 (24), -0.00803 (24), -0.00794 (24), -0.00789 (24), -0.00756 (24), -0.00575 (24), -0.00570 (24), -0.00543 (24), -0.00530 (24), -0.00528 (24), -0.00458 (24), -0.00457 (24), -0.00447 (24), -0.00447 (24), -0.00442 (24), -0.00428 (24), -0.00410 (24), -0.00399 (24), -0.00321 (24), 
Length of domains: 45
Time: pickout 0.0221    decision 0.0169    set_bounds 0.0189    solve 0.1435    add 0.0016    
Accumulated time: pickout 0.1046    decision 0.7594    set_bounds 0.2250    solve 2.0547    add 0.8965    
Current (lb-rhs): -0.011327743530273438
1130 domains visited
Cumulative time: 5.525400638580322

BaB round 11
batch: 45
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] [/input-8, 972] 
split level 1: [/input-8, 1421] [/input-8, 1421] [/input-8, 1421] [/input-8, 1421] [/input-8, 1429] [/input-8, 1421] [/input-8, 1421] [/input-8, 1421] [/input-8, 1421] [/input-8, 1421] 
split level 2: [/input-8, 1429] [/input-8, 1429] [/input-8, 1429] [/input-8, 1429] [/input-8, 1421] [/input-8, 1429] [/input-8, 1429] [/input-8, 1429] [/input-8, 1429] [/input-8, 1429] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.00024890899658203125

all verified at 0th iter
Time: prepare 0.0069    bound 0.0075    transfer 0.0012    finalize 0.0017    func 0.0195    
Accumulated time: func 2.2503    prepare 0.1155    bound 2.0609    transfer 0.0273    finalize 0.0265    
all_split False
======================Cut inference begins======================
max lb tensor(0.01808643) min lb tensor(0.00024891)
Number of Verified Splits: 360 of 360
No cut inferred: All or none verified.
Total number of valid cuts: 42.
#cuts 1-3: 28
#cuts 4-6: 13
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.010491371154785156 
BICCOS Cumulative time: 1.2150442600250244
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0019    decision 0.0172    set_bounds 0.0194    solve 0.0196    add 0.0004    
Accumulated time: pickout 0.1065    decision 0.7766    set_bounds 0.2444    solve 2.0743    add 0.8969    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1130 domains visited
Cumulative time: 5.595664978027344


Properties batch 5, size 1
Remaining timeout: 191.20251417160034
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 191.20242190361023
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 191.2023959159851
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 191.20237636566162
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 8.7977 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 140, vnnlib ID: 140 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.70108557, -2.61450195, -7.88389778, -7.46980858, -7.10053349,
         -7.85311460, -7.32898045, -5.37792873, -5.26348686, -0.13527048]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [517]; unstable size 517; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 190, 1, 517] with unstable size 189 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 517] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 517] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [189]; unstable size 189; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 189] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 189] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.44307852, 1.46007872, 5.86254549, 5.68103218, 5.60793352, 5.96620178,
         5.60759068, 3.70175457, 3.77148247]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0778 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 141, vnnlib ID: 141 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.93660259, -3.64990735, -5.69686222, -5.46793270, -5.41355324,
         -6.32598066, -5.22664785, -6.09948301, -3.93378472, -2.67238760]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [480]; unstable size 480; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 193, 1, 480] with unstable size 192 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 480] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 480] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [192]; unstable size 192; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 192] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 192] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.12637162,  0.23386836,  0.06982780,  0.04919529,  0.70030725,
         -0.06877613,  0.36111951, -0.89804649, -1.82256603]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.93660259, -3.64990735, -5.69686222, -5.46793270, -5.41355324,
         -6.32598066, -5.22664785, -6.09948301, -3.93378472, -2.67238760]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.93660212, -3.64990807, -5.69686222, -5.46793365, -5.41355324,
          -6.32598066, -5.22664833, -6.09948254, -3.93378496, -2.67238760],
         [-4.93660212, -3.64990807, -5.69686222, -5.46793365, -5.41355324,
          -6.32598066, -5.22664833, -6.09948254, -3.93378496, -2.67238760]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.28669405,  1.57674026,  0.28387690, -0.97752047]]],
       device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]],


         [[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]],


         [[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]],


         [[[-1.90952384, -1.84603179, -1.76666665,  ..., -1.68730164,
            -1.09999990, -0.84603173],
           [-1.89365077, -1.90952384, -1.81428576,  ..., -1.71904767,
            -1.30634916, -1.25873005],
           [-1.89365077, -1.89365077, -1.67142856,  ..., -1.75079370,
            -1.51269829, -1.49682534],
           ...,
           [-0.57619047, -1.21111107, -1.22698402,  ..., -1.29047608,
            -1.17936504, -1.03650784],
           [-0.70317459, -1.06825387, -1.16349196,  ..., -1.02063489,
            -1.02063489, -1.00476182],
           [-0.76666665, -1.00476182, -1.00476182,  ..., -0.94126981,
            -1.02063489, -1.06825387]],

          [[-1.93236721, -1.86795497, -1.72302747,  ..., -1.70692432,
            -1.22383249, -0.98228657],
           [-1.91626418, -1.93236721, -1.83574879,  ..., -1.72302747,
            -1.41706920, -1.36875999],
           [-1.91626418, -1.91626418, -1.73913050,  ..., -1.78743970,
            -1.59420288, -1.57809973],
           ...,
           [-0.80515295, -1.49758446, -1.52979064,  ..., -1.46537840,
            -1.40096617, -1.23993552],
           [-0.91787434, -1.33655393, -1.44927526,  ..., -1.22383249,
            -1.23993552, -1.20772946],
           [-0.96618354, -1.27214170, -1.25603855,  ..., -1.12721407,
            -1.20772946, -1.27214170]],

          [[-1.64767623, -1.58770621, -1.51274371,  ..., -1.54272878,
            -1.15292358, -0.91304344],
           [-1.63268375, -1.64767623, -1.54272878,  ..., -1.52773619,
            -1.30284870, -1.25787115],
           [-1.63268375, -1.64767623, -1.43778121,  ..., -1.58770621,
            -1.42278874, -1.43778121],
           ...,
           [-0.70314842, -1.24287868, -1.22788620,  ..., -1.28785622,
            -1.24287868, -1.16791618],
           [-0.80809593, -1.12293863, -1.22788620,  ..., -1.12293863,
            -1.10794616, -1.15292358],
           [-0.82308841, -1.09295356, -1.07796109,  ..., -1.09295356,
            -1.15292358, -1.19790113]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0767 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 142, vnnlib ID: 142 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-9.01175785, -9.22564220, -6.09865665, -6.68279839, -7.01091385,
         -7.66662741, -3.74865699, -8.93857002, -9.70948601, -9.36056805]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [415]; unstable size 415; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 290, 1, 415] with unstable size 289 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 415] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 415] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [289]; unstable size 289; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 289] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 289] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.92234254, 3.34474111, 0.83518052, 1.42703414, 1.62353706, 2.12632895,
         3.08041883, 3.64250755, 3.61395788]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0664 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 143, vnnlib ID: 143 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.98219585, -11.93984127,  -4.80098343,  -6.43815804,  -4.75239468,
          -5.96528244,  -6.83383131,  -6.40824652, -11.32667923, -10.02781868]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [464]; unstable size 464; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 196, 1, 464] with unstable size 195 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 464] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 464] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [195]; unstable size 195; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 195] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 195] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.50733936,  4.83027935, -1.04858828,  0.40518260, -0.05837464,
          0.48497486,  0.45264530,  4.44294167,  3.27292347]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -7.98219585, -11.93984127,  -4.80098343,  -6.43815804,  -4.75239468,
          -5.96528244,  -6.83383131,  -6.40824652, -11.32667923, -10.02781868]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -7.89328861, -11.87365723,  -4.72995949,  -6.58205509,  -5.11540079,
           -6.15687943,  -6.98943567,  -6.80347681, -11.29017735, -10.07491016],
         [ -7.89328861, -11.87365723,  -4.72995949,  -6.58205509,  -5.11540079,
           -6.15687943,  -6.98943567,  -6.80347681, -11.29017735, -10.07491016]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.38544130,  1.04147863]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0064 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0710 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 144, vnnlib ID: 144 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.60607052, -9.81349945, -5.86607075, -4.14033175, -5.51711655,
         -3.53696299, -6.38849020, -6.08620310, -7.73200989, -8.22923183]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [522]; unstable size 522; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 221, 1, 522] with unstable size 220 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 522] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 522] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [220]; unstable size 220; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 220] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 220] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.89997864, 4.68741608, 1.57923102, 0.30736464, 1.14825952, 1.82109797,
         1.72909117, 2.65290213, 3.25950575]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0627 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 145, vnnlib ID: 145 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-3.97581673, -7.36369705, -2.25391197, -0.90559614, -3.35363531,
         -0.93793738, -3.88091850, -3.94542360, -8.08611870, -6.59433222]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [686]; unstable size 686; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 215, 1, 686] with unstable size 214 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 686] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 686] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [214]; unstable size 214; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 214] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 214] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.63966501,  4.83987570,  0.26498556, -0.32372534,  1.13650656,
          1.87988913,  2.01293564,  5.47729778,  4.25807333]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-3.97581673, -7.36369705, -2.25391197, -0.90559614, -3.35363531,
         -0.93793738, -3.88091850, -3.94542360, -8.08611870, -6.59433222]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-3.97581673, -7.36369705, -2.25391197, -0.90559614, -3.35363531,
          -0.93793738, -3.88091850, -3.94542360, -8.08611870, -6.59433222]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.03234124]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-6.55555546e-01, -5.28571427e-01, -5.60317457e-01,  ...,
            -3.69841158e-01, -4.80952382e-01, -5.28571427e-01],
           [-6.55555546e-01, -5.44444442e-01, -5.28571427e-01,  ...,
            -1.47618949e-01, -3.85714173e-01, -4.65079248e-01],
           [-6.55555546e-01, -5.12698412e-01, -4.17460203e-01,  ...,
            -5.23808524e-02, -3.06349099e-01, -4.49206233e-01],
           ...,
           [-3.85714173e-01, -1.95237994e-01,  2.69842222e-02,  ...,
             7.41269886e-01,  5.82539737e-01,  4.23809588e-01],
           [-4.33333218e-01, -3.22222114e-01, -1.47618949e-01,  ...,
             6.14285767e-01,  5.50793707e-01,  4.07936573e-01],
           [-4.01587188e-01, -1.95237994e-01, -1.79364979e-01,  ...,
             6.93650842e-01,  6.14285767e-01,  5.03174663e-01]],

          [[-4.99194801e-01, -3.70370239e-01, -4.02576357e-01,  ...,
            -2.09339648e-01, -3.05958003e-01, -3.05958003e-01],
           [-4.50885653e-01, -3.54267180e-01, -3.38164121e-01,  ...,
             1.22934580e-07, -2.25442708e-01, -2.41545767e-01],
           [-4.18679416e-01, -2.73751885e-01, -1.77133530e-01,  ...,
             1.12721533e-01, -1.44927412e-01, -2.25442708e-01],
           ...,
           [-1.44927412e-01,  6.44123554e-02,  3.54267418e-01,  ...,
             1.19162667e+00,  1.12721443e+00,  1.01449287e+00],
           [-1.44927412e-01,  1.22934580e-07,  2.09339887e-01,  ...,
             1.17552364e+00,  1.22383285e+00,  1.11111140e+00],
           [-1.77133530e-01,  8.05154145e-02,  1.44927651e-01,  ...,
             1.14331758e+00,  1.15942061e+00,  1.11111140e+00]],

          [[-4.03298318e-01, -2.68365651e-01, -3.13343287e-01,  ...,
            -2.23388135e-01, -3.43328297e-01, -3.13343287e-01],
           [-3.73313308e-01, -2.83358276e-01, -2.53373146e-01,  ...,
            -2.84855980e-02, -2.53373146e-01, -2.38380641e-01],
           [-3.58320802e-01, -2.23388135e-01, -1.33433133e-01,  ...,
             6.14694245e-02, -1.93403140e-01, -2.38380641e-01],
           ...,
           [-5.84706068e-02,  1.21439442e-01,  3.91304523e-01,  ...,
             1.27586246e+00,  1.20089996e+00,  1.15592217e+00],
           [-8.84556174e-02,  4.64769229e-02,  2.41379470e-01,  ...,
             1.26086998e+00,  1.30584753e+00,  1.24587750e+00],
           [-8.84556174e-02,  1.36431947e-01,  1.81409463e-01,  ...,
             1.23088503e+00,  1.24587750e+00,  1.23088503e+00]]]]],
       device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0867 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 146, vnnlib ID: 146 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.88469028, -12.65882111, -12.62442398, -13.26971817, -13.08886814,
         -14.39622879, -13.06826305, -13.77910519,  -7.61941338, -13.15269947]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [474]; unstable size 474; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 183, 1, 474] with unstable size 182 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 474] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 474] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [182]; unstable size 182; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 182] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 182] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.66201317, 3.41532993, 3.31493187, 3.81620836, 3.48846436, 4.76713228,
         3.58373833, 3.89160705, 3.77728748]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0713 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 147, vnnlib ID: 147 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-24.95316505, -29.04301071, -22.88550568, -26.99249268, -26.92433929,
         -26.87813187, -26.17901230, -26.50130844, -27.15471458, -29.93289757]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [636]; unstable size 636; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 207, 1, 636] with unstable size 206 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 636] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 636] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [206]; unstable size 206; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 206] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 206] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.13847494, 4.55568886, 3.22048378, 3.02970290, 2.95622349, 2.20912457,
         2.32559371, 2.85925460, 5.64449787]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0680 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 148, vnnlib ID: 148 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.92584610, -7.42483807, -4.62941742, -4.01557446, -4.85893917,
         -3.11745501, -6.51985884, -2.25635386, -7.85682869, -5.87989426]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [573]; unstable size 573; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 165, 1, 573] with unstable size 164 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 573] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 573] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [164]; unstable size 164; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 164] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 164] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.58360767, 3.69630337, 1.62351382, 1.19872510, 1.87599492, 0.30902314,
         3.29060125, 4.20989084, 2.42179370]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0647 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 149, vnnlib ID: 149 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.82564068, -16.12564659,  -8.40596962, -11.14722919,  -8.84027576,
         -11.49166584,  -8.61030483, -12.62408161, -15.33834553, -15.51428890]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [612]; unstable size 612; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 318, 1, 612] with unstable size 317 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 612] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 612] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [317]; unstable size 317; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 317] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 317] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.89976597,  5.63465881,  1.31290984, -0.68691438,  1.36818099,
         -1.07342339,  2.11837912,  5.13911724,  5.00889349]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.82564068, -16.12564659,  -8.40596962, -11.14722919,  -8.84027576,
         -11.49166584,  -8.61030483, -12.62408161, -15.33834553, -15.51428890]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.90783310, -15.16053009,  -7.57349110,  -9.97743225,  -7.48518276,
          -10.30821037,  -7.42592621, -11.38831425, -14.43945026, -14.46265030],
         [-11.90783310, -15.16053009,  -7.57349110,  -9.97743225,  -7.48518276,
          -10.30821037,  -7.42592621, -11.38831425, -14.43945026, -14.46265030]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.08830833, -0.14756489]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0058 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0693 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 150, vnnlib ID: 150 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.13626671, -12.95860291, -17.87646484, -18.21573448, -16.54766655,
         -19.77405167, -18.47913933, -17.13456726, -12.88059044, -12.20954704]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [659]; unstable size 659; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 227, 1, 659] with unstable size 226 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 659] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 659] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [226]; unstable size 226; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 226] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 226] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-2.12454128,  2.88798380,  3.24317884,  1.46328259,  4.59323883,
          3.30328560,  1.93248844, -1.68345642, -1.69869995]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.13626671, -12.95860291, -17.87646484, -18.21573448, -16.54766655,
         -19.77405167, -18.47913933, -17.13456726, -12.88059044, -12.20954704]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.13626671, -12.95860291, -17.87646675, -18.21573257, -16.54766655,
          -19.77405167, -18.47914314, -17.13456726, -12.88059235, -12.20954704],
         [-12.13626671, -12.95860291, -17.87646675, -18.21573257, -16.54766655,
          -19.77405167, -18.47914314, -17.13456726, -12.88059235, -12.20954704]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.82233620, -0.07801056, -0.74905586]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]],


         [[[ 4.87301648e-01,  5.50793707e-01,  7.41269886e-01,  ...,
            -1.95237994e-01, -2.11111009e-01, -2.26984024e-01],
           [ 8.20634961e-01,  8.84127021e-01,  1.04285717e+00,  ...,
            -8.41268823e-02, -9.99999046e-02, -1.31745934e-01],
           [ 1.01111114e+00,  1.02698421e+00,  1.16984153e+00,  ...,
             1.11112073e-02, -2.06348225e-02, -2.06348225e-02],
           ...,
           [ 4.23809588e-01,  4.23809588e-01,  3.92063558e-01,  ...,
             1.85714364e-01,  1.38095319e-01,  1.22222304e-01],
           [ 4.71428633e-01,  3.76190543e-01,  3.92063558e-01,  ...,
             2.96825469e-01,  2.49206424e-01,  2.01587379e-01],
           [ 6.14285767e-01,  3.28571498e-01,  3.44444513e-01,  ...,
             2.80952454e-01,  2.80952454e-01,  2.01587379e-01]],

          [[ 1.03059590e+00,  1.04669893e+00,  1.17552364e+00,  ...,
             7.40740836e-01,  7.24637747e-01,  7.08534718e-01],
           [ 1.23993587e+00,  1.27214205e+00,  1.38486338e+00,  ...,
             8.37359190e-01,  8.37359190e-01,  8.21256101e-01],
           [ 1.28824508e+00,  1.30434811e+00,  1.43317258e+00,  ...,
             9.01771426e-01,  8.85668337e-01,  8.53462219e-01],
           ...,
           [ 4.83092964e-02,  4.83092964e-02,  1.61031820e-02,  ...,
            -1.93236589e-01, -2.57648826e-01, -2.57648826e-01],
           [ 1.12721533e-01,  3.22062373e-02,  3.22062373e-02,  ...,
            -9.66182351e-02, -1.61030471e-01, -1.77133530e-01],
           [ 3.22061300e-01,  1.22934580e-07,  1.22934580e-07,  ...,
            -9.66182351e-02, -1.12721294e-01, -1.77133530e-01]],

          [[ 1.56072009e+00,  1.50075006e+00,  1.56072009e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           [ 1.57571256e+00,  1.57571256e+00,  1.68066013e+00,  ...,
             1.68066013e+00,  1.66566753e+00,  1.65067506e+00],
           [ 1.41079497e+00,  1.45577252e+00,  1.60569763e+00,  ...,
             1.63568258e+00,  1.62069011e+00,  1.60569763e+00],
           ...,
           [ 7.64619336e-02,  7.64619336e-02,  4.64769229e-02,  ...,
            -1.48425624e-01, -2.23388135e-01, -1.93403140e-01],
           [ 1.36431947e-01,  4.64769229e-02,  6.14694245e-02,  ...,
            -5.84706068e-02, -1.18440613e-01, -1.33433133e-01],
           [ 3.01349491e-01,  1.64919142e-02,  3.14844176e-02,  ...,
            -5.84706068e-02, -7.34631121e-02, -1.18440613e-01]]]]],
       device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0722 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 151, vnnlib ID: 151 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.92925501, -7.14253235, -2.67746592, -1.64019978, -3.21286678,
         -2.15658951, -4.77550077, -2.71008253, -7.95267010, -6.10923672]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [509]; unstable size 509; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 191, 1, 509] with unstable size 190 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 509] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 509] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [190]; unstable size 190; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 190] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 190] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.62681079,  3.42381263, -0.43489397, -0.80544955,  0.11626744,
          1.46117330, -0.19169962,  4.37902164,  2.50552511]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.92925501, -7.14253235, -2.67746592, -1.64019978, -3.21286678,
         -2.15658951, -4.77550077, -2.71008253, -7.95267010, -6.10923672]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.92925453, -7.14253139, -2.67746544, -1.64019978, -3.21286583,
          -2.15658951, -4.77549982, -2.71008205, -7.95266914, -6.10923672],
         [-4.92925453, -7.14253139, -2.67746544, -1.64019978, -3.21286583,
          -2.15658951, -4.77549982, -2.71008205, -7.95266914, -6.10923672]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.52087593, -0.51638973,  0.55349255]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]],


         [[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]],


         [[[-0.95714283, -0.79841268, -0.98888886,  ...,  1.94761932,
             2.01111126,  1.96349227],
           [-0.78253967, -0.67142856, -0.83015871,  ...,  1.96349227,
             1.93174624,  1.82063520],
           [-0.89365077, -0.89365077, -0.97301590,  ...,  1.97936535,
             2.01111126,  1.97936535],
           ...,
           [-1.05238092, -1.02063489, -1.02063489,  ..., -0.22698402,
             0.15396833, -0.49682540],
           [-1.16349196, -1.13174593, -1.06825387,  ...,  0.09047628,
            -0.71904761, -0.75079364],
           [-1.22698402, -1.22698402, -1.19523799,  ...,  1.21746063,
             0.01111121, -0.65555555]],

          [[-1.04669881, -0.91787434, -0.98228657,  ...,  1.64251232,
             1.69082153,  1.57810009],
           [-0.83735907, -0.78904986, -0.82125598,  ...,  1.65861547,
             1.61030626,  1.54589403],
           [-0.88566822, -0.88566822, -0.91787434,  ...,  1.83574903,
             1.85185218,  1.81964600],
           ...,
           [-1.48148143, -1.46537840, -1.46537840,  ..., -0.51529789,
            -0.01610294, -0.72463763],
           [-1.54589367, -1.52979064, -1.49758446,  ..., -0.08051517,
            -0.93397743, -0.96618354],
           [-1.59420288, -1.57809973, -1.56199670,  ...,  1.30434811,
            -0.09661824, -0.95008045]],

          [[-1.16791618, -1.18290865, -1.10794616,  ...,  1.32084000,
             1.35082495,  1.24587750],
           [-1.01799107, -1.06296861, -0.98800600,  ...,  1.32084000,
             1.29085493,  1.24587750],
           [-0.98800600, -0.98800600, -1.00299859,  ...,  1.56072009,
             1.54572761,  1.53073502],
           ...,
           [-1.52773619, -1.54272878, -1.54272878,  ..., -0.59820086,
            -0.02848560, -0.70314842],
           [-1.57271373, -1.54272878, -1.52773619,  ..., -0.07346311,
            -0.91304344, -0.98800600],
           [-1.57271373, -1.55772126, -1.55772126,  ...,  1.33583248,
            -0.02848560, -0.95802099]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0711 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 152, vnnlib ID: 152 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.37253094, -15.35466290,  -8.84723759, -11.91200066,  -9.14601994,
         -12.22006512, -11.46233749, -11.63420105, -15.26982689, -14.99343395]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [511]; unstable size 511; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 247, 1, 511] with unstable size 246 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 511] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 511] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [246]; unstable size 246; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 246] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 246] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.05601645,  4.40511131,  1.92022455, -0.67723596,  2.14849854,
          1.43644249,  1.45348656,  4.22400951,  4.17532158]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.37253094, -15.35466290,  -8.84723759, -11.91200066,  -9.14601994,
         -12.22006512, -11.46233749, -11.63420105, -15.26982689, -14.99343395]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.95911980, -14.67740154,  -8.50276279, -11.15490532,  -8.22284317,
          -11.39343548, -10.70833683, -10.67666340, -14.70250797, -14.25697708]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.27991962]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0054 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0678 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 153, vnnlib ID: 153 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.36052370, -3.64754987, -8.43094254, -6.93587589, -8.07399559,
         -7.95548391, -8.76295853, -8.07159233, -4.37078619, -1.63098276]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [666]; unstable size 666; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 198, 1, 666] with unstable size 197 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 666] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 666] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [197]; unstable size 197; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 197] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 197] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.38331795, 0.85898757, 5.10982227, 3.81529808, 4.82118130, 4.66787243,
         5.43832874, 4.82864904, 1.05962610]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0952 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 154, vnnlib ID: 154 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.37273693, -13.41425037,  -7.99989891,  -7.64088869,  -7.68787098,
          -7.30278063,  -9.00737858,  -9.44757938, -11.26918030, -13.87256336]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [665]; unstable size 665; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 191, 1, 665] with unstable size 190 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 665] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 665] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [190]; unstable size 190; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 190] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 190] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.81563997,  4.79626942, -0.23131943,  0.04256046, -0.61334968,
          0.76331437,  1.09416676,  2.70510578,  5.43058109]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-12.37273693, -13.41425037,  -7.99989891,  -7.64088869,  -7.68787098,
          -7.30278063,  -9.00737858,  -9.44757938, -11.26918030, -13.87256336]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-12.39031887, -13.36584949,  -7.99200344,  -7.88567734,  -7.51200867,
           -7.59368086,  -9.04060841,  -9.48881340, -11.36435127, -13.91123199],
         [-12.39031887, -13.36584949,  -7.99200344,  -7.88567734,  -7.51200867,
           -7.59368086,  -9.04060841,  -9.48881340, -11.36435127, -13.91123199]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.39832258, -0.08167219]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0054 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0695 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 155, vnnlib ID: 155 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.79153347, -11.06904888,  -7.80160236,  -7.62448120,  -8.11459255,
          -8.06301022,  -7.22633886,  -9.50167847,  -7.88424015, -10.52373123]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [522]; unstable size 522; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 244, 1, 522] with unstable size 243 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 522] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 522] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [243]; unstable size 243; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 243] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 243] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.54438400,  1.50450659, -1.00405788, -0.75059623, -0.65832734,
         -0.60824037,  0.62780213, -1.52603447,  1.13424730]], device='cuda:0') None
Remain 5 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.79153347, -11.06904888,  -7.80160236,  -7.62448120,  -8.11459255,
          -8.06301022,  -7.22633886,  -9.50167847,  -7.88424015, -10.52373123]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.39375973, -10.87876701,  -7.30129433,  -7.40815878,  -7.76286411,
           -7.76071310,  -7.42278099,  -9.15025520,  -7.50671482, -10.33001041],
         [ -9.39375973, -10.87876701,  -7.30129433,  -7.40815878,  -7.76286411,
           -7.76071310,  -7.42278099,  -9.15025520,  -7.50671482, -10.33001041]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12148666, -0.01462221,  0.34008312,  0.33793211,  0.08393383]]],
       device='cuda:0')
number of violation:  2
Attack finished in 0.0123 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0749 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 156, vnnlib ID: 156 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.62991190, -8.22150135, -3.56266642, -2.64211535, -2.55210876,
         -3.17030573, -2.78596139, -4.91182852, -7.74587250, -7.17337656]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [520]; unstable size 520; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 520] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 520] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 520] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 184] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.35063887,  3.30825853, -0.56681514, -0.80880803, -1.41259122,
         -1.49340820,  0.91902602,  3.26092267,  2.75898981]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.62991190, -8.22150135, -3.56266642, -2.64211535, -2.55210876,
         -3.17030573, -2.78596139, -4.91182852, -7.74587250, -7.17337656]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.62991190, -8.22150135, -3.56266618, -2.64211535, -2.55210876,
          -3.17030573, -2.78596210, -4.91182852, -7.74587250, -7.17337751],
         [-6.62991190, -8.22150135, -3.56266618, -2.64211535, -2.55210876,
          -3.17030573, -2.78596210, -4.91182852, -7.74587250, -7.17337751]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.39236045, -0.52819037, -0.61819696, -0.38434362]]],
       device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]],


         [[[-1.67142856, -1.70317459, -1.67142856,  ..., -1.62380958,
            -1.60793638, -1.67142856],
           [-1.70317459, -1.73492062, -1.73492062,  ..., -1.60793638,
            -1.68730164, -1.71904767],
           [-1.60793638, -1.71904767, -1.79841268,  ..., -1.63968253,
            -1.71904767, -1.67142856],
           ...,
           [-1.52857137, -1.43333328, -1.41746020,  ..., -1.13174593,
            -1.14761901, -1.14761901],
           [-1.41746020, -1.43333328, -1.48095226,  ..., -1.03650784,
            -1.06825387, -1.08412695],
           [-1.48095226, -1.49682534, -1.59206343,  ..., -0.95714283,
            -1.06825387, -1.11587298]],

          [[-1.56199670, -1.57809973, -1.56199670,  ..., -1.56199670,
            -1.54589367, -1.61030602],
           [-1.57809973, -1.62640905, -1.61030602,  ..., -1.54589367,
            -1.64251208, -1.65861523],
           [-1.48148143, -1.61030602, -1.69082129,  ..., -1.56199670,
            -1.67471826, -1.64251208],
           ...,
           [-1.54589367, -1.46537840, -1.46537840,  ..., -1.43317223,
            -1.43317223, -1.40096617],
           [-1.46537840, -1.46537840, -1.51368749,  ..., -1.33655393,
            -1.36875999, -1.38486302],
           [-1.51368749, -1.51368749, -1.59420288,  ..., -1.27214170,
            -1.35265696, -1.38486302]],

          [[-1.54272878, -1.57271373, -1.58770621,  ..., -1.57271373,
            -1.55772126, -1.57271373],
           [-1.58770621, -1.60269880, -1.61769128,  ..., -1.57271373,
            -1.60269880, -1.61769128],
           [-1.55772126, -1.57271373, -1.61769128,  ..., -1.60269880,
            -1.61769128, -1.61769128],
           ...,
           [-1.39280367, -1.33283365, -1.34782624,  ..., -1.46776617,
            -1.43778121, -1.40779614],
           [-1.34782624, -1.34782624, -1.37781119,  ..., -1.36281872,
            -1.37781119, -1.40779614],
           [-1.36281872, -1.39280367, -1.43778121,  ..., -1.34782624,
            -1.39280367, -1.39280367]]]]], device='cuda:0') torch.Size([1, 4, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0738 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 157, vnnlib ID: 157 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.04801083,  -6.34156513, -11.41678429,  -9.62609482, -10.79650021,
         -10.91422462, -10.18493938,  -9.82091618,  -7.10640144,  -2.62643194]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [489]; unstable size 489; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 166, 1, 489] with unstable size 165 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 12, 1, 489] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 489] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [165]; unstable size 165; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 12, 1, 165] with unstable size 11 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 165] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [11]; unstable size 11; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 11] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.36141205, 2.37881207, 7.25882244, 5.68141317, 6.92046452, 6.83364010,
         6.18870258, 5.80481243, 3.38991785]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0617 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 158, vnnlib ID: 158 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.81927967,  -9.30375195, -10.87481976,  -8.97626114, -10.13474369,
          -8.76882172, -10.25335312,  -9.09837914,  -6.59457874, -10.58987808]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [517]; unstable size 517; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 192, 1, 517] with unstable size 191 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 517] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 517] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [191]; unstable size 191; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 191] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 191] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.71505964,  0.93899989,  2.11313295,  0.24073577,  1.31830502,
         -0.27658868,  1.65153766, -0.12757969,  2.09712505]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.81927967,  -9.30375195, -10.87481976,  -8.97626114, -10.13474369,
          -8.76882172, -10.25335312,  -9.09837914,  -6.59457874, -10.58987808]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.86it/s]100%|██████████| 1/1 [00:00<00:00,  8.85it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.51523590,  -9.07377148, -10.23342419,  -8.17811871,  -9.40123940,
           -7.79556513,  -9.75415516,  -8.18024349,  -6.82714367, -10.12567520],
         [ -9.51523590,  -9.07377148, -10.23342419,  -8.17811871,  -9.40123940,
           -7.79556513,  -9.75415516,  -8.18024349,  -6.82714367, -10.12567520]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.96842146, 1.35309982]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1156 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 10.416449546813965
alpha/beta optimization time: 1.2200794219970703
initial alpha-crown bounds: tensor([[ 1.76490855,  1.00492382,  2.20698881,  0.32836986,  1.41238546,
         -0.17884588,  1.72935605, -0.01777935,  2.16614270]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.17884588241577148
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5980930328369
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.59805536270142
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.5980236530304
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.5979995727539
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 198.59798097610474
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 198.59796023368835
Verifying property 5 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.17884588]], device='cuda:0') need to verify.
Model prediction is: tensor([ -9.81927967,  -9.30375195, -10.87481976,  -8.97626114, -10.13474369,
         -8.76882172, -10.25335312,  -9.09837914,  -6.59457874, -10.58987808],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.17884588]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 517
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 188
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 726
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010442733764648438
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17884302139282227
10 lb beta sum: 0.0, worst -0.17885446548461914
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0540    transfer 0.0001    finalize 0.0001    func 0.0545    
Accumulated time: func 0.0545    prepare 0.0002    bound 0.0540    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 37] 
split level 1: [/input-12, 25] 
split level 2: [/input-12, 26] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 58] 
split level 5: [/input-12, 24] 
split level 6: [/input-12, 45] 
split level 7: [/input-12, 51] 
split level 8: [/input-12, 74] 
split level 9: [/input-12, 60] 
split level 10: [/input, 1735] 
split level 11: [/input-8, 1452] 
split level 12: [/input-8, 1459] 
split level 13: [/input, 1720] 
split level 14: [/input, 1690] 
split level 15: [/input-8, 923] 
split level 16: [/input, 1734] 
split level 17: [/input, 1692] 
split level 18: [/input, 2248] 
split level 19: [/input, 1674] 
split level 20: [/input, 1706] 
split level 21: [/input, 1736] 
split level 22: [/input-8, 1460] 
split level 23: [/input-8, 845] 
split level 24: [/input, 1675] 
split level 25: [/input, 1691] 
split level 26: [/input, 1721] 
split level 27: [/input, 1723] 
split level 28: [/input, 1704] 
split level 29: [/input-8, 493] 
split level 30: [/input, 1705] 
split level 31: [/input-8, 1596] 
split level 32: [/input-8, 1451] 
split level 33: [/input-8, 1010] 
split level 34: [/input-8, 1293] 
split level 35: [/input-8, 921] 
split level 36: [/input-8, 1962] 
split level 37: [/input, 1739] 
split level 38: [/input, 2686] 
split level 39: [/input-8, 931] 
split level 40: [/input-8, 1588] 
split level 41: [/input-8, 1011] 
split level 42: [/input-8, 1965] 
split level 43: [/input, 2217] 
split level 44: [/input, 2743] 
split level 45: [/input-8, 1438] 
split level 46: [/input-8, 1353] 
split level 47: [/input-8, 1933] 
split level 48: [/input-8, 852] 
split level 49: [/input, 1689] 
split level 50: [/input, 1733] 
split level 51: [/input, 1686] 
split level 52: [/input, 2199] 
split level 53: [/input-8, 517] 
split level 54: [/input-8, 949] 
split level 55: [/input, 2702] 
split level 56: [/input, 2776] 
split level 57: [/input, 1658] 
split level 58: [/input, 2774] 
split level 59: [/input-8, 1309] 
split level 60: [/input-8, 1369] 
split level 61: [/input-8, 1592] 
split level 62: [/input-8, 1583] 
split level 63: [/input-8, 1644] 
split level 64: [/input-8, 483] 
split level 65: [/input-8, 494] 
split level 66: [/input, 1452] 
split level 67: [/input, 1636] 
split level 68: [/input, 2476] 
split level 69: [/input-8, 1453] 
split level 70: [/input, 1755] 
split level 71: [/input-8, 1925] 
split level 72: [/input, 2281] 
split level 73: [/input, 1747] 
split level 74: [/input, 2216] 
split level 75: [/input, 2250] 
split level 76: [/input, 1478] 
split level 77: [/input-8, 1445] 
split level 78: [/input, 2265] 
split level 79: [/input, 2157] 
split level 80: [/input, 1672] 
split level 81: [/input, 1347] 
split level 82: [/input-8, 301] 
split level 83: [/input-8, 862] 
split level 84: [/input, 1364] 
split level 85: [/input, 2486] 
split level 86: [/input, 2685] 
split level 87: [/input, 3527] 
split level 88: [/input, 2989] 
split level 89: [/input, 2200] 
split level 90: [/input, 1481] 
split level 91: [/input, 2501] 
split level 92: [/input-8, 522] 
split level 93: [/input, 2729] 
split level 94: [/input-8, 527] 
split level 95: [/input-8, 799] 
split level 96: [/input, 1731] 
split level 97: [/input, 2504] 
split level 98: [/input, 3090] 
split level 99: [/input, 3544] 
split level 100: [/input, 1647] 
split level 101: [/input, 3560] 
split level 102: [/input, 2213] 
split level 103: [/input, 4043] 
split level 104: [/input-8, 1584] 
split level 105: [/input, 3396] 
split level 106: [/input, 2188] 
split level 107: [/input-8, 1444] 
split level 108: [/input, 2891] 
split level 109: [/input, 2472] 
split level 110: [/input, 2492] 
split level 111: [/input-8, 1656] 
split level 112: [/input, 1607] 
split level 113: [/input, 2148] 
split level 114: [/input-8, 1585] 
split level 115: [/input, 3395] 
split level 116: [/input, 2473] 
split level 117: [/input, 2155] 
split level 118: [/input, 2535] 
split level 119: [/input, 2322] 
split level 120: [/input-8, 942] 
split level 121: [/input, 2493] 
split level 122: [/input-8, 1064] 
split level 123: [/input, 2164] 
split level 124: [/input, 2282] 
split level 125: [/input-8, 836] 
split level 126: [/input-8, 387] 
split level 127: [/input, 2197] 
split level 128: [/input, 3749] 
split level 129: [/input, 2503] 
split level 130: [/input, 1316] 
split level 131: [/input, 252] 
split level 132: [/input, 2521] 
split level 133: [/input, 2506] 
split level 134: [/input-8, 149] 
split level 135: [/input, 2337] 
split level 136: [/input, 2244] 
split level 137: [/input, 2458] 
split level 138: [/input, 2099] 
split level 139: [/input, 2154] 
split level 140: [/input, 3394] 
split level 141: [/input, 2324] 
split level 142: [/input, 3105] 
split level 143: [/input-8, 1285] 
split level 144: [/input, 3781] 
split level 145: [/input, 2132] 
split level 146: [/input, 3522] 
split level 147: [/input-8, 1973] 
split level 148: [/input-8, 963] 
split level 149: [/input, 2523] 
split level 150: [/input-8, 647] 
split level 151: [/input, 3490] 
split level 152: [/input, 3293] 
split level 153: [/input, 1363] 
split level 154: [/input, 4029] 
split level 155: [/input-8, 1449] 
split level 156: [/input, 3005] 
split level 157: [/input, 1498] 
split level 158: [/input, 2356] 
split level 159: [/input, 2067] 
split level 160: [/input, 2509] 
split level 161: [/input, 2171] 
split level 162: [/input, 3410] 
split level 163: [/input, 2499] 
split level 164: [/input, 2494] 
split level 165: [/input, 3753] 
split level 166: [/input, 2190] 
split level 167: [/input, 2508] 
split level 168: [/input, 3783] 
split level 169: [/input, 2973] 
split level 170: [/input, 2371] 
split level 171: [/input-8, 1397] 
split level 172: [/input-8, 1065] 
split level 173: [/input, 3770] 
split level 174: [/input, 1335] 
split level 175: [/input-8, 114] 
split level 176: [/input, 3153] 
split level 177: [/input, 3786] 
split level 178: [/input-8, 835] 
split level 179: [/input, 2369] 
split level 180: [/input, 2917] 
split level 181: [/input, 3539] 
split level 182: [/input, 2306] 
split level 183: [/input, 3091] 
split level 184: [/input-8, 516] 
split level 185: [/input, 2347] 
split level 186: [/input, 3529] 
split level 187: [/input, 2083] 
split level 188: [/input-8, 97] 
split level 189: [/input-8, 397] 
split level 190: [/input, 3246] 
split level 191: [/input, 2307] 
split level 192: [/input, 3411] 
split level 193: [/input, 2305] 
split level 194: [/input, 2942] 
split level 195: [/input-8, 1347] 
split level 196: [/input, 2206] 
split level 197: [/input-8, 2008] 
split level 198: [/input, 239] 
split level 199: [/input-8, 431] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1787853240966797
10 lb beta sum: 0.0, worst -0.17879724502563477
Time: prepare 0.0117    bound 0.0974    transfer 0.0035    finalize 0.0033    func 0.1186    
Accumulated time: func 0.1731    prepare 0.0219    bound 0.1514    transfer 0.0036    finalize 0.0034    
all_split False
======================Cut inference begins======================
max lb tensor(0.43587613) min lb tensor(-0.17878532)
Number of Verified Splits: 7 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.011199474334716797 
BICCOS Cumulative time: 0.011199474334716797
Preprocessing time: 0.010497808456420898 Inference time: 0.00033211708068847656 Add cuts time: 9.393692016601562e-05 Cut analysis time: 0.00027561187744140625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.16461 (1), -0.16453 (1), -0.16451 (1), -0.16449 (1), -0.16446 (1), -0.16442 (1), -0.16435 (1), -0.16358 (1), -0.16302 (1), -0.16084 (1), -0.16055 (1), -0.16038 (1), -0.16034 (1), -0.16028 (1), -0.15997 (1), -0.15960 (1), -0.15855 (1), -0.15844 (1), -0.15833 (1), -0.15818 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5132    set_bounds 0.0103    solve 0.1187    add 0.1594    
Accumulated time: pickout 0.0004    decision 0.5132    set_bounds 0.0103    solve 0.1187    add 0.1594    
Current (lb-rhs): -0.16460943222045898
50 domains visited
Cumulative time: 0.883568286895752

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 37] [/input-12, 37] [/input-12, 25] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
split level 1: [/input-12, 25] [/input-12, 25] [/input-12, 26] [/input-12, 26] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 26] [/input-12, 25] 
split level 2: [/input-12, 4] [/input-12, 26] [/input-12, 4] [/input-12, 4] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 25] [/input-12, 26] 
split level 3: [/input-12, 58] [/input-12, 4] [/input-12, 58] [/input-12, 58] [/input-12, 4] [/input-12, 58] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09041404724121094

all verified at 1th iter
Time: prepare 0.0083    bound 0.0127    transfer 0.0007    finalize 0.0027    func 0.0270    
Accumulated time: func 0.2001    prepare 0.0304    bound 0.1641    transfer 0.0043    finalize 0.0061    
all_split False
======================Cut inference begins======================
max lb tensor(0.22441578) min lb tensor(0.00013494)
Number of Verified Splits: 400 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03659796714782715 
BICCOS Cumulative time: 0.047797441482543945
Preprocessing time: 0.012563705444335938 Inference time: 0.014799833297729492 Add cuts time: 0.00903010368347168 Cut analysis time: 0.00020432472229003906
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0012    decision 0.0198    set_bounds 0.0131    solve 0.0271    add 0.0167    
Accumulated time: pickout 0.0015    decision 0.5329    set_bounds 0.0233    solve 0.1458    add 0.1761    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
50 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([45, 37]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.77276813e-13, 2.44153544e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([45, 37]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.77276813e-13, 1.25857875e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([45, 37]), tensor([ 1., -1.]), tensor([0, 0]), tensor([9.60441726e-11, 2.49478862e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([45, 37]), tensor([1., 1.]), tensor([0, 0]), tensor([9.60441726e-11, 1.24382064e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  4
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.01490640640258789

all verified at 0th iter
Time: prepare 0.0003    bound 0.0043    transfer 0.0001    finalize 0.0002    func 0.0049    
Accumulated time: func 0.2050    prepare 0.0307    bound 0.1684    transfer 0.0044    finalize 0.0063    
After pruning, left:  0

Back to Regular BaB


Properties batch 6, size 1
Remaining timeout: 197.34295225143433
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.34287190437317
Verifying property 7 with 1 instances.
##### Instance 158 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.01777935]], device='cuda:0') need to verify.
Model prediction is: tensor([ -9.81927967,  -9.30375195, -10.87481976,  -8.97626114, -10.13474369,
         -8.76882172, -10.25335312,  -9.09837914,  -6.59457874, -10.58987808],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.01777935]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 517
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 188
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 726
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010538101196289062
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.017777442932128906
10 lb beta sum: 0.0, worst -0.017783403396606445
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0549    transfer 0.0001    finalize 0.0001    func 0.0554    
Accumulated time: func 0.0554    prepare 0.0002    bound 0.0549    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 45] 
split level 2: [/input-12, 37] 
split level 3: [/input-12, 4] 
split level 4: [/input-12, 51] 
split level 5: [/input-12, 25] 
split level 6: [/input-12, 26] 
split level 7: [/input, 1735] 
split level 8: [/input-8, 1452] 
split level 9: [/input-12, 6] 
split level 10: [/input, 1720] 
split level 11: [/input-8, 1459] 
split level 12: [/input-8, 921] 
split level 13: [/input, 1690] 
split level 14: [/input, 1706] 
split level 15: [/input, 1692] 
split level 16: [/input-8, 1011] 
split level 17: [/input, 1734] 
split level 18: [/input-12, 1] 
split level 19: [/input, 2248] 
split level 20: [/input-8, 1460] 
split level 21: [/input-8, 870] 
split level 22: [/input, 1736] 
split level 23: [/input-8, 1010] 
split level 24: [/input, 1674] 
split level 25: [/input, 1704] 
split level 26: [/input, 1721] 
split level 27: [/input, 1705] 
split level 28: [/input, 1723] 
split level 29: [/input, 1675] 
split level 30: [/input-8, 1451] 
split level 31: [/input, 1739] 
split level 32: [/input, 2686] 
split level 33: [/input-8, 1438] 
split level 34: [/input, 2217] 
split level 35: [/input-8, 493] 
split level 36: [/input, 1691] 
split level 37: [/input-8, 923] 
split level 38: [/input, 2743] 
split level 39: [/input-8, 1596] 
split level 40: [/input, 2702] 
split level 41: [/input, 2219] 
split level 42: [/input-8, 1445] 
split level 43: [/input, 1755] 
split level 44: [/input, 2199] 
split level 45: [/input-8, 1962] 
split level 46: [/input, 2774] 
split level 47: [/input-8, 949] 
split level 48: [/input, 2776] 
split level 49: [/input-8, 1444] 
split level 50: [/input, 1733] 
split level 51: [/input-8, 1293] 
split level 52: [/input-8, 494] 
split level 53: [/input-8, 931] 
split level 54: [/input, 2216] 
split level 55: [/input, 2250] 
split level 56: [/input, 1689] 
split level 57: [/input, 2265] 
split level 58: [/input, 2684] 
split level 59: [/input, 2729] 
split level 60: [/input-8, 1453] 
split level 61: [/input-8, 862] 
split level 62: [/input-8, 517] 
split level 63: [/input, 2485] 
split level 64: [/input-8, 942] 
split level 65: [/input, 2685] 
split level 66: [/input, 2476] 
split level 67: [/input-8, 301] 
split level 68: [/input, 2213] 
split level 69: [/input-8, 1050] 
split level 70: [/input, 1672] 
split level 71: [/input-8, 1868] 
split level 72: [/input, 2200] 
split level 73: [/input-8, 1644] 
split level 74: [/input-8, 1937] 
split level 75: [/input, 1747] 
split level 76: [/input, 1658] 
split level 77: [/input, 2188] 
split level 78: [/input-8, 852] 
split level 79: [/input, 2157] 
split level 80: [/input, 1452] 
split level 81: [/input-8, 527] 
split level 82: [/input-8, 1965] 
split level 83: [/input, 2703] 
split level 84: [/input, 1647] 
split level 85: [/input-8, 522] 
split level 86: [/input, 2197] 
split level 87: [/input-8, 1064] 
split level 88: [/input, 1686] 
split level 89: [/input, 1636] 
split level 90: [/input, 2773] 
split level 91: [/input, 1478] 
split level 92: [/input, 1607] 
split level 93: [/input, 2486] 
split level 94: [/input-8, 488] 
split level 95: [/input, 2492] 
split level 96: [/input, 2282] 
split level 97: [/input-8, 1588] 
split level 98: [/input, 2989] 
split level 99: [/input, 2190] 
split level 100: [/input-8, 1369] 
split level 101: [/input-8, 1592] 
split level 102: [/input, 2493] 
split level 103: [/input-8, 1925] 
split level 104: [/input-8, 1583] 
split level 105: [/input, 2501] 
split level 106: [/input, 2281] 
split level 107: [/input, 3544] 
split level 108: [/input, 1481] 
split level 109: [/input-8, 1309] 
split level 110: [/input, 4043] 
split level 111: [/input, 1710] 
split level 112: [/input, 1731] 
split level 113: [/input-8, 387] 
split level 114: [/input-8, 835] 
split level 115: [/input-8, 1485] 
split level 116: [/input-8, 836] 
split level 117: [/input, 2164] 
split level 118: [/input, 3781] 
split level 119: [/input, 3560] 
split level 120: [/input, 2503] 
split level 121: [/input-8, 474] 
split level 122: [/input, 1742] 
split level 123: [/input-8, 114] 
split level 124: [/input-8, 963] 
split level 125: [/input, 2509] 
split level 126: [/input, 3527] 
split level 127: [/input, 2504] 
split level 128: [/input-8, 1449] 
split level 129: [/input, 2535] 
split level 130: [/input-8, 1739] 
split level 131: [/input-8, 647] 
split level 132: [/input, 3246] 
split level 133: [/input, 2462] 
split level 134: [/input-8, 982] 
split level 135: [/input-8, 1656] 
split level 136: [/input, 2155] 
split level 137: [/input, 2206] 
split level 138: [/input, 2521] 
split level 139: [/input, 2067] 
split level 140: [/input, 3396] 
split level 141: [/input, 2244] 
split level 142: [/input, 2324] 
split level 143: [/input, 2148] 
split level 144: [/input, 2171] 
split level 145: [/input, 2472] 
split level 146: [/input, 3090] 
split level 147: [/input-8, 1457] 
split level 148: [/input-8, 516] 
split level 149: [/input-8, 1013] 
split level 150: [/input, 113] 
split level 151: [/input, 2473] 
split level 152: [/input, 2494] 
split level 153: [/input, 2322] 
split level 154: [/input, 4029] 
split level 155: [/input, 3005] 
split level 156: [/input, 3786] 
split level 157: [/input, 3395] 
split level 158: [/input, 3749] 
split level 159: [/input, 3783] 
split level 160: [/input, 2973] 
split level 161: [/input, 2508] 
split level 162: [/input, 2523] 
split level 163: [/input, 2222] 
split level 164: [/input-8, 1933] 
split level 165: [/input, 3753] 
split level 166: [/input, 2083] 
split level 167: [/input, 3105] 
split level 168: [/input, 2506] 
split level 169: [/input, 2384] 
split level 170: [/input-8, 1945] 
split level 171: [/input, 3529] 
split level 172: [/input, 2337] 
split level 173: [/input, 2416] 
split level 174: [/input-8, 1024] 
split level 175: [/input, 3770] 
split level 176: [/input, 98] 
split level 177: [/input-8, 1959] 
split level 178: [/input, 2942] 
split level 179: [/input, 3767] 
split level 180: [/input-8, 962] 
split level 181: [/input, 2132] 
split level 182: [/input, 3153] 
split level 183: [/input-8, 661] 
split level 184: [/input, 2306] 
split level 185: [/input-8, 471] 
split level 186: [/input, 252] 
split level 187: [/input, 2285] 
split level 188: [/input, 3091] 
split level 189: [/input, 2369] 
split level 190: [/input, 2558] 
split level 191: [/input, 2499] 
split level 192: [/input, 2458] 
split level 193: [/input, 3522] 
split level 194: [/input, 2293] 
split level 195: [/input, 2479] 
split level 196: [/input, 239] 
split level 197: [/input, 1498] 
split level 198: [/input, 3490] 
split level 199: [/input, 3295] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.017559528350830078
10 lb beta sum: 0.0, worst -0.017554521560668945
Time: prepare 0.0118    bound 0.1001    transfer 0.0020    finalize 0.0030    func 0.1195    
Accumulated time: func 0.1748    prepare 0.0220    bound 0.1549    transfer 0.0021    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.40603900) min lb tensor(-0.01754999)
Number of Verified Splits: 53 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.01358652114868164 
BICCOS Cumulative time: 0.01358652114868164
Preprocessing time: 0.010329961776733398 Inference time: 0.0020999908447265625 Add cuts time: 0.0009558200836181641 Cut analysis time: 0.00020074844360351562
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5166    set_bounds 0.0125    solve 0.1196    add 0.0102    
Accumulated time: pickout 0.0004    decision 0.5166    set_bounds 0.0125    solve 0.1196    add 0.0102    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58]), tensor([-1.]), tensor([0]), tensor([2.88966021e-07]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([58]), tensor([1.]), tensor([0]), tensor([9.81884796e-10]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.11854732036590576

all verified at 0th iter
Time: prepare 0.0003    bound 0.0041    transfer 0.0001    finalize 0.0001    func 0.0047    
Accumulated time: func 0.1796    prepare 0.0223    bound 0.1591    transfer 0.0022    finalize 0.0032    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 196.34102511405945
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.6591 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 159, vnnlib ID: 159 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.94552898, -11.88663006, -11.47941303,  -9.72749805, -12.11168003,
         -10.94520473,  -8.55705357, -13.68229103, -10.67903423, -11.17602921]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [836]; unstable size 836; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 189, 1, 836] with unstable size 188 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 836] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 836] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [188]; unstable size 188; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 188] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 188] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.05637681, 1.39599633, 1.75964940, 0.17517821, 2.39905334, 1.14613736,
         3.57038689, 0.74127907, 1.09699965]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0764 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 160, vnnlib ID: 160 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.69691086, -9.90914440, -3.04869223, -5.95901394, -2.41780186,
         -6.51351690, -5.05484104, -5.98770094, -7.13607407, -9.76951885]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [647]; unstable size 647; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 242, 1, 647] with unstable size 241 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 647] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 647] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [241]; unstable size 241; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 241] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 241] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.95681798,  5.94022369, -0.25544411,  2.46004200,  2.96836042,
          1.44257092,  2.64147234,  3.15622759,  5.52299976]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.69691086, -9.90914440, -3.04869223, -5.95901394, -2.41780186,
         -6.51351690, -5.05484104, -5.98770094, -7.13607407, -9.76951885]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.53it/s]100%|██████████| 1/1 [00:00<00:00,  7.52it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.53756809, -9.76719856, -2.86113811, -5.85877895, -2.57433796,
          -6.37398863, -5.08237123, -6.03231287, -7.07665539, -9.52616215]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.28680015]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1365 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 26.490989685058594
alpha/beta optimization time: 1.407031536102295
initial alpha-crown bounds: tensor([[ 2.05517411,  6.03731203, -0.21251741,  2.50705314,  3.02221203,
          1.49958706,  2.69033122,  3.27446365,  5.61737442]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.2125174105167389
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.3782398700714
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.37819409370422
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.37815833091736
Verifying property 2 with 1 instances.
##### Instance 160 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.21251741]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.69691086, -9.90914440, -3.04869223, -5.95901394, -2.41780186,
        -6.51351690, -5.05484104, -5.98770094, -7.13607407, -9.76951885],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.21251741]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 647
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 238
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 906
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010538101196289062
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2125169038772583
10 lb beta sum: 0.0, worst -0.21252135932445526
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0531    transfer 0.0001    finalize 0.0001    func 0.0536    
Accumulated time: func 0.0536    prepare 0.0002    bound 0.0531    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 1] 
split level 2: [/input-12, 25] 
split level 3: [/input-12, 37] 
split level 4: [/input-12, 93] 
split level 5: [/input-12, 26] 
split level 6: [/input-12, 51] 
split level 7: [/input-12, 72] 
split level 8: [/input-12, 42] 
split level 9: [/input-12, 44] 
split level 10: [/input-12, 82] 
split level 11: [/input-8, 1370] 
split level 12: [/input-8, 1300] 
split level 13: [/input-8, 1066] 
split level 14: [/input-8, 1878] 
split level 15: [/input-8, 1291] 
split level 16: [/input-8, 666] 
split level 17: [/input-8, 532] 
split level 18: [/input-8, 682] 
split level 19: [/input-8, 1290] 
split level 20: [/input-8, 1292] 
split level 21: [/input-8, 658] 
split level 22: [/input-8, 1373] 
split level 23: [/input-8, 1020] 
split level 24: [/input-8, 1043] 
split level 25: [/input-8, 1365] 
split level 26: [/input-8, 1357] 
split level 27: [/input-8, 542] 
split level 28: [/input-8, 673] 
split level 29: [/input-8, 1819] 
split level 30: [/input-8, 524] 
split level 31: [/input-8, 468] 
split level 32: [/input-8, 1374] 
split level 33: [/input-8, 1309] 
split level 34: [/input-8, 1297] 
split level 35: [/input-8, 1347] 
split level 36: [/input-8, 517] 
split level 37: [/input-8, 538] 
split level 38: [/input-8, 541] 
split level 39: [/input-8, 698] 
split level 40: [/input, 1142] 
split level 41: [/input-8, 1021] 
split level 42: [/input-8, 484] 
split level 43: [/input-8, 1354] 
split level 44: [/input, 3221] 
split level 45: [/input-8, 79] 
split level 46: [/input, 3219] 
split level 47: [/input, 3220] 
split level 48: [/input-8, 1477] 
split level 49: [/input-8, 476] 
split level 50: [/input-12, 78] 
split level 51: [/input-8, 526] 
split level 52: [/input-8, 1072] 
split level 53: [/input-8, 1778] 
split level 54: [/input-8, 1382] 
split level 55: [/input-8, 1289] 
split level 56: [/input-8, 1349] 
split level 57: [/input-8, 1326] 
split level 58: [/input-8, 979] 
split level 59: [/input, 2452] 
split level 60: [/input-8, 516] 
split level 61: [/input-8, 572] 
split level 62: [/input-8, 87] 
split level 63: [/input-8, 1281] 
split level 64: [/input-8, 1396] 
split level 65: [/input-8, 530] 
split level 66: [/input-8, 1342] 
split level 67: [/input-8, 1388] 
split level 68: [/input-8, 1137] 
split level 69: [/input-8, 670] 
split level 70: [/input-8, 1476] 
split level 71: [/input-8, 1389] 
split level 72: [/input-8, 107] 
split level 73: [/input-8, 1053] 
split level 74: [/input-8, 562] 
split level 75: [/input-8, 1093] 
split level 76: [/input-8, 1478] 
split level 77: [/input-8, 1018] 
split level 78: [/input-8, 1779] 
split level 79: [/input-8, 1764] 
split level 80: [/input-8, 515] 
split level 81: [/input, 4036] 
split level 82: [/input-8, 1130] 
split level 83: [/input, 2453] 
split level 84: [/input-8, 1036] 
split level 85: [/input, 3204] 
split level 86: [/input-8, 860] 
split level 87: [/input-8, 990] 
split level 88: [/input-8, 1780] 
split level 89: [/input, 3430] 
split level 90: [/input-8, 987] 
split level 91: [/input-8, 535] 
split level 92: [/input-8, 895] 
split level 93: [/input-8, 1473] 
split level 94: [/input, 2906] 
split level 95: [/input, 3429] 
split level 96: [/input-12, 53] 
split level 97: [/input-12, 28] 
split level 98: [/input-8, 1438] 
split level 99: [/input, 1624] 
split level 100: [/input-8, 977] 
split level 101: [/input, 4046] 
split level 102: [/input-8, 564] 
split level 103: [/input-8, 565] 
split level 104: [/input-8, 1475] 
split level 105: [/input-8, 1777] 
split level 106: [/input, 450] 
split level 107: [/input, 459] 
split level 108: [/input, 4039] 
split level 109: [/input-8, 1738] 
split level 110: [/input-8, 1765] 
split level 111: [/input-8, 91] 
split level 112: [/input-8, 1457] 
split level 113: [/input, 4006] 
split level 114: [/input, 2149] 
split level 115: [/input-8, 552] 
split level 116: [/input, 453] 
split level 117: [/input, 4005] 
split level 118: [/input, 4020] 
split level 119: [/input, 1444] 
split level 120: [/input, 2922] 
split level 121: [/input-8, 1474] 
split level 122: [/input, 3445] 
split level 123: [/input-8, 1284] 
split level 124: [/input, 3452] 
split level 125: [/input, 2551] 
split level 126: [/input-8, 559] 
split level 127: [/input-8, 543] 
split level 128: [/input, 2235] 
split level 129: [/input, 460] 
split level 130: [/input-8, 982] 
split level 131: [/input, 2251] 
split level 132: [/input, 2535] 
split level 133: [/input, 2909] 
split level 134: [/input-8, 112] 
split level 135: [/input-8, 1294] 
split level 136: [/input, 410] 
split level 137: [/input, 2910] 
split level 138: [/input, 438] 
split level 139: [/input, 2507] 
split level 140: [/input-8, 569] 
split level 141: [/input-8, 1439] 
split level 142: [/input, 2553] 
split level 143: [/input, 2469] 
split level 144: [/input, 1993] 
split level 145: [/input, 3991] 
split level 146: [/input, 1782] 
split level 147: [/input, 2926] 
split level 148: [/input, 2492] 
split level 149: [/input, 2556] 
split level 150: [/input-8, 521] 
split level 151: [/input, 2547] 
split level 152: [/input, 2548] 
split level 153: [/input, 2526] 
split level 154: [/input, 3303] 
split level 155: [/input, 3268] 
split level 156: [/input, 2893] 
split level 157: [/input, 2203] 
split level 158: [/input, 445] 
split level 159: [/input, 2519] 
split level 160: [/input, 2924] 
split level 161: [/input, 2525] 
split level 162: [/input, 2749] 
split level 163: [/input-8, 71] 
split level 164: [/input, 2887] 
split level 165: [/input, 239] 
split level 166: [/input, 3317] 
split level 167: [/input-8, 974] 
split level 168: [/input, 3300] 
split level 169: [/input, 3469] 
split level 170: [/input, 4058] 
split level 171: [/input, 3254] 
split level 172: [/input, 2541] 
split level 173: [/input-8, 594] 
split level 174: [/input, 2491] 
split level 175: [/input, 1783] 
split level 176: [/input, 3318] 
split level 177: [/input, 250] 
split level 178: [/input, 1947] 
split level 179: [/input-8, 1766] 
split level 180: [/input, 1784] 
split level 181: [/input, 3188] 
split level 182: [/input, 4061] 
split level 183: [/input, 446] 
split level 184: [/input, 4018] 
split level 185: [/input, 3284] 
split level 186: [/input, 2538] 
split level 187: [/input, 2921] 
split level 188: [/input-8, 931] 
split level 189: [/input, 2783] 
split level 190: [/input, 2508] 
split level 191: [/input, 1691] 
split level 192: [/input, 3262] 
split level 193: [/input, 3304] 
split level 194: [/input, 2929] 
split level 195: [/input, 3428] 
split level 196: [/input, 1526] 
split level 197: [/input, 1962] 
split level 198: [/input, 3575] 
split level 199: [/input, 1977] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.212520033121109
10 lb beta sum: 0.0, worst -0.21251851320266724
Time: prepare 0.0116    bound 0.0996    transfer 0.0016    finalize 0.0029    func 0.1183    
Accumulated time: func 0.1719    prepare 0.0220    bound 0.1527    transfer 0.0017    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.01664478) min lb tensor(-0.21251664)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010872364044189453 
BICCOS Cumulative time: 0.010872364044189453
Preprocessing time: 0.010175704956054688 Inference time: 8.630752563476562e-05 Add cuts time: 6.4849853515625e-05 Cut analysis time: 0.000545501708984375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20007 (1), -0.19931 (1), -0.19922 (1), -0.19884 (1), -0.19873 (1), -0.19870 (1), -0.19839 (1), -0.19818 (1), -0.19745 (1), -0.19722 (1), -0.19709 (1), -0.19693 (1), -0.19679 (1), -0.19658 (1), -0.19653 (1), -0.19645 (1), -0.19573 (1), -0.19547 (1), -0.19451 (1), -0.19368 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5178    set_bounds 0.0099    solve 0.1184    add 0.1031    
Accumulated time: pickout 0.0003    decision 0.5178    set_bounds 0.0099    solve 0.1184    add 0.1031    
Current (lb-rhs): -0.20007358491420746
50 domains visited
Cumulative time: 0.8191742897033691

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 25] [/input-12, 25] [/input-12, 1] [/input-12, 25] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 25] [/input-12, 25] [/input-12, 25] 
split level 3: [/input-12, 37] [/input-12, 26] [/input-12, 37] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.17806097865104675
10 lb beta sum: 0.18744227290153503, worst -0.17715033888816833
Time: prepare 0.0073    bound 0.1370    transfer 0.0014    finalize 0.0027    func 0.1510    
Accumulated time: func 0.3229    prepare 0.0295    bound 0.2898    transfer 0.0030    finalize 0.0057    
all_split False
======================Cut inference begins======================
max lb tensor(0.08656800) min lb tensor(-0.17697027)
Number of Verified Splits: 29 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.014846563339233398 
BICCOS Cumulative time: 0.02571892738342285
Preprocessing time: 0.012807369232177734 Inference time: 0.001318216323852539 Add cuts time: 0.0004062652587890625 Cut analysis time: 0.0003147125244140625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06183 (2), -0.06108 (2), -0.06098 (2), -0.06010 (2), -0.06008 (2), -0.05841 (2), -0.05738 (2), -0.05617 (2), -0.05609 (2), -0.05608 (2), -0.05552 (2), -0.05478 (2), -0.05454 (2), -0.05430 (2), -0.05320 (2), -0.05159 (2), -0.05085 (2), -0.05064 (2), -0.05053 (2), -0.04944 (2), 
Length of domains: 50
Time: pickout 0.0020    decision 0.0220    set_bounds 0.0140    solve 0.1511    add 0.2263    
Accumulated time: pickout 0.0023    decision 0.5398    set_bounds 0.0239    solve 0.2695    add 0.3294    
Current (lb-rhs): -0.06182761490345001
100 domains visited
Cumulative time: 1.2569804191589355

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 25] [/input-12, 25] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 1: [/input-12, 25] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 25] 
split level 2: [/input-12, 37] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 37] 
split level 3: [/input-12, 26] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04115021228790283
10 lb beta sum: 0.3064647912979126, worst -0.021371424198150635
Time: prepare 0.0278    bound 0.1391    transfer 0.0052    finalize 0.0031    func 0.1779    
Accumulated time: func 0.5008    prepare 0.0576    bound 0.4289    transfer 0.0083    finalize 0.0088    
all_split False
======================Cut inference begins======================
max lb tensor(0.15123618) min lb tensor(-0.02105328)
Number of Verified Splits: 394 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03746604919433594 
BICCOS Cumulative time: 0.06318497657775879
Preprocessing time: 0.012208700180053711 Inference time: 0.01813960075378418 Add cuts time: 0.006921052932739258 Cut analysis time: 0.00019669532775878906
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0078    decision 0.0219    set_bounds 0.0163    solve 0.1780    add 0.0189    
Accumulated time: pickout 0.0101    decision 0.5617    set_bounds 0.0402    solve 0.4475    add 0.3483    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 25,  1]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([5.38539213e-11, 9.12893116e-02, 5.40399849e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 25,  1]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.38539213e-11, 9.12893116e-02, 9.99763161e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 25,  1]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.38539213e-11, 6.22048229e-02, 9.87884849e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 25,  1]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([5.38539213e-11, 6.22048229e-02, 9.27542895e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26,  1]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([5.86226692e-11, 5.57913482e-02, 5.57582229e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26,  1]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([5.86226692e-11, 5.57913482e-02, 9.92330015e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26,  1]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([5.86226692e-11, 3.08171380e-02, 1.58616364e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26,  1]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([5.86226692e-11, 3.08171380e-02, 9.88001823e-02]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  8
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.005913719534873962

all verified at 1th iter
Time: prepare 0.0004    bound 0.0107    transfer 0.0001    finalize 0.0002    func 0.0115    
Accumulated time: func 0.5123    prepare 0.0580    bound 0.4396    transfer 0.0084    finalize 0.0089    
After pruning, left:  0

Back to Regular BaB


Properties batch 3, size 1
Remaining timeout: 196.5501184463501
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 196.55001997947693
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 196.5493266582489
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 196.54928708076477
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 196.54924964904785
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 196.54922819137573
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.4509 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 161, vnnlib ID: 161 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.37989235, -12.20897579,  -6.17734432,  -5.76625729,  -6.93807411,
          -3.77729273,  -8.37195778,  -7.49653196, -10.76665974, -11.58906174]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [456]; unstable size 456; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 195, 1, 456] with unstable size 194 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 456] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 456] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [194]; unstable size 194; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 194] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 194] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[4.38867807, 6.47063160, 1.48629045, 1.57262683, 2.21376371, 3.23497486,
         2.94880295, 5.30806828, 6.18771648]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0735 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 162, vnnlib ID: 162 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.11128426, -16.94595146,  -9.70340824, -12.93247986, -10.71098232,
         -13.59650612, -11.43742085, -14.93857956, -14.94828510, -17.84584045]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [429]; unstable size 429; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 211, 1, 429] with unstable size 210 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 429] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 429] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [210]; unstable size 210; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 210] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 210] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.12003708, 5.67749166, 2.36852169, 0.16531801, 2.94698119, 0.60729027,
         3.85684586, 3.46587324, 6.63982296]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0765 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 163, vnnlib ID: 163 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.02505970,  -9.52995014,  -8.17180538,  -8.71479893,  -8.61084557,
          -8.27292728,  -9.82778072,  -7.94948912, -11.30757618,  -9.90987301]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [638]; unstable size 638; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 260, 1, 638] with unstable size 259 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 638] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 638] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [259]; unstable size 259; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 259] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 259] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.64108026, -0.23480129, -1.33058977, -0.47275150, -0.46761560,
         -0.91006315,  0.31482816,  1.61070621,  0.12702465]], device='cuda:0') None
Remain 6 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.02505970,  -9.52995014,  -8.17180538,  -8.71479893,  -8.61084557,
          -8.27292728,  -9.82778072,  -7.94948912, -11.30757618,  -9.90987301]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.50275230,  -9.31137848,  -7.50799370,  -8.29128933,  -8.19631863,
           -7.91926050,  -9.32222462,  -7.97495413, -10.89629650,  -9.75931168],
         [ -8.50275230,  -9.31137848,  -7.50799370,  -8.29128933,  -8.19631863,
           -7.91926050,  -9.32222462,  -7.97495413, -10.89629650,  -9.75931168]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.52779818,  1.33642435, -0.46696043,  0.31633520,  0.22136450,
          -0.05569363]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0069 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0715 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 164, vnnlib ID: 164 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.41563416, -7.71300030, -2.86234260, -2.13727427, -3.26359797,
         -1.15524995, -3.90352178, -2.95602751, -6.72349644, -6.40303564]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [677]; unstable size 677; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 255, 1, 677] with unstable size 254 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 677] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 677] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [254]; unstable size 254; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 254] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 254] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.88557816, 4.58735800, 0.73231363, 0.69587100, 1.00518155, 1.60793054,
         0.80470574, 3.98152161, 3.66006446]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0659 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 165, vnnlib ID: 165 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.93124580, -13.00026798, -10.51418877, -11.34232426, -11.59994984,
         -12.09090137, -13.21082306, -11.37638664, -10.77716541, -12.72988605]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [678]; unstable size 678; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 229, 1, 678] with unstable size 228 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 678] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 678] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [228]; unstable size 228; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 228] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 228] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.97155690, -0.03237712, -1.84702158, -0.69079256, -0.48902345,
          0.04457045,  0.97582519, -2.07122684, -0.15928888]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.93124580, -13.00026798, -10.51418877, -11.34232426, -11.59994984,
         -12.09090137, -13.21082306, -11.37638664, -10.77716541, -12.72988605]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.93124771, -13.00026798, -10.51418972, -11.34232521, -11.59995174,
          -12.09090233, -13.21082497, -11.37638760, -10.77716732, -12.72988605],
         [-11.93124771, -13.00026798, -10.51418972, -11.34232521, -11.59995174,
          -12.09090233, -13.21082497, -11.37638760, -10.77716732, -12.72988605]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.55486012,  1.62388039, -0.86219788, -0.03406239,  0.22356415,
          -0.59922028,  1.35349846]]], device='cuda:0')
number of violation:  3
clean attack image tensor([[[[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         ...,


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]],


         [[[-0.98888886, -0.90952379, -0.65555555,  ..., -0.51269841,
            -0.59206349, -0.51269841],
           [-0.89365077, -0.76666665, -0.60793650,  ..., -0.25873005,
            -0.40158719, -0.41746020],
           [-0.60793650, -0.56031746, -0.60793650,  ..., -0.13174593,
            -0.30634910, -0.40158719],
           ...,
           [ 0.72539687,  0.74126989,  0.80476195,  ...,  1.67777801,
             1.53492093,  1.18571460],
           [ 1.32857168,  1.37619078,  1.39206374,  ...,  1.69365108,
             1.51904786,  1.21746063],
           [ 1.77301610,  1.82063520,  1.78888917,  ...,  1.70952404,
             1.50317490,  1.15396857]],

          [[-0.95008045, -0.74074072, -0.32206106,  ..., -0.33816412,
            -0.38647330, -0.35426718],
           [-0.86956519, -0.69243151, -0.48309177,  ..., -0.11272129,
            -0.24154577, -0.32206106],
           [-0.62801927, -0.57971013, -0.62801927,  ..., -0.09661824,
            -0.30595800, -0.46698871],
           ...,
           [ 0.41867965,  0.41867965,  0.46698883,  ...,  1.69082153,
             1.44927561,  0.99838978],
           [ 1.22383285,  1.27214205,  1.27214205,  ...,  1.70692456,
             1.44927561,  1.03059590],
           [ 1.81964600,  1.86795521,  1.85185218,  ...,  1.73913074,
             1.46537876,  0.99838978]],

          [[-0.68815589, -0.41829082,  0.09145443,  ...,  0.42128953,
             0.39130452,  0.40629703],
           [-0.70314842, -0.52323836, -0.28335828,  ...,  0.61619210,
             0.48125952,  0.37631202],
           [-0.49325335, -0.44827583, -0.49325335,  ...,  0.54122955,
             0.33133450,  0.12143944],
           ...,
           [ 0.30134949,  0.31634200,  0.37631202,  ...,  2.02548766,
             1.71064508,  1.05097473],
           [ 1.26086998,  1.32084000,  1.32084000,  ...,  2.02548766,
             1.68066013,  1.06596720],
           [ 2.07046509,  2.10045004,  2.09295392,  ...,  2.02548766,
             1.63568258,  1.00599718]]]]], device='cuda:0') torch.Size([1, 7, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0831 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 166, vnnlib ID: 166 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.11835384, -8.97128582, -5.58492565, -4.69414091, -4.89179802,
         -5.64415693, -2.85636353, -6.39860678, -9.19930935, -7.69397116]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [551]; unstable size 551; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 328, 1, 551] with unstable size 327 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 551] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 551] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [327]; unstable size 327; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 327] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 327] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.57804966e+00,  3.19466448e+00,  7.62257576e-01,  2.92239189e-01,
         -4.13894653e-04,  8.40279341e-01,  1.08616233e+00,  3.18620515e+00,
          2.37681603e+00]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.11835384, -8.97128582, -5.58492565, -4.69414091, -4.89179802,
         -5.64415693, -2.85636353, -6.39860678, -9.19930935, -7.69397116]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.68it/s]100%|██████████| 1/1 [00:00<00:00,  8.66it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.55580521, -8.57808781, -5.04000854, -4.20195580, -4.09700203,
          -5.05925369, -2.93464255, -5.77540493, -8.65878296, -7.32569599]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[1.16235948]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1185 seconds.
PGD attack failed
verified_status unknown
verified_success False

all verified at 1th iter
best_l after optimization: 14.467982292175293
alpha/beta optimization time: 0.025552988052368164
initial alpha-crown bounds: tensor([[2.59561157, 3.21909428, 0.77398109, 0.30205703, 0.01445055, 0.85292029,
         1.10492146, 3.20970964, 2.39523649]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 0 ; Worst class: (+ rhs) 0.014450550079345703
verified with init bound!
Result: safe-incomplete in 0.2138 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 167, vnnlib ID: 167 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.73988724, -9.75906086, -5.44053173, -6.54372168, -6.64882469,
         -6.77933979, -7.41226196, -7.94059706, -5.61829853, -8.84854412]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [625]; unstable size 625; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 289, 1, 625] with unstable size 288 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 625] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 625] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [288]; unstable size 288; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 288] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 288] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.12974167, -0.58860946,  0.22682786,  0.44695139,  0.33009392,
          0.98268551,  1.32415712, -0.52337843,  2.49502420]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.73988724, -9.75906086, -5.44053173, -6.54372168, -6.64882469,
         -6.77933979, -7.41226196, -7.94059706, -5.61829853, -8.84854412]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.27it/s]100%|██████████| 1/1 [00:00<00:00,  8.26it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.69770527, -9.33743763, -5.35973167, -6.24397135, -6.46449852,
          -6.50081301, -7.10666513, -7.71766424, -4.85390425, -8.43731594],
         [-4.69770527, -9.33743763, -5.35973167, -6.24397135, -6.46449852,
          -6.50081301, -7.10666513, -7.71766424, -4.85390425, -8.43731594]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.66202641, 0.15619898]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1241 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 8.481110572814941
alpha/beta optimization time: 1.268437385559082
initial alpha-crown bounds: tensor([[ 3.24760509, -0.53066176,  0.27715850,  0.50497174,  0.39338470,
          1.04264975,  1.40458286, -0.43028855,  2.57170773]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.5306617617607117
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5387725830078
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.53872847557068
Verifying property 1 with 1 instances.
##### Instance 167 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.53066176]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.73988724, -9.75906086, -5.44053173, -6.54372168, -6.64882469,
        -6.77933979, -7.41226196, -7.94059706, -5.61829853, -8.84854412],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.53066176]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 625
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 280
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 926
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001285076141357422
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5306614637374878
10 lb beta sum: 0.0, worst -0.5306681394577026
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0605    transfer 0.0001    finalize 0.0002    func 0.0610    
Accumulated time: func 0.0610    prepare 0.0002    bound 0.0605    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 1] 
split level 3: [/input-12, 26] 
split level 4: [/input-12, 4] 
split level 5: [/input-12, 41] 
split level 6: [/input-12, 90] 
split level 7: [/input-12, 10] 
split level 8: [/input-8, 1637] 
split level 9: [/input-8, 1628] 
split level 10: [/input-12, 45] 
split level 11: [/input-8, 1438] 
split level 12: [/input-8, 542] 
split level 13: [/input-8, 1620] 
split level 14: [/input-8, 1309] 
split level 15: [/input-8, 845] 
split level 16: [/input-8, 1889] 
split level 17: [/input-8, 659] 
split level 18: [/input-8, 1890] 
split level 19: [/input-8, 1052] 
split level 20: [/input-8, 996] 
split level 21: [/input-8, 413] 
split level 22: [/input-8, 1885] 
split level 23: [/input-8, 1446] 
split level 24: [/input-8, 1003] 
split level 25: [/input-8, 1069] 
split level 26: [/input-8, 1011] 
split level 27: [/input-8, 284] 
split level 28: [/input-8, 1289] 
split level 29: [/input-8, 1437] 
split level 30: [/input-8, 549] 
split level 31: [/input-8, 854] 
split level 32: [/input-8, 1453] 
split level 33: [/input-8, 1461] 
split level 34: [/input-8, 1071] 
split level 35: [/input-8, 1013] 
split level 36: [/input-8, 1651] 
split level 37: [/input, 2268] 
split level 38: [/input-8, 1054] 
split level 39: [/input-8, 1044] 
split level 40: [/input-8, 422] 
split level 41: [/input-8, 1648] 
split level 42: [/input-8, 1891] 
split level 43: [/input-8, 1460] 
split level 44: [/input, 3273] 
split level 45: [/input-8, 1010] 
split level 46: [/input-8, 412] 
split level 47: [/input-8, 550] 
split level 48: [/input-8, 1656] 
split level 49: [/input-8, 1253] 
split level 50: [/input-8, 1017] 
split level 51: [/input-8, 1063] 
split level 52: [/input, 2188] 
split level 53: [/input, 3479] 
split level 54: [/input-8, 614] 
split level 55: [/input-8, 698] 
split level 56: [/input, 3224] 
split level 57: [/input, 2172] 
split level 58: [/input, 2177] 
split level 59: [/input, 2235] 
split level 60: [/input-8, 1027] 
split level 61: [/input-8, 1470] 
split level 62: [/input-8, 276] 
split level 63: [/input-8, 1021] 
split level 64: [/input-8, 924] 
split level 65: [/input-8, 410] 
split level 66: [/input-8, 859] 
split level 67: [/input-8, 1001] 
split level 68: [/input-8, 678] 
split level 69: [/input, 442] 
split level 70: [/input, 2230] 
split level 71: [/input, 3438] 
split level 72: [/input, 937] 
split level 73: [/input, 3495] 
split level 74: [/input-8, 1640] 
split level 75: [/input-8, 867] 
split level 76: [/input-8, 1870] 
split level 77: [/input, 3208] 
split level 78: [/input, 2709] 
split level 79: [/input, 1585] 
split level 80: [/input-8, 1893] 
split level 81: [/input-8, 1608] 
split level 82: [/input-8, 690] 
split level 83: [/input-8, 1436] 
split level 84: [/input, 457] 
split level 85: [/input-8, 792] 
split level 86: [/input, 1769] 
split level 87: [/input, 2473] 
split level 88: [/input, 3242] 
split level 89: [/input, 2754] 
split level 90: [/input, 2913] 
split level 91: [/input, 3468] 
split level 92: [/input-8, 563] 
split level 93: [/input, 1626] 
split level 94: [/input, 324] 
split level 95: [/input, 2251] 
split level 96: [/input, 3240] 
split level 97: [/input, 3564] 
split level 98: [/input, 1675] 
split level 99: [/input-8, 630] 
split level 100: [/input, 3226] 
split level 101: [/input, 3449] 
split level 102: [/input, 198] 
split level 103: [/input, 1449] 
split level 104: [/input, 2519] 
split level 105: [/input, 2537] 
split level 106: [/input, 2293] 
split level 107: [/input-8, 1625] 
split level 108: [/input, 294] 
split level 109: [/input-8, 421] 
split level 110: [/input, 3320] 
split level 111: [/input-8, 1059] 
split level 112: [/input, 1627] 
split level 113: [/input, 3496] 
split level 114: [/input, 3454] 
split level 115: [/input, 1768] 
split level 116: [/input, 1411] 
split level 117: [/input, 4038] 
split level 118: [/input-8, 1641] 
split level 119: [/input, 490] 
split level 120: [/input-8, 406] 
split level 121: [/input, 4017] 
split level 122: [/input, 3239] 
split level 123: [/input, 2601] 
split level 124: [/input-8, 1347] 
split level 125: [/input-8, 1340] 
split level 126: [/input-8, 1614] 
split level 127: [/input, 3257] 
split level 128: [/input-8, 1447] 
split level 129: [/input, 489] 
split level 130: [/input, 2245] 
split level 131: [/input, 1434] 
split level 132: [/input, 2229] 
split level 133: [/input, 1577] 
split level 134: [/input, 4018] 
split level 135: [/input, 2489] 
split level 136: [/input, 2246] 
split level 137: [/input, 2073] 
split level 138: [/input, 4055] 
split level 139: [/input-8, 2044] 
split level 140: [/input, 441] 
split level 141: [/input, 2265] 
split level 142: [/input, 1672] 
split level 143: [/input, 3274] 
split level 144: [/input, 2439] 
split level 145: [/input-8, 1055] 
split level 146: [/input, 2504] 
split level 147: [/input, 2074] 
split level 148: [/input, 970] 
split level 149: [/input-8, 606] 
split level 150: [/input-8, 648] 
split level 151: [/input, 1602] 
split level 152: [/input, 2585] 
split level 153: [/input, 2089] 
split level 154: [/input, 3127] 
split level 155: [/input, 426] 
split level 156: [/input, 901] 
split level 157: [/input, 2513] 
split level 158: [/input, 2600] 
split level 159: [/input, 2554] 
split level 160: [/input, 343] 
split level 161: [/input, 3142] 
split level 162: [/input-8, 1880] 
split level 163: [/input-8, 952] 
split level 164: [/input, 3442] 
split level 165: [/input, 1415] 
split level 166: [/input, 2252] 
split level 167: [/input, 4049] 
split level 168: [/input, 291] 
split level 169: [/input-8, 393] 
split level 170: [/input, 3669] 
split level 171: [/input, 3193] 
split level 172: [/input, 2475] 
split level 173: [/input, 3681] 
split level 174: [/input, 1416] 
split level 175: [/input, 3262] 
split level 176: [/input, 2257] 
split level 177: [/input-8, 1236] 
split level 178: [/input, 485] 
split level 179: [/input, 3532] 
split level 180: [/input, 3110] 
split level 181: [/input, 3288] 
split level 182: [/input, 3259] 
split level 183: [/input, 825] 
split level 184: [/input-8, 1455] 
split level 185: [/input, 2603] 
split level 186: [/input, 2584] 
split level 187: [/input, 2428] 
split level 188: [/input, 972] 
split level 189: [/input, 2470] 
split level 190: [/input, 3665] 
split level 191: [/input, 4043] 
split level 192: [/input, 2203] 
split level 193: [/input, 2301] 
split level 194: [/input, 2213] 
split level 195: [/input, 3309] 
split level 196: [/input, 4056] 
split level 197: [/input, 1464] 
split level 198: [/input, 3715] 
split level 199: [/input, 3580] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.5305799245834351
10 lb beta sum: 0.0, worst -0.5305607318878174
Time: prepare 0.0118    bound 0.1140    transfer 0.0105    finalize 0.0035    func 0.1426    
Accumulated time: func 0.2036    prepare 0.0225    bound 0.1745    transfer 0.0106    finalize 0.0037    
all_split False
======================Cut inference begins======================
max lb tensor(-0.11686039) min lb tensor(-0.53055567)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.010611534118652344 
BICCOS Cumulative time: 0.010611534118652344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.52136 (1), -0.52083 (1), -0.52066 (1), -0.52060 (1), -0.52059 (1), -0.52049 (1), -0.52012 (1), -0.51991 (1), -0.51951 (1), -0.51931 (1), -0.51827 (1), -0.51807 (1), -0.51798 (1), -0.51768 (1), -0.51642 (1), -0.51638 (1), -0.51618 (1), -0.51527 (1), -0.51500 (1), -0.51495 (1), 
Length of domains: 50
Time: pickout 0.0003    decision 0.5581    set_bounds 0.0109    solve 0.1427    add 0.1104    
Accumulated time: pickout 0.0003    decision 0.5581    set_bounds 0.0109    solve 0.1427    add 0.1104    
Current (lb-rhs): -0.5213556885719299
50 domains visited
Cumulative time: 0.8994412422180176

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 31] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 31] [/input-12, 26] [/input-12, 31] [/input-12, 1] [/input-12, 26] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] 
split level 2: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 26] [/input-12, 1] [/input-12, 26] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 3: [/input-12, 26] [/input-12, 4] [/input-12, 26] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 26] [/input-12, 4] [/input-12, 4] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.47706830501556396
10 lb beta sum: 0.0, worst -0.476715087890625
Time: prepare 0.0127    bound 0.1104    transfer 0.0014    finalize 0.0026    func 0.1296    
Accumulated time: func 0.3332    prepare 0.0354    bound 0.2849    transfer 0.0120    finalize 0.0062    
all_split False
======================Cut inference begins======================
max lb tensor(0.18310171) min lb tensor(-0.47664058)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.013467788696289062 
BICCOS Cumulative time: 0.024079322814941406
Preprocessing time: 0.012242555618286133 Inference time: 0.00044155120849609375 Add cuts time: 0.0001609325408935547 Cut analysis time: 0.0006227493286132812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.18464 (2), -0.18406 (2), -0.18320 (2), -0.18254 (2), -0.18248 (2), -0.17996 (2), -0.17808 (2), -0.17793 (2), -0.17778 (2), -0.17772 (2), -0.17758 (2), -0.17571 (2), -0.17558 (2), -0.17549 (2), -0.17437 (2), -0.17410 (2), -0.17368 (2), -0.17343 (2), -0.17274 (2), -0.17022 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0208    set_bounds 0.0128    solve 0.1297    add 0.0845    
Accumulated time: pickout 0.0015    decision 0.5789    set_bounds 0.0237    solve 0.2724    add 0.1949    
Current (lb-rhs): -0.18463528156280518
100 domains visited
Cumulative time: 1.1620681285858154

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 31] [/input-12, 31] [/input-12, 54] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 26] [/input-12, 31] [/input-12, 26] [/input-12, 31] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 1] [/input-12, 26] [/input-12, 1] [/input-12, 26] 
split level 2: [/input-12, 4] [/input-12, 4] [/input-12, 26] [/input-12, 4] [/input-12, 4] [/input-12, 1] [/input-12, 4] [/input-12, 1] [/input-12, 4] [/input-12, 1] 
split level 3: [/input-12, 41] [/input-12, 41] [/input-12, 4] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 4] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14694327116012573
10 lb beta sum: 0.28084254264831543, worst -0.2666304111480713
Time: prepare 0.0070    bound 0.1342    transfer 0.0014    finalize 0.0026    func 0.1483    
Accumulated time: func 0.4815    prepare 0.0426    bound 0.4191    transfer 0.0133    finalize 0.0088    
all_split False
======================Cut inference begins======================
max lb tensor(0.25962436) min lb tensor(-0.12940481)
Number of Verified Splits: 201 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 7
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.024162769317626953 
BICCOS Cumulative time: 0.04824209213256836
Preprocessing time: 0.011906147003173828 Inference time: 0.009137630462646484 Add cuts time: 0.0026569366455078125 Cut analysis time: 0.0004620552062988281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04495 (3), -0.04454 (3), -0.04374 (3), -0.04332 (3), -0.04310 (3), -0.04215 (3), -0.04170 (3), -0.04165 (3), -0.04091 (3), -0.04013 (3), -0.04000 (3), -0.03989 (3), -0.03973 (3), -0.03904 (3), -0.03824 (3), -0.03749 (3), -0.03708 (3), -0.03700 (3), -0.03668 (3), -0.03666 (3), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0229    set_bounds 0.0164    solve 0.1484    add 0.2383    
Accumulated time: pickout 0.0027    decision 0.6018    set_bounds 0.0401    solve 0.4208    add 0.4332    
Current (lb-rhs): -0.04494577646255493
150 domains visited
Cumulative time: 1.6205456256866455

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 4] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 3: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08177492022514343
10 lb beta sum: 0.2785494029521942, worst -0.4550170600414276
Time: prepare 0.0065    bound 0.1371    transfer 0.0007    finalize 0.0022    func 0.1499    
Accumulated time: func 0.6314    prepare 0.0494    bound 0.5562    transfer 0.0141    finalize 0.0110    
all_split False
======================Cut inference begins======================
max lb tensor(0.28025424) min lb tensor(-0.00902724)
Number of Verified Splits: 386 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.03801727294921875 
BICCOS Cumulative time: 0.08625936508178711
Preprocessing time: 0.012262105941772461 Inference time: 0.01967310905456543 Add cuts time: 0.005725860595703125 Cut analysis time: 0.0003561973571777344
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0078    decision 0.0208    set_bounds 0.0170    solve 0.1500    add 0.0246    
Accumulated time: pickout 0.0105    decision 0.6226    set_bounds 0.0571    solve 0.5708    add 0.4578    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
150 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 31]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 1.72309443e-01, 2.80009151e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 31]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 1.72309443e-01, 1.10559389e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 41, 31]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([1.82192979e+29, 6.63288087e-02, 8.54258984e-02, 2.20310017e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 41, 31]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.82192979e+29, 6.63288087e-02, 8.54258984e-02, 5.91209382e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 41, 31]), tensor([-1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.82192979e+29, 6.63288087e-02, 1.01925477e-01, 2.27677152e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 26, 41, 31]), tensor([-1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.82192979e+29, 6.63288087e-02, 1.01925477e-01, 5.80478758e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 31]), tensor([ 1., -1.]), tensor([0, 0]), tensor([2.84372970e-10, 2.26213858e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([54, 31]), tensor([1., 1.]), tensor([0, 0]), tensor([2.84372970e-10, 1.57529280e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  8
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.31494009494781494
10 lb beta sum: 0.3044258952140808, worst -0.3108426630496979
Time: prepare 0.0004    bound 0.1171    transfer 0.0002    finalize 0.0002    func 0.1180    
Accumulated time: func 0.7493    prepare 0.0498    bound 0.6732    transfer 0.0142    finalize 0.0112    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 1] 
split level 1: [/input-12, 4] [/input-12, 26] 
split level 2: [/input-12, 26] [/input-12, 4] 
split level 3: [/input-12, 41] [/input-12, 41] 
split level 4: [/input-12, 10] [/input-12, 10] 
split level 5: [/input-8, 1628] [/input-8, 1628] 
split level 6: [/input-8, 1620] [/input-8, 1052] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6542748212814331, worst -0.07504886388778687
10 lb beta sum: 0.6542748212814331, worst -0.07435217499732971
Time: prepare 0.0111    bound 0.1177    transfer 0.0014    finalize 0.0014    func 0.1333    
Accumulated time: func 0.8826    prepare 0.0613    bound 0.7910    transfer 0.0157    finalize 0.0126    
all_split False
======================Cut inference begins======================
max lb tensor(0.16505280) min lb tensor(-0.07406613)
Number of Verified Splits: 218 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.6806412935256958, worst -0.6822932958602905
10 lb beta sum: 0.9766736626625061, worst -0.4690079689025879
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 5
#cuts 4-6: 5
#cuts 7-9: 12
#cuts >= 20: 0
BICCOS time: 0.4693262577056885 
BICCOS Cumulative time: 0.5555856227874756
Preprocessing time: 0.007587909698486328 Inference time: 0.4577827453613281 Add cuts time: 0.002745389938354492 Cut analysis time: 0.0012102127075195312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07407 (7), -0.07253 (7), -0.06941 (7), -0.06802 (7), -0.06747 (7), -0.06624 (7), -0.06231 (7), -0.06099 (7), -0.05614 (7), -0.05485 (7), -0.05301 (7), -0.05174 (7), -0.04789 (7), -0.04679 (7), -0.04461 (7), -0.04349 (7), -0.03821 (7), -0.03744 (7), -0.03445 (7), -0.03377 (7), 
Length of domains: 38
Time: pickout 0.0005    decision 0.0199    set_bounds 0.0246    solve 0.1334    add 0.0653    
Accumulated time: pickout 0.0110    decision 0.6425    set_bounds 0.0817    solve 0.7041    add 0.5230    
Current (lb-rhs): -0.07406613230705261
188 domains visited
Cumulative time: 2.794340133666992

BaB round 2
batch: 38
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1620] [/input-8, 1620] [/input-8, 1885] [/input-8, 413] [/input-8, 1885] [/input-8, 1620] [/input-8, 1885] [/input-8, 1620] [/input-8, 1885] [/input-8, 1620] 
split level 1: [/input-8, 859] [/input-8, 845] [/input-8, 1620] [/input-8, 1013] [/input-8, 413] [/input-8, 845] [/input-8, 1620] [/input-8, 1885] [/input-8, 1013] [/input-8, 859] 
split level 2: [/input-8, 1885] [/input-8, 1885] [/input-8, 1013] [/input-8, 1885] [/input-8, 1013] [/input-8, 1885] [/input-8, 1013] [/input-8, 1013] [/input-8, 1620] [/input-8, 1885] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06121420860290527
10 lb beta sum: 0.25052881240844727, worst -0.058151647448539734
Time: prepare 0.0059    bound 0.1504    transfer 0.0037    finalize 0.0021    func 0.1643    
Accumulated time: func 1.0470    prepare 0.0675    bound 0.9414    transfer 0.0194    finalize 0.0147    
all_split False
======================Cut inference begins======================
max lb tensor(0.02206349) min lb tensor(-0.05801183)
Number of Verified Splits: 116 of 304
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3528168797492981
10 lb beta sum: 0.7716325521469116, worst -0.22849565744400024
Total number of valid cuts: 22.
#cuts 1-3: 5
#cuts 4-6: 5
#cuts 7-9: 12
#cuts >= 20: 0
BICCOS time: 0.24688172340393066 
BICCOS Cumulative time: 0.8024673461914062
Preprocessing time: 0.010255813598632812 Inference time: 0.23575139045715332 Add cuts time: 0.0008473396301269531 Cut analysis time: 2.7179718017578125e-05
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05801 (10), -0.05789 (10), -0.05667 (10), -0.05651 (10), -0.05641 (10), -0.05641 (10), -0.05536 (10), -0.05514 (10), -0.05427 (10), -0.05414 (10), -0.05391 (10), -0.05378 (10), -0.05316 (10), -0.05293 (10), -0.05262 (10), -0.05241 (10), -0.05233 (10), -0.05223 (10), -0.05141 (10), -0.05119 (10), 
Length of domains: 188
Time: pickout 0.0051    decision 0.0170    set_bounds 0.0166    solve 0.1645    add 0.0805    
Accumulated time: pickout 0.0162    decision 0.6595    set_bounds 0.0983    solve 0.8686    add 0.6035    
Current (lb-rhs): -0.05801182985305786
376 domains visited
Cumulative time: 3.333998680114746

BaB round 3
batch: 188
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 413] [/input-8, 1437] [/input-8, 284] [/input-8, 413] [/input-8, 284] [/input-8, 284] [/input-8, 413] [/input-8, 1437] [/input-8, 284] [/input-8, 413] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47215792536735535, worst -0.05581223964691162
10 lb beta sum: 0.47215792536735535, worst -0.05564117431640625
Time: prepare 0.0195    bound 0.1622    transfer 0.0020    finalize 0.0022    func 0.1885    
Accumulated time: func 1.2354    prepare 0.0872    bound 1.1036    transfer 0.0214    finalize 0.0169    
all_split False
======================Cut inference begins======================
max lb tensor(0.01385981) min lb tensor(-0.05557400)
Number of Verified Splits: 62 of 376
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 6
#cuts 4-6: 1
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.02023601531982422 
BICCOS Cumulative time: 0.8227033615112305
Preprocessing time: 0.011481523513793945 Inference time: 0.006094694137573242 Add cuts time: 0.001238107681274414 Cut analysis time: 0.0014216899871826172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05557 (11), -0.05544 (11), -0.05434 (11), -0.05408 (11), -0.05406 (11), -0.05395 (11), -0.05279 (11), -0.05260 (11), -0.05159 (11), -0.05146 (11), -0.05145 (11), -0.05131 (11), -0.05053 (11), -0.05036 (11), -0.04999 (11), -0.04977 (11), -0.04971 (11), -0.04965 (11), -0.04872 (11), -0.04850 (11), 
Length of domains: 314
Time: pickout 0.0175    decision 0.0234    set_bounds 0.0164    solve 0.1886    add 0.0760    
Accumulated time: pickout 0.0336    decision 0.6829    set_bounds 0.1147    solve 1.0572    add 0.6795    
Current (lb-rhs): -0.055573999881744385
690 domains visited
Cumulative time: 3.684140920639038

BaB round 4
batch: 314
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1011] [/input-8, 284] [/input-8, 1656] [/input-8, 1891] [/input-8, 1437] [/input-8, 413] [/input-8, 1011] [/input-8, 284] [/input-8, 1620] [/input-8, 1891] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05619502067565918
10 lb beta sum: 0.4251074492931366, worst -0.053327128291130066
Time: prepare 0.0122    bound 0.1546    transfer 0.0055    finalize 0.0029    func 0.1801    
Accumulated time: func 1.4155    prepare 0.0995    bound 1.2583    transfer 0.0269    finalize 0.0198    
all_split False
======================Cut inference begins======================
max lb tensor(0.31283391) min lb tensor(-0.05328290)
Number of Verified Splits: 185 of 628
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 13
#cuts >= 20: 0
BICCOS time: 0.04249095916748047 
BICCOS Cumulative time: 0.8651943206787109
Preprocessing time: 0.018806934356689453 Inference time: 0.021346092224121094 Add cuts time: 0.0019390583038330078 Cut analysis time: 0.00039887428283691406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05328 (12), -0.05313 (12), -0.05207 (12), -0.05184 (12), -0.05160 (12), -0.05148 (12), -0.05053 (12), -0.05035 (12), -0.04911 (12), -0.04896 (12), -0.04891 (12), -0.04875 (12), -0.04809 (12), -0.04798 (12), -0.04775 (12), -0.04748 (12), -0.04712 (12), -0.04699 (12), -0.04632 (12), -0.04623 (12), 
Length of domains: 443
Time: pickout 0.0171    decision 0.0303    set_bounds 0.0275    solve 0.1802    add 0.1055    
Accumulated time: pickout 0.0508    decision 0.7132    set_bounds 0.1423    solve 1.2374    add 0.7850    
Current (lb-rhs): -0.053282901644706726
1133 domains visited
Cumulative time: 4.096006155014038

BaB round 5
batch: 443
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1013] [/input-8, 1656] [/input-8, 1011] [/input-8, 1656] [/input-8, 1013] [/input-8, 845] [/input-8, 1011] [/input-8, 1656] [/input-8, 1013] [/input-8, 1656] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05198466777801514
10 lb beta sum: 1.1351919174194336, worst -0.04599332809448242
Time: prepare 0.0170    bound 0.1616    transfer 0.0068    finalize 0.0043    func 0.1955    
Accumulated time: func 1.6110    prepare 0.1167    bound 1.4199    transfer 0.0337    finalize 0.0240    
all_split False
======================Cut inference begins======================
max lb tensor(0.93932831) min lb tensor(-0.04589033)
Number of Verified Splits: 809 of 886
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.1250913143157959 
BICCOS Cumulative time: 0.9902856349945068
Preprocessing time: 0.026034116744995117 Inference time: 0.09058427810668945 Add cuts time: 0.00820612907409668 Cut analysis time: 0.00026679039001464844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04589 (13), -0.04571 (13), -0.04173 (13), -0.04156 (13), -0.04067 (13), -0.04057 (13), -0.04028 (13), -0.04012 (13), -0.03794 (13), -0.03780 (13), -0.02622 (13), -0.02609 (13), -0.02566 (13), -0.02549 (13), -0.02533 (13), -0.02513 (13), -0.02505 (13), -0.02475 (13), -0.02462 (13), -0.02197 (13), 
Length of domains: 77
Time: pickout 0.0606    decision 0.0375    set_bounds 0.0396    solve 0.1958    add 0.0206    
Accumulated time: pickout 0.1114    decision 0.7506    set_bounds 0.1819    solve 1.4332    add 0.8056    
Current (lb-rhs): -0.04589033126831055
1210 domains visited
Cumulative time: 4.5793585777282715

BaB round 6
batch: 77
splitting decisions: 
split level 0: [/input-8, 1891] [/input-8, 1656] [/input-8, 1656] [/input-8, 1438] [/input-8, 1656] [/input-8, 1656] [/input-8, 1656] [/input-8, 1656] [/input-8, 1438] [/input-8, 1438] 
split level 1: [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 413] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 276] [/input-8, 413] [/input-8, 845] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04426664113998413

all verified at 5th iter
Time: prepare 0.0060    bound 0.0336    transfer 0.0019    finalize 0.0022    func 0.0456    
Accumulated time: func 1.6566    prepare 0.1229    bound 1.4535    transfer 0.0356    finalize 0.0262    
all_split False
======================Cut inference begins======================
max lb tensor(0.18815848) min lb tensor(0.00021976)
Number of Verified Splits: 308 of 308
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.008966207504272461 
BICCOS Cumulative time: 0.9992518424987793
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0023    decision 0.0162    set_bounds 0.0141    solve 0.0457    add 0.0004    
Accumulated time: pickout 0.1137    decision 0.7669    set_bounds 0.1960    solve 1.4789    add 0.8060    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
1210 domains visited
Cumulative time: 4.6680684089660645


Properties batch 2, size 1
Remaining timeout: 193.59783267974854
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 193.59774708747864
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 193.59771919250488
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 193.59769701957703
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 193.59767603874207
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 193.59765529632568
Verifying property 7 with 1 instances.
##### Instance 167 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.43028855]], device='cuda:0') need to verify.
Model prediction is: tensor([-4.73988724, -9.75906086, -5.44053173, -6.54372168, -6.64882469,
        -6.77933979, -7.41226196, -7.94059706, -5.61829853, -8.84854412],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.43028855]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 625
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 280
Node /15 input 0: size torch.Size([100]) unstable 21
-----------------
# of unstable neurons: 926
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010442733764648438
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.43028688430786133
10 lb beta sum: 0.0, worst -0.43030762672424316
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0616    transfer 0.0001    finalize 0.0002    func 0.0621    
Accumulated time: func 0.0621    prepare 0.0002    bound 0.0616    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] 
split level 1: [/input-12, 46] 
split level 2: [/input-12, 17] 
split level 3: [/input-12, 53] 
split level 4: [/input-12, 31] 
split level 5: [/input-8, 1139] 
split level 6: [/input-12, 99] 
split level 7: [/input-12, 54] 
split level 8: [/input-12, 26] 
split level 9: [/input-8, 1438] 
split level 10: [/input-8, 1323] 
split level 11: [/input-8, 1446] 
split level 12: [/input-8, 1436] 
split level 13: [/input-8, 1445] 
split level 14: [/input-8, 1444] 
split level 15: [/input, 2771] 
split level 16: [/input-8, 277] 
split level 17: [/input-8, 1437] 
split level 18: [/input-8, 1069] 
split level 19: [/input-8, 1381] 
split level 20: [/input-8, 1434] 
split level 21: [/input-8, 422] 
split level 22: [/input-8, 118] 
split level 23: [/input-8, 293] 
split level 24: [/input-8, 924] 
split level 25: [/input-8, 284] 
split level 26: [/input-8, 926] 
split level 27: [/input-8, 614] 
split level 28: [/input-8, 1111] 
split level 29: [/input-8, 1253] 
split level 30: [/input, 2741] 
split level 31: [/input-8, 413] 
split level 32: [/input, 2726] 
split level 33: [/input-8, 630] 
split level 34: [/input, 1643] 
split level 35: [/input, 1592] 
split level 36: [/input, 4070] 
split level 37: [/input-8, 1447] 
split level 38: [/input-8, 620] 
split level 39: [/input, 1745] 
split level 40: [/input-8, 933] 
split level 41: [/input, 2787] 
split level 42: [/input, 183] 
split level 43: [/input-8, 854] 
split level 44: [/input-8, 550] 
split level 45: [/input-8, 1148] 
split level 46: [/input-8, 1483] 
split level 47: [/input-8, 1571] 
split level 48: [/input-8, 1620] 
split level 49: [/input-8, 410] 
split level 50: [/input-8, 934] 
split level 51: [/input, 1627] 
split level 52: [/input-8, 1325] 
split level 53: [/input-8, 1572] 
split level 54: [/input-8, 476] 
split level 55: [/input, 1623] 
split level 56: [/input, 417] 
split level 57: [/input, 2177] 
split level 58: [/input-8, 925] 
split level 59: [/input, 2601] 
split level 60: [/input-8, 1455] 
split level 61: [/input-8, 606] 
split level 62: [/input-8, 1439] 
split level 63: [/input-8, 567] 
split level 64: [/input-8, 1505] 
split level 65: [/input, 1762] 
split level 66: [/input-8, 1463] 
split level 67: [/input, 4069] 
split level 68: [/input-8, 1484] 
split level 69: [/input, 2209] 
split level 70: [/input-8, 430] 
split level 71: [/input-8, 274] 
split level 72: [/input-8, 1252] 
split level 73: [/input, 371] 
split level 74: [/input, 3438] 
split level 75: [/input, 369] 
split level 76: [/input-8, 294] 
split level 77: [/input, 1626] 
split level 78: [/input, 2585] 
split level 79: [/input-8, 1628] 
split level 80: [/input, 4036] 
split level 81: [/input-8, 1052] 
split level 82: [/input, 2587] 
split level 83: [/input-8, 111] 
split level 84: [/input, 2149] 
split level 85: [/input, 2150] 
split level 86: [/input, 418] 
split level 87: [/input, 2497] 
split level 88: [/input-8, 1238] 
split level 89: [/input, 2133] 
split level 90: [/input-8, 575] 
split level 91: [/input-8, 941] 
split level 92: [/input, 198] 
split level 93: [/input, 2759] 
split level 94: [/input, 2151] 
split level 95: [/input, 2140] 
split level 96: [/input-8, 1013] 
split level 97: [/input, 1620] 
split level 98: [/input-8, 103] 
split level 99: [/input, 2754] 
split level 100: [/input-8, 628] 
split level 101: [/input, 4055] 
split level 102: [/input, 2600] 
split level 103: [/input-8, 412] 
split level 104: [/input-8, 85] 
split level 105: [/input, 4038] 
split level 106: [/input-8, 475] 
split level 107: [/input-8, 469] 
split level 108: [/input, 1364] 
split level 109: [/input, 4006] 
split level 110: [/input, 1714] 
split level 111: [/input, 2709] 
split level 112: [/input-8, 276] 
split level 113: [/input, 37] 
split level 114: [/input-8, 1021] 
split level 115: [/input-8, 1486] 
split level 116: [/input, 2119] 
split level 117: [/input-8, 1521] 
split level 118: [/input, 2616] 
split level 119: [/input, 2513] 
split level 120: [/input, 1411] 
split level 121: [/input-8, 1063] 
split level 122: [/input, 2599] 
split level 123: [/input-8, 440] 
split level 124: [/input, 1609] 
split level 125: [/input, 192] 
split level 126: [/input-8, 458] 
split level 127: [/input, 3265] 
split level 128: [/input, 3454] 
split level 129: [/input-8, 1429] 
split level 130: [/input-8, 421] 
split level 131: [/input, 2225] 
split level 132: [/input-8, 445] 
split level 133: [/input-8, 1573] 
split level 134: [/input, 2770] 
split level 135: [/input-8, 1006] 
split level 136: [/input, 294] 
split level 137: [/input-8, 1347] 
split level 138: [/input-8, 629] 
split level 139: [/input-8, 500] 
split level 140: [/input-8, 1055] 
split level 141: [/input, 3249] 
split level 142: [/input, 2257] 
split level 143: [/input, 1698] 
split level 144: [/input, 2584] 
split level 145: [/input, 176] 
split level 146: [/input-8, 1608] 
split level 147: [/input, 1577] 
split level 148: [/input, 824] 
split level 149: [/input, 1439] 
split level 150: [/input, 2136] 
split level 151: [/input-8, 1625] 
split level 152: [/input, 2102] 
split level 153: [/input-8, 484] 
split level 154: [/input-8, 1261] 
split level 155: [/input, 2786] 
split level 156: [/input-8, 501] 
split level 157: [/input, 2466] 
split level 158: [/input, 2603] 
split level 159: [/input, 1363] 
split level 160: [/input, 2139] 
split level 161: [/input, 4007] 
split level 162: [/input, 3217] 
split level 163: [/input, 160] 
split level 164: [/input, 2629] 
split level 165: [/input-8, 502] 
split level 166: [/input, 4049] 
split level 167: [/input-8, 1581] 
split level 168: [/input, 4089] 
split level 169: [/input-8, 1230] 
split level 170: [/input, 3442] 
split level 171: [/input, 2913] 
split level 172: [/input, 2630] 
split level 173: [/input, 2371] 
split level 174: [/input-8, 1027] 
split level 175: [/input, 2104] 
split level 176: [/input, 216] 
split level 177: [/input, 1675] 
split level 178: [/input, 4008] 
split level 179: [/input, 1415] 
split level 180: [/input, 2206] 
split level 181: [/input, 970] 
split level 182: [/input, 4056] 
split level 183: [/input, 4039] 
split level 184: [/input-8, 450] 
split level 185: [/input, 1115] 
split level 186: [/input-8, 478] 
split level 187: [/input, 2537] 
split level 188: [/input, 307] 
split level 189: [/input, 2116] 
split level 190: [/input, 3654] 
split level 191: [/input, 4018] 
split level 192: [/input-8, 1254] 
split level 193: [/input, 2480] 
split level 194: [/input, 3349] 
split level 195: [/input, 1406] 
split level 196: [/input, 2830] 
split level 197: [/input, 3280] 
split level 198: [/input-8, 454] 
split level 199: [/input, 921] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4302476644515991
10 lb beta sum: 0.0, worst -0.4302431344985962
Time: prepare 0.0115    bound 0.1101    transfer 0.0024    finalize 0.0033    func 0.1298    
Accumulated time: func 0.1918    prepare 0.0217    bound 0.1716    transfer 0.0025    finalize 0.0034    
all_split False
======================Cut inference begins======================
max lb tensor(0.29873013) min lb tensor(-0.43022740)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010992288589477539 
BICCOS Cumulative time: 0.010992288589477539
Preprocessing time: 0.010335445404052734 Inference time: 6.914138793945312e-05 Add cuts time: 3.314018249511719e-05 Cut analysis time: 0.0005545616149902344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.41681 (1), -0.41668 (1), -0.41636 (1), -0.41632 (1), -0.41619 (1), -0.41599 (1), -0.41588 (1), -0.41587 (1), -0.41499 (1), -0.41497 (1), -0.41493 (1), -0.41406 (1), -0.41355 (1), -0.41318 (1), -0.41228 (1), -0.41185 (1), -0.41168 (1), -0.41157 (1), -0.41025 (1), -0.40885 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5411    set_bounds 0.0092    solve 0.1299    add 0.2052    
Accumulated time: pickout 0.0004    decision 0.5411    set_bounds 0.0092    solve 0.1299    add 0.2052    
Current (lb-rhs): -0.4168088436126709
50 domains visited
Cumulative time: 0.9809210300445557

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 17] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 17] [/input-12, 82] [/input-12, 82] 
split level 1: [/input-12, 53] [/input-12, 17] [/input-12, 53] [/input-12, 17] [/input-12, 53] [/input-12, 17] [/input-12, 53] [/input-12, 53] [/input-12, 17] [/input-12, 17] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 53] [/input-12, 31] [/input-12, 53] [/input-12, 17] [/input-12, 31] [/input-12, 53] [/input-12, 31] 
split level 3: [/input-8, 1436] [/input-12, 26] [/input-12, 26] [/input-12, 31] [/input-12, 26] [/input-12, 31] [/input-12, 31] [/input-12, 26] [/input-12, 31] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.39576274156570435
10 lb beta sum: 0.18990863859653473, worst -0.391588419675827
Time: prepare 0.0075    bound 0.1333    transfer 0.0014    finalize 0.0026    func 0.1474    
Accumulated time: func 0.3392    prepare 0.0296    bound 0.3049    transfer 0.0039    finalize 0.0060    
all_split False
======================Cut inference begins======================
max lb tensor(0.27107465) min lb tensor(-0.39155290)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.016129016876220703 
BICCOS Cumulative time: 0.027121305465698242
Preprocessing time: 0.01229715347290039 Inference time: 0.002176523208618164 Add cuts time: 0.0013320446014404297 Cut analysis time: 0.00032329559326171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.15930 (2), -0.15926 (2), -0.15783 (2), -0.15649 (2), -0.15638 (2), -0.15626 (2), -0.15568 (2), -0.15558 (2), -0.15435 (2), -0.15405 (2), -0.15358 (2), -0.15175 (2), -0.15160 (2), -0.15074 (2), -0.15065 (2), -0.15010 (2), -0.15009 (2), -0.14883 (2), -0.14841 (2), -0.14800 (2), 
Length of domains: 50
Time: pickout 0.0084    decision 0.0233    set_bounds 0.0122    solve 0.1475    add 0.1174    
Accumulated time: pickout 0.0088    decision 0.5645    set_bounds 0.0213    solve 0.2773    add 0.3227    
Current (lb-rhs): -0.1592995822429657
100 domains visited
Cumulative time: 1.306229829788208

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 46] [/input-12, 46] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
split level 1: [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 53] [/input-12, 46] [/input-12, 53] [/input-12, 46] [/input-12, 46] [/input-12, 46] 
split level 2: [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 53] [/input-12, 31] [/input-12, 53] [/input-12, 31] [/input-12, 31] 
split level 3: [/input-8, 118] [/input-8, 1323] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 31] [/input-8, 118] [/input-12, 31] [/input-12, 26] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.15617701411247253
10 lb beta sum: 0.5190648436546326, worst -0.015814632177352905
Time: prepare 0.0077    bound 0.1334    transfer 0.0014    finalize 0.0025    func 0.1476    
Accumulated time: func 0.4869    prepare 0.0376    bound 0.4383    transfer 0.0053    finalize 0.0085    
all_split False
======================Cut inference begins======================
max lb tensor(0.40861568) min lb tensor(-0.01292552)
Number of Verified Splits: 388 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 6.
#cuts 1-3: 6
#cuts >= 20: 0
BICCOS time: 0.040314674377441406 
BICCOS Cumulative time: 0.06743597984313965
Preprocessing time: 0.011912345886230469 Inference time: 0.018265724182128906 Add cuts time: 0.009420394897460938 Cut analysis time: 0.0007162094116210938
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0021    decision 0.0238    set_bounds 0.0176    solve 0.1477    add 0.0202    
Accumulated time: pickout 0.0109    decision 0.5882    set_bounds 0.0389    solve 0.4250    add 0.3429    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
100 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([17, 82]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.82192979e+29, 3.47544402e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([17, 82]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.82192979e+29, 8.80166739e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([17, 31, 82]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 6.43086433e-02, 3.35751832e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([17, 31, 82]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 6.43086433e-02, 1.56019717e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([17, 31, 82]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 3.38865966e-02, 3.44450951e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([17, 31, 82]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 3.38865966e-02, 1.58906624e-01]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  6
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.21467828750610352
10 lb beta sum: 0.5160617828369141, worst -0.1498781442642212
Time: prepare 0.0004    bound 0.1429    transfer 0.0002    finalize 0.0002    func 0.1438    
Accumulated time: func 0.6307    prepare 0.0380    bound 0.5813    transfer 0.0055    finalize 0.0087    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 46] 
split level 1: [/input-12, 53] 
split level 2: [/input-12, 31] 
split level 3: [/input-12, 99] 
split level 4: [/input-12, 54] 
split level 5: [/input-12, 26] 
split level 6: [/input-8, 1323] 
split level 7: [/input-8, 1436] 
cut re-enabled after branching node selection
0 lb beta sum: 1.208592176437378, worst -0.09530699253082275
10 lb beta sum: 1.208592176437378, worst -0.09456169605255127
Time: prepare 0.0118    bound 0.1486    transfer 0.0028    finalize 0.0014    func 0.1662    
Accumulated time: func 0.7969    prepare 0.0502    bound 0.7299    transfer 0.0082    finalize 0.0100    
all_split False
======================Cut inference begins======================
max lb tensor(0.69290155) min lb tensor(-0.09422243)
Number of Verified Splits: 243 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.208592176437378, worst -0.21519744396209717
10 lb beta sum: 1.2631498575210571, worst -0.13016963005065918
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 6
#cuts 7-9: 10
#cuts >= 20: 0
BICCOS time: 0.31867051124572754 
BICCOS Cumulative time: 0.3861064910888672
Preprocessing time: 0.007552385330200195 Inference time: 0.30286741256713867 Add cuts time: 0.0072481632232666016 Cut analysis time: 0.0010025501251220703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09422 (8), -0.08130 (8), -0.07997 (8), -0.06739 (8), -0.06703 (8), -0.05580 (8), -0.05352 (8), -0.04192 (8), -0.02503 (8), -0.01293 (8), -0.01101 (8), -0.00561 (8), -0.00194 (8), 
Length of domains: 13
Time: pickout 0.0008    decision 0.0231    set_bounds 0.0250    solve 0.1663    add 0.0013    
Accumulated time: pickout 0.0117    decision 0.6114    set_bounds 0.0639    solve 0.5913    add 0.3442    
Current (lb-rhs): -0.09422242641448975
113 domains visited
Cumulative time: 2.2613346576690674

BaB round 2
batch: 13
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 118] [/input-8, 118] [/input-8, 413] [/input-8, 118] [/input-8, 118] [/input-8, 413] [/input-8, 118] [/input-8, 1437] [/input-8, 413] [/input-8, 413] 
split level 1: [/input-8, 413] [/input-8, 1437] [/input-8, 924] [/input-8, 413] [/input-8, 1437] [/input-8, 924] [/input-8, 1437] [/input-8, 413] [/input-8, 924] [/input-8, 924] 
split level 2: [/input-8, 1437] [/input-8, 924] [/input-8, 1620] [/input-8, 1437] [/input-8, 924] [/input-8, 1620] [/input-8, 413] [/input-8, 924] [/input-8, 1620] [/input-8, 1620] 
split level 3: [/input-8, 410] [/input-8, 410] [/input-8, 1628] [/input-8, 410] [/input-8, 410] [/input-8, 1628] [/input-8, 410] [/input-8, 410] [/input-8, 1628] [/input-8, 1628] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07553571462631226
10 lb beta sum: 0.1280602514743805, worst -0.07474976778030396
Time: prepare 0.0044    bound 0.1511    transfer 0.0014    finalize 0.0015    func 0.1599    
Accumulated time: func 0.9567    prepare 0.0548    bound 0.8809    transfer 0.0097    finalize 0.0115    
all_split False
======================Cut inference begins======================
max lb tensor(0.04116470) min lb tensor(-0.07452627)
Number of Verified Splits: 79 of 208
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.01586461067199707 
BICCOS Cumulative time: 0.40197110176086426
Preprocessing time: 0.006721019744873047 Inference time: 0.00793004035949707 Add cuts time: 0.0008895397186279297 Cut analysis time: 0.00032401084899902344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07453 (12), -0.07377 (12), -0.06945 (12), -0.06882 (12), -0.06873 (12), -0.06810 (12), -0.06502 (12), -0.06429 (12), -0.06238 (12), -0.06172 (12), -0.06164 (12), -0.06121 (12), -0.06090 (12), -0.06063 (12), -0.06014 (12), -0.05979 (12), -0.05834 (12), -0.05768 (12), -0.05708 (12), -0.05669 (12), 
Length of domains: 129
Time: pickout 0.0014    decision 0.0143    set_bounds 0.0126    solve 0.1600    add 0.0727    
Accumulated time: pickout 0.0131    decision 0.6257    set_bounds 0.0765    solve 0.7513    add 0.4169    
Current (lb-rhs): -0.07452626526355743
242 domains visited
Cumulative time: 2.5458412170410156

BaB round 3
batch: 129
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 924] [/input-8, 630] [/input-8, 924] [/input-8, 630] [/input-8, 924] [/input-8, 630] [/input-8, 924] [/input-8, 630] [/input-8, 924] [/input-8, 630] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07188093662261963
10 lb beta sum: 0.19118958711624146, worst -0.07127648591995239
Time: prepare 0.0051    bound 0.1516    transfer 0.0010    finalize 0.0014    func 0.1608    
Accumulated time: func 1.1175    prepare 0.0601    bound 1.0325    transfer 0.0107    finalize 0.0129    
all_split False
======================Cut inference begins======================
max lb tensor(0.00741202) min lb tensor(-0.07120664)
Number of Verified Splits: 12 of 258
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 8
#cuts 4-6: 1
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.010471820831298828 
BICCOS Cumulative time: 0.4124429225921631
Preprocessing time: 0.007871627807617188 Inference time: 0.0016293525695800781 Add cuts time: 0.00018525123596191406 Cut analysis time: 0.0007855892181396484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07121 (13), -0.07047 (13), -0.06593 (13), -0.06531 (13), -0.06524 (13), -0.06456 (13), -0.06112 (13), -0.06039 (13), -0.05888 (13), -0.05837 (13), -0.05824 (13), -0.05807 (13), -0.05777 (13), -0.05764 (13), -0.05735 (13), -0.05721 (13), -0.05676 (13), -0.05642 (13), -0.05444 (13), -0.05380 (13), 
Length of domains: 246
Time: pickout 0.0194    decision 0.0196    set_bounds 0.0114    solve 0.1609    add 0.0761    
Accumulated time: pickout 0.0325    decision 0.6453    set_bounds 0.0879    solve 0.9122    add 0.4931    
Current (lb-rhs): -0.07120664417743683
488 domains visited
Cumulative time: 2.851046085357666

BaB round 4
batch: 246
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 413] [/input-8, 1620] [/input-8, 413] [/input-8, 1620] [/input-8, 118] [/input-8, 1620] [/input-8, 118] [/input-8, 1620] [/input-8, 413] [/input-8, 1620] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06852483749389648
10 lb beta sum: 0.18647979199886322, worst -0.06798893213272095
Time: prepare 0.0104    bound 0.1553    transfer 0.0048    finalize 0.0028    func 0.1764    
Accumulated time: func 1.2940    prepare 0.0707    bound 1.1878    transfer 0.0155    finalize 0.0157    
all_split False
======================Cut inference begins======================
max lb tensor(0.00514477) min lb tensor(-0.06794907)
Number of Verified Splits: 36 of 492
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 8
#cuts 4-6: 4
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.020505189895629883 
BICCOS Cumulative time: 0.43294811248779297
Preprocessing time: 0.014806270599365234 Inference time: 0.004547119140625 Add cuts time: 0.0006158351898193359 Cut analysis time: 0.0005359649658203125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06795 (14), -0.06721 (14), -0.06255 (14), -0.06203 (14), -0.06189 (14), -0.06128 (14), -0.05782 (14), -0.05708 (14), -0.05673 (14), -0.05601 (14), -0.05559 (14), -0.05496 (14), -0.05474 (14), -0.05452 (14), -0.05439 (14), -0.05403 (14), -0.05394 (14), -0.05365 (14), -0.05295 (14), -0.05262 (14), 
Length of domains: 456
Time: pickout 0.0169    decision 0.0266    set_bounds 0.0214    solve 0.1766    add 0.0819    
Accumulated time: pickout 0.0494    decision 0.6719    set_bounds 0.1093    solve 1.0888    add 0.5750    
Current (lb-rhs): -0.0679490715265274
944 domains visited
Cumulative time: 3.2022628784179688

BaB round 5
batch: 456
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1571] [/input-8, 1571] [/input, 1623] [/input-8, 550] [/input, 1623] [/input-8, 1571] [/input-8, 550] [/input-8, 1571] [/input-8, 550] [/input, 1623] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06514793634414673
10 lb beta sum: 0.18281245231628418, worst -0.06467372179031372
Time: prepare 0.0208    bound 0.1556    transfer 0.0067    finalize 0.0049    func 0.1940    
Accumulated time: func 1.4879    prepare 0.0918    bound 1.3434    transfer 0.0222    finalize 0.0206    
all_split False
======================Cut inference begins======================
max lb tensor(0.00592989) min lb tensor(-0.06464781)
Number of Verified Splits: 91 of 912
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 26.
#cuts 1-3: 8
#cuts 4-6: 8
#cuts 7-9: 10
#cuts >= 20: 0
BICCOS time: 0.04421067237854004 
BICCOS Cumulative time: 0.477158784866333
Preprocessing time: 0.028160810470581055 Inference time: 0.012782812118530273 Add cuts time: 0.002048969268798828 Cut analysis time: 0.0012180805206298828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06465 (15), -0.06405 (15), -0.06129 (15), -0.06044 (15), -0.05875 (15), -0.05855 (15), -0.05815 (15), -0.05798 (15), -0.05544 (15), -0.05537 (15), -0.05462 (15), -0.05452 (15), -0.05425 (15), -0.05393 (15), -0.05277 (15), -0.05218 (15), -0.05167 (15), -0.05144 (15), -0.05123 (15), -0.05121 (15), 
Length of domains: 821
Time: pickout 0.0196    decision 0.2408    set_bounds 0.0376    solve 0.1942    add 0.1209    
Accumulated time: pickout 0.0689    decision 0.9128    set_bounds 0.1469    solve 1.2830    add 0.6959    
Current (lb-rhs): -0.06464780867099762
1765 domains visited
Cumulative time: 3.8680522441864014

BaB round 6
batch: 821
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1623] [/input, 1623] [/input-8, 1571] [/input, 1623] [/input-8, 1571] [/input, 1623] [/input-8, 1325] [/input, 1623] [/input, 1623] [/input-8, 1571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.061217546463012695
10 lb beta sum: 0.17749054729938507, worst -0.06071104109287262
Time: prepare 0.0387    bound 0.1711    transfer 0.0098    finalize 0.0098    func 0.2407    
Accumulated time: func 1.7287    prepare 0.1307    bound 1.5145    transfer 0.0320    finalize 0.0304    
all_split False
======================Cut inference begins======================
max lb tensor(0.00875331) min lb tensor(-0.06068626)
Number of Verified Splits: 221 of 1642
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 48.
#cuts 1-3: 8
#cuts 4-6: 26
#cuts 7-9: 14
#cuts >= 20: 0
BICCOS time: 0.08908295631408691 
BICCOS Cumulative time: 0.5662417411804199
Preprocessing time: 0.05322980880737305 Inference time: 0.028642892837524414 Add cuts time: 0.004918813705444336 Cut analysis time: 0.002291440963745117
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06069 (16), -0.06013 (16), -0.05767 (16), -0.05732 (16), -0.05665 (16), -0.05656 (16), -0.05561 (16), -0.05509 (16), -0.05475 (16), -0.05435 (16), -0.05421 (16), -0.05331 (16), -0.05304 (16), -0.05257 (16), -0.05232 (16), -0.05163 (16), -0.05141 (16), -0.05125 (16), -0.05066 (16), -0.05054 (16), 
Length of domains: 1421
Time: pickout 0.0846    decision 0.0592    set_bounds 0.0630    solve 0.2411    add 0.0705    
Accumulated time: pickout 0.1536    decision 0.9719    set_bounds 0.2099    solve 1.5241    add 0.7664    
Current (lb-rhs): -0.06068626046180725
3186 domains visited
Cumulative time: 4.481585264205933

BaB round 7
batch: 1421
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1620] [/input-8, 1572] [/input-8, 1572] [/input-8, 1571] [/input-8, 1572] [/input-8, 1572] [/input-8, 1572] [/input-8, 1571] [/input-8, 1572] [/input-8, 1571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05685436725616455
10 lb beta sum: 0.17379988729953766, worst -0.05639423429965973
Time: prepare 0.0675    bound 0.2930    transfer 0.0193    finalize 0.0199    func 0.4191    
Accumulated time: func 2.1478    prepare 0.1984    bound 1.8075    transfer 0.0513    finalize 0.0502    
all_split False
======================Cut inference begins======================
max lb tensor(0.00961512) min lb tensor(-0.05637273)
Number of Verified Splits: 483 of 2842
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 85.
#cuts 1-3: 8
#cuts 4-6: 41
#cuts 7-9: 36
#cuts >= 20: 0
BICCOS time: 0.36310911178588867 
BICCOS Cumulative time: 0.9293508529663086
Preprocessing time: 0.2779979705810547 Inference time: 0.06496596336364746 Add cuts time: 0.015735864639282227 Cut analysis time: 0.004409313201904297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05637 (17), -0.05583 (17), -0.05479 (17), -0.05419 (17), -0.05330 (17), -0.05308 (17), -0.05234 (17), -0.05231 (17), -0.05187 (17), -0.05176 (17), -0.05148 (17), -0.05113 (17), -0.05101 (17), -0.05098 (17), -0.05096 (17), -0.05061 (17), -0.05043 (17), -0.04980 (17), -0.04936 (17), -0.04901 (17), 
Length of domains: 2359
Time: pickout 0.0231    decision 0.0944    set_bounds 0.1186    solve 0.4197    add 0.0417    
Accumulated time: pickout 0.1767    decision 1.0664    set_bounds 0.3285    solve 1.9438    add 0.8081    
Current (lb-rhs): -0.05637273192405701
5545 domains visited
Cumulative time: 5.552751064300537

BaB round 8
batch: 2359
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 1148] [/input-8, 630] [/input-8, 1148] [/input-8, 1148] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0532875657081604
10 lb beta sum: 0.17244064807891846, worst -0.05271229147911072
Time: prepare 0.1227    bound 0.4483    transfer 0.0232    finalize 0.0274    func 0.6538    
Accumulated time: func 2.8015    prepare 0.3214    bound 2.2558    transfer 0.0745    finalize 0.0776    
all_split False
======================Cut inference begins======================
max lb tensor(0.01222691) min lb tensor(-0.05268018)
Number of Verified Splits: 1778 of 4718
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 185.
#cuts 1-3: 8
#cuts 4-6: 112
#cuts 7-9: 65
#cuts >= 20: 0
BICCOS time: 0.7834484577178955 
BICCOS Cumulative time: 1.712799310684204
Preprocessing time: 0.16284871101379395 Inference time: 0.5301361083984375 Add cuts time: 0.08236169815063477 Cut analysis time: 0.008101940155029297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05268 (18), -0.05213 (18), -0.05104 (18), -0.05059 (18), -0.05042 (18), -0.05012 (18), -0.04999 (18), -0.04945 (18), -0.04942 (18), -0.04904 (18), -0.04903 (18), -0.04890 (18), -0.04876 (18), -0.04849 (18), -0.04843 (18), -0.04819 (18), -0.04739 (18), -0.04735 (18), -0.04733 (18), -0.04729 (18), 
Length of domains: 2940
Time: pickout 0.0459    decision 0.1474    set_bounds 0.2325    solve 0.6549    add 0.0195    
Accumulated time: pickout 0.2226    decision 1.2138    set_bounds 0.5610    solve 2.5987    add 0.8276    
Current (lb-rhs): -0.052680179476737976
8485 domains visited
Cumulative time: 7.465219974517822

BaB round 9
batch: 2940
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 550] [/input-8, 1325] [/input-8, 1620] [/input-8, 1620] [/input-8, 550] [/input-8, 550] [/input-8, 1620] [/input-8, 1148] [/input-8, 1620] [/input-8, 550] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.051616370677948
10 lb beta sum: 0.16606929898262024, worst -0.05116540193557739
Time: prepare 0.1541    bound 0.5691    transfer 0.0416    finalize 0.0376    func 0.8417    
Accumulated time: func 3.6432    prepare 0.4758    bound 2.8249    transfer 0.1160    finalize 0.1152    
all_split False
======================Cut inference begins======================
max lb tensor(0.02751207) min lb tensor(-0.05113564)
Number of Verified Splits: 1644 of 5880
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 184.
#cuts 1-3: 9
#cuts 4-6: 138
#cuts 7-9: 37
#cuts >= 20: 0
BICCOS time: 0.7670347690582275 
BICCOS Cumulative time: 2.4798340797424316
Preprocessing time: 0.2020859718322754 Inference time: 0.47243309020996094 Add cuts time: 0.0844123363494873 Cut analysis time: 0.008103370666503906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05114 (19), -0.05055 (19), -0.04948 (19), -0.04899 (19), -0.04888 (19), -0.04855 (19), -0.04840 (19), -0.04790 (19), -0.04748 (19), -0.04742 (19), -0.04721 (19), -0.04694 (19), -0.04690 (19), -0.04664 (19), -0.04586 (19), -0.04579 (19), -0.04577 (19), -0.04570 (19), -0.04538 (19), -0.04538 (19), 
Length of domains: 4236
Time: pickout 0.0662    decision 0.1755    set_bounds 0.2815    solve 0.8441    add 0.0380    
Accumulated time: pickout 0.2888    decision 1.3893    set_bounds 0.8424    solve 3.4428    add 0.8656    
Current (lb-rhs): -0.05113564431667328
12721 domains visited
Cumulative time: 9.664966106414795

BaB round 10
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1572] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05015873908996582
10 lb beta sum: 0.14651602506637573, worst -0.04971425235271454
Time: prepare 0.2104    bound 0.7628    transfer 0.0301    finalize 0.0531    func 1.3052    
Accumulated time: func 4.9484    prepare 0.6865    bound 3.5877    transfer 0.1461    finalize 0.1684    
all_split False
======================Cut inference begins======================
max lb tensor(0.04369120) min lb tensor(-0.04969543)
Number of Verified Splits: 4100 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 162.
#cuts 1-3: 10
#cuts 4-6: 133
#cuts 7-9: 19
#cuts >= 20: 0
BICCOS time: 1.045393943786621 
BICCOS Cumulative time: 3.5252280235290527
Preprocessing time: 0.2696077823638916 Inference time: 0.6361227035522461 Add cuts time: 0.1332690715789795 Cut analysis time: 0.006394386291503906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04970 (20), -0.04910 (20), -0.04805 (20), -0.04746 (20), -0.04743 (20), -0.04709 (20), -0.04688 (20), -0.04648 (20), -0.04598 (20), -0.04593 (20), -0.04576 (20), -0.04547 (20), -0.04540 (20), -0.04522 (20), -0.04441 (20), -0.04438 (20), -0.04426 (20), -0.04421 (20), -0.04394 (20), -0.04394 (20), 
Length of domains: 4232
Time: pickout 0.0723    decision 0.2423    set_bounds 0.3860    solve 1.3073    add 0.0355    
Accumulated time: pickout 0.3611    decision 1.6316    set_bounds 1.2285    solve 4.7502    add 0.9011    
Current (lb-rhs): -0.04969543218612671
16813 domains visited
current_vram/total_varm: 10.6GB/99.9GB, batch_size increase to 8192
Cumulative time: 12.801069736480713

BaB round 11
batch: 4232
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] [/input-8, 1438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.045934319496154785
10 lb beta sum: 0.16812410950660706, worst -0.04927569627761841
Time: prepare 0.2126    bound 0.7816    transfer 0.0254    finalize 0.0581    func 1.1349    
Accumulated time: func 6.0834    prepare 0.8993    bound 4.3693    transfer 0.1716    finalize 0.2264    
all_split False
======================Cut inference begins======================
max lb tensor(0.05101825) min lb tensor(-0.04545803)
Number of Verified Splits: 4726 of 8464
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 177.
#cuts 1-3: 11
#cuts 4-6: 153
#cuts 7-9: 13
#cuts >= 20: 0
BICCOS time: 1.5792670249938965 
BICCOS Cumulative time: 5.104495048522949
Preprocessing time: 0.30475282669067383 Inference time: 1.1146063804626465 Add cuts time: 0.15359044075012207 Cut analysis time: 0.0063173770904541016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04546 (21), -0.04487 (21), -0.04403 (21), -0.04401 (21), -0.04382 (21), -0.04379 (21), -0.04344 (21), -0.04343 (21), -0.04320 (21), -0.04319 (21), -0.04254 (21), -0.04237 (21), -0.04191 (21), -0.04174 (21), -0.04169 (21), -0.04151 (21), -0.04131 (21), -0.04122 (21), -0.04118 (21), -0.04097 (21), 
Length of domains: 3738
Time: pickout 0.0973    decision 0.2528    set_bounds 0.5741    solve 1.1388    add 0.0254    
Accumulated time: pickout 0.4584    decision 1.8844    set_bounds 1.8026    solve 5.8889    add 0.9264    
Current (lb-rhs): -0.04545803368091583
20551 domains visited
Cumulative time: 16.559290170669556

BaB round 12
batch: 3738
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1572] [/input-8, 550] [/input-8, 1325] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 550] [/input-8, 1572] [/input-8, 550] [/input-8, 550] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04268014430999756
10 lb beta sum: 0.18674184381961823, worst -0.04564696550369263
Time: prepare 0.1954    bound 0.6994    transfer 0.0097    finalize 0.0433    func 0.9987    
Accumulated time: func 7.0821    prepare 1.0951    bound 5.0687    transfer 0.1813    finalize 0.2697    
all_split False
======================Cut inference begins======================
max lb tensor(0.04047547) min lb tensor(-0.04220203)
Number of Verified Splits: 1656 of 7476
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 141.
#cuts 1-3: 15
#cuts 4-6: 115
#cuts 7-9: 11
#cuts >= 20: 0
BICCOS time: 0.6422097682952881 
BICCOS Cumulative time: 5.746704816818237
Preprocessing time: 0.28943705558776855 Inference time: 0.28547048568725586 Add cuts time: 0.06213498115539551 Cut analysis time: 0.005167245864868164
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04220 (22), -0.04161 (22), -0.04058 (22), -0.04051 (22), -0.03996 (22), -0.03994 (22), -0.03956 (22), -0.03950 (22), -0.03903 (22), -0.03896 (22), -0.03893 (22), -0.03886 (22), -0.03865 (22), -0.03846 (22), -0.03844 (22), -0.03824 (22), -0.03823 (22), -0.03808 (22), -0.03805 (22), -0.03797 (22), 
Length of domains: 5820
Time: pickout 0.0695    decision 0.2196    set_bounds 0.3722    solve 1.2476    add 0.0257    
Accumulated time: pickout 0.5279    decision 2.1040    set_bounds 2.1747    solve 7.1366    add 0.9521    
Current (lb-rhs): -0.04220202565193176
26371 domains visited
Cumulative time: 19.177319288253784

BaB round 13
batch: 5820
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] [/input-8, 1325] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.039247214794158936
10 lb beta sum: 0.18656547367572784, worst -0.040821462869644165
Time: prepare 0.3139    bound 1.0303    transfer 0.0523    finalize 0.0708    func 1.5458    
Accumulated time: func 8.6278    prepare 1.4093    bound 6.0991    transfer 0.2336    finalize 0.3405    
all_split False
======================Cut inference begins======================
max lb tensor(0.00913888) min lb tensor(-0.03875820)
Number of Verified Splits: 1274 of 11640
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 208.
#cuts 1-3: 17
#cuts 4-6: 139
#cuts 7-9: 51
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.9983596801757812 
BICCOS Cumulative time: 6.7450644969940186
Preprocessing time: 0.4196591377258301 Inference time: 0.5103201866149902 Add cuts time: 0.059999942779541016 Cut analysis time: 0.008380413055419922
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03876 (23), -0.03817 (23), -0.03775 (23), -0.03715 (23), -0.03713 (23), -0.03706 (23), -0.03651 (23), -0.03648 (23), -0.03644 (23), -0.03613 (23), -0.03612 (23), -0.03611 (23), -0.03587 (23), -0.03557 (23), -0.03555 (23), -0.03554 (23), -0.03552 (23), -0.03548 (23), -0.03542 (23), -0.03510 (23), 
Length of domains: 10366
Time: pickout 0.1291    decision 0.3423    set_bounds 0.8586    solve 1.5496    add 0.0620    
Accumulated time: pickout 0.6570    decision 2.4463    set_bounds 3.0333    solve 8.6862    add 1.0142    
Current (lb-rhs): -0.03875820338726044
36737 domains visited
Cumulative time: 23.163971424102783

BaB round 14
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 430] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03570073843002319
10 lb beta sum: 0.1676817685365677, worst -0.03522087633609772
Time: prepare 0.4465    bound 1.4736    transfer 0.0647    finalize 0.1076    func 2.1998    
Accumulated time: func 10.8277    prepare 1.8562    bound 7.5727    transfer 0.2983    finalize 0.4481    
all_split False
======================Cut inference begins======================
max lb tensor(0.01049156) min lb tensor(-0.03518602)
Number of Verified Splits: 3384 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 211.
#cuts 1-3: 24
#cuts 4-6: 107
#cuts 7-9: 76
#cuts 10-12: 4
#cuts >= 20: 0
BICCOS time: 1.6285412311553955 
BICCOS Cumulative time: 8.373605728149414
Preprocessing time: 0.869802713394165 Inference time: 0.6183140277862549 Add cuts time: 0.13074636459350586 Cut analysis time: 0.009678125381469727
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03519 (24), -0.03472 (24), -0.03459 (24), -0.03452 (23), -0.03416 (24), -0.03414 (24), -0.03411 (23), -0.03397 (23), -0.03376 (23), -0.03369 (24), -0.03359 (23), -0.03356 (24), -0.03351 (24), -0.03342 (24), -0.03340 (24), -0.03314 (23), -0.03310 (24), -0.03303 (24), -0.03298 (23), -0.03297 (24), 
Length of domains: 15174
Time: pickout 0.1511    decision 0.4752    set_bounds 1.2123    solve 2.2043    add 0.0669    
Accumulated time: pickout 0.8080    decision 2.9215    set_bounds 4.2456    solve 10.8905    add 1.0811    
Current (lb-rhs): -0.03518602252006531
49737 domains visited
current_vram/total_varm: 23.2GB/99.9GB, batch_size increase to 16384
Cumulative time: 28.971465349197388

BaB round 15
batch: 15174
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 575] [/input-8, 1628] [/input-8, 925] [/input-8, 575] [/input-8, 430] [/input-8, 430] [/input-8, 430] [/input-8, 1628] [/input-8, 430] [/input-8, 430] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.032933831214904785
10 lb beta sum: 0.14367938041687012, worst -0.037589773535728455
Time: prepare 0.8137    bound 2.6896    transfer 0.2170    finalize 0.2219    func 4.1404    
Accumulated time: func 14.9681    prepare 2.6703    bound 10.2623    transfer 0.5153    finalize 0.6700    
all_split False
======================Cut inference begins======================
max lb tensor(0.01200317) min lb tensor(-0.03245388)
Number of Verified Splits: 12967 of 30348
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 274.
#cuts 1-3: 22
#cuts 4-6: 147
#cuts 7-9: 102
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 4.2357447147369385 
BICCOS Cumulative time: 12.609350442886353
Preprocessing time: 1.046036958694458 Inference time: 2.7278220653533936 Add cuts time: 0.4493424892425537 Cut analysis time: 0.012543201446533203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03245 (25), -0.03199 (25), -0.03186 (25), -0.03142 (25), -0.03139 (25), -0.03091 (25), -0.03089 (24), -0.03080 (25), -0.03079 (25), -0.03072 (25), -0.03068 (25), -0.03050 (24), -0.03044 (24), -0.03044 (24), -0.03034 (25), -0.03031 (24), -0.03031 (25), -0.03030 (25), -0.03021 (25), -0.03007 (25), 
Length of domains: 17381
Time: pickout 0.3368    decision 1.1834    set_bounds 1.7985    solve 4.4367    add 0.0726    
Accumulated time: pickout 1.1449    decision 4.1049    set_bounds 6.0441    solve 15.3272    add 1.1537    
Current (lb-rhs): -0.032453879714012146
67118 domains visited
Cumulative time: 41.198299407958984

BaB round 16
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input, 1620] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] [/input-8, 614] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02962052822113037
10 lb beta sum: 0.12074314057826996, worst -0.04047296941280365
Time: prepare 0.9632    bound 3.0280    transfer 0.1371    finalize 0.7746    func 5.1271    
Accumulated time: func 20.0952    prepare 3.6341    bound 13.2904    transfer 0.6524    finalize 1.4447    
all_split False
======================Cut inference begins======================
max lb tensor(0.03070076) min lb tensor(-0.02961755)
Number of Verified Splits: 16229 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 45.
#cuts 1-3: 32
#cuts 4-6: 13
#cuts >= 20: 0
BICCOS time: 5.6888511180877686 
BICCOS Cumulative time: 18.29820156097412
Preprocessing time: 1.3059933185577393 Inference time: 3.95977783203125 Add cuts time: 0.4216022491455078 Cut analysis time: 0.0014777183532714844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03091 (25), -0.03034 (25), -0.02963 (25), -0.02962 (26), -0.02937 (26), -0.02901 (26), -0.02898 (25), -0.02883 (26), -0.02874 (26), -0.02865 (26), -0.02857 (26), -0.02854 (26), -0.02848 (26), -0.02846 (26), -0.02839 (26), -0.02824 (26), -0.02821 (25), -0.02819 (26), -0.02806 (26), -0.02798 (26), 
Length of domains: 17536
Time: pickout 0.2955    decision 1.6399    set_bounds 2.3280    solve 5.1394    add 0.0850    
Accumulated time: pickout 1.4404    decision 5.7448    set_bounds 8.3721    solve 20.4665    add 1.2387    
Current (lb-rhs): -0.030912786722183228
83657 domains visited
current_vram/total_varm: 39.8GB/99.9GB, batch_size increase to 32768
Cumulative time: 56.731914043426514

BaB round 17
batch: 17536
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1628] [/input-8, 430] [/input-8, 430] [/input-8, 1628] [/input-8, 1628] [/input-8, 430] [/input-8, 1628] [/input-8, 575] [/input-8, 430] [/input-8, 575] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028831839561462402
10 lb beta sum: 0.3210693895816803, worst -0.028841614723205566
Time: prepare 0.9785    bound 2.7294    transfer 0.1951    finalize 0.2634    func 4.3992    
Accumulated time: func 24.4944    prepare 4.6130    bound 16.0197    transfer 0.8474    finalize 1.7081    
all_split False
======================Cut inference begins======================
max lb tensor(0.94081712) min lb tensor(-0.02883089)
Number of Verified Splits: 28283 of 35072
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 30
#cuts >= 20: 0
BICCOS time: 7.978046417236328 
BICCOS Cumulative time: 26.27624797821045
Preprocessing time: 1.7223930358886719 Inference time: 5.866254806518555 Add cuts time: 0.38845300674438477 Cut analysis time: 0.0009455680847167969
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02883 (27), -0.02853 (27), -0.02839 (27), -0.02823 (27), -0.02797 (27), -0.02794 (27), -0.02791 (26), -0.02780 (27), -0.02776 (27), -0.02761 (27), -0.02753 (26), -0.02740 (27), -0.02740 (27), -0.02731 (26), -0.02719 (27), -0.02705 (27), -0.02697 (26), -0.02685 (27), -0.02684 (26), -0.02677 (27), 
Length of domains: 6789
Time: pickout 0.4280    decision 2.0711    set_bounds 2.3090    solve 4.4121    add 0.0462    
Accumulated time: pickout 1.8684    decision 7.8159    set_bounds 10.6811    solve 24.8786    add 1.2850    
Current (lb-rhs): -0.028830885887145996
90446 domains visited
Cumulative time: 74.32877016067505

BaB round 18
batch: 6789
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1626] [/input-8, 422] [/input-8, 422] [/input-8, 422] [/input-8, 422] [/input-8, 422] [/input-8, 422] [/input-8, 422] [/input-8, 422] [/input-8, 422] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0273129940032959
10 lb beta sum: 0.7480486631393433, worst -0.027148783206939697
Time: prepare 0.3659    bound 1.0994    transfer 0.0677    finalize 0.0979    func 1.7224    
Accumulated time: func 26.2168    prepare 4.9792    bound 17.1191    transfer 0.9152    finalize 1.8060    
all_split False
======================Cut inference begins======================
max lb tensor(0.95405984) min lb tensor(-0.02712554)
Number of Verified Splits: 13133 of 13578
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 3.7211999893188477 
BICCOS Cumulative time: 29.997447967529297
Preprocessing time: 0.9631502628326416 Inference time: 2.6256296634674072 Add cuts time: 0.13186144828796387 Cut analysis time: 0.0005586147308349609
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02713 (28), -0.02666 (28), -0.02607 (28), -0.02560 (27), -0.02540 (28), -0.02533 (28), -0.02497 (28), -0.02433 (27), -0.02427 (28), -0.02410 (28), -0.02329 (28), -0.02255 (27), -0.02242 (27), -0.02222 (28), -0.02206 (27), -0.02197 (28), -0.02191 (28), -0.02175 (28), -0.02153 (27), -0.02089 (28), 
Length of domains: 445
Time: pickout 0.1336    decision 0.4020    set_bounds 0.6474    solve 1.7272    add 0.0845    
Accumulated time: pickout 2.0020    decision 8.2179    set_bounds 11.3285    solve 26.6058    add 1.3695    
Current (lb-rhs): -0.027125537395477295
90891 domains visited
Cumulative time: 81.25666284561157

BaB round 19
batch: 445
splitting decisions: 
split level 0: [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] [/input-8, 1139] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02588897943496704

all verified at 1th iter
Time: prepare 0.0266    bound 0.0191    transfer 0.0048    finalize 0.0060    func 0.0622    
Accumulated time: func 26.2790    prepare 5.0061    bound 17.1383    transfer 0.9199    finalize 1.8121    
all_split False
======================Cut inference begins======================
max lb tensor(0.05159984) min lb tensor(8.34465027e-06)
Number of Verified Splits: 890 of 890
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.03243398666381836 
BICCOS Cumulative time: 30.029881954193115
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0161    decision 0.0406    set_bounds 0.0421    solve 0.0636    add 0.0003    
Accumulated time: pickout 2.0181    decision 8.2585    set_bounds 11.3706    solve 26.6694    add 1.3698    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
90891 domains visited
Cumulative time: 81.45967245101929


Properties batch 8, size 1
Remaining timeout: 111.89718341827393
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 88.1030 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 168, vnnlib ID: 168 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.83010960, -18.46311760, -10.82516861, -14.02094841, -13.35524940,
         -13.57317543, -16.31656647, -16.24346542, -18.31108856, -17.83380508]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [478]; unstable size 478; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 77, 1, 478] with unstable size 76 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 5, 1, 478] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 478] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [76]; unstable size 76; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 5, 1, 76] with unstable size 4 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 76] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [4]; unstable size 4; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 4] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.44705343, 6.67497396, 2.73657417, 2.01246405, 2.17955470, 4.94374943,
         4.64395428, 6.66448069, 6.17840290]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0859 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 169, vnnlib ID: 169 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-6.63894939, -9.64244175, -5.12798119, -6.62656116, -4.67414284,
         -6.34183264, -7.44110918, -6.87718344, -7.57325172, -8.86707783]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [540]; unstable size 540; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 540] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 540] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 540] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 184] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.41975856,  2.63730407, -0.24886751,  1.14163041,  0.84137648,
          1.68192840,  1.20813799,  0.96860647,  2.32131553]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-6.63894939, -9.64244175, -5.12798119, -6.62656116, -4.67414284,
         -6.34183264, -7.44110918, -6.87718344, -7.57325172, -8.86707783]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.71it/s]100%|██████████| 1/1 [00:00<00:00,  8.70it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.51849270, -9.63056850, -5.03511810, -6.76035976, -4.96544600,
          -6.54092455, -7.44870996, -7.21986437, -7.37273216, -8.95295334]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.06967211]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1177 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 11.406268119812012
alpha/beta optimization time: 1.2384939193725586
initial alpha-crown bounds: tensor([[ 0.48204660,  2.72113299, -0.22036755,  1.16896915,  0.86237323,
          1.72370422,  1.25071502,  1.03288579,  2.38480806]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.22036755084991455
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.5739507675171
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.57391166687012
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.57388401031494
Verifying property 2 with 1 instances.
##### Instance 169 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.22036755]], device='cuda:0') need to verify.
Model prediction is: tensor([-6.63894939, -9.64244175, -5.12798119, -6.62656116, -4.67414284,
        -6.34183264, -7.44110918, -6.87718344, -7.57325172, -8.86707783],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.22036755]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 540
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 181
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 739
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00012254714965820312
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22036635875701904
10 lb beta sum: 0.0, worst -0.22037017345428467
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0550    transfer 0.0001    finalize 0.0001    func 0.0555    
Accumulated time: func 0.0555    prepare 0.0002    bound 0.0550    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] 
split level 1: [/input-12, 44] 
split level 2: [/input-12, 82] 
split level 3: [/input-12, 11] 
split level 4: [/input-12, 42] 
split level 5: [/input-12, 17] 
split level 6: [/input-8, 1868] 
split level 7: [/input-8, 1066] 
split level 8: [/input-8, 1124] 
split level 9: [/input-8, 556] 
split level 10: [/input-8, 2019] 
split level 11: [/input-8, 1370] 
split level 12: [/input-8, 1403] 
split level 13: [/input-8, 685] 
split level 14: [/input-8, 1362] 
split level 15: [/input-8, 1138] 
split level 16: [/input-8, 2020] 
split level 17: [/input-8, 1874] 
split level 18: [/input-8, 1356] 
split level 19: [/input-8, 574] 
split level 20: [/input-8, 1073] 
split level 21: [/input-8, 787] 
split level 22: [/input-8, 555] 
split level 23: [/input-8, 1514] 
split level 24: [/input-8, 2018] 
split level 25: [/input-8, 89] 
split level 26: [/input-12, 64] 
split level 27: [/input-8, 1333] 
split level 28: [/input-8, 564] 
split level 29: [/input-8, 1361] 
split level 30: [/input-8, 1508] 
split level 31: [/input-8, 1896] 
split level 32: [/input-8, 700] 
split level 33: [/input-8, 571] 
split level 34: [/input, 2615] 
split level 35: [/input, 2682] 
split level 36: [/input-8, 1775] 
split level 37: [/input-8, 699] 
split level 38: [/input, 2691] 
split level 39: [/input-8, 90] 
split level 40: [/input-8, 573] 
split level 41: [/input, 3207] 
split level 42: [/input-8, 1366] 
split level 43: [/input-8, 1889] 
split level 44: [/input-8, 1499] 
split level 45: [/input-8, 808] 
split level 46: [/input-8, 1405] 
split level 47: [/input-8, 892] 
split level 48: [/input-8, 619] 
split level 49: [/input, 2534] 
split level 50: [/input-8, 923] 
split level 51: [/input-8, 1307] 
split level 52: [/input-12, 28] 
split level 53: [/input, 3973] 
split level 54: [/input, 2662] 
split level 55: [/input, 141] 
split level 56: [/input, 2409] 
split level 57: [/input, 2706] 
split level 58: [/input-8, 1974] 
split level 59: [/input-8, 1406] 
split level 60: [/input-8, 1107] 
split level 61: [/input, 2378] 
split level 62: [/input-8, 1393] 
split level 63: [/input-8, 855] 
split level 64: [/input, 2632] 
split level 65: [/input-8, 1272] 
split level 66: [/input-12, 53] 
split level 67: [/input-8, 1148] 
split level 68: [/input, 218] 
split level 69: [/input-8, 2009] 
split level 70: [/input-8, 1942] 
split level 71: [/input, 1628] 
split level 72: [/input-8, 534] 
split level 73: [/input, 2442] 
split level 74: [/input, 2651] 
split level 75: [/input-8, 883] 
split level 76: [/input-8, 1996] 
split level 77: [/input-8, 884] 
split level 78: [/input, 4039] 
split level 79: [/input-8, 1973] 
split level 80: [/input, 422] 
split level 81: [/input, 3301] 
split level 82: [/input-8, 612] 
split level 83: [/input, 3978] 
split level 84: [/input, 2661] 
split level 85: [/input, 3284] 
split level 86: [/input-8, 1957] 
split level 87: [/input-8, 865] 
split level 88: [/input-8, 1969] 
split level 89: [/input-8, 139] 
split level 90: [/input-8, 1922] 
split level 91: [/input, 2737] 
split level 92: [/input, 2441] 
split level 93: [/input-8, 1836] 
split level 94: [/input-8, 1056] 
split level 95: [/input-8, 1047] 
split level 96: [/input, 1558] 
split level 97: [/input-8, 1064] 
split level 98: [/input-8, 1847] 
split level 99: [/input, 3549] 
split level 100: [/input-8, 1039] 
split level 101: [/input, 2547] 
split level 102: [/input, 2680] 
split level 103: [/input, 3550] 
split level 104: [/input, 2546] 
split level 105: [/input, 2459] 
split level 106: [/input, 3981] 
split level 107: [/input, 2362] 
split level 108: [/input, 2455] 
split level 109: [/input, 2396] 
split level 110: [/input, 2550] 
split level 111: [/input-8, 1898] 
split level 112: [/input, 3226] 
split level 113: [/input, 3959] 
split level 114: [/input-8, 1783] 
split level 115: [/input, 3905] 
split level 116: [/input, 3253] 
split level 117: [/input, 2322] 
split level 118: [/input, 3299] 
split level 119: [/input, 2551] 
split level 120: [/input, 2328] 
split level 121: [/input-8, 277] 
split level 122: [/input, 2515] 
split level 123: [/input, 2774] 
split level 124: [/input, 3906] 
split level 125: [/input, 962] 
split level 126: [/input, 2549] 
split level 127: [/input, 3209] 
split level 128: [/input, 2922] 
split level 129: [/input, 2449] 
split level 130: [/input, 1653] 
split level 131: [/input-8, 489] 
split level 132: [/input, 2530] 
split level 133: [/input, 2972] 
split level 134: [/input, 3690] 
split level 135: [/input, 3752] 
split level 136: [/input, 3564] 
split level 137: [/input, 3554] 
split level 138: [/input, 2433] 
split level 139: [/input-12, 52] 
split level 140: [/input, 2273] 
split level 141: [/input, 997] 
split level 142: [/input-8, 1266] 
split level 143: [/input-8, 120] 
split level 144: [/input, 2726] 
split level 145: [/input, 3240] 
split level 146: [/input, 3904] 
split level 147: [/input, 3965] 
split level 148: [/input, 2548] 
split level 149: [/input-8, 122] 
split level 150: [/input, 3902] 
split level 151: [/input, 2986] 
split level 152: [/input, 2382] 
split level 153: [/input, 2686] 
split level 154: [/input, 3901] 
split level 155: [/input, 2674] 
split level 156: [/input-8, 1485] 
split level 157: [/input, 471] 
split level 158: [/input, 2337] 
split level 159: [/input, 2366] 
split level 160: [/input, 1527] 
split level 161: [/input, 1629] 
split level 162: [/input-8, 2021] 
split level 163: [/input, 1502] 
split level 164: [/input, 3546] 
split level 165: [/input, 3197] 
split level 166: [/input-8, 511] 
split level 167: [/input, 3293] 
split level 168: [/input-8, 1275] 
split level 169: [/input, 3204] 
split level 170: [/input, 3762] 
split level 171: [/input, 3166] 
split level 172: [/input, 3544] 
split level 173: [/input, 1614] 
split level 174: [/input, 1250] 
split level 175: [/input, 3561] 
split level 176: [/input-12, 55] 
split level 177: [/input-8, 1796] 
split level 178: [/input, 457] 
split level 179: [/input-8, 1008] 
split level 180: [/input, 1147] 
split level 181: [/input-8, 1975] 
split level 182: [/input, 980] 
split level 183: [/input-8, 792] 
split level 184: [/input, 3188] 
split level 185: [/input, 1882] 
split level 186: [/input, 2451] 
split level 187: [/input, 3297] 
split level 188: [/input, 2990] 
split level 189: [/input, 3545] 
split level 190: [/input, 2540] 
split level 191: [/input, 1526] 
split level 192: [/input-8, 121] 
split level 193: [/input, 3069] 
split level 194: [/input, 3765] 
split level 195: [/input, 1898] 
split level 196: [/input, 1329] 
split level 197: [/input, 2304] 
split level 198: [/input-8, 390] 
split level 199: [/input, 1794] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22031515836715698
10 lb beta sum: 0.0, worst -0.22030562162399292
Time: prepare 0.0114    bound 0.1056    transfer 0.0020    finalize 0.0034    func 0.1251    
Accumulated time: func 0.1806    prepare 0.0219    bound 0.1606    transfer 0.0021    finalize 0.0036    
all_split False
======================Cut inference begins======================
max lb tensor(0.11310434) min lb tensor(-0.22030210)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.011723041534423828 
BICCOS Cumulative time: 0.011723041534423828
Preprocessing time: 0.010811090469360352 Inference time: 0.0001327991485595703 Add cuts time: 5.4836273193359375e-05 Cut analysis time: 0.0007243156433105469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21523 (1), -0.21491 (1), -0.21490 (1), -0.21488 (1), -0.21476 (1), -0.21474 (1), -0.21465 (1), -0.21448 (1), -0.21426 (1), -0.21426 (1), -0.21420 (1), -0.21397 (1), -0.21383 (1), -0.21379 (1), -0.21377 (1), -0.21375 (1), -0.21340 (1), -0.21311 (1), -0.21294 (1), -0.21290 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5187    set_bounds 0.0102    solve 0.1252    add 0.0995    
Accumulated time: pickout 0.0004    decision 0.5187    set_bounds 0.0102    solve 0.1252    add 0.0995    
Current (lb-rhs): -0.21523308753967285
50 domains visited
Cumulative time: 0.8369846343994141

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 82] [/input-12, 10] [/input-12, 82] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 1: [/input-12, 11] [/input-12, 11] [/input-12, 82] [/input-12, 42] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
split level 2: [/input-12, 42] [/input-12, 42] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 42] [/input-12, 11] [/input-12, 11] 
split level 3: [/input-8, 1362] [/input-8, 1073] [/input-8, 2019] [/input-8, 2019] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-8, 2019] [/input-12, 42] [/input-12, 42] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.20950627326965332
10 lb beta sum: 0.3847499489784241, worst -0.20737937092781067
Time: prepare 0.0075    bound 0.1352    transfer 0.0014    finalize 0.0028    func 0.1496    
Accumulated time: func 0.3302    prepare 0.0297    bound 0.2957    transfer 0.0035    finalize 0.0064    
all_split False
======================Cut inference begins======================
max lb tensor(0.14024788) min lb tensor(-0.20672253)
Number of Verified Splits: 54 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.01614093780517578 
BICCOS Cumulative time: 0.02786397933959961
Preprocessing time: 0.012470483779907227 Inference time: 0.002157926559448242 Add cuts time: 0.001222372055053711 Cut analysis time: 0.00029015541076660156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05872 (2), -0.05825 (2), -0.05807 (2), -0.05794 (2), -0.05794 (2), -0.05794 (2), -0.05791 (2), -0.05784 (2), -0.05762 (2), -0.05754 (2), -0.05705 (2), -0.05704 (2), -0.05675 (2), -0.05653 (2), -0.05623 (2), -0.05606 (2), -0.05602 (2), -0.05587 (2), -0.05563 (2), -0.05547 (2), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0216    set_bounds 0.0124    solve 0.1497    add 0.0840    
Accumulated time: pickout 0.0016    decision 0.5403    set_bounds 0.0226    solve 0.2749    add 0.1835    
Current (lb-rhs): -0.05871877074241638
100 domains visited
Cumulative time: 1.122304916381836

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
split level 1: [/input-12, 11] [/input-12, 42] [/input-12, 42] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 42] 
split level 2: [/input-12, 42] [/input-8, 1073] [/input-8, 1073] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-8, 1073] 
split level 3: [/input-8, 1073] [/input-8, 2019] [/input-8, 2019] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 2019] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05647432804107666
10 lb beta sum: 0.8361924290657043, worst -0.0470203161239624
Time: prepare 0.0079    bound 0.1312    transfer 0.0014    finalize 0.0026    func 0.1456    
Accumulated time: func 0.4759    prepare 0.0378    bound 0.4269    transfer 0.0049    finalize 0.0089    
all_split False
======================Cut inference begins======================
max lb tensor(0.31511730) min lb tensor(-0.04650556)
Number of Verified Splits: 160 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 13
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.02335190773010254 
BICCOS Cumulative time: 0.05121588706970215
Preprocessing time: 0.011870622634887695 Inference time: 0.0075910091400146484 Add cuts time: 0.0034105777740478516 Cut analysis time: 0.00047969818115234375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02308 (3), -0.02286 (3), -0.02280 (3), -0.02271 (3), -0.02219 (3), -0.02216 (3), -0.02198 (3), -0.02198 (3), -0.02194 (3), -0.02191 (3), -0.02182 (3), -0.02161 (3), -0.02153 (3), -0.02143 (3), -0.02142 (3), -0.02097 (3), -0.02074 (3), -0.02067 (3), -0.02061 (3), -0.02030 (3), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0208    set_bounds 0.0151    solve 0.1457    add 0.2204    
Accumulated time: pickout 0.0027    decision 0.5611    set_bounds 0.0377    solve 0.4206    add 0.4038    
Current (lb-rhs): -0.02308356761932373
150 domains visited
Cumulative time: 1.5557703971862793

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
split level 1: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 2: [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 2019] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] [/input-8, 1073] 
split level 3: [/input-8, 1362] [/input-8, 2019] [/input-8, 1362] [/input-8, 2019] [/input-8, 2020] [/input-8, 2019] [/input-8, 2019] [/input-8, 2019] [/input-8, 2019] [/input-8, 2019] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03742671012878418
10 lb beta sum: 1.9878747463226318, worst -0.017298579216003418
Time: prepare 0.0082    bound 0.1504    transfer 0.0014    finalize 0.0026    func 0.1652    
Accumulated time: func 0.6411    prepare 0.0463    bound 0.5773    transfer 0.0062    finalize 0.0115    
all_split False
======================Cut inference begins======================
max lb tensor(0.27805513) min lb tensor(-0.01700366)
Number of Verified Splits: 162 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 29.
#cuts 1-3: 14
#cuts 4-6: 15
#cuts >= 20: 0
BICCOS time: 0.02557229995727539 
BICCOS Cumulative time: 0.07678818702697754
Preprocessing time: 0.01205301284790039 Inference time: 0.007820367813110352 Add cuts time: 0.0047147274017333984 Cut analysis time: 0.00098419189453125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00518 (4), -0.00517 (4), -0.00517 (4), -0.00515 (4), -0.00497 (4), -0.00470 (4), -0.00466 (4), -0.00447 (4), -0.00442 (4), -0.00413 (4), -0.00405 (4), -0.00400 (4), -0.00393 (4), -0.00387 (4), -0.00383 (4), -0.00376 (4), -0.00361 (4), -0.00361 (4), -0.00357 (4), -0.00357 (4), 
Length of domains: 50
Time: pickout 0.0080    decision 0.0213    set_bounds 0.0157    solve 0.1653    add 0.2250    
Accumulated time: pickout 0.0107    decision 0.5824    set_bounds 0.0535    solve 0.5859    add 0.6289    
Current (lb-rhs): -0.005176723003387451
200 domains visited
Cumulative time: 2.023865222930908

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
split level 1: [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] [/input-12, 42] 
split level 2: [/input-8, 2019] [/input-8, 1073] [/input-8, 2019] [/input-8, 1073] [/input-8, 1073] [/input-8, 2019] [/input-8, 2019] [/input-8, 2019] [/input-8, 1073] [/input-8, 2019] 
split level 3: [/input-8, 1356] [/input-8, 1362] [/input-8, 1362] [/input-8, 1362] [/input-8, 2019] [/input-8, 1362] [/input-8, 1362] [/input-8, 1362] [/input-8, 1362] [/input-8, 1362] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025480270385742188
10 lb beta sum: 2.296804428100586, worst -0.01794898509979248
Time: prepare 0.0084    bound 0.1505    transfer 0.0015    finalize 0.0026    func 0.1662    
Accumulated time: func 0.8073    prepare 0.0550    bound 0.7278    transfer 0.0077    finalize 0.0141    
all_split False
======================Cut inference begins======================
max lb tensor(0.38955545) min lb tensor(-0.00196773)
Number of Verified Splits: 381 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 14
#cuts 4-6: 42
#cuts >= 20: 0
BICCOS time: 0.046746253967285156 
BICCOS Cumulative time: 0.1235344409942627
Preprocessing time: 0.011780023574829102 Inference time: 0.017545223236083984 Add cuts time: 0.015496492385864258 Cut analysis time: 0.0019245147705078125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0079    decision 0.0204    set_bounds 0.0158    solve 0.1663    add 0.0325    
Accumulated time: pickout 0.0186    decision 0.6028    set_bounds 0.0692    solve 0.7522    add 0.6613    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 82]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.00878083e-07, 2.26022348e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 82]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.00878083e-07, 1.15243662e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1073, 2019], [-1.0, -1.0], [0, 0], [1.821905611821129e+29, 0.014208244159817696], [2, 3]), '/input-12': (tensor([10, 11, 82]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([0.13404536, 0.02249102, 0.03280644]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1073, 2019], [-1.0, -1.0], [0, 0], [1.821905611821129e+29, 0.014208244159817696], [2, 3]), '/input-12': (tensor([10, 11, 82]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([0.13404536, 0.02249102, 0.00610571]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1073, 2019]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.82190561e+29, 1.07039083e-02]), tensor([2, 3])), '/input-12': ([10, 11], [1.0, -1.0], [0, 0], [0.13404536247253418, 0.022491024807095528], [0, 1])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1073], [1.0], [0], [2.521605146910133e-10], [2]), '/input-12': (tensor([10, 11, 82]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([0.13404536, 0.02249102, 0.03782152]), tensor([0, 1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1073], [1.0], [0], [2.521605146910133e-10], [2]), '/input-12': (tensor([10, 11, 82]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([0.13404536, 0.02249102, 0.00566976]), tensor([0, 1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 11, 82]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([0.13404536, 0.04758616, 0.05676641]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([10, 11, 82]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([0.13404536, 0.04758616, 0.01727759]), tensor([0, 1, 2]))}
Shallow branching resets to n domains:  9
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11081099510192871
10 lb beta sum: 1.3819385766983032, worst -0.10164070129394531
Time: prepare 0.0005    bound 0.1584    transfer 0.0002    finalize 0.0005    func 0.1597    
Accumulated time: func 0.9670    prepare 0.0554    bound 0.8862    transfer 0.0079    finalize 0.0146    
After pruning, left:  2

Back to Regular BaB

BaB round 1
batch: 2
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 42] [/input-12, 42] 
split level 1: [/input-12, 11] [/input-8, 2019] 
split level 2: [/input-8, 2019] [/input-8, 1889] 
split level 3: [/input-8, 1356] [/input-8, 1362] 
split level 4: [/input-8, 1362] [/input-8, 555] 
split level 5: [/input-8, 574] [/input-8, 574] 
split level 6: [/input-8, 573] [/input-8, 1896] 
cut re-enabled after branching node selection
0 lb beta sum: 2.0406832695007324, worst -0.059198230504989624
10 lb beta sum: 2.065885066986084, worst -0.05775579810142517
Time: prepare 0.0121    bound 0.1642    transfer 0.0032    finalize 0.0016    func 0.1827    
Accumulated time: func 1.1497    prepare 0.0679    bound 1.0504    transfer 0.0111    finalize 0.0162    
all_split False
======================Cut inference begins======================
max lb tensor(0.28182375) min lb tensor(-0.05735192)
Number of Verified Splits: 192 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 2.483191967010498, worst -2.730408191680908
10 lb beta sum: 2.3806264400482178, worst -0.20371884107589722
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 74.
#cuts 1-3: 14
#cuts 4-6: 53
#cuts 7-9: 7
#cuts >= 20: 0
BICCOS time: 0.30583882331848145 
BICCOS Cumulative time: 0.42937326431274414
Preprocessing time: 0.007585287094116211 Inference time: 0.2832832336425781 Add cuts time: 0.012227058410644531 Cut analysis time: 0.002743244171142578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05735 (7), -0.05705 (7), -0.05676 (7), -0.05646 (7), -0.05641 (7), -0.05610 (7), -0.05515 (7), -0.05507 (7), -0.05468 (7), -0.05456 (7), -0.05448 (7), -0.05438 (7), -0.05420 (7), -0.05412 (7), -0.05248 (7), -0.05240 (7), -0.05147 (7), -0.05143 (7), -0.05121 (7), -0.05105 (7), 
Length of domains: 64
Time: pickout 0.0006    decision 0.0206    set_bounds 0.2365    solve 0.1828    add 0.0619    
Accumulated time: pickout 0.0193    decision 0.6234    set_bounds 0.3057    solve 0.9350    add 0.7233    
Current (lb-rhs): -0.057351917028427124
264 domains visited
Cumulative time: 3.3743951320648193

BaB round 2
batch: 64
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1124] [/input-8, 1499] [/input-8, 1124] [/input-8, 1499] [/input-8, 1124] [/input-8, 1499] [/input-8, 1124] [/input-8, 1499] [/input-8, 1124] [/input-8, 1499] 
split level 1: [/input-8, 1499] [/input-8, 89] [/input-8, 1499] [/input-8, 89] [/input-8, 1499] [/input-8, 89] [/input-8, 1499] [/input-8, 89] [/input-8, 1499] [/input-8, 89] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05639052391052246
10 lb beta sum: 0.4958016276359558, worst -0.053156375885009766
Time: prepare 0.0050    bound 0.1798    transfer 0.0009    finalize 0.0017    func 0.1892    
Accumulated time: func 1.3389    prepare 0.0732    bound 1.2302    transfer 0.0120    finalize 0.0178    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00998834) min lb tensor(-0.05286562)
Number of Verified Splits: 0 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 74.
#cuts 1-3: 14
#cuts 4-6: 53
#cuts 7-9: 7
#cuts >= 20: 0
BICCOS time: 0.008640289306640625 
BICCOS Cumulative time: 0.43801355361938477
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05287 (9), -0.05261 (9), -0.05237 (9), -0.05213 (9), -0.05212 (9), -0.05187 (9), -0.05074 (9), -0.05063 (9), -0.05029 (9), -0.05025 (9), -0.05014 (9), -0.05004 (9), -0.05000 (9), -0.04989 (9), -0.04878 (9), -0.04857 (9), -0.04828 (9), -0.04817 (9), -0.04807 (9), -0.04806 (9), 
Length of domains: 256
Time: pickout 0.0060    decision 0.0154    set_bounds 0.0123    solve 0.1894    add 0.0855    
Accumulated time: pickout 0.0253    decision 0.6388    set_bounds 0.3180    solve 1.1244    add 0.8087    
Current (lb-rhs): -0.05286562442779541
520 domains visited
Cumulative time: 3.699145555496216

BaB round 3
batch: 256
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2020] [/input-8, 1868] [/input-8, 2020] [/input-8, 1868] [/input-8, 2020] [/input-8, 1868] [/input-8, 2020] [/input-8, 1868] [/input-8, 2020] [/input-8, 1868] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5935330390930176, worst -0.050182342529296875
10 lb beta sum: 0.5935052037239075, worst -0.058033496141433716
Time: prepare 0.0236    bound 0.1745    transfer 0.0044    finalize 0.0024    func 0.2089    
Accumulated time: func 1.5478    prepare 0.0972    bound 1.4048    transfer 0.0164    finalize 0.0202    
all_split False
======================Cut inference begins======================
max lb tensor(0.00152121) min lb tensor(-0.04970753)
Number of Verified Splits: 4 of 512
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 76.
#cuts 1-3: 14
#cuts 4-6: 55
#cuts 7-9: 7
#cuts >= 20: 0
BICCOS time: 0.024945497512817383 
BICCOS Cumulative time: 0.46295905113220215
Preprocessing time: 0.015475273132324219 Inference time: 0.0007266998291015625 Add cuts time: 0.005857944488525391 Cut analysis time: 0.002885580062866211
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04971 (10), -0.04947 (10), -0.04936 (10), -0.04913 (10), -0.04912 (10), -0.04889 (10), -0.04761 (10), -0.04748 (10), -0.04726 (10), -0.04722 (10), -0.04713 (10), -0.04702 (10), -0.04699 (10), -0.04690 (10), -0.04589 (10), -0.04576 (10), -0.04560 (10), -0.04541 (10), -0.04536 (10), -0.04518 (10), 
Length of domains: 508
Time: pickout 0.0191    decision 0.2945    set_bounds 0.0230    solve 0.2091    add 0.0993    
Accumulated time: pickout 0.0444    decision 0.9333    set_bounds 0.3410    solve 1.3335    add 0.9081    
Current (lb-rhs): -0.04970753192901611
1028 domains visited
Cumulative time: 4.376791477203369

BaB round 4
batch: 508
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 44] [/input-8, 2020] [/input-12, 44] [/input-8, 2020] [/input-12, 44] [/input-8, 2020] [/input-12, 44] [/input-8, 2020] [/input-12, 44] [/input-8, 2020] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05059552192687988
10 lb beta sum: 0.3449915051460266, worst -0.04961171746253967
Time: prepare 0.0217    bound 0.1789    transfer 0.0088    finalize 0.0063    func 0.2230    
Accumulated time: func 1.7708    prepare 0.1191    bound 1.5837    transfer 0.0252    finalize 0.0265    
all_split False
======================Cut inference begins======================
max lb tensor(0.06839049) min lb tensor(-0.04954462)
Number of Verified Splits: 360 of 1016
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 54.
#cuts 1-3: 17
#cuts 4-6: 33
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.07532644271850586 
BICCOS Cumulative time: 0.538285493850708
Preprocessing time: 0.03160452842712402 Inference time: 0.03580808639526367 Add cuts time: 0.006024599075317383 Cut analysis time: 0.0018892288208007812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04954 (11), -0.04931 (11), -0.04928 (11), -0.04904 (11), -0.04904 (11), -0.04880 (11), -0.04744 (11), -0.04732 (11), -0.04718 (11), -0.04711 (11), -0.04705 (11), -0.04694 (11), -0.04688 (11), -0.04681 (11), -0.04572 (11), -0.04559 (11), -0.04546 (11), -0.04533 (11), -0.04522 (11), -0.04509 (11), 
Length of domains: 656
Time: pickout 0.0576    decision 0.0542    set_bounds 0.0457    solve 0.2233    add 0.0850    
Accumulated time: pickout 0.1020    decision 0.9875    set_bounds 0.3867    solve 1.5567    add 0.9931    
Current (lb-rhs): -0.04954461753368378
1684 domains visited
Cumulative time: 4.927196025848389

BaB round 5
batch: 656
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1868] [/input-12, 44] [/input-8, 1868] [/input-8, 571] [/input-8, 1868] [/input-8, 571] [/input-8, 1868] [/input-8, 571] [/input-8, 1868] [/input-8, 571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.049451470375061035
10 lb beta sum: 0.670876145362854, worst -0.04845134913921356
Time: prepare 0.0256    bound 0.1863    transfer 0.0146    finalize 0.0071    func 0.2422    
Accumulated time: func 2.0130    prepare 0.1449    bound 1.7700    transfer 0.0398    finalize 0.0336    
all_split False
======================Cut inference begins======================
max lb tensor(0.25151849) min lb tensor(-0.04838377)
Number of Verified Splits: 518 of 1312
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 54.
#cuts 1-3: 17
#cuts 4-6: 33
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.10712671279907227 
BICCOS Cumulative time: 0.6454122066497803
Preprocessing time: 0.040636539459228516 Inference time: 0.05714893341064453 Add cuts time: 0.0074274539947509766 Cut analysis time: 0.0019137859344482422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04838 (12), -0.04820 (12), -0.04813 (12), -0.04796 (12), -0.04795 (12), -0.04771 (12), -0.04647 (12), -0.04635 (12), -0.04629 (12), -0.04617 (12), -0.04605 (12), -0.04603 (12), -0.04593 (12), -0.04578 (12), -0.04454 (12), -0.04442 (12), -0.04437 (12), -0.04423 (12), -0.04414 (12), -0.04412 (12), 
Length of domains: 794
Time: pickout 0.0245    decision 0.0486    set_bounds 0.0563    solve 0.2431    add 0.1199    
Accumulated time: pickout 0.1265    decision 1.0361    set_bounds 0.4430    solve 1.7998    add 1.1130    
Current (lb-rhs): -0.04838377237319946
2478 domains visited
Cumulative time: 5.537811279296875

BaB round 6
batch: 794
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 89] [/input-8, 571] [/input-8, 89] [/input-12, 44] [/input-8, 89] [/input-12, 44] [/input-8, 89] [/input-12, 44] [/input-8, 89] [/input-12, 44] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9705390334129333, worst -0.2746751308441162
10 lb beta sum: 1.2449151277542114, worst -0.045418426394462585
Time: prepare 0.0729    bound 0.2005    transfer 0.0086    finalize 0.2225    func 0.5148    
Accumulated time: func 2.5278    prepare 0.2181    bound 1.9704    transfer 0.0484    finalize 0.2561    
all_split False
======================Cut inference begins======================
max lb tensor(0.92645103) min lb tensor(-0.04537290)
Number of Verified Splits: 1114 of 1588
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 55.
#cuts 1-3: 19
#cuts 4-6: 32
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.1889185905456543 
BICCOS Cumulative time: 0.8343307971954346
Preprocessing time: 0.050968170166015625 Inference time: 0.12334895133972168 Add cuts time: 0.012656211853027344 Cut analysis time: 0.0019452571868896484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04537 (13), -0.04522 (13), -0.04498 (13), -0.04479 (13), -0.04464 (13), -0.04440 (13), -0.04335 (13), -0.04320 (13), -0.04314 (13), -0.04306 (13), -0.04298 (13), -0.04296 (13), -0.04275 (13), -0.04248 (13), -0.04247 (13), -0.04239 (13), -0.04232 (13), -0.04224 (13), -0.04209 (13), -0.04201 (13), 
Length of domains: 474
Time: pickout 0.0791    decision 0.0573    set_bounds 0.0685    solve 0.5152    add 0.0348    
Accumulated time: pickout 0.2056    decision 1.0934    set_bounds 0.5116    solve 2.3150    add 1.1478    
Current (lb-rhs): -0.04537290334701538
2952 domains visited
Cumulative time: 6.492008924484253

BaB round 7
batch: 474
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] [/input-8, 555] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0430150032043457
10 lb beta sum: 0.8321055173873901, worst -0.03951576352119446
Time: prepare 0.0184    bound 0.1741    transfer 0.0100    finalize 0.0042    func 0.2138    
Accumulated time: func 2.7416    prepare 0.2367    bound 2.1445    transfer 0.0583    finalize 0.2603    
all_split False
======================Cut inference begins======================
max lb tensor(0.00381923) min lb tensor(-0.03947055)
Number of Verified Splits: 156 of 948
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 55.
#cuts 1-3: 19
#cuts 4-6: 32
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.05465292930603027 
BICCOS Cumulative time: 0.8889837265014648
Preprocessing time: 0.0288851261138916 Inference time: 0.019845247268676758 Add cuts time: 0.004102468490600586 Cut analysis time: 0.0018200874328613281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03947 (14), -0.03932 (14), -0.03911 (14), -0.03887 (14), -0.03872 (14), -0.03851 (14), -0.03744 (14), -0.03729 (14), -0.03722 (14), -0.03721 (14), -0.03718 (14), -0.03708 (14), -0.03707 (14), -0.03706 (14), -0.03689 (14), -0.03686 (14), -0.03665 (14), -0.03661 (14), -0.03658 (14), -0.03657 (14), 
Length of domains: 792
Time: pickout 0.0069    decision 0.0390    set_bounds 0.0406    solve 0.2140    add 0.0054    
Accumulated time: pickout 0.2125    decision 1.1324    set_bounds 0.5522    solve 2.5290    add 1.1532    
Current (lb-rhs): -0.039470553398132324
3744 domains visited
Cumulative time: 6.854426860809326

BaB round 8
batch: 792
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] [/input-8, 571] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9769977331161499, worst -0.0394706130027771
10 lb beta sum: 0.9769977331161499, worst -0.039423227310180664
Time: prepare 0.0733    bound 0.1979    transfer 0.0071    finalize 0.0076    func 0.2963    
Accumulated time: func 3.0378    prepare 0.3103    bound 2.3424    transfer 0.0654    finalize 0.2679    
all_split False
======================Cut inference begins======================
max lb tensor(0.00206149) min lb tensor(-0.03938735)
Number of Verified Splits: 102 of 1584
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 55.
#cuts 1-3: 19
#cuts 4-6: 32
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.06880474090576172 
BICCOS Cumulative time: 0.9577884674072266
Preprocessing time: 0.04835963249206543 Inference time: 0.014290332794189453 Add cuts time: 0.004138946533203125 Cut analysis time: 0.002015829086303711
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03939 (15), -0.03923 (15), -0.03903 (15), -0.03881 (15), -0.03866 (15), -0.03845 (15), -0.03736 (15), -0.03721 (15), -0.03716 (15), -0.03714 (15), -0.03709 (15), -0.03707 (15), -0.03700 (15), -0.03700 (15), -0.03698 (15), -0.03691 (15), -0.03681 (15), -0.03680 (15), -0.03673 (15), -0.03663 (15), 
Length of domains: 1482
Time: pickout 0.0141    decision 0.0559    set_bounds 0.0673    solve 0.2973    add 0.0223    
Accumulated time: pickout 0.2266    decision 1.1883    set_bounds 0.6195    solve 2.8263    add 1.1756    
Current (lb-rhs): -0.03938734531402588
5226 domains visited
Cumulative time: 7.38259220123291

BaB round 9
batch: 1482
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 90] [/input-12, 64] [/input-8, 90] [/input-12, 64] [/input-8, 90] [/input-12, 64] [/input-12, 64] [/input-12, 64] [/input-8, 90] [/input-8, 564] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9638612270355225, worst -0.03669828176498413
10 lb beta sum: 0.9638612270355225, worst -0.03664207458496094
Time: prepare 0.3036    bound 0.3041    transfer 0.0191    finalize 0.0159    func 0.6628    
Accumulated time: func 3.7006    prepare 0.6141    bound 2.6465    transfer 0.0845    finalize 0.2838    
all_split False
======================Cut inference begins======================
max lb tensor(0.00687176) min lb tensor(-0.03661764)
Number of Verified Splits: 495 of 2964
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 55.
#cuts 1-3: 19
#cuts 4-6: 32
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.17055630683898926 
BICCOS Cumulative time: 1.1283447742462158
Preprocessing time: 0.09261703491210938 Inference time: 0.06752371788024902 Add cuts time: 0.008453607559204102 Cut analysis time: 0.001961946487426758
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03662 (16), -0.03650 (16), -0.03623 (16), -0.03607 (16), -0.03596 (16), -0.03567 (16), -0.03459 (16), -0.03448 (16), -0.03447 (16), -0.03441 (16), -0.03435 (16), -0.03430 (16), -0.03426 (16), -0.03424 (16), -0.03423 (16), -0.03420 (16), -0.03412 (16), -0.03411 (16), -0.03406 (16), -0.03402 (16), 
Length of domains: 2469
Time: pickout 0.0198    decision 0.0965    set_bounds 0.1261    solve 0.6635    add 0.0094    
Accumulated time: pickout 0.2464    decision 1.2848    set_bounds 0.7456    solve 3.4898    add 1.1849    
Current (lb-rhs): -0.03661763668060303
7695 domains visited
Cumulative time: 8.475989580154419

BaB round 10
batch: 2469
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-8, 564] [/input-12, 64] [/input-8, 564] [/input-12, 64] [/input-8, 564] [/input-8, 564] [/input-8, 564] [/input-8, 564] [/input-12, 64] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9363961219787598, worst -0.033493638038635254
10 lb beta sum: 0.9363961219787598, worst -0.033468008041381836
Time: prepare 0.2333    bound 0.4533    transfer 0.0202    finalize 0.1918    func 0.9312    
Accumulated time: func 4.6319    prepare 0.8477    bound 3.0998    transfer 0.1047    finalize 0.4756    
all_split False
======================Cut inference begins======================
max lb tensor(0.00653517) min lb tensor(-0.03345656)
Number of Verified Splits: 653 of 4938
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 55.
#cuts 1-3: 19
#cuts 4-6: 32
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.2676060199737549 
BICCOS Cumulative time: 1.3959507942199707
Preprocessing time: 0.1605231761932373 Inference time: 0.09604692459106445 Add cuts time: 0.009061098098754883 Cut analysis time: 0.001974821090698242
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03346 (17), -0.03334 (17), -0.03312 (17), -0.03291 (17), -0.03280 (17), -0.03258 (17), -0.03142 (17), -0.03131 (17), -0.03124 (17), -0.03122 (17), -0.03120 (17), -0.03113 (17), -0.03112 (17), -0.03109 (17), -0.03109 (17), -0.03109 (17), -0.03098 (17), -0.03093 (17), -0.03091 (17), -0.03091 (17), 
Length of domains: 4285
Time: pickout 0.0338    decision 0.1515    set_bounds 0.2217    solve 0.9328    add 0.0287    
Accumulated time: pickout 0.2802    decision 1.4363    set_bounds 0.9674    solve 4.4226    add 1.2137    
Current (lb-rhs): -0.03345656394958496
11980 domains visited
Cumulative time: 10.12431788444519

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 564] [/input-8, 1138] [/input-8, 564] [/input-8, 1138] [/input-8, 564] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-12, 64] [/input-8, 1138] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9232223033905029, worst -0.03134346008300781
10 lb beta sum: 0.9232223033905029, worst -0.03133416175842285
Time: prepare 0.3948    bound 0.6971    transfer 0.0429    finalize 0.0389    func 1.2273    
Accumulated time: func 5.8592    prepare 1.2428    bound 3.7969    transfer 0.1476    finalize 0.5144    
all_split False
======================Cut inference begins======================
max lb tensor(0.00650710) min lb tensor(-0.03132451)
Number of Verified Splits: 712 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 55.
#cuts 1-3: 19
#cuts 4-6: 32
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.39493608474731445 
BICCOS Cumulative time: 1.7908868789672852
Preprocessing time: 0.2593064308166504 Inference time: 0.12247133255004883 Add cuts time: 0.011131048202514648 Cut analysis time: 0.002027273178100586
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03132 (18), -0.03121 (18), -0.03100 (18), -0.03073 (18), -0.03061 (18), -0.03040 (18), -0.02928 (18), -0.02917 (18), -0.02909 (18), -0.02907 (18), -0.02906 (18), -0.02900 (18), -0.02896 (18), -0.02896 (18), -0.02896 (18), -0.02894 (18), -0.02885 (18), -0.02878 (18), -0.02878 (18), -0.02873 (18), 
Length of domains: 7669
Time: pickout 0.0589    decision 0.2411    set_bounds 0.5435    solve 1.2293    add 0.0319    
Accumulated time: pickout 0.3391    decision 1.6774    set_bounds 1.5108    solve 5.6519    add 1.2456    
Current (lb-rhs): -0.03132450580596924
19460 domains visited
current_vram/total_varm: 10.9GB/99.9GB, batch_size increase to 8192
Cumulative time: 12.641918897628784

BaB round 12
batch: 7669
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 64] [/input-8, 90] [/input-8, 90] [/input-8, 1514] [/input-8, 90] [/input-8, 1514] [/input-12, 64] [/input-8, 564] [/input-12, 64] [/input-8, 90] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9077126383781433, worst -0.029320359230041504
10 lb beta sum: 0.9077126383781433, worst -0.029314517974853516
Time: prepare 0.7238    bound 1.2474    transfer 0.1478    finalize 0.0903    func 2.3100    
Accumulated time: func 8.1692    prepare 1.9669    bound 5.0444    transfer 0.2954    finalize 0.6047    
all_split False
======================Cut inference begins======================
max lb tensor(0.00632465) min lb tensor(-0.02931106)
Number of Verified Splits: 2171 of 15338
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 55.
#cuts 1-3: 19
#cuts 4-6: 32
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 1.1737916469573975 
BICCOS Cumulative time: 2.9646785259246826
Preprocessing time: 0.7521154880523682 Inference time: 0.37065744400024414 Add cuts time: 0.048781633377075195 Cut analysis time: 0.002237081527709961
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02931 (19), -0.02920 (19), -0.02899 (19), -0.02870 (19), -0.02859 (19), -0.02838 (19), -0.02727 (19), -0.02716 (19), -0.02703 (19), -0.02701 (19), -0.02700 (19), -0.02699 (19), -0.02695 (19), -0.02692 (19), -0.02690 (19), -0.02672 (19), -0.02671 (19), -0.02671 (19), -0.02667 (19), -0.02661 (19), 
Length of domains: 13167
Time: pickout 0.1492    decision 0.6813    set_bounds 0.8989    solve 2.3140    add 0.0701    
Accumulated time: pickout 0.4883    decision 2.3587    set_bounds 2.4098    solve 7.9658    add 1.3157    
Current (lb-rhs): -0.029311060905456543
32627 domains visited
Cumulative time: 17.96805167198181

BaB round 13
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] [/input-8, 1138] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8719944953918457, worst -0.024831414222717285
10 lb beta sum: 0.8719944953918457, worst -0.024920105934143066
Time: prepare 0.7751    bound 1.3169    transfer 0.0506    finalize 0.3345    func 2.5856    
Accumulated time: func 10.7548    prepare 2.7423    bound 6.3613    transfer 0.3460    finalize 0.9392    
all_split False
======================Cut inference begins======================
max lb tensor(0.00508380) min lb tensor(-0.02483058)
Number of Verified Splits: 4601 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 57.
#cuts 1-3: 19
#cuts 4-6: 34
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 1.6958842277526855 
BICCOS Cumulative time: 4.660562753677368
Preprocessing time: 0.5395455360412598 Inference time: 1.0930538177490234 Add cuts time: 0.06118011474609375 Cut analysis time: 0.0021047592163085938
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02931 (19), -0.02920 (19), -0.02899 (19), -0.02870 (19), -0.02859 (19), -0.02838 (19), -0.02727 (19), -0.02716 (19), -0.02703 (19), -0.02700 (19), -0.02699 (19), -0.02695 (19), -0.02692 (19), -0.02690 (19), -0.02671 (19), -0.02671 (19), -0.02667 (19), -0.02656 (19), -0.02653 (19), -0.02652 (19), 
Length of domains: 16758
Time: pickout 0.1251    decision 0.4835    set_bounds 1.0250    solve 2.5895    add 0.0562    
Accumulated time: pickout 0.6133    decision 2.8421    set_bounds 3.4348    solve 10.5553    add 1.3719    
Current (lb-rhs): -0.029311060905456543
44410 domains visited
current_vram/total_varm: 26.0GB/99.9GB, batch_size increase to 16384
Cumulative time: 24.01539635658264

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 90] [/input-8, 1514] [/input-8, 90] [/input-8, 700] [/input-8, 1514] [/input-8, 700] [/input-8, 1514] [/input-8, 1514] [/input-8, 1514] [/input-8, 1514] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028011679649353027
10 lb beta sum: 0.4913182854652405, worst -0.027132943272590637
Time: prepare 0.7036    bound 2.5435    transfer 0.2310    finalize 0.1909    func 3.8810    
Accumulated time: func 14.6358    prepare 3.4463    bound 8.9048    transfer 0.5771    finalize 1.1300    
all_split False
======================Cut inference begins======================
max lb tensor(0.22841389) min lb tensor(-0.02712545)
Number of Verified Splits: 9937 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 56.
#cuts 1-3: 21
#cuts 4-6: 31
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 3.4585788249969482 
BICCOS Cumulative time: 8.119141578674316
Preprocessing time: 1.0761189460754395 Inference time: 2.259420394897461 Add cuts time: 0.12098503112792969 Cut analysis time: 0.002054452896118164
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02713 (20), -0.02701 (20), -0.02680 (20), -0.02640 (20), -0.02629 (20), -0.02608 (20), -0.02508 (20), -0.02497 (20), -0.02496 (20), -0.02485 (20), -0.02480 (20), -0.02476 (20), -0.02473 (20), -0.02468 (20), -0.02462 (20), -0.02448 (20), -0.02441 (20), -0.02437 (20), -0.02424 (20), -0.02413 (20), 
Length of domains: 23205
Time: pickout 0.2591    decision 1.6940    set_bounds 2.2098    solve 4.2417    add 0.1323    
Accumulated time: pickout 0.8724    decision 4.5361    set_bounds 5.6446    solve 14.7970    add 1.5042    
Current (lb-rhs): -0.027125447988510132
67241 domains visited
current_vram/total_varm: 41.6GB/99.9GB, batch_size increase to 32768
Cumulative time: 36.15674638748169

BaB round 15
batch: 23205
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 90] [/input-8, 1073] [/input-8, 700] [/input-8, 1073] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.025291919708251953
10 lb beta sum: 0.48797252774238586, worst -0.02440313994884491
Time: prepare 1.0050    bound 3.5876    transfer 0.2659    finalize 0.7329    func 5.8967    
Accumulated time: func 20.5325    prepare 4.4517    bound 12.4924    transfer 0.8430    finalize 1.8629    
all_split False
======================Cut inference begins======================
max lb tensor(0.23822838) min lb tensor(-0.02440079)
Number of Verified Splits: 27672 of 46410
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 59.
#cuts 1-3: 31
#cuts 4-6: 27
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 7.461811780929565 
BICCOS Cumulative time: 15.580953359603882
Preprocessing time: 1.639017105102539 Inference time: 5.4994072914123535 Add cuts time: 0.3212707042694092 Cut analysis time: 0.002116680145263672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02440 (21), -0.02429 (21), -0.02408 (21), -0.02378 (21), -0.02368 (21), -0.02367 (21), -0.02357 (21), -0.02346 (21), -0.02336 (21), -0.02306 (21), -0.02295 (21), -0.02274 (21), -0.02236 (21), -0.02225 (21), -0.02220 (21), -0.02209 (21), -0.02208 (21), -0.02204 (21), -0.02201 (21), -0.02192 (21), 
Length of domains: 18738
Time: pickout 0.4494    decision 2.3843    set_bounds 3.0416    solve 5.9056    add 0.0853    
Accumulated time: pickout 1.3218    decision 6.9204    set_bounds 8.6862    solve 20.7026    add 1.5895    
Current (lb-rhs): -0.024400785565376282
85979 domains visited
Cumulative time: 55.86353397369385

BaB round 16
batch: 18738
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 685] [/input-8, 685] [/input-8, 685] [/input-8, 685] [/input-8, 685] [/input-8, 685] [/input-8, 685] [/input-8, 685] [/input-8, 685] [/input-8, 685] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.023747682571411133
10 lb beta sum: 1.3647935390472412, worst -0.015546143054962158
Time: prepare 0.8098    bound 2.9197    transfer 0.1977    finalize 0.2718    func 4.4426    
Accumulated time: func 24.9751    prepare 5.2619    bound 15.4121    transfer 1.0407    finalize 2.1347    
all_split False
======================Cut inference begins======================
max lb tensor(1.18042994) min lb tensor(-0.01551753)
Number of Verified Splits: 36224 of 37476
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 58.
#cuts 1-3: 34
#cuts 4-6: 24
#cuts >= 20: 0
BICCOS time: 9.143210172653198 
BICCOS Cumulative time: 24.72416353225708
Preprocessing time: 1.2932822704315186 Inference time: 7.530676603317261 Add cuts time: 0.31731271743774414 Cut analysis time: 0.0019385814666748047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01552 (22), -0.01550 (22), -0.01548 (22), -0.01480 (22), -0.01477 (22), -0.01475 (22), -0.01348 (22), -0.01345 (22), -0.01345 (22), -0.01344 (22), -0.01313 (22), -0.01310 (22), -0.01308 (22), -0.01292 (22), -0.01289 (22), -0.01288 (22), -0.01274 (22), -0.01271 (22), -0.01270 (22), -0.01247 (22), 
Length of domains: 1252
Time: pickout 0.3124    decision 2.0489    set_bounds 2.6452    solve 4.4498    add 0.0587    
Accumulated time: pickout 1.6342    decision 8.9693    set_bounds 11.3314    solve 25.1525    add 1.6482    
Current (lb-rhs): -0.01551753282546997
87231 domains visited
Cumulative time: 74.94780898094177

BaB round 17
batch: 1252
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 923] [/input-8, 923] [/input-8, 923] [/input-8, 923] [/input-8, 923] [/input-8, 923] [/input-8, 923] [/input-8, 923] [/input-8, 923] [/input-8, 923] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.021561741828918457
10 lb beta sum: 1.7746659517288208, worst -0.011805474758148193
Time: prepare 0.0543    bound 0.2753    transfer 0.0103    finalize 0.0113    func 0.3681    
Accumulated time: func 25.3432    prepare 5.3164    bound 15.6874    transfer 1.0510    finalize 2.1461    
all_split False
======================Cut inference begins======================
max lb tensor(0.00672209) min lb tensor(-0.01177305)
Number of Verified Splits: 1570 of 2504
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 58.
#cuts 1-3: 34
#cuts 4-6: 24
#cuts >= 20: 0
BICCOS time: 0.3700134754180908 
BICCOS Cumulative time: 25.09417700767517
Preprocessing time: 0.0796513557434082 Inference time: 0.27219390869140625 Add cuts time: 0.016335248947143555 Cut analysis time: 0.0018329620361328125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01177 (23), -0.01168 (23), -0.01164 (23), -0.01107 (23), -0.01098 (23), -0.01095 (23), -0.00974 (23), -0.00964 (23), -0.00960 (23), -0.00958 (23), -0.00940 (23), -0.00930 (23), -0.00927 (23), -0.00917 (23), -0.00908 (23), -0.00904 (23), -0.00901 (23), -0.00894 (23), -0.00889 (23), -0.00888 (23), 
Length of domains: 934
Time: pickout 0.0289    decision 0.0835    set_bounds 0.1118    solve 0.3685    add 0.0038    
Accumulated time: pickout 1.6631    decision 9.0528    set_bounds 11.4432    solve 25.5210    add 1.6520    
Current (lb-rhs): -0.01177304983139038
88165 domains visited
Cumulative time: 75.93146705627441

BaB round 18
batch: 934
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1073] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] [/input-8, 1361] 
cut re-enabled after branching node selection
0 lb beta sum: 1.84402334690094, worst -0.009388387203216553
10 lb beta sum: 1.84402334690094, worst -0.009373009204864502
Time: prepare 0.0876    bound 0.2200    transfer 0.0053    finalize 0.0100    func 0.3352    
Accumulated time: func 25.6783    prepare 5.4043    bound 15.9074    transfer 1.0563    finalize 2.1560    
all_split False
======================Cut inference begins======================
max lb tensor(0.23783410) min lb tensor(-0.00936759)
Number of Verified Splits: 1075 of 1868
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 58.
#cuts 1-3: 34
#cuts 4-6: 24
#cuts >= 20: 0
BICCOS time: 0.24561023712158203 
BICCOS Cumulative time: 25.339787244796753
Preprocessing time: 0.05788445472717285 Inference time: 0.17483305931091309 Add cuts time: 0.01133584976196289 Cut analysis time: 0.0015568733215332031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00937 (24), -0.00928 (24), -0.00923 (24), -0.00920 (24), -0.00911 (24), -0.00906 (24), -0.00822 (24), -0.00813 (24), -0.00809 (24), -0.00753 (24), -0.00752 (24), -0.00743 (24), -0.00738 (24), -0.00733 (24), -0.00724 (24), -0.00720 (24), -0.00718 (24), -0.00701 (24), -0.00679 (24), -0.00677 (24), 
Length of domains: 793
Time: pickout 0.0201    decision 0.0654    set_bounds 0.0820    solve 0.3361    add 0.0048    
Accumulated time: pickout 1.6832    decision 9.1182    set_bounds 11.5252    solve 25.8570    add 1.6568    
Current (lb-rhs): -0.009367585182189941
88958 domains visited
Cumulative time: 76.69458508491516

BaB round 19
batch: 793
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] 
cut re-enabled after branching node selection
0 lb beta sum: 1.728564739227295, worst -0.009367704391479492
10 lb beta sum: 1.728564739227295, worst -0.0093650221824646
Time: prepare 0.0729    bound 0.2058    transfer 0.0048    finalize 0.0071    func 0.3015    
Accumulated time: func 25.9798    prepare 5.4774    bound 16.1131    transfer 1.0611    finalize 2.1631    
all_split False
======================Cut inference begins======================
max lb tensor(0.24044317) min lb tensor(-0.00936145)
Number of Verified Splits: 801 of 1586
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 59.
#cuts 1-3: 35
#cuts 4-6: 24
#cuts >= 20: 0
BICCOS time: 0.1917572021484375 
BICCOS Cumulative time: 25.53154444694519
Preprocessing time: 0.049146175384521484 Inference time: 0.1329336166381836 Add cuts time: 0.008138179779052734 Cut analysis time: 0.0015392303466796875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00936 (25), -0.00927 (25), -0.00923 (25), -0.00919 (25), -0.00910 (25), -0.00906 (25), -0.00819 (25), -0.00809 (25), -0.00807 (25), -0.00753 (25), -0.00751 (25), -0.00742 (25), -0.00738 (25), -0.00732 (25), -0.00724 (25), -0.00719 (25), -0.00717 (25), -0.00700 (25), -0.00678 (25), -0.00676 (25), 
Length of domains: 785
Time: pickout 0.0145    decision 0.0567    set_bounds 0.0683    solve 0.3018    add 0.0048    
Accumulated time: pickout 1.6978    decision 9.1748    set_bounds 11.5934    solve 26.1588    add 1.6616    
Current (lb-rhs): -0.009361445903778076
89743 domains visited
Cumulative time: 77.3385865688324

BaB round 20
batch: 785
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1896] [/input-8, 1073] [/input-8, 1896] [/input-8, 1896] [/input-8, 1896] [/input-8, 1896] [/input-8, 1896] [/input-8, 1896] [/input-8, 1896] [/input-8, 1896] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.016068458557128906
10 lb beta sum: 1.3421950340270996, worst -0.007502377033233643
Time: prepare 0.0307    bound 0.1962    transfer 0.0046    finalize 0.0074    func 0.2489    
Accumulated time: func 26.2287    prepare 5.5083    bound 16.3094    transfer 1.0657    finalize 2.1705    
all_split False
======================Cut inference begins======================
max lb tensor(0.47356069) min lb tensor(-0.00749779)
Number of Verified Splits: 1019 of 1570
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 59.
#cuts 1-3: 36
#cuts 4-6: 23
#cuts >= 20: 0
BICCOS time: 0.2341616153717041 
BICCOS Cumulative time: 25.765706062316895
Preprocessing time: 0.04913616180419922 Inference time: 0.17400026321411133 Add cuts time: 0.009478330612182617 Cut analysis time: 0.0015468597412109375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00750 (26), -0.00741 (26), -0.00737 (26), -0.00733 (26), -0.00724 (26), -0.00720 (26), -0.00700 (26), -0.00626 (26), -0.00608 (26), -0.00605 (26), -0.00596 (26), -0.00592 (26), -0.00575 (26), -0.00567 (26), -0.00565 (26), -0.00563 (26), -0.00558 (26), -0.00556 (26), -0.00552 (26), -0.00550 (26), 
Length of domains: 551
Time: pickout 0.0147    decision 0.0554    set_bounds 0.0674    solve 0.2492    add 0.0039    
Accumulated time: pickout 1.7124    decision 9.2302    set_bounds 11.6608    solve 26.4080    add 1.6655    
Current (lb-rhs): -0.0074977874755859375
90294 domains visited
Cumulative time: 77.97089004516602

BaB round 21
batch: 551
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] [/input-8, 1508] 
cut re-enabled after branching node selection
0 lb beta sum: 1.4268604516983032, worst -0.008397787809371948
10 lb beta sum: 1.5924772024154663, worst -0.007499814033508301
Time: prepare 0.0502    bound 0.1788    transfer 0.0032    finalize 0.0050    func 0.2452    
Accumulated time: func 26.4739    prepare 5.5587    bound 16.4882    transfer 1.0690    finalize 2.1755    
all_split False
======================Cut inference begins======================
max lb tensor(0.23973936) min lb tensor(-0.00749612)
Number of Verified Splits: 699 of 1102
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 59.
#cuts 1-3: 36
#cuts 4-6: 23
#cuts >= 20: 0
BICCOS time: 0.16345477104187012 
BICCOS Cumulative time: 25.929160833358765
Preprocessing time: 0.0339808464050293 Inference time: 0.12130212783813477 Add cuts time: 0.00669407844543457 Cut analysis time: 0.0014777183532714844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00750 (27), -0.00741 (27), -0.00736 (27), -0.00732 (27), -0.00724 (27), -0.00720 (27), -0.00574 (27), -0.00566 (27), -0.00565 (27), -0.00561 (27), -0.00557 (27), -0.00556 (27), -0.00552 (27), -0.00549 (27), -0.00546 (27), -0.00544 (27), -0.00537 (27), -0.00533 (27), -0.00531 (27), -0.00514 (27), 
Length of domains: 403
Time: pickout 0.0107    decision 0.0424    set_bounds 0.0484    solve 0.2454    add 0.0026    
Accumulated time: pickout 1.7232    decision 9.2726    set_bounds 11.7092    solve 26.6534    add 1.6681    
Current (lb-rhs): -0.0074961185455322266
90697 domains visited
Cumulative time: 78.48840713500977

BaB round 22
batch: 403
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 808] [/input-8, 808] [/input-8, 808] [/input-8, 808] [/input-8, 808] [/input-8, 808] [/input-8, 808] [/input-8, 808] [/input-8, 808] [/input-8, 808] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7381540536880493, worst -0.007495999336242676
10 lb beta sum: 1.7381540536880493, worst -0.007496297359466553
Time: prepare 0.0368    bound 0.1681    transfer 0.0054    finalize 0.0036    func 0.2192    
Accumulated time: func 26.6931    prepare 5.5957    bound 16.6563    transfer 1.0744    finalize 2.1791    
all_split False
======================Cut inference begins======================
max lb tensor(0.21968043) min lb tensor(-0.00749367)
Number of Verified Splits: 159 of 806
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 59.
#cuts 1-3: 36
#cuts 4-6: 23
#cuts >= 20: 0
BICCOS time: 0.06008148193359375 
BICCOS Cumulative time: 25.98924231529236
Preprocessing time: 0.023437023162841797 Inference time: 0.031462907791137695 Add cuts time: 0.003720521926879883 Cut analysis time: 0.001461029052734375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00749 (28), -0.00741 (28), -0.00736 (28), -0.00732 (28), -0.00723 (28), -0.00719 (28), -0.00704 (28), -0.00695 (28), -0.00691 (28), -0.00687 (28), -0.00678 (28), -0.00674 (28), -0.00573 (28), -0.00565 (28), -0.00564 (28), -0.00560 (28), -0.00556 (28), -0.00556 (28), -0.00551 (28), -0.00547 (28), 
Length of domains: 647
Time: pickout 0.0076    decision 0.0321    set_bounds 0.0348    solve 0.2193    add 0.0038    
Accumulated time: pickout 1.7308    decision 9.3046    set_bounds 11.7440    solve 26.8727    add 1.6719    
Current (lb-rhs): -0.0074936747550964355
91344 domains visited
Cumulative time: 78.84763836860657

BaB round 23
batch: 647
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] 
cut re-enabled after branching node selection
0 lb beta sum: 1.7049520015716553, worst -0.006448030471801758
10 lb beta sum: 1.7049520015716553, worst -0.006441593170166016
Time: prepare 0.0585    bound 0.1837    transfer 0.0064    finalize 0.0061    func 0.2630    
Accumulated time: func 26.9561    prepare 5.6544    bound 16.8399    transfer 1.0808    finalize 2.1852    
all_split False
======================Cut inference begins======================
max lb tensor(0.00737435) min lb tensor(-0.00643885)
Number of Verified Splits: 888 of 1294
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 59.
#cuts 1-3: 37
#cuts 4-6: 22
#cuts >= 20: 0
BICCOS time: 0.21144723892211914 
BICCOS Cumulative time: 26.200689554214478
Preprocessing time: 0.03962397575378418 Inference time: 0.16251230239868164 Add cuts time: 0.007833480834960938 Cut analysis time: 0.0014774799346923828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00644 (29), -0.00635 (29), -0.00631 (29), -0.00628 (29), -0.00619 (29), -0.00615 (29), -0.00597 (29), -0.00589 (29), -0.00584 (29), -0.00582 (29), -0.00573 (29), -0.00568 (29), -0.00467 (29), -0.00463 (29), -0.00457 (29), -0.00455 (29), -0.00454 (29), -0.00451 (29), -0.00450 (29), -0.00441 (29), 
Length of domains: 406
Time: pickout 0.0112    decision 0.0467    set_bounds 0.0552    solve 0.2633    add 0.0038    
Accumulated time: pickout 1.7420    decision 9.3514    set_bounds 11.7992    solve 27.1360    add 1.6757    
Current (lb-rhs): -0.006438851356506348
91750 domains visited
Cumulative time: 79.44512987136841

BaB round 24
batch: 406
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 1393] [/input-8, 1393] [/input-8, 1393] [/input-8, 1393] [/input-8, 1393] 
cut re-enabled after branching node selection
0 lb beta sum: 1.64287269115448, worst -0.0072650909423828125
10 lb beta sum: 1.8501430749893188, worst -0.00635218620300293
Time: prepare 0.0370    bound 0.1723    transfer 0.0037    finalize 0.0037    func 0.2227    
Accumulated time: func 27.1788    prepare 5.6916    bound 17.0122    transfer 1.0845    finalize 2.1889    
all_split False
======================Cut inference begins======================
max lb tensor(0.23654860) min lb tensor(-0.00634891)
Number of Verified Splits: 521 of 812
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 59.
#cuts 1-3: 37
#cuts 4-6: 22
#cuts >= 20: 0
BICCOS time: 0.12904882431030273 
BICCOS Cumulative time: 26.32973837852478
Preprocessing time: 0.02378368377685547 Inference time: 0.09846353530883789 Add cuts time: 0.005319118499755859 Cut analysis time: 0.0014824867248535156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00635 (30), -0.00618 (30), -0.00479 (30), -0.00465 (30), -0.00462 (30), -0.00457 (30), -0.00455 (30), -0.00449 (30), -0.00441 (30), -0.00434 (30), -0.00430 (30), -0.00425 (30), -0.00425 (30), -0.00421 (30), -0.00418 (30), -0.00409 (30), -0.00409 (30), -0.00404 (30), -0.00378 (30), -0.00376 (30), 
Length of domains: 291
Time: pickout 0.0079    decision 0.0340    set_bounds 0.0347    solve 0.2228    add 0.0041    
Accumulated time: pickout 1.7499    decision 9.3854    set_bounds 11.8339    solve 27.3588    add 1.6798    
Current (lb-rhs): -0.006348907947540283
92041 domains visited
Cumulative time: 79.88138008117676

BaB round 25
batch: 291
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] [/input, 2682] 
cut re-enabled after branching node selection
0 lb beta sum: 2.0040433406829834, worst -0.005280971527099609
10 lb beta sum: 2.0040433406829834, worst -0.0052787065505981445
Time: prepare 0.0292    bound 0.1710    transfer 0.0043    finalize 0.0028    func 0.2111    
Accumulated time: func 27.3898    prepare 5.7210    bound 17.1832    transfer 1.0888    finalize 2.1916    
all_split False
======================Cut inference begins======================
max lb tensor(0.00415409) min lb tensor(-0.00527245)
Number of Verified Splits: 418 of 582
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 61.
#cuts 1-3: 39
#cuts 4-6: 22
#cuts >= 20: 0
BICCOS time: 0.09831833839416504 
BICCOS Cumulative time: 26.428056716918945
Preprocessing time: 0.017277240753173828 Inference time: 0.07532429695129395 Add cuts time: 0.004233360290527344 Cut analysis time: 0.0014834403991699219
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00527 (31), -0.00511 (31), -0.00371 (31), -0.00358 (31), -0.00355 (31), -0.00349 (31), -0.00347 (31), -0.00342 (31), -0.00333 (31), -0.00326 (31), -0.00322 (31), -0.00317 (31), -0.00317 (31), -0.00313 (31), -0.00310 (31), -0.00301 (31), -0.00301 (31), -0.00297 (31), -0.00270 (31), -0.00268 (31), 
Length of domains: 164
Time: pickout 0.0060    decision 0.0278    set_bounds 0.0147    solve 0.2112    add 0.0016    
Accumulated time: pickout 1.7559    decision 9.4131    set_bounds 11.8485    solve 27.5700    add 1.6814    
Current (lb-rhs): -0.0052724480628967285
92205 domains visited
Cumulative time: 80.24323916435242

BaB round 26
batch: 164
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1393] [/input-8, 1393] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] [/input-8, 700] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0047643184661865234
10 lb beta sum: 0.47161343693733215, worst -0.0037095993757247925
Time: prepare 0.0081    bound 0.1696    transfer 0.0013    finalize 0.0016    func 0.1828    
Accumulated time: func 27.5727    prepare 5.7293    bound 17.3528    transfer 1.0901    finalize 2.1933    
all_split False
======================Cut inference begins======================
max lb tensor(0.23681206) min lb tensor(-0.00370556)
Number of Verified Splits: 212 of 328
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 61.
#cuts 1-3: 39
#cuts 4-6: 22
#cuts >= 20: 0
BICCOS time: 0.05353975296020508 
BICCOS Cumulative time: 26.48159646987915
Preprocessing time: 0.01003265380859375 Inference time: 0.03909444808959961 Add cuts time: 0.002949953079223633 Cut analysis time: 0.001462697982788086
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00371 (32), -0.00362 (32), -0.00357 (32), -0.00354 (32), -0.00345 (32), -0.00341 (32), -0.00325 (32), -0.00317 (32), -0.00312 (32), -0.00309 (32), -0.00300 (32), -0.00296 (32), -0.00212 (32), -0.00204 (32), -0.00200 (32), -0.00197 (32), -0.00193 (32), -0.00190 (32), -0.00187 (32), -0.00186 (32), 
Length of domains: 116
Time: pickout 0.0045    decision 0.0183    set_bounds 0.0145    solve 0.1829    add 0.0013    
Accumulated time: pickout 1.7604    decision 9.4314    set_bounds 11.8631    solve 27.7529    add 1.6826    
Current (lb-rhs): -0.0037055611610412598
92321 domains visited
Cumulative time: 80.51944756507874

BaB round 27
batch: 116
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6657314896583557, worst -0.002532064914703369
10 lb beta sum: 0.6657314896583557, worst -0.0025253891944885254
Time: prepare 0.0120    bound 0.1655    transfer 0.0015    finalize 0.0013    func 0.1818    
Accumulated time: func 27.7545    prepare 5.7415    bound 17.5184    transfer 1.0915    finalize 2.1946    
all_split False
======================Cut inference begins======================
max lb tensor(0.00300211) min lb tensor(-0.00251991)
Number of Verified Splits: 191 of 232
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 62.
#cuts 1-3: 40
#cuts 4-6: 22
#cuts >= 20: 0
BICCOS time: 0.047219276428222656 
BICCOS Cumulative time: 26.528815746307373
Preprocessing time: 0.0072367191314697266 Inference time: 0.03545689582824707 Add cuts time: 0.0028412342071533203 Cut analysis time: 0.001684427261352539
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00252 (33), -0.00243 (33), -0.00239 (33), -0.00235 (33), -0.00227 (33), -0.00222 (33), -0.00207 (33), -0.00198 (33), -0.00194 (33), -0.00190 (33), -0.00181 (33), -0.00177 (33), -0.00094 (33), -0.00085 (33), -0.00081 (33), -0.00078 (33), -0.00076 (33), -0.00069 (33), -0.00068 (33), -0.00066 (33), 
Length of domains: 41
Time: pickout 0.0032    decision 0.0159    set_bounds 0.0100    solve 0.1818    add 0.0010    
Accumulated time: pickout 1.7636    decision 9.4473    set_bounds 11.8730    solve 27.9348    add 1.6836    
Current (lb-rhs): -0.0025199055671691895
92362 domains visited
Cumulative time: 80.77964067459106

BaB round 28
batch: 41
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] [/input-8, 1066] 
split level 1: [/input, 2632] [/input, 2632] [/input-8, 1836] [/input, 2632] [/input-8, 1836] [/input, 2632] [/input, 2632] [/input, 2632] [/input-8, 1836] [/input, 2632] 
split level 2: [/input-8, 1836] [/input-8, 1836] [/input, 2632] [/input-8, 1836] [/input, 2632] [/input-8, 1836] [/input-8, 1836] [/input-8, 1836] [/input, 2632] [/input-8, 1836] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.0014410018920898438

all verified at 0th iter
Time: prepare 0.0083    bound 0.0057    transfer 0.0011    finalize 0.0015    func 0.0186    
Accumulated time: func 27.7731    prepare 5.7499    bound 17.5241    transfer 1.0926    finalize 2.1961    
all_split False
======================Cut inference begins======================
max lb tensor(0.01130843) min lb tensor(0.00144100)
Number of Verified Splits: 328 of 328
No cut inferred: All or none verified.
Total number of valid cuts: 62.
#cuts 1-3: 40
#cuts 4-6: 22
#cuts >= 20: 0
BICCOS time: 0.009655952453613281 
BICCOS Cumulative time: 26.538471698760986
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0018    decision 0.0168    set_bounds 0.0278    solve 0.0187    add 0.0004    
Accumulated time: pickout 1.7654    decision 9.4641    set_bounds 11.9009    solve 27.9534    add 1.6841    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
92362 domains visited
Cumulative time: 80.85621070861816


Properties batch 3, size 1
Remaining timeout: 117.46046328544617
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 117.46037125587463
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 117.46034526824951
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 117.46032333374023
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 117.46029829978943
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 117.4602780342102
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 82.5398 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 170, vnnlib ID: 170 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.00588608, -16.16182518,  -6.58917904,  -9.66689301,  -7.57059002,
          -8.67937565, -11.63756847, -10.25432014, -14.60658455, -14.13991070]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [571]; unstable size 571; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 151, 1, 571] with unstable size 150 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 11, 1, 571] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 571] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [150]; unstable size 150; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 11, 1, 150] with unstable size 10 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 150] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [10]; unstable size 10; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 10] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.57134867,  7.26472569, -1.64735675,  1.38431573,  0.25252271,
          3.19363260,  1.94417942,  5.92638016,  5.30164909]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.00588608, -16.16182518,  -6.58917904,  -9.66689301,  -7.57059002,
          -8.67937565, -11.63756847, -10.25432014, -14.60658455, -14.13991070]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.00588608, -16.16182518,  -6.58917904,  -9.66689301,  -7.57059002,
           -8.67937565, -11.63756847, -10.25432014, -14.60658455, -14.13991070]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.98141098]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[-0.84603173, -0.94126981, -0.86190474,  ..., -0.33809513,
            -0.48095238, -0.51269841],
           [-0.25873005, -0.30634910, -0.27460307,  ..., -0.29047608,
            -0.33809513, -0.43333322],
           [ 0.42380959,  0.36031753,  0.39206356,  ..., -0.08412688,
            -0.14761895, -0.32222211],
           ...,
           [ 0.47142863,  0.48730165,  0.55079371,  ...,  0.05873025,
             0.01111121,  0.12222230],
           [ 0.12222230,  0.10634929,  0.23333341,  ..., -0.02063482,
            -0.02063482,  0.16984135],
           [-0.19523799, -0.41746020, -0.29047608,  ...,  0.16984135,
             0.31269848,  0.58253974]],

          [[-0.67632848, -0.78904986, -0.72463763,  ..., -0.03220600,
            -0.17713353, -0.20933965],
           [ 0.04830930, -0.01610294,  0.01610318,  ...,  0.03220624,
            -0.01610294, -0.11272129],
           [ 0.88566834,  0.82125610,  0.85346222,  ...,  0.24154601,
             0.19323683, -0.01610294],
           ...,
           [ 0.95008057,  0.98228669,  1.03059590,  ...,  0.62801939,
             0.56360716,  0.61191636],
           [ 0.70853472,  0.72463775,  0.85346222,  ...,  0.66022551,
             0.62801939,  0.77294695],
           [ 0.46698883,  0.22544295,  0.40257660,  ...,  0.77294695,
             0.85346222,  1.14331758]],

          [[-0.01349309, -0.07346311,  0.03148442,  ...,  0.76611710,
             0.66116959,  0.64617711],
           [-0.02848560, -0.04347810,  0.00149941,  ...,  0.78110963,
             0.78110963,  0.78110963],
           [-0.14842562, -0.19340314, -0.14842562,  ...,  0.81109464,
             0.81109464,  0.76611710],
           ...,
           [-0.53823084, -0.56821585, -0.50824583,  ..., -0.68815589,
            -0.65817088, -0.49325335],
           [-0.58320838, -0.73313338, -0.61319339,  ..., -0.83808094,
            -0.83808094, -0.65817088],
           [-0.80809593, -1.04797614, -0.85307342,  ..., -0.74812591,
            -0.67316341, -0.43328333]]]]], device='cuda:0') torch.Size([1, 1, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0774 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 171, vnnlib ID: 171 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-13.39601326, -14.69097233, -12.64669704, -12.07789993, -12.42763519,
         -12.80878258, -10.90289593, -13.06480980, -16.92237282, -13.27768993]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [576]; unstable size 576; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 576] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 9, 1, 576] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 576] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 9, 1, 199] with unstable size 8 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [8]; unstable size 8; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 8] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.12973356, 2.10289240, 0.60040063, 0.30346036, 0.51467490, 0.89803588,
         1.03227448, 3.96525526, 0.86045063]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0659 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 172, vnnlib ID: 172 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.66107941, -11.79125309,  -7.86607170, -10.32452965,  -7.72983742,
         -11.17636871, -10.86951828, -11.03235435,  -7.73300457, -11.89622021]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [722]; unstable size 722; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 180, 1, 722] with unstable size 179 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 722] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 722] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [179]; unstable size 179; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 179] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 179] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.99104691,  0.21340621,  2.51710510, -0.09744829,  3.08586287,
          3.07672787,  2.41397500, -0.15205145,  3.96747732]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.66107941, -11.79125309,  -7.86607170, -10.32452965,  -7.72983742,
         -11.17636871, -10.86951828, -11.03235435,  -7.73300457, -11.89622021]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.93it/s]100%|██████████| 1/1 [00:00<00:00,  7.93it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.91187239, -11.79963017,  -8.07671642, -10.41768456,  -7.87977695,
          -11.27148438, -10.87535191, -11.22656631,  -7.33530617, -11.91874981],
         [ -6.91187239, -11.79963017,  -8.07671642, -10.41768456,  -7.87977695,
          -11.27148438, -10.87535191, -11.22656631,  -7.33530617, -11.91874981]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.96790457, 0.42343378]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1293 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 19.568557739257812
alpha/beta optimization time: 1.3377830982208252
initial alpha-crown bounds: tensor([[ 4.04605579,  0.26190460,  2.56589413, -0.03486407,  3.13469839,
          3.12771106,  2.50110149, -0.06319100,  4.02924824]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.0631909966468811
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.4633595943451
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.46331906318665
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.46329307556152
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.46327090263367
Verifying property 3 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.03486407]], device='cuda:0') need to verify.
Model prediction is: tensor([ -6.66107941, -11.79125309,  -7.86607170, -10.32452965,  -7.72983742,
        -11.17636871, -10.86951828, -11.03235435,  -7.73300457, -11.89622021],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.03486407]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 722
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 177
Node /15 input 0: size torch.Size([100]) unstable 19
-----------------
# of unstable neurons: 918
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00010347366333007812
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03486168384552002
10 lb beta sum: 0.0, worst -0.03487271070480347
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0581    transfer 0.0001    finalize 0.0001    func 0.0586    
Accumulated time: func 0.0586    prepare 0.0002    bound 0.0581    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] 
split level 1: [/input-12, 45] 
split level 2: [/input-12, 37] 
split level 3: [/input-12, 9] 
split level 4: [/input-12, 78] 
split level 5: [/input-12, 90] 
split level 6: [/input-8, 651] 
split level 7: [/input-12, 92] 
split level 8: [/input-8, 802] 
split level 9: [/input-12, 58] 
split level 10: [/input-8, 534] 
split level 11: [/input-8, 652] 
split level 12: [/input-8, 1012] 
split level 13: [/input-8, 563] 
split level 14: [/input-8, 684] 
split level 15: [/input-8, 650] 
split level 16: [/input-8, 653] 
split level 17: [/input-8, 996] 
split level 18: [/input-8, 1886] 
split level 19: [/input-8, 564] 
split level 20: [/input, 1483] 
split level 21: [/input-8, 1306] 
split level 22: [/input, 3514] 
split level 23: [/input-8, 1330] 
split level 24: [/input-8, 548] 
split level 25: [/input-8, 1331] 
split level 26: [/input, 2250] 
split level 27: [/input-8, 1454] 
split level 28: [/input-8, 566] 
split level 29: [/input-8, 1010] 
split level 30: [/input-8, 1554] 
split level 31: [/input, 1721] 
split level 32: [/input, 2266] 
split level 33: [/input, 2983] 
split level 34: [/input-8, 994] 
split level 35: [/input-8, 573] 
split level 36: [/input, 2409] 
split level 37: [/input-8, 2024] 
split level 38: [/input-8, 857] 
split level 39: [/input-8, 681] 
split level 40: [/input-8, 927] 
split level 41: [/input-8, 1316] 
split level 42: [/input, 3530] 
split level 43: [/input, 3113] 
split level 44: [/input-8, 1305] 
split level 45: [/input-8, 1449] 
split level 46: [/input, 3110] 
split level 47: [/input-8, 1553] 
split level 48: [/input-8, 2022] 
split level 49: [/input, 3112] 
split level 50: [/input, 3173] 
split level 51: [/input, 1499] 
split level 52: [/input, 3257] 
split level 53: [/input-8, 1629] 
split level 54: [/input, 3429] 
split level 55: [/input, 342] 
split level 56: [/input, 3131] 
split level 57: [/input, 2361] 
split level 58: [/input, 3357] 
split level 59: [/input, 3432] 
split level 60: [/input, 375] 
split level 61: [/input, 1749] 
split level 62: [/input, 3735] 
split level 63: [/input, 3546] 
split level 64: [/input, 2375] 
split level 65: [/input-8, 1974] 
split level 66: [/input, 3383] 
split level 67: [/input, 2987] 
split level 68: [/input, 3493] 
split level 69: [/input, 3369] 
split level 70: [/input-8, 1461] 
split level 71: [/input, 676] 
split level 72: [/input, 2651] 
split level 73: [/input-8, 1109] 
split level 74: [/input, 3370] 
split level 75: [/input-8, 1803] 
split level 76: [/input, 341] 
split level 77: [/input, 3895] 
split level 78: [/input, 3174] 
split level 79: [/input-8, 1071] 
split level 80: [/input, 3143] 
split level 81: [/input, 3115] 
split level 82: [/input-8, 278] 
split level 83: [/input, 2405] 
split level 84: [/input, 3893] 
split level 85: [/input, 3116] 
split level 86: [/input, 3945] 
split level 87: [/input-8, 1001] 
split level 88: [/input, 3928] 
split level 89: [/input, 3929] 
split level 90: [/input, 3511] 
split level 91: [/input, 2379] 
split level 92: [/input, 1335] 
split level 93: [/input-8, 1249] 
split level 94: [/input, 2392] 
split level 95: [/input-8, 1122] 
split level 96: [/input-8, 1997] 
split level 97: [/input, 3927] 
split level 98: [/input-8, 464] 
split level 99: [/input, 2374] 
split level 100: [/input, 328] 
split level 101: [/input, 3256] 
split level 102: [/input, 3761] 
split level 103: [/input, 3523] 
split level 104: [/input, 3545] 
split level 105: [/input, 3382] 
split level 106: [/input, 2404] 
split level 107: [/input, 1750] 
split level 108: [/input, 3448] 
split level 109: [/input-8, 1552] 
split level 110: [/input-8, 1065] 
split level 111: [/input, 1310] 
split level 112: [/input-8, 1308] 
split level 113: [/input-8, 574] 
split level 114: [/input, 1351] 
split level 115: [/input, 3413] 
split level 116: [/input, 3098] 
split level 117: [/input, 330] 
split level 118: [/input, 3550] 
split level 119: [/input, 3894] 
split level 120: [/input, 2395] 
split level 121: [/input, 2373] 
split level 122: [/input, 1446] 
split level 123: [/input, 3763] 
split level 124: [/input, 2981] 
split level 125: [/input, 3241] 
split level 126: [/input, 344] 
split level 127: [/input, 2393] 
split level 128: [/input-8, 465] 
split level 129: [/input, 1502] 
split level 130: [/input, 3431] 
split level 131: [/input, 1336] 
split level 132: [/input, 2376] 
split level 133: [/input, 1531] 
split level 134: [/input-8, 646] 
split level 135: [/input-8, 645] 
split level 136: [/input, 3925] 
split level 137: [/input, 3125] 
split level 138: [/input-8, 1995] 
split level 139: [/input, 3931] 
split level 140: [/input, 1365] 
split level 141: [/input, 3738] 
split level 142: [/input, 3397] 
split level 143: [/input, 2380] 
split level 144: [/input, 3371] 
split level 145: [/input, 3175] 
split level 146: [/input, 2363] 
split level 147: [/input, 2235] 
split level 148: [/input, 1479] 
split level 149: [/input, 1337] 
split level 150: [/input, 3926] 
split level 151: [/input, 3005] 
split level 152: [/input-8, 2030] 
split level 153: [/input, 1532] 
split level 154: [/input, 3576] 
split level 155: [/input, 3571] 
split level 156: [/input, 1415] 
split level 157: [/input, 3573] 
split level 158: [/input, 2506] 
split level 159: [/input, 2652] 
split level 160: [/input, 438] 
split level 161: [/input-8, 1441] 
split level 162: [/input, 3384] 
split level 163: [/input, 1309] 
split level 164: [/input-8, 981] 
split level 165: [/input, 3356] 
split level 166: [/input-8, 1996] 
split level 167: [/input, 2388] 
split level 168: [/input, 2362] 
split level 169: [/input, 3160] 
split level 170: [/input, 3580] 
split level 171: [/input, 44] 
split level 172: [/input, 3385] 
split level 173: [/input, 3381] 
split level 174: [/input, 1863] 
split level 175: [/input, 3883] 
split level 176: [/input, 3387] 
split level 177: [/input, 2346] 
split level 178: [/input, 3572] 
split level 179: [/input, 3582] 
split level 180: [/input, 340] 
split level 181: [/input, 1530] 
split level 182: [/input, 769] 
split level 183: [/input, 2394] 
split level 184: [/input, 3574] 
split level 185: [/input, 1491] 
split level 186: [/input, 2542] 
split level 187: [/input, 3575] 
split level 188: [/input-8, 1758] 
split level 189: [/input, 1533] 
split level 190: [/input, 1453] 
split level 191: [/input, 3271] 
split level 192: [/input, 2403] 
split level 193: [/input, 1487] 
split level 194: [/input, 3753] 
split level 195: [/input, 2553] 
split level 196: [/input, 3943] 
split level 197: [/input-8, 1524] 
split level 198: [/input, 1334] 
split level 199: [/input, 3354] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03476977348327637
10 lb beta sum: 0.0, worst -0.03476613759994507
Time: prepare 0.0114    bound 0.1156    transfer 0.0024    finalize 0.0029    func 0.1350    
Accumulated time: func 0.1935    prepare 0.0214    bound 0.1737    transfer 0.0026    finalize 0.0031    
all_split False
======================Cut inference begins======================
max lb tensor(0.10736799) min lb tensor(-0.03476012)
Number of Verified Splits: 11 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011388778686523438 
BICCOS Cumulative time: 0.011388778686523438
Preprocessing time: 0.01030874252319336 Inference time: 0.00043487548828125 Add cuts time: 0.00015306472778320312 Cut analysis time: 0.000492095947265625
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0003    decision 0.5361    set_bounds 0.0090    solve 0.1351    add 0.0100    
Accumulated time: pickout 0.0003    decision 0.5361    set_bounds 0.0090    solve 0.1351    add 0.0100    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41]), tensor([-1.]), tensor([0]), tensor([1.09648795e-07]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([41]), tensor([1.]), tensor([0]), tensor([7.57719443e-11]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.08162665367126465

all verified at 0th iter
Time: prepare 0.0003    bound 0.0041    transfer 0.0001    finalize 0.0001    func 0.0047    
Accumulated time: func 0.1983    prepare 0.0217    bound 0.1778    transfer 0.0027    finalize 0.0032    
After pruning, left:  0

Back to Regular BaB


Properties batch 4, size 1
Remaining timeout: 197.45739340782166
Verifying property 4 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 5, size 1
Remaining timeout: 197.45733046531677
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 197.4573061466217
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 197.457284450531
Verifying property 7 with 1 instances.
##### Instance 172 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0.,  0.,  0.,  0., -1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.06319100]], device='cuda:0') need to verify.
Model prediction is: tensor([ -6.66107941, -11.79125309,  -7.86607170, -10.32452965,  -7.72983742,
        -11.17636871, -10.86951828, -11.03235435,  -7.73300457, -11.89622021],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.06319100]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 722
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 177
Node /15 input 0: size torch.Size([100]) unstable 19
-----------------
# of unstable neurons: 918
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.608268737792969e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0631873607635498
10 lb beta sum: 0.0, worst -0.06319671869277954
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0573    transfer 0.0001    finalize 0.0001    func 0.0578    
Accumulated time: func 0.0578    prepare 0.0002    bound 0.0573    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 53] 
split level 1: [/input-12, 21] 
split level 2: [/input-12, 78] 
split level 3: [/input-12, 9] 
split level 4: [/input-8, 1331] 
split level 5: [/input-12, 74] 
split level 6: [/input-12, 99] 
split level 7: [/input-8, 1330] 
split level 8: [/input-8, 1777] 
split level 9: [/input-8, 1396] 
split level 10: [/input-8, 1785] 
split level 11: [/input-8, 534] 
split level 12: [/input-8, 564] 
split level 13: [/input-8, 1776] 
split level 14: [/input-12, 40] 
split level 15: [/input-8, 563] 
split level 16: [/input, 2167] 
split level 17: [/input-8, 1372] 
split level 18: [/input-8, 1395] 
split level 19: [/input-8, 566] 
split level 20: [/input-8, 1769] 
split level 21: [/input-8, 880] 
split level 22: [/input-8, 1509] 
split level 23: [/input-8, 1839] 
split level 24: [/input-8, 1394] 
split level 25: [/input-12, 32] 
split level 26: [/input-8, 573] 
split level 27: [/input-8, 1524] 
split level 28: [/input-8, 1525] 
split level 29: [/input-8, 1900] 
split level 30: [/input-8, 118] 
split level 31: [/input-8, 1554] 
split level 32: [/input-8, 650] 
split level 33: [/input-8, 1454] 
split level 34: [/input, 3432] 
split level 35: [/input, 2983] 
split level 36: [/input-8, 299] 
split level 37: [/input-8, 1782] 
split level 38: [/input-8, 567] 
split level 39: [/input-8, 651] 
split level 40: [/input-8, 1841] 
split level 41: [/input-8, 1138] 
split level 42: [/input-8, 1843] 
split level 43: [/input, 3736] 
split level 44: [/input-8, 1374] 
split level 45: [/input, 3431] 
split level 46: [/input-8, 117] 
split level 47: [/input, 2683] 
split level 48: [/input, 1370] 
split level 49: [/input-8, 1306] 
split level 50: [/input-8, 1305] 
split level 51: [/input, 3433] 
split level 52: [/input, 2392] 
split level 53: [/input, 3417] 
split level 54: [/input, 3753] 
split level 55: [/input-8, 1429] 
split level 56: [/input, 2950] 
split level 57: [/input-8, 574] 
split level 58: [/input-8, 2020] 
split level 59: [/input, 2409] 
split level 60: [/input, 2987] 
split level 61: [/input, 3415] 
split level 62: [/input-8, 1842] 
split level 63: [/input, 676] 
split level 64: [/input-8, 1523] 
split level 65: [/input-8, 1364] 
split level 66: [/input-8, 1249] 
split level 67: [/input, 3174] 
split level 68: [/input, 388] 
split level 69: [/input, 1369] 
split level 70: [/input, 3448] 
split level 71: [/input, 3928] 
split level 72: [/input, 2391] 
split level 73: [/input, 3735] 
split level 74: [/input, 3160] 
split level 75: [/input, 2393] 
split level 76: [/input-8, 646] 
split level 77: [/input, 3429] 
split level 78: [/input, 1400] 
split level 79: [/input-8, 1122] 
split level 80: [/input, 3175] 
split level 81: [/input, 375] 
split level 82: [/input, 3942] 
split level 83: [/input-8, 1449] 
split level 84: [/input-8, 1803] 
split level 85: [/input, 3927] 
split level 86: [/input, 2375] 
split level 87: [/input, 3550] 
split level 88: [/input, 3975] 
split level 89: [/input, 3144] 
split level 90: [/input-8, 1908] 
split level 91: [/input-8, 1010] 
split level 92: [/input, 387] 
split level 93: [/input-8, 1526] 
split level 94: [/input, 371] 
split level 95: [/input, 3413] 
split level 96: [/input, 3401] 
split level 97: [/input, 2394] 
split level 98: [/input, 1502] 
split level 99: [/input-8, 1441] 
split level 100: [/input, 2981] 
split level 101: [/input, 3739] 
split level 102: [/input, 1386] 
split level 103: [/input, 3738] 
split level 104: [/input, 1335] 
split level 105: [/input, 3382] 
split level 106: [/input, 342] 
split level 107: [/input, 674] 
split level 108: [/input, 2374] 
split level 109: [/input, 2395] 
split level 110: [/input-8, 1069] 
split level 111: [/input, 3419] 
split level 112: [/input, 3944] 
split level 113: [/input-8, 1319] 
split level 114: [/input-8, 927] 
split level 115: [/input, 1402] 
split level 116: [/input, 1385] 
split level 117: [/input, 3383] 
split level 118: [/input, 2407] 
split level 119: [/input, 1356] 
split level 120: [/input, 3926] 
split level 121: [/input, 3925] 
split level 122: [/input, 344] 
split level 123: [/input-8, 681] 
split level 124: [/input, 3397] 
split level 125: [/input, 3546] 
split level 126: [/input-8, 1436] 
split level 127: [/input, 1893] 
split level 128: [/input, 2747] 
split level 129: [/input, 3754] 
split level 130: [/input, 2376] 
split level 131: [/input, 3381] 
split level 132: [/input-8, 464] 
split level 133: [/input-8, 1780] 
split level 134: [/input, 2652] 
split level 135: [/input-8, 1886] 
split level 136: [/input, 1351] 
split level 137: [/input, 3943] 
split level 138: [/input, 3143] 
split level 139: [/input, 3404] 
split level 140: [/input, 341] 
split level 141: [/input, 1353] 
split level 142: [/input-8, 1109] 
split level 143: [/input-8, 1001] 
split level 144: [/input, 1454] 
split level 145: [/input, 2379] 
split level 146: [/input-8, 111] 
split level 147: [/input, 328] 
split level 148: [/input, 3384] 
split level 149: [/input, 1605] 
split level 150: [/input-8, 1366] 
split level 151: [/input, 4022] 
split level 152: [/input, 2723] 
split level 153: [/input-8, 114] 
split level 154: [/input-8, 1371] 
split level 155: [/input, 1365] 
split level 156: [/input, 1336] 
split level 157: [/input, 1349] 
split level 158: [/input, 3569] 
split level 159: [/input-8, 1778] 
split level 160: [/input, 2872] 
split level 161: [/input, 3403] 
split level 162: [/input, 2373] 
split level 163: [/input, 3948] 
split level 164: [/input, 3718] 
split level 165: [/input, 2871] 
split level 166: [/input, 3412] 
split level 167: [/input, 662] 
split level 168: [/input-8, 1758] 
split level 169: [/input, 3929] 
split level 170: [/input, 330] 
split level 171: [/input, 1633] 
split level 172: [/input-8, 466] 
split level 173: [/input, 1415] 
split level 174: [/input, 1649] 
split level 175: [/input, 2189] 
split level 176: [/input, 2636] 
split level 177: [/input, 1665] 
split level 178: [/input, 340] 
split level 179: [/input, 2762] 
split level 180: [/input, 2685] 
split level 181: [/input, 3723] 
split level 182: [/input, 3570] 
split level 183: [/input, 1606] 
split level 184: [/input, 1681] 
split level 185: [/input-8, 1903] 
split level 186: [/input, 2123] 
split level 187: [/input, 385] 
split level 188: [/input, 3530] 
split level 189: [/input, 1334] 
split level 190: [/input, 1595] 
split level 191: [/input, 3428] 
split level 192: [/input, 1891] 
split level 193: [/input, 1984] 
split level 194: [/input, 1487] 
split level 195: [/input, 696] 
split level 196: [/input-8, 645] 
split level 197: [/input, 3385] 
split level 198: [/input, 2633] 
split level 199: [/input, 1374] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06313169002532959
10 lb beta sum: 0.0, worst -0.06312316656112671
Time: prepare 0.0115    bound 0.1069    transfer 0.0013    finalize 0.0027    func 0.1249    
Accumulated time: func 0.1827    prepare 0.0214    bound 0.1642    transfer 0.0014    finalize 0.0029    
all_split False
======================Cut inference begins======================
max lb tensor(0.25262326) min lb tensor(-0.06312001)
Number of Verified Splits: 9 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.011297464370727539 
BICCOS Cumulative time: 0.011297464370727539
Preprocessing time: 0.010229825973510742 Inference time: 0.00038623809814453125 Add cuts time: 0.00015282630920410156 Cut analysis time: 0.0005285739898681641
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5325    set_bounds 0.0090    solve 0.1250    add 0.0099    
Accumulated time: pickout 0.0004    decision 0.5325    set_bounds 0.0090    solve 0.1250    add 0.0099    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53]), tensor([-1.]), tensor([0]), tensor([8.23496521e-07]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([53]), tensor([1.]), tensor([0]), tensor([8.23496521e-07]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06110072135925293

all verified at 2th iter
Time: prepare 0.0003    bound 0.0152    transfer 0.0001    finalize 0.0001    func 0.0158    
Accumulated time: func 0.1985    prepare 0.0217    bound 0.1794    transfer 0.0015    finalize 0.0030    
After pruning, left:  0

Back to Regular BaB


Properties batch 8, size 1
Remaining timeout: 196.4857406616211
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 3.5144 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 173, vnnlib ID: 173 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-4.96530533, -6.64648819, -4.20401192, -3.31281948, -3.79201317,
         -4.34627962, -3.10760784, -5.26119852, -7.51378918, -6.06500340]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [631]; unstable size 631; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 231, 1, 631] with unstable size 230 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 631] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 631] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [230]; unstable size 230; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 230] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 230] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.21187782,  1.27583158, -0.23146796, -0.57322264,  0.65389639,
         -1.39956284,  0.85230476,  2.21380854,  0.78132999]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-4.96530533, -6.64648819, -4.20401192, -3.31281948, -3.79201317,
         -4.34627962, -3.10760784, -5.26119852, -7.51378918, -6.06500340]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-4.96530533, -6.64648819, -4.20401287, -3.31281900, -3.79201317,
          -4.34627962, -3.10760832, -5.26119804, -7.51378918, -6.06500387],
         [-4.96530533, -6.64648819, -4.20401287, -3.31281900, -3.79201317,
          -4.34627962, -3.10760832, -5.26119804, -7.51378918, -6.06500387]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.89119387,  0.47919416, -0.20521069]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]],


         [[[ 0.12222230,  0.18571436,  0.09047628,  ..., -1.36984122,
            -0.30634910, -0.08412688],
           [ 0.04285724,  0.18571436,  0.26507944,  ..., -0.56031746,
            -0.09999990, -0.02063482],
           [ 0.16984135,  0.09047628,  0.20158738,  ..., -0.43333322,
            -0.40158719,  0.07460327],
           ...,
           [ 0.37619054,  0.24920642, -0.08412688,  ...,  0.20158738,
             0.12222230,  0.26507944],
           [ 0.20158738, -0.09999990,  0.24920642,  ...,  0.04285724,
             0.40793657,  0.29682547],
           [-0.21111101,  0.16984135,  0.58253974,  ...,  0.20158738,
             0.58253974,  0.18571436]],

          [[ 0.16103071,  0.22544295,  0.12882459,  ..., -1.35265696,
            -0.27375188, -0.04830906],
           [ 0.08051541,  0.22544295,  0.30595824,  ..., -0.53140092,
            -0.06441211,  0.01610318],
           [ 0.20933989,  0.12882459,  0.24154601,  ..., -0.40257636,
            -0.37037024,  0.11272153],
           ...,
           [ 0.41867965,  0.28985518, -0.04830906,  ...,  0.24154601,
             0.16103071,  0.30595824],
           [ 0.24154601, -0.06441211,  0.28985518,  ...,  0.08051541,
             0.45088577,  0.33816436],
           [-0.17713353,  0.20933989,  0.62801939,  ...,  0.24154601,
             0.62801939,  0.22544295]],

          [[ 0.28635699,  0.34632701,  0.25637197,  ..., -1.12293863,
            -0.11844061,  0.09145443],
           [ 0.21139447,  0.34632701,  0.42128953,  ..., -0.35832080,
             0.07646193,  0.15142445],
           [ 0.33133450,  0.25637197,  0.36131951,  ..., -0.23838064,
            -0.20839565,  0.24137947],
           ...,
           [ 0.52623707,  0.40629703,  0.09145443,  ...,  0.36131951,
             0.28635699,  0.42128953],
           [ 0.36131951,  0.07646193,  0.40629703,  ...,  0.21139447,
             0.55622208,  0.45127454],
           [-0.02848560,  0.33133450,  0.72113961,  ...,  0.36131951,
             0.72113961,  0.34632701]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0735 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 174, vnnlib ID: 174 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.29587555, -13.48483086,  -6.09756279,  -7.41362858,  -5.89941597,
          -7.54863977,  -8.10572243,  -7.43977880, -10.08916378, -11.89095020]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [646]; unstable size 646; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 267, 1, 646] with unstable size 266 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 26, 1, 646] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 646] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [266]; unstable size 266; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 26, 1, 266] with unstable size 25 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 266] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [25]; unstable size 25; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 25] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.30793715,  4.85469532, -0.91200411,  0.07975292,  0.11433148,
          0.44498539,  0.30451083,  1.77916276,  3.32839966]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.29587555, -13.48483086,  -6.09756279,  -7.41362858,  -5.89941597,
          -7.54863977,  -8.10572243,  -7.43977880, -10.08916378, -11.89095020]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.93743134, -13.31060886,  -5.83817673,  -7.27862358,  -6.16091633,
           -7.49989176,  -7.92654562,  -7.81988096,  -9.65338612, -11.76567936]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.32273960]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0062 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0738 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 175, vnnlib ID: 175 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.83441734, -11.65409756, -13.59377003, -13.34711456, -13.02464199,
         -13.48545742, -13.37795448, -12.43483543, -12.00513840,  -9.86730289]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [638]; unstable size 638; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 292, 1, 638] with unstable size 291 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 638] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 638] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [291]; unstable size 291; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 291] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 291] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.04846859,  1.83894753,  1.50338137,  1.00280190,  1.39925528,
          1.18970418,  0.10379371,  0.61262071, -1.38501215]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.83441734, -11.65409756, -13.59377003, -13.34711456, -13.02464199,
         -13.48545742, -13.37795448, -12.43483543, -12.00513840,  -9.86730289]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-10.18911934, -11.47594929, -14.00399876, -13.58273888, -13.39752102,
          -13.68156528, -13.77247524, -12.52532673, -12.20017910,  -9.48548031]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.70363903]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0057 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0832 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 176, vnnlib ID: 176 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.06950283, -10.63156986,  -6.67671871,  -6.37868023,  -6.73359871,
          -6.50309849,  -7.44396973,  -8.55093956,  -8.65787315, -10.48859119]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [583]; unstable size 583; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 187, 1, 583] with unstable size 186 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 10, 1, 583] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 583] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [186]; unstable size 186; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 10, 1, 186] with unstable size 9 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 186] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [9]; unstable size 9; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 9] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.66228312,  2.91003036, -0.61161280, -0.37437868, -0.12838528,
          0.54327893,  1.21973586,  1.01675749,  2.96338701]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.06950283, -10.63156986,  -6.67671871,  -6.37868023,  -6.73359871,
          -6.50309849,  -7.44396973,  -8.55093956,  -8.65787315, -10.48859119]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -8.35448074, -11.02279854,  -6.83222103,  -6.96178865,  -7.00913334,
           -7.09443521,  -7.94125366,  -8.94181538,  -9.05925179, -10.96881390],
         [ -8.35448074, -11.02279854,  -6.83222103,  -6.96178865,  -7.00913334,
           -7.09443521,  -7.94125366,  -8.94181538,  -9.05925179, -10.96881390]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12956762,  0.04734468,  0.13264656]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0061 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0783 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 177, vnnlib ID: 177 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-26.68456459, -32.53074646, -22.78745079, -27.68545341, -28.40427208,
         -27.83055687, -30.00589561, -28.70033264, -29.08596420, -31.81694031]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [868]; unstable size 868; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 118, 1, 868] with unstable size 117 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 8, 1, 868] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 868] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [117]; unstable size 117; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 8, 1, 117] with unstable size 7 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 117] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [7]; unstable size 7; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 7] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.35312653, 8.74417496, 4.20461988, 4.84283018, 4.24144936, 6.39423656,
         5.11291981, 5.55689526, 8.21585178]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0656 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 178, vnnlib ID: 178 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.60622311, -13.14030361,  -7.17618370,  -8.58381081,  -7.30063725,
          -9.39536190, -10.97736740,  -8.69489574, -13.14762592, -13.82670879]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [636]; unstable size 636; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 149, 1, 636] with unstable size 148 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 636] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 636] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [148]; unstable size 148; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 148] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 148] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.19068146, 0.71572351, 1.81306052, 0.68747497, 2.54502153, 4.18923807,
         1.59729886, 6.44614601, 7.10734844]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0700 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 179, vnnlib ID: 179 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -2.84328127,  -9.61974049,  -5.05914211,  -8.02449036,  -6.49527788,
          -8.10750866,  -9.04593754,  -9.49392796,  -6.18774319, -10.90580273]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [499]; unstable size 499; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 153, 1, 499] with unstable size 152 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 499] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 499] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [152]; unstable size 152; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 152] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 152] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[5.54959440, 1.51223123, 4.22370195, 2.84299302, 4.27301979, 5.08756065,
         5.54216433, 2.37470174, 6.85312939]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0695 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 180, vnnlib ID: 180 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.90164661, -15.08635235,  -9.72878838,  -9.48129559,  -7.66526318,
          -8.64265442, -10.58757114,  -3.94943619, -14.45550442, -12.59689999]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [635]; unstable size 635; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 240, 1, 635] with unstable size 239 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 635] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 635] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [239]; unstable size 239; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 239] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 239] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.91279650, 8.85579300, 4.06592512, 3.92259741, 2.47752643, 3.07655334,
         4.65876675, 8.33458614, 6.58941221]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0683 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 181, vnnlib ID: 181 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.14476776, -8.54299259, -5.62799358, -7.28408384, -5.42767191,
         -7.26166582, -5.09700298, -8.12854862, -8.81086445, -8.40001583]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [561]; unstable size 561; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 200, 1, 561] with unstable size 199 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 16, 1, 561] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 561] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [199]; unstable size 199; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 16, 1, 199] with unstable size 15 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 199] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [15]; unstable size 15; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 15] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.70906806,  1.71759129, -0.59509242,  1.34410048, -0.63401127,
          1.15857601,  2.08130550,  2.03014326,  1.72439146]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.14476776, -8.54299259, -5.62799358, -7.28408384, -5.42767191,
         -7.26166582, -5.09700298, -8.12854862, -8.81086445, -8.40001583]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.20649433, -8.83073616, -5.63355064, -7.40713882, -5.33580017,
          -7.33170795, -5.46423101, -8.16074944, -8.97980404, -8.67313671],
         [-8.20649433, -8.83073616, -5.63355064, -7.40713882, -5.33580017,
          -7.33170795, -5.46423101, -8.16074944, -8.97980404, -8.67313671]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.16931963, -0.12843084]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0071 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0777 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 182, vnnlib ID: 182 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.62970924, -15.32867241, -14.02665234, -15.90782928, -15.88710308,
         -16.84171295, -16.61499405, -15.84648132, -15.30559063, -15.92606258]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [630]; unstable size 630; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 112, 1, 630] with unstable size 111 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 13, 1, 630] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 630] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [111]; unstable size 111; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 13, 1, 111] with unstable size 12 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 111] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [12]; unstable size 12; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 12] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.55479431, 0.65966958, 2.49934268, 2.45695710, 3.24221277, 3.17709970,
         2.06576157, 1.70381474, 2.33342195]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0658 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 183, vnnlib ID: 183 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-11.31477261, -14.64444065,  -8.04242039,  -9.54465961,  -7.47801971,
         -10.22035503,  -9.25665569, -10.87084675, -13.17573833, -14.46251965]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [785]; unstable size 785; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 441, 1, 785] with unstable size 440 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 30, 1, 785] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 785] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [440]; unstable size 440; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 30, 1, 440] with unstable size 29 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 440] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [29]; unstable size 29; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 29] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.74053049,  4.37037325, -0.76029545,  0.68074846,  0.98781800,
         -0.06960225,  1.50688028,  3.12951899,  4.10273838]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-11.31477261, -14.64444065,  -8.04242039,  -9.54465961,  -7.47801971,
         -10.22035503,  -9.25665569, -10.87084675, -13.17573833, -14.46251965]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.85it/s]100%|██████████| 1/1 [00:00<00:00,  7.85it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.97328854, -15.64343452,  -8.67847157, -10.54068565,  -8.60878944,
          -11.21894646, -10.33001900, -11.86674881, -13.97623920, -15.42976952],
         [-11.97328854, -15.64343452,  -8.67847157, -10.54068565,  -8.60878944,
          -11.21894646, -10.33001900, -11.86674881, -13.97623920, -15.42976952]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.06968212, 1.72122955]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1304 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 17.027103424072266
alpha/beta optimization time: 1.3881118297576904
initial alpha-crown bounds: tensor([[ 1.93041992,  4.51296282, -0.64870262,  0.80698371,  1.16863012,
          0.07121539,  1.61320698,  3.32261419,  4.24977255]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.6487026214599609
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.4084668159485
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.40841484069824
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.40838313102722
Verifying property 2 with 1 instances.
##### Instance 183 first 10 spec matrices: 
tensor([[[ 0.,  0., -1.,  0.,  1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.64870262]], device='cuda:0') need to verify.
Model prediction is: tensor([-11.31477261, -14.64444065,  -8.04242039,  -9.54465961,  -7.47801971,
        -10.22035503,  -9.25665569, -10.87084675, -13.17573833, -14.46251965],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.64870262]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 785
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 435
Node /15 input 0: size torch.Size([100]) unstable 26
-----------------
# of unstable neurons: 1246
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00012969970703125
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6486996412277222
10 lb beta sum: 0.0, worst -0.6487014293670654
Time: prepare 0.0002    bound 0.0921    transfer 0.0001    finalize 0.0002    func 0.0926    
Accumulated time: func 0.0926    prepare 0.0002    bound 0.0921    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] 
split level 1: [/input-12, 1] 
split level 2: [/input-12, 11] 
split level 3: [/input-12, 13] 
split level 4: [/input-12, 44] 
split level 5: [/input-12, 51] 
split level 6: [/input-12, 72] 
split level 7: [/input-12, 26] 
split level 8: [/input-12, 82] 
split level 9: [/input-12, 68] 
split level 10: [/input-12, 93] 
split level 11: [/input-8, 1372] 
split level 12: [/input-8, 1058] 
split level 13: [/input-8, 1373] 
split level 14: [/input-8, 1564] 
split level 15: [/input-12, 9] 
split level 16: [/input-8, 1911] 
split level 17: [/input-12, 21] 
split level 18: [/input-8, 1356] 
split level 19: [/input-8, 1869] 
split level 20: [/input-8, 1057] 
split level 21: [/input-8, 1870] 
split level 22: [/input-8, 531] 
split level 23: [/input-8, 1878] 
split level 24: [/input-12, 64] 
split level 25: [/input-8, 1555] 
split level 26: [/input-8, 1299] 
split level 27: [/input-8, 1371] 
split level 28: [/input-8, 1073] 
split level 29: [/input-8, 1362] 
split level 30: [/input-8, 1066] 
split level 31: [/input-8, 532] 
split level 32: [/input-8, 1884] 
split level 33: [/input-8, 571] 
split level 34: [/input-8, 1065] 
split level 35: [/input-8, 1363] 
split level 36: [/input-8, 533] 
split level 37: [/input-8, 1563] 
split level 38: [/input-8, 523] 
split level 39: [/input-8, 1565] 
split level 40: [/input-8, 530] 
split level 41: [/input-8, 1894] 
split level 42: [/input-8, 1307] 
split level 43: [/input-8, 1074] 
split level 44: [/input-8, 682] 
split level 45: [/input-8, 1902] 
split level 46: [/input-8, 1883] 
split level 47: [/input-8, 1886] 
split level 48: [/input-8, 677] 
split level 49: [/input-8, 1354] 
split level 50: [/input-8, 1355] 
split level 51: [/input-8, 1549] 
split level 52: [/input-8, 2020] 
split level 53: [/input-8, 1381] 
split level 54: [/input-8, 666] 
split level 55: [/input-8, 1548] 
split level 56: [/input-8, 686] 
split level 57: [/input-8, 1297] 
split level 58: [/input-8, 642] 
split level 59: [/input-8, 460] 
split level 60: [/input-8, 1760] 
split level 61: [/input-8, 668] 
split level 62: [/input-8, 846] 
split level 63: [/input-8, 573] 
split level 64: [/input-8, 1361] 
split level 65: [/input-8, 1021] 
split level 66: [/input-8, 891] 
split level 67: [/input-8, 1083] 
split level 68: [/input-8, 681] 
split level 69: [/input-8, 1301] 
split level 70: [/input-8, 1915] 
split level 71: [/input-8, 1062] 
split level 72: [/input-8, 1077] 
split level 73: [/input-8, 684] 
split level 74: [/input-8, 1881] 
split level 75: [/input-8, 700] 
split level 76: [/input-8, 1877] 
split level 77: [/input-8, 1506] 
split level 78: [/input-8, 1369] 
split level 79: [/input-8, 1558] 
split level 80: [/input, 4006] 
split level 81: [/input-12, 28] 
split level 82: [/input-8, 1289] 
split level 83: [/input-8, 1143] 
split level 84: [/input-8, 546] 
split level 85: [/input-8, 860] 
split level 86: [/input-8, 1509] 
split level 87: [/input, 183] 
split level 88: [/input-8, 665] 
split level 89: [/input-8, 1505] 
split level 90: [/input-8, 1347] 
split level 91: [/input-8, 854] 
split level 92: [/input, 4003] 
split level 93: [/input-8, 1580] 
split level 94: [/input, 3273] 
split level 95: [/input, 390] 
split level 96: [/input-8, 1596] 
split level 97: [/input-8, 491] 
split level 98: [/input, 3988] 
split level 99: [/input-8, 990] 
split level 100: [/input-8, 1310] 
split level 101: [/input-8, 1876] 
split level 102: [/input-8, 83] 
split level 103: [/input-8, 673] 
split level 104: [/input-8, 1597] 
split level 105: [/input-8, 1339] 
split level 106: [/input-8, 1836] 
split level 107: [/input-8, 2021] 
split level 108: [/input-8, 884] 
split level 109: [/input-8, 517] 
split level 110: [/input, 4043] 
split level 111: [/input-8, 545] 
split level 112: [/input-8, 570] 
split level 113: [/input, 426] 
split level 114: [/input, 1188] 
split level 115: [/input, 2757] 
split level 116: [/input, 199] 
split level 117: [/input, 3236] 
split level 118: [/input-8, 1752] 
split level 119: [/input-8, 987] 
split level 120: [/input-12, 53] 
split level 121: [/input-8, 1547] 
split level 122: [/input, 4053] 
split level 123: [/input-8, 1437] 
split level 124: [/input-8, 515] 
split level 125: [/input-8, 1940] 
split level 126: [/input, 3223] 
split level 127: [/input-8, 947] 
split level 128: [/input-8, 1405] 
split level 129: [/input, 4044] 
split level 130: [/input-8, 917] 
split level 131: [/input-8, 1540] 
split level 132: [/input, 2617] 
split level 133: [/input-8, 1819] 
split level 134: [/input-8, 1402] 
split level 135: [/input-8, 1546] 
split level 136: [/input-8, 1545] 
split level 137: [/input, 2517] 
split level 138: [/input, 1386] 
split level 139: [/input-8, 694] 
split level 140: [/input-8, 988] 
split level 141: [/input, 387] 
split level 142: [/input, 3468] 
split level 143: [/input, 583] 
split level 144: [/input, 4055] 
split level 145: [/input, 3304] 
split level 146: [/input, 4072] 
split level 147: [/input-8, 514] 
split level 148: [/input, 456] 
split level 149: [/input, 2533] 
split level 150: [/input-8, 276] 
split level 151: [/input-8, 883] 
split level 152: [/input, 3205] 
split level 153: [/input-8, 1281] 
split level 154: [/input, 3243] 
split level 155: [/input-8, 1318] 
split level 156: [/input-8, 952] 
split level 157: [/input, 3230] 
split level 158: [/input-8, 1873] 
split level 159: [/input, 4054] 
split level 160: [/input, 3290] 
split level 161: [/input, 2461] 
split level 162: [/input-8, 1541] 
split level 163: [/input, 3241] 
split level 164: [/input, 3228] 
split level 165: [/input, 3255] 
split level 166: [/input-8, 1775] 
split level 167: [/input-8, 2028] 
split level 168: [/input-8, 998] 
split level 169: [/input-8, 1017] 
split level 170: [/input-8, 1539] 
split level 171: [/input-8, 569] 
split level 172: [/input, 3218] 
split level 173: [/input, 2493] 
split level 174: [/input, 2467] 
split level 175: [/input, 4002] 
split level 176: [/input, 2867] 
split level 177: [/input, 4035] 
split level 178: [/input-8, 1559] 
split level 179: [/input-8, 552] 
split level 180: [/input, 2348] 
split level 181: [/input-8, 98] 
split level 182: [/input, 3286] 
split level 183: [/input-8, 1524] 
split level 184: [/input-8, 2013] 
split level 185: [/input, 2883] 
split level 186: [/input-8, 467] 
split level 187: [/input-8, 985] 
split level 188: [/input, 2478] 
split level 189: [/input, 3246] 
split level 190: [/input-8, 1475] 
split level 191: [/input-8, 836] 
split level 192: [/input-8, 1439] 
split level 193: [/input-8, 461] 
split level 194: [/input, 4029] 
split level 195: [/input, 2734] 
split level 196: [/input-8, 558] 
split level 197: [/input, 2885] 
split level 198: [/input, 649] 
split level 199: [/input, 2543] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6486227512359619
10 lb beta sum: 0.0, worst -0.6486254930496216
Time: prepare 0.0120    bound 0.1126    transfer 0.0027    finalize 0.0033    func 0.1333    
Accumulated time: func 0.2259    prepare 0.0228    bound 0.2047    transfer 0.0028    finalize 0.0034    
all_split False
======================Cut inference begins======================
max lb tensor(-0.01548457) min lb tensor(-0.64861369)
Number of Verified Splits: 0 of 400
No cut inferred: All or none verified.
Total number of valid cuts: 0.
#cuts >= 20: 0
BICCOS time: 0.012055635452270508 
BICCOS Cumulative time: 0.012055635452270508
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.63266 (1), -0.63183 (1), -0.63171 (1), -0.63152 (1), -0.63092 (1), -0.63056 (1), -0.62998 (1), -0.62990 (1), -0.62929 (1), -0.62868 (1), -0.62622 (1), -0.62477 (1), -0.62431 (1), -0.62338 (1), -0.62303 (1), -0.62262 (1), -0.62257 (1), -0.62231 (1), -0.62226 (1), -0.62134 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5432    set_bounds 0.0104    solve 0.1334    add 0.2143    
Accumulated time: pickout 0.0004    decision 0.5432    set_bounds 0.0104    solve 0.1334    add 0.2143    
Current (lb-rhs): -0.632660984992981
50 domains visited
Cumulative time: 1.0292418003082275

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 26] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 72] [/input-12, 26] 
split level 2: [/input-12, 72] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 72] 
split level 3: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6041759252548218
10 lb beta sum: 0.0, worst -0.6032874584197998
Time: prepare 0.0128    bound 0.1142    transfer 0.0014    finalize 0.0028    func 0.1338    
Accumulated time: func 0.3597    prepare 0.0358    bound 0.3189    transfer 0.0042    finalize 0.0063    
all_split False
======================Cut inference begins======================
max lb tensor(0.36809254) min lb tensor(-0.60305882)
Number of Verified Splits: 59 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.01688408851623535 
BICCOS Cumulative time: 0.02893972396850586
Preprocessing time: 0.012674808502197266 Inference time: 0.0024471282958984375 Add cuts time: 0.0014467239379882812 Cut analysis time: 0.0003154277801513672
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.45757 (2), -0.45673 (2), -0.45444 (2), -0.45375 (2), -0.45298 (2), -0.45241 (2), -0.45241 (2), -0.45212 (2), -0.44602 (2), -0.44595 (2), -0.43918 (2), -0.43629 (2), -0.43434 (2), -0.43307 (2), -0.43117 (2), -0.42892 (2), -0.42755 (2), -0.42285 (2), -0.42162 (2), -0.41749 (2), 
Length of domains: 50
Time: pickout 0.0148    decision 0.0217    set_bounds 0.0136    solve 0.1339    add 0.1516    
Accumulated time: pickout 0.0151    decision 0.5649    set_bounds 0.0241    solve 0.2673    add 0.3659    
Current (lb-rhs): -0.45757198333740234
100 domains visited
Cumulative time: 1.3819894790649414

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 1] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 26] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 26] [/input-12, 72] [/input-12, 1] [/input-12, 26] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 26] [/input-12, 72] [/input-12, 26] [/input-12, 26] [/input-12, 72] [/input-12, 26] [/input-12, 72] 
split level 3: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 72] [/input-12, 82] [/input-12, 82] [/input-12, 72] [/input-12, 82] [/input-12, 72] [/input-12, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4300103187561035
10 lb beta sum: 0.6145077347755432, worst -0.4294639527797699
Time: prepare 0.0060    bound 0.1350    transfer 0.0016    finalize 0.0028    func 0.1481    
Accumulated time: func 0.5078    prepare 0.0421    bound 0.4539    transfer 0.0057    finalize 0.0091    
all_split False
======================Cut inference begins======================
max lb tensor(0.29475093) min lb tensor(-0.42456597)
Number of Verified Splits: 67 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.01743149757385254 
BICCOS Cumulative time: 0.0463712215423584
Preprocessing time: 0.0119781494140625 Inference time: 0.003369569778442383 Add cuts time: 0.0017881393432617188 Cut analysis time: 0.0002956390380859375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.17834 (3), -0.17711 (3), -0.17600 (3), -0.17550 (3), -0.17431 (3), -0.16798 (3), -0.16759 (3), -0.16677 (3), -0.16675 (3), -0.16570 (3), -0.15852 (3), -0.15842 (3), -0.15838 (3), -0.15828 (3), -0.15784 (3), -0.15752 (3), -0.13842 (3), -0.13784 (3), -0.13743 (3), -0.13649 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0206    set_bounds 0.0156    solve 0.1481    add 0.0877    
Accumulated time: pickout 0.0162    decision 0.5855    set_bounds 0.0397    solve 0.4154    add 0.4536    
Current (lb-rhs): -0.17833828926086426
150 domains visited
Cumulative time: 1.672797441482544

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] 
split level 2: [/input-12, 26] [/input-12, 72] [/input-12, 72] [/input-12, 26] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] 
split level 3: [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] [/input-12, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1995992660522461
10 lb beta sum: 0.767406165599823, worst -0.178536057472229
Time: prepare 0.0057    bound 0.1340    transfer 0.0035    finalize 0.0020    func 0.1478    
Accumulated time: func 0.6556    prepare 0.0480    bound 0.5879    transfer 0.0092    finalize 0.0111    
all_split False
======================Cut inference begins======================
max lb tensor(0.29210544) min lb tensor(-0.17425513)
Number of Verified Splits: 194 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 5
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.02689647674560547 
BICCOS Cumulative time: 0.07326769828796387
Preprocessing time: 0.011808156967163086 Inference time: 0.011353492736816406 Add cuts time: 0.0033142566680908203 Cut analysis time: 0.00042057037353515625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10366 (4), -0.10095 (4), -0.10023 (4), -0.09936 (4), -0.09901 (4), -0.09873 (4), -0.09855 (4), -0.09835 (4), -0.09709 (4), -0.09676 (4), -0.09649 (4), -0.09614 (4), -0.09586 (4), -0.09503 (4), -0.09454 (4), -0.09352 (4), -0.09296 (4), -0.09169 (4), -0.09157 (4), -0.09128 (4), 
Length of domains: 50
Time: pickout 0.0019    decision 0.0202    set_bounds 0.0158    solve 0.1479    add 0.2804    
Accumulated time: pickout 0.0181    decision 0.6057    set_bounds 0.0555    solve 0.5633    add 0.7340    
Current (lb-rhs): -0.10366159677505493
200 domains visited
Cumulative time: 2.1661314964294434

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] [/input-12, 54] 
split level 1: [/input-12, 72] [/input-12, 72] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 51] [/input-12, 51] 
split level 2: [/input-12, 82] [/input-12, 82] [/input-12, 72] [/input-12, 72] [/input-12, 82] [/input-12, 72] [/input-12, 72] [/input-12, 82] [/input-12, 26] [/input-12, 26] 
split level 3: [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12351155281066895
10 lb beta sum: 0.8812574744224548, worst -0.11405360698699951
Time: prepare 0.0057    bound 0.1339    transfer 0.0013    finalize 0.0027    func 0.1462    
Accumulated time: func 0.8018    prepare 0.0539    bound 0.7218    transfer 0.0105    finalize 0.0138    
all_split False
======================Cut inference begins======================
max lb tensor(0.31943822) min lb tensor(-0.10142958)
Number of Verified Splits: 178 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 5
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.0253450870513916 
BICCOS Cumulative time: 0.09861278533935547
Preprocessing time: 0.011534452438354492 Inference time: 0.010487556457519531 Add cuts time: 0.0027647018432617188 Cut analysis time: 0.0005583763122558594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02855 (5), -0.02848 (5), -0.02841 (5), -0.02837 (5), -0.02805 (5), -0.02756 (5), -0.02741 (5), -0.02729 (5), -0.02725 (5), -0.02691 (5), -0.02689 (5), -0.02580 (5), -0.02568 (5), -0.02561 (5), -0.02540 (5), -0.02493 (5), -0.02431 (5), -0.02362 (5), -0.02287 (5), -0.02198 (5), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0208    set_bounds 0.0158    solve 0.1463    add 0.1084    
Accumulated time: pickout 0.0192    decision 0.6265    set_bounds 0.0713    solve 0.7096    add 0.8424    
Current (lb-rhs): -0.0285489559173584
250 domains visited
Cumulative time: 2.485391616821289

Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 72]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([1.20788573e-05, 1.11566201e-01, 7.56183714e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 72, 26, 54]), tensor([-1., -1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.20788573e-05, 1.11566201e-01, 1.83582231e-01, 7.13912696e-02,
        3.28891456e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 72, 26, 54]), tensor([-1., -1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.20788573e-05, 1.11566201e-01, 1.83582231e-01, 7.13912696e-02,
        1.04465950e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 72, 26, 54]), tensor([-1., -1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.20788573e-05, 1.11566201e-01, 1.83582231e-01, 6.28182143e-02,
        3.14725816e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 72, 26, 54]), tensor([-1., -1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.20788573e-05, 1.11566201e-01, 1.83582231e-01, 6.28182143e-02,
        1.05566252e-02]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1., -1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.20788573e-05, 1.77153781e-01, 1.09164461e-01, 7.19795674e-02,
        3.37482274e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1., -1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.20788573e-05, 1.77153781e-01, 1.09164461e-01, 7.19795674e-02,
        2.21251114e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1., -1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.20788573e-05, 1.77153781e-01, 1.09164461e-01, 3.94601077e-02,
        3.46225441e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1., -1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.20788573e-05, 1.77153781e-01, 1.09164461e-01, 3.94601077e-02,
        6.47847494e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1.,  1., -1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.20788573e-05, 1.77153781e-01, 1.01483569e-01, 7.10202903e-02,
        3.32327724e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1.,  1., -1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.20788573e-05, 1.77153781e-01, 1.01483569e-01, 7.10202903e-02,
        5.74337086e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1.,  1.,  1., -1.]), tensor([0, 0, 0, 0, 0]), tensor([1.20788573e-05, 1.77153781e-01, 1.01483569e-01, 4.16545123e-02,
        3.33850443e-01]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28,  1, 26, 82, 54]), tensor([-1.,  1.,  1.,  1.,  1.]), tensor([0, 0, 0, 0, 0]), tensor([1.20788573e-05, 1.77153781e-01, 1.01483569e-01, 4.16545123e-02,
        7.24129518e-03]), tensor([0, 1, 2, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([28]), tensor([1.]), tensor([0]), tensor([2.61055622e-10]), tensor([0]))}
Shallow branching resets to n domains:  14
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.6479523777961731
10 lb beta sum: 0.48990926146507263, worst -0.6125701665878296
Time: prepare 0.0006    bound 0.1301    transfer 0.0002    finalize 0.0002    func 0.1313    
Accumulated time: func 0.9331    prepare 0.0545    bound 0.8519    transfer 0.0107    finalize 0.0140    
After pruning, left:  8

Back to Regular BaB

BaB round 1
batch: 8
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 54] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 51] [/input-12, 44] [/input-12, 44] [/input-12, 54] 
split level 1: [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 51] [/input-12, 44] [/input-12, 51] [/input-12, 51] [/input-12, 1] 
split level 2: [/input-12, 26] [/input-12, 82] [/input-12, 82] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 72] [/input-12, 26] 
split level 3: [/input-12, 82] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 93] [/input-12, 72] 
split level 4: [/input-12, 93] [/input-8, 1057] [/input-8, 1057] [/input-8, 1057] [/input-8, 1057] [/input-8, 1057] [/input-8, 1057] [/input-12, 82] 
cut re-enabled after branching node selection
0 lb beta sum: 1.025821328163147, worst -0.36574792861938477
10 lb beta sum: 1.0260412693023682, worst -0.3642202615737915
Time: prepare 0.0115    bound 0.1333    transfer 0.0023    finalize 0.0023    func 0.1511    
Accumulated time: func 1.0842    prepare 0.0663    bound 0.9852    transfer 0.0130    finalize 0.0163    
all_split False
======================Cut inference begins======================
max lb tensor(0.34342766) min lb tensor(-0.36355221)
Number of Verified Splits: 232 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.0013558864593506, worst -0.5840453505516052
10 lb beta sum: 1.3052328824996948, worst -0.2831224799156189
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 5
#cuts 4-6: 17
#cuts 7-9: 8
#cuts 10-12: 1
#cuts >= 20: 0
BICCOS time: 0.2773776054382324 
BICCOS Cumulative time: 0.3759903907775879
Preprocessing time: 0.007143735885620117 Inference time: 0.2622804641723633 Add cuts time: 0.006474971771240234 Cut analysis time: 0.001478433609008789
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.36355 (5), -0.36271 (5), -0.35308 (5), -0.35298 (5), -0.32922 (5), -0.32399 (5), -0.32215 (5), -0.31576 (5), -0.30803 (5), -0.30201 (5), -0.29773 (5), -0.29031 (5), -0.27670 (5), -0.26846 (5), -0.26533 (5), -0.24007 (5), -0.07494 (5), -0.07125 (5), -0.06350 (5), -0.06017 (5), 
Length of domains: 24
Time: pickout 0.0006    decision 0.0173    set_bounds 0.0187    solve 0.1512    add 0.0541    
Accumulated time: pickout 0.0197    decision 0.6438    set_bounds 0.0899    solve 0.8608    add 0.8965    
Current (lb-rhs): -0.3635522127151489
274 domains visited
Cumulative time: 3.1807029247283936

BaB round 2
batch: 24
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] [/input-12, 44] 
split level 1: [/input-12, 51] [/input-8, 1057] [/input-12, 51] [/input-12, 51] [/input-8, 1058] [/input-12, 51] [/input-12, 51] [/input-8, 1058] [/input-12, 51] [/input-12, 51] 
split level 2: [/input-12, 93] [/input-8, 1066] [/input-12, 93] [/input-12, 93] [/input-8, 1057] [/input-12, 93] [/input-12, 93] [/input-8, 1057] [/input-12, 93] [/input-12, 93] 
split level 3: [/input-8, 1057] [/input-8, 1555] [/input-8, 1057] [/input-8, 1057] [/input-8, 1066] [/input-8, 1057] [/input-8, 1555] [/input-8, 1066] [/input-8, 1057] [/input-12, 9] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.28687870502471924
10 lb beta sum: 0.5806816816329956, worst -0.2792631983757019
Time: prepare 0.0075    bound 0.1343    transfer 0.0015    finalize 0.0026    func 0.1494    
Accumulated time: func 1.2336    prepare 0.0740    bound 1.1195    transfer 0.0146    finalize 0.0189    
all_split False
======================Cut inference begins======================
max lb tensor(0.21695971) min lb tensor(-0.27885830)
Number of Verified Splits: 197 of 384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 7
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.034801483154296875 
BICCOS Cumulative time: 0.41079187393188477
Preprocessing time: 0.011670827865600586 Inference time: 0.019769668579101562 Add cuts time: 0.002935171127319336 Cut analysis time: 0.0004258155822753906
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27886 (9), -0.27578 (9), -0.27267 (9), -0.27227 (9), -0.27131 (9), -0.26998 (9), -0.26815 (9), -0.26284 (9), -0.26257 (9), -0.26075 (9), -0.26051 (9), -0.25911 (9), -0.25041 (9), -0.24926 (9), -0.24376 (9), -0.23950 (9), -0.23931 (9), -0.23730 (9), -0.23663 (9), -0.23471 (9), 
Length of domains: 187
Time: pickout 0.0053    decision 0.0198    set_bounds 0.0293    solve 0.1496    add 0.0755    
Accumulated time: pickout 0.0250    decision 0.6636    set_bounds 0.1192    solve 1.0103    add 0.9721    
Current (lb-rhs): -0.2788583040237427
461 domains visited
Cumulative time: 3.5034162998199463

BaB round 3
batch: 187
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1058] [/input-8, 1058] [/input-12, 9] [/input-8, 1058] [/input-8, 1057] [/input-12, 9] [/input-8, 1057] [/input-8, 1057] [/input-8, 1058] [/input-8, 1058] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.28128981590270996
10 lb beta sum: 0.7600299119949341, worst -0.2753632068634033
Time: prepare 0.0076    bound 0.1266    transfer 0.0009    finalize 0.0036    func 0.1411    
Accumulated time: func 1.3747    prepare 0.0819    bound 1.2461    transfer 0.0154    finalize 0.0225    
all_split False
======================Cut inference begins======================
max lb tensor(0.63873911) min lb tensor(-0.27517945)
Number of Verified Splits: 68 of 374
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 8
#cuts 4-6: 2
#cuts >= 20: 0
BICCOS time: 0.019728899002075195 
BICCOS Cumulative time: 0.43052077293395996
Preprocessing time: 0.011310815811157227 Inference time: 0.0064508914947509766 Add cuts time: 0.0009140968322753906 Cut analysis time: 0.0010530948638916016
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27518 (10), -0.27390 (10), -0.26772 (10), -0.26721 (10), -0.26691 (10), -0.26528 (10), -0.26308 (10), -0.25855 (10), -0.25736 (10), -0.25614 (10), -0.25531 (10), -0.25466 (10), -0.24601 (10), -0.24399 (10), -0.23796 (10), -0.23413 (10), -0.23375 (10), -0.23344 (10), -0.23337 (10), -0.23330 (10), 
Length of domains: 306
Time: pickout 0.0152    decision 0.0230    set_bounds 0.0160    solve 0.1413    add 0.0763    
Accumulated time: pickout 0.0402    decision 0.6866    set_bounds 0.1352    solve 1.1516    add 1.0484    
Current (lb-rhs): -0.2751794457435608
767 domains visited
Cumulative time: 3.80342698097229

BaB round 4
batch: 306
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 9] [/input-12, 9] [/input-8, 1058] [/input-12, 9] [/input-12, 9] [/input-8, 1299] [/input-8, 1555] [/input-8, 1299] [/input-12, 9] [/input-12, 9] 
cut re-enabled after branching node selection
0 lb beta sum: 0.9252486824989319, worst -0.2739008665084839
10 lb beta sum: 0.9319999814033508, worst -0.27367597818374634
Time: prepare 0.0267    bound 0.1272    transfer 0.0016    finalize 0.0036    func 0.1631    
Accumulated time: func 1.5378    prepare 0.1088    bound 1.3733    transfer 0.0171    finalize 0.0261    
all_split False
======================Cut inference begins======================
max lb tensor(0.22498691) min lb tensor(-0.27354753)
Number of Verified Splits: 162 of 612
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.03855562210083008 
BICCOS Cumulative time: 0.46907639503479004
Preprocessing time: 0.018720626831054688 Inference time: 0.01751708984375 Add cuts time: 0.0019016265869140625 Cut analysis time: 0.0004162788391113281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27355 (11), -0.27100 (11), -0.26721 (11), -0.26649 (11), -0.26480 (11), -0.26275 (11), -0.25827 (11), -0.25778 (11), -0.25689 (11), -0.25470 (11), -0.25419 (11), -0.24690 (11), -0.24562 (11), -0.24352 (11), -0.23735 (11), -0.23339 (11), -0.23281 (11), -0.23250 (11), -0.23126 (11), -0.23008 (11), 
Length of domains: 450
Time: pickout 0.0172    decision 0.0296    set_bounds 0.0286    solve 0.1634    add 0.0379    
Accumulated time: pickout 0.0574    decision 0.7162    set_bounds 0.1637    solve 1.3150    add 1.0862    
Current (lb-rhs): -0.27354753017425537
1217 domains visited
Cumulative time: 4.1215879917144775

BaB round 5
batch: 450
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1555] [/input-8, 1299] [/input-8, 1555] [/input-8, 1299] [/input-8, 1058] [/input-8, 1299] [/input-8, 1555] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.266597181558609
10 lb beta sum: 1.5142093896865845, worst -0.2614644765853882
Time: prepare 0.0189    bound 0.1417    transfer 0.0051    finalize 0.2422    func 0.4139    
Accumulated time: func 1.9517    prepare 0.1278    bound 1.5149    transfer 0.0221    finalize 0.2684    
all_split False
======================Cut inference begins======================
max lb tensor(0.93849111) min lb tensor(-0.26140666)
Number of Verified Splits: 726 of 900
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.1167898178100586 
BICCOS Cumulative time: 0.5858662128448486
Preprocessing time: 0.030630826950073242 Inference time: 0.07536530494689941 Add cuts time: 0.010197877883911133 Cut analysis time: 0.0005958080291748047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26141 (12), -0.26122 (12), -0.25370 (12), -0.25286 (12), -0.25207 (12), -0.25084 (12), -0.24478 (12), -0.24280 (12), -0.23935 (12), -0.23685 (12), -0.22871 (12), -0.22020 (12), -0.22015 (12), -0.21971 (12), -0.21948 (12), -0.21920 (12), -0.21893 (12), -0.21863 (12), -0.21811 (12), -0.21473 (12), 
Length of domains: 174
Time: pickout 0.0086    decision 0.0375    set_bounds 0.0411    solve 0.4142    add 0.0028    
Accumulated time: pickout 0.0660    decision 0.7537    set_bounds 0.2049    solve 1.7292    add 1.0890    
Current (lb-rhs): -0.26140666007995605
1391 domains visited
Cumulative time: 4.751232624053955

BaB round 6
batch: 174
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1299] [/input-12, 68] [/input-8, 1299] [/input-8, 1299] [/input-12, 68] [/input-8, 1299] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-12, 68] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.26090893149375916
10 lb beta sum: 1.743775486946106, worst -0.251224160194397
Time: prepare 0.0074    bound 0.1421    transfer 0.0032    finalize 0.0022    func 0.1572    
Accumulated time: func 2.1089    prepare 0.1355    bound 1.6571    transfer 0.0253    finalize 0.2705    
all_split False
======================Cut inference begins======================
max lb tensor(0.67155886) min lb tensor(-0.25112391)
Number of Verified Splits: 115 of 348
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.02741241455078125 
BICCOS Cumulative time: 0.6132786273956299
Preprocessing time: 0.011044025421142578 Inference time: 0.014145135879516602 Add cuts time: 0.0017657279968261719 Cut analysis time: 0.00045752525329589844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.25112 (13), -0.24535 (13), -0.24512 (13), -0.24194 (13), -0.24092 (13), -0.24080 (13), -0.23626 (13), -0.23442 (13), -0.23331 (13), -0.23272 (13), -0.23000 (13), -0.22856 (13), -0.22704 (13), -0.22327 (13), -0.22249 (13), -0.22092 (13), -0.21791 (13), -0.21095 (13), -0.20945 (13), -0.20936 (13), 
Length of domains: 233
Time: pickout 0.0036    decision 0.0226    set_bounds 0.0161    solve 0.1574    add 0.0049    
Accumulated time: pickout 0.0696    decision 0.7762    set_bounds 0.2209    solve 1.8865    add 1.0939    
Current (lb-rhs): -0.25112390518188477
1624 domains visited
Cumulative time: 4.984387159347534

BaB round 7
batch: 233
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 68] [/input-8, 1066] [/input-12, 68] [/input-8, 1356] [/input-12, 68] [/input-12, 68] [/input-12, 68] [/input-8, 1299] [/input-12, 68] [/input-8, 1066] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9545620679855347, worst -0.2460160255432129
10 lb beta sum: 1.9545620679855347, worst -0.24591052532196045
Time: prepare 0.0200    bound 0.1439    transfer 0.0015    finalize 0.0032    func 0.1718    
Accumulated time: func 2.2807    prepare 0.1557    bound 1.8010    transfer 0.0267    finalize 0.2738    
all_split False
======================Cut inference begins======================
max lb tensor(0.23557663) min lb tensor(-0.24586308)
Number of Verified Splits: 21 of 466
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.018114566802978516 
BICCOS Cumulative time: 0.6313931941986084
Preprocessing time: 0.013948917388916016 Inference time: 0.0025496482849121094 Add cuts time: 0.0005104541778564453 Cut analysis time: 0.0011055469512939453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24586 (14), -0.24503 (14), -0.23995 (14), -0.23819 (14), -0.23679 (14), -0.23570 (14), -0.23520 (14), -0.23459 (14), -0.23427 (14), -0.23289 (14), -0.23100 (14), -0.22868 (14), -0.22856 (14), -0.22767 (14), -0.22756 (14), -0.22704 (14), -0.22613 (14), -0.22501 (14), -0.22405 (14), -0.22327 (14), 
Length of domains: 445
Time: pickout 0.0038    decision 0.0235    set_bounds 0.0204    solve 0.1720    add 0.0085    
Accumulated time: pickout 0.0734    decision 0.7997    set_bounds 0.2413    solve 2.0585    add 1.1024    
Current (lb-rhs): -0.24586308002471924
2069 domains visited
Cumulative time: 5.23159646987915

BaB round 8
batch: 445
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1356] [/input-8, 1066] [/input-8, 1363] [/input-8, 1356] [/input-8, 1307] [/input-8, 1307] [/input-8, 666] [/input-8, 1555] [/input-8, 1356] [/input-8, 1299] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9397754669189453, worst -0.24216222763061523
10 lb beta sum: 1.9397754669189453, worst -0.24203872680664062
Time: prepare 0.0380    bound 0.1371    transfer 0.0080    finalize 0.0051    func 0.1940    
Accumulated time: func 2.4748    prepare 0.1940    bound 1.9381    transfer 0.0347    finalize 0.2789    
all_split False
======================Cut inference begins======================
max lb tensor(-0.00127095) min lb tensor(-0.24200094)
Number of Verified Splits: 0 of 890
No cut inferred: All or none verified.
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.028018712997436523 
BICCOS Cumulative time: 0.6594119071960449
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.24200 (15), -0.24160 (15), -0.23603 (15), -0.23566 (15), -0.23513 (15), -0.23436 (15), -0.23294 (15), -0.23083 (15), -0.23041 (15), -0.22936 (15), -0.22856 (15), -0.22805 (15), -0.22750 (15), -0.22710 (15), -0.22704 (15), -0.22703 (15), -0.22445 (15), -0.22442 (15), -0.22397 (15), -0.22391 (15), 
Length of domains: 890
Time: pickout 0.0076    decision 0.0331    set_bounds 0.0407    solve 0.1945    add 0.0065    
Accumulated time: pickout 0.0810    decision 0.8329    set_bounds 0.2821    solve 2.2530    add 1.1089    
Current (lb-rhs): -0.24200093746185303
2959 domains visited
Cumulative time: 5.543386697769165

BaB round 9
batch: 890
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 532] [/input-8, 1363] [/input-8, 1066] [/input-8, 532] [/input-8, 666] [/input-8, 1555] [/input-8, 1307] [/input-8, 666] [/input-8, 532] [/input-8, 666] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9397754669189453, worst -0.23707449436187744
10 lb beta sum: 1.9397754669189453, worst -0.23704147338867188
Time: prepare 0.0766    bound 0.1628    transfer 0.0092    finalize 0.0088    func 0.2689    
Accumulated time: func 2.7437    prepare 0.2708    bound 2.1009    transfer 0.0439    finalize 0.2876    
all_split False
======================Cut inference begins======================
max lb tensor(0.00501919) min lb tensor(-0.23701525)
Number of Verified Splits: 4 of 1780
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.058142662048339844 
BICCOS Cumulative time: 0.7175545692443848
Preprocessing time: 0.05660820007324219 Inference time: 0.0007054805755615234 Add cuts time: 0.00036644935607910156 Cut analysis time: 0.00046253204345703125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23702 (16), -0.23564 (16), -0.23515 (16), -0.23512 (16), -0.23223 (16), -0.23119 (16), -0.23008 (16), -0.22990 (16), -0.22856 (16), -0.22802 (16), -0.22796 (16), -0.22791 (16), -0.22704 (16), -0.22700 (16), -0.22690 (16), -0.22522 (16), -0.22467 (16), -0.22433 (16), -0.22394 (16), -0.22327 (16), 
Length of domains: 1776
Time: pickout 0.0143    decision 0.0641    set_bounds 0.0800    solve 0.2702    add 0.0113    
Accumulated time: pickout 0.0953    decision 0.8969    set_bounds 0.3621    solve 2.5232    add 1.1202    
Current (lb-rhs): -0.2370152473449707
4735 domains visited
Cumulative time: 6.048389673233032

BaB round 10
batch: 1776
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1363] [/input-8, 533] [/input-8, 533] [/input-8, 1363] [/input-8, 1363] [/input-8, 1564] [/input-8, 1363] [/input-8, 1564] [/input-8, 1363] [/input-8, 1307] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9386529922485352, worst -0.23162484169006348
10 lb beta sum: 1.9386529922485352, worst -0.23154139518737793
Time: prepare 0.1556    bound 0.2711    transfer 0.0193    finalize 0.0207    func 0.4903    
Accumulated time: func 3.2341    prepare 0.4267    bound 2.3720    transfer 0.0632    finalize 0.3084    
all_split False
======================Cut inference begins======================
max lb tensor(0.01380539) min lb tensor(-0.23152030)
Number of Verified Splits: 16 of 3552
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.12264680862426758 
BICCOS Cumulative time: 0.8402013778686523
Preprocessing time: 0.11823844909667969 Inference time: 0.002485513687133789 Add cuts time: 0.0014221668243408203 Cut analysis time: 0.0005006790161132812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23152 (17), -0.23134 (17), -0.23078 (17), -0.23043 (17), -0.22804 (17), -0.22657 (17), -0.22610 (17), -0.22499 (17), -0.22450 (17), -0.22406 (17), -0.22379 (17), -0.22342 (17), -0.22304 (17), -0.22238 (17), -0.22226 (17), -0.22172 (17), -0.22140 (17), -0.22015 (17), -0.21998 (17), -0.21962 (17), 
Length of domains: 3536
Time: pickout 0.0286    decision 0.1114    set_bounds 0.3489    solve 0.4913    add 0.0241    
Accumulated time: pickout 0.1239    decision 1.0083    set_bounds 0.7110    solve 3.0146    add 1.1443    
Current (lb-rhs): -0.23152029514312744
8271 domains visited
Cumulative time: 7.181096076965332

BaB round 11
batch: 3536
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 533] [/input-8, 532] [/input-8, 532] [/input-8, 533] [/input-8, 1356] [/input-8, 1363] [/input-8, 1356] [/input-8, 1363] [/input-8, 533] [/input-8, 1363] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9371644258499146, worst -0.22602474689483643
10 lb beta sum: 1.9371644258499146, worst -0.22591567039489746
Time: prepare 0.3270    bound 0.4507    transfer 0.0379    finalize 0.0366    func 0.8990    
Accumulated time: func 4.1331    prepare 0.7540    bound 2.8227    transfer 0.1011    finalize 0.3450    
all_split False
======================Cut inference begins======================
max lb tensor(0.01744986) min lb tensor(-0.22586060)
Number of Verified Splits: 114 of 7072
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.2586092948913574 
BICCOS Cumulative time: 1.0988106727600098
Preprocessing time: 0.23237395286560059 Inference time: 0.023332595825195312 Add cuts time: 0.0023446083068847656 Cut analysis time: 0.0005581378936767578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22586 (18), -0.22555 (18), -0.22527 (18), -0.22476 (18), -0.22116 (18), -0.22081 (18), -0.21998 (18), -0.21966 (18), -0.21949 (18), -0.21940 (18), -0.21889 (18), -0.21884 (18), -0.21874 (18), -0.21818 (18), -0.21814 (18), -0.21805 (18), -0.21773 (18), -0.21752 (18), -0.21714 (18), -0.21695 (18), 
Length of domains: 6958
Time: pickout 0.0492    decision 0.2193    set_bounds 0.5159    solve 0.9009    add 0.0323    
Accumulated time: pickout 0.1731    decision 1.2276    set_bounds 1.2269    solve 3.9154    add 1.1766    
Current (lb-rhs): -0.225860595703125
15229 domains visited
Cumulative time: 9.1693594455719

BaB round 12
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1307] [/input-8, 1886] [/input-8, 1886] [/input-8, 1886] [/input-8, 1555] [/input-8, 682] [/input-8, 1555] [/input-8, 1307] [/input-8, 1307] [/input-8, 682] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9314345121383667, worst -0.2208106517791748
10 lb beta sum: 1.9314345121383667, worst -0.22072649002075195
Time: prepare 0.3835    bound 0.5068    transfer 0.0258    finalize 0.0449    func 1.2032    
Accumulated time: func 5.3363    prepare 1.1379    bound 3.3295    transfer 0.1269    finalize 0.3899    
all_split False
======================Cut inference begins======================
max lb tensor(0.01900601) min lb tensor(-0.22068787)
Number of Verified Splits: 179 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.301311731338501 
BICCOS Cumulative time: 1.4001224040985107
Preprocessing time: 0.2614457607269287 Inference time: 0.0355532169342041 Add cuts time: 0.003704547882080078 Cut analysis time: 0.0006082057952880859
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22081 (18), -0.22069 (19), -0.21968 (19), -0.21911 (19), -0.21889 (18), -0.21878 (19), -0.21814 (18), -0.21805 (18), -0.21750 (19), -0.21727 (19), -0.21638 (19), -0.21541 (18), -0.21526 (19), -0.21445 (19), -0.21431 (19), -0.21398 (19), -0.21388 (19), -0.21372 (19), -0.21349 (19), -0.21307 (18), 
Length of domains: 10875
Time: pickout 0.0579    decision 0.4437    set_bounds 0.4145    solve 1.2047    add 0.0505    
Accumulated time: pickout 0.2310    decision 1.6714    set_bounds 1.6414    solve 5.1201    add 1.2270    
Current (lb-rhs): -0.22081172466278076
23242 domains visited
current_vram/total_varm: 11.1GB/99.9GB, batch_size increase to 8192
Cumulative time: 11.655140161514282

BaB round 13
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 532] [/input-8, 1307] [/input-8, 533] [/input-8, 1356] [/input-8, 1555] [/input-8, 1548] [/input-8, 1363] [/input-8, 682] [/input-8, 1548] [/input-8, 1363] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9285883903503418, worst -0.21749544143676758
10 lb beta sum: 1.9285883903503418, worst -0.2174828052520752
Time: prepare 0.7670    bound 0.9376    transfer 0.1146    finalize 0.3710    func 2.2971    
Accumulated time: func 7.6334    prepare 1.9051    bound 4.2671    transfer 0.2415    finalize 0.7609    
all_split False
======================Cut inference begins======================
max lb tensor(0.01933289) min lb tensor(-0.21746826)
Number of Verified Splits: 530 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 0.6539647579193115 
BICCOS Cumulative time: 2.0540871620178223
Preprocessing time: 0.5252819061279297 Inference time: 0.1177375316619873 Add cuts time: 0.010318517684936523 Cut analysis time: 0.0006268024444580078
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22069 (19), -0.21747 (20), -0.21638 (19), -0.21528 (19), -0.21526 (19), -0.21416 (20), -0.21398 (19), -0.21368 (20), -0.21345 (20), -0.21306 (19), -0.21300 (20), -0.21252 (19), -0.21187 (19), -0.21178 (20), -0.21175 (19), -0.21159 (19), -0.21152 (20), -0.21109 (20), -0.21106 (20), -0.21026 (20), 
Length of domains: 18537
Time: pickout 0.1146    decision 0.4787    set_bounds 0.9533    solve 2.3000    add 0.0872    
Accumulated time: pickout 0.3456    decision 2.1500    set_bounds 2.5947    solve 7.4201    add 1.3143    
Current (lb-rhs): -0.2206878662109375
39096 domains visited
current_vram/total_varm: 20.0GB/99.9GB, batch_size increase to 16384
Cumulative time: 16.268447637557983

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 532] [/input-8, 682] [/input-8, 533] [/input-8, 1307] [/input-8, 533] [/input-8, 533] [/input-8, 1355] [/input-8, 1355] [/input-8, 1564] [/input-8, 682] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9228448867797852, worst -0.2206876277923584
10 lb beta sum: 1.9228448867797852, worst -0.22065579891204834
Time: prepare 1.5267    bound 1.8011    transfer 0.1844    finalize 0.2152    func 3.9434    
Accumulated time: func 11.5768    prepare 3.4322    bound 6.0683    transfer 0.4259    finalize 0.9761    
all_split False
======================Cut inference begins======================
max lb tensor(0.01937199) min lb tensor(-0.22063017)
Number of Verified Splits: 1370 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 1.399496078491211 
BICCOS Cumulative time: 3.453583240509033
Preprocessing time: 1.0680482387542725 Inference time: 0.30392956733703613 Add cuts time: 0.02637624740600586 Cut analysis time: 0.0011420249938964844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22063 (20), -0.21507 (21), -0.21393 (20), -0.21168 (20), -0.21155 (20), -0.21153 (20), -0.21109 (20), -0.21108 (20), -0.21106 (20), -0.21103 (21), -0.21006 (20), -0.20989 (21), -0.20968 (20), -0.20908 (20), -0.20895 (21), -0.20893 (21), -0.20872 (20), -0.20861 (20), -0.20853 (20), -0.20797 (20), 
Length of domains: 33551
Time: pickout 0.2280    decision 1.9198    set_bounds 2.0607    solve 4.2726    add 0.1447    
Accumulated time: pickout 0.5736    decision 4.0699    set_bounds 4.6554    solve 11.6928    add 1.4590    
Current (lb-rhs): -0.22063016891479492
70494 domains visited
current_vram/total_varm: 29.1GB/99.9GB, batch_size increase to 32768
Cumulative time: 26.346276998519897

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1066] [/input-8, 1363] [/input-8, 1356] [/input-8, 1356] [/input-8, 1883] [/input-8, 666] [/input-8, 1564] [/input-8, 531] [/input-8, 531] [/input-8, 682] 
cut re-enabled after branching node selection
0 lb beta sum: 1.9138275384902954, worst -0.21767425537109375
10 lb beta sum: 1.9138275384902954, worst -0.21760714054107666
Time: prepare 3.0824    bound 8.7237    transfer 0.3677    finalize 0.4869    func 13.0822    
Accumulated time: func 24.6590    prepare 6.5151    bound 14.7920    transfer 0.7935    finalize 1.4630    
all_split False
======================Cut inference begins======================
max lb tensor(0.01976800) min lb tensor(-0.21756518)
Number of Verified Splits: 3498 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 3.6560723781585693 
BICCOS Cumulative time: 7.1096556186676025
Preprocessing time: 2.8216757774353027 Inference time: 0.7742931842803955 Add cuts time: 0.059372901916503906 Cut analysis time: 0.0007305145263671875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21757 (21), -0.21134 (21), -0.20987 (22), -0.20969 (22), -0.20916 (21), -0.20849 (21), -0.20821 (21), -0.20798 (21), -0.20753 (22), -0.20750 (21), -0.20696 (22), -0.20674 (21), -0.20665 (21), -0.20606 (22), -0.20575 (21), -0.20548 (21), -0.20537 (22), -0.20507 (21), -0.20484 (21), -0.20422 (22), 
Length of domains: 62821
Time: pickout 0.4498    decision 3.7262    set_bounds 4.2545    solve 13.0964    add 0.4472    
Accumulated time: pickout 1.0234    decision 7.7960    set_bounds 8.9099    solve 24.7891    add 1.9062    
Current (lb-rhs): -0.21756517887115479
132532 domains visited
Cumulative time: 52.11553907394409

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1307] [/input-8, 533] [/input-8, 533] [/input-8, 1307] [/input-8, 531] [/input-8, 1356] [/input-8, 533] [/input-8, 533] [/input-8, 1886] [/input-8, 532] 
cut re-enabled after branching node selection
0 lb beta sum: 1.907102108001709, worst -0.21226978302001953
10 lb beta sum: 1.907102108001709, worst -0.2121896743774414
Time: prepare 3.1275    bound 8.7203    transfer 0.3791    finalize 0.4832    func 13.1407    
Accumulated time: func 37.7997    prepare 9.6430    bound 23.5123    transfer 1.1726    finalize 1.9462    
all_split False
======================Cut inference begins======================
max lb tensor(0.02040076) min lb tensor(-0.21216393)
Number of Verified Splits: 3528 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 4.010150909423828 
BICCOS Cumulative time: 11.11980652809143
Preprocessing time: 2.238222599029541 Inference time: 1.7066543102264404 Add cuts time: 0.06457400321960449 Cut analysis time: 0.0006999969482421875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21216 (22), -0.20943 (22), -0.20750 (21), -0.20696 (22), -0.20665 (21), -0.20643 (23), -0.20606 (22), -0.20571 (22), -0.20547 (23), -0.20537 (22), -0.20408 (23), -0.20375 (22), -0.20375 (22), -0.20330 (22), -0.20319 (22), -0.20291 (22), -0.20278 (22), -0.20260 (22), -0.20204 (21), -0.20190 (21), 
Length of domains: 92061
Time: pickout 0.4845    decision 3.5220    set_bounds 4.5512    solve 13.1546    add 0.3000    
Accumulated time: pickout 1.5079    decision 11.3181    set_bounds 13.4611    solve 37.9437    add 2.2061    
Current (lb-rhs): -0.21216392517089844
194540 domains visited
Cumulative time: 78.29364562034607

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1886] [/input-8, 1066] [/input-8, 682] [/input-8, 682] [/input-8, 1564] [/input-8, 1548] [/input-8, 531] [/input-8, 1356] [/input-8, 533] [/input-8, 533] 
cut re-enabled after branching node selection
0 lb beta sum: 1.8984887599945068, worst -0.20665454864501953
10 lb beta sum: 1.8984887599945068, worst -0.20662963390350342
Time: prepare 3.0822    bound 8.7221    transfer 0.3771    finalize 1.4109    func 14.0300    
Accumulated time: func 51.8297    prepare 12.7256    bound 32.2344    transfer 1.5498    finalize 3.3570    
all_split False
======================Cut inference begins======================
max lb tensor(0.01893067) min lb tensor(-0.20658338)
Number of Verified Splits: 3908 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 4.276005983352661 
BICCOS Cumulative time: 15.395812511444092
Preprocessing time: 2.224930763244629 Inference time: 1.905815601348877 Add cuts time: 0.14455580711364746 Cut analysis time: 0.0007038116455078125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21216 (22), -0.20943 (22), -0.20658 (22), -0.20643 (23), -0.20571 (22), -0.20547 (23), -0.20408 (23), -0.20375 (22), -0.20319 (22), -0.20291 (22), -0.20278 (22), -0.20277 (22), -0.20260 (23), -0.20260 (22), -0.20226 (23), -0.20193 (22), -0.20188 (22), -0.20170 (22), -0.20139 (23), -0.20102 (22), 
Length of domains: 120921
Time: pickout 0.4831    decision 3.4379    set_bounds 4.2116    solve 14.0383    add 0.2420    
Accumulated time: pickout 1.9909    decision 14.7560    set_bounds 17.6728    solve 51.9821    add 2.4481    
Current (lb-rhs): -0.21216392517089844
256168 domains visited
Cumulative time: 105.08830142021179

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 523] [/input-8, 1558] [/input-8, 1555] [/input-8, 532] [/input-8, 1878] [/input-8, 1307] [/input-8, 1558] [/input-8, 1355] [/input-8, 682] [/input-8, 1373] 
cut re-enabled after branching node selection
0 lb beta sum: 1.8993902206420898, worst -0.20801830291748047
10 lb beta sum: 1.8993902206420898, worst -0.2079622745513916
Time: prepare 3.1208    bound 8.7202    transfer 0.3759    finalize 0.5084    func 13.1591    
Accumulated time: func 64.9888    prepare 15.8468    bound 40.9545    transfer 1.9257    finalize 3.8655    
all_split False
======================Cut inference begins======================
max lb tensor(0.01904893) min lb tensor(-0.20794296)
Number of Verified Splits: 3265 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 4.466393232345581 
BICCOS Cumulative time: 19.862205743789673
Preprocessing time: 3.5746123790740967 Inference time: 0.8343422412872314 Add cuts time: 0.05659890174865723 Cut analysis time: 0.0008397102355957031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20794 (23), -0.20658 (22), -0.20642 (24), -0.20547 (23), -0.20507 (23), -0.20407 (24), -0.20277 (22), -0.20260 (23), -0.20226 (23), -0.20193 (22), -0.20188 (22), -0.20143 (23), -0.20139 (23), -0.20102 (22), -0.20076 (24), -0.20047 (22), -0.20024 (24), -0.20003 (23), -0.19986 (22), -0.19972 (22), 
Length of domains: 150424
Time: pickout 0.4889    decision 3.4133    set_bounds 4.5753    solve 13.1731    add 0.2560    
Accumulated time: pickout 2.4799    decision 18.1693    set_bounds 22.2480    solve 65.1552    add 2.7041    
Current (lb-rhs): -0.20794296264648438
318439 domains visited
Cumulative time: 131.6057424545288

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1555] [/input-8, 532] [/input-8, 682] [/input-8, 1354] [/input-8, 532] [/input-8, 1301] [/input-8, 1354] [/input-8, 1878] [/input-8, 1564] [/input-8, 682] 
cut re-enabled after branching node selection
0 lb beta sum: 1.8955141305923462, worst -0.20325589179992676
10 lb beta sum: 1.8955141305923462, worst -0.20321667194366455
Time: prepare 3.1396    bound 8.7213    transfer 0.3776    finalize 0.5177    func 13.1958    
Accumulated time: func 78.1846    prepare 18.9869    bound 49.6758    transfer 2.3033    finalize 4.3832    
all_split False
======================Cut inference begins======================
max lb tensor(0.01902616) min lb tensor(-0.20320320)
Number of Verified Splits: 3493 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 4.791122198104858 
BICCOS Cumulative time: 24.65332794189453
Preprocessing time: 3.807767152786255 Inference time: 0.8425538539886475 Add cuts time: 0.14003252983093262 Cut analysis time: 0.0007686614990234375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20794 (23), -0.20642 (24), -0.20507 (23), -0.20407 (24), -0.20320 (24), -0.20313 (23), -0.20277 (22), -0.20260 (23), -0.20226 (23), -0.20188 (22), -0.20143 (23), -0.20139 (23), -0.20076 (24), -0.20024 (24), -0.20003 (23), -0.19920 (22), -0.19906 (23), -0.19897 (23), -0.19896 (24), -0.19893 (23), 
Length of domains: 179699
Time: pickout 0.5104    decision 3.4455    set_bounds 4.8976    solve 13.2102    add 0.3670    
Accumulated time: pickout 2.9903    decision 21.6148    set_bounds 27.1456    solve 78.3654    add 3.0712    
Current (lb-rhs): -0.20794296264648438
380482 domains visited
Cumulative time: 158.96112942695618

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 531] [/input-8, 1355] [/input-8, 1883] [/input-8, 1564] [/input-8, 1886] [/input-8, 531] [/input-8, 1354] [/input-8, 1355] [/input-8, 681] [/input-8, 1355] 
cut re-enabled after branching node selection
0 lb beta sum: 1.8893980979919434, worst -0.20225930213928223
10 lb beta sum: 1.8893980979919434, worst -0.20230865478515625
Time: prepare 3.1751    bound 8.7209    transfer 0.3709    finalize 0.5382    func 13.2486    
Accumulated time: func 91.4332    prepare 22.1625    bound 58.3967    transfer 2.6742    finalize 4.9214    
all_split False
======================Cut inference begins======================
max lb tensor(0.02037787) min lb tensor(-0.20212722)
Number of Verified Splits: 3627 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 5.235634088516235 
BICCOS Cumulative time: 29.888962030410767
Preprocessing time: 2.4003307819366455 Inference time: 2.654008150100708 Add cuts time: 0.18045878410339355 Cut analysis time: 0.0008363723754882812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20794 (23), -0.20642 (24), -0.20507 (23), -0.20407 (24), -0.20320 (24), -0.20313 (23), -0.20213 (24), -0.20143 (23), -0.20139 (23), -0.20076 (24), -0.20027 (24), -0.20024 (24), -0.19992 (24), -0.19906 (23), -0.19896 (24), -0.19895 (23), -0.19893 (23), -0.19874 (23), -0.19855 (23), -0.19850 (23), 
Length of domains: 208840
Time: pickout 0.5013    decision 3.4249    set_bounds 5.1894    solve 13.2622    add 0.2363    
Accumulated time: pickout 3.4916    decision 25.0397    set_bounds 32.3350    solve 91.6276    add 3.3075    
Current (lb-rhs): -0.20794296264648438
442391 domains visited
Cumulative time: 186.96982288360596

BaB round 21
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 523] [/input-8, 531] [/input-8, 1355] [/input-8, 1354] [/input-8, 1355] [/input-8, 1564] [/input-8, 1307] [/input-8, 1886] [/input-8, 1558] [/input-8, 523] 
cut re-enabled after branching node selection
0 lb beta sum: 1.8871150016784668, worst -0.19943475723266602
10 lb beta sum: 1.8871150016784668, worst -0.19940614700317383
Time: prepare 3.1358    bound 8.7361    transfer 0.3719    finalize 2.3556    func 15.0337    
Accumulated time: func 106.4670    prepare 25.2989    bound 67.1328    transfer 3.0461    finalize 7.2769    
all_split False
======================Cut inference begins======================
max lb tensor(0.01966548) min lb tensor(-0.19933748)
Number of Verified Splits: 3365 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 17
#cuts >= 20: 0
BICCOS time: 4.18514347076416 
BICCOS Cumulative time: 34.07410550117493
Preprocessing time: 3.041074752807617 Inference time: 0.9801304340362549 Add cuts time: 0.16221141815185547 Cut analysis time: 0.0017268657684326172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.20794 (23), -0.20642 (24), -0.20507 (23), -0.20407 (24), -0.20320 (24), -0.20313 (23), -0.20213 (24), -0.20143 (23), -0.20076 (24), -0.20027 (24), -0.20024 (24), -0.19992 (24), -0.19934 (24), -0.19906 (23), -0.19896 (24), -0.19895 (23), -0.19893 (23), -0.19874 (23), -0.19855 (23), -0.19850 (23), 
Length of domains: 238243
Time: pickout 0.5131    decision 3.4290    set_bounds 3.6310    solve 15.0457    add 0.2829    
Accumulated time: pickout 4.0047    decision 28.4687    set_bounds 35.9660    solve 106.6733    add 3.5904    
Current (lb-rhs): -0.20794296264648438
504562 domains visited
Time out!!!!!!!!
Result: unknown in 219.9094 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 184, vnnlib ID: 184 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.89069843,  -6.00872993,  -9.81441784,  -9.48617077,  -8.76289272,
         -10.92080116, -10.39973545,  -9.59434032,  -4.95132399,  -4.38216209]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [578]; unstable size 578; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 156, 1, 578] with unstable size 155 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 23, 1, 578] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 578] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [155]; unstable size 155; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 23, 1, 155] with unstable size 22 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 155] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [22]; unstable size 22; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 22] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.10633993,  0.71801603,  3.55015516,  3.86298275,  2.74121571,
          5.07143879,  4.74717569,  3.53826094, -1.04089308]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -5.89069843,  -6.00872993,  -9.81441784,  -9.48617077,  -8.76289272,
         -10.92080116, -10.39973545,  -9.59434032,  -4.95132399,  -4.38216209]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -6.24040604,  -6.51685905,  -9.96843529,  -9.76380062,  -9.11704445,
          -11.15218353, -10.71066093, -10.13462257,  -4.86371136,  -4.98990440]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.12619305]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0088 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0825 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 185, vnnlib ID: 185 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-8.37633038, -6.56312561, -6.81894398, -6.27486277, -5.78229427,
         -6.83015299, -6.31567955, -6.65800142, -9.07024956, -5.04341173]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [539]; unstable size 539; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 221, 1, 539] with unstable size 220 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 20, 1, 539] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 539] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [220]; unstable size 220; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 20, 1, 220] with unstable size 19 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 220] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [19]; unstable size 19; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 19] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.97405243,  0.32927668,  0.17750072, -0.10494566, -0.85372591,
          0.32606602, -0.43116236, -0.31671762,  2.66897011]], device='cuda:0') None
Remain 4 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-8.37633038, -6.56312561, -6.81894398, -6.27486277, -5.78229427,
         -6.83015299, -6.31567955, -6.65800142, -9.07024956, -5.04341173]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-8.12968159, -6.54487228, -6.24013519, -5.73320532, -5.06740761,
          -6.21982479, -5.72114992, -6.02204561, -8.81664181, -5.19222641],
         [-8.12968159, -6.54487228, -6.24013519, -5.73320532, -5.06740761,
          -6.21982479, -5.72114992, -6.02204561, -8.81664181, -5.19222641]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.54097891, -0.12481880,  0.52892351,  0.82981920]]],
       device='cuda:0')
number of violation:  1
Attack finished in 0.0059 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0791 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 186, vnnlib ID: 186 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.47806835, -16.40879250, -15.09305000, -16.23484230, -16.50166130,
         -18.09269333, -17.71716118, -17.61732292,  -9.91329861, -15.71094036]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [596]; unstable size 596; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 185, 1, 596] with unstable size 184 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 22, 1, 596] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 596] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [184]; unstable size 184; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 22, 1, 184] with unstable size 21 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 184] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [21]; unstable size 21; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 21] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[1.06263518, 4.58382607, 3.51261377, 4.72654247, 4.75524044, 6.32470655,
         6.04849148, 5.57820749, 4.16677809]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0622 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 187, vnnlib ID: 187 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.08897448, -10.08986378,  -7.39640045,  -7.25407028,  -6.58082294,
          -7.96594858,  -7.83635616,  -8.88062477,  -5.43441010,  -7.92518377]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [737]; unstable size 737; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 236, 1, 737] with unstable size 235 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 737] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 737] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [235]; unstable size 235; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 235] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 235] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.51290500,  2.97313166,  0.25002098,  0.22753614, -0.42947221,
          0.68455666,  0.85951889,  1.57969737,  0.97213078]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -6.08897448, -10.08986378,  -7.39640045,  -7.25407028,  -6.58082294,
          -7.96594858,  -7.83635616,  -8.88062477,  -5.43441010,  -7.92518377]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.39it/s]100%|██████████| 1/1 [00:00<00:00,  8.39it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.76056576, -9.90643501, -7.24392986, -7.12848854, -6.38653946,
          -7.83770800, -7.66693401, -8.70800304, -5.73674393, -7.76976919],
         [-5.76056576, -9.90643501, -7.24392986, -7.12848854, -6.38653946,
          -7.83770800, -7.66693401, -8.70800304, -5.73674393, -7.76976919]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.02382183, 0.64979553]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1221 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 7.152822971343994
alpha/beta optimization time: 1.2815442085266113
initial alpha-crown bounds: tensor([[-0.46917999,  3.03084230,  0.32193327,  0.28774738, -0.37226701,
          0.75499451,  0.91308272,  1.66521275,  1.02045727]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 2 ; Worst class: (+ rhs) -0.46917998790740967
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.52799701690674
Verifying property 0 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[-1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.46917999]], device='cuda:0') need to verify.
Model prediction is: tensor([ -6.08897448, -10.08986378,  -7.39640045,  -7.25407028,  -6.58082294,
         -7.96594858,  -7.83635616,  -8.88062477,  -5.43441010,  -7.92518377],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.46917999]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 737
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 228
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 983
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0002186298370361328
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.46917611360549927
10 lb beta sum: 0.0, worst -0.46918028593063354
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0549    transfer 0.0001    finalize 0.0001    func 0.0554    
Accumulated time: func 0.0554    prepare 0.0002    bound 0.0549    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] 
split level 1: [/input-12, 58] 
split level 2: [/input-12, 10] 
split level 3: [/input-12, 1] 
split level 4: [/input-12, 92] 
split level 5: [/input-8, 1956] 
split level 6: [/input-8, 884] 
split level 7: [/input-12, 36] 
split level 8: [/input-8, 539] 
split level 9: [/input-8, 1884] 
split level 10: [/input-8, 875] 
split level 11: [/input-8, 1892] 
split level 12: [/input-8, 1052] 
split level 13: [/input-12, 61] 
split level 14: [/input, 3512] 
split level 15: [/input-12, 55] 
split level 16: [/input-8, 508] 
split level 17: [/input-8, 1881] 
split level 18: [/input-8, 684] 
split level 19: [/input-8, 538] 
split level 20: [/input, 2521] 
split level 21: [/input-8, 92] 
split level 22: [/input-8, 867] 
split level 23: [/input-12, 45] 
split level 24: [/input, 3513] 
split level 25: [/input-8, 556] 
split level 26: [/input-8, 1061] 
split level 27: [/input-8, 499] 
split level 28: [/input-8, 1876] 
split level 29: [/input, 2232] 
split level 30: [/input-8, 659] 
split level 31: [/input-8, 1900] 
split level 32: [/input-8, 1910] 
split level 33: [/input-8, 100] 
split level 34: [/input-8, 84] 
split level 35: [/input, 1463] 
split level 36: [/input-8, 988] 
split level 37: [/input-12, 37] 
split level 38: [/input-8, 1116] 
split level 39: [/input, 3529] 
split level 40: [/input-8, 1888] 
split level 41: [/input, 2248] 
split level 42: [/input-8, 1460] 
split level 43: [/input-8, 1049] 
split level 44: [/input-8, 90] 
split level 45: [/input-8, 996] 
split level 46: [/input, 2264] 
split level 47: [/input, 1497] 
split level 48: [/input-8, 1425] 
split level 49: [/input-8, 1909] 
split level 50: [/input-8, 1298] 
split level 51: [/input-8, 541] 
split level 52: [/input-8, 667] 
split level 53: [/input, 3272] 
split level 54: [/input-8, 1003] 
split level 55: [/input-8, 93] 
split level 56: [/input, 2494] 
split level 57: [/input-8, 1893] 
split level 58: [/input-8, 1866] 
split level 59: [/input, 2472] 
split level 60: [/input-8, 507] 
split level 61: [/input-8, 319] 
split level 62: [/input, 174] 
split level 63: [/input-8, 1361] 
split level 64: [/input, 1466] 
split level 65: [/input-8, 1107] 
split level 66: [/input, 3165] 
split level 67: [/input, 1482] 
split level 68: [/input-8, 1098] 
split level 69: [/input-8, 1369] 
split level 70: [/input-8, 642] 
split level 71: [/input, 2506] 
split level 72: [/input-8, 500] 
split level 73: [/input, 365] 
split level 74: [/input-8, 510] 
split level 75: [/input, 1736] 
split level 76: [/input-8, 1259] 
split level 77: [/input-8, 944] 
split level 78: [/input, 3274] 
split level 79: [/input, 395] 
split level 80: [/input-8, 1041] 
split level 81: [/input-8, 492] 
split level 82: [/input-8, 1353] 
split level 83: [/input, 3018] 
split level 84: [/input-8, 1583] 
split level 85: [/input, 3254] 
split level 86: [/input-8, 1249] 
split level 87: [/input, 3257] 
split level 88: [/input, 2433] 
split level 89: [/input, 3287] 
split level 90: [/input, 3258] 
split level 91: [/input, 2473] 
split level 92: [/input-8, 1867] 
split level 93: [/input-8, 1106] 
split level 94: [/input-8, 1908] 
split level 95: [/input-8, 1293] 
split level 96: [/input-8, 1941] 
split level 97: [/input, 103] 
split level 98: [/input, 3306] 
split level 99: [/input, 3271] 
split level 100: [/input, 2449] 
split level 101: [/input-8, 1461] 
split level 102: [/input-8, 2021] 
split level 103: [/input-12, 72] 
split level 104: [/input, 1717] 
split level 105: [/input-8, 1373] 
split level 106: [/input-8, 694] 
split level 107: [/input, 3278] 
split level 108: [/input-8, 1305] 
split level 109: [/input, 2470] 
split level 110: [/input, 2446] 
split level 111: [/input, 3215] 
split level 112: [/input, 2524] 
split level 113: [/input, 426] 
split level 114: [/input, 2474] 
split level 115: [/input, 2455] 
split level 116: [/input, 3289] 
split level 117: [/input, 2386] 
split level 118: [/input, 3229] 
split level 119: [/input, 1703] 
split level 120: [/input, 3277] 
split level 121: [/input-8, 801] 
split level 122: [/input, 3182] 
split level 123: [/input, 3998] 
split level 124: [/input, 3305] 
split level 125: [/input, 3186] 
split level 126: [/input, 2936] 
split level 127: [/input, 3290] 
split level 128: [/input, 3246] 
split level 129: [/input, 1357] 
split level 130: [/input, 2515] 
split level 131: [/input-8, 1767] 
split level 132: [/input, 3170] 
split level 133: [/input-8, 1887] 
split level 134: [/input, 3245] 
split level 135: [/input, 2510] 
split level 136: [/input, 3269] 
split level 137: [/input, 3688] 
split level 138: [/input, 104] 
split level 139: [/input, 1563] 
split level 140: [/input, 3672] 
split level 141: [/input, 91] 
split level 142: [/input, 366] 
split level 143: [/input-8, 1534] 
split level 144: [/input, 3299] 
split level 145: [/input, 2398] 
split level 146: [/input, 2397] 
split level 147: [/input-8, 394] 
split level 148: [/input-8, 1377] 
split level 149: [/input-8, 1001] 
split level 150: [/input-8, 1430] 
split level 151: [/input, 2076] 
split level 152: [/input, 2251] 
split level 153: [/input, 2413] 
split level 154: [/input, 1576] 
split level 155: [/input, 2463] 
split level 156: [/input, 2540] 
split level 157: [/input-8, 1803] 
split level 158: [/input, 3260] 
split level 159: [/input, 2478] 
split level 160: [/input, 1579] 
split level 161: [/input-8, 1121] 
split level 162: [/input-8, 1047] 
split level 163: [/input, 3054] 
split level 164: [/input, 3532] 
split level 165: [/input, 3786] 
split level 166: [/input, 2092] 
split level 167: [/input, 2696] 
split level 168: [/input, 1618] 
split level 169: [/input, 3202] 
split level 170: [/input-8, 1424] 
split level 171: [/input-8, 648] 
split level 172: [/input, 3915] 
split level 173: [/input, 394] 
split level 174: [/input, 1733] 
split level 175: [/input-8, 1422] 
split level 176: [/input, 3250] 
split level 177: [/input, 407] 
split level 178: [/input-8, 649] 
split level 179: [/input-8, 980] 
split level 180: [/input, 2401] 
split level 181: [/input, 1650] 
split level 182: [/input, 3153] 
split level 183: [/input, 3977] 
split level 184: [/input, 3195] 
split level 185: [/input, 1594] 
split level 186: [/input, 1560] 
split level 187: [/input, 3834] 
split level 188: [/input, 3475] 
split level 189: [/input, 3052] 
split level 190: [/input, 1558] 
split level 191: [/input, 1569] 
split level 192: [/input, 1438] 
split level 193: [/input, 3974] 
split level 194: [/input, 3833] 
split level 195: [/input, 2412] 
split level 196: [/input, 3917] 
split level 197: [/input, 392] 
split level 198: [/input, 3832] 
split level 199: [/input, 1592] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4691305160522461
10 lb beta sum: 0.0, worst -0.4691348671913147
Time: prepare 0.0115    bound 0.1037    transfer 0.0019    finalize 0.0032    func 0.1229    
Accumulated time: func 0.1783    prepare 0.0220    bound 0.1586    transfer 0.0020    finalize 0.0033    
all_split False
======================Cut inference begins======================
max lb tensor(0.20137453) min lb tensor(-0.46912962)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010764360427856445 
BICCOS Cumulative time: 0.010764360427856445
Preprocessing time: 0.01000523567199707 Inference time: 0.00014472007751464844 Add cuts time: 6.67572021484375e-05 Cut analysis time: 0.0005476474761962891
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.45634 (1), -0.45630 (1), -0.45597 (1), -0.45538 (1), -0.45497 (1), -0.45487 (1), -0.45482 (1), -0.45451 (1), -0.45408 (1), -0.45407 (1), -0.45389 (1), -0.45371 (1), -0.45326 (1), -0.45284 (1), -0.45103 (1), -0.44987 (1), -0.44986 (1), -0.44821 (1), -0.44821 (1), -0.44776 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5416    set_bounds 0.0091    solve 0.1230    add 0.1960    
Accumulated time: pickout 0.0004    decision 0.5416    set_bounds 0.0091    solve 0.1230    add 0.1960    
Current (lb-rhs): -0.4563367962837219
50 domains visited
Cumulative time: 0.9620530605316162

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 10] [/input-12, 60] 
split level 1: [/input-12, 1] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 92] [/input-12, 10] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 92] 
split level 3: [/input-8, 100] [/input-8, 556] [/input-8, 1956] [/input-8, 1003] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-8, 1881] [/input-12, 1] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.4495866298675537
10 lb beta sum: 0.5860037207603455, worst -0.44274717569351196
Time: prepare 0.0076    bound 0.1236    transfer 0.0013    finalize 0.0026    func 0.1377    
Accumulated time: func 0.3160    prepare 0.0299    bound 0.2822    transfer 0.0032    finalize 0.0059    
all_split False
======================Cut inference begins======================
max lb tensor(0.30993634) min lb tensor(-0.44269666)
Number of Verified Splits: 19 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.013556241989135742 
BICCOS Cumulative time: 0.024320602416992188
Preprocessing time: 0.01208949089050293 Inference time: 0.0007951259613037109 Add cuts time: 0.00032782554626464844 Cut analysis time: 0.0003437995910644531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.10252 (2), -0.10247 (2), -0.10241 (2), -0.10161 (2), -0.10134 (2), -0.10073 (2), -0.10035 (2), -0.10011 (2), -0.10000 (2), -0.09994 (2), -0.09977 (2), -0.09953 (2), -0.09698 (2), -0.09373 (2), -0.09236 (2), -0.09190 (2), -0.09110 (2), -0.09099 (2), -0.09088 (2), -0.09077 (2), 
Length of domains: 50
Time: pickout 0.0084    decision 0.0265    set_bounds 0.0119    solve 0.1377    add 0.2054    
Accumulated time: pickout 0.0088    decision 0.5681    set_bounds 0.0210    solve 0.2607    add 0.4014    
Current (lb-rhs): -0.10252207517623901
100 domains visited
Cumulative time: 1.372596263885498

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 60] [/input-12, 60] [/input-12, 1] [/input-12, 1] [/input-12, 60] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 60] [/input-12, 60] 
split level 1: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 61] [/input-8, 1956] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 3: [/input-8, 556] [/input-8, 556] [/input-8, 1003] [/input-12, 61] [/input-8, 556] [/input-8, 1900] [/input-8, 556] [/input-8, 556] [/input-8, 556] [/input-8, 556] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10245609283447266
10 lb beta sum: 0.9573817253112793, worst -0.07341183722019196
Time: prepare 0.0079    bound 0.1397    transfer 0.0016    finalize 0.0025    func 0.1542    
Accumulated time: func 0.4702    prepare 0.0381    bound 0.4218    transfer 0.0048    finalize 0.0084    
all_split False
======================Cut inference begins======================
max lb tensor(0.50508833) min lb tensor(-0.06730860)
Number of Verified Splits: 381 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 8
#cuts >= 20: 0
BICCOS time: 0.03701066970825195 
BICCOS Cumulative time: 0.06133127212524414
Preprocessing time: 0.011972188949584961 Inference time: 0.015601634979248047 Add cuts time: 0.009096384048461914 Cut analysis time: 0.00034046173095703125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06646 (3), -0.06646 (3), -0.06572 (3), -0.06571 (3), -0.05541 (3), -0.05527 (3), -0.04881 (3), -0.04314 (3), -0.03956 (3), -0.03896 (3), 
Length of domains: 10
Time: pickout 0.0084    decision 0.0207    set_bounds 0.0155    solve 0.1543    add 0.2131    
Accumulated time: pickout 0.0172    decision 0.5888    set_bounds 0.0365    solve 0.4150    add 0.6145    
Current (lb-rhs): -0.0664626955986023
110 domains visited
Cumulative time: 1.828920602798462

Shallow-BaB round 4
batch: 10
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 10] [/input-12, 1] [/input-12, 10] 
split level 2: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 3: [/input-8, 884] [/input-8, 884] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] 
split level 4: [/input-8, 1052] [/input-8, 1052] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 1052] [/input-8, 1052] [/input-8, 1052] [/input-8, 1052] 
split level 5: [/input-8, 875] [/input-8, 875] [/input-8, 1052] [/input-8, 1052] [/input-8, 1892] [/input-8, 1052] [/input-8, 875] [/input-8, 875] [/input-8, 875] [/input-8, 875] 
split level 6: [/input-8, 1892] [/input-8, 1892] [/input-8, 875] [/input-8, 875] [/input-8, 1052] [/input-8, 875] [/input-8, 1892] [/input-8, 1892] [/input-8, 1892] [/input-8, 1892] 
split level 7: [/input-12, 61] [/input-12, 61] [/input-8, 1892] [/input-12, 55] [/input-8, 875] [/input-8, 1892] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
split level 8: [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 61] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-12, 55] 
split level 9: [/input-8, 1881] [/input-8, 1881] [/input-8, 1881] [/input-8, 1892] [/input-12, 61] [/input-8, 1881] [/input-8, 1881] [/input-8, 1881] [/input-8, 1881] [/input-8, 1881] 
split level 10: [/input-8, 1061] [/input-8, 1061] [/input-8, 538] [/input-8, 1881] [/input-8, 1881] [/input-8, 538] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] 
split level 11: [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] [/input-8, 538] [/input-8, 538] [/input-8, 1900] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 538] 
split level 12: [/input-8, 538] [/input-8, 538] [/input-8, 1061] [/input-8, 867] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] [/input-8, 1061] 
split level 13: [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input, 1463] [/input-8, 867] [/input, 1463] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 867] 
split level 14: [/input, 1463] [/input, 1463] [/input-8, 1460] [/input-8, 1061] [/input, 1463] [/input-8, 867] [/input, 1463] [/input, 1463] [/input, 1463] [/input, 1463] 
split level 15: [/input-8, 1460] [/input-8, 1460] [/input-12, 37] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] [/input-8, 1460] 
split level 16: [/input-8, 100] [/input-8, 100] [/input-8, 100] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
split level 17: [/input-12, 37] [/input-12, 37] [/input-8, 1909] [/input-8, 100] [/input-8, 100] [/input, 3529] [/input, 3529] [/input-8, 100] [/input, 3529] [/input-8, 100] 
split level 18: [/input, 3529] [/input, 3529] [/input-8, 1003] [/input, 3529] [/input, 3529] [/input-8, 100] [/input-8, 100] [/input, 3529] [/input-8, 100] [/input, 3529] 
split level 19: [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] [/input-8, 1941] 
cut re-enabled after branching node selection
0 lb beta sum: 1.0788079500198364, worst -0.2880054712295532
10 lb beta sum: 1.3399642705917358, worst -0.03686642646789551
Time: prepare 0.0189    bound 0.1260    transfer 0.0030    finalize 0.0025    func 0.1536    
Accumulated time: func 0.6238    prepare 0.0580    bound 0.5479    transfer 0.0078    finalize 0.0110    
all_split False
======================Cut inference begins======================
max lb tensor(0.52903354) min lb tensor(-0.03303590)
Number of Verified Splits: 98 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 8
#cuts 4-6: 8
#cuts >= 20: 0
BICCOS time: 0.019260883331298828 
BICCOS Cumulative time: 0.08059215545654297
Preprocessing time: 0.011895418167114258 Inference time: 0.00413823127746582 Add cuts time: 0.002646923065185547 Cut analysis time: 0.0005803108215332031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01300 (4), -0.01299 (4), -0.01299 (4), -0.01298 (4), -0.01298 (4), -0.01259 (4), -0.01245 (4), -0.01237 (4), -0.01233 (4), -0.01204 (4), -0.01193 (4), -0.01169 (4), -0.01169 (4), -0.01162 (4), -0.01109 (4), -0.01097 (4), -0.01087 (4), -0.01067 (4), -0.01004 (4), -0.01003 (4), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0652    set_bounds 0.0156    solve 0.1537    add 0.2182    
Accumulated time: pickout 0.0182    decision 0.6540    set_bounds 0.0521    solve 0.5688    add 0.8328    
Current (lb-rhs): -0.013004034757614136
160 domains visited
Cumulative time: 2.3087594509124756

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 58] [/input-12, 58] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 1: [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 1] [/input-12, 1] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] 
split level 2: [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 10] [/input-12, 10] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] 
split level 3: [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 92] [/input-12, 92] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0747995376586914
10 lb beta sum: 0.8150579929351807, worst -0.026093631982803345
Time: prepare 0.0084    bound 0.1447    transfer 0.0015    finalize 0.0031    func 0.4352    
Accumulated time: func 1.0590    prepare 0.0666    bound 0.6926    transfer 0.0093    finalize 0.0141    
all_split False
======================Cut inference begins======================
max lb tensor(0.10634565) min lb tensor(-0.00696260)
Number of Verified Splits: 307 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.03846096992492676 
BICCOS Cumulative time: 0.11905312538146973
Preprocessing time: 0.012732505798339844 Inference time: 0.014464855194091797 Add cuts time: 0.010728597640991211 Cut analysis time: 0.0005350112915039062
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0080    decision 0.0215    set_bounds 0.0159    solve 0.4353    add 0.0317    
Accumulated time: pickout 0.0262    decision 0.6755    set_bounds 0.0680    solve 1.0041    add 0.8645    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
160 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.31078037e-10, 1.87720526e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 10]), tensor([-1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.31078037e-10, 3.48186851e-01, 1.16624221e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([60,  1, 10]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([1.31078037e-10, 3.48186851e-01, 5.91176897e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, -1.0, -1.0], [0, 0, 0], [0.10593883693218231, 0.046067968010902405, 0.04358057677745819], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([ 1., -1.]), tensor([0, 0]), tensor([2.66658251e-10, 9.38104279e-03]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, -1.0, -1.0], [0, 0, 0], [0.10593883693218231, 0.046067968010902405, 0.04358057677745819], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([1., 1.]), tensor([0, 0]), tensor([2.66658251e-10, 5.07318527e-02]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, -1.0, 1.0], [0, 0, 0], [0.10593883693218231, 0.046067968010902405, 0.04552315175533295], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([ 1., -1.]), tensor([0, 0]), tensor([2.66658251e-10, 8.40787776e-03]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, -1.0, 1.0], [0, 0, 0], [0.10593883693218231, 0.046067968010902405, 0.04552315175533295], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([1., 1.]), tensor([0, 0]), tensor([2.66658251e-10, 5.16798645e-02]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, 1.0, -1.0], [0, 0, 0], [0.10593883693218231, 0.0525277704000473, 0.04564346373081207], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([ 1., -1.]), tensor([0, 0]), tensor([2.66658251e-10, 8.48181732e-03]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, 1.0, -1.0], [0, 0, 0], [0.10593883693218231, 0.0525277704000473, 0.04564346373081207], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([1., 1.]), tensor([0, 0]), tensor([2.66658251e-10, 4.80575711e-02]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, 1.0, 1.0], [0, 0, 0], [0.10593883693218231, 0.0525277704000473, 0.047187015414237976], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([ 1., -1.]), tensor([0, 0]), tensor([2.66658251e-10, 9.40306671e-03]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1956, 1900, 1881], [-1.0, 1.0, 1.0], [0, 0, 0], [0.10593883693218231, 0.0525277704000473, 0.047187015414237976], [1, 2, 3]), '/input-12': (tensor([60,  1]), tensor([1., 1.]), tensor([0, 0]), tensor([2.66658251e-10, 4.93328422e-02]), tensor([0, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([1956]), tensor([1.]), tensor([0]), tensor([0.01085203]), tensor([1])), '/input-12': ([60], [1.0], [0], [2.6665825103577845e-10], [0])}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.39962077140808105
10 lb beta sum: 1.3558812141418457, worst -0.3787882924079895
Time: prepare 0.0007    bound 0.1406    transfer 0.0002    finalize 0.0002    func 0.1419    
Accumulated time: func 1.2009    prepare 0.0673    bound 0.8333    transfer 0.0095    finalize 0.0143    
After pruning, left:  6

Back to Regular BaB

BaB round 1
batch: 6
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 10] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-12, 92] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 10] [/input-12, 1] 
split level 2: [/input-8, 875] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 92] [/input-12, 10] 
split level 3: [/input-8, 1052] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-12, 92] 
split level 4: [/input-12, 61] [/input-8, 1052] [/input-8, 1052] [/input-8, 1052] [/input-8, 1052] [/input-12, 61] 
split level 5: [/input-8, 1881] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-12, 61] [/input-8, 1900] 
cut re-enabled after branching node selection
0 lb beta sum: 1.6163148880004883, worst -0.3236173391342163
10 lb beta sum: 1.6327571868896484, worst -0.323278546333313
Time: prepare 0.0182    bound 0.1416    transfer 0.0019    finalize 0.0022    func 0.1666    
Accumulated time: func 1.3675    prepare 0.0859    bound 0.9749    transfer 0.0115    finalize 0.0166    
all_split False
======================Cut inference begins======================
max lb tensor(0.85476232) min lb tensor(-0.32319129)
Number of Verified Splits: 348 of 384
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.6762975454330444, worst -0.7900526523590088
10 lb beta sum: 1.7625620365142822, worst -0.11503195762634277
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.3716413974761963 
BICCOS Cumulative time: 0.490694522857666
Preprocessing time: 0.010699748992919922 Inference time: 0.3519110679626465 Add cuts time: 0.008569717407226562 Cut analysis time: 0.0004608631134033203
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.32319 (6), -0.31410 (6), -0.31177 (6), -0.31177 (6), -0.30267 (6), -0.30266 (6), -0.30098 (6), -0.29229 (6), -0.29186 (6), -0.28825 (6), -0.27643 (6), -0.27546 (6), -0.27268 (6), -0.27204 (6), -0.25982 (6), -0.25643 (6), -0.11400 (6), -0.11200 (6), -0.10201 (6), -0.10034 (6), 
Length of domains: 36
Time: pickout 0.0007    decision 0.0196    set_bounds 0.0429    solve 0.1668    add 0.0613    
Accumulated time: pickout 0.0269    decision 0.6952    set_bounds 0.1109    solve 1.1709    add 0.9258    
Current (lb-rhs): -0.3231912851333618
196 domains visited
Cumulative time: 3.714146137237549

BaB round 2
batch: 36
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-8, 1956] [/input-12, 58] [/input-8, 884] [/input-8, 1956] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 1: [/input-8, 92] [/input-8, 988] [/input-8, 92] [/input-8, 1052] [/input-8, 988] [/input-8, 92] [/input-8, 84] [/input-8, 92] [/input-8, 84] [/input-8, 884] 
split level 2: [/input-8, 556] [/input-8, 1003] [/input-8, 556] [/input-8, 1881] [/input-8, 1003] [/input-8, 556] [/input-8, 1003] [/input-8, 556] [/input-8, 1003] [/input-8, 538] 
cut re-enabled after branching node selection
0 lb beta sum: 1.1405476331710815, worst -0.3097190856933594
10 lb beta sum: 1.1405476331710815, worst -0.309604287147522
Time: prepare 0.0143    bound 0.1406    transfer 0.0017    finalize 0.0018    func 0.1603    
Accumulated time: func 1.5278    prepare 0.1004    bound 1.1155    transfer 0.0131    finalize 0.0183    
all_split False
======================Cut inference begins======================
max lb tensor(0.36965692) min lb tensor(-0.30955207)
Number of Verified Splits: 162 of 288
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 8
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.026932477951049805 
BICCOS Cumulative time: 0.5176270008087158
Preprocessing time: 0.008568286895751953 Inference time: 0.01585674285888672 Add cuts time: 0.002077341079711914 Cut analysis time: 0.00043010711669921875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30955 (9), -0.30811 (9), -0.30050 (9), -0.29906 (9), -0.29748 (9), -0.29707 (9), -0.29707 (9), -0.29695 (9), -0.29561 (9), -0.29538 (9), -0.28840 (9), -0.28796 (9), -0.28795 (9), -0.28789 (9), -0.28650 (9), -0.28636 (9), -0.28628 (9), -0.28605 (9), -0.28559 (9), -0.28544 (9), 
Length of domains: 126
Time: pickout 0.0057    decision 0.0178    set_bounds 0.0214    solve 0.1603    add 0.0765    
Accumulated time: pickout 0.0327    decision 0.7129    set_bounds 0.1323    solve 1.3312    add 1.0023    
Current (lb-rhs): -0.30955207347869873
322 domains visited
Cumulative time: 4.031827688217163

BaB round 3
batch: 126
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 875] [/input-8, 1956] [/input-8, 884] [/input-8, 875] [/input-8, 884] [/input-8, 1956] [/input-8, 884] [/input-8, 1956] [/input-8, 1956] [/input-8, 1956] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.30824846029281616
10 lb beta sum: 0.42909595370292664, worst -0.3064512610435486
Time: prepare 0.0051    bound 0.1366    transfer 0.0014    finalize 0.0014    func 0.1461    
Accumulated time: func 1.6739    prepare 0.1057    bound 1.2521    transfer 0.0145    finalize 0.0197    
all_split False
======================Cut inference begins======================
max lb tensor(0.30831188) min lb tensor(-0.30640459)
Number of Verified Splits: 86 of 252
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 8
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.017319679260253906 
BICCOS Cumulative time: 0.5349466800689697
Preprocessing time: 0.007414817810058594 Inference time: 0.00795602798461914 Add cuts time: 0.0015447139739990234 Cut analysis time: 0.00040411949157714844
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30640 (10), -0.30523 (10), -0.29738 (10), -0.29620 (10), -0.29485 (10), -0.29454 (10), -0.29427 (10), -0.29355 (10), -0.29227 (10), -0.29218 (10), -0.28583 (10), -0.28548 (10), -0.28521 (10), -0.28445 (10), -0.28335 (10), -0.28324 (10), -0.28317 (10), -0.28309 (10), -0.28286 (10), -0.28249 (10), 
Length of domains: 166
Time: pickout 0.0139    decision 0.0198    set_bounds 0.0109    solve 0.1462    add 0.0764    
Accumulated time: pickout 0.0465    decision 0.7327    set_bounds 0.1432    solve 1.4774    add 1.0787    
Current (lb-rhs): -0.30640459060668945
488 domains visited
Cumulative time: 4.323631286621094

BaB round 4
batch: 166
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 884] [/input-8, 1956] [/input-8, 538] [/input-8, 1956] [/input-8, 1956] [/input-8, 92] [/input-8, 92] [/input-8, 100] [/input-8, 92] [/input-8, 92] 
cut re-enabled after branching node selection
0 lb beta sum: 0.523300290107727, worst -0.3039150536060333
10 lb beta sum: 0.7925183176994324, worst -0.30355337262153625
Time: prepare 0.0152    bound 0.1369    transfer 0.0022    finalize 0.0016    func 0.1580    
Accumulated time: func 1.8319    prepare 0.1211    bound 1.3890    transfer 0.0167    finalize 0.0213    
all_split False
======================Cut inference begins======================
max lb tensor(0.01109576) min lb tensor(-0.30353072)
Number of Verified Splits: 10 of 332
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.011227607727050781 
BICCOS Cumulative time: 0.5461742877960205
Preprocessing time: 0.009580135345458984 Inference time: 0.0010497570037841797 Add cuts time: 0.00027298927307128906 Cut analysis time: 0.0003247261047363281
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.30353 (11), -0.30242 (11), -0.29452 (11), -0.29340 (11), -0.29168 (11), -0.29135 (11), -0.29104 (11), -0.28998 (11), -0.28960 (11), -0.28884 (11), -0.28265 (11), -0.28233 (11), -0.28198 (11), -0.28089 (11), -0.28052 (11), -0.28043 (11), -0.27987 (11), -0.27978 (11), -0.27947 (11), -0.27876 (11), 
Length of domains: 322
Time: pickout 0.0158    decision 0.0207    set_bounds 0.0148    solve 0.1581    add 0.0768    
Accumulated time: pickout 0.0623    decision 0.7535    set_bounds 0.1580    solve 1.6355    add 1.1555    
Current (lb-rhs): -0.3035307228565216
810 domains visited
Cumulative time: 4.628633737564087

BaB round 5
batch: 322
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 538] [/input-8, 538] [/input-8, 100] [/input-8, 538] [/input-8, 538] [/input-8, 1061] [/input-8, 556] [/input-8, 538] [/input-8, 1061] [/input-8, 556] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2982848882675171
10 lb beta sum: 0.512264609336853, worst -0.29614511132240295
Time: prepare 0.0130    bound 0.1504    transfer 0.0026    finalize 0.0040    func 0.1750    
Accumulated time: func 2.0069    prepare 0.1343    bound 1.5394    transfer 0.0193    finalize 0.0253    
all_split False
======================Cut inference begins======================
max lb tensor(0.00686473) min lb tensor(-0.29592723)
Number of Verified Splits: 8 of 644
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 10.
#cuts 1-3: 9
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.02253246307373047 
BICCOS Cumulative time: 0.568706750869751
Preprocessing time: 0.02083563804626465 Inference time: 0.0009319782257080078 Add cuts time: 0.0003788471221923828 Cut analysis time: 0.0003859996795654297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.29593 (12), -0.29480 (12), -0.28993 (12), -0.28917 (12), -0.28885 (12), -0.28802 (12), -0.28416 (12), -0.28381 (12), -0.28314 (12), -0.28212 (12), -0.28168 (12), -0.28099 (12), -0.28079 (12), -0.27969 (12), -0.27826 (12), -0.27787 (12), -0.27767 (12), -0.27734 (12), -0.27702 (12), -0.27628 (12), 
Length of domains: 636
Time: pickout 0.0181    decision 0.0288    set_bounds 0.0296    solve 0.1752    add 0.0083    
Accumulated time: pickout 0.0804    decision 0.7823    set_bounds 0.1876    solve 1.8107    add 1.1638    
Current (lb-rhs): -0.2959272265434265
1446 domains visited
Cumulative time: 4.913019180297852

BaB round 6
batch: 636
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 867] [/input-8, 1061] [/input-12, 55] [/input-8, 1061] [/input-8, 1061] [/input-8, 867] [/input-8, 1900] [/input-8, 1460] [/input-8, 867] [/input-8, 1061] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.29168426990509033
10 lb beta sum: 0.4951305091381073, worst -0.289691686630249
Time: prepare 0.0257    bound 0.1523    transfer 0.0036    finalize 0.0067    func 0.1967    
Accumulated time: func 2.2036    prepare 0.1603    bound 1.6918    transfer 0.0229    finalize 0.0320    
all_split False
======================Cut inference begins======================
max lb tensor(0.11564943) min lb tensor(-0.28963321)
Number of Verified Splits: 116 of 1272
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 13.
#cuts 1-3: 9
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.056578636169433594 
BICCOS Cumulative time: 0.6252853870391846
Preprocessing time: 0.03885531425476074 Inference time: 0.014572858810424805 Add cuts time: 0.002574443817138672 Cut analysis time: 0.000576019287109375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.28963 (13), -0.28872 (13), -0.28452 (13), -0.28309 (13), -0.28297 (13), -0.28259 (13), -0.28217 (13), -0.28056 (13), -0.27789 (13), -0.27778 (13), -0.27704 (13), -0.27595 (13), -0.27587 (13), -0.27566 (13), -0.27531 (13), -0.27483 (13), -0.27431 (13), -0.27431 (13), -0.27390 (13), -0.27383 (13), 
Length of domains: 1156
Time: pickout 0.0119    decision 0.0491    set_bounds 0.0549    solve 0.1970    add 0.0940    
Accumulated time: pickout 0.0923    decision 0.8314    set_bounds 0.2424    solve 2.0077    add 1.2578    
Current (lb-rhs): -0.28963321447372437
2602 domains visited
Cumulative time: 5.384955644607544

BaB round 7
batch: 1156
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1061] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 867] [/input-8, 556] [/input-8, 1061] [/input-8, 556] [/input-8, 867] [/input-8, 1061] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.28576037287712097
10 lb beta sum: 0.4811508059501648, worst -0.28386974334716797
Time: prepare 0.0483    bound 0.1941    transfer 0.0170    finalize 0.0166    func 0.2922    
Accumulated time: func 2.4958    prepare 0.2088    bound 1.8859    transfer 0.0399    finalize 0.0486    
all_split False
======================Cut inference begins======================
max lb tensor(0.14177054) min lb tensor(-0.28380895)
Number of Verified Splits: 67 of 2312
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 9
#cuts 4-6: 3
#cuts >= 20: 0
BICCOS time: 0.0881190299987793 
BICCOS Cumulative time: 0.7134044170379639
Preprocessing time: 0.07580304145812988 Inference time: 0.009938716888427734 Add cuts time: 0.001863241195678711 Cut analysis time: 0.0005140304565429688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.28381 (14), -0.28305 (14), -0.27842 (14), -0.27772 (14), -0.27723 (14), -0.27674 (14), -0.27649 (14), -0.27494 (14), -0.27439 (14), -0.27342 (14), -0.27147 (14), -0.27146 (14), -0.27131 (14), -0.27089 (14), -0.27005 (14), -0.26970 (14), -0.26958 (14), -0.26920 (14), -0.26902 (14), -0.26847 (14), 
Length of domains: 2245
Time: pickout 0.0333    decision 0.0781    set_bounds 0.2568    solve 0.2927    add 0.0980    
Accumulated time: pickout 0.1255    decision 0.9095    set_bounds 0.4992    solve 2.3004    add 1.3557    
Current (lb-rhs): -0.28380894660949707
4847 domains visited
Cumulative time: 6.241211175918579

BaB round 8
batch: 2245
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-12, 55] [/input-8, 1460] [/input-12, 55] [/input-12, 55] [/input-8, 1900] [/input, 2472] [/input-8, 1900] [/input-8, 1900] [/input-12, 55] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.28110072016716003
10 lb beta sum: 0.4777872860431671, worst -0.2793469727039337
Time: prepare 0.0991    bound 0.3105    transfer 0.0319    finalize 0.2892    func 0.7604    
Accumulated time: func 3.2562    prepare 0.3081    bound 2.1964    transfer 0.0718    finalize 0.3378    
all_split False
======================Cut inference begins======================
max lb tensor(0.27027464) min lb tensor(-0.27933624)
Number of Verified Splits: 229 of 4490
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 9
#cuts 4-6: 5
#cuts 7-9: 2
#cuts >= 20: 0
BICCOS time: 0.1811847686767578 
BICCOS Cumulative time: 0.8945891857147217
Preprocessing time: 0.1421041488647461 Inference time: 0.03431963920593262 Add cuts time: 0.003942251205444336 Cut analysis time: 0.0008187294006347656
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27934 (15), -0.27862 (15), -0.27395 (15), -0.27327 (15), -0.27260 (15), -0.27210 (15), -0.27188 (15), -0.27043 (15), -0.26929 (15), -0.26830 (15), -0.26690 (15), -0.26679 (15), -0.26674 (15), -0.26636 (15), -0.26527 (15), -0.26520 (15), -0.26507 (15), -0.26469 (15), -0.26427 (15), -0.26399 (15), 
Length of domains: 4261
Time: pickout 0.0446    decision 0.1430    set_bounds 0.1951    solve 0.7613    add 0.1389    
Accumulated time: pickout 0.1702    decision 1.0525    set_bounds 0.6943    solve 3.0617    add 1.4946    
Current (lb-rhs): -0.27933624386787415
9108 domains visited
Cumulative time: 7.717748403549194

BaB round 9
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 100] [/input-8, 1900] [/input-8, 100] [/input-8, 100] [/input-8, 100] [/input-8, 867] [/input-8, 100] [/input, 2472] [/input-8, 100] [/input-8, 1900] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.277374804019928
10 lb beta sum: 0.5062815546989441, worst -0.275581032037735
Time: prepare 0.1936    bound 0.4989    transfer 0.0683    finalize 0.0527    func 0.8666    
Accumulated time: func 4.1228    prepare 0.5020    bound 2.6953    transfer 0.1402    finalize 0.3905    
all_split False
======================Cut inference begins======================
max lb tensor(0.31231958) min lb tensor(-0.27555355)
Number of Verified Splits: 1068 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 17.
#cuts 1-3: 11
#cuts 4-6: 6
#cuts >= 20: 0
BICCOS time: 0.6718654632568359 
BICCOS Cumulative time: 1.5664546489715576
Preprocessing time: 0.2677493095397949 Inference time: 0.3737194538116455 Add cuts time: 0.02956104278564453 Cut analysis time: 0.0008356571197509766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27555 (16), -0.27476 (16), -0.27014 (16), -0.26873 (16), -0.26830 (16), -0.26641 (16), -0.26382 (16), -0.26358 (16), -0.26262 (16), -0.26237 (16), -0.26229 (16), -0.26213 (16), -0.26139 (16), -0.26095 (16), -0.26095 (16), -0.26085 (16), -0.26022 (16), -0.26009 (16), -0.25992 (16), -0.25982 (16), 
Length of domains: 7289
Time: pickout 0.0549    decision 0.2458    set_bounds 0.5098    solve 0.8687    add 0.1457    
Accumulated time: pickout 0.2251    decision 1.2982    set_bounds 1.2041    solve 3.9304    add 1.6402    
Current (lb-rhs): -0.27555355429649353
16232 domains visited
current_vram/total_varm: 20.3GB/99.9GB, batch_size increase to 8192
Cumulative time: 10.239096403121948

BaB round 10
batch: 7289
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-8, 1892] [/input-12, 55] [/input-12, 37] [/input-8, 100] [/input-8, 1892] [/input-12, 55] [/input-8, 1892] [/input-12, 55] [/input-8, 1900] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.27463847398757935
10 lb beta sum: 0.7344768047332764, worst -0.27289190888404846
Time: prepare 0.3751    bound 0.8371    transfer 0.0988    finalize 0.1069    func 1.5144    
Accumulated time: func 5.6371    prepare 0.8774    bound 3.5324    transfer 0.2390    finalize 0.4974    
all_split False
======================Cut inference begins======================
max lb tensor(0.62270492) min lb tensor(-0.27287880)
Number of Verified Splits: 9557 of 14578
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 20
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 2.3304789066314697 
BICCOS Cumulative time: 3.8969335556030273
Preprocessing time: 0.7217600345611572 Inference time: 1.4513170719146729 Add cuts time: 0.15629863739013672 Cut analysis time: 0.0011031627655029297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.27288 (17), -0.26746 (17), -0.26599 (17), -0.26554 (17), -0.26532 (17), -0.26522 (17), -0.25989 (17), -0.25988 (17), -0.25980 (17), -0.25858 (17), -0.25839 (17), -0.25833 (17), -0.25817 (17), -0.25794 (17), -0.25624 (17), -0.25605 (17), -0.25530 (17), -0.25501 (17), -0.25417 (17), -0.25378 (17), 
Length of domains: 5021
Time: pickout 0.2295    decision 0.4340    set_bounds 0.9187    solve 1.5187    add 0.0628    
Accumulated time: pickout 0.4546    decision 1.7323    set_bounds 2.1228    solve 5.4491    add 1.7031    
Current (lb-rhs): -0.2728787958621979
21253 domains visited
Cumulative time: 15.862858533859253

BaB round 11
batch: 5021
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1900] [/input-8, 1900] [/input-8, 1884] [/input-12, 55] [/input-12, 55] [/input-8, 1884] [/input-12, 55] [/input-8, 1900] [/input-8, 1900] [/input-8, 1900] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.271003782749176
10 lb beta sum: 1.1733101606369019, worst -0.2692468762397766
Time: prepare 0.2396    bound 0.8218    transfer 0.0502    finalize 0.2533    func 1.4303    
Accumulated time: func 7.0675    prepare 1.1173    bound 4.3541    transfer 0.2892    finalize 0.7507    
all_split False
======================Cut inference begins======================
max lb tensor(0.63155359) min lb tensor(-0.26922202)
Number of Verified Splits: 5654 of 10042
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 23
#cuts >= 20: 0
BICCOS time: 1.323812484741211 
BICCOS Cumulative time: 5.220746040344238
Preprocessing time: 0.33762145042419434 Inference time: 0.8838789463043213 Add cuts time: 0.10150671005249023 Cut analysis time: 0.0008053779602050781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.26922 (18), -0.26377 (18), -0.26264 (18), -0.26258 (18), -0.26233 (18), -0.26137 (18), -0.25721 (18), -0.25717 (18), -0.25572 (18), -0.25567 (18), -0.25528 (18), -0.25449 (18), -0.25438 (18), -0.25376 (18), -0.25339 (18), -0.25257 (18), -0.25181 (18), -0.25056 (18), -0.24985 (18), -0.24913 (18), 
Length of domains: 4388
Time: pickout 0.1293    decision 0.5134    set_bounds 0.4577    solve 1.4325    add 0.1504    
Accumulated time: pickout 0.5839    decision 2.2456    set_bounds 2.5806    solve 6.8816    add 1.8535    
Current (lb-rhs): -0.2692220211029053
25641 domains visited
Cumulative time: 19.9525945186615

BaB round 12
batch: 4388
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 55] [/input-12, 55] [/input-8, 100] [/input-8, 100] [/input-8, 100] [/input-8, 1884] [/input-12, 55] [/input-12, 55] [/input-12, 55] [/input-8, 1884] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.26182934641838074
10 lb beta sum: 2.09420108795166, worst -0.23600345849990845
Time: prepare 0.2165    bound 0.7298    transfer 0.0516    finalize 0.2673    func 1.3225    
Accumulated time: func 8.3900    prepare 1.3341    bound 5.0839    transfer 0.3408    finalize 1.0180    
all_split False
======================Cut inference begins======================
max lb tensor(1.18078589) min lb tensor(-0.23587930)
Number of Verified Splits: 8444 of 8776
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 1.6991558074951172 
BICCOS Cumulative time: 6.9199018478393555
Preprocessing time: 0.29502034187316895 Inference time: 1.2957391738891602 Add cuts time: 0.10805606842041016 Cut analysis time: 0.0003402233123779297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.23588 (19), -0.23439 (19), -0.22724 (19), -0.22631 (19), -0.22477 (19), -0.22464 (19), -0.21816 (19), -0.21729 (19), -0.21644 (19), -0.21452 (19), -0.21107 (19), -0.20837 (19), -0.20802 (19), -0.20651 (19), -0.20089 (19), -0.19818 (19), -0.17805 (19), -0.17695 (19), -0.17660 (19), -0.17547 (19), 
Length of domains: 332
Time: pickout 0.0847    decision 0.4708    set_bounds 0.3897    solve 1.3246    add 0.0057    
Accumulated time: pickout 0.6686    decision 2.7164    set_bounds 2.9702    solve 8.2062    add 1.8591    
Current (lb-rhs): -0.2358793020248413
25973 domains visited
Cumulative time: 24.02206563949585

BaB round 13
batch: 332
splitting decisions: 
split level 0: [/input-8, 90] [/input-8, 90] [/input-8, 1892] [/input-8, 90] [/input, 1463] [/input, 1463] [/input-8, 1892] [/input-8, 1892] [/input-12, 37] [/input-8, 1909] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2395176887512207

all verified at 6th iter
Time: prepare 0.0171    bound 0.0430    transfer 0.0042    finalize 0.0039    func 0.0724    
Accumulated time: func 8.4624    prepare 1.3514    bound 5.1269    transfer 0.3450    finalize 1.0219    
all_split False
======================Cut inference begins======================
max lb tensor(0.18913186) min lb tensor(2.02655792e-05)
Number of Verified Splits: 664 of 664
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.02033829689025879 
BICCOS Cumulative time: 6.940240144729614
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0094    decision 0.0319    set_bounds 0.1630    solve 0.0726    add 0.0011    
Accumulated time: pickout 0.6780    decision 2.7483    set_bounds 3.1333    solve 8.2788    add 1.8603    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
25973 domains visited
Cumulative time: 24.325130462646484


Properties batch 1, size 1
Remaining timeout: 173.9491424560547
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 173.94904160499573
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 173.94901156425476
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 173.9489893913269
Verifying property 4 with 1 instances.
##### Instance 187 first 10 spec matrices: 
tensor([[[ 0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  1.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.37226701]], device='cuda:0') need to verify.
Model prediction is: tensor([ -6.08897448, -10.08986378,  -7.39640045,  -7.25407028,  -6.58082294,
         -7.96594858,  -7.83635616,  -8.88062477,  -5.43441010,  -7.92518377],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.37226701]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 737
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 228
Node /15 input 0: size torch.Size([100]) unstable 18
-----------------
# of unstable neurons: 983
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00012159347534179688
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.37226366996765137
10 lb beta sum: 0.0, worst -0.37226665019989014
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0603    transfer 0.0001    finalize 0.0001    func 0.0608    
Accumulated time: func 0.0608    prepare 0.0002    bound 0.0603    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] 
split level 1: [/input-12, 58] 
split level 2: [/input-12, 92] 
split level 3: [/input-12, 31] 
split level 4: [/input-12, 60] 
split level 5: [/input-12, 1] 
split level 6: [/input-12, 37] 
split level 7: [/input-12, 26] 
split level 8: [/input-8, 884] 
split level 9: [/input-8, 667] 
split level 10: [/input-8, 539] 
split level 11: [/input, 2232] 
split level 12: [/input, 3512] 
split level 13: [/input-8, 875] 
split level 14: [/input-8, 1956] 
split level 15: [/input, 3513] 
split level 16: [/input-8, 556] 
split level 17: [/input-8, 684] 
split level 18: [/input-8, 867] 
split level 19: [/input-8, 1884] 
split level 20: [/input-8, 659] 
split level 21: [/input, 2248] 
split level 22: [/input-8, 996] 
split level 23: [/input, 3529] 
split level 24: [/input, 1463] 
split level 25: [/input-8, 1876] 
split level 26: [/input-8, 93] 
split level 27: [/input-8, 1052] 
split level 28: [/input-8, 538] 
split level 29: [/input-8, 541] 
split level 30: [/input-8, 1460] 
split level 31: [/input-8, 1061] 
split level 32: [/input, 2521] 
split level 33: [/input, 1736] 
split level 34: [/input-8, 1892] 
split level 35: [/input, 1482] 
split level 36: [/input-8, 1003] 
split level 37: [/input-8, 508] 
split level 38: [/input-8, 92] 
split level 39: [/input-8, 988] 
split level 40: [/input-8, 1867] 
split level 41: [/input-8, 1866] 
split level 42: [/input-8, 1461] 
split level 43: [/input, 2264] 
split level 44: [/input-8, 860] 
split level 45: [/input, 1466] 
split level 46: [/input, 3272] 
split level 47: [/input-8, 801] 
split level 48: [/input-8, 1881] 
split level 49: [/input-8, 2044] 
split level 50: [/input-8, 1893] 
split level 51: [/input-8, 806] 
split level 52: [/input, 3018] 
split level 53: [/input, 3254] 
split level 54: [/input-8, 406] 
split level 55: [/input-8, 394] 
split level 56: [/input-8, 1305] 
split level 57: [/input, 3271] 
split level 58: [/input-8, 319] 
split level 59: [/input-8, 431] 
split level 60: [/input, 3704] 
split level 61: [/input, 2227] 
split level 62: [/input, 3306] 
split level 63: [/input, 3688] 
split level 64: [/input, 2251] 
split level 65: [/input-8, 90] 
split level 66: [/input, 2376] 
split level 67: [/input, 1357] 
split level 68: [/input, 2533] 
split level 69: [/input-8, 419] 
split level 70: [/input, 1717] 
split level 71: [/input, 1703] 
split level 72: [/input, 3287] 
split level 73: [/input-8, 1885] 
split level 74: [/input, 1300] 
split level 75: [/input, 3786] 
split level 76: [/input, 2332] 
split level 77: [/input, 3299] 
split level 78: [/input, 2472] 
split level 79: [/input-8, 1259] 
split level 80: [/input-8, 1123] 
split level 81: [/input, 2524] 
split level 82: [/input-8, 1910] 
split level 83: [/input, 3289] 
split level 84: [/input-8, 2016] 
split level 85: [/input-8, 395] 
split level 86: [/input-8, 507] 
split level 87: [/input, 1756] 
split level 88: [/input-8, 1048] 
split level 89: [/input-8, 1121] 
split level 90: [/input, 3305] 
split level 91: [/input-8, 2045] 
split level 92: [/input, 2515] 
split level 93: [/input-8, 2043] 
split level 94: [/input, 2506] 
split level 95: [/input-8, 1900] 
split level 96: [/input, 3290] 
split level 97: [/input-8, 1443] 
split level 98: [/input, 3310] 
split level 99: [/input, 3301] 
split level 100: [/input, 2514] 
split level 101: [/input, 2381] 
split level 102: [/input, 2076] 
split level 103: [/input-8, 1308] 
split level 104: [/input, 3548] 
split level 105: [/input, 3274] 
split level 106: [/input, 2092] 
split level 107: [/input, 1733] 
split level 108: [/input, 3269] 
split level 109: [/input-8, 1249] 
split level 110: [/input, 2379] 
split level 111: [/input, 3532] 
split level 112: [/input-8, 1909] 
split level 113: [/input-8, 1253] 
split level 114: [/input, 3282] 
split level 115: [/input, 3186] 
split level 116: [/input, 2920] 
split level 117: [/input, 2386] 
split level 118: [/input, 2534] 
split level 119: [/input, 2252] 
split level 120: [/input, 3363] 
split level 121: [/input, 2433] 
split level 122: [/input, 3783] 
split level 123: [/input, 3257] 
split level 124: [/input, 2382] 
split level 125: [/input, 3143] 
split level 126: [/input, 3297] 
split level 127: [/input, 2557] 
split level 128: [/input, 2936] 
split level 129: [/input-8, 2047] 
split level 130: [/input, 1754] 
split level 131: [/input-8, 397] 
split level 132: [/input, 2083] 
split level 133: [/input, 2540] 
split level 134: [/input-8, 1449] 
split level 135: [/input, 3128] 
split level 136: [/input, 1768] 
split level 137: [/input, 2397] 
split level 138: [/input, 2967] 
split level 139: [/input-8, 1583] 
split level 140: [/input, 2267] 
split level 141: [/input, 423] 
split level 142: [/input, 3475] 
split level 143: [/input, 3106] 
split level 144: [/input, 2363] 
split level 145: [/input, 2982] 
split level 146: [/input-8, 551] 
split level 147: [/input, 1751] 
split level 148: [/input, 2364] 
split level 149: [/input-8, 945] 
split level 150: [/input, 3116] 
split level 151: [/input, 2470] 
split level 152: [/input-8, 84] 
split level 153: [/input-8, 1021] 
split level 154: [/input, 2398] 
split level 155: [/input-8, 980] 
split level 156: [/input, 2353] 
split level 157: [/input, 1500] 
split level 158: [/input, 3672] 
split level 159: [/input, 273] 
split level 160: [/input, 1771] 
split level 161: [/input, 3754] 
split level 162: [/input, 2510] 
split level 163: [/input, 2455] 
split level 164: [/input, 3687] 
split level 165: [/input, 3734] 
split level 166: [/input, 3703] 
split level 167: [/input, 3102] 
split level 168: [/input, 2345] 
split level 169: [/input, 3134] 
split level 170: [/input, 2473] 
split level 171: [/input-8, 2042] 
split level 172: [/input, 3278] 
split level 173: [/input, 3822] 
split level 174: [/input, 3105] 
split level 175: [/input, 3833] 
split level 176: [/input, 2089] 
split level 177: [/input, 3131] 
split level 178: [/input, 2952] 
split level 179: [/input, 2346] 
split level 180: [/input, 3356] 
split level 181: [/input, 3182] 
split level 182: [/input, 2369] 
split level 183: [/input-8, 267] 
split level 184: [/input-8, 1422] 
split level 185: [/input, 3174] 
split level 186: [/input, 3719] 
split level 187: [/input, 2330] 
split level 188: [/input, 3820] 
split level 189: [/input, 3834] 
split level 190: [/input, 3054] 
split level 191: [/input, 3153] 
split level 192: [/input-8, 1887] 
split level 193: [/input, 3832] 
split level 194: [/input, 1560] 
split level 195: [/input, 3821] 
split level 196: [/input, 2413] 
split level 197: [/input, 2374] 
split level 198: [/input, 3388] 
split level 199: [/input, 3091] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3721960783004761
10 lb beta sum: 0.0, worst -0.3721959590911865
Time: prepare 0.0117    bound 0.1115    transfer 0.0025    finalize 0.0031    func 0.1315    
Accumulated time: func 0.1923    prepare 0.0241    bound 0.1717    transfer 0.0026    finalize 0.0032    
all_split False
======================Cut inference begins======================
max lb tensor(0.36779594) min lb tensor(-0.37219381)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.011420249938964844 
BICCOS Cumulative time: 0.011420249938964844
Preprocessing time: 0.01072549819946289 Inference time: 0.00021386146545410156 Add cuts time: 0.00016236305236816406 Cut analysis time: 0.0003185272216796875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.35942 (1), -0.35940 (1), -0.35908 (1), -0.35830 (1), -0.35790 (1), -0.35784 (1), -0.35783 (1), -0.35736 (1), -0.35681 (1), -0.35570 (1), -0.35426 (1), -0.35413 (1), -0.35333 (1), -0.35273 (1), -0.35246 (1), -0.35137 (1), -0.35134 (1), -0.35101 (1), -0.35090 (1), -0.34999 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5412    set_bounds 0.0103    solve 0.1316    add 0.1976    
Accumulated time: pickout 0.0004    decision 0.5412    set_bounds 0.0103    solve 0.1316    add 0.1976    
Current (lb-rhs): -0.3594242334365845
50 domains visited
Cumulative time: 0.9796350002288818

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 1: [/input-12, 31] [/input-12, 60] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 60] [/input-12, 31] [/input-12, 31] [/input-12, 60] [/input-12, 31] 
split level 2: [/input-12, 1] [/input-12, 37] [/input-12, 1] [/input-12, 60] [/input-12, 60] [/input-12, 31] [/input-12, 60] [/input-12, 60] [/input-12, 31] [/input-12, 60] 
split level 3: [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] [/input-12, 37] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3526489734649658
10 lb beta sum: 0.5643506646156311, worst -0.33969178795814514
Time: prepare 0.0075    bound 0.1263    transfer 0.0013    finalize 0.0027    func 0.1404    
Accumulated time: func 0.3327    prepare 0.0319    bound 0.2981    transfer 0.0039    finalize 0.0059    
all_split False
======================Cut inference begins======================
max lb tensor(0.72321588) min lb tensor(-0.33943412)
Number of Verified Splits: 54 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.017893075942993164 
BICCOS Cumulative time: 0.029313325881958008
Preprocessing time: 0.012001752853393555 Inference time: 0.0025932788848876953 Add cuts time: 0.0030181407928466797 Cut analysis time: 0.0002799034118652344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21030 (2), -0.20994 (2), -0.20761 (2), -0.20678 (2), -0.20601 (2), -0.20457 (2), -0.20285 (2), -0.20250 (2), -0.20185 (2), -0.20177 (2), -0.20170 (2), -0.20130 (2), -0.20098 (2), -0.19993 (2), -0.19957 (2), -0.19841 (2), -0.19781 (2), -0.19734 (2), -0.19729 (2), -0.19595 (2), 
Length of domains: 50
Time: pickout 0.0082    decision 0.0233    set_bounds 0.0122    solve 0.1405    add 0.2095    
Accumulated time: pickout 0.0086    decision 0.5646    set_bounds 0.0225    solve 0.2721    add 0.4071    
Current (lb-rhs): -0.21029500663280487
100 domains visited
Cumulative time: 1.3984620571136475

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 31] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 31] [/input-12, 31] [/input-12, 60] [/input-12, 31] [/input-12, 31] [/input-12, 31] [/input-12, 60] [/input-12, 60] 
split level 2: [/input-12, 26] [/input-12, 26] [/input-12, 1] [/input-12, 1] [/input-12, 37] [/input-12, 37] [/input-12, 1] [/input-12, 1] [/input-12, 37] [/input-12, 37] 
split level 3: [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6980790495872498, worst -0.21029500663280487
10 lb beta sum: 0.6980790495872498, worst -0.2082069367170334
Time: prepare 0.0181    bound 0.1271    transfer 0.0026    finalize 0.0024    func 0.1528    
Accumulated time: func 0.4855    prepare 0.0502    bound 0.4251    transfer 0.0065    finalize 0.0083    
all_split False
======================Cut inference begins======================
max lb tensor(0.42944115) min lb tensor(-0.20763592)
Number of Verified Splits: 74 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.017369747161865234 
BICCOS Cumulative time: 0.04668307304382324
Preprocessing time: 0.011980533599853516 Inference time: 0.0030066967010498047 Add cuts time: 0.0020818710327148438 Cut analysis time: 0.0003006458282470703
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08857 (3), -0.08850 (3), -0.08690 (3), -0.08676 (3), -0.08634 (3), -0.08619 (3), -0.08615 (3), -0.08609 (3), -0.08597 (3), -0.08475 (3), -0.08473 (3), -0.08456 (3), -0.08372 (3), -0.08363 (3), -0.08221 (3), -0.08218 (3), -0.08210 (3), -0.08126 (3), -0.08095 (3), -0.07994 (3), 
Length of domains: 50
Time: pickout 0.0084    decision 0.0211    set_bounds 0.0161    solve 0.1529    add 0.2232    
Accumulated time: pickout 0.0170    decision 0.5857    set_bounds 0.0386    solve 0.4250    add 0.6303    
Current (lb-rhs): -0.08857184648513794
150 domains visited
Cumulative time: 1.844526767730713

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 1: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 2: [/input-8, 556] [/input-8, 556] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-8, 556] [/input-8, 556] [/input-8, 556] [/input-8, 556] 
split level 3: [/input-8, 1003] [/input-8, 1003] [/input-8, 875] [/input-8, 875] [/input-8, 875] [/input-8, 875] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.10333251953125
10 lb beta sum: 0.5456057190895081, worst -0.08741132915019989
Time: prepare 0.0078    bound 0.1266    transfer 0.0031    finalize 0.0031    func 0.1432    
Accumulated time: func 0.6287    prepare 0.0583    bound 0.5517    transfer 0.0096    finalize 0.0114    
all_split False
======================Cut inference begins======================
max lb tensor(0.64688826) min lb tensor(-0.08471328)
Number of Verified Splits: 209 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 5
#cuts 4-6: 17
#cuts >= 20: 0
BICCOS time: 0.027007341384887695 
BICCOS Cumulative time: 0.07369041442871094
Preprocessing time: 0.01190328598022461 Inference time: 0.009978055953979492 Add cuts time: 0.004245758056640625 Cut analysis time: 0.0008802413940429688
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02610 (4), -0.02608 (4), -0.02606 (4), -0.02605 (4), -0.02600 (4), -0.02500 (4), -0.02473 (4), -0.02472 (4), -0.02456 (4), -0.02431 (4), -0.02424 (4), -0.02415 (4), -0.02399 (4), -0.02395 (4), -0.02394 (4), -0.02380 (4), -0.02373 (4), -0.02244 (4), -0.02244 (4), -0.02184 (4), 
Length of domains: 50
Time: pickout 0.0080    decision 0.0206    set_bounds 0.0152    solve 0.1433    add 0.2264    
Accumulated time: pickout 0.0250    decision 0.6063    set_bounds 0.0538    solve 0.5682    add 0.8567    
Current (lb-rhs): -0.02610047161579132
200 domains visited
Cumulative time: 2.292029857635498

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 1: [/input-12, 31] [/input-12, 31] [/input-12, 1] [/input-12, 1] [/input-12, 31] [/input-12, 1] [/input-12, 1] [/input-12, 31] [/input-12, 31] [/input-12, 1] 
split level 2: [/input-12, 60] [/input-12, 1] [/input-12, 26] [/input-12, 26] [/input-12, 60] [/input-8, 875] [/input-8, 875] [/input-12, 60] [/input-12, 60] [/input-8, 875] 
split level 3: [/input-12, 37] [/input-8, 988] [/input-8, 867] [/input-8, 867] [/input-12, 37] [/input-8, 867] [/input-8, 867] [/input-12, 37] [/input-12, 37] [/input-8, 867] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08739900588989258
10 lb beta sum: 0.9514504671096802, worst -0.01708853244781494
Time: prepare 0.0082    bound 0.1600    transfer 0.0013    finalize 0.0027    func 0.1748    
Accumulated time: func 0.8035    prepare 0.0667    bound 0.7118    transfer 0.0109    finalize 0.0141    
all_split False
======================Cut inference begins======================
max lb tensor(0.67923987) min lb tensor(-0.01332521)
Number of Verified Splits: 377 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 4
#cuts 4-6: 15
#cuts >= 20: 0
BICCOS time: 0.2531287670135498 
BICCOS Cumulative time: 0.32681918144226074
Preprocessing time: 0.01185464859008789 Inference time: 0.22843694686889648 Add cuts time: 0.011963605880737305 Cut analysis time: 0.000873565673828125
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0079    decision 0.0206    set_bounds 0.0155    solve 0.1749    add 0.0293    
Accumulated time: pickout 0.0328    decision 0.6270    set_bounds 0.0693    solve 0.7432    add 0.8860    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
200 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([92, 45]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.82192979e+29, 1.95851196e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([92, 45]), tensor([-1.,  1.]), tensor([0, 0]), tensor([1.82192979e+29, 9.90047097e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003], [-1.0], [0], [1.8219690804266586e+29], [2]), '/input-12': (tensor([92, 26, 31, 45]), tensor([ 1., -1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([1.82192979e+29, 6.15188628e-02, 5.58236390e-02, 3.38729769e-01]), tensor([0, 1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003], [-1.0], [0], [1.8219690804266586e+29], [2]), '/input-12': (tensor([92, 26, 31, 45]), tensor([ 1., -1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.82192979e+29, 6.15188628e-02, 5.58236390e-02, 2.04902753e-01]), tensor([0, 1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003], [-1.0], [0], [1.8219690804266586e+29], [2]), '/input-12': (tensor([92, 26, 31]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 6.15188628e-02, 4.18673038e-01]), tensor([0, 1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, -1.0], [0, 0], [1.8219811696848547e+29, 0.07209387421607971], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 6.15188628e-02, 3.23504806e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, -1.0], [0, 0], [1.8219811696848547e+29, 0.07209387421607971], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 6.15188628e-02, 1.50756389e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, 1.0], [0, 0], [1.8219811696848547e+29, 0.07816614210605621], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 6.15188628e-02, 4.01288450e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, 1.0], [0, 0], [1.8219811696848547e+29, 0.07816614210605621], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 6.15188628e-02, 1.50823638e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [-1.0, -1.0], [0, 0], [8.975307608238836e-09, 0.07243454456329346], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 5.62102944e-02, 1.30116090e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [-1.0, -1.0], [0, 0], [8.975307608238836e-09, 0.07243454456329346], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 5.62102944e-02, 1.51855469e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [-1.0, 1.0], [0, 0], [8.975307608238836e-09, 0.07889589667320251], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 5.62102944e-02, 1.27159148e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [-1.0, 1.0], [0, 0], [8.975307608238836e-09, 0.07889589667320251], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 5.62102944e-02, 1.52132303e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, -1.0], [0, 0], [1.8219811696848547e+29, 0.07271470129489899], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 5.62102944e-02, 1.24190301e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, -1.0], [0, 0], [1.8219811696848547e+29, 0.07271470129489899], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 5.62102944e-02, 1.52503476e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, 1.0], [0, 0], [1.8219811696848547e+29, 0.0787779688835144], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([ 1.,  1., -1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 5.62102944e-02, 1.18792742e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1003, 556], [1.0, 1.0], [0, 0], [1.8219811696848547e+29, 0.0787779688835144], [2, 3]), '/input-12': (tensor([92, 26, 45]), tensor([1., 1., 1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 5.62102944e-02, 1.52461231e-01]), tensor([0, 1, 4]))}
Shallow branching resets to n domains:  17
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.3273063898086548
10 lb beta sum: 0.38232430815696716, worst -0.31433290243148804
Time: prepare 0.0015    bound 0.1658    transfer 0.0002    finalize 0.0003    func 0.1679    
Accumulated time: func 0.9715    prepare 0.0682    bound 0.8776    transfer 0.0112    finalize 0.0144    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] 
split level 1: [/input-12, 31] 
split level 2: [/input-12, 60] 
split level 3: [/input-12, 37] 
split level 4: [/input-12, 26] 
split level 5: [/input-8, 875] 
split level 6: [/input-8, 556] 
split level 7: [/input-8, 867] 
cut re-enabled after branching node selection
0 lb beta sum: 0.47465309500694275, worst -0.08674629032611847
10 lb beta sum: 0.7107299566268921, worst -0.08613498508930206
Time: prepare 0.0119    bound 0.1537    transfer 0.0020    finalize 0.0014    func 0.1707    
Accumulated time: func 1.1421    prepare 0.0806    bound 1.0312    transfer 0.0132    finalize 0.0158    
all_split False
======================Cut inference begins======================
max lb tensor(0.18924205) min lb tensor(-0.08595927)
Number of Verified Splits: 160 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.47465309500694275, worst -0.3595588803291321
10 lb beta sum: 0.9077865481376648, worst -0.3142908215522766
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 24.
#cuts 1-3: 4
#cuts 4-6: 15
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.28128552436828613 
BICCOS Cumulative time: 0.6081047058105469
Preprocessing time: 0.007306337356567383 Inference time: 0.26670145988464355 Add cuts time: 0.00620269775390625 Cut analysis time: 0.0010750293731689453
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08596 (8), -0.08427 (8), -0.08291 (8), -0.07970 (8), -0.07664 (8), -0.07634 (8), -0.07534 (8), -0.07500 (8), -0.07474 (8), -0.07473 (8), -0.07202 (8), -0.07153 (8), -0.06976 (8), -0.06962 (8), -0.06793 (8), -0.06637 (8), -0.06266 (8), -0.06194 (8), -0.06160 (8), -0.06106 (8), 
Length of domains: 96
Time: pickout 0.0005    decision 0.0270    set_bounds 0.0251    solve 0.1707    add 0.0756    
Accumulated time: pickout 0.0333    decision 0.6540    set_bounds 0.0944    solve 0.9139    add 0.9617    
Current (lb-rhs): -0.08595927059650421
296 domains visited
Cumulative time: 3.688347339630127

BaB round 2
batch: 96
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] [/input-12, 1] 
split level 1: [/input-8, 1061] [/input-8, 538] [/input-8, 1460] [/input-8, 659] [/input-8, 659] [/input-8, 1460] [/input-8, 1061] [/input-8, 538] [/input-8, 1061] [/input-8, 659] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07821071147918701
10 lb beta sum: 0.015165828168392181, worst -0.07797396183013916
Time: prepare 0.0095    bound 0.1625    transfer 0.0043    finalize 0.0038    func 0.1827    
Accumulated time: func 1.3249    prepare 0.0903    bound 1.1938    transfer 0.0175    finalize 0.0196    
all_split False
======================Cut inference begins======================
max lb tensor(0.60896039) min lb tensor(-0.07788682)
Number of Verified Splits: 208 of 384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 9
#cuts >= 20: 0
BICCOS time: 0.03363656997680664 
BICCOS Cumulative time: 0.6417412757873535
Preprocessing time: 0.011409521102905273 Inference time: 0.019679784774780273 Add cuts time: 0.0021996498107910156 Cut analysis time: 0.0003476142883300781
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07789 (10), -0.07587 (10), -0.07451 (10), -0.07152 (10), -0.06927 (10), -0.06867 (10), -0.06829 (10), -0.06823 (10), -0.06743 (10), -0.06720 (10), -0.06715 (10), -0.06628 (10), -0.06540 (10), -0.06472 (10), -0.06413 (10), -0.06410 (10), -0.06241 (10), -0.06212 (10), -0.06103 (10), -0.06103 (10), 
Length of domains: 176
Time: pickout 0.0137    decision 0.0187    set_bounds 0.0527    solve 0.1828    add 0.0763    
Accumulated time: pickout 0.0471    decision 0.6727    set_bounds 0.1471    solve 1.0967    add 1.0380    
Current (lb-rhs): -0.07788681983947754
472 domains visited
Cumulative time: 4.074340343475342

BaB round 3
batch: 176
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 659] [/input-8, 659] [/input-8, 659] [/input, 3529] [/input, 3529] [/input-8, 659] [/input-8, 659] [/input-8, 1061] [/input, 3529] [/input, 1463] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07204103469848633
10 lb beta sum: 0.3224194347858429, worst -0.07190275192260742
Time: prepare 0.0082    bound 0.1469    transfer 0.0019    finalize 0.0021    func 0.1614    
Accumulated time: func 1.4863    prepare 0.0986    bound 1.3407    transfer 0.0194    finalize 0.0217    
all_split False
======================Cut inference begins======================
max lb tensor(0.69387168) min lb tensor(-0.07184827)
Number of Verified Splits: 320 of 352
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 14.
#cuts 1-3: 14
#cuts >= 20: 0
BICCOS time: 0.04287600517272949 
BICCOS Cumulative time: 0.684617280960083
Preprocessing time: 0.010210514068603516 Inference time: 0.029387950897216797 Add cuts time: 0.0028896331787109375 Cut analysis time: 0.0003879070281982422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07185 (11), -0.07181 (11), -0.06674 (11), -0.06340 (11), -0.06317 (11), -0.06228 (11), -0.06211 (11), -0.06153 (11), -0.06088 (11), -0.06045 (11), -0.05935 (11), -0.05727 (11), -0.05696 (11), -0.05596 (11), -0.05413 (11), -0.05390 (11), -0.05314 (11), -0.05292 (11), -0.05252 (11), -0.05214 (11), 
Length of domains: 32
Time: pickout 0.0155    decision 0.0227    set_bounds 0.0127    solve 0.1615    add 0.0610    
Accumulated time: pickout 0.0625    decision 0.6954    set_bounds 0.1598    solve 1.2583    add 1.0989    
Current (lb-rhs): -0.07184827327728271
504 domains visited
Cumulative time: 4.398942708969116

BaB round 4
batch: 32
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 538] [/input, 1463] [/input, 1463] [/input, 3529] [/input-8, 538] [/input, 1463] [/input, 1463] [/input, 3529] [/input-8, 538] [/input, 1463] 
split level 1: [/input-8, 1460] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 1460] [/input-8, 538] [/input-8, 538] [/input-8, 538] [/input-8, 1460] [/input-8, 538] 
split level 2: [/input-8, 1003] [/input-8, 1003] [/input-8, 1460] [/input-8, 1460] [/input-8, 1003] [/input-8, 1003] [/input-8, 1460] [/input-8, 1460] [/input-8, 1003] [/input-8, 1003] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.052031517028808594
10 lb beta sum: 0.6829355359077454, worst -0.043821632862091064
Time: prepare 0.0062    bound 0.1546    transfer 0.0037    finalize 0.0021    func 0.1683    
Accumulated time: func 1.6546    prepare 0.1050    bound 1.4953    transfer 0.0232    finalize 0.0238    
all_split False
======================Cut inference begins======================
max lb tensor(0.31175411) min lb tensor(-0.04373176)
Number of Verified Splits: 187 of 256
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 16
#cuts >= 20: 0
BICCOS time: 0.02957463264465332 
BICCOS Cumulative time: 0.7141919136047363
Preprocessing time: 0.007620811462402344 Inference time: 0.01993870735168457 Add cuts time: 0.0016162395477294922 Cut analysis time: 0.00039887428283691406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04373 (14), -0.04174 (14), -0.04078 (14), -0.04033 (14), -0.03878 (14), -0.03777 (14), -0.03705 (14), -0.03462 (14), -0.03449 (14), -0.03421 (14), -0.03420 (14), -0.03335 (14), -0.03307 (14), -0.03280 (14), -0.03165 (14), -0.03126 (14), -0.03091 (14), -0.03074 (14), -0.03072 (14), -0.03054 (14), 
Length of domains: 69
Time: pickout 0.0069    decision 0.0132    set_bounds 0.0190    solve 0.1683    add 0.0162    
Accumulated time: pickout 0.0694    decision 0.7086    set_bounds 0.1788    solve 1.4266    add 1.1151    
Current (lb-rhs): -0.04373176395893097
573 domains visited
Cumulative time: 4.652915954589844

BaB round 5
batch: 69
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] 
split level 1: [/input-8, 1061] [/input-8, 1061] [/input, 3529] [/input-8, 1003] [/input, 3529] [/input-8, 1061] [/input, 3529] [/input, 3529] [/input-8, 1061] [/input-8, 1460] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.0388873815536499
10 lb beta sum: 0.42535531520843506, worst -0.03880190849304199
Time: prepare 0.0069    bound 0.1590    transfer 0.0024    finalize 0.0018    func 0.1719    
Accumulated time: func 1.8265    prepare 0.1121    bound 1.6543    transfer 0.0256    finalize 0.0257    
all_split False
======================Cut inference begins======================
max lb tensor(0.11529678) min lb tensor(-0.03878868)
Number of Verified Splits: 200 of 276
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 18
#cuts >= 20: 0
BICCOS time: 0.03218793869018555 
BICCOS Cumulative time: 0.7463798522949219
Preprocessing time: 0.008131265640258789 Inference time: 0.022065162658691406 Add cuts time: 0.0015511512756347656 Cut analysis time: 0.00044035911560058594
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03879 (16), -0.03715 (16), -0.03663 (16), -0.03581 (16), -0.03483 (16), -0.03414 (16), -0.03366 (16), -0.03299 (16), -0.03182 (16), -0.03119 (16), -0.03001 (16), -0.02984 (16), -0.02816 (16), -0.02805 (16), -0.02748 (16), -0.02615 (16), -0.02551 (16), -0.02424 (16), -0.02384 (16), -0.02377 (16), 
Length of domains: 76
Time: pickout 0.0021    decision 0.0177    set_bounds 0.0166    solve 0.1724    add 0.0021    
Accumulated time: pickout 0.0715    decision 0.7263    set_bounds 0.1954    solve 1.5990    add 1.1173    
Current (lb-rhs): -0.038788676261901855
649 domains visited
Cumulative time: 4.896934747695923

BaB round 6
batch: 76
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] [/input-8, 884] 
split level 1: [/input, 3512] [/input, 3512] [/input, 3512] [/input, 3512] [/input-8, 541] [/input-8, 541] [/input, 3512] [/input, 3512] [/input, 3512] [/input, 3512] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028589844703674316
10 lb beta sum: 0.19600960612297058, worst -0.02855360507965088
Time: prepare 0.0076    bound 0.1560    transfer 0.0019    finalize 0.0021    func 0.1696    
Accumulated time: func 1.9961    prepare 0.1199    bound 1.8103    transfer 0.0275    finalize 0.0278    
all_split False
======================Cut inference begins======================
max lb tensor(0.05687010) min lb tensor(-0.02854514)
Number of Verified Splits: 244 of 304
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 19
#cuts >= 20: 0
BICCOS time: 0.04013490676879883 
BICCOS Cumulative time: 0.7865147590637207
Preprocessing time: 0.008931636810302734 Inference time: 0.02919292449951172 Add cuts time: 0.0015621185302734375 Cut analysis time: 0.0004482269287109375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02855 (18), -0.02667 (18), -0.02557 (18), -0.02497 (18), -0.02366 (18), -0.02308 (18), -0.02200 (18), -0.02093 (18), -0.02007 (18), -0.01968 (18), -0.01932 (18), -0.01795 (18), -0.01779 (18), -0.01726 (18), -0.01667 (18), -0.01575 (18), -0.01558 (18), -0.01481 (18), -0.01368 (18), -0.01340 (18), 
Length of domains: 60
Time: pickout 0.0020    decision 0.0159    set_bounds 0.0210    solve 0.1697    add 0.0011    
Accumulated time: pickout 0.0735    decision 0.7422    set_bounds 0.2164    solve 1.7687    add 1.1184    
Current (lb-rhs): -0.028545141220092773
709 domains visited
Cumulative time: 5.147661209106445

BaB round 7
batch: 60
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3512] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1003] [/input-8, 1061] [/input, 2248] [/input, 3512] [/input, 2248] [/input, 3512] 
split level 1: [/input, 2248] [/input, 1736] [/input, 1736] [/input, 1736] [/input, 1736] [/input, 1736] [/input-8, 541] [/input, 2248] [/input-8, 541] [/input, 2248] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.019536137580871582
10 lb beta sum: 0.1397596150636673, worst -0.019520044326782227
Time: prepare 0.0061    bound 0.1550    transfer 0.0013    finalize 0.0014    func 0.1654    
Accumulated time: func 2.1615    prepare 0.1266    bound 1.9653    transfer 0.0288    finalize 0.0292    
all_split False
======================Cut inference begins======================
max lb tensor(0.03865457) min lb tensor(-0.01950884)
Number of Verified Splits: 166 of 240
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 20.
#cuts 1-3: 20
#cuts >= 20: 0
BICCOS time: 0.031341552734375 
BICCOS Cumulative time: 0.8178563117980957
Preprocessing time: 0.007138729095458984 Inference time: 0.022153139114379883 Add cuts time: 0.0012636184692382812 Cut analysis time: 0.0007860660552978516
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01951 (20), -0.01823 (20), -0.01653 (20), -0.01639 (20), -0.01625 (20), -0.01523 (20), -0.01496 (20), -0.01342 (20), -0.01327 (20), -0.01316 (20), -0.01195 (20), -0.01192 (20), -0.01171 (20), -0.01151 (20), -0.01067 (20), -0.01028 (20), -0.01027 (20), -0.01017 (20), -0.00932 (20), -0.00911 (20), 
Length of domains: 74
Time: pickout 0.0028    decision 0.0156    set_bounds 0.0176    solve 0.1655    add 0.0683    
Accumulated time: pickout 0.0762    decision 0.7578    set_bounds 0.2340    solve 1.9342    add 1.1867    
Current (lb-rhs): -0.019508838653564453
783 domains visited
Cumulative time: 5.456230163574219

BaB round 8
batch: 74
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 801] [/input-8, 860] [/input-8, 860] [/input-8, 801] [/input-8, 801] [/input-8, 801] [/input-8, 801] [/input-8, 801] [/input-8, 801] [/input, 2248] 
split level 1: [/input-8, 860] [/input-8, 1461] [/input-8, 1461] [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input-8, 860] [/input-8, 1461] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.005443572998046875
10 lb beta sum: 0.011998439207673073, worst -0.005440950393676758
Time: prepare 0.0074    bound 0.1585    transfer 0.0010    finalize 0.0019    func 0.1707    
Accumulated time: func 2.3321    prepare 0.1341    bound 2.1237    transfer 0.0298    finalize 0.0311    
all_split False
======================Cut inference begins======================
max lb tensor(0.02519369) min lb tensor(-0.00543141)
Number of Verified Splits: 276 of 296
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 23
#cuts >= 20: 0
BICCOS time: 0.04897308349609375 
BICCOS Cumulative time: 0.8668293952941895
Preprocessing time: 0.008759260177612305 Inference time: 0.03815889358520508 Add cuts time: 0.0013556480407714844 Cut analysis time: 0.0006992816925048828
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00543 (22), -0.00425 (22), -0.00419 (22), -0.00352 (22), -0.00301 (22), -0.00272 (22), -0.00249 (22), -0.00228 (22), -0.00212 (22), -0.00196 (22), -0.00147 (22), -0.00126 (22), -0.00123 (22), -0.00094 (22), -0.00094 (22), -0.00068 (22), -0.00057 (22), -0.00055 (22), -0.00049 (22), -0.00004 (22), 
Length of domains: 20
Time: pickout 0.0152    decision 0.0186    set_bounds 0.0169    solve 0.1707    add 0.0466    
Accumulated time: pickout 0.0914    decision 0.7764    set_bounds 0.2509    solve 2.1049    add 1.2333    
Current (lb-rhs): -0.005431413650512695
803 domains visited
Cumulative time: 5.780958890914917

BaB round 9
batch: 20
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 93] [/input-8, 93] [/input-8, 93] [/input-8, 93] [/input-8, 93] [/input-8, 93] [/input-8, 93] [/input-8, 93] [/input-8, 93] [/input-8, 93] 
split level 1: [/input, 1466] [/input, 3272] [/input, 1466] [/input, 1466] [/input, 1466] [/input-8, 801] [/input, 1466] [/input-8, 860] [/input, 1466] [/input, 3272] 
split level 2: [/input, 3272] [/input, 1466] [/input-8, 860] [/input, 3272] [/input, 3272] [/input-8, 1461] [/input, 3272] [/input, 1466] [/input-8, 1461] [/input, 1466] 
split level 3: [/input-8, 1461] [/input-8, 860] [/input, 3272] [/input-8, 860] [/input-8, 860] [/input, 3272] [/input-8, 1461] [/input-8, 1461] [/input-8, 860] [/input-8, 860] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.009318947792053223

all verified at 0th iter
Time: prepare 0.0080    bound 0.0059    transfer 0.0023    finalize 0.0019    func 0.0200    
Accumulated time: func 2.3522    prepare 0.1423    bound 2.1296    transfer 0.0320    finalize 0.0330    
all_split False
======================Cut inference begins======================
max lb tensor(0.04286218) min lb tensor(0.00931895)
Number of Verified Splits: 320 of 320
No cut inferred: All or none verified.
Total number of valid cuts: 23.
#cuts 1-3: 23
#cuts >= 20: 0
BICCOS time: 0.00945591926574707 
BICCOS Cumulative time: 0.8762853145599365
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0016    decision 0.0182    set_bounds 0.0278    solve 0.0201    add 0.0004    
Accumulated time: pickout 0.0930    decision 0.7946    set_bounds 0.2787    solve 2.1250    add 1.2337    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
803 domains visited
Cumulative time: 5.859686851501465


Properties batch 5, size 1
Remaining timeout: 167.88331747055054
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 167.88322734832764
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 167.88319993019104
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 167.88317823410034
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 32.1179 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 188, vnnlib ID: 188 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-2.91176009, -6.98036766, -2.84487700, -4.53986120, -3.38612461,
         -4.94995880, -5.20888853, -6.30824423, -4.65725613, -6.36737871]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [467]; unstable size 467; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 229, 1, 467] with unstable size 228 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 467] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 467] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [228]; unstable size 228; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 228] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 228] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[-0.97516203,  1.98761368,  0.85461819, -0.25794768,  1.12561297,
          1.30599177,  2.30291891, -0.37233740,  1.60615540]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-2.91176009, -6.98036766, -2.84487700, -4.53986120, -3.38612461,
         -4.94995880, -5.20888853, -6.30824423, -4.65725613, -6.36737871]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-2.63235426, -6.99965382, -3.16620398, -4.74267912, -3.64146614,
          -5.16480732, -5.39866543, -6.50665092, -4.55494928, -6.46017027],
         [-2.63235426, -6.99965382, -3.16620398, -4.74267912, -3.64146614,
          -5.16480732, -5.39866543, -6.50665092, -4.55494928, -6.46017027]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.53384972,  0.47526217,  1.38874531]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0070 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0558 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 189, vnnlib ID: 189 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -7.48303747, -10.29648781,  -4.77946949,  -6.41142654,  -3.71523380,
          -6.92542839,  -5.50940371,  -7.37353468,  -9.88126087,  -9.47254848]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [427]; unstable size 427; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 239, 1, 427] with unstable size 238 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 427] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 427] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [238]; unstable size 238; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 238] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 238] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[2.48654866, 5.05169964, 0.07906568, 1.63433266, 2.04545784, 0.66316938,
         2.76845503, 4.94088602, 4.35907745]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0816 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 190, vnnlib ID: 190 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -6.12282085,  -8.68214226, -10.30647087, -10.71084213,  -9.83157253,
         -12.23327827, -10.64780331, -11.54215813,  -3.88245940,  -8.45811939]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [654]; unstable size 654; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 194, 1, 654] with unstable size 193 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 19, 1, 654] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 654] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [193]; unstable size 193; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 19, 1, 193] with unstable size 18 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 193] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [18]; unstable size 18; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 18] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[0.77125776, 3.34607625, 4.68589306, 5.31103945, 4.23434162, 6.53741407,
         5.22720814, 5.57845974, 3.04642582]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0456 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 191, vnnlib ID: 191 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -8.91402149, -10.96457195,  -4.60119486,  -3.07470465,  -3.85695314,
          -3.09889174,  -5.81089735,  -5.97126102,  -9.49198723, -10.05299187]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [611]; unstable size 611; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 278, 1, 611] with unstable size 277 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 17, 1, 611] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 611] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [277]; unstable size 277; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 17, 1, 277] with unstable size 16 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 277] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [16]; unstable size 16; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 16] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 4.15813017,  6.06970549,  0.46179676, -0.24430588, -0.42243236,
          1.52134800,  1.26745176,  4.78580856,  5.02399063]], device='cuda:0') None
Remain 2 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -8.91402149, -10.96457195,  -4.60119486,  -3.07470465,  -3.85695314,
          -3.09889174,  -5.81089735,  -5.97126102,  -9.49198723, -10.05299187]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.09659863, -11.14431095,  -4.78569984,  -3.24227643,  -4.00490522,
           -3.02182770,  -6.23932791,  -5.82052755,  -9.75665855, -10.23669529],
         [ -9.09659863, -11.14431095,  -4.78569984,  -3.24227643,  -4.00490522,
           -3.02182770,  -6.23932791,  -5.82052755,  -9.75665855, -10.23669529]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.76262879, -0.22044873]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0064 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0728 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 192, vnnlib ID: 192 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-14.02367878, -16.68686485,  -9.24556446, -13.41522598, -11.11723232,
         -13.42477131, -11.50259304, -13.30918312, -17.15509415, -16.44651794]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [639]; unstable size 639; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 297, 1, 639] with unstable size 296 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 18, 1, 639] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 639] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [296]; unstable size 296; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 18, 1, 296] with unstable size 17 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 296] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [17]; unstable size 17; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 17] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.69086027, 5.29207230, 2.62997913, 0.65836829, 2.47528219, 0.66326284,
         2.12296367, 6.32425117, 5.31157494]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0675 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 193, vnnlib ID: 193 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-12.20210648,  -8.82046795, -12.04976559, -10.42980194, -10.17031384,
         -10.70486259, -10.72393131,  -9.02217484, -12.87825584,  -7.13908768]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [635]; unstable size 635; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 211, 1, 635] with unstable size 210 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 635] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 635] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [210]; unstable size 210; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 210] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 210] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[3.61224699, 0.46522084, 2.92189693, 1.71166325, 1.48281193, 1.75262117,
         1.73563433, 0.26523256, 4.10882759]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0657 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 194, vnnlib ID: 194 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -9.03137493, -14.28631020,  -6.88360214, -10.38493061,  -7.40738487,
         -10.63051796,  -9.41903210, -11.08277416, -12.21933270, -13.69361401]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [568]; unstable size 568; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 232, 1, 568] with unstable size 231 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 21, 1, 568] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 568] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [231]; unstable size 231; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 21, 1, 231] with unstable size 20 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 231] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [20]; unstable size 20; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 20] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.97100019,  5.75294304,  2.62268877, -0.44995385,  2.71119261,
          1.17250752,  2.60135579,  3.52469158,  4.91072893]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[ -9.03137493, -14.28631020,  -6.88360214, -10.38493061,  -7.40738487,
         -10.63051796,  -9.41903210, -11.08277416, -12.21933270, -13.69361401]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[ -9.13951874, -14.36657238,  -7.07374001, -10.33502197,  -7.07293224,
          -10.55265427,  -9.27702045, -10.69626236, -12.32909775, -13.79920959]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[-0.00080776]]], device='cuda:0')
number of violation:  1
Attack finished in 0.0075 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0740 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 195, vnnlib ID: 195 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.98067474, -6.32652664, -2.95507026, -3.61686778, -3.40175915,
         -3.97366190, -4.56966162, -4.09664774, -7.20802689, -7.00610399]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [544]; unstable size 544; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 205, 1, 544] with unstable size 204 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 544] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 544] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [204]; unstable size 204; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 204] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 204] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 2.09186625,  1.89036942,  0.01000333, -0.14229441,  0.23984742,
          0.71584237,  0.47055030,  3.11726594,  2.74282694]], device='cuda:0') None
Remain 1 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.98067474, -6.32652664, -2.95507026, -3.61686778, -3.40175915,
         -3.97366190, -4.56966162, -4.09664774, -7.20802689, -7.00610399]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  8.30it/s]100%|██████████| 1/1 [00:00<00:00,  8.29it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-6.00582647, -6.23171902, -3.06578517, -3.62733269, -3.13952780,
          -3.98571920, -4.44840622, -4.01183987, -7.31225204, -6.86313581]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.07374263]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1232 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 11.540643692016602
alpha/beta optimization time: 1.2927045822143555
initial alpha-crown bounds: tensor([[ 2.13471889,  1.94881105,  0.04223788, -0.12571090,  0.27321029,
          0.80250442,  0.49561977,  3.17971420,  2.78953886]], device='cuda:0')
Only one property for bab verification.
Number of class (without rhs): 1 ; Worst class: (+ rhs) -0.12571090459823608
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.51097106933594
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.51093316078186
Verifying property 1 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 2, size 1
Remaining timeout: 198.51090335845947
Verifying property 2 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 3, size 1
Remaining timeout: 198.51087880134583
Verifying property 3 with 1 instances.
##### Instance 195 first 10 spec matrices: 
tensor([[[ 0.,  0.,  1.,  0., -1.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.12571090]], device='cuda:0') need to verify.
Model prediction is: tensor([-5.98067474, -6.32652664, -2.95507026, -3.61686778, -3.40175915,
        -3.97366190, -4.56966162, -4.09664774, -7.20802689, -7.00610399],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.12571090]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 544
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 200
Node /15 input 0: size torch.Size([100]) unstable 13
-----------------
# of unstable neurons: 757
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 9.846687316894531e-05
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.12571024894714355
10 lb beta sum: 0.0, worst -0.12571316957473755
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0565    transfer 0.0001    finalize 0.0001    func 0.0570    
Accumulated time: func 0.0570    prepare 0.0002    bound 0.0565    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] 
split level 1: [/input-12, 58] 
split level 2: [/input-12, 33] 
split level 3: [/input-12, 40] 
split level 4: [/input-8, 179] 
split level 5: [/input-8, 2044] 
split level 6: [/input, 1448] 
split level 7: [/input-8, 1028] 
split level 8: [/input-8, 296] 
split level 9: [/input-8, 2016] 
split level 10: [/input, 1689] 
split level 11: [/input, 1688] 
split level 12: [/input-8, 493] 
split level 13: [/input, 454] 
split level 14: [/input, 1705] 
split level 15: [/input, 2121] 
split level 16: [/input-8, 2042] 
split level 17: [/input, 2105] 
split level 18: [/input-8, 1733] 
split level 19: [/input, 453] 
split level 20: [/input, 298] 
split level 21: [/input, 1321] 
split level 22: [/input, 1305] 
split level 23: [/input-8, 259] 
split level 24: [/input, 3524] 
split level 25: [/input-8, 138] 
split level 26: [/input, 2244] 
split level 27: [/input-8, 2036] 
split level 28: [/input, 362] 
split level 29: [/input-8, 494] 
split level 30: [/input, 2485] 
split level 31: [/input-8, 469] 
split level 32: [/input-8, 787] 
split level 33: [/input-8, 598] 
split level 34: [/input, 3555] 
split level 35: [/input, 1703] 
split level 36: [/input-8, 1053] 
split level 37: [/input-8, 501] 
split level 38: [/input-8, 597] 
split level 39: [/input, 2155] 
split level 40: [/input, 1337] 
split level 41: [/input-8, 477] 
split level 42: [/input, 2578] 
split level 43: [/input, 3237] 
split level 44: [/input-8, 140] 
split level 45: [/input-8, 439] 
split level 46: [/input-8, 452] 
split level 47: [/input-8, 423] 
split level 48: [/input, 77] 
split level 49: [/input-8, 2045] 
split level 50: [/input, 2215] 
split level 51: [/input-8, 2031] 
split level 52: [/input, 312] 
split level 53: [/input-8, 2035] 
split level 54: [/input, 435] 
split level 55: [/input-8, 921] 
split level 56: [/input-8, 2034] 
split level 57: [/input, 2137] 
split level 58: [/input-8, 473] 
split level 59: [/input-8, 2037] 
split level 60: [/input-8, 980] 
split level 61: [/input, 469] 
split level 62: [/input, 3401] 
split level 63: [/input, 2453] 
split level 64: [/input-8, 925] 
split level 65: [/input, 3385] 
split level 66: [/input-8, 1947] 
split level 67: [/input, 3239] 
split level 68: [/input, 2625] 
split level 69: [/input-8, 872] 
split level 70: [/input-8, 500] 
split level 71: [/input-8, 431] 
split level 72: [/input, 2211] 
split level 73: [/input, 3163] 
split level 74: [/input-8, 2023] 
split level 75: [/input-8, 1970] 
split level 76: [/input-8, 2025] 
split level 77: [/input-8, 1977] 
split level 78: [/input, 3222] 
split level 79: [/input, 282] 
split level 80: [/input, 438] 
split level 81: [/input, 2580] 
split level 82: [/input, 2214] 
split level 83: [/input, 2195] 
split level 84: [/input, 214] 
split level 85: [/input-8, 924] 
split level 86: [/input-8, 478] 
split level 87: [/input, 2473] 
split level 88: [/input-8, 429] 
split level 89: [/input, 3560] 
split level 90: [/input, 213] 
split level 91: [/input, 379] 
split level 92: [/input, 378] 
split level 93: [/input-8, 486] 
split level 94: [/input, 1720] 
split level 95: [/input, 2610] 
split level 96: [/input, 4037] 
split level 97: [/input-8, 794] 
split level 98: [/input, 296] 
split level 99: [/input, 3954] 
split level 100: [/input, 3211] 
split level 101: [/input, 193] 
split level 102: [/input-8, 1925] 
split level 103: [/input-8, 124] 
split level 104: [/input, 2189] 
split level 105: [/input-8, 590] 
split level 106: [/input-8, 2032] 
split level 107: [/input, 401] 
split level 108: [/input, 179] 
split level 109: [/input, 2153] 
split level 110: [/input, 2261] 
split level 111: [/input, 3511] 
split level 112: [/input, 197] 
split level 113: [/input-8, 1994] 
split level 114: [/input, 3220] 
split level 115: [/input, 1355] 
split level 116: [/input-8, 454] 
split level 117: [/input, 1371] 
split level 118: [/input, 2082] 
split level 119: [/input, 2474] 
split level 120: [/input, 2212] 
split level 121: [/input-8, 392] 
split level 122: [/input, 3876] 
split level 123: [/input-8, 398] 
split level 124: [/input, 2196] 
split level 125: [/input-8, 1452] 
split level 126: [/input, 4038] 
split level 127: [/input-8, 1990] 
split level 128: [/input, 1339] 
split level 129: [/input, 102] 
split level 130: [/input, 4020] 
split level 131: [/input, 2089] 
split level 132: [/input, 3801] 
split level 133: [/input, 103] 
split level 134: [/input, 1323] 
split level 135: [/input, 3414] 
split level 136: [/input-8, 2046] 
split level 137: [/input, 2182] 
split level 138: [/input, 199] 
split level 139: [/input, 3196] 
split level 140: [/input-8, 1390] 
split level 141: [/input, 98] 
split level 142: [/input, 3180] 
split level 143: [/input, 68] 
split level 144: [/input, 129] 
split level 145: [/input, 2190] 
split level 146: [/input, 3145] 
split level 147: [/input-8, 449] 
split level 148: [/input-8, 397] 
split level 149: [/input, 196] 
split level 150: [/input, 3161] 
split level 151: [/input, 472] 
split level 152: [/input-8, 1610] 
split level 153: [/input, 1381] 
split level 154: [/input, 3111] 
split level 155: [/input-8, 1989] 
split level 156: [/input, 3226] 
split level 157: [/input, 2075] 
split level 158: [/input-8, 1979] 
split level 159: [/input, 3750] 
split level 160: [/input, 3800] 
split level 161: [/input, 1913] 
split level 162: [/input, 3114] 
split level 163: [/input, 3755] 
split level 164: [/input, 3112] 
split level 165: [/input-8, 1124] 
split level 166: [/input, 111] 
split level 167: [/input, 3047] 
split level 168: [/input, 3081] 
split level 169: [/input, 3429] 
split level 170: [/input, 1576] 
split level 171: [/input, 1592] 
split level 172: [/input, 2280] 
split level 173: [/input-8, 412] 
split level 174: [/input, 3785] 
split level 175: [/input, 2341] 
split level 176: [/input-8, 395] 
split level 177: [/input, 2059] 
split level 178: [/input, 3048] 
split level 179: [/input, 3173] 
split level 180: [/input, 58] 
split level 181: [/input-8, 2022] 
split level 182: [/input, 2081] 
split level 183: [/input, 89] 
split level 184: [/input, 265] 
split level 185: [/input-8, 1993] 
split level 186: [/input-8, 2006] 
split level 187: [/input, 2052] 
split level 188: [/input, 3967] 
split level 189: [/input, 3452] 
split level 190: [/input, 3337] 
split level 191: [/input, 1865] 
split level 192: [/input, 72] 
split level 193: [/input, 3019] 
split level 194: [/input, 3098] 
split level 195: [/input, 464] 
split level 196: [/input, 2314] 
split level 197: [/input, 3300] 
split level 198: [/input, 156] 
split level 199: [/input, 2352] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1257094144821167
10 lb beta sum: 0.0, worst -0.12571054697036743
Time: prepare 0.0114    bound 0.1045    transfer 0.0020    finalize 0.0029    func 0.1234    
Accumulated time: func 0.1804    prepare 0.0218    bound 0.1609    transfer 0.0021    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.02027017) min lb tensor(-0.12570822)
Number of Verified Splits: 3 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.010998010635375977 
BICCOS Cumulative time: 0.010998010635375977
Preprocessing time: 0.01013326644897461 Inference time: 0.0005164146423339844 Add cuts time: 9.274482727050781e-05 Cut analysis time: 0.000255584716796875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12097 (1), -0.12091 (1), -0.12088 (1), -0.12062 (1), -0.12043 (1), -0.12023 (1), -0.12021 (1), -0.12015 (1), -0.12013 (1), -0.12004 (1), -0.11998 (1), -0.11968 (1), -0.11949 (1), -0.11942 (1), -0.11908 (1), -0.11905 (1), -0.11889 (1), -0.11885 (1), -0.11871 (1), -0.11834 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5466    set_bounds 0.0091    solve 0.1235    add 0.1977    
Accumulated time: pickout 0.0004    decision 0.5466    set_bounds 0.0091    solve 0.1235    add 0.1977    
Current (lb-rhs): -0.12096560001373291
50 domains visited
Cumulative time: 0.967087984085083

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 33] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 2: [/input-12, 40] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 3: [/input-8, 1028] [/input-12, 40] [/input-8, 1028] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-12, 40] [/input-8, 1028] [/input-12, 40] [/input-12, 40] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.11640286445617676
10 lb beta sum: 0.5046884417533875, worst -0.07250571250915527
Time: prepare 0.0077    bound 0.1270    transfer 0.0013    finalize 0.0024    func 0.1410    
Accumulated time: func 0.3214    prepare 0.0298    bound 0.2879    transfer 0.0034    finalize 0.0054    
all_split False
======================Cut inference begins======================
max lb tensor(0.35514992) min lb tensor(-0.07245487)
Number of Verified Splits: 148 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.019916772842407227 
BICCOS Cumulative time: 0.030914783477783203
Preprocessing time: 0.012067079544067383 Inference time: 0.005533456802368164 Add cuts time: 0.002056121826171875 Cut analysis time: 0.0002601146697998047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04611 (2), -0.04596 (2), -0.04589 (2), -0.04586 (2), -0.04568 (2), -0.04563 (2), -0.04554 (2), -0.04540 (2), -0.04536 (2), -0.04532 (2), -0.04508 (2), -0.04506 (2), -0.04489 (2), -0.04478 (2), -0.04465 (2), -0.04457 (2), -0.04429 (2), -0.04417 (2), -0.04382 (2), -0.04373 (2), 
Length of domains: 50
Time: pickout 0.0085    decision 0.0222    set_bounds 0.0114    solve 0.1411    add 0.2158    
Accumulated time: pickout 0.0088    decision 0.5687    set_bounds 0.0204    solve 0.2646    add 0.4135    
Current (lb-rhs): -0.04610840976238251
100 domains visited
Cumulative time: 1.3931481838226318

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 2: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 3: [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] [/input-8, 1028] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8384798765182495, worst -0.046107932925224304
10 lb beta sum: 0.8384798765182495, worst -0.04737512767314911
Time: prepare 0.0187    bound 0.1273    transfer 0.0014    finalize 0.0024    func 0.1529    
Accumulated time: func 0.4744    prepare 0.0488    bound 0.4153    transfer 0.0048    finalize 0.0079    
all_split False
======================Cut inference begins======================
max lb tensor(0.45985442) min lb tensor(-0.04575305)
Number of Verified Splits: 150 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.021240711212158203 
BICCOS Cumulative time: 0.052155494689941406
Preprocessing time: 0.011804342269897461 Inference time: 0.0063016414642333984 Add cuts time: 0.0028808116912841797 Cut analysis time: 0.00025391578674316406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03639 (3), -0.03631 (3), -0.03631 (3), -0.03631 (3), -0.03631 (3), -0.03609 (3), -0.03596 (3), -0.03588 (3), -0.03588 (3), -0.03558 (3), -0.03545 (3), -0.03498 (3), -0.03474 (3), -0.03450 (3), -0.03435 (3), -0.03398 (3), -0.03391 (3), -0.03389 (3), -0.03389 (3), -0.03389 (3), 
Length of domains: 50
Time: pickout 0.0079    decision 0.0208    set_bounds 0.0157    solve 0.1530    add 0.2165    
Accumulated time: pickout 0.0168    decision 0.5895    set_bounds 0.0361    solve 0.4176    add 0.6299    
Current (lb-rhs): -0.03639437258243561
150 domains visited
Cumulative time: 1.835322618484497

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 2: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-8, 2044] 
split level 3: [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 2044] [/input-8, 1028] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8393102884292603, worst -0.036394283175468445
10 lb beta sum: 0.8393102884292603, worst -0.03657485544681549
Time: prepare 0.0189    bound 0.1266    transfer 0.0015    finalize 0.0025    func 0.1522    
Accumulated time: func 0.6265    prepare 0.0679    bound 0.5418    transfer 0.0062    finalize 0.0104    
all_split False
======================Cut inference begins======================
max lb tensor(0.46564287) min lb tensor(-0.03627597)
Number of Verified Splits: 135 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.021298646926879883 
BICCOS Cumulative time: 0.07345414161682129
Preprocessing time: 0.01188206672668457 Inference time: 0.006131887435913086 Add cuts time: 0.0030341148376464844 Cut analysis time: 0.0002505779266357422
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02523 (4), -0.02523 (4), -0.02523 (4), -0.02518 (4), -0.02518 (4), -0.02518 (4), -0.02516 (4), -0.02509 (4), -0.02509 (4), -0.02509 (4), -0.02509 (4), -0.02508 (4), -0.02506 (4), -0.02506 (4), -0.02506 (4), -0.02474 (4), -0.02418 (4), -0.02402 (4), -0.02399 (4), -0.02396 (4), 
Length of domains: 50
Time: pickout 0.0079    decision 0.0205    set_bounds 0.0162    solve 0.1522    add 0.3929    
Accumulated time: pickout 0.0247    decision 0.6100    set_bounds 0.0523    solve 0.5699    add 1.0229    
Current (lb-rhs): -0.025234311819076538
200 domains visited
Cumulative time: 2.446699619293213

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] [/input-12, 35] 
split level 1: [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] 
split level 2: [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] 
split level 3: [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input, 89] [/input-8, 2042] [/input-8, 2042] 
cut re-enabled after branching node selection
0 lb beta sum: 0.8387334942817688, worst -0.02523478865623474
10 lb beta sum: 0.8387334942817688, worst -0.02712365984916687
Time: prepare 0.0187    bound 0.1287    transfer 0.0013    finalize 0.0025    func 0.1538    
Accumulated time: func 0.7803    prepare 0.0869    bound 0.6705    transfer 0.0075    finalize 0.0128    
all_split False
======================Cut inference begins======================
max lb tensor(0.47125679) min lb tensor(-0.02523431)
Number of Verified Splits: 126 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.021390438079833984 
BICCOS Cumulative time: 0.09484457969665527
Preprocessing time: 0.011768341064453125 Inference time: 0.006511211395263672 Add cuts time: 0.002852201461791992 Cut analysis time: 0.0002586841583251953
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01815 (5), -0.01806 (5), -0.01795 (5), -0.01786 (5), -0.01784 (5), -0.01779 (5), -0.01727 (5), -0.01727 (5), -0.01727 (5), -0.01718 (5), -0.01718 (5), -0.01718 (5), -0.01715 (5), -0.01708 (5), -0.01708 (5), -0.01708 (5), -0.01703 (5), -0.01703 (5), -0.01703 (5), -0.01697 (5), 
Length of domains: 50
Time: pickout 0.0012    decision 0.0208    set_bounds 0.0162    solve 0.1538    add 0.2206    
Accumulated time: pickout 0.0259    decision 0.6308    set_bounds 0.0685    solve 0.7237    add 1.2435    
Current (lb-rhs): -0.01814696192741394
250 domains visited
Cumulative time: 2.8880767822265625

Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, -1.0, -1.0], [0, 0, 0], [1.821929790337521e+29, 0.0068839057348668575, 0.007385359611362219], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([-1., -1.]), tensor([0, 0]), tensor([0.06610069, 0.00010120]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, -1.0, -1.0], [0, 0, 0], [1.821929790337521e+29, 0.0068839057348668575, 0.007385359611362219], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([-1.,  1.]), tensor([0, 0]), tensor([0.06610069, 0.48765242]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([ 179, 1028, 2044]), tensor([-1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 6.88390573e-03, 3.32807167e-03]), tensor([0, 2, 3])), '/input-12': ([40], [-1.0], [0], [0.06610068678855896], [1])}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028], [-1.0, 1.0], [0, 0], [1.821929790337521e+29, 0.00336431129835546], [0, 2]), '/input-12': (tensor([40, 35]), tensor([-1., -1.]), tensor([0, 0]), tensor([0.06610069, 0.00011097]), tensor([1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028], [-1.0, 1.0], [0, 0], [1.821929790337521e+29, 0.00336431129835546], [0, 2]), '/input-12': (tensor([40, 35]), tensor([-1.,  1.]), tensor([0, 0]), tensor([0.06610069, 0.48898149]), tensor([1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, -1.0, -1.0], [0, 0, 0], [1.821929790337521e+29, 0.006835357751697302, 0.006810144986957312], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([ 1., -1.]), tensor([0, 0]), tensor([0.07179703, 0.00019856]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, -1.0, -1.0], [0, 0, 0], [1.821929790337521e+29, 0.006835357751697302, 0.006810144986957312], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([1., 1.]), tensor([0, 0]), tensor([0.07179703, 0.48837164]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, -1.0, 1.0], [0, 0, 0], [1.821929790337521e+29, 0.006835357751697302, 0.0034674869384616613], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([ 1., -1.]), tensor([0, 0]), tensor([7.17970282e-02, 9.00493396e-05]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, -1.0, 1.0], [0, 0, 0], [1.821929790337521e+29, 0.006835357751697302, 0.0034674869384616613], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([1., 1.]), tensor([0, 0]), tensor([0.07179703, 0.48927802]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, 1.0, -1.0], [0, 0, 0], [1.821929790337521e+29, 0.0035057233180850744, 0.00672598322853446], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([ 1., -1.]), tensor([0, 0]), tensor([7.17970282e-02, 5.05612625e-05]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, 1.0, -1.0], [0, 0, 0], [1.821929790337521e+29, 0.0035057233180850744, 0.00672598322853446], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([1., 1.]), tensor([0, 0]), tensor([0.07179703, 0.48852542]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, 1.0, 1.0], [0, 0, 0], [1.821929790337521e+29, 0.0035057233180850744, 0.0033951865043491125], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([ 1., -1.]), tensor([0, 0]), tensor([0.07179703, 0.00013487]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([179, 1028, 2044], [-1.0, 1.0, 1.0], [0, 0, 0], [1.821929790337521e+29, 0.0035057233180850744, 0.0033951865043491125], [0, 2, 3]), '/input-12': (tensor([40, 35]), tensor([1., 1.]), tensor([0, 0]), tensor([0.07179703, 0.48970485]), tensor([1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': (tensor([179]), tensor([1.]), tensor([0]), tensor([1.82192979e+29]), tensor([0])), '/input-12': ([], [], [], [], [])}
Shallow branching resets to n domains:  14
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1240847110748291
10 lb beta sum: 0.2709689140319824, worst -0.07099542021751404
Time: prepare 0.0007    bound 0.1241    transfer 0.0002    finalize 0.0002    func 0.1254    
Accumulated time: func 0.9057    prepare 0.0876    bound 0.7946    transfer 0.0077    finalize 0.0131    
After pruning, left:  8

Back to Regular BaB

BaB round 1
batch: 8
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 58] [/input-12, 35] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 58] [/input-12, 35] 
split level 1: [/input-12, 33] [/input-12, 58] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 33] [/input-12, 58] 
split level 2: [/input-8, 2042] [/input-12, 33] [/input-8, 2044] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-8, 2042] [/input-12, 33] 
split level 3: [/input, 214] [/input-8, 2042] [/input-8, 2042] [/input, 214] [/input, 214] [/input, 214] [/input, 214] [/input-12, 40] 
split level 4: [/input, 1719] [/input, 214] [/input, 214] [/input, 472] [/input, 472] [/input, 472] [/input, 472] [/input-8, 1028] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5450417399406433, worst -0.054462358355522156
10 lb beta sum: 0.5450417399406433, worst -0.054387375712394714
Time: prepare 0.0131    bound 0.1227    transfer 0.0017    finalize 0.0017    func 0.1410    
Accumulated time: func 1.0466    prepare 0.1010    bound 0.9173    transfer 0.0094    finalize 0.0148    
all_split False
======================Cut inference begins======================
max lb tensor(0.77315652) min lb tensor(-0.05435546)
Number of Verified Splits: 200 of 256
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.5567033886909485, worst -0.07774466276168823
10 lb beta sum: 0.614864706993103, worst -0.06772468984127045
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.2624022960662842 
BICCOS Cumulative time: 0.35724687576293945
Preprocessing time: 0.00744318962097168 Inference time: 0.24972987174987793 Add cuts time: 0.004976987838745117 Cut analysis time: 0.0002522468566894531
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.05436 (5), -0.05105 (5), -0.04725 (5), -0.04413 (5), -0.02476 (5), -0.02362 (5), -0.02167 (5), -0.02119 (5), -0.02103 (5), -0.02077 (5), -0.02007 (5), -0.01976 (5), -0.01828 (5), -0.01808 (5), -0.01803 (5), -0.01722 (5), -0.01707 (5), -0.01682 (5), -0.01644 (5), -0.01530 (5), 
Length of domains: 56
Time: pickout 0.0008    decision 0.0169    set_bounds 0.0298    solve 0.1410    add 0.0654    
Accumulated time: pickout 0.0268    decision 0.6477    set_bounds 0.0983    solve 0.8647    add 1.3089    
Current (lb-rhs): -0.05435545742511749
306 domains visited
Cumulative time: 3.6811134815216064

BaB round 2
batch: 56
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1053] [/input-8, 1053] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 787] [/input-8, 1053] [/input-8, 2044] [/input-8, 1053] [/input-8, 1053] 
split level 1: [/input-8, 787] [/input-8, 787] [/input, 1719] [/input, 1719] [/input, 1719] [/input, 1719] [/input, 1719] [/input-8, 2042] [/input-8, 787] [/input, 1719] 
cut re-enabled after branching node selection
0 lb beta sum: 0.5033928155899048, worst -0.049697473645210266
10 lb beta sum: 0.5033928155899048, worst -0.049665793776512146
Time: prepare 0.0115    bound 0.1231    transfer 0.0015    finalize 0.0014    func 0.1390    
Accumulated time: func 1.1856    prepare 0.1127    bound 1.0405    transfer 0.0109    finalize 0.0162    
all_split False
======================Cut inference begins======================
max lb tensor(0.00669272) min lb tensor(-0.04964568)
Number of Verified Splits: 29 of 224
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 9.
#cuts 1-3: 3
#cuts 4-6: 5
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.010521888732910156 
BICCOS Cumulative time: 0.3677687644958496
Preprocessing time: 0.006653308868408203 Inference time: 0.0028951168060302734 Add cuts time: 0.0004394054412841797 Cut analysis time: 0.0005340576171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04965 (7), -0.04834 (7), -0.04629 (7), -0.04499 (7), -0.04253 (7), -0.04184 (7), -0.04101 (7), -0.04067 (7), -0.03936 (7), -0.03845 (7), -0.03782 (7), -0.03727 (7), -0.03573 (7), -0.03443 (7), -0.03256 (7), -0.03120 (7), -0.02071 (7), -0.01992 (7), -0.01967 (7), -0.01889 (7), 
Length of domains: 195
Time: pickout 0.0090    decision 0.0143    set_bounds 0.0156    solve 0.1391    add 0.0769    
Accumulated time: pickout 0.0358    decision 0.6619    set_bounds 0.1140    solve 1.0038    add 1.3857    
Current (lb-rhs): -0.04964567720890045
501 domains visited
Cumulative time: 3.9542441368103027

BaB round 3
batch: 195
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 213] [/input, 4038] [/input-8, 787] [/input-8, 1053] [/input, 213] [/input-8, 787] [/input, 213] [/input-8, 787] [/input, 213] [/input, 213] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04717293381690979
10 lb beta sum: 0.0002205677592428401, worst -0.04713258147239685
Time: prepare 0.0095    bound 0.1610    transfer 0.0026    finalize 0.0021    func 0.1777    
Accumulated time: func 1.3634    prepare 0.1224    bound 1.2015    transfer 0.0135    finalize 0.0183    
all_split False
======================Cut inference begins======================
max lb tensor(0.00661892) min lb tensor(-0.04711494)
Number of Verified Splits: 113 of 390
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 15.
#cuts 1-3: 3
#cuts 4-6: 11
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.026341676712036133 
BICCOS Cumulative time: 0.39411044120788574
Preprocessing time: 0.011310815811157227 Inference time: 0.012473821640014648 Add cuts time: 0.0016560554504394531 Cut analysis time: 0.0009009838104248047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04711 (8), -0.04639 (8), -0.04582 (8), -0.04509 (8), -0.04369 (8), -0.04295 (8), -0.04240 (8), -0.04166 (8), -0.04080 (8), -0.03927 (8), -0.03921 (8), -0.03854 (8), -0.03808 (8), -0.03753 (8), -0.03738 (8), -0.03735 (8), -0.03597 (8), -0.03581 (8), -0.03579 (8), -0.03549 (8), 
Length of domains: 277
Time: pickout 0.0167    decision 0.0203    set_bounds 0.0169    solve 0.1779    add 0.0805    
Accumulated time: pickout 0.0525    decision 0.6823    set_bounds 0.1309    solve 1.1817    add 1.4663    
Current (lb-rhs): -0.047114938497543335
778 domains visited
Cumulative time: 4.2972471714019775

BaB round 4
batch: 277
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 213] [/input, 213] [/input, 1689] [/input, 213] [/input, 1703] [/input, 213] [/input-8, 1053] [/input-8, 1053] [/input-8, 1053] [/input, 213] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04685652256011963
10 lb beta sum: 0.00036176620051264763, worst -0.04684147238731384
Time: prepare 0.0133    bound 0.1641    transfer 0.0035    finalize 0.0026    func 0.1870    
Accumulated time: func 1.5504    prepare 0.1359    bound 1.3656    transfer 0.0170    finalize 0.0209    
all_split False
======================Cut inference begins======================
max lb tensor(0.00583193) min lb tensor(-0.04683039)
Number of Verified Splits: 192 of 554
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 23.
#cuts 1-3: 4
#cuts 4-6: 19
#cuts >= 20: 0
BICCOS time: 0.04024910926818848 
BICCOS Cumulative time: 0.4343595504760742
Preprocessing time: 0.01607060432434082 Inference time: 0.02032327651977539 Add cuts time: 0.0028429031372070312 Cut analysis time: 0.0010123252868652344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04683 (9), -0.04609 (9), -0.04553 (9), -0.04479 (9), -0.04336 (9), -0.04261 (9), -0.04207 (9), -0.04132 (9), -0.04073 (9), -0.04045 (9), -0.03954 (9), -0.03944 (9), -0.03898 (9), -0.03826 (9), -0.03823 (9), -0.03781 (9), -0.03728 (9), -0.03717 (9), -0.03705 (9), -0.03656 (9), 
Length of domains: 362
Time: pickout 0.0174    decision 0.0269    set_bounds 0.0235    solve 0.1872    add 0.0424    
Accumulated time: pickout 0.0698    decision 0.7092    set_bounds 0.1544    solve 1.3689    add 1.5086    
Current (lb-rhs): -0.04683038592338562
1140 domains visited
Cumulative time: 4.637958526611328

BaB round 5
batch: 362
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1703] [/input, 1703] [/input, 362] [/input, 1703] [/input, 1703] [/input-8, 477] [/input, 1703] [/input-8, 1053] [/input, 1703] [/input, 362] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04505094885826111
10 lb beta sum: 0.0011299563338980079, worst -0.04502716660499573
Time: prepare 0.0175    bound 0.1644    transfer 0.0045    finalize 0.0044    func 0.1955    
Accumulated time: func 1.7460    prepare 0.1536    bound 1.5300    transfer 0.0215    finalize 0.0253    
all_split False
======================Cut inference begins======================
max lb tensor(0.00705862) min lb tensor(-0.04501751)
Number of Verified Splits: 313 of 724
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 31.
#cuts 1-3: 4
#cuts 4-6: 27
#cuts >= 20: 0
BICCOS time: 0.06055951118469238 
BICCOS Cumulative time: 0.4949190616607666
Preprocessing time: 0.02085709571838379 Inference time: 0.03328728675842285 Add cuts time: 0.005078792572021484 Cut analysis time: 0.0013363361358642578
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04502 (10), -0.04405 (10), -0.04371 (10), -0.04276 (10), -0.04162 (10), -0.04071 (10), -0.04055 (10), -0.04031 (10), -0.04025 (10), -0.04025 (10), -0.03926 (10), -0.03890 (10), -0.03845 (10), -0.03781 (10), -0.03759 (10), -0.03744 (10), -0.03725 (10), -0.03718 (10), -0.03660 (10), -0.03642 (10), 
Length of domains: 411
Time: pickout 0.0068    decision 0.0325    set_bounds 0.0303    solve 0.1957    add 0.0043    
Accumulated time: pickout 0.0766    decision 0.7418    set_bounds 0.1847    solve 1.5646    add 1.5129    
Current (lb-rhs): -0.045017510652542114
1551 domains visited
Cumulative time: 4.969797372817993

BaB round 6
batch: 411
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1689] [/input-8, 787] [/input, 1689] [/input, 362] [/input, 1689] [/input, 438] [/input, 213] [/input, 1689] [/input-8, 787] [/input, 438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04252919554710388
10 lb beta sum: 0.000723636185284704, worst -0.04249483346939087
Time: prepare 0.0203    bound 0.1676    transfer 0.0032    finalize 0.0044    func 0.2008    
Accumulated time: func 1.9468    prepare 0.1741    bound 1.6976    transfer 0.0248    finalize 0.0297    
all_split False
======================Cut inference begins======================
max lb tensor(0.00488776) min lb tensor(-0.04248631)
Number of Verified Splits: 248 of 822
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 5
#cuts 4-6: 22
#cuts >= 20: 0
BICCOS time: 0.05653715133666992 
BICCOS Cumulative time: 0.5514562129974365
Preprocessing time: 0.02370452880859375 Inference time: 0.0278780460357666 Add cuts time: 0.003918886184692383 Cut analysis time: 0.0010356903076171875
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04249 (11), -0.04223 (11), -0.04200 (11), -0.04119 (11), -0.04093 (11), -0.04070 (11), -0.03990 (11), -0.03902 (11), -0.03893 (11), -0.03857 (11), -0.03848 (11), -0.03839 (11), -0.03792 (11), -0.03773 (11), -0.03763 (11), -0.03745 (11), -0.03721 (11), -0.03709 (11), -0.03663 (11), -0.03662 (11), 
Length of domains: 574
Time: pickout 0.0064    decision 0.0346    set_bounds 0.0345    solve 0.2010    add 0.0058    
Accumulated time: pickout 0.0830    decision 0.7764    set_bounds 0.2192    solve 1.7656    add 1.5187    
Current (lb-rhs): -0.04248631000518799
2125 domains visited
Cumulative time: 5.310263395309448

BaB round 7
batch: 574
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2034] [/input-8, 469] [/input, 438] [/input-8, 787] [/input, 438] [/input-8, 2034] [/input, 438] [/input-8, 469] [/input-8, 2034] [/input, 438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.041080623865127563
10 lb beta sum: 0.0011019943049177527, worst -0.04107120633125305
Time: prepare 0.0281    bound 0.1760    transfer 0.0064    finalize 0.0063    func 0.2249    
Accumulated time: func 2.1717    prepare 0.2024    bound 1.8735    transfer 0.0312    finalize 0.0360    
all_split False
======================Cut inference begins======================
max lb tensor(0.00574255) min lb tensor(-0.04106963)
Number of Verified Splits: 369 of 1148
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 6
#cuts 4-6: 21
#cuts >= 20: 0
BICCOS time: 0.08086490631103516 
BICCOS Cumulative time: 0.6323211193084717
Preprocessing time: 0.03458714485168457 Inference time: 0.04044961929321289 Add cuts time: 0.004817485809326172 Cut analysis time: 0.0010106563568115234
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.04107 (12), -0.04059 (12), -0.03976 (12), -0.03970 (12), -0.03945 (12), -0.03929 (12), -0.03921 (12), -0.03893 (12), -0.03841 (12), -0.03815 (12), -0.03791 (12), -0.03779 (12), -0.03762 (12), -0.03746 (12), -0.03720 (12), -0.03717 (12), -0.03689 (12), -0.03657 (12), -0.03648 (12), -0.03633 (12), 
Length of domains: 779
Time: pickout 0.0094    decision 0.0439    set_bounds 0.0485    solve 0.2253    add 0.0065    
Accumulated time: pickout 0.0923    decision 0.8203    set_bounds 0.2677    solve 1.9909    add 1.5253    
Current (lb-rhs): -0.041069626808166504
2904 domains visited
Cumulative time: 5.727079391479492

BaB round 8
batch: 779
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 438] [/input, 1703] [/input-8, 2034] [/input-8, 494] [/input-8, 2034] [/input-8, 494] [/input-8, 2034] [/input, 1703] [/input-8, 2034] [/input, 438] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0007138440851122141, worst -0.03952416777610779
10 lb beta sum: 0.0008510944899171591, worst -0.03952145576477051
Time: prepare 0.0795    bound 0.1958    transfer 0.0054    finalize 0.0082    func 0.2999    
Accumulated time: func 2.4716    prepare 0.2822    bound 2.0694    transfer 0.0366    finalize 0.0442    
all_split False
======================Cut inference begins======================
max lb tensor(0.00855443) min lb tensor(-0.03951883)
Number of Verified Splits: 285 of 1558
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 30.
#cuts 1-3: 6
#cuts 4-6: 24
#cuts >= 20: 0
BICCOS time: 0.08686184883117676 
BICCOS Cumulative time: 0.7191829681396484
Preprocessing time: 0.048180580139160156 Inference time: 0.03296542167663574 Add cuts time: 0.004582643508911133 Cut analysis time: 0.0011332035064697266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03952 (13), -0.03903 (13), -0.03821 (13), -0.03806 (13), -0.03785 (13), -0.03773 (13), -0.03756 (13), -0.03747 (13), -0.03731 (13), -0.03700 (13), -0.03677 (13), -0.03676 (13), -0.03656 (13), -0.03627 (13), -0.03626 (13), -0.03624 (13), -0.03615 (13), -0.03601 (13), -0.03594 (13), -0.03591 (13), 
Length of domains: 1273
Time: pickout 0.0133    decision 0.2322    set_bounds 0.0682    solve 0.3002    add 0.0329    
Accumulated time: pickout 0.1056    decision 1.0525    set_bounds 0.3359    solve 2.2911    add 1.5582    
Current (lb-rhs): -0.03951883316040039
4177 domains visited
Cumulative time: 6.463616132736206

BaB round 9
batch: 1273
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 494] [/input-8, 501] [/input-8, 494] [/input-8, 494] [/input-8, 494] [/input-8, 494] [/input-8, 494] [/input-8, 494] [/input-8, 597] [/input-8, 2034] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03829914331436157
10 lb beta sum: 0.0009278394281864166, worst -0.038299113512039185
Time: prepare 0.0639    bound 0.2683    transfer 0.0105    finalize 0.0151    func 0.3741    
Accumulated time: func 2.8457    prepare 0.3464    bound 2.3376    transfer 0.0471    finalize 0.0593    
all_split False
======================Cut inference begins======================
max lb tensor(0.00453991) min lb tensor(-0.03829658)
Number of Verified Splits: 256 of 2546
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 9
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.11512494087219238 
BICCOS Cumulative time: 0.8343079090118408
Preprocessing time: 0.07962799072265625 Inference time: 0.031140804290771484 Add cuts time: 0.003637075424194336 Cut analysis time: 0.0007190704345703125
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03830 (14), -0.03781 (14), -0.03698 (14), -0.03683 (14), -0.03663 (14), -0.03651 (14), -0.03649 (14), -0.03635 (14), -0.03624 (14), -0.03608 (14), -0.03597 (14), -0.03578 (14), -0.03551 (14), -0.03532 (14), -0.03519 (14), -0.03519 (14), -0.03517 (14), -0.03505 (14), -0.03491 (14), -0.03479 (14), 
Length of domains: 2290
Time: pickout 0.0179    decision 0.0840    set_bounds 0.1088    solve 0.3746    add 0.0150    
Accumulated time: pickout 0.1235    decision 1.1365    set_bounds 0.4447    solve 2.6657    add 1.5732    
Current (lb-rhs): -0.03829658031463623
6467 domains visited
Cumulative time: 7.183101177215576

BaB round 10
batch: 2290
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 597] [/input, 1703] [/input-8, 597] [/input-8, 2016] [/input-8, 2016] [/input-8, 473] [/input-8, 2016] [/input-8, 494] [/input-8, 494] [/input-8, 494] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03730157017707825
10 lb beta sum: 0.005210182163864374, worst -0.03730174899101257
Time: prepare 0.1167    bound 0.4191    transfer 0.0391    finalize 0.0285    func 0.6332    
Accumulated time: func 3.4789    prepare 0.4634    bound 2.7567    transfer 0.0863    finalize 0.0878    
all_split False
======================Cut inference begins======================
max lb tensor(0.00627729) min lb tensor(-0.03729799)
Number of Verified Splits: 285 of 4580
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 19.
#cuts 1-3: 14
#cuts 4-6: 1
#cuts 7-9: 4
#cuts >= 20: 0
BICCOS time: 0.18639063835144043 
BICCOS Cumulative time: 1.0206985473632812
Preprocessing time: 0.143599271774292 Inference time: 0.0383305549621582 Add cuts time: 0.0033593177795410156 Cut analysis time: 0.0011014938354492188
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03730 (15), -0.03681 (15), -0.03598 (15), -0.03582 (15), -0.03563 (15), -0.03551 (15), -0.03534 (15), -0.03527 (15), -0.03524 (15), -0.03508 (15), -0.03478 (15), -0.03477 (15), -0.03450 (15), -0.03432 (15), -0.03415 (15), -0.03404 (15), -0.03397 (15), -0.03396 (15), -0.03392 (15), -0.03382 (15), 
Length of domains: 4295
Time: pickout 0.0345    decision 0.1429    set_bounds 0.3585    solve 0.6339    add 0.0274    
Accumulated time: pickout 0.1581    decision 1.2794    set_bounds 0.8032    solve 3.2996    add 1.6006    
Current (lb-rhs): -0.037297993898391724
10762 domains visited
Cumulative time: 8.573635578155518

BaB round 11
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 435] [/input-8, 597] [/input-8, 2016] [/input-8, 2035] [/input-8, 501] [/input-8, 2035] [/input-8, 2016] [/input, 3385] [/input-8, 2016] [/input-8, 2016] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03534397482872009
10 lb beta sum: 0.002265466842800379, worst -0.035344332456588745
Time: prepare 0.2112    bound 0.6806    transfer 0.0410    finalize 0.0518    func 1.0373    
Accumulated time: func 4.5163    prepare 0.6748    bound 3.4372    transfer 0.1272    finalize 0.1396    
all_split False
======================Cut inference begins======================
max lb tensor(0.00546926) min lb tensor(-0.03534168)
Number of Verified Splits: 465 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 27.
#cuts 1-3: 4
#cuts 4-6: 1
#cuts 7-9: 18
#cuts 10-12: 4
#cuts >= 20: 0
BICCOS time: 0.3437154293060303 
BICCOS Cumulative time: 1.3644139766693115
Preprocessing time: 0.2587931156158447 Inference time: 0.07464313507080078 Add cuts time: 0.008336782455444336 Cut analysis time: 0.0019423961639404297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03534 (16), -0.03489 (16), -0.03487 (16), -0.03470 (16), -0.03443 (16), -0.03428 (16), -0.03422 (16), -0.03386 (16), -0.03376 (16), -0.03367 (16), -0.03355 (16), -0.03341 (16), -0.03339 (16), -0.03331 (15), -0.03328 (16), -0.03324 (16), -0.03322 (16), -0.03312 (16), -0.03311 (16), -0.03302 (16), 
Length of domains: 7926
Time: pickout 0.0598    decision 0.2429    set_bounds 0.5432    solve 1.0387    add 0.0384    
Accumulated time: pickout 0.2179    decision 1.5223    set_bounds 1.3464    solve 4.3383    add 1.6391    
Current (lb-rhs): -0.03534168004989624
18489 domains visited
current_vram/total_varm: 11.1GB/99.9GB, batch_size increase to 8192
Cumulative time: 10.854149103164673

BaB round 12
batch: 7926
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 473] [/input, 435] [/input-8, 1053] [/input-8, 2016] [/input-8, 500] [/input, 435] [/input-8, 494] [/input, 435] [/input, 1703] [/input, 435] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.034235626459121704
10 lb beta sum: 0.00261120917275548, worst -0.03423607349395752
Time: prepare 0.6259    bound 1.2478    transfer 0.0761    finalize 0.1019    func 2.1567    
Accumulated time: func 6.6729    prepare 1.3010    bound 4.6850    transfer 0.2033    finalize 0.2415    
all_split False
======================Cut inference begins======================
max lb tensor(0.00597257) min lb tensor(-0.03423259)
Number of Verified Splits: 1021 of 15852
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 58.
#cuts 1-3: 4
#cuts 4-6: 8
#cuts 7-9: 43
#cuts 10-12: 3
#cuts >= 20: 0
BICCOS time: 0.9314713478088379 
BICCOS Cumulative time: 2.2958853244781494
Preprocessing time: 0.5147171020507812 Inference time: 0.38635683059692383 Add cuts time: 0.02670001983642578 Cut analysis time: 0.0036973953247070312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03423 (17), -0.03379 (17), -0.03376 (17), -0.03362 (17), -0.03314 (17), -0.03274 (17), -0.03256 (17), -0.03248 (17), -0.03233 (17), -0.03233 (17), -0.03230 (16), -0.03227 (17), -0.03227 (17), -0.03220 (17), -0.03217 (17), -0.03215 (17), -0.03213 (17), -0.03212 (17), -0.03207 (17), -0.03200 (17), 
Length of domains: 14831
Time: pickout 0.1462    decision 0.6369    set_bounds 0.7193    solve 2.1599    add 0.1506    
Accumulated time: pickout 0.3641    decision 2.1592    set_bounds 2.0657    solve 6.4982    add 1.7897    
Current (lb-rhs): -0.03423258662223816
33320 domains visited
Cumulative time: 15.625163793563843

BaB round 13
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 1703] [/input-8, 2016] [/input, 362] [/input, 435] [/input-8, 2035] [/input-8, 2016] [/input-8, 2035] [/input-8, 2016] [/input-8, 473] [/input-8, 2016] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.033126771450042725
10 lb beta sum: 0.0017790694255381823, worst -0.04606189951300621
Time: prepare 0.6754    bound 1.3172    transfer 0.1123    finalize 0.1266    func 2.3400    
Accumulated time: func 9.0129    prepare 1.9766    bound 6.0022    transfer 0.3156    finalize 0.3680    
all_split False
======================Cut inference begins======================
max lb tensor(0.00623532) min lb tensor(-0.03312668)
Number of Verified Splits: 1441 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 111.
#cuts 1-3: 4
#cuts 4-6: 15
#cuts 7-9: 86
#cuts 10-12: 6
#cuts >= 20: 0
BICCOS time: 1.1485297679901123 
BICCOS Cumulative time: 3.4444150924682617
Preprocessing time: 0.5332565307617188 Inference time: 0.24059200286865234 Add cuts time: 0.36760711669921875 Cut analysis time: 0.007074117660522461
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03313 (18), -0.03264 (18), -0.03250 (18), -0.03248 (17), -0.03233 (17), -0.03227 (17), -0.03220 (17), -0.03201 (18), -0.03184 (18), -0.03182 (17), -0.03173 (17), -0.03168 (17), -0.03168 (18), -0.03163 (18), -0.03143 (18), -0.03122 (18), -0.03118 (17), -0.03115 (18), -0.03108 (18), -0.03107 (18), 
Length of domains: 21582
Time: pickout 0.1215    decision 0.4747    set_bounds 0.7502    solve 2.3439    add 0.0760    
Accumulated time: pickout 0.4856    decision 2.6340    set_bounds 2.8159    solve 8.8421    add 1.8658    
Current (lb-rhs): -0.03312668204307556
48263 domains visited
current_vram/total_varm: 27.0GB/99.9GB, batch_size increase to 16384
Cumulative time: 20.57339882850647

BaB round 14
batch: 16384
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 2045] [/input-8, 597] [/input-8, 501] [/input, 3385] [/input-8, 501] [/input-8, 2035] [/input-8, 477] [/input-8, 478] [/input-8, 2045] [/input-8, 494] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.03173893690109253
10 lb beta sum: 0.0012239543721079826, worst -0.04865599796175957
Time: prepare 0.8978    bound 2.6562    transfer 0.1826    finalize 0.5669    func 4.5210    
Accumulated time: func 13.5339    prepare 2.8748    bound 8.6584    transfer 0.4982    finalize 0.9349    
all_split False
======================Cut inference begins======================
max lb tensor(0.00597921) min lb tensor(-0.03172508)
Number of Verified Splits: 3831 of 32768
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 180.
#cuts 1-3: 4
#cuts 4-6: 32
#cuts 7-9: 137
#cuts 10-12: 7
#cuts >= 20: 0
BICCOS time: 2.3198282718658447 
BICCOS Cumulative time: 5.7642433643341064
Preprocessing time: 1.0919790267944336 Inference time: 1.0665171146392822 Add cuts time: 0.15056777000427246 Cut analysis time: 0.010764360427856445
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03173 (19), -0.03136 (18), -0.03126 (19), -0.03121 (18), -0.03116 (18), -0.03111 (19), -0.03110 (18), -0.03063 (19), -0.03061 (18), -0.03059 (18), -0.03057 (18), -0.03043 (19), -0.03027 (19), -0.03022 (19), -0.03011 (19), -0.03010 (18), -0.03009 (18), -0.03002 (19), -0.02988 (18), -0.02987 (18), 
Length of domains: 34135
Time: pickout 0.2469    decision 1.6907    set_bounds 1.8479    solve 4.5269    add 0.1046    
Accumulated time: pickout 0.7325    decision 4.3246    set_bounds 4.6638    solve 13.3690    add 1.9704    
Current (lb-rhs): -0.03172507882118225
77200 domains visited
current_vram/total_varm: 41.5GB/99.9GB, batch_size increase to 32768
Cumulative time: 31.381848573684692

BaB round 15
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 477] [/input-8, 500] [/input-8, 477] [/input-8, 500] [/input-8, 477] [/input-8, 2034] [/input-8, 2035] [/input-8, 2045] [/input, 3385] [/input-8, 2045] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.030214577913284302
10 lb beta sum: 0.0009027249761857092, worst -0.04063697159290314
Time: prepare 1.7994    bound 10.7085    transfer 0.3852    finalize 1.0168    func 14.3403    
Accumulated time: func 27.8742    prepare 4.6746    bound 19.3669    transfer 0.8834    finalize 1.9518    
all_split False
======================Cut inference begins======================
max lb tensor(0.01137765) min lb tensor(-0.03020644)
Number of Verified Splits: 9823 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 252.
#cuts 1-3: 4
#cuts 4-6: 71
#cuts 7-9: 155
#cuts 10-12: 22
#cuts >= 20: 0
BICCOS time: 4.951369762420654 
BICCOS Cumulative time: 10.71561312675476
Preprocessing time: 2.8392202854156494 Inference time: 1.7159795761108398 Add cuts time: 0.3804171085357666 Cut analysis time: 0.015752792358398438
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03021 (20), -0.02998 (19), -0.02982 (19), -0.02976 (19), -0.02975 (20), -0.02969 (19), -0.02959 (20), -0.02947 (19), -0.02923 (19), -0.02916 (19), -0.02912 (20), -0.02897 (19), -0.02892 (20), -0.02875 (20), -0.02870 (20), -0.02868 (19), -0.02863 (20), -0.02858 (20), -0.02850 (20), -0.02848 (19), 
Length of domains: 57080
Time: pickout 0.4951    decision 3.4059    set_bounds 3.6762    solve 14.3514    add 0.2640    
Accumulated time: pickout 1.2276    decision 7.7305    set_bounds 8.3400    solve 27.7204    add 2.2343    
Current (lb-rhs): -0.03020644187927246
132913 domains visited
Cumulative time: 58.73002648353577

BaB round 16
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 501] [/input-8, 500] [/input-8, 477] [/input-8, 124] [/input-8, 477] [/input, 435] [/input-8, 477] [/input-8, 501] [/input-8, 500] [/input-8, 477] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02847251296043396
10 lb beta sum: 0.007352222688496113, worst -0.0539548397064209
Time: prepare 1.8165    bound 10.9397    transfer 0.3742    finalize 1.3521    func 14.9185    
Accumulated time: func 42.7927    prepare 6.4915    bound 30.3066    transfer 1.2576    finalize 3.3039    
all_split False
======================Cut inference begins======================
max lb tensor(0.01099740) min lb tensor(-0.02846599)
Number of Verified Splits: 11466 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 269.
#cuts 1-3: 4
#cuts 4-6: 91
#cuts 7-9: 157
#cuts 10-12: 17
#cuts >= 20: 0
BICCOS time: 5.6997926235198975 
BICCOS Cumulative time: 16.415405750274658
Preprocessing time: 2.3312976360321045 Inference time: 2.853287935256958 Add cuts time: 0.4997885227203369 Cut analysis time: 0.015418529510498047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.03021 (20), -0.02975 (20), -0.02959 (20), -0.02912 (20), -0.02892 (20), -0.02875 (20), -0.02870 (20), -0.02850 (20), -0.02847 (20), -0.02831 (20), -0.02826 (20), -0.02825 (20), -0.02824 (20), -0.02817 (20), -0.02809 (20), -0.02805 (20), -0.02799 (20), -0.02782 (20), -0.02781 (20), -0.02772 (20), 
Length of domains: 78382
Time: pickout 0.5257    decision 4.0422    set_bounds 3.9287    solve 14.9320    add 0.2662    
Accumulated time: pickout 1.7533    decision 11.7728    set_bounds 12.2687    solve 42.6524    add 2.5006    
Current (lb-rhs): -0.03020644187927246
186983 domains visited
Cumulative time: 88.32118129730225

BaB round 17
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3401] [/input-8, 477] [/input-8, 2035] [/input-8, 477] [/input-8, 597] [/input-8, 477] [/input, 435] [/input-8, 477] [/input-8, 2035] [/input-8, 501] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.028905779123306274
10 lb beta sum: 0.030307479202747345, worst -0.04636643826961517
Time: prepare 1.8758    bound 11.0707    transfer 0.3747    finalize 1.5794    func 15.3346    
Accumulated time: func 58.1273    prepare 8.3677    bound 41.3773    transfer 1.6323    finalize 4.8833    
all_split False
======================Cut inference begins======================
max lb tensor(0.00939397) min lb tensor(-0.02890348)
Number of Verified Splits: 14035 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 340.
#cuts 1-3: 4
#cuts 4-6: 123
#cuts 7-9: 197
#cuts 10-12: 16
#cuts >= 20: 0
BICCOS time: 6.759012460708618 
BICCOS Cumulative time: 23.174418210983276
Preprocessing time: 2.3092434406280518 Inference time: 3.4915924072265625 Add cuts time: 0.9385812282562256 Cut analysis time: 0.01959538459777832
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02890 (21), -0.02847 (20), -0.02831 (20), -0.02829 (21), -0.02825 (20), -0.02817 (20), -0.02772 (20), -0.02769 (21), -0.02767 (21), -0.02763 (20), -0.02761 (21), -0.02747 (20), -0.02745 (21), -0.02740 (21), -0.02727 (21), -0.02723 (21), -0.02719 (21), -0.02719 (20), -0.02711 (21), -0.02710 (21), 
Length of domains: 97115
Time: pickout 0.5495    decision 3.4363    set_bounds 4.3089    solve 15.3491    add 0.2378    
Accumulated time: pickout 2.3028    decision 15.2090    set_bounds 16.5777    solve 58.0015    add 2.7384    
Current (lb-rhs): -0.028903484344482422
238484 domains visited
Cumulative time: 119.1817262172699

BaB round 18
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 3163] [/input-8, 477] [/input, 362] [/input-8, 473] [/input-8, 477] [/input, 3401] [/input-8, 477] [/input-8, 597] [/input-8, 2045] [/input, 362] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026952236890792847
10 lb beta sum: 0.040857549756765366, worst -0.05437824875116348
Time: prepare 1.9260    bound 11.2902    transfer 0.3830    finalize 0.5598    func 15.8409    
Accumulated time: func 73.9682    prepare 10.2941    bound 52.6676    transfer 2.0153    finalize 5.4431    
all_split False
======================Cut inference begins======================
max lb tensor(0.01108781) min lb tensor(-0.02694845)
Number of Verified Splits: 15996 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 401.
#cuts 1-3: 4
#cuts 4-6: 150
#cuts 7-9: 236
#cuts 10-12: 11
#cuts >= 20: 0
BICCOS time: 6.62792706489563 
BICCOS Cumulative time: 29.802345275878906
Preprocessing time: 2.3737804889678955 Inference time: 2.9108572006225586 Add cuts time: 1.3174400329589844 Cut analysis time: 0.025849342346191406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02890 (21), -0.02829 (21), -0.02769 (21), -0.02767 (21), -0.02761 (21), -0.02745 (21), -0.02740 (21), -0.02723 (21), -0.02719 (21), -0.02696 (20), -0.02695 (21), -0.02695 (21), -0.02687 (21), -0.02686 (21), -0.02679 (20), -0.02678 (21), -0.02670 (21), -0.02652 (20), -0.02652 (20), -0.02650 (21), 
Length of domains: 113887
Time: pickout 0.5654    decision 3.4680    set_bounds 4.5158    solve 15.8531    add 0.2412    
Accumulated time: pickout 2.8682    decision 18.6770    set_bounds 21.0935    solve 73.8546    add 2.9796    
Current (lb-rhs): -0.028903484344482422
288024 domains visited
Cumulative time: 150.83135151863098

BaB round 19
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 435] [/input-8, 2035] [/input, 3163] [/input-8, 2035] [/input-8, 2045] [/input-8, 501] [/input-8, 2045] [/input, 3385] [/input, 3401] [/input, 3385] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02686980366706848
10 lb beta sum: 0.0798550546169281, worst -0.04884412884712219
Time: prepare 1.9312    bound 11.5904    transfer 0.3810    finalize 2.0590    func 16.4057    
Accumulated time: func 90.3739    prepare 12.2260    bound 64.2580    transfer 2.3963    finalize 7.5021    
all_split False
======================Cut inference begins======================
max lb tensor(0.29965329) min lb tensor(-0.02686656)
Number of Verified Splits: 17106 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 460.
#cuts 1-3: 4
#cuts 4-6: 185
#cuts 7-9: 265
#cuts 10-12: 6
#cuts >= 20: 0
BICCOS time: 8.568561553955078 
BICCOS Cumulative time: 38.370906829833984
Preprocessing time: 2.415342330932617 Inference time: 4.9721293449401855 Add cuts time: 1.1555228233337402 Cut analysis time: 0.025567054748535156
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02767 (21), -0.02723 (21), -0.02695 (21), -0.02687 (21), -0.02687 (22), -0.02684 (22), -0.02650 (21), -0.02648 (21), -0.02642 (21), -0.02641 (22), -0.02640 (21), -0.02639 (22), -0.02633 (21), -0.02610 (21), -0.02607 (21), -0.02603 (22), -0.02584 (21), -0.02580 (21), -0.02576 (21), -0.02575 (21), 
Length of domains: 129549
Time: pickout 0.6275    decision 4.4182    set_bounds 3.5363    solve 16.4220    add 0.2296    
Accumulated time: pickout 3.4957    decision 23.0952    set_bounds 24.6298    solve 90.2765    add 3.2092    
Current (lb-rhs): -0.027670204639434814
336454 domains visited
Cumulative time: 184.97996830940247

BaB round 20
batch: 32768
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 598] [/input-8, 500] [/input-8, 477] [/input, 3401] [/input-8, 501] [/input, 362] [/input-8, 598] [/input-8, 478] [/input, 3385] [/input, 3385] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.026372283697128296
10 lb beta sum: 0.11235378682613373, worst -0.06037438288331032
Time: prepare 2.0538    bound 11.7520    transfer 0.3783    finalize 0.6142    func 15.2487    
Accumulated time: func 105.6225    prepare 14.2802    bound 76.0099    transfer 2.7746    finalize 8.1163    
all_split False
======================Cut inference begins======================
max lb tensor(0.77903223) min lb tensor(-0.02636772)
Number of Verified Splits: 17093 of 65536
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 188.
#cuts 1-3: 15
#cuts 4-6: 138
#cuts 7-9: 35
#cuts >= 20: 0
BICCOS time: 8.669061183929443 
BICCOS Cumulative time: 47.03996801376343
Preprocessing time: 2.5923373699188232 Inference time: 5.05514669418335 Add cuts time: 1.0123205184936523 Cut analysis time: 0.009256601333618164
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02695 (21), -0.02687 (21), -0.02687 (22), -0.02684 (22), -0.02650 (21), -0.02642 (21), -0.02641 (22), -0.02640 (21), -0.02639 (22), -0.02637 (22), -0.02633 (21), -0.02603 (22), -0.02593 (22), -0.02584 (21), -0.02580 (21), -0.02566 (22), -0.02566 (21), -0.02558 (22), -0.02557 (21), -0.02557 (22), 
Length of domains: 145224
Time: pickout 0.5981    decision 3.4854    set_bounds 5.3466    solve 15.2703    add 0.3183    
Accumulated time: pickout 4.0938    decision 26.5807    set_bounds 29.9764    solve 105.5468    add 3.5275    
Current (lb-rhs): -0.02694845199584961
384897 domains visited
Time out!!!!!!!!
Result: unknown in 222.7735 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 196, vnnlib ID: 196 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-7.34187508, -9.73769855, -4.95557117, -4.07531166, -5.10799456,
         -4.86587954, -4.00358391, -5.81644583, -6.91936016, -7.77230597]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [641]; unstable size 641; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 325, 1, 641] with unstable size 324 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 25, 1, 641] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 641] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [324]; unstable size 324; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 25, 1, 324] with unstable size 24 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 324] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [24]; unstable size 24; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 24] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 1.40970671,  2.98208618, -0.34637272, -0.05800223,  0.34521288,
         -1.21884370,  0.55216181,  0.57143247,  1.41924000]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-7.34187508, -9.73769855, -4.95557117, -4.07531166, -5.10799456,
         -4.86587954, -4.00358391, -5.81644583, -6.91936016, -7.77230597]],
       device='cuda:0')
Clean prediction incorrect, attack skipped.
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-7.34187365, -9.73769760, -4.95557117, -4.07531118, -5.10799408,
          -4.86587954, -4.00358343, -5.81644535, -6.91935921, -7.77230597],
         [-7.34187365, -9.73769760, -4.95557117, -4.07531118, -5.10799408,
          -4.86587954, -4.00358343, -5.81644535, -6.91935921, -7.77230597]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 0.88025999,  1.03268290, -0.07172775]]], device='cuda:0')
number of violation:  1
clean attack image tensor([[[[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]],


         [[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]],


         [[[ 0.51904768,  0.56666672,  0.51904768,  ...,  0.69365084,
             0.78888893,  0.56666672],
           [ 0.55079371,  0.64603180,  0.67777783,  ...,  0.74126989,
             0.69365084,  0.61428577],
           [ 0.55079371,  0.50317466,  0.58253974,  ...,  0.77301592,
             0.74126989,  0.67777783],
           ...,
           [-1.40158725, -1.52857137, -1.56031740,  ...,  0.61428577,
             0.74126989,  0.64603180],
           [-1.51269829, -1.32222211, -1.54444432,  ...,  0.66190481,
             0.70952386,  0.61428577],
           [-1.59206343, -1.38571417, -1.24285710,  ...,  0.64603180,
             0.59841275,  0.70952386]],

          [[ 0.67632860,  0.54750413,  0.08051541,  ...,  0.78904998,
             0.88566834,  0.66022551],
           [ 0.80515307,  0.83735919,  0.54750413,  ...,  0.85346222,
             0.80515307,  0.70853472],
           [ 0.85346222,  0.78904998,  0.64412248,  ...,  0.86956531,
             0.88566834,  0.78904998],
           ...,
           [-1.46537840, -1.61030602, -1.67471826,  ...,  0.69243163,
             0.82125610,  0.72463775],
           [-1.61030602, -1.43317223, -1.64251208,  ...,  0.74074084,
             0.78904998,  0.69243163],
           [-1.73913050, -1.49758446, -1.30434775,  ...,  0.72463775,
             0.67632860,  0.78904998]],

          [[ 0.90104967,  0.72113961,  0.27136448,  ...,  1.03598225,
             1.17091501,  0.93103468],
           [ 1.00599718,  1.00599718,  0.81109464,  ...,  0.99100471,
             1.08095968,  1.03598225],
           [ 1.05097473,  1.00599718,  0.94602716,  ...,  0.96101969,
             1.12593722,  1.11094475],
           ...,
           [-1.27286363, -1.39280367, -1.43778121,  ...,  1.00599718,
             1.12593722,  1.03598225],
           [-1.39280367, -1.22788620, -1.42278874,  ...,  1.05097473,
             1.09595215,  1.00599718],
           [-1.49775124, -1.28785622, -1.12293863,  ...,  1.03598225,
             0.99100471,  1.09595215]]]]], device='cuda:0') torch.Size([1, 3, 3, 32, 32])

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0858 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 197, vnnlib ID: 197 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[ -5.18270683, -12.47354031,  -6.10897255, -10.00190735,  -9.06741428,
         -10.42314816, -10.68535328, -12.50943470,  -6.97327232, -13.13700008]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [464]; unstable size 464; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 147, 1, 464] with unstable size 146 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 14, 1, 464] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 464] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [146]; unstable size 146; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 14, 1, 146] with unstable size 13 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 146] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [13]; unstable size 13; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 13] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[6.42324018, 0.28036869, 3.85285234, 3.13763332, 4.20778561, 4.47631264,
         6.43918324, 0.91171372, 6.93784571]], device='cuda:0') None
Verified with initial CROWN!
verified with init bound!
Result: safe-incomplete in 0.0705 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 198, vnnlib ID: 198 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-10.51362133, -15.75713921, -11.03450871, -11.39007473, -12.12888622,
         -11.76603127, -13.25793362, -13.95927143, -13.38565063, -14.89714527]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [766]; unstable size 766; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 174, 1, 766] with unstable size 173 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 15, 1, 766] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 766] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [173]; unstable size 173; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 15, 1, 173] with unstable size 14 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 173] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [14]; unstable size 14; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 14] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 3.95912170, -0.24805665, -0.27043372,  0.63014281, -0.09771192,
          1.73836112,  2.00863838,  1.75885749,  3.03999758]], device='cuda:0') None
Remain 3 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-10.51362133, -15.75713921, -11.03450871, -11.39007473, -12.12888622,
         -11.76603127, -13.25793362, -13.95927143, -13.38565063, -14.89714527]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]100%|██████████| 1/1 [00:00<00:00,  7.98it/s]100%|██████████| 1/1 [00:00<00:00,  7.97it/s]
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-11.10750008, -16.42879486, -11.24630737, -11.71199989, -12.43719864,
          -12.07831478, -13.57210922, -14.31756973, -13.90190697, -15.47457600],
         [-11.10750008, -16.42879486, -11.24630737, -11.71199989, -12.43719864,
          -12.07831478, -13.57210922, -14.31756973, -13.90190697, -15.47457600]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[0.13880730, 0.60449982, 0.97081470]]], device='cuda:0')
number of violation:  0
Attack finished in 0.1287 seconds.
PGD attack failed
verified_status unknown
verified_success False
best_l after optimization: 13.11574935913086
alpha/beta optimization time: 1.2927806377410889
initial alpha-crown bounds: tensor([[ 4.07125139, -0.22706461, -0.22163165,  0.67958426, -0.04805171,
          1.79753458,  2.07503700,  1.87824094,  3.11084986]], device='cuda:0')
Warning: Multiple properties need to be verified by BaB with cuts. Set initial_max_domains to 1 due to the limitation of GCP-CROWN solver
Number of class (without rhs): 3 ; Worst class: (+ rhs) -0.2270646095275879
Total VNNLIB file length: 9, max property batch size: 1, total number of batches: 9
lA shape: [torch.Size([9, 1, 16, 16, 16]), torch.Size([9, 1, 32, 8, 8]), torch.Size([9, 1, 100])]

Properties batch 0, size 1
Remaining timeout: 198.50799703598022
Verifying property 0 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 1, size 1
Remaining timeout: 198.50795602798462
Verifying property 1 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.22706461]], device='cuda:0') need to verify.
Model prediction is: tensor([-10.51362133, -15.75713921, -11.03450871, -11.39007473, -12.12888622,
        -11.76603127, -13.25793362, -13.95927143, -13.38565063, -14.89714527],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.22706461]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 766
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 172
Node /15 input 0: size torch.Size([100]) unstable 14
-----------------
# of unstable neurons: 952
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.0001251697540283203
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2270646095275879
10 lb beta sum: 0.0, worst -0.22707593441009521
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0560    transfer 0.0001    finalize 0.0002    func 0.0565    
Accumulated time: func 0.0565    prepare 0.0002    bound 0.0560    transfer 0.0001    finalize 0.0002    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 26] 
split level 1: [/input-12, 78] 
split level 2: [/input-12, 41] 
split level 3: [/input-12, 25] 
split level 4: [/input-12, 11] 
split level 5: [/input-8, 1628] 
split level 6: [/input-8, 1437] 
split level 7: [/input-8, 1035] 
split level 8: [/input-8, 413] 
split level 9: [/input-8, 1366] 
split level 10: [/input-8, 1500] 
split level 11: [/input-8, 1621] 
split level 12: [/input-8, 1619] 
split level 13: [/input-8, 1044] 
split level 14: [/input-12, 45] 
split level 15: [/input-8, 996] 
split level 16: [/input-8, 1356] 
split level 17: [/input-8, 1357] 
split level 18: [/input-8, 276] 
split level 19: [/input-8, 1134] 
split level 20: [/input, 2471] 
split level 21: [/input, 3527] 
split level 22: [/input, 3272] 
split level 23: [/input, 2503] 
split level 24: [/input, 3240] 
split level 25: [/input, 2231] 
split level 26: [/input, 429] 
split level 27: [/input, 1448] 
split level 28: [/input-8, 667] 
split level 29: [/input-8, 1618] 
split level 30: [/input, 2966] 
split level 31: [/input, 3494] 
split level 32: [/input-8, 1347] 
split level 33: [/input-8, 1610] 
split level 34: [/input, 2263] 
split level 35: [/input, 3509] 
split level 36: [/input, 2472] 
split level 37: [/input-8, 1625] 
split level 38: [/input, 2504] 
split level 39: [/input, 3525] 
split level 40: [/input-8, 1341] 
split level 41: [/input, 3274] 
split level 42: [/input-8, 680] 
split level 43: [/input-8, 990] 
split level 44: [/input, 3222] 
split level 45: [/input-8, 1609] 
split level 46: [/input, 3258] 
split level 47: [/input, 3253] 
split level 48: [/input, 2501] 
split level 49: [/input, 1447] 
split level 50: [/input, 3269] 
split level 51: [/input-8, 102] 
split level 52: [/input, 3526] 
split level 53: [/input-8, 1370] 
split level 54: [/input, 3524] 
split level 55: [/input, 2486] 
split level 56: [/input-8, 614] 
split level 57: [/input, 1388] 
split level 58: [/input, 327] 
split level 59: [/input, 2487] 
split level 60: [/input, 2500] 
split level 61: [/input, 3543] 
split level 62: [/input-8, 1441] 
split level 63: [/input-8, 1122] 
split level 64: [/input, 3239] 
split level 65: [/input-8, 1617] 
split level 66: [/input, 279] 
split level 67: [/input, 3254] 
split level 68: [/input, 3287] 
split level 69: [/input, 3288] 
split level 70: [/input, 2519] 
split level 71: [/input-8, 1346] 
split level 72: [/input-8, 1342] 
split level 73: [/input, 2536] 
split level 74: [/input, 1720] 
split level 75: [/input, 2535] 
split level 76: [/input, 1477] 
split level 77: [/input-8, 550] 
split level 78: [/input, 2517] 
split level 79: [/input-8, 641] 
split level 80: [/input, 3511] 
split level 81: [/input, 445] 
split level 82: [/input, 3257] 
split level 83: [/input, 2499] 
split level 84: [/input, 4055] 
split level 85: [/input, 3529] 
split level 86: [/input, 4071] 
split level 87: [/input, 2514] 
split level 88: [/input, 2228] 
split level 89: [/input-8, 1354] 
split level 90: [/input, 3507] 
split level 91: [/input, 3241] 
split level 92: [/input, 2516] 
split level 93: [/input, 3522] 
split level 94: [/input, 1718] 
split level 95: [/input, 460] 
split level 96: [/input, 4058] 
split level 97: [/input, 1432] 
split level 98: [/input, 312] 
split level 99: [/input, 4056] 
split level 100: [/input, 3523] 
split level 101: [/input, 2227] 
split level 102: [/input, 1434] 
split level 103: [/input, 2965] 
split level 104: [/input, 328] 
split level 105: [/input, 4054] 
split level 106: [/input, 3542] 
split level 107: [/input, 4057] 
split level 108: [/input-8, 86] 
split level 109: [/input-8, 1345] 
split level 110: [/input, 2531] 
split level 111: [/input, 4036] 
split level 112: [/input, 4051] 
split level 113: [/input, 2534] 
split level 114: [/input, 3541] 
split level 115: [/input, 3539] 
split level 116: [/input, 3291] 
split level 117: [/input, 2518] 
split level 118: [/input, 3733] 
split level 119: [/input, 2202] 
split level 120: [/input, 3734] 
split level 121: [/input-8, 414] 
split level 122: [/input, 4053] 
split level 123: [/input, 4073] 
split level 124: [/input, 2186] 
split level 125: [/input, 4070] 
split level 126: [/input-8, 1863] 
split level 127: [/input, 1431] 
split level 128: [/input, 1674] 
split level 129: [/input, 3434] 
split level 130: [/input, 4023] 
split level 131: [/input-8, 1476] 
split level 132: [/input, 1475] 
split level 133: [/input-8, 1362] 
split level 134: [/input, 2533] 
split level 135: [/input, 4068] 
split level 136: [/input, 2515] 
split level 137: [/input, 3731] 
split level 138: [/input, 4035] 
split level 139: [/input, 2183] 
split level 140: [/input-8, 412] 
split level 141: [/input, 2521] 
split level 142: [/input, 2537] 
split level 143: [/input-8, 1079] 
split level 144: [/input, 2498] 
split level 145: [/input, 4038] 
split level 146: [/input, 1641] 
split level 147: [/input, 2970] 
split level 148: [/input, 3292] 
split level 149: [/input, 4069] 
split level 150: [/input, 1497] 
split level 151: [/input, 2513] 
split level 152: [/input, 3989] 
split level 153: [/input, 3545] 
split level 154: [/input-8, 1325] 
split level 155: [/input, 4075] 
split level 156: [/input, 3266] 
split level 157: [/input, 3478] 
split level 158: [/input, 213] 
split level 159: [/input, 408] 
split level 160: [/input, 4049] 
split level 161: [/input, 236] 
split level 162: [/input, 4067] 
split level 163: [/input, 3555] 
split level 164: [/input, 4052] 
split level 165: [/input, 2980] 
split level 166: [/input, 4040] 
split level 167: [/input, 889] 
split level 168: [/input, 3290] 
split level 169: [/input-8, 402] 
split level 170: [/input, 4041] 
split level 171: [/input, 1518] 
split level 172: [/input, 2204] 
split level 173: [/input, 2284] 
split level 174: [/input-8, 447] 
split level 175: [/input, 161] 
split level 176: [/input, 280] 
split level 177: [/input, 3283] 
split level 178: [/input, 227] 
split level 179: [/input, 3557] 
split level 180: [/input, 3556] 
split level 181: [/input, 199] 
split level 182: [/input-8, 672] 
split level 183: [/input, 2154] 
split level 184: [/input, 3538] 
split level 185: [/input, 2967] 
split level 186: [/input, 2532] 
split level 187: [/input-8, 2021] 
split level 188: [/input, 3305] 
split level 189: [/input, 3554] 
split level 190: [/input, 217] 
split level 191: [/input, 3560] 
split level 192: [/input, 3418] 
split level 193: [/input, 3540] 
split level 194: [/input-8, 1333] 
split level 195: [/input, 4037] 
split level 196: [/input, 3537] 
split level 197: [/input, 2940] 
split level 198: [/input, 1754] 
split level 199: [/input, 4074] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22690916061401367
10 lb beta sum: 0.0, worst -0.22691118717193604
Time: prepare 0.0130    bound 0.1137    transfer 0.0052    finalize 0.0034    func 0.1380    
Accumulated time: func 0.1945    prepare 0.0237    bound 0.1697    transfer 0.0053    finalize 0.0035    
all_split False
======================Cut inference begins======================
max lb tensor(0.16682351) min lb tensor(-0.22690415)
Number of Verified Splits: 1 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.010737180709838867 
BICCOS Cumulative time: 0.010737180709838867
Preprocessing time: 0.010351181030273438 Inference time: 8.177757263183594e-05 Add cuts time: 6.914138793945312e-05 Cut analysis time: 0.00023508071899414062
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.22304 (1), -0.22298 (1), -0.22287 (1), -0.22274 (1), -0.22249 (1), -0.22246 (1), -0.22225 (1), -0.22224 (1), -0.22214 (1), -0.22199 (1), -0.22181 (1), -0.22174 (1), -0.22146 (1), -0.22136 (1), -0.22133 (1), -0.22105 (1), -0.22055 (1), -0.22048 (1), -0.21992 (1), -0.21973 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5644    set_bounds 0.0111    solve 0.1380    add 0.1853    
Accumulated time: pickout 0.0004    decision 0.5644    set_bounds 0.0111    solve 0.1380    add 0.1853    
Current (lb-rhs): -0.22303950786590576
50 domains visited
Cumulative time: 0.982323408126831

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 26] [/input-12, 26] [/input-12, 41] [/input-12, 26] [/input-12, 41] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] [/input-12, 26] 
split level 1: [/input-12, 41] [/input-12, 41] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 41] [/input-12, 41] [/input-12, 25] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 11] [/input-12, 25] [/input-12, 11] [/input-12, 11] [/input-12, 11] [/input-12, 25] [/input-12, 25] [/input-12, 41] [/input-12, 25] [/input-12, 25] 
split level 3: [/input-8, 614] [/input-12, 11] [/input-8, 1437] [/input-8, 1437] [/input-8, 1628] [/input-12, 11] [/input-8, 1628] [/input-12, 11] [/input-12, 11] [/input-12, 11] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2161571979522705
10 lb beta sum: 0.19533458352088928, worst -0.21392421424388885
Time: prepare 0.0077    bound 0.1244    transfer 0.0016    finalize 0.0025    func 0.1388    
Accumulated time: func 0.3333    prepare 0.0316    bound 0.2941    transfer 0.0070    finalize 0.0060    
all_split False
======================Cut inference begins======================
max lb tensor(0.06714723) min lb tensor(-0.21391961)
Number of Verified Splits: 23 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.013625383377075195 
BICCOS Cumulative time: 0.024362564086914062
Preprocessing time: 0.012122392654418945 Inference time: 0.0009121894836425781 Add cuts time: 0.0003476142883300781 Cut analysis time: 0.00024318695068359375
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.12352 (2), -0.12320 (2), -0.12272 (2), -0.12252 (2), -0.12231 (2), -0.12221 (2), -0.12177 (2), -0.12094 (2), -0.12083 (2), -0.12068 (2), -0.12064 (2), -0.12059 (2), -0.12041 (2), -0.12035 (2), -0.11955 (2), -0.11870 (2), -0.11630 (2), -0.11622 (2), -0.11403 (2), -0.11235 (2), 
Length of domains: 50
Time: pickout 0.0013    decision 0.0268    set_bounds 0.0119    solve 0.1389    add 0.0834    
Accumulated time: pickout 0.0017    decision 0.5912    set_bounds 0.0230    solve 0.2769    add 0.2688    
Current (lb-rhs): -0.12352102994918823
100 domains visited
Cumulative time: 1.2591054439544678

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 41] [/input-12, 41] [/input-12, 25] [/input-12, 25] [/input-12, 26] [/input-12, 25] [/input-12, 25] [/input-12, 26] [/input-12, 26] [/input-12, 41] 
split level 1: [/input-12, 25] [/input-12, 25] [/input-12, 11] [/input-12, 11] [/input-12, 41] [/input-12, 11] [/input-12, 11] [/input-12, 41] [/input-12, 25] [/input-12, 25] 
split level 2: [/input-12, 11] [/input-12, 11] [/input-8, 1628] [/input-8, 1628] [/input-12, 25] [/input-8, 1628] [/input-8, 1628] [/input-12, 25] [/input-12, 11] [/input-12, 11] 
split level 3: [/input-8, 1437] [/input-8, 1122] [/input-8, 1437] [/input-8, 1437] [/input-8, 1122] [/input-8, 1437] [/input-8, 1437] [/input-8, 1625] [/input-8, 1122] [/input-8, 1437] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.1231679916381836
10 lb beta sum: 0.4728100001811981, worst -0.1188739687204361
Time: prepare 0.0077    bound 0.1263    transfer 0.0013    finalize 0.0026    func 0.1405    
Accumulated time: func 0.4738    prepare 0.0395    bound 0.4204    transfer 0.0083    finalize 0.0086    
all_split False
======================Cut inference begins======================
max lb tensor(0.42332312) min lb tensor(-0.11546426)
Number of Verified Splits: 70 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 3.
#cuts 1-3: 3
#cuts >= 20: 0
BICCOS time: 0.01710987091064453 
BICCOS Cumulative time: 0.041472434997558594
Preprocessing time: 0.011943817138671875 Inference time: 0.003031492233276367 Add cuts time: 0.0018832683563232422 Cut analysis time: 0.0002512931823730469
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02770 (3), -0.02766 (3), -0.02761 (3), -0.02745 (3), -0.02739 (3), -0.02737 (3), -0.02715 (3), -0.02710 (3), -0.02704 (3), -0.02664 (3), -0.02657 (3), -0.02619 (3), -0.02607 (3), -0.02604 (3), -0.02212 (3), -0.02209 (3), -0.02182 (3), -0.02152 (3), -0.02041 (3), -0.02012 (3), 
Length of domains: 50
Time: pickout 0.0010    decision 0.0206    set_bounds 0.0149    solve 0.1406    add 0.0933    
Accumulated time: pickout 0.0028    decision 0.6118    set_bounds 0.0380    solve 0.4175    add 0.3620    
Current (lb-rhs): -0.027703091502189636
150 domains visited
Cumulative time: 1.5471179485321045

Shallow-BaB round 4
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] 
split level 1: [/input-12, 11] [/input-12, 11] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-12, 11] [/input-12, 11] 
split level 2: [/input-8, 1628] [/input-8, 1628] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1628] [/input-8, 1628] 
split level 3: [/input-8, 1437] [/input-8, 1437] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1437] [/input-8, 1437] 
cut re-enabled after branching node selection
0 lb beta sum: 0.6802674531936646, worst -0.027703523635864258
10 lb beta sum: 0.6802674531936646, worst -0.03584851324558258
Time: prepare 0.0191    bound 0.1247    transfer 0.0014    finalize 0.0035    func 0.1513    
Accumulated time: func 0.6252    prepare 0.0590    bound 0.5452    transfer 0.0096    finalize 0.0120    
all_split False
======================Cut inference begins======================
max lb tensor(0.27348262) min lb tensor(-0.02694213)
Number of Verified Splits: 196 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 16.
#cuts 1-3: 7
#cuts 4-6: 9
#cuts >= 20: 0
BICCOS time: 0.02515721321105957 
BICCOS Cumulative time: 0.06662964820861816
Preprocessing time: 0.012154817581176758 Inference time: 0.009258031845092773 Add cuts time: 0.003014802932739258 Cut analysis time: 0.0007295608520507812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.01387 (4), -0.01369 (4), -0.01359 (4), -0.01334 (4), -0.01333 (4), -0.01330 (4), -0.01328 (4), -0.01300 (4), -0.01299 (4), -0.01291 (4), -0.01268 (4), -0.01268 (4), -0.01262 (4), -0.01254 (4), -0.01241 (4), -0.01239 (4), -0.01235 (4), -0.01189 (4), -0.01188 (4), -0.01177 (4), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0205    set_bounds 0.0143    solve 0.1514    add 0.2225    
Accumulated time: pickout 0.0038    decision 0.6324    set_bounds 0.0523    solve 0.5689    add 0.5845    
Current (lb-rhs): -0.013868555426597595
200 domains visited
Cumulative time: 1.9891774654388428

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] 
split level 1: [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] 
split level 2: [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] [/input-8, 1500] [/input-8, 1437] [/input-8, 1437] [/input-8, 1437] 
split level 3: [/input-8, 1357] [/input-8, 1357] [/input-8, 1500] [/input-8, 1500] [/input-8, 1500] [/input-8, 1500] [/input-8, 1346] [/input-8, 1500] [/input-8, 1500] [/input-8, 1500] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.02379453182220459
10 lb beta sum: 1.6707463264465332, worst -0.018979281187057495
Time: prepare 0.0079    bound 0.1438    transfer 0.0013    finalize 0.0021    func 0.1577    
Accumulated time: func 0.7829    prepare 0.0672    bound 0.6889    transfer 0.0110    finalize 0.0141    
all_split False
======================Cut inference begins======================
max lb tensor(0.02962232) min lb tensor(-0.00910325)
Number of Verified Splits: 277 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 12.
#cuts 1-3: 8
#cuts 4-6: 4
#cuts >= 20: 0
BICCOS time: 0.03548765182495117 
BICCOS Cumulative time: 0.10211730003356934
Preprocessing time: 0.014218330383300781 Inference time: 0.016921520233154297 Add cuts time: 0.0037932395935058594 Cut analysis time: 0.0005545616149902344
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00569 (5), -0.00565 (5), -0.00559 (5), -0.00542 (5), -0.00521 (5), -0.00520 (5), -0.00504 (5), -0.00502 (5), -0.00500 (5), -0.00491 (5), -0.00491 (5), -0.00491 (5), -0.00486 (5), -0.00486 (5), -0.00467 (5), -0.00463 (5), -0.00460 (5), -0.00457 (5), -0.00454 (5), -0.00450 (5), 
Length of domains: 50
Time: pickout 0.0082    decision 0.0239    set_bounds 0.0159    solve 0.1578    add 0.2592    
Accumulated time: pickout 0.0121    decision 0.6563    set_bounds 0.0682    solve 0.7267    add 0.8437    
Current (lb-rhs): -0.005686521530151367
250 domains visited
Cumulative time: 2.496605157852173

Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41]), tensor([-1., -1.]), tensor([0, 0]), tensor([1.82192979e+29, 2.14186776e-02]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1500], [-1.0], [0], [0.0034002678003162146], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([1.82192979e+29, 9.39925611e-02, 5.31277657e-02, 7.40003726e-03]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1500], [-1.0], [0], [0.0034002678003162146], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.82192979e+29, 9.39925611e-02, 5.31277657e-02, 3.22213471e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1500], [1.0], [0], [6.726232628759122e-44], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([-1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([1.82192979e+29, 9.39925611e-02, 5.31277657e-02, 8.13736208e-03]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1500], [1.0], [0], [6.726232628759122e-44], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([-1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.82192979e+29, 9.39925611e-02, 5.31277657e-02, 3.28146517e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41, 11]), tensor([-1.,  1.,  1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 9.39925611e-02, 3.97422314e-02]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41, 25]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 2.23621298e-02, 7.55553087e-03]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41, 25]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.82192979e+29, 2.23621298e-02, 1.89940572e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41, 11, 25]), tensor([ 1.,  1., -1., -1.]), tensor([0, 0, 0, 0]), tensor([1.82192979e+29, 8.40304792e-02, 5.15999794e-02, 8.80451640e-04]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41, 11, 25]), tensor([ 1.,  1., -1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.82192979e+29, 8.40304792e-02, 5.15999794e-02, 2.54739046e-01]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357], [-1.0], [0], [0.006086574401706457], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.82192979e+29, 8.40304792e-02, 3.93584967e-02, 1.33074392e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357], [-1.0], [0], [0.006086574401706457], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([1.82192979e+29, 8.40304792e-02, 3.93584967e-02, 3.36524099e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357], [1.0], [0], [1.821905611821129e+29], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([ 1.,  1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.82192979e+29, 8.40304792e-02, 3.93584967e-02, 1.32871736e-02]), tensor([0, 1, 2, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357], [1.0], [0], [1.821905611821129e+29], [3]), '/input-12': (tensor([26, 41, 11, 25]), tensor([1., 1., 1., 1.]), tensor([0, 0, 0, 0]), tensor([1.82192979e+29, 8.40304792e-02, 3.93584967e-02, 3.40289921e-02]), tensor([0, 1, 2, 4]))}
Shallow branching resets to n domains:  14
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.14499104022979736
10 lb beta sum: 1.277021884918213, worst -0.13281303644180298
Time: prepare 0.0006    bound 0.1424    transfer 0.0006    finalize 0.0003    func 0.1440    
Accumulated time: func 0.9269    prepare 0.0679    bound 0.8314    transfer 0.0116    finalize 0.0143    
After pruning, left:  5

Back to Regular BaB

BaB round 1
batch: 5
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 25] [/input-8, 1628] [/input-8, 1628] [/input-12, 25] [/input-12, 78] 
split level 1: [/input-12, 11] [/input-8, 1437] [/input-8, 1437] [/input-8, 1628] [/input-12, 11] 
split level 2: [/input-8, 1628] [/input-8, 1366] [/input-8, 1366] [/input-8, 1437] [/input-8, 1628] 
split level 3: [/input-8, 1437] [/input-8, 1619] [/input-8, 1619] [/input-8, 1619] [/input-8, 1437] 
split level 4: [/input-8, 1619] [/input-8, 1357] [/input-8, 1357] [/input-8, 1500] [/input-8, 1619] 
split level 5: [/input-8, 1357] [/input-8, 1346] [/input-8, 1346] [/input-8, 1357] [/input-8, 1357] 
cut re-enabled after branching node selection
0 lb beta sum: 1.1446431875228882, worst -0.09106643497943878
10 lb beta sum: 1.1446431875228882, worst -0.09067399799823761
Time: prepare 0.0148    bound 0.1384    transfer 0.0055    finalize 0.0024    func 0.1631    
Accumulated time: func 1.0901    prepare 0.0830    bound 0.9698    transfer 0.0171    finalize 0.0167    
all_split False
======================Cut inference begins======================
max lb tensor(0.27312979) min lb tensor(-0.09061487)
Number of Verified Splits: 250 of 320
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 1.2770224809646606, worst -0.16083446145057678
10 lb beta sum: 1.4190425872802734, worst -0.060499101877212524
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 8
#cuts 4-6: 6
#cuts 7-9: 2
#cuts 10-12: 2
#cuts >= 20: 0
BICCOS time: 0.6205604076385498 
BICCOS Cumulative time: 0.7226777076721191
Preprocessing time: 0.008791446685791016 Inference time: 0.6032626628875732 Add cuts time: 0.007586002349853516 Cut analysis time: 0.0009202957153320312
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.09061 (6), -0.08850 (6), -0.08659 (6), -0.08450 (6), -0.08049 (6), -0.07863 (6), -0.07812 (6), -0.07651 (6), -0.07603 (6), -0.07457 (6), -0.07365 (6), -0.07250 (6), -0.06809 (6), -0.06578 (6), -0.06413 (6), -0.06369 (6), -0.06199 (6), -0.06139 (6), -0.06042 (6), -0.05830 (6), 
Length of domains: 70
Time: pickout 0.0011    decision 0.0190    set_bounds 0.0264    solve 0.1632    add 0.0616    
Accumulated time: pickout 0.0131    decision 0.6753    set_bounds 0.0946    solve 0.8900    add 0.9053    
Current (lb-rhs): -0.09061487019062042
320 domains visited
Cumulative time: 3.6715900897979736

BaB round 2
batch: 70
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] [/input-8, 1366] [/input-12, 78] [/input-8, 1366] [/input-12, 78] [/input-8, 1366] [/input-12, 78] [/input-12, 78] [/input-8, 1366] [/input-12, 78] 
split level 1: [/input-8, 1366] [/input-8, 1500] [/input-8, 1366] [/input-8, 1500] [/input-8, 1366] [/input-8, 1500] [/input-8, 1366] [/input-8, 1366] [/input-8, 1500] [/input-8, 1366] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.09060811996459961
10 lb beta sum: 0.21281041204929352, worst -0.08862042427062988
Time: prepare 0.0057    bound 0.1428    transfer 0.0022    finalize 0.0014    func 0.1539    
Accumulated time: func 1.2440    prepare 0.0889    bound 1.1126    transfer 0.0192    finalize 0.0181    
all_split False
======================Cut inference begins======================
max lb tensor(0.30025321) min lb tensor(-0.08860826)
Number of Verified Splits: 93 of 280
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 5.
#cuts 1-3: 5
#cuts >= 20: 0
BICCOS time: 0.018474340438842773 
BICCOS Cumulative time: 0.7411520481109619
Preprocessing time: 0.008417606353759766 Inference time: 0.00804901123046875 Add cuts time: 0.0016930103302001953 Cut analysis time: 0.0003147125244140625
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08861 (8), -0.08598 (8), -0.08435 (8), -0.08187 (8), -0.07962 (8), -0.07729 (8), -0.07617 (8), -0.07559 (8), -0.07539 (8), -0.07454 (8), -0.07409 (8), -0.07288 (8), -0.07184 (8), -0.07161 (8), -0.07093 (8), -0.07052 (8), -0.06998 (8), -0.06810 (8), -0.06747 (8), -0.06671 (8), 
Length of domains: 187
Time: pickout 0.0059    decision 0.0189    set_bounds 0.0176    solve 0.1540    add 0.0301    
Accumulated time: pickout 0.0191    decision 0.6942    set_bounds 0.1122    solve 1.0440    add 0.9354    
Current (lb-rhs): -0.0886082649230957
507 domains visited
Cumulative time: 3.9178624153137207

BaB round 3
batch: 187
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1618] [/input-8, 1618] [/input-8, 1618] [/input-8, 1618] [/input-8, 1618] [/input-8, 1618] [/input-8, 1618] [/input-8, 1618] [/input-8, 1347] [/input-8, 1618] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08834338188171387
10 lb beta sum: 0.2832421362400055, worst -0.08637022972106934
Time: prepare 0.0074    bound 0.1449    transfer 0.0013    finalize 0.0019    func 0.1579    
Accumulated time: func 1.4019    prepare 0.0965    bound 1.2575    transfer 0.0205    finalize 0.0200    
all_split False
======================Cut inference begins======================
max lb tensor(0.30493903) min lb tensor(-0.08636236)
Number of Verified Splits: 28 of 374
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.014306068420410156 
BICCOS Cumulative time: 0.7554581165313721
Preprocessing time: 0.010925769805908203 Inference time: 0.002711057662963867 Add cuts time: 0.00036334991455078125 Cut analysis time: 0.0003058910369873047
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08636 (9), -0.08369 (9), -0.08202 (9), -0.07954 (9), -0.07728 (9), -0.07523 (9), -0.07392 (9), -0.07330 (9), -0.07318 (9), -0.07201 (9), -0.07183 (9), -0.07078 (9), -0.06962 (9), -0.06922 (9), -0.06897 (9), -0.06886 (9), -0.06787 (9), -0.06764 (9), -0.06684 (9), -0.06579 (9), 
Length of domains: 346
Time: pickout 0.0031    decision 0.0207    set_bounds 0.0161    solve 0.1581    add 0.0026    
Accumulated time: pickout 0.0221    decision 0.7149    set_bounds 0.1282    solve 1.2020    add 0.9380    
Current (lb-rhs): -0.08636236190795898
853 domains visited
Cumulative time: 4.133699893951416

BaB round 4
batch: 346
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1610] [/input-8, 1347] [/input-8, 1044] [/input-8, 1347] [/input-8, 1610] [/input-8, 1347] [/input-8, 1044] [/input-8, 1610] [/input-8, 1625] [/input-8, 1044] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08540022373199463
10 lb beta sum: 0.5425961017608643, worst -0.08341443538665771
Time: prepare 0.0135    bound 0.1527    transfer 0.0079    finalize 0.0033    func 0.1818    
Accumulated time: func 1.5837    prepare 0.1101    bound 1.4103    transfer 0.0284    finalize 0.0233    
all_split False
======================Cut inference begins======================
max lb tensor(0.01432443) min lb tensor(-0.08340216)
Number of Verified Splits: 61 of 692
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 7.
#cuts 1-3: 7
#cuts >= 20: 0
BICCOS time: 0.029270410537719727 
BICCOS Cumulative time: 0.7847285270690918
Preprocessing time: 0.020282745361328125 Inference time: 0.006398200988769531 Add cuts time: 0.002268552780151367 Cut analysis time: 0.0003209114074707031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08340 (10), -0.08170 (10), -0.07905 (10), -0.07819 (10), -0.07739 (10), -0.07520 (10), -0.07389 (10), -0.07157 (10), -0.07109 (10), -0.07098 (10), -0.06994 (10), -0.06944 (10), -0.06887 (10), -0.06762 (10), -0.06759 (10), -0.06716 (10), -0.06672 (10), -0.06600 (10), -0.06556 (10), -0.06511 (10), 
Length of domains: 631
Time: pickout 0.0059    decision 0.0316    set_bounds 0.0298    solve 0.1820    add 0.0041    
Accumulated time: pickout 0.0280    decision 0.7465    set_bounds 0.1580    solve 1.3840    add 0.9421    
Current (lb-rhs): -0.08340215682983398
1484 domains visited
Cumulative time: 4.417575836181641

BaB round 5
batch: 631
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1044] [/input-8, 1625] [/input-8, 1610] [/input-8, 1625] [/input-8, 1044] [/input-8, 1625] [/input-8, 1610] [/input-8, 1618] [/input-8, 1610] [/input-8, 1044] 
cut re-enabled after branching node selection
0 lb beta sum: 0.637437105178833, worst -0.08320963382720947
10 lb beta sum: 0.637437105178833, worst -0.08320128917694092
Time: prepare 0.0598    bound 0.1572    transfer 0.0092    finalize 0.0079    func 0.2422    
Accumulated time: func 1.8260    prepare 0.1701    bound 1.5675    transfer 0.0376    finalize 0.0312    
all_split False
======================Cut inference begins======================
max lb tensor(0.01694715) min lb tensor(-0.08319271)
Number of Verified Splits: 100 of 1262
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 8.
#cuts 1-3: 7
#cuts 4-6: 1
#cuts >= 20: 0
BICCOS time: 0.05285286903381348 
BICCOS Cumulative time: 0.8375813961029053
Preprocessing time: 0.03886866569519043 Inference time: 0.011853218078613281 Add cuts time: 0.001712799072265625 Cut analysis time: 0.0004181861877441406
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08319 (11), -0.07808 (11), -0.07806 (11), -0.07658 (11), -0.07564 (11), -0.07530 (11), -0.07467 (11), -0.07446 (11), -0.07340 (11), -0.07154 (11), -0.07154 (11), -0.07135 (11), -0.07011 (11), -0.06966 (11), -0.06860 (11), -0.06822 (11), -0.06770 (11), -0.06737 (11), -0.06733 (11), -0.06692 (11), 
Length of domains: 1162
Time: pickout 0.0121    decision 0.0471    set_bounds 0.0545    solve 0.2432    add 0.0043    
Accumulated time: pickout 0.0401    decision 0.7936    set_bounds 0.2126    solve 1.6273    add 0.9464    
Current (lb-rhs): -0.08319270610809326
2646 domains visited
Cumulative time: 4.833689451217651

BaB round 6
batch: 1162
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1625] [/input-8, 1610] [/input-8, 1625] [/input-8, 1625] [/input-8, 1610] [/input-8, 1625] [/input-8, 1610] [/input-8, 1609] [/input-8, 1625] [/input-8, 1610] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08265984058380127
10 lb beta sum: 0.49364393949508667, worst -0.08070921897888184
Time: prepare 0.0501    bound 0.1911    transfer 0.0117    finalize 0.0136    func 0.2816    
Accumulated time: func 2.1076    prepare 0.2205    bound 1.7586    transfer 0.0493    finalize 0.0448    
all_split False
======================Cut inference begins======================
max lb tensor(0.20215935) min lb tensor(-0.08070469)
Number of Verified Splits: 286 of 2324
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 11.
#cuts 1-3: 7
#cuts 4-6: 3
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 0.11365079879760742 
BICCOS Cumulative time: 0.9512321949005127
Preprocessing time: 0.07488036155700684 Inference time: 0.033859968185424805 Add cuts time: 0.004196882247924805 Cut analysis time: 0.0007135868072509766
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.08070 (12), -0.07949 (12), -0.07788 (12), -0.07513 (12), -0.07419 (12), -0.07387 (12), -0.07258 (12), -0.07205 (12), -0.07189 (12), -0.07168 (12), -0.07167 (12), -0.07130 (12), -0.07107 (12), -0.07098 (12), -0.07090 (12), -0.07069 (12), -0.07013 (12), -0.06925 (12), -0.06865 (12), -0.06859 (12), 
Length of domains: 2038
Time: pickout 0.0161    decision 0.0778    set_bounds 0.0964    solve 0.4433    add 0.0097    
Accumulated time: pickout 0.0562    decision 0.8714    set_bounds 0.3090    solve 2.0706    add 0.9561    
Current (lb-rhs): -0.0807046890258789
4684 domains visited
Cumulative time: 5.595282316207886

BaB round 7
batch: 2038
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 641] [/input-8, 1609] [/input-8, 680] [/input-8, 641] [/input-8, 1609] [/input-8, 641] [/input-8, 1625] [/input-8, 680] [/input-8, 641] [/input-8, 1625] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07919180393218994
10 lb beta sum: 0.4706348478794098, worst -0.07720327377319336
Time: prepare 0.0921    bound 0.2888    transfer 0.0348    finalize 0.0243    func 0.4667    
Accumulated time: func 2.5742    prepare 0.3128    bound 2.0474    transfer 0.0841    finalize 0.0691    
all_split False
======================Cut inference begins======================
max lb tensor(0.28213096) min lb tensor(-0.07717574)
Number of Verified Splits: 619 of 4076
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 18.
#cuts 1-3: 7
#cuts 4-6: 8
#cuts 7-9: 3
#cuts >= 20: 0
BICCOS time: 0.21909141540527344 
BICCOS Cumulative time: 1.1703236103057861
Preprocessing time: 0.1284925937652588 Inference time: 0.07911396026611328 Add cuts time: 0.01048898696899414 Cut analysis time: 0.0009958744049072266
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07718 (13), -0.07699 (13), -0.07597 (13), -0.07578 (13), -0.07544 (13), -0.07512 (13), -0.07435 (13), -0.07415 (13), -0.07203 (13), -0.07188 (13), -0.07168 (13), -0.07098 (13), -0.07088 (13), -0.07087 (13), -0.07067 (13), -0.07025 (13), -0.07019 (13), -0.07011 (13), -0.06935 (13), -0.06924 (13), 
Length of domains: 3457
Time: pickout 0.0360    decision 0.1317    set_bounds 0.1755    solve 0.4675    add 0.0191    
Accumulated time: pickout 0.0922    decision 1.0031    set_bounds 0.4845    solve 2.5381    add 0.9752    
Current (lb-rhs): -0.07717573642730713
8141 domains visited
Cumulative time: 6.6543288230896

BaB round 8
batch: 3457
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 86] [/input-8, 86] [/input-8, 1609] [/input-8, 86] [/input-8, 641] [/input-8, 86] [/input-8, 86] [/input-8, 86] [/input-8, 641] [/input-8, 1134] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07717573642730713
10 lb beta sum: 0.43147245049476624, worst -0.07717835903167725
Time: prepare 0.1586    bound 0.5923    transfer 0.0739    finalize 0.0472    func 0.9175    
Accumulated time: func 3.4918    prepare 0.4717    bound 2.6397    transfer 0.1580    finalize 0.1163    
all_split False
======================Cut inference begins======================
max lb tensor(0.33109203) min lb tensor(-0.07717335)
Number of Verified Splits: 1711 of 6914
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 7
#cuts 4-6: 10
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.4776487350463867 
BICCOS Cumulative time: 1.6479723453521729
Preprocessing time: 0.22023963928222656 Inference time: 0.2272350788116455 Add cuts time: 0.028956174850463867 Cut analysis time: 0.0012178421020507812
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07717 (14), -0.07699 (14), -0.07597 (14), -0.07578 (14), -0.07544 (14), -0.07493 (14), -0.07435 (14), -0.07396 (14), -0.07183 (14), -0.07150 (14), -0.07079 (14), -0.07047 (14), -0.07025 (14), -0.07019 (14), -0.06992 (14), -0.06934 (14), -0.06905 (14), -0.06905 (14), -0.06896 (14), -0.06879 (14), 
Length of domains: 5203
Time: pickout 0.0445    decision 0.4154    set_bounds 0.3037    solve 1.1154    add 0.1447    
Accumulated time: pickout 0.1367    decision 1.4185    set_bounds 0.7882    solve 3.6534    add 1.1199    
Current (lb-rhs): -0.07717335224151611
13344 domains visited
Cumulative time: 9.183057069778442

BaB round 9
batch: 4096
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 1134] [/input-8, 641] [/input-8, 1134] [/input-8, 86] [/input-8, 641] [/input-8, 1134] [/input-8, 86] [/input-8, 641] [/input-8, 641] [/input-8, 1134] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07418060302734375
10 lb beta sum: 0.40882447361946106, worst -0.07407820224761963
Time: prepare 0.2081    bound 0.6821    transfer 0.0788    finalize 0.0612    func 1.0843    
Accumulated time: func 4.5761    prepare 0.6801    bound 3.3218    transfer 0.2368    finalize 0.1775    
all_split False
======================Cut inference begins======================
max lb tensor(0.40089357) min lb tensor(-0.07407558)
Number of Verified Splits: 1758 of 8192
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 22.
#cuts 1-3: 8
#cuts 4-6: 9
#cuts 7-9: 5
#cuts >= 20: 0
BICCOS time: 0.5526511669158936 
BICCOS Cumulative time: 2.2006235122680664
Preprocessing time: 0.26568031311035156 Inference time: 0.24822235107421875 Add cuts time: 0.037540435791015625 Cut analysis time: 0.0012080669403076172
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07717 (14), -0.07544 (14), -0.07408 (15), -0.07396 (14), -0.07352 (15), -0.07312 (15), -0.07305 (15), -0.07268 (15), -0.07211 (15), -0.07211 (15), -0.07210 (15), -0.07183 (14), -0.07150 (14), -0.07128 (15), -0.07079 (14), -0.07070 (15), -0.07047 (14), -0.06992 (14), -0.06934 (14), -0.06905 (14), 
Length of domains: 7541
Time: pickout 0.0754    decision 0.2413    set_bounds 0.5207    solve 1.0873    add 0.0453    
Accumulated time: pickout 0.2120    decision 1.6599    set_bounds 1.3089    solve 4.7407    add 1.1652    
Current (lb-rhs): -0.07717335224151611
19778 domains visited
current_vram/total_varm: 27.7GB/99.9GB, batch_size increase to 8192
Cumulative time: 11.73461651802063

BaB round 10
batch: 7541
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-8, 641] [/input, 2503] [/input-8, 680] [/input-8, 802] [/input, 2504] [/input-8, 667] [/input, 2504] [/input-8, 680] [/input-8, 641] [/input, 2504] 
cut re-enabled after branching node selection
0 lb beta sum: 0.39137938618659973, worst -0.7172332406044006
10 lb beta sum: 0.4979875385761261, worst -0.07493007183074951
Time: prepare 0.7206    bound 1.1913    transfer 0.0723    finalize 0.1038    func 2.1873    
Accumulated time: func 6.7634    prepare 1.4010    bound 4.5131    transfer 0.3091    finalize 0.2814    
all_split False
======================Cut inference begins======================
max lb tensor(0.54591256) min lb tensor(-0.07492030)
Number of Verified Splits: 4322 of 15082
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 21.
#cuts 1-3: 10
#cuts 4-6: 10
#cuts 7-9: 1
#cuts >= 20: 0
BICCOS time: 1.435835599899292 
BICCOS Cumulative time: 3.6364591121673584
Preprocessing time: 0.493480920791626 Inference time: 0.8895199298858643 Add cuts time: 0.05191183090209961 Cut analysis time: 0.0009229183197021484
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07492 (15), -0.07350 (15), -0.07320 (15), -0.07226 (16), -0.07179 (15), -0.07171 (15), -0.07170 (16), -0.07129 (16), -0.07123 (16), -0.07086 (16), -0.07030 (15), -0.07029 (16), -0.07029 (16), -0.07025 (16), -0.06967 (15), -0.06945 (16), -0.06929 (16), -0.06923 (15), -0.06888 (16), -0.06873 (16), 
Length of domains: 10760
Time: pickout 0.1344    decision 0.6612    set_bounds 0.8556    solve 2.1906    add 0.0535    
Accumulated time: pickout 0.3465    decision 2.3210    set_bounds 2.1646    solve 6.9313    add 1.2186    
Current (lb-rhs): -0.07492029666900635
30538 domains visited
Cumulative time: 17.12420892715454

BaB round 11
batch: 8192
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input, 2503] [/input, 2504] [/input-8, 1618] [/input, 2503] [/input, 2504] [/input-8, 680] [/input, 2503] [/input-8, 1134] [/input, 2503] [/input, 2503] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07311320304870605
10 lb beta sum: 0.5354413390159607, worst -0.07310497760772705
Time: prepare 0.4300    bound 1.2850    transfer 0.0911    finalize 0.1161    func 2.0316    
Accumulated time: func 8.7950    prepare 1.8314    bound 5.7981    transfer 0.4002    finalize 0.3975    
all_split False
======================Cut inference begins======================
max lb tensor(0.98892224) min lb tensor(-0.07310140)
Number of Verified Splits: 11722 of 16384
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 2.6730875968933105 
BICCOS Cumulative time: 6.309546709060669
Preprocessing time: 0.874492883682251 Inference time: 1.6585071086883545 Add cuts time: 0.13972091674804688 Cut analysis time: 0.0003666877746582031
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.07310 (16), -0.07170 (16), -0.07169 (16), -0.07138 (16), -0.07129 (16), -0.07086 (16), -0.07029 (16), -0.07025 (16), -0.07012 (16), -0.07001 (17), -0.06997 (16), -0.06989 (16), -0.06897 (17), -0.06872 (16), -0.06860 (17), -0.06849 (16), -0.06841 (16), -0.06825 (16), -0.06819 (16), -0.06784 (16), 
Length of domains: 7230
Time: pickout 0.1300    decision 0.4849    set_bounds 1.0000    solve 2.0363    add 0.0239    
Accumulated time: pickout 0.4765    decision 2.8060    set_bounds 3.1646    solve 8.9676    add 1.2425    
Current (lb-rhs): -0.07310140132904053
35200 domains visited
current_vram/total_varm: 27.7GB/99.9GB, batch_size increase to 16384
Cumulative time: 23.6110360622406

BaB round 12
batch: 7230
splitting decisions: 
split level 0: [/input-8, 680] [/input, 2503] [/input-12, 45] [/input-8, 1618] [/input-8, 1134] [/input, 2503] [/input-12, 45] [/input-8, 1618] [/input, 2504] [/input, 2503] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.07000136375427246

all verified at 6th iter
Time: prepare 0.3899    bound 0.2184    transfer 0.0777    finalize 0.0930    func 0.8730    
Accumulated time: func 9.6681    prepare 2.2216    bound 6.0165    transfer 0.4779    finalize 0.4905    
all_split False
======================Cut inference begins======================
max lb tensor(0.25755772) min lb tensor(5.48362732e-06)
Number of Verified Splits: 14460 of 14460
No cut inferred: All or none verified.
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.48992061614990234 
BICCOS Cumulative time: 6.799467325210571
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.1224    decision 0.6472    set_bounds 0.6714    solve 1.1279    add 0.0025    
Accumulated time: pickout 0.5990    decision 3.4531    set_bounds 3.8359    solve 10.0955    add 1.2450    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
35200 domains visited
Cumulative time: 26.80497097969055


Properties batch 2, size 1
Remaining timeout: 171.4300549030304
Verifying property 2 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0., -1.,  0.,  0.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.22163165]], device='cuda:0') need to verify.
Model prediction is: tensor([-10.51362133, -15.75713921, -11.03450871, -11.39007473, -12.12888622,
        -11.76603127, -13.25793362, -13.95927143, -13.38565063, -14.89714527],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.22163165]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 766
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 172
Node /15 input 0: size torch.Size([100]) unstable 14
-----------------
# of unstable neurons: 952
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.000102996826171875
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22162997722625732
10 lb beta sum: 0.0, worst -0.22164124250411987
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0558    transfer 0.0001    finalize 0.0001    func 0.0562    
Accumulated time: func 0.0562    prepare 0.0002    bound 0.0558    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] 
split level 1: [/input-12, 26] 
split level 2: [/input-12, 41] 
split level 3: [/input-12, 25] 
split level 4: [/input-12, 45] 
split level 5: [/input-8, 1628] 
split level 6: [/input-8, 1366] 
split level 7: [/input-8, 413] 
split level 8: [/input-8, 1394] 
split level 9: [/input-8, 1357] 
split level 10: [/input-8, 1404] 
split level 11: [/input-8, 1321] 
split level 12: [/input-8, 1396] 
split level 13: [/input-8, 1393] 
split level 14: [/input-8, 648] 
split level 15: [/input-8, 1356] 
split level 16: [/input-8, 1134] 
split level 17: [/input-8, 1370] 
split level 18: [/input-8, 1619] 
split level 19: [/input-8, 1405] 
split level 20: [/input-8, 1369] 
split level 21: [/input-8, 1395] 
split level 22: [/input, 1667] 
split level 23: [/input-8, 402] 
split level 24: [/input, 1671] 
split level 25: [/input-8, 414] 
split level 26: [/input-8, 1333] 
split level 27: [/input-8, 1325] 
split level 28: [/input-8, 422] 
split level 29: [/input-8, 641] 
split level 30: [/input-8, 1347] 
split level 31: [/input-8, 1618] 
split level 32: [/input-8, 412] 
split level 33: [/input-8, 1402] 
split level 34: [/input-8, 1621] 
split level 35: [/input-8, 1345] 
split level 36: [/input-8, 664] 
split level 37: [/input, 1668] 
split level 38: [/input-8, 1403] 
split level 39: [/input-8, 656] 
split level 40: [/input, 2181] 
split level 41: [/input-8, 672] 
split level 42: [/input-8, 1354] 
split level 43: [/input, 3494] 
split level 44: [/input-8, 286] 
split level 45: [/input, 1396] 
split level 46: [/input, 3428] 
split level 47: [/input-8, 1353] 
split level 48: [/input-8, 996] 
split level 49: [/input, 1684] 
split level 50: [/input-8, 1362] 
split level 51: [/input-8, 1599] 
split level 52: [/input-8, 1437] 
split level 53: [/input-8, 1346] 
split level 54: [/input, 2163] 
split level 55: [/input-8, 287] 
split level 56: [/input-8, 1441] 
split level 57: [/input-8, 1342] 
split level 58: [/input, 3470] 
split level 59: [/input, 460] 
split level 60: [/input, 3524] 
split level 61: [/input-8, 861] 
split level 62: [/input, 2966] 
split level 63: [/input, 1641] 
split level 64: [/input, 2180] 
split level 65: [/input-8, 680] 
split level 66: [/input, 1444] 
split level 67: [/input, 408] 
split level 68: [/input-8, 1832] 
split level 69: [/input, 1652] 
split level 70: [/input, 3427] 
split level 71: [/input, 327] 
split level 72: [/input, 3443] 
split level 73: [/input, 3507] 
split level 74: [/input-8, 419] 
split level 75: [/input, 328] 
split level 76: [/input, 3240] 
split level 77: [/input, 2228] 
split level 78: [/input, 279] 
split level 79: [/input, 312] 
split level 80: [/input, 2101] 
split level 81: [/input, 1434] 
split level 82: [/input, 2358] 
split level 83: [/input-8, 1625] 
split level 84: [/input, 429] 
split level 85: [/input, 3522] 
split level 86: [/input, 3345] 
split level 87: [/input-8, 1001] 
split level 88: [/input, 2227] 
split level 89: [/input, 445] 
split level 90: [/input, 2529] 
split level 91: [/input, 3089] 
split level 92: [/input-8, 1341] 
split level 93: [/input, 1431] 
split level 94: [/input-8, 1434] 
split level 95: [/input-8, 1006] 
split level 96: [/input-8, 1361] 
split level 97: [/input-8, 1609] 
split level 98: [/input, 1415] 
split level 99: [/input, 3450] 
split level 100: [/input, 1448] 
split level 101: [/input, 3346] 
split level 102: [/input, 3457] 
split level 103: [/input, 33] 
split level 104: [/input, 2334] 
split level 105: [/input, 2486] 
split level 106: [/input, 3441] 
split level 107: [/input-8, 1877] 
split level 108: [/input, 1429] 
split level 109: [/input, 2322] 
split level 110: [/input-8, 1863] 
split level 111: [/input-8, 1610] 
split level 112: [/input, 1574] 
split level 113: [/input, 3556] 
split level 114: [/input, 1432] 
split level 115: [/input, 2965] 
split level 116: [/input, 2183] 
split level 117: [/input, 2499] 
split level 118: [/input, 3523] 
split level 119: [/input, 2341] 
split level 120: [/input-8, 1500] 
split level 121: [/input, 3490] 
split level 122: [/input, 2330] 
split level 123: [/input, 3397] 
split level 124: [/input, 3409] 
split level 125: [/input, 3509] 
split level 126: [/input-8, 1079] 
split level 127: [/input, 3426] 
split level 128: [/input, 2204] 
split level 129: [/input, 3239] 
split level 130: [/input, 2321] 
split level 131: [/input, 3254] 
split level 132: [/input, 3411] 
split level 133: [/input-8, 803] 
split level 134: [/input-8, 447] 
split level 135: [/input, 65] 
split level 136: [/input, 3521] 
split level 137: [/input, 1297] 
split level 138: [/input, 2326] 
split level 139: [/input, 2325] 
split level 140: [/input, 2501] 
split level 141: [/input, 3395] 
split level 142: [/input, 2584] 
split level 143: [/input, 2324] 
split level 144: [/input, 2331] 
split level 145: [/input, 3442] 
split level 146: [/input, 3425] 
split level 147: [/input, 1298] 
split level 148: [/input, 2172] 
split level 149: [/input, 2332] 
split level 150: [/input, 2419] 
split level 151: [/input, 1674] 
split level 152: [/input, 2357] 
split level 153: [/input, 49] 
split level 154: [/input, 2498] 
split level 155: [/input, 3554] 
split level 156: [/input, 1460] 
split level 157: [/input, 3349] 
split level 158: [/input-8, 501] 
split level 159: [/input, 3381] 
split level 160: [/input, 3540] 
split level 161: [/input, 2372] 
split level 162: [/input, 280] 
split level 163: [/input, 3734] 
split level 164: [/input, 3334] 
split level 165: [/input, 2333] 
split level 166: [/input, 3332] 
split level 167: [/input, 1458] 
split level 168: [/input, 3362] 
split level 169: [/input, 4038] 
split level 170: [/input, 2970] 
split level 171: [/input, 2482] 
split level 172: [/input, 3142] 
split level 173: [/input, 2154] 
split level 174: [/input, 3526] 
split level 175: [/input, 1475] 
split level 176: [/input, 3340] 
split level 177: [/input, 3337] 
split level 178: [/input, 3538] 
split level 179: [/input, 3348] 
split level 180: [/input, 3336] 
split level 181: [/input, 2513] 
split level 182: [/input, 3361] 
split level 183: [/input, 3266] 
split level 184: [/input, 34] 
split level 185: [/input, 2337] 
split level 186: [/input, 3377] 
split level 187: [/input, 3347] 
split level 188: [/input, 3458] 
split level 189: [/input, 3410] 
split level 190: [/input, 3378] 
split level 191: [/input, 3379] 
split level 192: [/input, 3339] 
split level 193: [/input-8, 1617] 
split level 194: [/input, 3338] 
split level 195: [/input, 4037] 
split level 196: [/input, 3086] 
split level 197: [/input, 3380] 
split level 198: [/input, 3335] 
split level 199: [/input, 1393] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.22139883041381836
10 lb beta sum: 0.0, worst -0.22140514850616455
Time: prepare 0.0115    bound 0.1017    transfer 0.0028    finalize 0.0029    func 0.1214    
Accumulated time: func 0.1777    prepare 0.0216    bound 0.1575    transfer 0.0029    finalize 0.0030    
all_split False
======================Cut inference begins======================
max lb tensor(0.31540966) min lb tensor(-0.22139192)
Number of Verified Splits: 2 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 2.
#cuts 1-3: 2
#cuts >= 20: 0
BICCOS time: 0.010323047637939453 
BICCOS Cumulative time: 0.010323047637939453
Preprocessing time: 0.009953975677490234 Inference time: 0.00010848045349121094 Add cuts time: 5.2928924560546875e-05 Cut analysis time: 0.00020766258239746094
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.21597 (1), -0.21584 (1), -0.21580 (1), -0.21570 (1), -0.21555 (1), -0.21536 (1), -0.21495 (1), -0.21492 (1), -0.21463 (1), -0.21433 (1), -0.21432 (1), -0.21419 (1), -0.21415 (1), -0.21407 (1), -0.21374 (1), -0.21345 (1), -0.21340 (1), -0.21322 (1), -0.21306 (1), -0.21249 (1), 
Length of domains: 50
Time: pickout 0.0004    decision 0.5354    set_bounds 0.0088    solve 0.1215    add 0.0755    
Accumulated time: pickout 0.0004    decision 0.5354    set_bounds 0.0088    solve 0.1215    add 0.0755    
Current (lb-rhs): -0.2159719467163086
50 domains visited
Cumulative time: 0.8237957954406738

Shallow-BaB round 2
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 26] [/input-12, 26] [/input-12, 78] [/input-12, 26] [/input-12, 26] [/input-12, 26] 
split level 1: [/input-12, 26] [/input-12, 26] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 26] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 41] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] 
split level 3: [/input-12, 25] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.2045590877532959
10 lb beta sum: 0.34084898233413696, worst -0.20347905158996582
Time: prepare 0.0075    bound 0.1232    transfer 0.0013    finalize 0.0025    func 0.1371    
Accumulated time: func 0.3148    prepare 0.0294    bound 0.2806    transfer 0.0041    finalize 0.0055    
all_split False
======================Cut inference begins======================
max lb tensor(0.44849211) min lb tensor(-0.20346361)
Number of Verified Splits: 96 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 4.
#cuts 1-3: 4
#cuts >= 20: 0
BICCOS time: 0.01751852035522461 
BICCOS Cumulative time: 0.027841567993164062
Preprocessing time: 0.011794805526733398 Inference time: 0.0035109519958496094 Add cuts time: 0.0019636154174804688 Cut analysis time: 0.0002491474151611328
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.06807 (2), -0.06761 (2), -0.06761 (2), -0.06758 (2), -0.06716 (2), -0.06706 (2), -0.06679 (2), -0.06666 (2), -0.06630 (2), -0.06626 (2), -0.06558 (2), -0.06556 (2), -0.06543 (2), -0.06521 (2), -0.06499 (2), -0.06488 (2), -0.06488 (2), -0.06461 (2), -0.06373 (2), -0.06354 (2), 
Length of domains: 50
Time: pickout 0.0011    decision 0.0229    set_bounds 0.0118    solve 0.1372    add 0.2018    
Accumulated time: pickout 0.0014    decision 0.5583    set_bounds 0.0206    solve 0.2587    add 0.2772    
Current (lb-rhs): -0.06806868314743042
100 domains visited
Cumulative time: 1.2230324745178223

Shallow-BaB round 3
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] 
split level 1: [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 25] [/input-12, 25] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] [/input-12, 41] 
split level 2: [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 45] [/input-12, 45] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] 
split level 3: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-8, 1366] [/input-8, 1366] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.08006572723388672
10 lb beta sum: 0.31986698508262634, worst -0.02601790428161621
Time: prepare 0.0078    bound 0.1252    transfer 0.0013    finalize 0.0024    func 0.1398    
Accumulated time: func 0.4546    prepare 0.0374    bound 0.4058    transfer 0.0054    finalize 0.0078    
all_split False
======================Cut inference begins======================
max lb tensor(0.30665380) min lb tensor(-0.02591717)
Number of Verified Splits: 374 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 40.
#cuts 1-3: 40
#cuts >= 20: 0
BICCOS time: 0.03733468055725098 
BICCOS Cumulative time: 0.06517624855041504
Preprocessing time: 0.011818885803222656 Inference time: 0.014487266540527344 Add cuts time: 0.010093212127685547 Cut analysis time: 0.0009353160858154297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.02592 (3), -0.02591 (3), -0.02591 (3), -0.02580 (3), -0.02578 (3), -0.02578 (3), -0.02181 (3), -0.02166 (3), -0.01393 (3), -0.01384 (3), -0.00610 (3), -0.00610 (3), -0.00609 (3), -0.00609 (3), -0.00607 (3), -0.00607 (3), -0.00602 (3), -0.00602 (3), -0.00602 (3), -0.00602 (3), 
Length of domains: 26
Time: pickout 0.0079    decision 0.0215    set_bounds 0.0160    solve 0.1399    add 0.2128    
Accumulated time: pickout 0.0093    decision 0.5798    set_bounds 0.0366    solve 0.3986    add 0.4900    
Current (lb-rhs): -0.0259171724319458
126 domains visited
Cumulative time: 1.6655712127685547

Shallow-BaB round 4
batch: 26
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 25] [/input-12, 78] [/input-12, 78] [/input-12, 25] [/input-12, 78] 
split level 1: [/input-12, 25] [/input-12, 25] [/input-12, 41] [/input-12, 41] [/input-12, 45] [/input-12, 45] [/input-12, 25] [/input-12, 25] [/input-12, 45] [/input-12, 45] 
split level 2: [/input-12, 45] [/input-12, 45] [/input-12, 25] [/input-12, 25] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] 
split level 3: [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1628] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] 
split level 4: [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] [/input-8, 1357] 
split level 5: [/input-8, 1396] [/input-8, 1396] [/input-8, 1396] [/input-8, 1396] [/input-8, 1405] [/input-8, 1396] [/input-8, 1396] [/input-8, 1396] [/input-8, 1396] [/input-8, 1405] 
split level 6: [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1396] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1405] [/input-8, 1396] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.06472337245941162
10 lb beta sum: 1.667074203491211, worst -0.017656564712524414
Time: prepare 0.0068    bound 0.1596    transfer 0.0019    finalize 0.0027    func 0.1735    
Accumulated time: func 0.6281    prepare 0.0446    bound 0.5655    transfer 0.0073    finalize 0.0106    
all_split False
======================Cut inference begins======================
max lb tensor(0.18981075) min lb tensor(-0.01755691)
Number of Verified Splits: 264 of 364
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 54.
#cuts 1-3: 40
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.02915668487548828 
BICCOS Cumulative time: 0.09433293342590332
Preprocessing time: 0.010668277740478516 Inference time: 0.01204371452331543 Add cuts time: 0.005112648010253906 Cut analysis time: 0.0013320446014404297
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00924 (4), -0.00924 (4), -0.00923 (4), -0.00919 (4), -0.00919 (4), -0.00918 (4), -0.00876 (4), -0.00867 (4), -0.00865 (4), -0.00856 (4), -0.00795 (4), -0.00785 (4), -0.00641 (4), -0.00640 (4), -0.00639 (4), -0.00638 (4), -0.00636 (4), -0.00636 (4), -0.00570 (4), -0.00570 (4), 
Length of domains: 50
Time: pickout 0.0076    decision 0.0311    set_bounds 0.0124    solve 0.1736    add 0.1543    
Accumulated time: pickout 0.0169    decision 0.6109    set_bounds 0.0490    solve 0.5722    add 0.6443    
Current (lb-rhs): -0.009239554405212402
176 domains visited
Cumulative time: 2.07417368888855

Shallow-BaB round 5
batch: 50
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] [/input-12, 78] 
split level 1: [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] [/input-12, 25] 
split level 2: [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] [/input-12, 45] 
split level 3: [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] [/input-8, 1366] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05489778518676758
10 lb beta sum: 1.5050369501113892, worst -0.027826547622680664
Time: prepare 0.0082    bound 0.1735    transfer 0.0009    finalize 0.0027    func 0.1880    
Accumulated time: func 0.8161    prepare 0.0530    bound 0.7390    transfer 0.0082    finalize 0.0133    
all_split False
======================Cut inference begins======================
max lb tensor(0.19585055) min lb tensor(-0.00485277)
Number of Verified Splits: 326 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 54.
#cuts 1-3: 40
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.3036339282989502 
BICCOS Cumulative time: 0.3979668617248535
Preprocessing time: 0.012816190719604492 Inference time: 0.018268346786499023 Add cuts time: 0.271059513092041 Cut analysis time: 0.001489877700805664
======================Cut inference ends========================
Current worst splitting domains lb-rhs (depth):
-0.00477 (5), -0.00477 (5), -0.00477 (5), -0.00477 (5), -0.00477 (5), -0.00476 (5), -0.00469 (5), -0.00469 (5), -0.00469 (5), -0.00469 (5), -0.00405 (5), -0.00405 (5), -0.00405 (5), -0.00405 (5), -0.00398 (5), -0.00397 (5), -0.00397 (5), -0.00397 (5), -0.00157 (5), -0.00156 (5), 
Length of domains: 50
Time: pickout 0.0014    decision 0.0209    set_bounds 0.0185    solve 0.1882    add 0.1277    
Accumulated time: pickout 0.0183    decision 0.6318    set_bounds 0.0675    solve 0.7604    add 0.7721    
Current (lb-rhs): -0.0047730207443237305
226 domains visited
Cumulative time: 2.7350189685821533

Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41, 78]), tensor([-1., -1., -1.]), tensor([0, 0, 0]), tensor([2.82705859e-10, 6.40810430e-02, 1.95399880e-01]), tensor([0, 1, 2]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41, 78, 25]), tensor([-1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([2.82705859e-10, 6.40810430e-02, 2.32352037e-02, 1.10275019e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41, 78, 25]), tensor([-1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([2.82705859e-10, 6.40810430e-02, 2.32352037e-02, 6.62224740e-02]), tensor([0, 1, 2, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41]), tensor([-1.,  1.]), tensor([0, 0]), tensor([2.82705859e-10, 1.16536066e-01]), tensor([0, 1]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357], [-1.0], [0], [1.8219751250557567e+29], [2]), '/input-12': (tensor([26, 41, 78]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.85634711e-13, 6.31393790e-02, 1.85930178e-01]), tensor([0, 1, 3]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357], [-1.0], [0], [1.8219751250557567e+29], [2]), '/input-12': (tensor([26, 41, 78, 25]), tensor([ 1., -1.,  1., -1.]), tensor([0, 0, 0, 0]), tensor([1.85634711e-13, 6.31393790e-02, 8.26095231e-03, 1.07341278e-02]), tensor([0, 1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357], [-1.0], [0], [1.8219751250557567e+29], [2]), '/input-12': (tensor([26, 41, 78, 25]), tensor([ 1., -1.,  1.,  1.]), tensor([0, 0, 0, 0]), tensor([1.85634711e-13, 6.31393790e-02, 8.26095231e-03, 5.79920262e-02]), tensor([0, 1, 3, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357, 1393], [1.0, -1.0], [0, 0], [1.82193281265207e+29, 0.020192163065075874], [2, 3]), '/input-12': (tensor([26, 41, 78]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.85634711e-13, 6.31393790e-02, 1.78402826e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357, 1393], [1.0, -1.0], [0, 0], [1.82193281265207e+29, 0.020192163065075874], [2, 3]), '/input-12': (tensor([26, 41, 78]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.85634711e-13, 6.31393790e-02, 3.61178978e-03]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357, 1393], [1.0, 1.0], [0, 0], [1.82193281265207e+29, 0.013013260439038277], [2, 3]), '/input-12': (tensor([26, 41, 78]), tensor([ 1., -1., -1.]), tensor([0, 0, 0]), tensor([1.85634711e-13, 6.31393790e-02, 1.75604627e-01]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([1357, 1393], [1.0, 1.0], [0, 0], [1.82193281265207e+29, 0.013013260439038277], [2, 3]), '/input-12': (tensor([26, 41, 78]), tensor([ 1., -1.,  1.]), tensor([0, 0, 0]), tensor([1.85634711e-13, 6.31393790e-02, 3.87828215e-03]), tensor([0, 1, 4]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26, 41]), tensor([1., 1.]), tensor([0, 0]), tensor([1.85634711e-13, 1.16607115e-01]), tensor([0, 1]))}
Shallow branching resets to n domains:  12
cut disabled for branching node selection
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.05363947153091431
10 lb beta sum: 0.7108464241027832, worst -0.0015958547592163086
Time: prepare 0.0007    bound 0.1681    transfer 0.0002    finalize 0.0002    func 0.1693    
Accumulated time: func 0.9854    prepare 0.0537    bound 0.9070    transfer 0.0084    finalize 0.0135    
After pruning, left:  1

Back to Regular BaB

BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 25] 
split level 1: [/input-12, 45] 
split level 2: [/input-8, 1366] 
split level 3: [/input-8, 1628] 
split level 4: [/input-8, 1404] 
split level 5: [/input-8, 1396] 
split level 6: [/input-8, 402] 
split level 7: [/input-8, 641] 
cut re-enabled after branching node selection
0 lb beta sum: 2.651376724243164, worst 0.009907007217407227

all verified at 0th iter
Time: prepare 0.0113    bound 0.0060    transfer 0.0024    finalize 0.0014    func 0.0228    
Accumulated time: func 1.0082    prepare 0.0654    bound 0.9131    transfer 0.0108    finalize 0.0149    
all_split False
======================Cut inference begins======================
max lb tensor(0.66061389) min lb tensor(0.00990701)
Number of Verified Splits: 256 of 256
No cut inferred: All or none verified.
Total number of valid cuts: 54.
#cuts 1-3: 40
#cuts 4-6: 14
#cuts >= 20: 0
BICCOS time: 0.008211135864257812 
BICCOS Cumulative time: 0.40617799758911133
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0006    decision 0.0230    set_bounds 0.0333    solve 0.0228    add 0.0001    
Accumulated time: pickout 0.0190    decision 0.6548    set_bounds 0.1008    solve 0.7832    add 0.7721    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
226 domains visited
Cumulative time: 3.0217199325561523


Properties batch 3, size 1
Remaining timeout: 168.18759059906006
Verifying property 3 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 4, size 1
Remaining timeout: 168.18749618530273
Verifying property 4 with 1 instances.
##### Instance 198 first 10 spec matrices: 
tensor([[[ 1.,  0.,  0.,  0.,  0., -1.,  0.,  0.,  0.,  0.]]])
thresholds: tensor([0.], device='cuda:0') ######
Remaining spec index tensor([0], device='cuda:0') with bounds tensor([[-0.04805171]], device='cuda:0') need to verify.
Model prediction is: tensor([-10.51362133, -15.75713921, -11.03450871, -11.39007473, -12.12888622,
        -11.76603127, -13.25793362, -13.95927143, -13.38565063, -14.89714527],
       device='cuda:0')
build_with_refined_bounds batch [1/1]
setting alpha for layer /input-4 start_node /16 with alignment adjustment
setting alpha for layer /12 start_node /16 with alignment adjustment
setting alpha for layer /15 start_node /16 with alignment adjustment
all alpha initialized
directly get lb and ub from refined bounds
c shape: torch.Size([1, 1, 10])
lA shapes: [torch.Size([1, 1, 16, 16, 16]), torch.Size([1, 1, 32, 8, 8]), torch.Size([1, 1, 100])]
(alpha-)CROWN with fixed intermediate bounds: tensor([[-0.04805171]], device='cuda:0') tensor([[inf]], device='cuda:0')
Intermediate layers: /input,/input-8,/input-12,/16
Keeping alphas for these layers: ['/16']
Keeping alphas for these layers: ['/16']
Node /input-4 input 0: size torch.Size([16, 16, 16]) unstable 766
Node /12 input 0: size torch.Size([32, 8, 8]) unstable 172
Node /15 input 0: size torch.Size([100]) unstable 14
-----------------
# of unstable neurons: 952
-----------------

======================Cut verification begins======================
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Cut time: 0.00011134147644042969
======================Cut verification ends======================
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04805189371109009
10 lb beta sum: 0.0, worst -0.04805862903594971
Early stop at 11th iter due to 10 iterations no improvement!
Time: prepare 0.0002    bound 0.0599    transfer 0.0001    finalize 0.0001    func 0.0604    
Accumulated time: func 0.0604    prepare 0.0002    bound 0.0599    transfer 0.0001    finalize 0.0001    
Shallow-BaB round 1
batch: 1
cut disabled for branching node selection
splitting decisions: 
split level 0: [/input-12, 26] 
split level 1: [/input-12, 41] 
split level 2: [/input-12, 25] 
split level 3: [/input-12, 78] 
split level 4: [/input-12, 45] 
split level 5: [/input-8, 413] 
split level 6: [/input-8, 648] 
split level 7: [/input-8, 1366] 
split level 8: [/input-8, 1394] 
split level 9: [/input-8, 1396] 
split level 10: [/input-8, 1393] 
split level 11: [/input-8, 1404] 
split level 12: [/input-8, 1356] 
split level 13: [/input-8, 1321] 
split level 14: [/input-8, 1628] 
split level 15: [/input-8, 1369] 
split level 16: [/input-8, 1357] 
split level 17: [/input-8, 656] 
split level 18: [/input-8, 1395] 
split level 19: [/input-8, 1134] 
split level 20: [/input-8, 641] 
split level 21: [/input-8, 1370] 
split level 22: [/input-8, 664] 
split level 23: [/input-8, 1405] 
split level 24: [/input-8, 1333] 
split level 25: [/input, 1667] 
split level 26: [/input-8, 1354] 
split level 27: [/input, 1671] 
split level 28: [/input-8, 412] 
split level 29: [/input-8, 422] 
split level 30: [/input-8, 1347] 
split level 31: [/input-8, 1325] 
split level 32: [/input-8, 672] 
split level 33: [/input-8, 414] 
split level 34: [/input-8, 1353] 
split level 35: [/input-8, 1403] 
split level 36: [/input, 3494] 
split level 37: [/input-8, 1402] 
split level 38: [/input, 2181] 
split level 39: [/input, 1668] 
split level 40: [/input-8, 1345] 
split level 41: [/input-8, 1362] 
split level 42: [/input-8, 402] 
split level 43: [/input-8, 680] 
split level 44: [/input-8, 419] 
split level 45: [/input-8, 1361] 
split level 46: [/input-8, 1599] 
split level 47: [/input-8, 803] 
split level 48: [/input, 1684] 
split level 49: [/input-8, 1619] 
split level 50: [/input, 3524] 
split level 51: [/input, 3428] 
split level 52: [/input-8, 1437] 
split level 53: [/input, 1396] 
split level 54: [/input, 3507] 
split level 55: [/input-8, 1832] 
split level 56: [/input-8, 861] 
split level 57: [/input, 2358] 
split level 58: [/input-8, 1346] 
split level 59: [/input-8, 1618] 
split level 60: [/input, 2180] 
split level 61: [/input-8, 1342] 
split level 62: [/input-8, 1441] 
split level 63: [/input, 1444] 
split level 64: [/input, 3345] 
split level 65: [/input, 3330] 
split level 66: [/input, 3470] 
split level 67: [/input, 1432] 
split level 68: [/input, 1641] 
split level 69: [/input, 33] 
split level 70: [/input, 1652] 
split level 71: [/input-8, 1863] 
split level 72: [/input, 2228] 
split level 73: [/input, 460] 
split level 74: [/input-8, 1434] 
split level 75: [/input, 2101] 
split level 76: [/input, 3089] 
split level 77: [/input, 1431] 
split level 78: [/input, 2227] 
split level 79: [/input, 1415] 
split level 80: [/input, 3443] 
split level 81: [/input, 2966] 
split level 82: [/input-8, 286] 
split level 83: [/input, 3346] 
split level 84: [/input, 1434] 
split level 85: [/input, 2486] 
split level 86: [/input, 327] 
split level 87: [/input, 408] 
split level 88: [/input, 2330] 
split level 89: [/input, 429] 
split level 90: [/input, 279] 
split level 91: [/input, 3523] 
split level 92: [/input, 312] 
split level 93: [/input, 3240] 
split level 94: [/input, 3385] 
split level 95: [/input, 3522] 
split level 96: [/input, 3509] 
split level 97: [/input, 328] 
split level 98: [/input, 3397] 
split level 99: [/input, 1574] 
split level 100: [/input, 2341] 
split level 101: [/input, 2499] 
split level 102: [/input, 2529] 
split level 103: [/input, 1429] 
split level 104: [/input, 2965] 
split level 105: [/input, 2334] 
split level 106: [/input, 3450] 
split level 107: [/input-8, 1625] 
split level 108: [/input, 3427] 
split level 109: [/input, 3490] 
split level 110: [/input, 3556] 
split level 111: [/input, 65] 
split level 112: [/input-8, 1341] 
split level 113: [/input, 3441] 
split level 114: [/input, 2321] 
split level 115: [/input, 1448] 
split level 116: [/input, 2970] 
split level 117: [/input, 3409] 
split level 118: [/input, 2331] 
split level 119: [/input, 49] 
split level 120: [/input, 3381] 
split level 121: [/input, 3331] 
split level 122: [/input, 2322] 
split level 123: [/input, 17] 
split level 124: [/input, 2326] 
split level 125: [/input, 3254] 
split level 126: [/input, 1460] 
split level 127: [/input-8, 447] 
split level 128: [/input, 3361] 
split level 129: [/input, 1458] 
split level 130: [/input, 2357] 
split level 131: [/input, 3457] 
split level 132: [/input, 2332] 
split level 133: [/input, 3404] 
split level 134: [/input-8, 1079] 
split level 135: [/input, 2324] 
split level 136: [/input, 3526] 
split level 137: [/input, 3099] 
split level 138: [/input, 2501] 
split level 139: [/input, 2325] 
split level 140: [/input, 2183] 
split level 141: [/input, 2584] 
split level 142: [/input, 3332] 
split level 143: [/input, 2204] 
split level 144: [/input, 3540] 
split level 145: [/input, 3142] 
split level 146: [/input, 1475] 
split level 147: [/input, 3334] 
split level 148: [/input, 2498] 
split level 149: [/input, 3554] 
split level 150: [/input, 3411] 
split level 151: [/input, 2323] 
split level 152: [/input, 1297] 
split level 153: [/input, 445] 
split level 154: [/input, 3362] 
split level 155: [/input, 2482] 
split level 156: [/input, 3521] 
split level 157: [/input, 3425] 
split level 158: [/input, 3426] 
split level 159: [/input-8, 1610] 
split level 160: [/input, 3473] 
split level 161: [/input, 280] 
split level 162: [/input, 18] 
split level 163: [/input, 2333] 
split level 164: [/input, 3442] 
split level 165: [/input, 3894] 
split level 166: [/input, 3266] 
split level 167: [/input, 2172] 
split level 168: [/input, 3538] 
split level 169: [/input, 3395] 
split level 170: [/input, 34] 
split level 171: [/input, 2372] 
split level 172: [/input, 4038] 
split level 173: [/input, 1578] 
split level 174: [/input, 3143] 
split level 175: [/input, 3348] 
split level 176: [/input, 1674] 
split level 177: [/input, 3378] 
split level 178: [/input, 3876] 
split level 179: [/input, 2337] 
split level 180: [/input, 3377] 
split level 181: [/input, 3250] 
split level 182: [/input, 2513] 
split level 183: [/input, 3336] 
split level 184: [/input, 3910] 
split level 185: [/input-8, 1609] 
split level 186: [/input, 3086] 
split level 187: [/input, 3410] 
split level 188: [/input, 1298] 
split level 189: [/input, 2419] 
split level 190: [/input, 3539] 
split level 191: [/input, 1582] 
split level 192: [/input, 3349] 
split level 193: [/input, 3347] 
split level 194: [/input, 3380] 
split level 195: [/input, 3335] 
split level 196: [/input, 3555] 
split level 197: [/input, 3379] 
split level 198: [/input, 1313] 
split level 199: [/input, 1393] 
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst -0.04782414436340332
10 lb beta sum: 0.0, worst -0.04781836271286011
Time: prepare 0.0116    bound 0.1108    transfer 0.0009    finalize 0.0034    func 0.1295    
Accumulated time: func 0.1899    prepare 0.0222    bound 0.1707    transfer 0.0010    finalize 0.0035    
all_split False
======================Cut inference begins======================
max lb tensor(0.13099265) min lb tensor(-0.04780817)
Number of Verified Splits: 8 of 400
Original cuts are inferred.
BICCOS cuts are added to the cut module.
all start nodes to check full crown or not: [BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True), BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True), BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True), BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)]
use patches cut:  False
skip cut beta crown opt for patches layer: BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
skip cut beta crown opt for patches layer: BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
Total number of valid cuts: 1.
#cuts 1-3: 1
#cuts >= 20: 0
BICCOS time: 0.012138605117797852 
BICCOS Cumulative time: 0.012138605117797852
Preprocessing time: 0.011459589004516602 Inference time: 0.0003657341003417969 Add cuts time: 0.00013327598571777344 Cut analysis time: 0.0001800060272216797
======================Cut inference ends========================
Length of domains: 0
Time: pickout 0.0004    decision 0.5331    set_bounds 0.0109    solve 0.1296    add 0.0112    
Accumulated time: pickout 0.0004    decision 0.5331    set_bounds 0.0109    solve 0.1296    add 0.0112    
No domains left, verification finished!
Current (lb-rhs): 1.0000000116860974e-07
0 domains visited
No domains left, MTS early stop!
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26]), tensor([-1.]), tensor([0]), tensor([7.46203099e-10]), tensor([0]))}
Restore {'/input': ([], [], [], [], []), '/input-8': ([], [], [], [], []), '/input-12': (tensor([26]), tensor([1.]), tensor([0]), tensor([7.46203099e-10]), tensor([0]))}
Shallow branching resets to n domains:  2
cut re-enabled after branching node selection
0 lb beta sum: 0.0, worst 0.09600555896759033

all verified at 0th iter
Time: prepare 0.0003    bound 0.0043    transfer 0.0001    finalize 0.0001    func 0.0049    
Accumulated time: func 0.1948    prepare 0.0225    bound 0.1750    transfer 0.0011    finalize 0.0037    
After pruning, left:  0

Back to Regular BaB


Properties batch 5, size 1
Remaining timeout: 167.17349100112915
Verifying property 5 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 6, size 1
Remaining timeout: 167.17342853546143
Verifying property 6 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 7, size 1
Remaining timeout: 167.17340564727783
Verifying property 7 with 1 instances.
Verified by alpha-CROWN bound!

Properties batch 8, size 1
Remaining timeout: 167.1733419895172
Verifying property 8 with 1 instances.
Verified by alpha-CROWN bound!
Result: safe in 32.8268 seconds

 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% idx: 199, vnnlib ID: 199 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Model: BoundedModule(
  (/input-1): BoundInput(name=/input-1, inputs=[], perturbed=True)
  (/1): BoundParams(name=/1, inputs=[], perturbed=False)
  (/2): BoundParams(name=/2, inputs=[], perturbed=False)
  (/3): BoundParams(name=/3, inputs=[], perturbed=False)
  (/4): BoundParams(name=/4, inputs=[], perturbed=False)
  (/5): BoundParams(name=/5, inputs=[], perturbed=False)
  (/6): BoundParams(name=/6, inputs=[], perturbed=False)
  (/7): BoundParams(name=/7, inputs=[], perturbed=False)
  (/8): BoundParams(name=/8, inputs=[], perturbed=False)
  (/input): BoundConv(name=/input, inputs=[/input-1, /1, /2], perturbed=True)
  (/input-4): BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
  (/input-8): BoundConv(name=/input-8, inputs=[/input-4, /3, /4], perturbed=True)
  (/12): BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
  (/13): BoundFlatten(name=/13, inputs=[/12], perturbed=True)
  (/input-12): BoundLinear(name=/input-12, inputs=[/13, /5, /6], perturbed=True)
  (/15): BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
  (/16): BoundLinear(name=/16, inputs=[/15, /7, /8], perturbed=True)
)
Original output: tensor([[-5.87905216, -4.83922100, -4.88939095, -3.64813495, -4.49923706,
         -4.07969141, -3.29299521, -4.57696962, -6.84988213, -3.62618971]],
       device='cuda:0')
Split layers:
Nonlinear functions:
   BoundRelu(name=/input-4, inputs=[/input], perturbed=True)
   BoundRelu(name=/12, inputs=[/input-8], perturbed=True)
   BoundRelu(name=/15, inputs=[/input-12], perturbed=True)
layer /input-4 using sparse-features alpha with shape [599]; unstable size 599; total size 4096 ([1, 16, 16, 16])
layer /input-4 start_node /input-8 using sparse-spec alpha [2, 271, 1, 599] with unstable size 270 total_size 2048 output_shape (32, 8, 8)
layer /input-4 start_node /input-12 using sparse-spec alpha [2, 24, 1, 599] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /input-4 start_node /16 using full alpha [2, 9, 1, 599] with unstable size None total_size 9 output_shape 9
layer /12 using sparse-features alpha with shape [270]; unstable size 270; total size 2048 ([1, 32, 8, 8])
layer /12 start_node /input-12 using sparse-spec alpha [2, 24, 1, 270] with unstable size 23 total_size 100 output_shape torch.Size([100])
layer /12 start_node /16 using full alpha [2, 9, 1, 270] with unstable size None total_size 9 output_shape 9
layer /15 using sparse-features alpha with shape [23]; unstable size 23; total size 100 ([1, 100])
layer /15 start_node /16 using full alpha [2, 9, 1, 23] with unstable size None total_size 9 output_shape 9
Optimizable variables initialized.
initial CROWN bounds: tensor([[ 0.17035961, -1.17387700, -0.10739541, -1.19881439, -0.49474239,
         -1.09854054, -0.81328773,  0.67185187, -1.93993378]], device='cuda:0') None
Remain 7 labels need to be attacked.
Attack parameters: initialization=uniform, steps=100, restarts=50, alpha=0.008051544427871704, initialization=uniform, GAMA=False
Model output of first 5 examples:
 tensor([[-5.87905216, -4.83922100, -4.88939095, -3.64813495, -4.49923706,
         -4.07969141, -3.29299521, -4.57696962, -6.84988213, -3.62618971]],
       device='cuda:0')
  0%|          | 0/1 [00:00<?, ?it/s]  0%|          | 0/1 [00:00<?, ?it/s]
pgd early stop
Adv example prediction (first 2 examples and 2 restarts):
 tensor([[[-5.36140919, -4.46472359, -4.55021334, -3.14537120, -4.19085550,
          -3.51219034, -3.41958308, -4.05005741, -6.27771091, -3.11072206],
         [-5.36140919, -4.46472359, -4.55021334, -3.14537120, -4.19085550,
          -3.51219034, -3.41958308, -4.05005741, -6.27771091, -3.11072206]]],
       device='cuda:0')
PGD attack margin (first 2 examples and 10 specs):
 tensor([[[ 1.04514050,  1.13063025, -0.27421188,  0.77127242,  0.09260726,
           0.63047433, -0.30886102]]], device='cuda:0')
number of violation:  2
Attack finished in 0.0144 seconds.
PGD attack succeeded!

Checking and Saving Counterexample in check_and_save_cex

verified_status unsafe-pgd
verified_success True
pgd attack succeed in attack_after_crown
Result: unsafe-pgd in 0.0861 seconds
############# Summary #############
Final verified acc: 47.5% (total 200 examples)
Problem instances count: 200 , total verified (safe/unsat): 95 , total falsified (unsafe/sat): 100 , timeout: 5
mean time for ALL instances (total 200):7.95757902054184, max time: 240.77014303207397
mean time for verified SAFE instances(total 95): 5.008790380076358, max time: 125.05730748176575
mean time for verified (SAFE + UNSAFE) instances (total 195): 2.51241518167349, max time: [5.195119857788086, 1.1862568855285645, 0.0724186897277832, 0.07593083381652832, 0.08425474166870117, 0.07517099380493164, 0.07993841171264648, 0.08633208274841309, 0.09094524383544922, 0.07989668846130371, 0.08463525772094727, 0.07239580154418945, 0.07799911499023438, 0.07554268836975098, 0.06985998153686523, 0.11622309684753418, 0.11765217781066895, 0.09087777137756348, 0.08371186256408691, 0.08156991004943848, 0.09332060813903809, 0.09310150146484375, 0.07507681846618652, 0.08234596252441406, 0.07380485534667969, 0.08822178840637207, 0.0699625015258789, 0.07782554626464844, 0.08053278923034668, 0.07468914985656738, 0.08556556701660156, 0.08397388458251953, 0.0766904354095459, 0.0736551284790039, 0.08887887001037598, 0.0743255615234375, 0.07081365585327148, 0.0733039379119873, 0.07852768898010254, 0.06925106048583984, 0.06993341445922852, 0.08084344863891602, 0.0812070369720459, 0.11014795303344727, 0.07901239395141602, 0.08018708229064941, 0.04588460922241211, 0.0677640438079834, 0.07074689865112305, 0.07171368598937988, 0.08591651916503906, 0.07287859916687012, 0.07026338577270508, 0.08603429794311523, 0.03704261779785156, 0.08299565315246582, 0.0982828140258789, 0.06971216201782227, 0.07746362686157227, 0.06943774223327637, 0.07471513748168945, 0.08176589012145996, 0.048786163330078125, 0.07127261161804199, 0.0760645866394043, 0.10158014297485352, 0.08573365211486816, 0.08508038520812988, 0.11181330680847168, 0.07063817977905273, 0.07842659950256348, 0.08430624008178711, 0.07152915000915527, 0.08821940422058105, 0.08019542694091797, 0.07667040824890137, 0.07098865509033203, 0.08673763275146484, 0.06925702095031738, 0.07217764854431152, 0.0711357593536377, 0.06775045394897461, 0.06950616836547852, 0.07490015029907227, 0.0738077163696289, 0.07148170471191406, 0.08310794830322266, 0.07741475105285645, 0.07354187965393066, 0.07379841804504395, 0.08321118354797363, 0.07833623886108398, 0.0777292251586914, 0.08249497413635254, 0.07914400100708008, 0.05581521987915039, 0.07280755043029785, 0.0739748477935791, 0.08575010299682617, 0.08614039421081543]
mean time for verified SAFE + TIMEOUT instances (total 100): 15.774300093650817, max time: [240.77014303207397, 213.42625069618225, 204.71569108963013, 219.90937852859497, 222.77345991134644] 
mean time for verified UNSAFE instances (total 100): 0.14085874319076538, max time: 5.195119857788086
unsafe-pgd (total 100), index: [0, 1, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 18, 19, 25, 29, 32, 34, 35, 36, 43, 44, 45, 46, 50, 53, 56, 57, 58, 59, 61, 63, 64, 65, 66, 67, 69, 72, 75, 77, 78, 80, 82, 87, 88, 90, 91, 92, 94, 96, 98, 99, 100, 101, 102, 105, 106, 108, 113, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 130, 134, 135, 137, 138, 141, 143, 145, 149, 150, 151, 152, 154, 155, 156, 163, 165, 170, 173, 174, 175, 176, 181, 184, 185, 188, 191, 194, 196, 199]
safe-incomplete (total 73), index: [2, 8, 14, 17, 20, 21, 22, 23, 26, 27, 28, 30, 31, 33, 37, 39, 40, 41, 47, 48, 49, 51, 52, 62, 68, 71, 73, 74, 76, 79, 81, 83, 85, 86, 93, 104, 109, 110, 111, 114, 115, 117, 118, 121, 131, 133, 136, 140, 142, 144, 146, 147, 148, 153, 157, 159, 161, 162, 164, 166, 168, 171, 177, 178, 179, 180, 182, 186, 189, 190, 192, 193, 197]
safe (total 22), index: [11, 38, 42, 54, 60, 70, 84, 89, 95, 103, 107, 112, 116, 132, 139, 158, 160, 167, 169, 172, 187, 198]
unknown (total 5), index: [24, 55, 97, 183, 195]
